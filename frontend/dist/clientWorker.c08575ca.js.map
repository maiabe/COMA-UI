{"mappings":"AAAA,IAAI,KAAK;AACT,IAAI,oBAAoB,CAAC;AACzB,MAAM,UAAU;AAChB,4CAA4C;AAC5C,MAAM,WAAW;AACjB,mDAAmD;AAEnD,MAAM,iBAAiB,IAAI;AAC3B,eAAe,GAAG,CAAC,oBAAoB;AACvC,eAAe,GAAG,CAAC,iBAAiB;AACpC,eAAe,GAAG,CAAC,eAAe;AAClC,eAAe,GAAG,CAAC,cAAc;AACjC,eAAe,GAAG,CAAC,gBAAgB;AACnC,eAAe,GAAG,CAAC,eAAe;AAClC,eAAe,GAAG,CAAC,sBAAsB;AACzC,eAAe,GAAG,CAAC,qBAAqB;AACxC,eAAe,GAAG,CAAC,+BAA+B;AAClD,eAAe,GAAG,CAAC,kCAAkC;AACrD,eAAe,GAAG,CAAC,qBAAqB;AACxC,eAAe,GAAG,CAAC,mBAAmB;AAEtC,YAAY,CAAA,IAAK,eAAe,GAAG,CAAC,EAAE,IAAI,CAAC,IAAI,EAAE;AAEjD,SAAS,iBAAiB,CAAC;IACvB,MAAM,UAAU;QAAE,SAAS;IAAoB;IAC/C,SAAS,SAAS,SACb,IAAI,CAAC,CAAA;QACF,aAAa;IACjB;AACR;AAEA,SAAS,WAAW,CAAC;IACjB,MAAM,UAAU;QAAE,SAAS;QAAe,WAAW,EAAE,IAAI,CAAC,SAAS;IAAC;IACtE,SAAS,SAAS,SACb,IAAI,CAAC,CAAA;IACF,8BAA8B;IAC9B,yBAAyB;IACzB,MAAM;IACV;AACR;AAEA,SAAS,YAAY,CAAC;IAClB,MAAM,UAAU;QAAE,SAAS;QAAgB,YAAY,EAAE,IAAI,CAAC,UAAU;IAAC;IACzE,QAAQ,GAAG,CAAC,EAAE,IAAI;IAClB,SAAS,SAAS,SACb,IAAI,CAAC,CAAA;QACF,aAAa;IACrB;AACJ;AAEA,SAAS,UAAU,CAAC;AAChB,6CAA6C;AAC7C,6BAA6B;AAC7B,sBAAsB;AACtB,6BAA6B;AAC7B,yCAAyC;AACzC,oCAAoC;AACpC,iBAAiB;AACjB,UAAU;AACd;AAEA,SAAS,WAAW,CAAC;AACjB,8CAA8C;AAC9C,6BAA6B;AAC7B,sBAAsB;AACtB,6BAA6B;AAC7B,yCAAyC;AACzC,oCAAoC;AACpC,iBAAiB;AACjB,UAAU;AACd;AACA,SAAS,YAAY,CAAC;IAClB,KAAK,EAAE,IAAI,CAAC,EAAE;IACd,YAAY;QAAE,MAAM;QAAa,MAAM,CAAC,iBAAiB,EAAE,GAAG,CAAC;IAAC;AACpE;AAEA,SAAS,gBAAgB,CAAC;IACtB,QAAQ,GAAG,CAAC,EAAE,IAAI;AAClB;;;mBAGe,GACnB;AAEA,IAAI;AACJ,MAAM,eAAe;IACjB,aAAa,YAAY,CAAA;QACrB,SAAS,KAAK;YAAE,MAAM;YAAyB,UAAU;QAAG,GAAG,IAAI,CAAC,CAAA;YAChE,aAAa;QACjB;IACJ,GAAG;AACP;AAEA,MAAM,oBAAoB,IAAI;AAE9B,kBAAkB,GAAG,CAAC,mBAAmB;AACzC,kBAAkB,GAAG,CAAC,gBAAgB;AACtC,kBAAkB,GAAG,CAAC,iBAAiB;AACvC,kBAAkB,GAAG,CAAC,mBAAmB;AACzC,kEAAkE,GAClE,kBAAkB,GAAG,CAAC,yBAAyB;AAC/C,kBAAkB,GAAG,CAAC,sBAAsB;AAC5C,kBAAkB,GAAG,CAAC,kCAAkC;AACxD,kBAAkB,GAAG,CAAC,qCAAqC;AAC3D,kBAAkB,GAAG,CAAC,+BAA+B;AAGrD,SAAS,yBAAyB,QAAQ;IACtC,kBAAkB;IAClB,YAAY;QAAE,MAAM;QAAwB,UAAU;QAAI,UAAU;IAAS;AACjF;AAEA,SAAS,kCAAkC,SAAS,EAAE,SAAS,EAAE,cAAc,EAAE,QAAQ;IACrF,oBAAoB;IACpB,YAAY;QAAE,MAAM;QAAkC,UAAU;QAAI,WAAW;QAAW,WAAW;QAAW,gBAAgB;QAAgB,MAAM;IAAS;AACnK;AACA,SAAS,qCAAqC,SAAS,EAAE,cAAc,EAAE,QAAQ;IAC7E,YAAY;QAAE,MAAM;QAAqC,UAAU;QAAI,WAAW;QAAW,gBAAgB;QAAgB,MAAM;IAAS;AAChJ;AAEA,SAAS,iBAAiB,SAAS,EAAE,KAAK,EAAE,MAAM;IAC9C,YAAY;QAAE,MAAM;QAAsB,UAAU;QAAI,WAAW;QAAW,OAAO;QAAO,SAAS;IAAO;AAChH;AAEA,SAAS,0BAA0B,IAAI,EAAE,QAAQ;IAC7C,QAAQ,GAAG,CAAC;IACZ,IAAI,aAAa,QAAQ,CAAC,KAAK,WAAW,CAAC;IAC3C,sBAAsB;IACtB,IAAI,KAAK,MAAM,EACX,OAAQ,KAAK,MAAM;QACf,KAAK;YACD,aAAa,WAAW,IAAI,CAAC,CAAC,GAAG,IAAM,IAAI,KAAK,CAAC,CAAC,KAAK,MAAM,CAAC,IAAI,IAAI,KAAK,CAAC,CAAC,KAAK,MAAM,CAAC;YACzF;QACJ;YACI,aAAa,WAAW,IAAI,CAAC,CAAC,GAAG,IAAM,EAAE,IAAI,GAAG,EAAE,IAAI;IAC9D;IAGJ,IAAI,aAAa;QACb,MAAM;QACN,YAAY,KAAK,UAAU;QAC3B,aAAa,KAAK,WAAW;QAC7B,WAAW,KAAK,SAAS;QACzB,cAAc,KAAK,YAAY;QAC/B,iBAAiB,KAAK,eAAe;QACrC,QAAQ,SAAS,MAAM;QACvB,YAAY;QACZ,aAAa,SAAS,WAAW;IACrC;IACA,YAAY;AAChB;AACA;;;;;;;CAOC,GAED,SAAS,qBAAqB,IAAI;IAC9B,YAAY;QAAE,MAAM;QAAmB,UAAU;QAAI,MAAM,KAAK,UAAU;IAAC;AAC/E;AAEA,SAAS,yBAAyB,YAAY;IAC1C,YAAY;QAAE,MAAM;QAAwB,UAAU;QAAI,MAAM,aAAa,UAAU;IAAC;AAC5F;AAEA,SAAS,4BAA4B,IAAI;IACrC,QAAQ,GAAG,CAAC,CAAC,yBAAyB,EAAE,KAAK,CAAC;AAClD;AAEA,SAAS,wBAAwB,IAAI;IACjC,IAAI,KAAK,MAAM,IAAI,YAAY;QAC3B,cAAc;QACd,YAAY;YAAE,MAAM;YAAuB,UAAU;YAAI,MAAM,KAAK,IAAI;QAAC;IAC7E,OACI,YAAY;QAAE,MAAM;QAAyB,UAAU;QAAI,MAAM,KAAK,IAAI;IAAC;AAEnF;AAEA,MAAM,sBAAsB,CAAA,OAAQ,YAAY;QAAE,MAAM;QAAwB,UAAU;QAAI,MAAM,KAAK,QAAQ;IAAC;AAElH,MAAM,eAAe,CAAA;IACjB,IAAI,KAAK,QAAQ,KAAK,0BAA0B,oBAAoB;SAC/D;QACD,MAAM,eAAe,KAAK,KAAK,CAAC,KAAK,QAAQ;QAC7C,IAAI,kBAAkB,GAAG,CAAC,aAAa,IAAI,GAAG,kBAAkB,GAAG,CAAC,aAAa,IAAI,EAAE;IAC3F;AACJ;AAEA,MAAM,MAAM,CAAA;IACR,QAAQ,GAAG,CAAC;IACZ,QAAQ,GAAG,CAAC;AAChB;AAEA,mCAAmC;AACnC,0BAA0B;AAC1B,2BAA2B;AAC3B,4BAA4B;AAE5B,YAAY,CAAA;IACR,QAAQ,GAAG,CAAC;IACZ,SAAS;AACb;AAEA,SAAS,SAAS,KAAK,EAAE,GAAG;IACxB,IAAI;IACJ,MAAM,OAAO,QAAQ,SAAS;IAC9B,IAAI,KAAK,SAAS,CAAC,EAAE,IAAI,EAAE,KAAK,CAAC;SAC5B,SAAS;IACd,OAAO;AACX;AAEA,eAAe,WAAW,IAAG;IACzB,IAAI;QACA,oCAAoC;QACpC,MAAM,WAAW,MAAM,MAAM,MAAK;YAC9B,QAAQ;YACR,MAAM;YACN,+EAA+E;YAC/E,4DAA4D;YAC5D,SAAS;gBACL,gBAAgB;YAEpB;QAGJ;QAEA,MAAM,OAAO,MAAM,SAAS,IAAI;QAChC,OAAO,MAAM,sDAAsD;IACvE,EACA,OAAO,OAAO;QACV,QAAQ,KAAK,CAAC;QACd,MAAM;IACV;AACJ;AAEA,sCAAsC;AACtC,eAAe,SAAS,IAAG,EAAE,IAAI;IAC7B,QAAQ,GAAG,CAAC,KAAK,SAAS,CAAC;IAC3B,oCAAoC;IACpC,MAAM,WAAW,MAAM,MAAM,MAAK;QAC9B,QAAQ;QACR,MAAM;QACN,OAAO;QACP,aAAa;QACb,SAAS;YACL,gBAAgB;QAEpB;QACA,+CAA+C;QAC/C,uLAAuL;QACvL,MAAM,KAAK,SAAS,CAAC,MAAM,kDAAkD;IACjF;IACA,OAAO,SAAS,IAAI,IAAI,sDAAsD;AAClF;AAGA;;GAEG,GACH,eAAe,yBAAyB,GAAG;IACvC,MAAM,kBAAkB,WAAW,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO;IACxD,kDAAkD;IAElD,IAAI;QACA,2BAA2B;QAC3B,MAAM,YAAY,iBAAiB,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,CAClD;;;;cAIE,IACD,IAAI,CAAC,CAAA;YACF,QAAQ,GAAG,CAAC;YACZ,uBAAuB;YACvB,kCAAkC,IAAI,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE;QACpH,GACC,KAAK,CAAC,CAAA;YACH,QAAQ,KAAK,CAAC;QAClB;IACR,EAAE,OAAO,OAAO;QACZ,QAAQ,GAAG,CAAC;IACZ,oBAAoB;IACxB;AACJ;AAEA,eAAe,4BAA4B,GAAG;IAC1C,QAAQ,GAAG,CAAC,IAAI,IAAI,CAAC,IAAI;IACzB,MAAM,kBAAkB,WAAW,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,GAAG,wBAAwB,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI;IACrG,IAAI;QACA,2BAA2B;QAC3B,MAAM,YAAY,iBAAiB,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,CAClD;;;;cAIE,IACD,IAAI,CAAC,CAAA;YACF,uBAAuB;YACvB,qCAAqC,IAAI,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE;QAChG,GACC,KAAK,CAAC,CAAA;YACH,QAAQ,KAAK,CAAC;QAClB;IACR,EAAE,OAAO,OAAO;QACZ,QAAQ,GAAG,CAAC;IACZ,oBAAoB;IACxB;AACJ;AAGA;;;GAGG,GACH;;;YAGY,GAAE;oCACsB,GAAE;;;;;;;CAOrC,GAGD;;;GAGG,GACH,eAAe,cAAc,CAAC;IAC1B,MAAM,kBAAkB,WAAW,EAAE,IAAI,CAAC,SAAS,GAAG,MAAM,YAAY,EAAE,IAAI,CAAC,YAAY;IAC3F,mCAAmC;IAEnC,IAAI;QACA,2BAA2B;QAC3B,MAAM,YAAY,iBAAiB,EAAE,IAAI,CAAC,KAAK,CAC3C;;;;cAIE,IACD,IAAI,CAAC,CAAA;YACF,uBAAuB;YACvB,0BAA0B,EAAE,IAAI,EAAE;QACtC,GACC,KAAK,CAAC,CAAA;YACH,QAAQ,KAAK,CAAC;QAClB;IACR,EAAE,OAAO,OAAO;QACZ,QAAQ,GAAG,CAAC;IACZ,oBAAoB;IACxB;AACJ;AAGA,2BAA2B;AAC3B,SAAS,YAAY,YAAY;IAC7B,4BAA4B;IAC5B,IAAI,OAAO;IACX,OAAO,IAAI,CAAC,cAAc,OAAO,CAAC,CAAC,MAAS,QAAQ,CAAC,EAAE,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IAC3E,wCAAwC;IACxC,OAAO;AACX;AAEA,eAAe,gBAAgB,IAAG;IAC9B,MAAM,WAAW,MAAM,MAAM,MAAK;QAC9B,QAAQ;QACR,SAAS;YACL,UAAU;QACd;IACJ;IACA,kCAAkC;IAClC,qDAAqD;IACrD,sBAAsB;IACtB,OAAO;AACX;AAGA,kCAAkC;AAClC,eAAe,iBAAiB,IAAG,EAAE,IAAI;IACrC,QAAQ,GAAG,CAAC;IACZ,QAAQ,GAAG,CAAC;IACZ,oCAAoC;IACpC,MAAM,WAAW,MAAM,MAAM,MAAK;QAC9B,QAAQ;QACR,8CAA8C;QAC9C,+EAA+E;QAC/E,qDAAqD;QACrD,SAAS;YACL,qCAAqC;YACrC,gBAAgB;QACpB;QACA,+CAA+C;QAC/C,uLAAuL;QACvL,MAAM,KAAK,kDAAkD;IACjE;IACA,MAAM,IAAI,MAAM,SAAS,IAAI;IAC7B,yBAAyB;IAEzB;oDACgD,GAChD,sBAAsB;IACtB,uFAAuF;IAEvF,oBAAoB;IACpB,gBAAgB;IAChB,OAAO;AACX;AAEA,iCAAiC;AACjC,eAAe,YAAY,IAAG,EAAE,KAAK;IACjC,QAAQ,GAAG,CAAC;IACZ,IAAI;QACA,6CAA6C;QAC7C,MAAM,WAAW,MAAM,MAAM;QAC7B,QAAQ,GAAG,CAAC;QACZ,IAAI,CAAC,SAAS,EAAE,EACZ,MAAM,IAAI,MAAM;QAGpB,MAAM,eAAe,MAAM,SAAS,IAAI;QACxC,QAAQ,GAAG,CAAC;QAEZ,IAAI,UAAU;QACd,MAAO,aAAa,MAAM,KAAK,WAAW,UAAU,GAAI;YACpD;;+CAEmC,GACnC,MAAM,IAAI,QAAQ,CAAC,UAAY,WAAW,SAAS;YACnD,eAAe,MAAM,MAAM,MAAK,IAAI,CAAC,CAAC,WAAa,SAAS,IAAI;YAChE;YACA,QAAQ,GAAG,CAAC,cAAc;QAC9B;QAEA,OAAO;IACX,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC;QACd,MAAM;IACV;AACJ;AAGA,eAAe;IACX,MAAM,OAAM,WAAW;IACvB,MAAM,IAAI,CAAC,WAAW,CAAC,MAAK,GACvB,IAAI,CAAC,CAAA;QACF,QAAQ,GAAG,CAAC;QACZ,kDAAkD;QAClD,yBAAyB,WAAW,sBAAsB;IAC9D,GACC,KAAK,CAAC,CAAA;QACH,QAAQ,KAAK,CAAC;IAClB;AACR;AAEA,eAAe,cAAc,QAAQ;IACjC,MAAM,OAAM,WAAW,aAAa;IACpC,QAAQ,GAAG,CAAC;IACZ,OAAO;AACX","sources":["src/js/workers/clientWorker.js"],"sourcesContent":["let id = -1;\nlet messageDataObject = {};\nconst baseUrl = 'http://localhost:8080/';\n//const baseUrl = 'http://localhost:1366/ ';\nconst coma_api = 'http://coma.ifa.hawaii.edu:8000/api/v1/';\n//const coma_api = 'http://localhost:8000/api/v1/';\n\nconst onMessageTable = new Map();\nonMessageTable.set('Execute Pipeline', executePipeline);\nonMessageTable.set('Set Worker Id', setWorkerId);\nonMessageTable.set('Get Objects', getObjects);\nonMessageTable.set('Get Routes', getRoutes);\nonMessageTable.set('Get Metadata', getMetadata);\nonMessageTable.set('Save Module', saveModule);\nonMessageTable.set('Load Saved Modules', loadSavedModules);\nonMessageTable.set('Query COMA Engine', queryDatabase);\nonMessageTable.set('Get Remote Dropdown Options', getRemoteDropdownOptions);\nonMessageTable.set('Get Remote Objects Suggestions', getRemoteObjectsSuggestions);\nonMessageTable.set('Get Planet Orbits', getPlanetOrbits);\nonMessageTable.set('Get Object Name', getObjectName);\n\nonmessage = e => onMessageTable.get(e.data.type)(e);\n\nfunction loadSavedModules(e) {\n    const message = { message: 'Get Saved Modules' };\n    postData(baseUrl, message)\n        .then(data => {\n            handleReturn(data);\n        });\n}\n\nfunction saveModule(e) {\n    const message = { message: 'Save Module', groupInfo: e.data.groupInfo };\n    postData(baseUrl, message)\n        .then(data => {\n            //  data.text().then(text => {\n            //     console.log(data);\n            // });\n        });\n}\n\nfunction getMetadata(e) {\n    const message = { message: 'Get Metadata', moduleName: e.data.moduleName }\n    console.log(e.data);\n    postData(baseUrl, message)\n        .then(data => {\n            handleReturn(data);\n    });\n}\n\nfunction getRoutes(e) {\n    // const message = { message: 'Get Routes' };\n    // postData(baseUrl, message)\n    //     .then(data => {\n    //         console.log(data);\n    //         //  data.text().then(text => {\n    //         //     console.log(data);\n    //         // });\n    //     });\n}\n \nfunction getObjects(e) {\n    // const message = { message: 'Get Objects' };\n    // postData(baseUrl, message)\n    //     .then(data => {\n    //         console.log(data);\n    //         //  data.text().then(text => {\n    //         //     console.log(data);\n    //         // });\n    //     });\n}\nfunction setWorkerId(e) {\n    id = e.data.id;\n    postMessage({ type: 'Text Only', data: `Worker ID set to ${id}` });\n}\n\nfunction executePipeline(e) {\n    console.log(e.data);\n    /*postData(url, { type: 'Process Pipeline Request', data: e.data.list, clientId: id })\n        .then(data => { handleReturn(data); });\n    postMessage({ type: 'Text Only', data: 'Post Request Executed' });\n    initiatePing();*/\n}\n\nlet intervalId;\nconst initiatePing = () => {\n    intervalId = setInterval(e => {\n        postData(url, { type: 'Check Pipeline Status', clientId: id }).then(data => {\n            handleReturn(data);\n        });\n    }, 1000);\n}\n\nconst handleReturnTable = new Map();\n\nhandleReturnTable.set('InitialResponse', handleInitialResponseReturn);\nhandleReturnTable.set('Status Check', handleStatusCheckReturn);\nhandleReturnTable.set('Saved Modules', handleSavedModulesReturn);\nhandleReturnTable.set('Metadata Return', handleMetadataReturn);\n/*handleReturnTable.set('Handle Query Return', handleQueryReturn);*/\nhandleReturnTable.set('Database Query Return', handleDatabaseQueryReturn);\nhandleReturnTable.set('Handle Fetch Error', handleFetchError);\nhandleReturnTable.set('Remote Dropdown Options Return', handleRemoteDropdownOptionsReturn);\nhandleReturnTable.set('Remote Objects Suggestions Return', handleRemoteObjectsSuggestionsReturn);\nhandleReturnTable.set('Handle Planet Orbits Return', handlePlanetOrbitsReturn);\n\n\nfunction handlePlanetOrbitsReturn(response) {\n    //console.log(id);\n    postMessage({ type: 'Planet Orbits Return', clientId: id, response: response });\n}\n\nfunction handleRemoteDropdownOptionsReturn(moduleKey, fieldName, fieldWrapperId, response) {\n    //console.log(data);\n    postMessage({ type: 'Remote Dropdown Options Return', clientId: id, moduleKey: moduleKey, fieldName: fieldName, fieldWrapperId: fieldWrapperId, data: response });\n}\nfunction handleRemoteObjectsSuggestionsReturn(moduleKey, fieldWrapperId, response) {\n    postMessage({ type: 'Remote Objects Suggestions Return', clientId: id, moduleKey: moduleKey, fieldWrapperId: fieldWrapperId, data: response });\n}\n\nfunction handleFetchError(queryType, query, reason) {\n    postMessage({ type: 'Handle Fetch Error', clientId: id, queryType: queryType, query: query, message: reason });\n}\n\nfunction handleDatabaseQueryReturn(data, response) {\n    console.log(response);\n    var sourceData = response[data.responseKey];\n    // sort data if needed\n    if (data.sortBy) {\n        switch (data.sortBy) {\n            case 'iso_date_mid':\n                sourceData = sourceData.sort((x, y) => new Date(x[data.sortBy]) - new Date(y[data.sortBy]));\n                break;\n            default:\n                sourceData = sourceData.sort((x, y) => x.date - y.date);\n        }\n    }\n\n    var moduleData = {\n        type: \"Database Query Return\",\n        remoteData: data.remoteData,\n        datasetType: data.datasetType,\n        queryType: data.queryType,\n        queryEntries: data.queryEntries,\n        columnsToRender: data.columnsToRender,\n        status: response.status,\n        sourceData: sourceData,\n        comet_orbit: response.comet_orbit,\n    };\n    postMessage(moduleData);\n}\n/*function handleQueryReturn(inputData, taskResult) {\n    postMessage({\n        type: 'Handle Query Return', clientId: id,\n        queryType: inputData.queryType,\n        queryEntries: inputData.queryEntries,\n        taskResult: taskResult\n    });\n}*/\n\nfunction handleMetadataReturn(data) {\n    postMessage({ type: 'Metadata Return', clientId: id, data: data.returnData });\n}\n\nfunction handleSavedModulesReturn(responseJson) {\n    postMessage({ type: 'Saved Modules Return', clientId: id, data: responseJson.returnData });\n}\n\nfunction handleInitialResponseReturn(data) {\n    console.log(`Handle Initial Response: ${data}`);\n}\n\nfunction handleStatusCheckReturn(data) {\n    if (data.status == 'Complete') {\n        clearInterval(intervalId);\n        postMessage({ type: 'Processing Complete', clientId: id, data: data.data });\n    } else {\n        postMessage({ type: 'Processing Incomplete', clientId: id, data: data.data });\n    }\n}\n\nconst noSavedModulesFound = data => postMessage({ type: 'Saved Modules Return', clientId: id, data: data.response });\n\nconst handleReturn = data => {\n    if (data.response === 'No Saved Modules Found') noSavedModulesFound(data);\n    else {\n        const responseJson = JSON.parse(data.response);\n        if (handleReturnTable.has(responseJson.type)) handleReturnTable.get(responseJson.type)(responseJson);\n    }\n}\n\nconst cbf = data => {\n    console.log(data);\n    console.log('response received');\n}\n\n// const url = 'http://localhost:';\n// const myPort = '8080/';\n// const sshPort = '5004/';\n// const testDir = 'routes';\n\nparseData = data => {\n    console.log(data);\n    plotData(data);\n}\n\nfunction buildURL(local, dir) {\n    let theURL;\n    const port = local ? myPort : sshPort;\n    if (dir) theURL = `${url}${port}`;\n    else theURL = url;\n    return theURL;\n}\n\nasync function getRequest(url) {\n    try {\n        // Default options are marked with *\n        const response = await fetch(url, {\n            method: 'GET', // *GET, POST, PUT, DELETE, etc.\n            mode: 'cors', // no-cors, *cors, same-origin\n            //cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n            //credentials: 'same-origin', // include, *same-origin, omit\n            headers: {\n                'Content-Type': 'application/json'\n                // 'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            //redirect: 'follow', // manual, *follow, error\n            //referrerPolicy: 'no-referrer' // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\n        });\n\n        const data = await response.json();\n        return data; // parses JSON response into native JavaScript objects\n    }\n    catch (error) {\n        console.error(error);\n        throw error;\n    }\n}\n\n// Example POST method implementation:\nasync function postData(url, data) {\n    console.log(JSON.stringify(data));\n    // Default options are marked with *\n    const response = await fetch(url, {\n        method: 'POST', // *GET, POST, PUT, DELETE, etc.\n        mode: 'cors', // no-cors, *cors, same-origin\n        cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n        credentials: 'same-origin', // include, *same-origin, omit\n        headers: {\n            'Content-Type': 'application/json'\n            // 'Content-Type': 'application/x-www-form-urlencoded',\n        },\n        //redirect: 'follow', // manual, *follow, error\n        //referrerPolicy: 'no-referrer', // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\n        body: JSON.stringify(data) // body data type must match \"Content-Type\" header\n    });\n    return response.json(); // parses JSON response into native JavaScript objects\n}\n\n\n/**\n * Get the Remote Search Field\n * */\nasync function getRemoteDropdownOptions(msg) {\n    const url_searchfield = coma_api + msg.data.data.dirName;\n    // var url_taskResult = coma_api + 'task/result/';\n\n    try {\n        //var response = undefined;\n        await getCOMAData(url_searchfield, msg.data.data.delay)\n            /*.then(taskResult => {\n                url_taskResult = url_taskResult + taskResult.task.id;\n                const result = getCOMAData(url_taskResult);\n                return result;\n            })*/\n            .then(response => {\n                console.log(response);\n                // handle response data\n                handleRemoteDropdownOptionsReturn(msg.data.data.moduleKey, msg.data.data.dirName, msg.data.data.fieldWrapperId, response);\n            })\n            .catch(error => {\n                console.error(error);\n            });\n    } catch (error) {\n        console.log(error);\n        // handle error func\n    }\n}\n\nasync function getRemoteObjectsSuggestions(msg) {\n    console.log(msg.data.data);\n    const url_searchfield = coma_api + msg.data.data.dirName + '/autocomplete?term=' + msg.data.data.term;\n    try {\n        //var response = undefined;\n        await getCOMAData(url_searchfield, msg.data.data.delay)\n            /*.then(taskResult => {\n                url_taskResult = url_taskResult + taskResult.task.id;\n                const result = getCOMAData(url_taskResult);\n                return result;\n            })*/\n            .then(response => {\n                // handle response data\n                handleRemoteObjectsSuggestionsReturn(msg.data.data.moduleKey, msg.data.data.fieldWrapperId, response);\n            })\n            .catch(error => {\n                console.error(error);\n            });\n    } catch (error) {\n        console.log(error);\n        // handle error func\n    }\n}\n\n\n/** \n * Post search data to get the task result back\n * @param {object} data object containing moduleKey, queryType, queryEntries\n * */\n/*function queryDatabase(e) {\n    postCOMATaskData(coma_api + e.data.queryType, formatQuery(e.data.queryEntries))\n        .then(taskResult => {\n            *//*console.log(e.data);\n            console.log(taskResult);*//*\n            handleQueryReturn(e.data, taskResult);\n        })\n        .catch(error => {\n            handleFetchError(e.data.queryType, entries, error);\n            console.error(error);\n        });\n}*/\n\n\n/** \n * queries the COMA database\n * @param {object} data object containing moduleKey, queryType, queryEntries\n * */\nasync function queryDatabase(e) {\n    const url_searchfield = coma_api + e.data.queryType + '/' + formatQuery(e.data.queryEntries);\n    //console.log(e.data.queryEntries);\n\n    try {\n        //var response = undefined;\n        await getCOMAData(url_searchfield, e.data.delay)\n            /*.then(taskResult => {\n                url_taskResult = url_taskResult + taskResult.task.id;\n                const result = getCOMAData(url_taskResult);\n                return result;\n            })*/\n            .then(response => {\n                // handle response data\n                handleDatabaseQueryReturn(e.data, response);\n            })\n            .catch(error => {\n                console.error(error);\n            });\n    } catch (error) {\n        console.log(error);\n        // handle error func\n    }\n}\n\n\n// format body of the query\nfunction formatQuery(queryEntries) {\n    //console.log(queryEntries);\n    let body = \"\";\n    Object.keys(queryEntries).forEach((key) => (body += `${queryEntries[key]}/`));\n    //body = body.slice(0, body.length - 1);\n    return body;\n}\n\nasync function getCOMATaskData(url) {\n    const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n            'Accept': 'application/json'\n        }\n    });\n    //const r = await response.json();\n    //const result = await getCOMATaskResults(r.task.id);\n    //console.log(result);\n    return response;\n}\n\n\n// change func name to postRequest\nasync function postCOMATaskData(url, body) {\n    console.log(body);\n    console.log(url);\n    // Default options are marked with *\n    const response = await fetch(url, {\n        method: 'POST', // *GET, POST, PUT, DELETE, etc.\n        //mode: 'cors', // no-cors, *cors, same-origin\n        //cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n        //credentials: 'omit', // include, *same-origin, omit\n        headers: {\n            //'Content-Type': 'application/json',\n            'Content-Type': 'application/x-www-form-urlencoded',\n        },\n        //redirect: 'follow', // manual, *follow, error\n        //referrerPolicy: 'no-referrer', // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\n        body: body // body data type must match \"Content-Type\" header\n    });\n    const r = await response.json();\n    //console.log(r.task.id);\n\n    /*const taskResultUrl = coma_api + 'task/result/' + r.task.id;\n    const result = await getCOMAData(taskResultUrl);*/\n    //console.log(result);\n    //return JSON.stringify(result); // parses JSON response into native JavaScript objects\n\n    // Promise as result\n    //return result;\n    return r;\n}\n\n// change func name to getRequest\nasync function getCOMAData(url, delay) {\n    console.log(url);\n    try {\n        //const url = coma_api + `task/result/${id}`;\n        const response = await fetch(url); \n        console.log(response);\n        if (!response.ok) {\n            throw new Error('Network response was not ok');\n        }\n        \n        const responseData = await response.json();\n        console.log(responseData);\n\n        var counter = 0;\n        while (responseData.status === \"error\" && counter < 10) {\n            /*getCOMAData(url);\n            counter++;\n            console.log('counter: ' + counter);*/\n            await new Promise((resolve) => setTimeout(resolve, delay));\n            responseData = await fetch(url).then((response) => response.json());\n            counter++;\n            console.log('counter: ' + counter);\n        }\n\n        return responseData;\n    } catch (error) {\n        console.error(error);\n        throw error;\n    }\n}\n\n\nasync function getPlanetOrbits() {\n    const url = coma_api + 'planets';\n    await this.getCOMAData(url, 5)\n        .then(response => {\n            console.log(response);\n            //localStorage.setItem('Planet Orbits', response);\n            handlePlanetOrbitsReturn(response); // to kill the workers\n        })\n        .catch(error => {\n            console.error(error);\n        });\n}\n\nasync function getObjectName(objectID) {\n    const url = coma_api + 'objects/' + objectID;\n    console.log(url);\n    return url;\n}\n"],"names":[],"version":3,"file":"clientWorker.c08575ca.js.map","sourceRoot":"/__parcel_source_root/"}