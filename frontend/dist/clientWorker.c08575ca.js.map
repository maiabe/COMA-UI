{"mappings":"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","sources":["src/js/workers/clientWorker.js"],"sourcesContent":["let id = -1;\nlet messageDataObject = {};\nconst baseUrl = \"http://localhost:8080/\";\n//const baseUrl = 'http://localhost:1366/ ';\nconst coma_api = \"http://coma.ifa.hawaii.edu:8000/api/v1/\";\n//const coma_api = 'http://localhost:8000/api/v1/';\n\nconst onMessageTable = new Map();\nonMessageTable.set(\"Execute Pipeline\", executePipeline);\nonMessageTable.set(\"Set Worker Id\", setWorkerId);\nonMessageTable.set(\"Get Objects\", getObjects);\nonMessageTable.set(\"Get Routes\", getRoutes);\nonMessageTable.set(\"Get Metadata\", getMetadata);\nonMessageTable.set(\"Save Module\", saveModule);\nonMessageTable.set(\"Load Saved Modules\", loadSavedModules);\nonMessageTable.set(\"Query COMA Engine\", queryDatabase);\nonMessageTable.set(\"Get Remote Dropdown Options\", getRemoteDropdownOptions);\nonMessageTable.set(\n  \"Get Remote Objects Suggestions\",\n  getRemoteObjectsSuggestions\n);\nonMessageTable.set(\"Get Planet Orbits\", getPlanetOrbits);\nonMessageTable.set(\"Get Object Name\", getObjectName);\n\nonmessage = (e) => onMessageTable.get(e.data.type)(e);\n\nfunction loadSavedModules(e) {\n  const message = { message: \"Get Saved Modules\" };\n  postData(baseUrl, message).then((data) => {\n    handleReturn(data);\n  });\n}\n\nfunction saveModule(e) {\n  const message = { message: \"Save Module\", groupInfo: e.data.groupInfo };\n  postData(baseUrl, message).then((data) => {\n    //  data.text().then(text => {\n    //     console.log(data);\n    // });\n  });\n}\n\nfunction getMetadata(e) {\n  const message = { message: \"Get Metadata\", moduleName: e.data.moduleName };\n  console.log(e.data);\n  postData(baseUrl, message).then((data) => {\n    handleReturn(data);\n  });\n}\n\nfunction getRoutes(e) {\n  // const message = { message: 'Get Routes' };\n  // postData(baseUrl, message)\n  //     .then(data => {\n  //         console.log(data);\n  //         //  data.text().then(text => {\n  //         //     console.log(data);\n  //         // });\n  //     });\n}\n\nfunction getObjects(e) {\n  // const message = { message: 'Get Objects' };\n  // postData(baseUrl, message)\n  //     .then(data => {\n  //         console.log(data);\n  //         //  data.text().then(text => {\n  //         //     console.log(data);\n  //         // });\n  //     });\n}\nfunction setWorkerId(e) {\n  id = e.data.id;\n  postMessage({ type: \"Text Only\", data: `Worker ID set to ${id}` });\n}\n\nfunction executePipeline(e) {\n  console.log(e.data);\n  /*postData(url, { type: 'Process Pipeline Request', data: e.data.list, clientId: id })\n        .then(data => { handleReturn(data); });\n    postMessage({ type: 'Text Only', data: 'Post Request Executed' });\n    initiatePing();*/\n}\n\nlet intervalId;\nconst initiatePing = () => {\n  intervalId = setInterval((e) => {\n    postData(url, { type: \"Check Pipeline Status\", clientId: id }).then(\n      (data) => {\n        handleReturn(data);\n      }\n    );\n  }, 1000);\n};\n\nconst handleReturnTable = new Map();\n\nhandleReturnTable.set(\"InitialResponse\", handleInitialResponseReturn);\nhandleReturnTable.set(\"Status Check\", handleStatusCheckReturn);\nhandleReturnTable.set(\"Saved Modules\", handleSavedModulesReturn);\nhandleReturnTable.set(\"Metadata Return\", handleMetadataReturn);\n/*handleReturnTable.set('Handle Query Return', handleQueryReturn);*/\nhandleReturnTable.set(\"Database Query Return\", handleDatabaseQueryReturn);\nhandleReturnTable.set(\"Handle Fetch Error\", handleFetchError);\nhandleReturnTable.set(\n  \"Remote Dropdown Options Return\",\n  handleRemoteDropdownOptionsReturn\n);\nhandleReturnTable.set(\n  \"Remote Objects Suggestions Return\",\n  handleRemoteObjectsSuggestionsReturn\n);\nhandleReturnTable.set(\"Handle Planet Orbits Return\", handlePlanetOrbitsReturn);\n\nfunction handlePlanetOrbitsReturn(response) {\n  //console.log(id);\n  postMessage({\n    type: \"Planet Orbits Return\",\n    clientId: id,\n    response: response,\n  });\n}\n\nfunction handleRemoteDropdownOptionsReturn(\n  moduleKey,\n  fieldName,\n  fieldWrapperId,\n  response\n) {\n  //console.log(data);\n  postMessage({\n    type: \"Remote Dropdown Options Return\",\n    clientId: id,\n    moduleKey: moduleKey,\n    fieldName: fieldName,\n    fieldWrapperId: fieldWrapperId,\n    data: response,\n  });\n}\nfunction handleRemoteObjectsSuggestionsReturn(\n  moduleKey,\n  fieldWrapperId,\n  response\n) {\n  postMessage({\n    type: \"Remote Objects Suggestions Return\",\n    clientId: id,\n    moduleKey: moduleKey,\n    fieldWrapperId: fieldWrapperId,\n    data: response,\n  });\n}\n\nfunction handleFetchError(queryType, query, reason) {\n  postMessage({\n    type: \"Handle Fetch Error\",\n    clientId: id,\n    queryType: queryType,\n    query: query,\n    message: reason,\n  });\n}\n\nfunction handleDatabaseQueryReturn(data, response) {\n  console.log(response);\n  var sourceData = response[data.responseKey];\n  // sort data if needed\n  if (data.sortBy) {\n    switch (data.sortBy) {\n      case \"iso_date_mid\":\n        sourceData = sourceData.sort(\n          (x, y) => new Date(x[data.sortBy]) - new Date(y[data.sortBy])\n        );\n        break;\n      default:\n        sourceData = sourceData.sort((x, y) => x.date - y.date);\n    }\n  }\n\n  var moduleData = {\n    type: \"Database Query Return\",\n    remoteData: data.remoteData,\n    datasetType: data.datasetType,\n    queryType: data.queryType,\n    queryEntries: data.queryEntries,\n    columnsToRender: data.columnsToRender,\n    status: response.status,\n    sourceData: sourceData,\n    comet_orbit: response.comet_orbit,\n  };\n  postMessage(moduleData);\n}\n/*function handleQueryReturn(inputData, taskResult) {\n    postMessage({\n        type: 'Handle Query Return', clientId: id,\n        queryType: inputData.queryType,\n        queryEntries: inputData.queryEntries,\n        taskResult: taskResult\n    });\n}*/\n\nfunction handleMetadataReturn(data) {\n  postMessage({ type: \"Metadata Return\", clientId: id, data: data.returnData });\n}\n\nfunction handleSavedModulesReturn(responseJson) {\n  postMessage({\n    type: \"Saved Modules Return\",\n    clientId: id,\n    data: responseJson.returnData,\n  });\n}\n\nfunction handleInitialResponseReturn(data) {\n  console.log(`Handle Initial Response: ${data}`);\n}\n\nfunction handleStatusCheckReturn(data) {\n  if (data.status == \"Complete\") {\n    clearInterval(intervalId);\n    postMessage({ type: \"Processing Complete\", clientId: id, data: data.data });\n  } else {\n    postMessage({\n      type: \"Processing Incomplete\",\n      clientId: id,\n      data: data.data,\n    });\n  }\n}\n\nconst noSavedModulesFound = (data) =>\n  postMessage({\n    type: \"Saved Modules Return\",\n    clientId: id,\n    data: data.response,\n  });\n\nconst handleReturn = (data) => {\n  if (data.response === \"No Saved Modules Found\") noSavedModulesFound(data);\n  else {\n    const responseJson = JSON.parse(data.response);\n    if (handleReturnTable.has(responseJson.type))\n      handleReturnTable.get(responseJson.type)(responseJson);\n  }\n};\n\nconst cbf = (data) => {\n  console.log(data);\n  console.log(\"response received\");\n};\n\n// const url = 'http://localhost:';\n// const myPort = '8080/';\n// const sshPort = '5004/';\n// const testDir = 'routes';\n\nparseData = (data) => {\n  console.log(data);\n  plotData(data);\n};\n\nfunction buildURL(local, dir) {\n  let theURL;\n  const port = local ? myPort : sshPort;\n  if (dir) theURL = `${url}${port}`;\n  else theURL = url;\n  return theURL;\n}\n\nasync function getRequest(url) {\n  try {\n    // Default options are marked with *\n    const response = await fetch(url, {\n      method: \"GET\", // *GET, POST, PUT, DELETE, etc.\n      mode: \"cors\", // no-cors, *cors, same-origin\n      //cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n      //credentials: 'same-origin', // include, *same-origin, omit\n      headers: {\n        \"Content-Type\": \"application/json\",\n        // 'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      //redirect: 'follow', // manual, *follow, error\n      //referrerPolicy: 'no-referrer' // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\n    });\n\n    const data = await response.json();\n    return data; // parses JSON response into native JavaScript objects\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n}\n\n// Example POST method implementation:\nasync function postData(url, data) {\n  const post_url = `${baseUrl}api/load_saved_modules`;\n  console.log(post_url);\n  // Default options are marked with *\n  const response = await fetch(post_url, {\n    method: \"POST\", // *GET, POST, PUT, DELETE, etc.\n    mode: \"cors\", // no-cors, *cors, same-origin\n    cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\n    credentials: \"same-origin\", // include, *same-origin, omit\n    headers: {\n      \"Content-Type\": \"application/json\",\n      // 'Content-Type': 'application/x-www-form-urlencoded',\n    },\n    //redirect: 'follow', // manual, *follow, error\n    //referrerPolicy: 'no-referrer', // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\n    body: JSON.stringify(data), // body data type must match \"Content-Type\" header\n  });\n  return response.json(); // parses JSON response into native JavaScript objects\n}\n\n/**\n * Get the Remote Search Field\n * */\nasync function getRemoteDropdownOptions(msg) {\n  const url_searchfield = coma_api + msg.data.data.dirName;\n  // var url_taskResult = coma_api + 'task/result/';\n\n  try {\n    //var response = undefined;\n    await getCOMAData(url_searchfield, msg.data.data.delay)\n      /*.then(taskResult => {\n                url_taskResult = url_taskResult + taskResult.task.id;\n                const result = getCOMAData(url_taskResult);\n                return result;\n            })*/\n      .then((response) => {\n        console.log(response);\n        // handle response data\n        handleRemoteDropdownOptionsReturn(\n          msg.data.data.moduleKey,\n          msg.data.data.dirName,\n          msg.data.data.fieldWrapperId,\n          response\n        );\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n  } catch (error) {\n    console.log(error);\n    // handle error func\n  }\n}\n\nasync function getRemoteObjectsSuggestions(msg) {\n  console.log(msg.data.data);\n  const url_searchfield =\n    coma_api +\n    msg.data.data.dirName +\n    \"/autocomplete?term=\" +\n    msg.data.data.term;\n  try {\n    //var response = undefined;\n    await getCOMAData(url_searchfield, msg.data.data.delay)\n      /*.then(taskResult => {\n                url_taskResult = url_taskResult + taskResult.task.id;\n                const result = getCOMAData(url_taskResult);\n                return result;\n            })*/\n      .then((response) => {\n        // handle response data\n        handleRemoteObjectsSuggestionsReturn(\n          msg.data.data.moduleKey,\n          msg.data.data.fieldWrapperId,\n          response\n        );\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n  } catch (error) {\n    console.log(error);\n    // handle error func\n  }\n}\n\n/**\n * Post search data to get the task result back\n * @param {object} data object containing moduleKey, queryType, queryEntries\n * */\n/*function queryDatabase(e) {\n    postCOMATaskData(coma_api + e.data.queryType, formatQuery(e.data.queryEntries))\n        .then(taskResult => {\n            */ /*console.log(e.data);\n            console.log(taskResult);*/ /*\n            handleQueryReturn(e.data, taskResult);\n        })\n        .catch(error => {\n            handleFetchError(e.data.queryType, entries, error);\n            console.error(error);\n        });\n}*/\n\n/**\n * queries the COMA database\n * @param {object} data object containing moduleKey, queryType, queryEntries\n * */\nasync function queryDatabase(e) {\n  const url_searchfield =\n    coma_api + e.data.queryType + \"/\" + formatQuery(e.data.queryEntries);\n  //console.log(e.data.queryEntries);\n\n  try {\n    //var response = undefined;\n    await getCOMAData(url_searchfield, e.data.delay)\n      /*.then(taskResult => {\n                url_taskResult = url_taskResult + taskResult.task.id;\n                const result = getCOMAData(url_taskResult);\n                return result;\n            })*/\n      .then((response) => {\n        // handle response data\n        handleDatabaseQueryReturn(e.data, response);\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n  } catch (error) {\n    console.log(error);\n    // handle error func\n  }\n}\n\n// format body of the query\nfunction formatQuery(queryEntries) {\n  //console.log(queryEntries);\n  let body = \"\";\n  Object.keys(queryEntries).forEach((key) => (body += `${queryEntries[key]}/`));\n  //body = body.slice(0, body.length - 1);\n  return body;\n}\n\nasync function getCOMATaskData(url) {\n  const response = await fetch(url, {\n    method: \"GET\",\n    headers: {\n      Accept: \"application/json\",\n    },\n  });\n  //const r = await response.json();\n  //const result = await getCOMATaskResults(r.task.id);\n  //console.log(result);\n  return response;\n}\n\n// change func name to postRequest\nasync function postCOMATaskData(url, body) {\n  console.log(body);\n  console.log(url);\n  // Default options are marked with *\n  const response = await fetch(url, {\n    method: \"POST\", // *GET, POST, PUT, DELETE, etc.\n    //mode: 'cors', // no-cors, *cors, same-origin\n    //cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n    //credentials: 'omit', // include, *same-origin, omit\n    headers: {\n      //'Content-Type': 'application/json',\n      \"Content-Type\": \"application/x-www-form-urlencoded\",\n    },\n    //redirect: 'follow', // manual, *follow, error\n    //referrerPolicy: 'no-referrer', // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\n    body: body, // body data type must match \"Content-Type\" header\n  });\n  const r = await response.json();\n  //console.log(r.task.id);\n\n  /*const taskResultUrl = coma_api + 'task/result/' + r.task.id;\n    const result = await getCOMAData(taskResultUrl);*/\n  //console.log(result);\n  //return JSON.stringify(result); // parses JSON response into native JavaScript objects\n\n  // Promise as result\n  //return result;\n  return r;\n}\n\n// change func name to getRequest\nasync function getCOMAData(url, delay) {\n  console.log(url);\n  try {\n    //const url = coma_api + `task/result/${id}`;\n    const response = await fetch(url);\n    console.log(response);\n    if (!response.ok) {\n      throw new Error(\"Network response was not ok\");\n    }\n\n    const responseData = await response.json();\n    console.log(responseData);\n\n    var counter = 0;\n    while (responseData.status === \"error\" && counter < 10) {\n      /*getCOMAData(url);\n            counter++;\n            console.log('counter: ' + counter);*/\n      await new Promise((resolve) => setTimeout(resolve, delay));\n      responseData = await fetch(url).then((response) => response.json());\n      counter++;\n      console.log(\"counter: \" + counter);\n    }\n\n    return responseData;\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n}\n\nasync function getPlanetOrbits() {\n  const url = coma_api + \"planets\";\n  await this.getCOMAData(url, 5)\n    .then((response) => {\n      console.log(response);\n      //localStorage.setItem('Planet Orbits', response);\n      handlePlanetOrbitsReturn(response); // to kill the workers\n    })\n    .catch((error) => {\n      console.error(error);\n    });\n}\n\nasync function getObjectName(objectID) {\n  const url = coma_api + \"objects/\" + objectID;\n  console.log(url);\n  return url;\n}\n"],"names":[],"version":3,"file":"clientWorker.c08575ca.js.map","sourceRoot":"/__parcel_source_root/"}