// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

(function (modules, entry, mainEntry, parcelRequireName, globalName) {
  /* eslint-disable no-undef */
  var globalObject =
    typeof globalThis !== 'undefined'
      ? globalThis
      : typeof self !== 'undefined'
      ? self
      : typeof window !== 'undefined'
      ? window
      : typeof global !== 'undefined'
      ? global
      : {};
  /* eslint-enable no-undef */

  // Save the require from previous bundle to this closure if any
  var previousRequire =
    typeof globalObject[parcelRequireName] === 'function' &&
    globalObject[parcelRequireName];

  var cache = previousRequire.cache || {};
  // Do not use `require` to prevent Webpack from trying to bundle this call
  var nodeRequire =
    typeof module !== 'undefined' &&
    typeof module.require === 'function' &&
    module.require.bind(module);

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire =
          typeof globalObject[parcelRequireName] === 'function' &&
          globalObject[parcelRequireName];
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error("Cannot find module '" + name + "'");
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = (cache[name] = new newRequire.Module(name));

      modules[name][0].call(
        module.exports,
        localRequire,
        module,
        module.exports,
        this
      );
    }

    return cache[name].exports;

    function localRequire(x) {
      var res = localRequire.resolve(x);
      return res === false ? {} : newRequire(res);
    }

    function resolve(x) {
      var id = modules[name][1][x];
      return id != null ? id : x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [
      function (require, module) {
        module.exports = exports;
      },
      {},
    ];
  };

  Object.defineProperty(newRequire, 'root', {
    get: function () {
      return globalObject[parcelRequireName];
    },
  });

  globalObject[parcelRequireName] = newRequire;

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (mainEntry) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(mainEntry);

    // CommonJS
    if (typeof exports === 'object' && typeof module !== 'undefined') {
      module.exports = mainExports;

      // RequireJS
    } else if (typeof define === 'function' && define.amd) {
      define(function () {
        return mainExports;
      });

      // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }
})({"46McK":[function(require,module,exports) {
var global = arguments[3];
var HMR_HOST = null;
var HMR_PORT = null;
var HMR_SECURE = false;
var HMR_ENV_HASH = "d6ea1d42532a7575";
module.bundle.HMR_BUNDLE_ID = "0bcb44a518dbc454";
"use strict";
/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE, chrome, browser, __parcel__import__, __parcel__importScripts__, ServiceWorkerGlobalScope */ /*::
import type {
  HMRAsset,
  HMRMessage,
} from '@parcel/reporter-dev-server/src/HMRServer.js';
interface ParcelRequire {
  (string): mixed;
  cache: {|[string]: ParcelModule|};
  hotData: {|[string]: mixed|};
  Module: any;
  parent: ?ParcelRequire;
  isParcelRequire: true;
  modules: {|[string]: [Function, {|[string]: string|}]|};
  HMR_BUNDLE_ID: string;
  root: ParcelRequire;
}
interface ParcelModule {
  hot: {|
    data: mixed,
    accept(cb: (Function) => void): void,
    dispose(cb: (mixed) => void): void,
    // accept(deps: Array<string> | string, cb: (Function) => void): void,
    // decline(): void,
    _acceptCallbacks: Array<(Function) => void>,
    _disposeCallbacks: Array<(mixed) => void>,
  |};
}
interface ExtensionContext {
  runtime: {|
    reload(): void,
    getURL(url: string): string;
    getManifest(): {manifest_version: number, ...};
  |};
}
declare var module: {bundle: ParcelRequire, ...};
declare var HMR_HOST: string;
declare var HMR_PORT: string;
declare var HMR_ENV_HASH: string;
declare var HMR_SECURE: boolean;
declare var chrome: ExtensionContext;
declare var browser: ExtensionContext;
declare var __parcel__import__: (string) => Promise<void>;
declare var __parcel__importScripts__: (string) => Promise<void>;
declare var globalThis: typeof self;
declare var ServiceWorkerGlobalScope: Object;
*/ var OVERLAY_ID = "__parcel__error__overlay__";
var OldModule = module.bundle.Module;
function Module(moduleName) {
    OldModule.call(this, moduleName);
    this.hot = {
        data: module.bundle.hotData[moduleName],
        _acceptCallbacks: [],
        _disposeCallbacks: [],
        accept: function(fn) {
            this._acceptCallbacks.push(fn || function() {});
        },
        dispose: function(fn) {
            this._disposeCallbacks.push(fn);
        }
    };
    module.bundle.hotData[moduleName] = undefined;
}
module.bundle.Module = Module;
module.bundle.hotData = {};
var checkedAssets /*: {|[string]: boolean|} */ , assetsToDispose /*: Array<[ParcelRequire, string]> */ , assetsToAccept /*: Array<[ParcelRequire, string]> */ ;
function getHostname() {
    return HMR_HOST || (location.protocol.indexOf("http") === 0 ? location.hostname : "localhost");
}
function getPort() {
    return HMR_PORT || location.port;
}
// eslint-disable-next-line no-redeclare
var parent = module.bundle.parent;
if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== "undefined") {
    var hostname = getHostname();
    var port = getPort();
    var protocol = HMR_SECURE || location.protocol == "https:" && !/localhost|127.0.0.1|0.0.0.0/.test(hostname) ? "wss" : "ws";
    var ws;
    try {
        ws = new WebSocket(protocol + "://" + hostname + (port ? ":" + port : "") + "/");
    } catch (err) {
        if (err.message) console.error(err.message);
        ws = {};
    }
    // Web extension context
    var extCtx = typeof browser === "undefined" ? typeof chrome === "undefined" ? null : chrome : browser;
    // Safari doesn't support sourceURL in error stacks.
    // eval may also be disabled via CSP, so do a quick check.
    var supportsSourceURL = false;
    try {
        (0, eval)('throw new Error("test"); //# sourceURL=test.js');
    } catch (err) {
        supportsSourceURL = err.stack.includes("test.js");
    }
    // $FlowFixMe
    ws.onmessage = async function(event /*: {data: string, ...} */ ) {
        checkedAssets = {} /*: {|[string]: boolean|} */ ;
        assetsToAccept = [];
        assetsToDispose = [];
        var data /*: HMRMessage */  = JSON.parse(event.data);
        if (data.type === "update") {
            // Remove error overlay if there is one
            if (typeof document !== "undefined") removeErrorOverlay();
            let assets = data.assets.filter((asset)=>asset.envHash === HMR_ENV_HASH);
            // Handle HMR Update
            let handled = assets.every((asset)=>{
                return asset.type === "css" || asset.type === "js" && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);
            });
            if (handled) {
                console.clear();
                // Dispatch custom event so other runtimes (e.g React Refresh) are aware.
                if (typeof window !== "undefined" && typeof CustomEvent !== "undefined") window.dispatchEvent(new CustomEvent("parcelhmraccept"));
                await hmrApplyUpdates(assets);
                // Dispose all old assets.
                let processedAssets = {} /*: {|[string]: boolean|} */ ;
                for(let i = 0; i < assetsToDispose.length; i++){
                    let id = assetsToDispose[i][1];
                    if (!processedAssets[id]) {
                        hmrDispose(assetsToDispose[i][0], id);
                        processedAssets[id] = true;
                    }
                }
                // Run accept callbacks. This will also re-execute other disposed assets in topological order.
                processedAssets = {};
                for(let i = 0; i < assetsToAccept.length; i++){
                    let id = assetsToAccept[i][1];
                    if (!processedAssets[id]) {
                        hmrAccept(assetsToAccept[i][0], id);
                        processedAssets[id] = true;
                    }
                }
            } else fullReload();
        }
        if (data.type === "error") {
            // Log parcel errors to console
            for (let ansiDiagnostic of data.diagnostics.ansi){
                let stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;
                console.error("\uD83D\uDEA8 [parcel]: " + ansiDiagnostic.message + "\n" + stack + "\n\n" + ansiDiagnostic.hints.join("\n"));
            }
            if (typeof document !== "undefined") {
                // Render the fancy html overlay
                removeErrorOverlay();
                var overlay = createErrorOverlay(data.diagnostics.html);
                // $FlowFixMe
                document.body.appendChild(overlay);
            }
        }
    };
    ws.onerror = function(e) {
        if (e.message) console.error(e.message);
    };
    ws.onclose = function() {
        console.warn("[parcel] \uD83D\uDEA8 Connection to the HMR server was lost");
    };
}
function removeErrorOverlay() {
    var overlay = document.getElementById(OVERLAY_ID);
    if (overlay) {
        overlay.remove();
        console.log("[parcel] \u2728 Error resolved");
    }
}
function createErrorOverlay(diagnostics) {
    var overlay = document.createElement("div");
    overlay.id = OVERLAY_ID;
    let errorHTML = '<div style="background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;">';
    for (let diagnostic of diagnostics){
        let stack = diagnostic.frames.length ? diagnostic.frames.reduce((p, frame)=>{
            return `${p}
<a href="/__parcel_launch_editor?file=${encodeURIComponent(frame.location)}" style="text-decoration: underline; color: #888" onclick="fetch(this.href); return false">${frame.location}</a>
${frame.code}`;
        }, "") : diagnostic.stack;
        errorHTML += `
      <div>
        <div style="font-size: 18px; font-weight: bold; margin-top: 20px;">
          \u{1F6A8} ${diagnostic.message}
        </div>
        <pre>${stack}</pre>
        <div>
          ${diagnostic.hints.map((hint)=>"<div>\uD83D\uDCA1 " + hint + "</div>").join("")}
        </div>
        ${diagnostic.documentation ? `<div>\u{1F4DD} <a style="color: violet" href="${diagnostic.documentation}" target="_blank">Learn more</a></div>` : ""}
      </div>
    `;
    }
    errorHTML += "</div>";
    overlay.innerHTML = errorHTML;
    return overlay;
}
function fullReload() {
    if ("reload" in location) location.reload();
    else if (extCtx && extCtx.runtime && extCtx.runtime.reload) extCtx.runtime.reload();
}
function getParents(bundle, id) /*: Array<[ParcelRequire, string]> */ {
    var modules = bundle.modules;
    if (!modules) return [];
    var parents = [];
    var k, d, dep;
    for(k in modules)for(d in modules[k][1]){
        dep = modules[k][1][d];
        if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) parents.push([
            bundle,
            k
        ]);
    }
    if (bundle.parent) parents = parents.concat(getParents(bundle.parent, id));
    return parents;
}
function updateLink(link) {
    var href = link.getAttribute("href");
    if (!href) return;
    var newLink = link.cloneNode();
    newLink.onload = function() {
        if (link.parentNode !== null) // $FlowFixMe
        link.parentNode.removeChild(link);
    };
    newLink.setAttribute("href", // $FlowFixMe
    href.split("?")[0] + "?" + Date.now());
    // $FlowFixMe
    link.parentNode.insertBefore(newLink, link.nextSibling);
}
var cssTimeout = null;
function reloadCSS() {
    if (cssTimeout) return;
    cssTimeout = setTimeout(function() {
        var links = document.querySelectorAll('link[rel="stylesheet"]');
        for(var i = 0; i < links.length; i++){
            // $FlowFixMe[incompatible-type]
            var href /*: string */  = links[i].getAttribute("href");
            var hostname = getHostname();
            var servedFromHMRServer = hostname === "localhost" ? new RegExp("^(https?:\\/\\/(0.0.0.0|127.0.0.1)|localhost):" + getPort()).test(href) : href.indexOf(hostname + ":" + getPort());
            var absolute = /^https?:\/\//i.test(href) && href.indexOf(location.origin) !== 0 && !servedFromHMRServer;
            if (!absolute) updateLink(links[i]);
        }
        cssTimeout = null;
    }, 50);
}
function hmrDownload(asset) {
    if (asset.type === "js") {
        if (typeof document !== "undefined") {
            let script = document.createElement("script");
            script.src = asset.url + "?t=" + Date.now();
            if (asset.outputFormat === "esmodule") script.type = "module";
            return new Promise((resolve, reject)=>{
                var _document$head;
                script.onload = ()=>resolve(script);
                script.onerror = reject;
                (_document$head = document.head) === null || _document$head === void 0 || _document$head.appendChild(script);
            });
        } else if (typeof importScripts === "function") {
            // Worker scripts
            if (asset.outputFormat === "esmodule") return import(asset.url + "?t=" + Date.now());
            else return new Promise((resolve, reject)=>{
                try {
                    importScripts(asset.url + "?t=" + Date.now());
                    resolve();
                } catch (err) {
                    reject(err);
                }
            });
        }
    }
}
async function hmrApplyUpdates(assets) {
    global.parcelHotUpdate = Object.create(null);
    let scriptsToRemove;
    try {
        // If sourceURL comments aren't supported in eval, we need to load
        // the update from the dev server over HTTP so that stack traces
        // are correct in errors/logs. This is much slower than eval, so
        // we only do it if needed (currently just Safari).
        // https://bugs.webkit.org/show_bug.cgi?id=137297
        // This path is also taken if a CSP disallows eval.
        if (!supportsSourceURL) {
            let promises = assets.map((asset)=>{
                var _hmrDownload;
                return (_hmrDownload = hmrDownload(asset)) === null || _hmrDownload === void 0 ? void 0 : _hmrDownload.catch((err)=>{
                    // Web extension fix
                    if (extCtx && extCtx.runtime && extCtx.runtime.getManifest().manifest_version == 3 && typeof ServiceWorkerGlobalScope != "undefined" && global instanceof ServiceWorkerGlobalScope) {
                        extCtx.runtime.reload();
                        return;
                    }
                    throw err;
                });
            });
            scriptsToRemove = await Promise.all(promises);
        }
        assets.forEach(function(asset) {
            hmrApply(module.bundle.root, asset);
        });
    } finally{
        delete global.parcelHotUpdate;
        if (scriptsToRemove) scriptsToRemove.forEach((script)=>{
            if (script) {
                var _document$head2;
                (_document$head2 = document.head) === null || _document$head2 === void 0 || _document$head2.removeChild(script);
            }
        });
    }
}
function hmrApply(bundle /*: ParcelRequire */ , asset /*:  HMRAsset */ ) {
    var modules = bundle.modules;
    if (!modules) return;
    if (asset.type === "css") reloadCSS();
    else if (asset.type === "js") {
        let deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];
        if (deps) {
            if (modules[asset.id]) {
                // Remove dependencies that are removed and will become orphaned.
                // This is necessary so that if the asset is added back again, the cache is gone, and we prevent a full page reload.
                let oldDeps = modules[asset.id][1];
                for(let dep in oldDeps)if (!deps[dep] || deps[dep] !== oldDeps[dep]) {
                    let id = oldDeps[dep];
                    let parents = getParents(module.bundle.root, id);
                    if (parents.length === 1) hmrDelete(module.bundle.root, id);
                }
            }
            if (supportsSourceURL) // Global eval. We would use `new Function` here but browser
            // support for source maps is better with eval.
            (0, eval)(asset.output);
            // $FlowFixMe
            let fn = global.parcelHotUpdate[asset.id];
            modules[asset.id] = [
                fn,
                deps
            ];
        } else if (bundle.parent) hmrApply(bundle.parent, asset);
    }
}
function hmrDelete(bundle, id) {
    let modules = bundle.modules;
    if (!modules) return;
    if (modules[id]) {
        // Collect dependencies that will become orphaned when this module is deleted.
        let deps = modules[id][1];
        let orphans = [];
        for(let dep in deps){
            let parents = getParents(module.bundle.root, deps[dep]);
            if (parents.length === 1) orphans.push(deps[dep]);
        }
        // Delete the module. This must be done before deleting dependencies in case of circular dependencies.
        delete modules[id];
        delete bundle.cache[id];
        // Now delete the orphans.
        orphans.forEach((id)=>{
            hmrDelete(module.bundle.root, id);
        });
    } else if (bundle.parent) hmrDelete(bundle.parent, id);
}
function hmrAcceptCheck(bundle /*: ParcelRequire */ , id /*: string */ , depsByBundle /*: ?{ [string]: { [string]: string } }*/ ) {
    if (hmrAcceptCheckOne(bundle, id, depsByBundle)) return true;
    // Traverse parents breadth first. All possible ancestries must accept the HMR update, or we'll reload.
    let parents = getParents(module.bundle.root, id);
    let accepted = false;
    while(parents.length > 0){
        let v = parents.shift();
        let a = hmrAcceptCheckOne(v[0], v[1], null);
        if (a) // If this parent accepts, stop traversing upward, but still consider siblings.
        accepted = true;
        else {
            // Otherwise, queue the parents in the next level upward.
            let p = getParents(module.bundle.root, v[1]);
            if (p.length === 0) {
                // If there are no parents, then we've reached an entry without accepting. Reload.
                accepted = false;
                break;
            }
            parents.push(...p);
        }
    }
    return accepted;
}
function hmrAcceptCheckOne(bundle /*: ParcelRequire */ , id /*: string */ , depsByBundle /*: ?{ [string]: { [string]: string } }*/ ) {
    var modules = bundle.modules;
    if (!modules) return;
    if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {
        // If we reached the root bundle without finding where the asset should go,
        // there's nothing to do. Mark as "accepted" so we don't reload the page.
        if (!bundle.parent) return true;
        return hmrAcceptCheck(bundle.parent, id, depsByBundle);
    }
    if (checkedAssets[id]) return true;
    checkedAssets[id] = true;
    var cached = bundle.cache[id];
    assetsToDispose.push([
        bundle,
        id
    ]);
    if (!cached || cached.hot && cached.hot._acceptCallbacks.length) {
        assetsToAccept.push([
            bundle,
            id
        ]);
        return true;
    }
}
function hmrDispose(bundle /*: ParcelRequire */ , id /*: string */ ) {
    var cached = bundle.cache[id];
    bundle.hotData[id] = {};
    if (cached && cached.hot) cached.hot.data = bundle.hotData[id];
    if (cached && cached.hot && cached.hot._disposeCallbacks.length) cached.hot._disposeCallbacks.forEach(function(cb) {
        cb(bundle.hotData[id]);
    });
    delete bundle.cache[id];
}
function hmrAccept(bundle /*: ParcelRequire */ , id /*: string */ ) {
    // Execute the module.
    bundle(id);
    // Run the accept callbacks in the new version of the module.
    var cached = bundle.cache[id];
    if (cached && cached.hot && cached.hot._acceptCallbacks.length) cached.hot._acceptCallbacks.forEach(function(cb) {
        var assetsToAlsoAccept = cb(function() {
            return getParents(module.bundle.root, id);
        });
        if (assetsToAlsoAccept && assetsToAccept.length) {
            assetsToAlsoAccept.forEach(function(a) {
                hmrDispose(a[0], a[1]);
            });
            // $FlowFixMe[method-unbinding]
            assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);
        }
    });
}

},{}],"1SICI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "GM", ()=>GM);
parcelHelpers.export(exports, "debug", ()=>debug);
var _indexJs = require("./global/index.js");
var _gojs = require("gojs");
let GM;
const debug = true;
function init() {
    GM = new (0, _indexJs.GlobalManager)();
    GM.startEnvironment();
    GM.MM.addPublisher(GM.MSM.publisher);
}
window.addEventListener("DOMContentLoaded", init);

},{"./global/index.js":"47ru8","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3","gojs":"4LcTn"}],"47ru8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "GlobalManager", ()=>(0, _globalManagerJs.GlobalManager));
var _globalManagerJs = require("./globalManager.js");

},{"./globalManager.js":"4TvtM","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4TvtM":[function(require,module,exports) {
/*************************************************************
 * COPYRIGHT University of Hawaii - COMA Project / Lava Lab  *
 * Author: James Hutchison                                   *
 * Date: 5/5/2022                                            *
 *************************************************************/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/** The Global Manager has direct access to all Manager Instances. It should only be used
 * by the HUB to call functions directly on the managers.
 */ parcelHelpers.export(exports, "GlobalManager", ()=>GlobalManager);
var _indexJs = require("../modules/index.js");
var _indexJs1 = require("../components/environment/index.js");
var _indexJs2 = require("../dataComponents/index.js");
var _workerManagerJs = require("../workers/workerManager.js");
var _indexJs3 = require("../components/popup/index.js");
var _indexJs4 = require("../htmlGeneration/index.js");
var _indexJs5 = require("../components/inspector/index.js");
var _indexJs6 = require("../components/moduleSelectionMenu/index.js");
var _hubJs = require("../servers/hub.js");
var _hubJsDefault = parcelHelpers.interopDefault(_hubJs);
var _domManagerJs = require("../components/domManagement/domManager.js");
class GlobalManager {
    HUB;
    DM;
    ENV;
    MM;
    MSM;
    INS;
    HF;
    PM;
    IM;
    OM;
    PLM;
    WM;
    DOM;
    constructor(){
        this.HF = new (0, _indexJs4.HTMLFactory)();
        this.HUB = new (0, _hubJsDefault.default)();
        this.DM = new (0, _indexJs2.DataManager)();
        this.ENV = new (0, _indexJs1.Environment)("environmentDiv");
        this.MSM = new (0, _indexJs6.ModuleSelectionMenu)();
        this.MM = new (0, _indexJs.ModuleManager)();
        this.INS = new (0, _indexJs5.Inspector)();
        this.PM = new (0, _indexJs3.PopupManager)();
        this.IM = new (0, _indexJs2.InputManager)();
        this.OM = new (0, _indexJs2.OutputManager)();
        this.PLM = new (0, _indexJs1.PipelineManager)();
        this.WM = new (0, _workerManagerJs.WorkerManager)();
        this.DOM = new (0, _domManagerJs.DomManager)();
    }
    /** --- PUBLIC ---
     * Initializes the Environment by subscribing to the HUB publisher, creating the GOjs Environemnt,
     * creating the inspector, initializing initial DOM elements, and initializing contact with the 
     * server to get any necessary information for startup.
     */ startEnvironment = ()=>{
        this.HUB.subscribe(this);
        this.ENV.setUpEnvironment();
        this.#setEventListeners();
        this.#createInspector();
        this.DOM.initializeDomManager();
        this.#initialServerContact();
    };
    /** --- PRIVATE ---
     * Contacts the server to get any data necessary to start client environment.
     */ #initialServerContact = ()=>this.HUB.makeInitialContactWithServer();
    /** --- PRIVATE ---
     * Sets any event listeners, such as the run button.
     */ #setEventListeners = ()=>{
        document.getElementById("runButton").addEventListener("click", ()=>{
            this.HUB.run();
        });
    };
    /** --- PRIVATE ---
     * Creates the inspector DOM Node.
     */ #createInspector = ()=>{
        this.INS.createInspectorDomNode();
    };
}

},{"../modules/index.js":"ddnCK","../components/environment/index.js":"6NNZ8","../dataComponents/index.js":"1QZVj","../workers/workerManager.js":"9nAa4","../components/popup/index.js":"fY0gk","../htmlGeneration/index.js":"f3jdF","../components/inspector/index.js":"ekKGP","../components/moduleSelectionMenu/index.js":"fYnOv","../servers/hub.js":"2dJqk","../components/domManagement/domManager.js":"bllQU","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ddnCK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Module", ()=>(0, _moduleJs.Module));
parcelHelpers.export(exports, "Source", ()=>(0, _sourceJs.Source));
parcelHelpers.export(exports, "Search", ()=>(0, _searchSourceJs.Search));
parcelHelpers.export(exports, "Csv", ()=>(0, _csvSourceJs.Csv));
parcelHelpers.export(exports, "Cholera", ()=>(0, _sourceJs.Cholera));
parcelHelpers.export(exports, "Processor", ()=>(0, _processorJs.Processor));
parcelHelpers.export(exports, "Filter", ()=>(0, _processorJs.Filter));
parcelHelpers.export(exports, "DataConversion", ()=>(0, _processorJs.DataConversion));
parcelHelpers.export(exports, "Output", ()=>(0, _outputJs.Output));
parcelHelpers.export(exports, "LineChart", ()=>(0, _outputJs.LineChart));
parcelHelpers.export(exports, "BarChart", ()=>(0, _outputJs.BarChart));
parcelHelpers.export(exports, "ScatterPlot", ()=>(0, _outputJs.ScatterPlot));
parcelHelpers.export(exports, "OrbitalPlot", ()=>(0, _outputJs.OrbitalPlot));
parcelHelpers.export(exports, "ObjectImages", ()=>(0, _objectImagesJs.ObjectImages));
parcelHelpers.export(exports, "Table", ()=>(0, _tableJs.Table));
parcelHelpers.export(exports, "ToCSV", ()=>(0, _outputJs.ToCSV));
parcelHelpers.export(exports, "Composite", ()=>(0, _compositModuleJs.Composite));
parcelHelpers.export(exports, "CompositePrefab", ()=>(0, _compositModuleJs.CompositePrefab));
parcelHelpers.export(exports, "ModuleManager", ()=>(0, _moduleManagerJs.ModuleManager));
parcelHelpers.export(exports, "ModuleGenerator", ()=>(0, _moduleGeneratorJs.ModuleGenerator));
parcelHelpers.export(exports, "Data", ()=>(0, _dataModuleJs.Data));
parcelHelpers.export(exports, "SaveCompositeModulePopupContent", ()=>(0, _saveCompositeModulePopupContentJs.SaveCompositeModulePopupContent));
parcelHelpers.export(exports, "PopupContentMaker", ()=>(0, _popupContentMakerJs.PopupContentMaker));
var _moduleJs = require("./module.js");
var _sourceJs = require("./sourceModules/source.js");
var _searchSourceJs = require("./sourceModules/searchSource.js");
var _csvSourceJs = require("./sourceModules/csvSource.js");
var _processorJs = require("./processorModules/processor.js");
var _outputJs = require("./outputModules/output.js");
var _objectImagesJs = require("./outputModules/objectImages.js");
var _tableJs = require("./outputModules/table.js");
var _compositModuleJs = require("./compositModule/compositModule.js");
var _moduleManagerJs = require("./moduleManager.js");
var _moduleGeneratorJs = require("./generator/moduleGenerator.js");
var _dataModuleJs = require("./dataModule/dataModule.js");
var _saveCompositeModulePopupContentJs = require("./components/saveCompositeModulePopupContent.js");
var _popupContentMakerJs = require("./components/popupContentMaker.js");

},{"./module.js":"a5q86","./sourceModules/source.js":"5DxJP","./sourceModules/searchSource.js":"9CYU7","./sourceModules/csvSource.js":"5ZaQJ","./processorModules/processor.js":"1OLFC","./outputModules/output.js":"5FZt3","./outputModules/objectImages.js":"czBTW","./outputModules/table.js":"5zQ56","./compositModule/compositModule.js":"2mCNw","./moduleManager.js":"2MxzQ","./generator/moduleGenerator.js":"33rvh","./dataModule/dataModule.js":"14ZQg","./components/saveCompositeModulePopupContent.js":"4ZKbb","./components/popupContentMaker.js":"byeW1","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"a5q86":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Module", ()=>Module);
var _indexJs = require("../communication/index.js");
var _mainJs = require("../main.js");
var _inspectorCardMakerJs = require("./components/inspectorCardMaker.js");
var _popupContentMakerJs = require("./components/popupContentMaker.js");
var _constantsJs = require("../sharedVariables/constants.js");
var _htmlFactoryJs = require("../htmlGeneration/htmlFactory.js");
class Module {
    #dataTable;
    /*******************************************************************************
     * 
     * All Data is stored in this hash table ( JS Map Object ). 
     * New Data is added through the addData() function.
     * 
     * THE DATA TABLE CAN HAVE THE FOLLOWING FIELDS. NOT ALL MODULES HAVE ALL FIELDS
     * --------------------------------------------------------------------------------------------
     * key (number)                             | Unique Identifier for each module
     * dataKey (Number)                         | Key to Data stored on DataManager
     * inportType (Number)                      | Identifies Allowed links in Environment
     * outportType (Number)                     | Identifies Allowed links in Environment 
     * type (string)                            | Module Type or category, ie. Source
     * color (string)                           | Module color in Environment
     * shape (string)                           | Module shape in Environemnt
     * command (string)                         | Command for server to execute
     * name (string)                            | Module Name ie. CSV File
     * imagePath (string)                       | Path to icon
     * description (string)                     | Module Description
     * chartType (string)                       | ie. bar, scatter
     * coordinateSystem (string)                | ie. cartesian_2d, polar
     * isDataModule (boolean)                   | true if this is a data module (deprecated)
     * linkedToData (boolean)                   | true if connected to a graph with data (deprecated)
     * processed (boolean)                      | true if a module is processed
     * moduleData (Object[])                    | Array of information for module-specific data
     * requestMetadataOnCreation (boolean)      | Some Source models will ping server for metadata
     * popupContent (Object)                    | The HTML to insert into a popup
     * metadata (Object)                        | Headers, min, max etc.
     * conversionCard (Object)                  | Object for the DataConversion Module
     * themeDD (HTML Object)                    | Dropdown for changing echart theme
     * plotDiv (HTML Div Object)                | Div where plots are inserted.
     * inports (Object[])                       | Array of information for building Environment ports
     * outports (Object[])                      | Array of information for building Environment ports
     * getFilterDetailsFunctionArray (Function) | Array of filter functions
     * callOnCreationFunction (Function)        | Request onCreation function to be called
     * onCreationFunction (Function)            | Function to call on creation of module.
     * ----------------------------------------------------------------------------------------------
*/ /* The InspectorCardMaker is an object that sits between the Module and the Inspector Card. It
    *  is called by the Module and then calls the InspectorCard */ inspectorCardMaker;
    /* Works just like the InspectorCardMaker. Module does not directly access the popup. */ popupContentMaker;
    publisher;
    constructor(type, color, shape, command1, name, imagePath, inports, outports, key, description){
        this.#dataTable = new Map();
        this.publisher = new (0, _indexJs.Publisher)();
        this.inspectorCardMaker = new (0, _inspectorCardMakerJs.InspectorCardMaker)(name, color, key);
        this.popupContentMaker = new (0, _popupContentMakerJs.PopupContentMaker)();
        this.setInitialDataValues(type, color, shape, command1, name, imagePath, inports, outports, key, description);
        this.HF = new (0, _htmlFactoryJs.HTMLFactory)();
        this.subscriber = new (0, _indexJs.Subscriber)(this.messageHandler.bind(this));
        this.inspectorCardMaker.publisher.subscribe(this.subscriber);
        this.popupContentMaker.publisher.subscribe(this.subscriber);
        this.setPopupContent();
    }
    /**
    * Passes messages from the Modules to the Module Manager
    * @param {Message} msg the message to pass along the chain of command 
    */ messageHandler = (msg)=>{
        const messageData = msg.readMessage();
        if (messageData.to !== (0, _constantsJs.MODULE)) {
            msg.updateFrom((0, _constantsJs.MODULE));
            this.sendMessage(msg);
        }
    };
    /** --- PUBLIC ---
     * This data is mostly used by gojs to make the graph node.
     * @param {string} type type of module
     * @param {string} color color of module
     * @param {string} shape shape of module 
     * @param {string} command server command associated with module
     * @param {string} name name of the module
     * @param {string} imagePath path to the image displayed by the module
     * @param {array} inports array of inports
     * @param {array} outports array of outports
     * @param {number} key key of module
     */ setInitialDataValues = (type, color, shape, command1, name, imagePath, inports, outports, key, description)=>{
        if (type && color && shape && command1 && name && imagePath && inports && outports && key) {
            this.addData("type", type);
            this.addData("image", imagePath);
            this.addData("color", color);
            this.addData("shape", shape);
            this.addData("inports", inports);
            this.addData("outports", outports);
            this.addData("name", name);
            this.addData("key", key);
            this.addData("command", command1);
            this.addData("description", description);
            this.addData("command", command1);
        } else console.log(`ERROR: Missing Parameter. type: ${type}, imagePath: ${imagePath}, color: ${color}, shape: ${shape}, command: ${command1}, name: ${name}, inports: ${inports}, outports: ${outports}, key: ${key}. -- Module -> setInitialDataValues`);
    };
    /** --- PUBLIC ---
     * Gets the command that the server will use to identify the action that should be taken for this module in the pipeline.
     * @returns the command associated with this module. */ getCommand = ()=>{
        if (this.#dataTable.had("command")) {
            const command1 = this.#dataTable.get("command");
            if (command1 !== "") return command1;
        } else console.log(`ERROR: command == ${command}. -- Module -> getCommand`);
        return undefined;
    };
    /** --- PUBLIC ---
     * Sets the popup content associated with this module. This is the generic function and will likely be overriden in the child classes. */ setPopupContent = ()=>{
        const popupContent = this.popupContentMaker.getPopupContentWrapper();
        console.log(popupContent);
        /*const loadingWrapper = GM.HF.createNewDiv('', '', ['popup-loading-wrapper'], []);
        loadingWrapper.appendChild(GM.HF.createNewIMG('popup-loading-spinner', '', 'images/icons/loading_spinner.gif', [], [{ style: 'width', value: '60px' }], ''));
        popupContent.appendChild(loadingWrapper);*/ this.addData("popupContent", popupContent);
    };
    updatePopupContent = (content)=>{
        this.addData("popupContent", content);
    };
    /** --- PUBLIC ---
     * Adds data to this modules data hash table.
     * @param {string} key the key for the hash table 
     * @param {any} value to store
     */ addData = (key, value)=>{
        this.#dataTable.set(key, value);
    };
    /** --- PUBLIC ---
     * Removes data of this modules data hash table.
     * @param {string} key the key for the hash table 
     * @param {any} value to store
     */ removeData = (key)=>{
        if (this.getData(key)) {
            this.#dataTable.delete(key);
            return true;
        }
        return false;
    };
    /** --- PUBLIC ---
     * Stores the entire metadata object in the data table. Will overwrite if there is already data there and
     * new data is sent through this function.
     * @param {Object} metadata the metadata object 
     */ updateMetadata = (metadata)=>{
        this.addData("metadata", metadata);
    };
    /** --- PUBLIC ---
     * Gets a value associated with a key from this module's datatable.
     * @param {string} key 
     * @returns the value if found.*/ getData = (key)=>{
        if (key != undefined && key !== "") {
            if (this.#dataTable.has(key)) return this.#dataTable.get(key);
            else console.log(`ERROR: No data found for key: ${key}. -- Module -> getData`);
        } else console.log(`ERROR: key: ${key}. -- Module -> getData`);
        return undefined;
    };
    /** --- PUBLIC ---
     * When a module is removed, the inspector card must be deleted.
     * This removes the HTML element from the dom.*/ deleteInspectorCard = ()=>this.inspectorCardMaker.deleteInspectorCard();
    /** --- PUBLIC ---
     * Gets the inspector card html element.
     * @returns the HTML Inspector Card*/ getInspectorCard = ()=>this.inspectorCardMaker.inspectorCard;
    /** --- PUBLIC ---
     * Gets the content to populate a popup associated with this module.
     * @returns the content to populate the popup associated with this module*/ getPopupContent = ()=>{
        this.getData("popupContent");
        return {
            width: this.getData("popupWidth"),
            height: this.getData("popupHeight"),
            color: this.getData("color"),
            content: this.getData("popupContent"),
            headerText: this.getData("name")
        };
    };
    onCreation() {
        var moduleKey = this.getData("key");
        console.log(`module-${moduleKey} onCreation`);
    }
    /** --- PUBLIC ---
     * After the old key is used to identify the modules that were part of the saved prefab module, the old
     * keys are removed from the data table.
     */ destroyOldKey() {
        if (this.#dataTable.has("oldKey")) this.#dataTable.delete("oldKey");
    }
    sendMessage(msg) {
        this.publisher.publishMessage(msg);
    }
}

},{"../communication/index.js":"eT70M","../main.js":"1SICI","./components/inspectorCardMaker.js":"itX9z","./components/popupContentMaker.js":"byeW1","../sharedVariables/constants.js":"dxmqI","../htmlGeneration/htmlFactory.js":"9lYdL","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eT70M":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Subscriber", ()=>(0, _subscriberJs.Subscriber));
parcelHelpers.export(exports, "Publisher", ()=>(0, _publisherJs.Publisher));
parcelHelpers.export(exports, "Message", ()=>(0, _messageJs.Message));
var _subscriberJs = require("./subscriber.js");
var _publisherJs = require("./publisher.js");
var _messageJs = require("./message.js");

},{"./subscriber.js":"7CNTw","./publisher.js":"ilZi7","./message.js":"QtU95","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7CNTw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Subscriber", ()=>Subscriber);
class Subscriber {
    constructor(msgHandler){
        this.messageHandler = msgHandler;
        this.publisher;
    }
    receiveMessage = (msg)=>{
        this.messageHandler(msg);
    };
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gkKU3":[function(require,module,exports) {
exports.interopDefault = function(a) {
    return a && a.__esModule ? a : {
        default: a
    };
};
exports.defineInteropFlag = function(a) {
    Object.defineProperty(a, "__esModule", {
        value: true
    });
};
exports.exportAll = function(source, dest) {
    Object.keys(source).forEach(function(key) {
        if (key === "default" || key === "__esModule" || dest.hasOwnProperty(key)) return;
        Object.defineProperty(dest, key, {
            enumerable: true,
            get: function() {
                return source[key];
            }
        });
    });
    return dest;
};
exports.export = function(dest, destName, get) {
    Object.defineProperty(dest, destName, {
        enumerable: true,
        get: get
    });
};

},{}],"ilZi7":[function(require,module,exports) {
/**
 * Represents a message publisher. Messages send should ALWAYS BE an instance of class Message.
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Publisher", ()=>Publisher);
class Publisher {
    constructor(){
        this.key = 0; // Subscriber Counter
        this.subscriberList = []; // List of subscribers (Should always be 1 unless changing design pattern)
    }
    /**
     * Notifies subscribers of a published message.
     * @param {Message} msg 
     */ publishMessage = (msg)=>{
        this.subscriberList.forEach((s)=>{
            s.subscriber.receiveMessage(msg);
        });
    };
    /**
     * When components subscribe to this publisher, they will recieve all messages published by this publisher.
     * @param {Subscriber} sub A Subscriber object that can handle messages. 
     */ subscribe = (sub)=>{
        this.key++;
        this.subscriberList.push({
            key: this.key,
            subscriber: sub
        });
    };
    printSubscriberList = ()=>{
        console.log(this.subscriberList);
    };
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"QtU95":[function(require,module,exports) {
/**
 * This class represents a message. It is the object that is passed between components by means of publisher/subscriber communication.
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Message", ()=>Message);
class Message {
    #to;
    #from;
    #type;
    #data;
    // needs to know how to parse this.)
    constructor(to, from, type, data){
        this.#to = to;
        this.#from = from;
        this.#type = type;
        this.#data = data;
    }
    /**
     * The function is called when a message is received by a component to access private details.
     * This forces methad passing to be consistent.
     */ readMessage = ()=>{
        return {
            to: this.#to,
            from: this.#from,
            type: this.#type,
            data: this.#data
        };
    };
    /**
     * 
     * @param {ing} to A constant value representing one of the components in the application 
     *                 (Found in the file constants.js) 
     * @returns 
     */ updateTo = (to)=>this.#to = to;
    /**
     * When passing the messages along the chain of responsibility, modules will update the from 
     * field of the message.
     * @param {int} from A constant value representing one of the components in the application. 
     *                   (Found in the file constants.js) 
     * @returns 
     */ updateFrom = (from)=>this.#from = from;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"itX9z":[function(require,module,exports) {
/*************************************************************
 * COPYRIGHT University of Hawaii - COMA Project / Lava Lab  *
 * Author: James Hutchison                                   *
 * Date: 5/5/2022                                            *
 *************************************************************/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * This class is an intermediary between the Insepctor Card and the Modules. This Object has specific function
 * names that I think were easier to read and understand when creating elements.
 */ parcelHelpers.export(exports, "InspectorCardMaker", ()=>InspectorCardMaker);
var _inspectorCardJs = require("../../components/inspector/inspectorCard.js");
var _includeColumnCardJs = require("../../components/inspector/inspectorCardComponents/includeColumnCard.js");
var _indexJs = require("../../communication/index.js");
var _htmlFactoryJs = require("../../htmlGeneration/htmlFactory.js");
/*import { INSPECTOR_CARD, INSPECTOR_CARD_MAKER, MODULE_MANAGER, INPUT_MANAGER, OUTPUT_MANAGER, WORKER_MANAGER } from '../../sharedVariables/constants.js';
import { DatasetTypes, DatasetFields, SearchFields, DefaultAxis } from '../../sharedVariables/moduleData.js';*/ var _indexJs1 = require("../../sharedVariables/index.js");
var _lilGuiModuleMinJs = require("../../dataComponents/charts/lil-gui.module.min.js");
var _lilGuiModuleMinJsDefault = parcelHelpers.interopDefault(_lilGuiModuleMinJs);
class InspectorCardMaker {
    dataTable;
    constructor(name, color, key){
        this.dataTable = new Map();
        this.inspectorCard = new (0, _inspectorCardJs.InspectorCard)(name, color, key);
        this.publisher = new (0, _indexJs.Publisher)();
        this.subscriber = new (0, _indexJs.Subscriber)(this.messageHandler.bind(this));
        this.inspectorCard.publisher.subscribe(this.subscriber);
        this.messageHandlerMap = new Map();
        this.buildMessageHandlerMap();
        this.HF = new (0, _htmlFactoryJs.HTMLFactory)();
    }
    buildMessageHandlerMap() {
    // TODO: Handle messages if necessary
    }
    messageHandler = (msg)=>{
        const messageData = msg.readMessage();
        if (messageData.from === (0, _indexJs1.INSPECTOR_CARD) && messageData.to !== (0, _indexJs1.INSPECTOR_CARD_MAKER)) {
            msg.updateFrom((0, _indexJs1.INSPECTOR_CARD_MAKER));
            this.sendMessage(msg);
        }
    };
    /** --- PUBLIC ---
     * Alerts Inspector to maximize Card */ maximizeCard() {
        this.inspectorCard.maximizeCard();
    }
    /** --- PUBLIC ---
     * Adds a Module Id Field Key Value Card to the Inspector Card
     * Key: 'Module Id', value: key
     * @param {Number} key the module key */ addInspectorCardIDField(key) {
        this.inspectorCard.addKeyValueCard("Module Id", [
            key.toString()
        ]);
    }
    /** --- PUBLIC ---
     * Adds a Card to the Inspector Card for any linked nodes. Starts with a single key because it is created at first link.
     * Key: 'Linked Node(s), value: array of keys that are linked
     * @param {Number} key the key to the linked node */ addInspectorCardLinkedNodeField(key) {
        this.inspectorCard.addDynamicKeyValueCard("Linked Node(s)", [
            `(${key})`
        ]);
    }
    /** --- PUBLIC ---
     * Adds a Card to the inspector card called Data Linked. Starts as False but changed to true when a link is made in 
     * the GOJS Environment */ addInspectorCardDataConnectedField() {
        this.inspectorCard.addDynamicKeyValueCard("Data Linked", [
            false
        ]);
    }
    /** --- PUBLIC ---
     * Emits a Request List of Objects Event for the Input Manager. The HUB will call the callback function when it
     * gets the list of objects. */ addInspectorCardObjectsDropdown() {
        const message = new (0, _indexJs.Message)((0, _indexJs1.INPUT_MANAGER), (0, _indexJs1.INSPECTOR_CARD_MAKER), "Request List of Objects", {
            callbackFunction: this.createInspectorCardDropdown.bind(this)
        });
        this.sendMessage(message);
    }
    /** --- PUBLIC ---
     * Called by the HUB after it gets a list of all objects from the Input Manager.
     * This is not properly implemented. Currently the HUB is not passing a callback function, 
     * @param {Object[]} objectsList This is currently a key:value that is 2 strings. This will likely change when
     *                               the database is set up correctly
     */ createInspectorCardDropdown(objectsList) {
        this.addData("Objects List", objectsList);
        this.addData("Selected Object", Object.keys(objectsList)[0]);
        const searchCard = this.inspectorCard.addObjectsSearchCard(objectsList);
    // TODO: handle changes in the dropdown list on the search card
    }
    /** --- PUBLIC ---
     * Notifies the inspector card to create the X Axis card
     * @param {stringp[]} headers the names of the fields in the dataset 
     * @param {Number} key the module key 
     * @param {function} addTraceFunction function attached to the add trace button when clicked
     * @returns { 
     * dropdown: HTML select, 
     * labelInput: HTML input, 
     * gridCheckbox: HTML checkbox, 
     * tickCheckbox: HTML checkbox, 
     * addTraceButton: HTML button, 
     * errorDropDown: undefined } This data is passed to the ChartData object and event listeners are applied. */ addInspectorCardChartXAxisCard(headers, key, addTraceFunction) {
        const title = "test"; // Change this is this element ever needs to be found by id
        const dropDown = this.HF.createNewSelect(`${title}-${key}`, `${title}-${key}`, [], [], headers, headers);
        const labelInput = this.HF.createNewTextInput("", "", [
            "axis-card-label-input"
        ], [], "text");
        const gridCheckbox = this.HF.createNewCheckbox("", "", [], [], "Grid Lines", "Grid Lines");
        const tickCheckbox = this.HF.createNewCheckbox("", "", [], [], "Ticks", "Ticks");
        const addTraceButton = this.HF.createNewButton("", "", [
            "axis-card-button"
        ], [], "button", "Add Trace");
        this.inspectorCard.addXAxisCard(dropDown, labelInput, gridCheckbox.wrapper, tickCheckbox.wrapper, addTraceButton, addTraceFunction, undefined);
        return {
            dropdown: dropDown,
            labelInput: labelInput,
            gridCheckbox: gridCheckbox,
            tickCheckbox: tickCheckbox,
            addTraceButton: addTraceButton,
            errorDropDown: undefined
        };
    }
    /** --- PUBLIC ---
     * Adds a new trace to the inspector card after a button click
     * @param {HTML Select} dropdown a dropdown of available fields to chart
     * @param {HTML Select} errorDropDown a dropdown of available fields for error in the chart
     */ addNewTraceToInspectorCard(dropdown, errorDropDown) {
        this.inspectorCard.addChartTrace(dropdown, errorDropDown);
    }
    /** --- PUBLIC ---
     * Notifies the inspector card to create the Y Axis card
     * @param {string[]} headers the names of the fields in the dataset 
     * @param {Number} key the module key 
     * @param {function} addTraceFunction function attached to the add trace button when clicked
     * @returns { 
     * dropdown: HTML select, 
     * labelInput: HTML input, 
     * gridCheckbox: HTML checkbox, 
     * tickCheckbox: HTML checkbox, 
     * addTraceButton: HTML button, 
     * errorDropDown: HTML select } This data is passed to the ChartData object and event listeners are applied.
     */ addInspectorCardChartYAxisCard(headers, key, addTraceFunction) {
        const errorHeaders = [
            ...headers
        ];
        errorHeaders.unshift("None");
        const title = "test";
        const dropDown = this.HF.createNewSelect(`${title}-${key}`, `${title}-${key}`, [], [], headers, headers);
        const errorDropDown = this.HF.createNewSelect(`${title}-${key}`, `${title}-${key}`, [], [], errorHeaders, errorHeaders);
        const labelInput = this.HF.createNewTextInput("", "", [
            "axis-card-label-input"
        ], [], "text");
        const gridCheckbox = this.HF.createNewCheckbox("", "", [], [], "Grid Lines", "Grid Lines");
        const tickCheckbox = this.HF.createNewCheckbox("", "", [], [], "Ticks", "Ticks");
        const addTraceButton = this.HF.createNewButton("", "", [
            "axis-card-button"
        ], [], "button", "Add Trace");
        this.inspectorCard.addYAxisCard(dropDown, labelInput, gridCheckbox.wrapper, tickCheckbox.wrapper, addTraceButton, addTraceFunction, errorDropDown);
        return {
            dropdown: dropDown,
            labelInput: labelInput,
            gridCheckbox: gridCheckbox,
            tickCheckbox: tickCheckbox,
            addTraceButton: addTraceButton,
            errorDropDown: errorDropDown
        };
    }
    /** --- PUBLIC ---
     * Creates an array of checkboxes for each available data column field. Then these checkboxes are 
     * passed to the inspector card to create an HTML element containing all checkboxes.
     * @param {string[]} headers the names of the headers of the dataset
     * @param {Number} key the key of the module 
     * @returns checkboxes[] so that event listeners can be applied.
     */ addInspectorCardIncludeColumnCard(headers, key) {
        let checkboxes = [];
        headers.forEach((header, index)=>{
            checkboxes.push(this.HF.createNewCheckbox(`includeColumn-checkbox-module${key}-${index}`, `includeColumn-checkbox-module${key}-${index}`, [
                "include-column-checkbox"
            ], [], header, header, true));
        });
        this.inspectorCard.addIncludeColumnCard(checkboxes);
        return checkboxes;
    }
    /** --- PUBLIC ---
     * Creates a Generate Chart button with a callback
     * @param {Number} key Module Key
     * @param {Function} callbackFN Function that Emits a Create Local Chart Event
     * @returns the button 
     */ addInspectorCardGenerateChartButton(key, callbackFN) {
        const buttonWrapper = this.HF.createNewDiv("", "", [
            "generate-chart-button-wrapper"
        ], []);
        const button = this.HF.createNewButton(`generate-chart-button-${key}`, `generate-chart-button-${key}`, [
            "generate-chart-button"
        ], [], "button", "Generate Chart", false);
        buttonWrapper.appendChild(button);
        this.inspectorCard.appendToBody(buttonWrapper);
        button.addEventListener("click", callbackFN);
        return button;
    }
    /** --- PUBLIC ---
     * Creates a Preview Table Button with a callback
     * @param {Nuber} key Module Key 
     * @param {*} callbackFN Function that emits a Create New Local Table Event
     * @returns the button
     */ addInspectorCardGenerateTablePreviewButton(key, callbackFN) {
        const button = this.HF.createNewButton(`create-table-preview-button-${key}`, `create-table-preview-button-${key}`, [], [], "button", "Genereate", false);
        button.addEventListener("click", callbackFN);
        this.#addDynamicInspectorCardFieldWithPrebuiltValueDiv("Preview Table: ", button, false);
        return button;
    }
    /** --- PUBLIC ---
     * Creates a Generate CSV File Button with a callback. Button is passed ot the 
     * @param {Nuber} key Module Key 
     * @param {*} callbackFN Function that emits a Create New CSV File Event
     * @returns the button */ addInspectorCardGenerateCSVFileButton(key, callbackFN) {
        const button = this.HF.createNewButton(`create-CSV-button-${key}`, `create-CSV-button-${key}`, [], [], "button", "Generate", false);
        button.addEventListener("click", callbackFN);
        this.#addDynamicInspectorCardFieldWithPrebuiltValueDiv("Generate CSV File: ", button, false);
        return button;
    }
    addInspectorDataCard() {
    // TODO: Inspector Card for the Data Module has not been implemented correctly yet.
    //       Currently it is just creating a mess of cards identifying fields and datatypes
    }
    /** --- PUBLIC ---
     * Appends a HTML p with description text to the inspector card
     * @param {string} description description of the module */ addInspectorCardDescription(description) {
        this.inspectorCard.appendToBody(this.HF.createNewParagraph("", "", [
            "inspector-card-description"
        ], [], description));
    }
    /** --- PUBLIC ---
     * Creates a card for a Composite Module. 
     * @param {Object} groupData JSON representation of the group of modules
     * @param {function} saveModuleCallback this function is called when a module is saved. */ createInspectorCompositeDetailCard(groupData, saveModuleCallback) {
        this.inspectorCard.addCompositeDetailsCard(groupData, saveModuleCallback);
    }
    /** --- PUBLIC ---
     * Creates a card for the metadata that has the name, datatype, and format. 
     * This card should not be used in production unless a lot of changes are made. The CSS is bad and
     * I'm not sure its that useful
     * @param {Object[]} metadata Object containing all metadata for a dataset. */ addMetadataCard(metadata) {
        metadata.columnHeaders.forEach((header)=>{
            this.inspectorCard.addKeyValueCard(header.name, [
                header.dataType,
                header.dataFormat
            ]);
        });
    }
    /** --- PUBLIC ---
     * Creates all of the filter cards for a set of data. A filter card is a min/max card and has a range slider.
     * In the future, an additional type of card is necessary for categorical data. 
     * @param {Object} metadata Object containing all metadata for a Data set 
     * @returns Array of functions that can be used to access the data on each specific filter card. */ addFilterCards(metadata) {
        const filterArray = [];
        metadata?.columnHeaders.forEach((header)=>{
            filterArray.push(this.inspectorCard.addMinMaxCard(header.name, header.min, header.max, header.dataType, header.dataFormat, header.changeDataTypeFunction));
        });
        return filterArray;
    }
    /** --- PUBLIC ---
     * This can add a new columns to the filter card in the inspector.
     * @param {object[]} columnHeaders array of data fields to add to the filter card.
     * @param {function[]} filterArray Existing array of functions that get data from the filter cards */ addCardsToExistingFilter(columnHeaders, filterArray) {
        columnHeaders.forEach((col)=>{
            filterArray.push(this.inspectorCard.addMinMaxCard(col.name, col.min, col.max, col.dataType, col.dataFormat, col.changeDataTypeFunction));
        });
    }
    /** --- PUBLIC ---
     * Adds a card for converting data fields.
     * @param {Object} metadata Object representing all metadata for the dataset 
     * @returns the conversion card */ addConversionCard(metadata) {
        return this.inspectorCard.addConversionCard(metadata);
    }
    /** --- PRIVATE ---
     * This generates a flex container and appends a text field followed by an HTML element. The HTML element is already
     * generated before calling and passed as an argument.
     * @param {string} text the label
     * @param {HTML element} valueDiv the HTML element to add to the inspector card. i.e. button or select */ #addDynamicInspectorCardFieldWithPrebuiltValueDiv(text, valueDiv) {
        const container = this.#createInspectorCardHorizontalFlexContainer();
        const keyDiv = this.HF.createNewParagraph("", "", [
            "inspector-card-key-text"
        ], [], text);
        container.appendChild(keyDiv);
        container.appendChild(valueDiv);
        this.inspectorCard.appendToBody(container);
    }
    /** --- PUBLIC ---
     * Calls the InspectorCard and updates a key value pair with a new value and changes the card.
     * @param {string} key the key in the dataTable
     * @param {any} value the new value */ updateInspectorCardDynamicField(key, value) {
        this.inspectorCard.updateDynamicField(key, value);
    }
    /** --- PUBLIC ---
     * Removes an inspector card from the DOM
     */ deleteInspectorCard() {
        this.inspectorCard.getCard().remove();
    }
    /** --- PRIVATE ---
     * Creates a horizal flex container HTML Element
     * @returns the HTML element
     */ #createInspectorCardHorizontalFlexContainer = ()=>this.HF.createNewDiv("", "", [
            "inspector-card-horizontal-flex-container"
        ], []);
    createCSVModuleInspectorCard(callback, moduleKey) {
        const contentWrapper = this.HF.createNewDiv("", "", [
            "wrapper",
            "csv-inspector-wrapper"
        ], []);
        const datasetTypeWrapper = this.HF.createNewDiv("", "", [
            "wrapper",
            "dataset-type-wrapper"
        ], []);
        const objectsDropdownWrapper = this.HF.createNewDiv(`objects-dropdown-wrapper-${moduleKey}`, "", [
            "wrapper",
            "objects-dropdown-wrapper"
        ], []);
        const uploadWrapper = this.HF.createNewDiv("", "", [
            "wrapper",
            "upload-wrapper"
        ], []);
        contentWrapper.appendChild(datasetTypeWrapper);
        contentWrapper.appendChild(objectsDropdownWrapper);
        contentWrapper.appendChild(uploadWrapper);
        this.inspectorCard.appendToBody(contentWrapper);
        this.dataTable.set(`CSVInspectorCard_${moduleKey}`, contentWrapper);
        // Create DatasetType dropdown
        const options = (0, _indexJs1.DatasetTypes).map((ds)=>{
            return ds.type;
        });
        options.push("other");
        const datasetTypeLabel = this.HF.createNewLabel("", "", "", [
            "dataset-type-label"
        ], [], "Dataset Type: ");
        const datasetTypeDropdown = this.HF.createNewSelect("", "", [
            "dataset-type-dropdown"
        ], [], options, options);
        datasetTypeWrapper.appendChild(datasetTypeLabel);
        datasetTypeWrapper.appendChild(datasetTypeDropdown);
        // Create objects dropdown field
        const objectLabelDiv = this.HF.createNewDiv("", "", [
            "object-label-wrapper"
        ], []);
        const objectLabel = this.HF.createNewLabel("", "", `csv-objects-input-${moduleKey}`, [
            "objects-label"
        ], [], "Objects: ");
        objectLabelDiv.appendChild(objectLabel);
        objectsDropdownWrapper.appendChild(objectLabelDiv);
        const objectInputDiv = this.HF.createNewDiv("", "", [
            "object-input-wrapper"
        ], []);
        let textInput = this.HF.createNewTextInput(`csv-objects-input-${moduleKey}`, "objects", [
            "typeahead-input",
            "objects-input"
        ], [
            {
                style: "border",
                value: "inset"
            }
        ], "text", "");
        textInput.setAttribute("remote", true);
        const resultContainer = this.HF.createNewDiv("", "", [
            "typeahead-result-container"
        ], [
            {
                style: "display",
                value: "none"
            }
        ]);
        objectInputDiv.appendChild(textInput);
        objectInputDiv.appendChild(resultContainer);
        objectsDropdownWrapper.appendChild(objectInputDiv);
        // Create CSV load component
        const upload = this.HF.createNewFileInput(`upload_csv-${moduleKey}`, "upload_csv", [], [], "file", false);
        uploadWrapper.appendChild(upload);
        upload.addEventListener("change", callback);
        this.dataTable.set("readFileButton", this.HF.createNewButton("read-file-button", "read-file-button", [
            "read-file-button",
            "button"
        ], [], "button", "Read File", true));
        uploadWrapper.appendChild(this.getField("readFileButton"));
        this.getField("readFileButton").addEventListener("click", (e)=>{
            const objectInput = e.target.closest(".csv-inspector-wrapper").querySelector(".objects-input");
            const message = new (0, _indexJs.Message)((0, _indexJs1.INPUT_MANAGER), (0, _indexJs1.INSPECTOR_CARD_MAKER), "Read File Event", {
                fileId: "upload_csv-" + moduleKey,
                //elementId: inspectorId,
                moduleKey: moduleKey,
                fileType: "csv",
                objectName: objectInput.value
            });
            this.sendMessage(message);
        });
        // Expand the size of the inspector card
        this.inspectorCard.maximizeCard();
    }
    addCSVObjectsFieldFunction(moduleKey) {
        const csvInspectorWrapper = this.getField(`CSVInspectorCard_${moduleKey}`);
        const objectInputField = csvInspectorWrapper.querySelector(`#csv-objects-input-${moduleKey}`);
        this.inspectorCard.addCSVObjectFieldFunction(moduleKey, objectInputField);
    //this.inspectorCard.maximizeCard();
    }
    /** --- PUBLIC ---
     * Creates the HTML elements for the file upload section and binds a callback function to the button.
     * @param {function} callback validates the file on the CSV module
     * @param {number} key id of the CSV module that created this.
     */ #createFileUploadField(callback, key) {
        const uploadWrapper = this.HF.createNewDiv("", "", [
            "upload-wrapper"
        ], []);
        const upload = this.HF.createNewFileInput(`upload_csv-${key}`, "upload_csv", [], [], "file", false);
        uploadWrapper.append(upload);
        upload.addEventListener("change", callback);
        this.dataTable.set("readFileButton", this.HF.createNewButton("read-file-button", "read-file-button", [], [], "button", "Read File", true));
        uploadWrapper.appendChild(this.getField("readFileButton"));
        this.getField("readFileButton").addEventListener("click", ()=>{
            const message = new (0, _indexJs.Message)((0, _indexJs1.INPUT_MANAGER), (0, _indexJs1.INSPECTOR_CARD_MAKER), "Read File Event", {
                type: "csv",
                elementId: "upload_csv-" + key,
                moduleKey: key
            });
            this.sendMessage(message);
        });
        return uploadWrapper;
    }
    // --------------------------- Search Module ---------------------------
    /** --- PUBLIC ---
     * Adds a Search Form to the Search module inspector card
     * @param {key number} key of the search module
     */ addSearchFormFields(key) {
        console.log(key);
        //---------- Create Search Card Wrapper
        const searchCardWrapper = this.HF.createNewDiv("", "", [
            "search-card-wrapper"
        ], [
            {
                style: "display",
                value: "flex"
            },
            {
                style: "flex-direction",
                value: "column"
            },
            {
                style: "width",
                value: "100%"
            }
        ]);
        //---------- Create Search Form Card
        const formName = {
            name: "search-form-" + key,
            className: "search-form",
            submitButton: "Confirm"
        };
        const defaultFields = (0, _indexJs1.SearchFields).fieldsDict[0].fields;
        //const defaultFields = this.#handleRemoteDataFields(key, SearchFields.fieldsDict[0].fields);
        this.dataTable.set(`SearchFormCard_${key}`, this.inspectorCard.addSearchFormCard(key, formName, defaultFields));
        //---------- Create Query Type Options
        var options = (0, _indexJs1.DatasetTypes).map((dt)=>{
            return dt.type;
        });
        this.dataTable.set(`QueryTypeSelectCard_${key}`, this.inspectorCard.addQueryTypeSelect(searchCardWrapper, {
            key: "query-type-" + key,
            value: "Query Type "
        }, options, (0, _indexJs1.SearchFields).queryTypeTooltip));
        // Create Form Field Append
        /*var formFieldOptions = SearchFields.fieldsDict[0].fields;
        this.dataTable.set('FormFieldAppendSelectCard', this.inspectorCard.addFormFieldAppend(searchCardWrapper, { key: 'add-search-field', value: 'Add Field: ' }, formFieldOptions));*/ //---------- Append Form Card to this inspector card
        var searchFormCard = this.getField("SearchFormCard_" + key);
        searchCardWrapper.appendChild(searchFormCard.getCard().wrapper);
        this.inspectorCard.appendToBody(searchCardWrapper);
        // Add Flatpickr Date Range Plugin
        const dateFields = defaultFields.filter((field)=>field.type === "date");
        searchFormCard.createFlatpickrRangePlugin(dateFields);
        //this.inspectorCard.addFormFieldFunctions(key, searchFormCard, defaultFields, SearchFields.fieldTooltip);
        /********************************** js events ***********************************/ var queryTypeSelectCard = this.getField(`QueryTypeSelectCard_${key}`).getCard();
        /**
         * Search Form Submit Event
         **/ var submitButton = searchFormCard.getCard().submitButton;
        this.dataTable.set("SubmitFormButton_" + key, submitButton.querySelector(".btn"));
        this.getField(`SubmitFormButton_${key}`).addEventListener("click", (e)=>{
            e.preventDefault();
            //const searchForm = document.querySelector('#' + formName.name);
            const searchForm = searchFormCard.getCard().form;
            const entries = {};
            // get objectId
            var objectsFields = searchForm.querySelectorAll('[name="objects"]');
            objectsFields.forEach((objectField)=>{
                if (objectField.getAttribute("object-id")) entries["objects"] = objectField.getAttribute("object-id");
            });
            const formData = new FormData(searchForm);
            // Organize formData to only include non-empty field inputs
            const entriesToDelete = [];
            for (const entry of formData.entries())if (!entry[1] || entry[1] === "-1" || entry[0] === "objects") entriesToDelete.push(entry[0]);
            for (const key of entriesToDelete)formData.delete(key);
            // get queryEntries
            if (formData) formData.forEach((value, key)=>{
                entries[key] = value;
            });
            // get query type
            const dropdown = queryTypeSelectCard.dropdown;
            var datasetType = "Photometry";
            var queryType = "lightcurves"; // default in case dropdown does not exist
            var responseKey = "lightcurve";
            var sortBy = undefined;
            if (dropdown) {
                var dataset = (0, _indexJs1.DatasetTypes).filter((dt)=>dt.type === dropdown.options[dropdown.value].text);
                if (dataset) {
                    datasetType = dataset[0].type;
                    queryType = dataset[0].queryKey;
                    responseKey = dataset[0].responseKey;
                    sortBy = dataset[0].sortBy;
                }
            }
            console.log(entries);
            const message = new (0, _indexJs.Message)((0, _indexJs1.INPUT_MANAGER), (0, _indexJs1.INSPECTOR_CARD_MAKER), "Search Form Submit Event", {
                type: "form",
                remoteData: true,
                moduleKey: key,
                datasetType: datasetType,
                queryType: queryType,
                queryEntries: entries,
                responseKey: responseKey,
                sortBy: sortBy,
                delay: 1000
            });
            this.sendMessage(message);
        });
        /**
         * Update Search Form Field event (on query type change)
         * */ queryTypeSelectCard.dropdown.addEventListener("change", (e)=>{
            const dropdown = e.target;
            //var datasetType = dropdown.options[dropdown.selectedIndex].text;
            var queryType = dropdown.options[dropdown.selectedIndex];
            var fields = (0, _indexJs1.SearchFields).fieldsDict[queryType.value].fields;
            // update query type tooltip content
            var match = (0, _indexJs1.SearchFields).queryTypeTooltip.filter((x)=>x.type == queryType.text)[0];
            var description = "Query Type: " + queryType.text;
            if (match) description = match.description;
            var tooltipText = dropdown.closest("div").querySelector(".tooltip-text");
            tooltipText.textContent = description;
            // update form fields
            const formCard = this.getField("SearchFormCard_" + key);
            this.inspectorCard.updateSearchFormFields(key, formCard, fields, (0, _indexJs1.SearchFields).fieldTooltip);
        });
        this.inspectorCard.maximizeCard();
    }
    addFormFieldFunctions(moduleKey) {
        var searchCard = this.getField(`SearchFormCard_${moduleKey}`);
        const defaultFields = (0, _indexJs1.SearchFields).fieldsDict[0].fields;
        this.inspectorCard.addFormFieldFunctions(moduleKey, searchCard, defaultFields, (0, _indexJs1.SearchFields).fieldTooltip);
    //this.inspectorCard.maximizeCard();
    }
    /** Recursive Helper function to build columnsToRender information
     * 
     * */ #buildColumnsToRender(columnElements, columnHeaders, columnsToRender) {
        columnElements.forEach((element)=>{
            if (element.classList.contains("column-group-wrapper")) {
                var columnGroup = element.querySelector(".column-group");
                var columnName = columnGroup.getAttribute("name");
                var nestedColumnElements = columnGroup.children;
                var nestedColumnHeader = columnHeaders.find((h)=>h.fieldName === columnName);
                var nestedColumnHeaders = nestedColumnHeader.data;
                var nestedColumnsToRender = [];
                columnsToRender.push({
                    fieldName: columnName,
                    data: nestedColumnsToRender
                });
                this.#buildColumnsToRender(nestedColumnElements, nestedColumnHeaders, nestedColumnsToRender);
            } else {
                var checkedColumn = element.querySelector('input[type="checkbox"]:checked');
                if (checkedColumn) {
                    var target = columnHeaders.find((h)=>h.fieldName === checkedColumn.getAttribute("name"));
                    columnsToRender.push(target);
                }
            }
        });
    }
    // --------------------------- Table Module ---------------------------
    updateTableModuleInspectorCard(moduleKey, moduleData) {
        var includeColumnCard = new (0, _includeColumnCardJs.IncludeColumnCard)(moduleKey, moduleData.columnHeaders, "View Table");
        this.inspectorCard.appendToBody(includeColumnCard.getCard().wrapper);
        var datasetType = moduleData.datasetType;
        var columnHeaders = moduleData.columnHeaders;
        var sourceData = moduleData.sourceData;
        // add viewTable event listener
        document.querySelector("#view-button-" + moduleKey).addEventListener("click", (e)=>{
            // create table columns object to render
            var columnFields = e.target.closest("div").previousElementSibling;
            var columnsWrapper = columnFields.querySelector(".include-columns-wrapper");
            var includeColumns = columnsWrapper.children;
            var columnsToRender = [];
            this.#buildColumnsToRender(includeColumns, columnHeaders, columnsToRender);
            var moduleData = {
                moduleKey: moduleKey,
                datasetType: datasetType,
                columnsToRender: columnsToRender,
                sourceData: sourceData
            };
            console.log(sourceData);
            const message = new (0, _indexJs.Message)((0, _indexJs1.OUTPUT_MANAGER), (0, _indexJs1.INSPECTOR_CARD_MAKER), "Set New Table Event", moduleData);
            this.sendMessage(message);
        //var checkedColumns = columnFields.querySelectorAll('input[type="checkbox"]:checked');
        /*var columnsToRender = [];
                checkedColumns.forEach((checkedColumn) =>
                {
                    var columnName = checkedColumn.getAttribute('name');
                    columnsToRender.push(columnName);
                });

                moduleData['moduleKey'] = moduleKey;
                moduleData['columnsToRender'] = columnsToRender;

                console.log(moduleData);
                const message = new Message(OUTPUT_MANAGER, INSPECTOR_CARD_MAKER, 'Set New Table Event', moduleData);
                this.sendMessage(message);*/ });
    }
    // send message to setModuleData (x and y values and plotly options)
    /**********************************************************************************************************************************/ /**********************************************************************************************************************************/ /**********************************************************************************************************************************/ /** 
     *  Updates Chart module inspectorCard when link is drawn from a previous module (source/processor)
     *  @param { moduleKey } Number key specific to this chart module
     *  @param { moduleData } Object of the data passed on from the previous module
     * */ updateChartModuleInspectorCard(moduleKey, moduleData) {
        const chartData = moduleData.chartData; // change variable name to chartData?
        const datasetType = moduleData.datasetType;
        console.log(moduleData);
        let contentWrapper = this.HF.createNewDiv(`chart-inspector-${moduleKey}`, "", [
            "chart-inspector-wrapper"
        ], []);
        this.inspectorCard.appendToBody(contentWrapper);
        //-- Add Chart Title
        const chartTitle = moduleData.objectName ? moduleData.objectName : datasetType;
        let chartTitleWrapper = this.HF.createNewDiv("", "", [
            "chart-title-wrapper"
        ], [
            {
                style: "width",
                value: "100%"
            }
        ]);
        const chartTitleLabel = this.HF.createNewLabel("", "", `chart-title-${moduleKey}`, [
            "chart-title-label"
        ], [], "Chart Title: ");
        const chartTitleInput = this.HF.createNewTextInput(`chart-title-${moduleKey}`, "", [
            "chart-title"
        ], [], "text", chartTitle);
        chartTitleWrapper.appendChild(chartTitleLabel);
        chartTitleWrapper.appendChild(chartTitleInput);
        contentWrapper.appendChild(chartTitleWrapper);
        let chartInspectorWrapper = this.HF.createNewDiv("", "", [
            "chart-tabs-wrapper"
        ], [
            {
                style: "width",
                value: "100%"
            }
        ]);
        contentWrapper.appendChild(chartInspectorWrapper);
        //-- Create xAxis, yAxis, series tabs
        const tabsWrapper = this.HF.createNewDiv("", "", [
            "chart-tabs"
        ], [
            {
                style: "width",
                value: "100%"
            }
        ]);
        const xAxisTab = this.HF.createNewDiv("", "", [
            "x-axis-tab",
            "tab-button",
            "active"
        ], [
            {
                style: "width",
                value: "15%"
            }
        ], [
            {
                attribute: "data-tab",
                value: `xAxis-${moduleKey}`
            }
        ], "X Axis");
        const yAxisTab = this.HF.createNewDiv("", "", [
            "y-axis-tab",
            "tab-button"
        ], [
            {
                style: "width",
                value: "15%"
            }
        ], [
            {
                attribute: "data-tab",
                value: `yAxis-${moduleKey}`
            }
        ], "Y Axis");
        const seriesTab = this.HF.createNewDiv("", "", [
            "series-tab",
            "tab-button"
        ], [
            {
                style: "width",
                value: "15%"
            }
        ], [
            {
                attribute: "data-tab",
                value: `series-${moduleKey}`
            }
        ], "Series");
        tabsWrapper.appendChild(xAxisTab);
        tabsWrapper.appendChild(yAxisTab);
        tabsWrapper.appendChild(seriesTab);
        chartInspectorWrapper.appendChild(tabsWrapper);
        //-- Add Axis Cards
        const xAxisData = chartData.filter((cd)=>cd.name === "xaxis")[0];
        const yAxisData = chartData.filter((cd)=>cd.name === "yaxis")[0];
        // Find default field object to load (e.g. {type: "lightcurve", xaxis: "imagedate", yaxis: "mag", error: "mag_err"})
        const defaultAxis = (0, _indexJs1.DefaultAxes).filter((da)=>da.datasetType == datasetType)[0];
        //-- Create X axis card
        const xAxisContentInfo = {
            name: "xAxis",
            displayName: "X Axis",
            activeTab: true
        };
        const defaultXAxis = defaultAxis ? defaultAxis.xAxis : undefined;
        const xAxisCard = this.inspectorCard.addAxisCard(moduleKey, xAxisContentInfo, xAxisData.axes, defaultXAxis);
        chartInspectorWrapper.appendChild(xAxisCard.getCard().wrapper);
        //-- Create Y axis card
        const yAxisContentInfo = {
            name: "yAxis",
            displayName: "Y Axis",
            activeTab: false
        };
        const defaultYAxis = defaultAxis ? defaultAxis.yAxis : undefined;
        const yAxisCard = this.inspectorCard.addAxisCard(moduleKey, yAxisContentInfo, yAxisData.axes, defaultYAxis);
        chartInspectorWrapper.appendChild(yAxisCard.getCard().wrapper);
        //-- Prepare series fields here
        const seriesData = chartData.filter((cd)=>cd.name === "series")[0];
        //-- Create series card
        const seriesCard = this.inspectorCard.addSeriesCard(moduleKey, seriesData.fields);
        chartInspectorWrapper.appendChild(seriesCard.getCard().wrapper);
        //-- Add tab button event listener
        this.#createTabButtonEventListener(chartInspectorWrapper);
        //-- Add generateChartButton
        const generateChartButton = this.HF.createNewButton(`generate-chart-button-${moduleKey}`, "", [
            "generate-chart-button",
            "button"
        ], [
            {
                style: "width",
                value: "100%"
            }
        ], "button", "Generate Chart", false);
        contentWrapper.appendChild(generateChartButton);
        //-- Send message to Output Manager
        generateChartButton.addEventListener("click", (e)=>{
            //-- Get current axis card information
            const inspectorCard = e.target.closest(".inspector-card-body");
            const chartTitle = inspectorCard.querySelector(".chart-title");
            //-- Get axisData
            const axisTabContents = inspectorCard.querySelectorAll(".axis-tab-content"); // xAxis and yAxis contents
            // foreach axisCards
            const chartData = {};
            axisTabContents.forEach((axisTabContent)=>{
                const axisContentName = axisTabContent.getAttribute("id").split("-")[0];
                const axisArea = axisTabContent.querySelector(".axis-area");
                const axisCards = axisArea.querySelectorAll(".axis-card-wrapper");
                chartData[axisContentName] = [];
                axisCards.forEach((axisCard)=>{
                    const axisName = axisCard.getAttribute("id");
                    const dataType = axisCard.querySelector(".data-type");
                    const labelName = axisCard.querySelector(".label-input");
                    const position = axisCard.querySelector(".position-options-dropdown");
                    const offset = axisCard.querySelector(".offset-option-wrapper .text-input");
                    const majorGridLines = axisCard.querySelector(".major-gridlines");
                    const minorGridLines = axisCard.querySelector(".minor-gridlines");
                    const ticks = axisCard.querySelector(".minor-ticks");
                    const inverse = axisCard.querySelector(".inverse");
                    const axisCardContent = {
                        axisName: axisName,
                        dataType: dataType.value,
                        labelName: labelName ? labelName.value : axisName,
                        position: position[position.selectedIndex].value,
                        offset: Number(offset.value),
                        majorGridLines: majorGridLines ? majorGridLines.checked : false,
                        minorGridLines: minorGridLines ? minorGridLines.checked : false,
                        ticks: ticks ? ticks.checked : false,
                        inverse: inverse ? inverse.checked : false
                    };
                    chartData[axisContentName].push(axisCardContent);
                });
            });
            // add series data
            chartData["series"] = [];
            const seriesTabContent = inspectorCard.querySelector(".series-tab-content");
            const seriesCards = seriesTabContent.querySelectorAll(".series-card-wrapper");
            seriesCards.forEach((seriesCard)=>{
                const seriesCardId = seriesCard.getAttribute("id");
                const fieldName = seriesCardId.split("-")[0];
                const header = seriesCard.querySelector(".series-card-header span");
                const dataType = seriesCard.querySelector(".data-type");
                const labelName = seriesCard.querySelector(".label-input");
                const xAxisIndexDD = seriesCard.querySelector(".xaxis-index-dropdown");
                const xAxisIndex = xAxisIndexDD.selectedIndex;
                const xAxisName = xAxisIndexDD[xAxisIndexDD.selectedIndex].textContent;
                const yAxisIndexDD = seriesCard.querySelector(".yaxis-index-dropdown");
                const yAxisIndex = yAxisIndexDD.selectedIndex;
                const yAxisName = yAxisIndexDD[yAxisIndexDD.selectedIndex].textContent;
                const errorDD = seriesCard.querySelector(".error-dropdown");
                const error = errorDD[errorDD.selectedIndex];
                const symbolsDD = seriesCard.querySelector(".symbols-dropdown");
                const symbol = symbolsDD[symbolsDD.selectedIndex];
                const datapointSize = seriesCard.querySelector(".symbols-size-range-wrapper .text-input");
                const seriesContent = {
                    fieldName: fieldName,
                    seriesName: header.textContent,
                    // add seriesName
                    dataType: dataType.value,
                    labelName: labelName !== "" ? labelName.value : seriesName,
                    xAxisIndex: Number(xAxisIndex),
                    xAxisName: xAxisName,
                    yAxisIndex: yAxisIndex,
                    yAxisName: yAxisName,
                    error: error.value,
                    symbol: symbol.value,
                    symbolSize: Number(datapointSize.value)
                };
                chartData["series"].push(seriesContent);
            });
            moduleData["datasetType"] = datasetType;
            moduleData["chartTitle"] = chartTitle ? chartTitle.value : datasetType;
            moduleData["chartData"] = chartData;
            console.log(moduleData);
            const message = new (0, _indexJs.Message)((0, _indexJs1.OUTPUT_MANAGER), (0, _indexJs1.INSPECTOR_CARD_MAKER), "Set New Chart Event", {
                moduleKey: moduleKey,
                moduleData: moduleData
            });
            this.sendMessage(message);
        });
    }
    /** 
     *  Creates a tab button event listener for toggling tab contents
     *  @param { chartInspectorWrapper } HTMLObject of a chart inspector card
     */ #createTabButtonEventListener(chartInspectorWrapper) {
        const tabButtons = chartInspectorWrapper.querySelectorAll(".tab-button");
        const tabContents = chartInspectorWrapper.querySelectorAll(".tab-content");
        // Add click event listeners to all tab buttons
        tabButtons.forEach((button)=>{
            button.addEventListener("click", (e)=>{
                // Remove 'active' classes from all buttons and contents
                tabButtons.forEach((btn)=>btn.classList.remove("active"));
                tabContents.forEach((content)=>{
                    content.classList.remove("active");
                });
                // Add 'active' class to the clicked button
                button.classList.add("active");
                // Show the associated content
                const tabId = button.getAttribute("data-tab");
                const tabContent = document.getElementById(tabId);
                tabContent.classList.add("active");
            });
        });
    }
    /** Adds xAxisIndex & yAxisIndex dropdown options on initial inspector card load
     * @param {xAxisCard object} xAxisCard object for getting the xAxis traces
     * @param {yAxisCard object} yAxisCard object for getting the yAxis traces
     * @param {seriesCard object} seriesCard to add the options for
     * */ addSeriesAxisOptions(xAxisCard, yAxisCard, seriesCard) {
        var xAxisTraceArea = xAxisCard.getCard().traceArea;
        var yAxisTraceArea = yAxisCard.getCard().traceArea;
        var seriesTraceArea = seriesCard.getCard().traceArea;
        var xTraces = xAxisTraceArea.querySelectorAll(".trace-card-wrapper");
        var yTraces = yAxisTraceArea.querySelectorAll(".trace-card-wrapper");
        var seriesTraces = seriesTraceArea.querySelectorAll(".trace-card-wrapper");
        console.log(xTraces);
        console.log(yTraces);
        console.log(seriesTraces);
        var xOptions = [];
        var yOptions = [];
        xTraces.forEach((x, i)=>{
            xOptions.push({
                value: i,
                name: x.getAttribute("id")
            });
        });
        yTraces.forEach((y, i)=>{
            yOptions.push({
                value: i,
                name: y.getAttribute("id")
            });
        });
        // append to xAxisIndex & yAxisIndex dropdowns in each series trace cards
        seriesTraces.forEach((trace)=>{
            var xAxisDD = trace.querySelector(".xaxis-index-dropdown-wrapper .xaxis-index-dropdown");
            var yAxisDD = trace.querySelector(".yaxis-index-dropdown-wrapper .yaxis-index-dropdown");
            this.HF.updateSelectOptions(xAxisDD, xOptions);
            this.HF.updateSelectOptions(yAxisDD, yOptions);
        });
    }
    // --------------------------- Orbit Module ---------------------------
    updateOrbitModuleInspectorCard(moduleKey, moduleData) {
        var contentWrapper = this.HF.createNewDiv("", "", [
            "orbit-inspector-wrapper"
        ], []);
        this.inspectorCard.appendToBody(contentWrapper);
        console.log(moduleData);
        // objectNames
        var objectList = this.inspectorCard.addRenderedObjectsList(moduleData.objectNames);
        contentWrapper.appendChild(objectList);
        // add generate orbit button
        var generateOrbitButton = this.HF.createNewButton(`generate-orbit-button-${moduleKey}`, "", [
            "generate-orbit-button",
            "button"
        ], [], "button", "Generate Orbit", false);
        contentWrapper.appendChild(generateOrbitButton);
        // add generate orbit button onclick event listener
        generateOrbitButton.addEventListener("click", (e)=>{
            var data = {
                moduleKey: moduleKey,
                //objectsData: moduleData.sourceData,
                //eclipticData: moduleData.eclipticData,
                objectsToRender: moduleData.objectNames,
                orbitsToRender: moduleData.planetNames
            };
            // send message
            const message = new (0, _indexJs.Message)((0, _indexJs1.OUTPUT_MANAGER), (0, _indexJs1.INSPECTOR_CARD_MAKER), "Set New Orbit Event", data);
            this.sendMessage(message);
        });
    }
    updateImageModuleInspectorCard(moduleKey, moduleData) {
        var contentWrapper = this.HF.createNewDiv("", "", [
            "object-images-inspector-wrapper"
        ], []);
        this.inspectorCard.appendToBody(contentWrapper);
        var object = this.inspectorCard.addRenderedObjectsList([
            moduleData.objectName
        ]);
        contentWrapper.appendChild(object);
        var generateImagesButton = this.HF.createNewButton(`generate-images-button-${moduleKey}`, "", [
            "generate-images-button",
            "button"
        ], [], "button", "Generate Images", false);
        contentWrapper.appendChild(generateImagesButton);
        // add generate orbit button onclick event listener
        generateImagesButton.addEventListener("click", (e)=>{
            let imagePopupContent = document.querySelector(`#popup-${moduleKey} .popup-content`);
            const imagePopupExists = imagePopupContent.firstChild ? true : false;
            //console.log(imagePopupExists);
            var data = {
                moduleKey: moduleKey,
                //objectsData: moduleData.sourceData,
                //eclipticData: moduleData.eclipticData,
                objectToRender: moduleData.objectName,
                imagePopupExists: imagePopupExists
            };
            // send message
            const message = new (0, _indexJs.Message)((0, _indexJs1.OUTPUT_MANAGER), (0, _indexJs1.INSPECTOR_CARD_MAKER), "Set New Images Event", data);
            this.sendMessage(message);
        });
    }
    getField = (key)=>this.dataTable.get(key);
    /** --- PUBLIC ---
     * Gets the wrapper element of the card
     * @returns the HTML element for the card
     */ getCard = ()=>this.inspectorCard.getCard();
    sendMessage = (msg)=>{
        this.publisher.publishMessage(msg);
    };
}

},{"../../components/inspector/inspectorCard.js":"l43aQ","../../components/inspector/inspectorCardComponents/includeColumnCard.js":"7LSD4","../../communication/index.js":"eT70M","../../htmlGeneration/htmlFactory.js":"9lYdL","../../sharedVariables/index.js":"1uX14","../../dataComponents/charts/lil-gui.module.min.js":"bJ8ZI","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"l43aQ":[function(require,module,exports) {
/*************************************************************
 * COPYRIGHT University of Hawaii - COMA Project / Lava Lab  *
 * Author: James Hutchison                                   *
 * Date: 5/5/2022                                            *
 *************************************************************/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * This class should not be called directly but called through the InspectorCardMaker.
 */ parcelHelpers.export(exports, "InspectorCard", ()=>InspectorCard);
var _errorHandlersJs = require("../../errorHandling/errorHandlers.js");
var _axisCardJs = require("./inspectorCardComponents/axisCard.js");
var _seriesCardJs = require("./inspectorCardComponents/seriesCard.js");
var _objectSearchCardJs = require("./inspectorCardComponents/objectSearchCard.js");
var _keyValueCardJs = require("./inspectorCardComponents/keyValueCard.js");
var _indexJs = require("../../htmlGeneration/index.js");
var _indexJs1 = require("./index.js");
var _compositeDetailsCardJs = require("./inspectorCardComponents/compositeDetailsCard.js");
var _minMaxFilterJs = require("./inspectorCardComponents/minMaxFilter.js");
var _formCardJs = require("./inspectorCardComponents/formCard.js");
var _formSelectCardJs = require("./inspectorCardComponents/formSelectCard.js");
var _conversionCardJs = require("./inspectorCardComponents/conversionCard.js");
var _indexJs2 = require("../../communication/index.js");
var _indexJs3 = require("../../sharedVariables/index.js");
class InspectorCard {
    #cardId;
    #wrapperElement;
    #headerElement;
    bodyElement;
    #titleElement;
    #maxButton;
    #collapseButton;
    #expandButton;
    #title;
    #expanded;
    #maximized;
    #color;
    #dynamicFields;
    #axisCardMap;
    #dragElement;
    maxExpansion;
    constructor(title, color, key){
        this.HF = new (0, _indexJs.HTMLFactory)();
        this.#cardId = key;
        this.resizing = false;
        this.maxExpansion = 200;
        this.expandSize = 200;
        this.minHeight = 10;
        this.#dynamicFields = new Map();
        this.#axisCardMap = new Map();
        this.#color = color;
        this.#expanded = false;
        this.#maximized = false;
        this.#title = title;
        this.mousePositions = [];
        this.#createDomNode();
        this.publisher = new (0, _indexJs2.Publisher)();
    }
    #createDomNode() {
        this.#wrapperElement = this.#createWrapperNode();
        this.#headerElement = this.#createHeaderNode();
        this.bodyElement = this.#createBodyNode();
        this.#titleElement = this.#createTitleNode();
        this.#dragElement = this.#createDragElement();
        this.#maxButton = this.#createMaxButton();
        this.#expandButton = this.#createExpandButton();
        this.#collapseButton = this.#createCollapseButton();
        this.#wrapperElement.appendChild(this.#headerElement).append(this.#titleElement);
        this.#headerElement.appendChild(this.#maxButton);
        this.#headerElement.appendChild(this.#expandButton);
        this.#headerElement.append(this.#collapseButton);
        this.#wrapperElement.appendChild(this.bodyElement);
        this.#wrapperElement.appendChild(this.#dragElement);
        this.#addResizeEventListeners();
        this.#addExpansionEventListener();
        this.#addMaximizeEventListener();
        this.#addCollapseEventListener();
    }
    #createWrapperNode() {
        return this.HF.createNewDiv(`Inspector-card-${this.#cardId}`, `Inspector-card-${this.#cardId}`, [
            "inspector-card"
        ], [], [], "");
    }
    #createHeaderNode() {
        return this.HF.createNewDiv(`Inspector-card-header-${this.#cardId}`, `Inspector-card-header-${this.#cardId}`, [
            "inspector-card-header"
        ], [
            {
                style: "backgroundColor",
                value: this.#color
            }
        ], [], "");
    }
    #createBodyNode() {
        return this.HF.createNewDiv(`Inspector-card-body-${this.#cardId}`, `Inspector-card-body-${this.#cardId}`, [
            "inspector-card-body"
        ], [], [], "");
    }
    #createTitleNode() {
        return this.HF.createNewH3(`Inspector-card-header-h3-${this.cardId}`, `Inspector-card-header-h3-${this.cardId}`, [], [], this.#title);
    }
    #createDragElement() {
        return this.HF.createNewDiv("", "", [
            "inspector-card-drag-element"
        ], [], [], "");
    }
    #createMaxButton() {
        const buttonDiv = this.HF.createNewDiv("", "", [
            "inspector-card-max-button"
        ], [], [], "");
        const img = this.HF.createNewIMG("", "", "../../../images/icons/maximize.png", [], [], "Minimize or Maximize Inspector Card Button");
        buttonDiv.appendChild(img);
        return buttonDiv;
    }
    #createCollapseButton() {
        const buttonDiv = this.HF.createNewDiv("", "", [
            "inspector-card-collapse-button"
        ], [], [], "");
        const img = this.HF.createNewIMG("", "", "../../../images/icons/minus.png", [], [], "Collapse Inspector Card Button");
        buttonDiv.appendChild(img);
        return buttonDiv;
    }
    #createExpandButton() {
        const buttonDiv = this.HF.createNewDiv("", "", [
            "inspector-card-expand-button"
        ], [], [], "");
        const img = this.HF.createNewIMG("", "", "../../../images/icons/squares.png", [], [], "Expand Inspector Card Button");
        buttonDiv.appendChild(img);
        return buttonDiv;
    }
    #addResizeEventListeners() {
        this.#dragElement.addEventListener("mousedown", this.startResize.bind(this));
        document.addEventListener("mouseup", this.endResize);
        document.addEventListener("mousemove", (e)=>{
            this.resize(e);
            e.preventDefault();
        });
    }
    // RESIZE FUNCTIONS
    startResize = ()=>{
        this.resizing = true;
        this.mousePositions = [];
    };
    endResize = ()=>{
        if (this.resizing) this.resizing = false;
    };
    resize = (e)=>{
        if (this.resizing) {
            const pos = {
                x: e.screenX,
                y: e.screenY
            };
            this.mousePositions.push(pos);
            if (this.mousePositions.length > 1) {
                const distance = this.#calculateDistanceTraveled(this.mousePositions[0], this.mousePositions[this.mousePositions.length - 1]);
                this.#resetMousePositionsArray(this.mousePositions[this.mousePositions.length - 1]);
                this.#updateHeight(distance.y);
                this.setHeight(this.maxExpansion);
            }
        }
    };
    #updateHeight = (yDistanceTraveled)=>{
        const value = this.maxExpansion + parseInt(yDistanceTraveled);
        if (value > 50) this.maxExpansion = value;
    };
    setHeight = (height)=>{
        this.bodyElement.style.height = `${height}px`;
    };
    /**
     * Calculates the distance the mouse has traveled in pixels
     * @param {object} firstPosition index [0] in the mousePositions array - contains x and y
     * @param {object} lastPosition  index [array.length-1] in the mousePositions array - contains x and y
     * @returns {x: xdistance (number), y: ydistance (number)}
     */ #calculateDistanceTraveled = (firstPosition, lastPosition)=>{
        return {
            x: lastPosition.x - firstPosition.x,
            y: lastPosition.y - firstPosition.y
        };
    };
    /**
     * When a drag is completed, this function is called to reset the positions array. The last measured position is places in the first index.
     * @param {number} lastPosition the last captured mouse position
     */ #resetMousePositionsArray = (lastPosition)=>this.mousePositions = [
            lastPosition
        ];
    #addExpansionEventListener() {
        this.#expandButton.addEventListener("click", this.expandCard.bind(this));
    }
    #addMaximizeEventListener() {
        this.#maxButton.addEventListener("click", this.maximizeCard.bind(this));
    }
    #addCollapseEventListener() {
        this.#collapseButton.addEventListener("click", this.minimizeCard.bind(this));
    }
    maximizeCard() {
        if (this.#maximized) {
            const message = new (0, _indexJs2.Message)((0, _indexJs3.INSPECTOR), (0, _indexJs3.INSPECTOR_CARD), "Minimize Card Event", {});
            this.sendMessage(message);
            this.minimizeCard();
        } else {
            const message = new (0, _indexJs2.Message)((0, _indexJs3.INSPECTOR), (0, _indexJs3.INSPECTOR_CARD), "Maximize Card Event", {
                id: this.#cardId
            });
            this.sendMessage(message);
            this.bodyElement.style.height = `${this.getParentHeight() - 40}px`;
            this.#maximized = true;
        }
        this.showAllElements();
    }
    /** --- PUBLIC ---
     * When a user selects a Node in the GOJS environment, the associated inspector card is maximized.
     */ maximizeCardEnvironmentClick() {
        const message = new (0, _indexJs2.Message)((0, _indexJs3.INSPECTOR), (0, _indexJs3.INSPECTOR_CARD), "Maximize Card Event", {
            id: this.#cardId
        });
        this.sendMessage(message);
        this.bodyElement.style.height = `${this.getParentHeight() - 40}px`;
        this.#maximized = true;
        this.showAllElements();
    }
    minimizeCard() {
        if (this.#maximized) {
            const message = new (0, _indexJs2.Message)((0, _indexJs3.INSPECTOR), (0, _indexJs3.INSPECTOR_CARD), "Minimize Card Event", {});
            this.sendMessage(message);
        }
        this.#maximized = false;
        this.#expanded = false;
        this.setHeight(this.minHeight);
        this.hideAllBodyChildren();
    }
    expandCard() {
        if (!this.#expanded) {
            if (this.#maximized) {
                const message = new (0, _indexJs2.Message)((0, _indexJs3.INSPECTOR), (0, _indexJs3.INSPECTOR_CARD), "Minimize Card Event", {});
                this.sendMessage(message);
            }
            this.#expanded = true;
            this.#maximized = false;
            this.setHeight(this.expandSize);
            this.showAllElements();
        } else this.minimizeCard();
    }
    hideAllBodyChildren() {
        this.bodyElement.childNodes.forEach((child)=>child.style.display = "none");
    }
    showAllElements() {
        this.bodyElement.childNodes.forEach((child)=>child.style.display = "flex");
    }
    getParentHeight() {
        return document.querySelector("#mainWrapper").getBoundingClientRect().height;
    }
    appendToBody(element) {
        this.bodyElement.appendChild(element);
        if (!this.#maximized && !this.#expanded) element.style.display = "none";
    }
    /** --- PUBLIC ---
     * Dynamic fields are key, values that can be changed. 
     * @param {string} key key identifying the field 
     * @param {string} text value to change in the card. 
     */ updateDynamicField(key, text) {
        const keyValueCard = this.#dynamicFields.get(key);
        if (keyValueCard) keyValueCard.updateValue(text);
        else (0, _errorHandlersJs.printErrorMessage)(`Undefined or Null Variable`, `data: ${data}. -- Inspector Card -> updateDynamicField`);
    }
    /** --- PUBLIC ---
     * This builds a card for including columns of a data table. It is a row of checkboxes that can be toggled on or off.
     * @param {*} checkboxes 
     * @returns 
     */ addIncludeColumnCard(checkboxes) {
        const card = new (0, _indexJs1.IncludeColumnCard)(checkboxes);
        this.appendToBody(card.getCard());
        return card;
    }
    // add Xaxis card for Chart modules
    addAxisCard(moduleKey, axisName, fields, defaultField) {
        const card = new (0, _axisCardJs.AxisCard)(moduleKey, axisName, fields, defaultField);
        return card;
    }
    addSeriesCard(moduleKey, seriesData) {
        const card = new (0, _seriesCardJs.SeriesCard)(moduleKey, seriesData);
        return card;
    }
    /** --- PUBLIC ---
     * This passes HTML elements and generates a field in the inspector card where user can select options for the x axis of a chart.
     * When adding options in the future, pass them through this function and add them to the axis card.
     * @param {HTML Select Object} dropdown dropdown for selecting main field to chart 
     * @param {HTML p Object} labelInput label for the dropdown 
     * @param {HTML Checkbox Object} gridCheckbox Checkbox to toggle background grid
     * @param {HTML Checkbox Object} tickCheckbox Checkbox to toggle ticks
     * @param {HTML Button Object} addTraceButton Button that can be clicked to add a new trace
     * @param {function} addTraceFunction function that can be called to add a trace to the chart when add trace button is clicked
     * @param {HTML Select Object} errorDropDown dropdown to choose error field
     * @returns the card
     */ addXAxisCard(dropdown, labelInput, gridCheckbox, tickCheckbox, addTraceButton, addTraceFunction, errorDropDown) {
        const card = new XAxisCard(dropdown, labelInput, gridCheckbox, tickCheckbox, addTraceButton, addTraceFunction, errorDropDown);
        this.appendToBody(card.getCard());
        this.#axisCardMap.set("x", card);
        return card;
    }
    /** --- PUBLIC ---
     * This passes HTML elements and generates a field in the inspector card where user can select options for the x axis of a chart.
     * When adding options in the future, pass them through this function and add them to the axis card.
     * @param {HTML Select Object} dropdown dropdown for selecting main field to chart 
     * @param {HTML p Object} labelInput label for the dropdown 
     * @param {HTML Checkbox Object} gridCheckbox Checkbox to toggle background grid
     * @param {HTML Checkbox Object} tickCheckbox Checkbox to toggle ticks
     * @param {HTML Button Object} addTraceButton Button that can be clicked to add a new trace
     * @param {function} addTraceFunction function that can be called to add a trace to the chart when add trace button is clicked
     * @param {HTML Select Object} errorDropDown dropdown to choose error field
     * @returns the card
     */ addYAxisCard(dropdown, labelInput, gridCheckbox, tickCheckbox, addTraceButton, addTraceFunction, errorDropDown) {
        const card = new YAxisCard(dropdown, labelInput, gridCheckbox, tickCheckbox, addTraceButton, addTraceFunction, errorDropDown);
        this.appendToBody(card.getCard());
        this.#axisCardMap.set("y", card);
        return card;
    }
    /** --- PUBLIC ---
     * Creates a KeyValueCard instance and appends it to the DOM.
     * @param {string} key The id of the field and the label for the card.
     * @param {*} value The value of the card.
     * @returns The KeyValue Card object. */ addKeyValueCard(key, value) {
        const card = new (0, _keyValueCardJs.KeyValueCard)(key, value);
        this.appendToBody(card.getCard());
        return card;
    }
    /** --- PUBLIC ---
     * Creates a card with a dropdown populated with available object names.
     * @param {string[]} objects array of strings with the object names
     * @returns The ObjectSearchCard object */ addObjectsSearchCard(objects) {
        const card = new (0, _objectSearchCardJs.ObjectSearchCard)(objects);
        this.appendToBody(card.getCard().wrapper);
        return card;
    }
    /** --- PUBLIC ---
     * Min Max Cards are elements of the filter inspector card. Each field gets a single min/max card where the user can apply the filters
     * to a data field based on the metadata for that field.
     * @param {string} label the name of the column
     * @param {Number} min the min value in the metadata
     * @param {Number} max the max value in the metadata
     * @param {string} dataType the data type
     * @param {string} dataFormat the format of the data (useful for floats/ints or dates etc.)
     * @param {function} changeDataTypeFunction function called when user wants to change an incorrectly assigned datatype
     * @returns a function that gets the data from this card for applying the filters. */ addMinMaxCard(label, min, max, dataType, dataFormat, changeDataTypeFunction) {
        const card = new (0, _minMaxFilterJs.MinMaxFilter)(label, min, max, dataType, dataFormat, changeDataTypeFunction);
        this.appendToBody(card.getHTML());
        return card.getData.bind(card);
    }
    addDynamicKeyValueCard(key, value) {
        this.#dynamicFields.set(key, this.addKeyValueCard(key, value));
    }
    addChartTrace(dropdown, errorDropdown) {
        this.#axisCardMap.get("y").addTraceDropdown(dropdown, errorDropdown);
    }
    /** --- PUBLIC ---
     * Creates a Composite Details Card (This is not really implemented yet, except for the option to save the modules)
     * @param {Object} groupData Details of the group
     * @param {function} saveModuleCallback Function that is bound to the group card where user can save the group to be used later as a prefab
     */ addCompositeDetailsCard(groupData, saveModuleCallback) {
        const card = new (0, _compositeDetailsCardJs.CompositeDetailsCard)(groupData, saveModuleCallback);
        this.appendToBody(card.getCard());
    }
    /** --- PUBLIC ---
     * This is the card that is used for the Data Conversion. Metadata is passed to the card and the options are generated there.
     * @param {Metadata Object} metadata object containing full set of metadata for a dataset
     * @returns The card object (not just the HTML element)
     */ addConversionCard(metadata) {
        const cardObject = new (0, _conversionCardJs.ConversionCard)(metadata);
        this.appendToBody(cardObject.getCard());
        return cardObject;
    }
    //------------------------------------------- SEARCH MODULE ------------------------------------------------
    /** --- PUBLIC ---
     * This adds the select element to select the type of the query
     * @param { Object } label of the select element. key is the class name and value is the label text
     * @param { Object } options of the select element
     */ addQueryTypeSelect(wrapper, label, options, tooltipContent) {
        const selectCard = new (0, _formSelectCardJs.FormSelectCard)(label, options);
        var selectWrapper = selectCard.getCard().wrapper;
        // Create tooltip of the selected query type option
        const dropdown = selectCard.getCard().dropdown;
        var selected = dropdown.options[dropdown.selectedIndex].text;
        var match = tooltipContent.filter((x)=>x.type == selected)[0];
        var description = "Query Type: " + selected;
        if (match) description = match.description;
        // tooltip
        var tooltipElement = selectWrapper.querySelector("label");
        var tooltip = selectCard.appendToolTip(description, tooltipElement);
        selectWrapper.insertBefore(tooltip, selectWrapper.firstChild);
        wrapper.appendChild(selectCard.getCard().wrapper);
        return selectCard;
    }
    /** --- PUBLIC ---
     * This adds the form fields to the Search Form. This is the initial load where the default fields are added.
     * @param { string } name of form to add
     * @param { Object } fields of the initial form format
     * @param { Array } fieldsTooltip Array of objects containing field tooltip content
     * @returns The card object (not just the HTML element)
     */ addSearchFormCard(moduleKey, formName, fields) {
        const card = new (0, _formCardJs.FormCard)(moduleKey, formName, fields);
        // Append form message
        const btnWrapper = card.getCard().submitButton;
        card.appendMessage(btnWrapper, "Empty fields will not be searched.");
        return card;
    }
    // adds tooltip and remote field functions
    addFormFieldFunctions(moduleKey, searchFormCard, fields, fieldsTooltip) {
        var formFields = searchFormCard.getFormFields();
        formFields.forEach((formField)=>{
            const fieldLabel = formField.querySelector("label");
            const fieldElement = formField.querySelector(".field-input");
            if (fieldElement) {
                // Append form field tooltips
                const fieldName = fieldElement.getAttribute("name");
                const match = fieldsTooltip.filter((x)=>x.field == fieldName);
                if (match.length > 0) {
                    let tooltip = searchFormCard.appendToolTip(match[0].format, fieldLabel);
                    formField.insertBefore(tooltip, formField.firstChild);
                }
                const fieldObject = fields.filter((x)=>x.fieldName == fieldName)[0];
                // Handle Remote Data Search Fields... create function for this?
                if (fieldObject && fieldObject.remote) this.#handleRemoteSearchField(moduleKey, fieldObject, fieldElement);
            }
        });
    }
    #handleRemoteSearchField(moduleKey, fieldObject, fieldElement) {
        const fieldWrapper = fieldElement.closest(".field-input-wrapper");
        switch(fieldObject.dirName){
            case "objects":
                var resultContainer = fieldElement.nextElementSibling;
                // Close the suggestions container when clicking outside
                document.addEventListener("click", (event)=>{
                    if (!event.target.closest(".typeahead-result-container") && !event.target.closest(".typeahead-input")) resultContainer.style.display = "none";
                });
                // add eventListener for object field typeahead function
                fieldElement.addEventListener("input", (event)=>{
                    const inputValue = event.target.value.trim();
                    if (inputValue === "") // If the input is empty, hide the suggestions container
                    resultContainer.style.display = "none";
                    else {
                        // Fetch suggestions from the API and update the suggestions container
                        //const suggestions = await fetchSuggestions(inputValue);
                        //updateSuggestions(suggestions);
                        const message = new (0, _indexJs2.Message)((0, _indexJs3.WORKER_MANAGER), (0, _indexJs3.INSPECTOR_CARD), "Get Remote Objects Suggestions", {
                            moduleKey: moduleKey,
                            dirName: fieldObject.dirName,
                            fieldWrapperId: fieldWrapper.getAttribute("id"),
                            term: inputValue,
                            delay: 1500
                        });
                        this.sendMessage(message);
                    }
                });
                break;
            default:
                const dropdownOptions = JSON.parse(localStorage.getItem(`Remote Dropdown ${fieldObject.dirName}`));
                console.log(dropdownOptions);
                if (dropdownOptions) {
                    const message = new (0, _indexJs2.Message)((0, _indexJs3.INSPECTOR), (0, _indexJs3.INSPECTOR_CARD), "Set Remote Dropdown Options", {
                        moduleKey: moduleKey,
                        fieldName: fieldWrapper.querySelector("select").getAttribute("name"),
                        fieldWrapperId: fieldWrapper.getAttribute("id"),
                        data: dropdownOptions
                    });
                    this.sendMessage(message);
                /*const message = new Message(WORKER_MANAGER, INSPECTOR_CARD, 'Get Remote Dropdown Options',
                        {
                            moduleKey: moduleKey,
                            dirName: fieldObject.dirName,
                            fieldWrapperId: fieldWrapper.getAttribute('id'),
                            delay: 1000,
                        });
                    this.sendMessage(message);*/ } else {
                    const message = new (0, _indexJs2.Message)((0, _indexJs3.WORKER_MANAGER), (0, _indexJs3.INSPECTOR_CARD), "Get Remote Dropdown Options", {
                        moduleKey: moduleKey,
                        dirName: fieldObject.dirName,
                        fieldWrapperId: fieldWrapper.getAttribute("id"),
                        delay: 1000
                    });
                    this.sendMessage(message);
                }
        }
    }
    addCSVObjectFieldFunction(moduleKey, objectInputField) {
        const fieldWrapper = objectInputField.closest(`#objects-dropdown-wrapper-${moduleKey}`);
        var resultContainer = objectInputField.nextElementSibling;
        // Close the suggestions container when clicking outside
        document.addEventListener("click", (event)=>{
            if (!event.target.closest(".typeahead-result-container") && !event.target.closest(".typeahead-input")) resultContainer.style.display = "none";
        });
        // add eventListener for object field typeahead function
        objectInputField.addEventListener("input", (event)=>{
            const inputValue = event.target.value.trim();
            if (inputValue === "") // If the input is empty, hide the suggestions container
            resultContainer.style.display = "none";
            else {
                // Fetch suggestions from the API and update the suggestions container
                //const suggestions = await fetchSuggestions(inputValue);
                //updateSuggestions(suggestions);
                const message = new (0, _indexJs2.Message)((0, _indexJs3.WORKER_MANAGER), (0, _indexJs3.INSPECTOR_CARD), "Get Remote Objects Suggestions", {
                    moduleKey: moduleKey,
                    dirName: "objects",
                    fieldWrapperId: fieldWrapper.getAttribute("id"),
                    term: inputValue,
                    delay: 1500
                });
                this.sendMessage(message);
            }
        });
    }
    /** --- PUBLIC ---
     * This updates the form fields of the specified Search Form.
     * @param { string } fromCard object to update
     * @param { Object } fields of the form to update with
     * @param { Array } fieldsTooltip Array of objects containing field tooltip content
     * @returns The card object (not just the HTML element)
     */ updateSearchFormFields(moduleKey, formCard, fields, fieldsTooltip) {
        formCard.updateFormFields(fields);
        const formFields = formCard.getFormFields();
        console.log(formFields);
        formFields.forEach((formField)=>{
            const fieldLabel = formField.querySelector("label");
            const fieldElement = formField.querySelector(".field-input");
            if (fieldElement) {
                const fieldName = fieldElement.getAttribute("name");
                const match = fieldsTooltip.filter((x)=>x.field == fieldName);
                if (match.length > 0) {
                    var tooltip = formCard.appendToolTip(match[0].format, fieldLabel);
                    formField.insertBefore(tooltip, formField.firstChild);
                }
                //console.log(fields);
                //console.log(fieldName);
                const fieldObject = fields.filter((x)=>x.fieldName == fieldName)[0];
                //console.log(fieldObject);
                // Handle Remote Data Search Fields... create function for this?
                if (fieldObject && fieldObject.remote) this.#handleRemoteSearchField(moduleKey, fieldObject, fieldElement);
            }
        });
    }
    //------------------------------------------- ORBIT MODULE ------------------------------------------------
    addRenderedObjectsList(objectNames) {
        let wrapper = this.HF.createNewDiv("", "", [
            "rendered-objects"
        ], [], [], "");
        let objectsLabel = this.HF.createNewLabel("", "", "", [
            "rendered-objects-title"
        ], [], "Objects: ");
        wrapper.appendChild(objectsLabel);
        let objectsGroupWrapper = this.HF.createNewDiv("", "", [
            "rendered-objects-group",
            "objects-group"
        ], [], [], "");
        objectNames.forEach((objectName)=>{
            if (objectName) {
                let item = this.HF.createNewSpan("", "", [
                    "rendered-object",
                    "item"
                ], [], objectName);
                objectsGroupWrapper.appendChild(item);
            }
        });
        wrapper.appendChild(objectsGroupWrapper);
        return wrapper;
    }
    // Add object names for data points
    addObjectOptions(objectNames) {
        var wrapper = this.HF.createNewDiv("", "", [
            "object-options",
            "options"
        ], [], [], "");
        var objectsLabel = this.HF.createNewLabel("", "", "", [
            "objects-title"
        ], [], "Objects: ");
        wrapper.appendChild(objectsLabel);
        var checkboxGroupWrapper = this.HF.createNewDiv("", "", [
            "object-checkbox-group",
            "checkbox-group"
        ], [], [], "");
        objectNames.forEach((object)=>{
            if (object) {
                var checkbox = this.HF.createNewCheckbox("", "", [
                    "object-checkbox"
                ], [], object, object, true);
                checkboxGroupWrapper.appendChild(checkbox.wrapper);
            }
        });
        //var checkbox = this.HF.createNewCheckbox('', '', ['object-checkbox'], [], 'C/2017 K2', 'C/2017 K2', true);
        //checkboxGroupWrapper.appendChild(checkbox.wrapper);
        wrapper.appendChild(checkboxGroupWrapper);
        return wrapper;
    }
    // Add planet names for eliptic data
    addPlanetOptions(planetNames) {
        var wrapper = this.HF.createNewDiv("", "", [
            "orbit-options",
            "options"
        ], [], [], "");
        var orbitLabel = this.HF.createNewLabel("", "", "", [
            "orbit-title"
        ], [], "Orbits: ");
        wrapper.appendChild(orbitLabel);
        var checkboxGroupWrapper = this.HF.createNewDiv("", "", [
            "orbit-checkbox-group",
            "checkbox-group"
        ], [], [], "");
        /*var planetNames = Object.keys(eclipticData[0]).map(key => {
            if (!key.includes('id')) {
                var lastIndex = key.lastIndexOf('_');
                return key.slice(0, lastIndex);
            }
        });*/ //planetNames = new Set(planetNames);
        planetNames.forEach((planet)=>{
            if (planet) {
                const planetCode = (0, _indexJs3.PlanetCodes).filter((p)=>p.name === planet);
                const displayName = planetCode[0] ? planetCode[0].displayName : planet;
                const checkbox = this.HF.createNewCheckbox("", "", [
                    "planet-checkbox"
                ], [], planet, displayName, true);
                checkboxGroupWrapper.appendChild(checkbox.wrapper);
            }
        });
        wrapper.appendChild(checkboxGroupWrapper);
        return wrapper;
    }
    /////////////////////////////////////////////// temp removed ///////////////////////////////////////////////////
    /** --- PUBLIC ---
     * This adds the dynamical field append element to the inspector card.
     * @param { Object } label of the select element. key is the class name and value is the label text
     * @param { Object } options of the select element
     * @returns The card object (not just the HTML element)
     */ addFormFieldAppend(wrapper, label, options) {
        const card = new (0, _formSelectCardJs.FormSelectCard)(label, options);
        // add a addButton to the card
        card.createAddButton(label);
        wrapper.appendChild(card.getCard().wrapper);
        return card;
    }
    /** --- PUBLIC ---
     * Updates the options of the formFieldAppend select element depending on the query type.
     * @param { Object } formSelectCard FormSelect object to update the options of
     * @param { Object } options of the dropdown to update to
     */ /*updateFormFieldAppend(formSelectCard, options) {
        formSelectCard.updateDropdown(options);
    }*/ /** --- PUBLIC ---
     * This adds the form field to the target FormCard element.
     * @param { Object } formCard object to append the field to
     * @param { Object } field of the form to append to target form
     */ appendFormField(formCard, field) {
        formCard.appendFormField(field);
    }
    /** --- PUBLIC ---
     * This adds the form field remove function to each form fields of the target FormCard element.
     * @param { Object } formCard object to append the field to
     */ appendFormFieldRemove(formCard) {
        formCard.appendRemoveField();
    }
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    getCard = ()=>this.#wrapperElement;
    sendMessage = (msg)=>{
        this.publisher.publishMessage(msg);
    };
}

},{"../../errorHandling/errorHandlers.js":"dxjcu","./inspectorCardComponents/axisCard.js":"f2N39","./inspectorCardComponents/seriesCard.js":"7yjEx","./inspectorCardComponents/objectSearchCard.js":"3gLJq","./inspectorCardComponents/keyValueCard.js":"5Sp6o","../../htmlGeneration/index.js":"f3jdF","./index.js":"ekKGP","./inspectorCardComponents/compositeDetailsCard.js":"3zvzN","./inspectorCardComponents/minMaxFilter.js":"5JXPH","./inspectorCardComponents/formCard.js":"il6hg","./inspectorCardComponents/formSelectCard.js":"BJmZe","./inspectorCardComponents/conversionCard.js":"eZxC1","../../communication/index.js":"eT70M","../../sharedVariables/index.js":"1uX14","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dxjcu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "invalidVariables", ()=>invalidVariables);
parcelHelpers.export(exports, "printErrorMessage", ()=>printErrorMessage);
parcelHelpers.export(exports, "displayErrorMessage", ()=>displayErrorMessage);
parcelHelpers.export(exports, "varTest", ()=>varTest);
var _mainJs = require("../main.js");
var _htmlFactoryJs = require("../htmlGeneration/htmlFactory.js");
const typeCheck = (variable, type)=>typeof variable === type ? true : false;
const isNullOrUndefined = (variable)=>variable == undefined || variable == null ? true : false;
const invalidVariables = (variables, fileName, functionName)=>{
    let foundError = false;
    variables.forEach((variableInfo)=>{
        if (!isNullOrUndefined(variableInfo.value)) {
            if (variableInfo.expectedType !== "any") {
                if (!typeCheck(variableInfo.value, variableInfo.expectedType)) {
                    // add error message display to current div
                    printErrorMessage("typecheck", `${variableInfo.name}: ${typeof variableInfo.value} - expected ${variableInfo.expectedType} -- ${fileName} -> ${functionName}`);
                    foundError = true;
                }
            }
        } else {
            foundError = true;
            // add error message display to current div
            printErrorMessage("undefined or null variable", `${variableInfo.name}: ${variableInfo.value} -- ${fileName} -> ${functionName}`);
        }
    });
    return foundError;
};
const printErrorMessage = (type, msg)=>{
    if (0, _mainJs.debug) console.log(`ERROR: ${type} <> ${msg}`);
};
const displayErrorMessage = (type, msg, div)=>{
    // div.append();
    const HF = (0, _htmlFactoryJs.HTMLFactory)();
    let errorMessageDiv = HF.createNewDiv("", "", [
        "errorMessage"
    ], [], [], "");
    div.appendChild(errorMessageDiv);
};
const varTest = (value, name, expectedType)=>{
    return {
        value: value,
        name: name,
        expectedType: expectedType
    };
};

},{"../main.js":"1SICI","../htmlGeneration/htmlFactory.js":"9lYdL","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9lYdL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/* This Class has shortcuts for creating and modifying HTML elements in more readable code */ parcelHelpers.export(exports, "HTMLFactory", ()=>HTMLFactory);
var _indexJs = require("./index.js");
class HTMLFactory {
    /* These modules build the specific HTML elements. Do not call them directly, but only through this HTML
    factory class */ #tableGenerator;
    #divGenerator;
    #imgGenerator;
    #paragraphGenerator;
    #spanGenerator;
    #labelGenerator;
    #inputGenerator;
    #selectGenerator;
    #h3Generator;
    #h1Generator;
    #checkboxGenerator;
    #textAreaGenerator;
    #formGenerator;
    #anchorGenerator;
    #listGenerator;
    constructor(){
        this.#tableGenerator = new (0, _indexJs.TableGenerator)();
        this.#divGenerator = new (0, _indexJs.DivGenerator)();
        this.#imgGenerator = new (0, _indexJs.ImgGenerator)();
        this.#paragraphGenerator = new (0, _indexJs.ParagraphGenerator)();
        this.#spanGenerator = new (0, _indexJs.SpanGenerator)();
        this.#labelGenerator = new (0, _indexJs.LabelGenerator)();
        this.#inputGenerator = new (0, _indexJs.InputGenerator)();
        this.#selectGenerator = new (0, _indexJs.SelectGenerator)();
        this.#h3Generator = new (0, _indexJs.H3Generator)();
        this.#h1Generator = new (0, _indexJs.H1Generator)();
        this.#checkboxGenerator = new (0, _indexJs.CheckboxGenerator)();
        this.#textAreaGenerator = new (0, _indexJs.TextAreaGenerator)();
        this.#formGenerator = new (0, _indexJs.FormGenerator)();
        this.#anchorGenerator = new (0, _indexJs.AnchorGenerator)();
        this.#listGenerator = new (0, _indexJs.ListGenerator)();
    }
    createNewTable(id, name, classlist, customStyles, headers, columnData, rowLimit) {
        return this.#tableGenerator.generateTableFromData(id, name, classlist, customStyles, headers, columnData, rowLimit);
    }
    /** Creates a new HTML div element
     * @param id -> the id of the element (if not adding id, use empty string '')
     * @param name -> the name of the element (if not adding name, use empty string '')
     * @param classlist -> Array of strings, each string is a css classname
     * @param customStyles -> array of objects that contains custom style information
     *                        style variable is in camelCase format for styles
     *                        (e.g. [{ style: 'backgroundColor', value: 'white'  }, ...])
     * @param customAttributes -> array of objects that contains custom attribute information
     *                        (e.g. [{ attribute: 'data-tab', value: 'tab1' }, ...])
     * @param text -> string of innerHTML value
     * @return the new div
     */ createNewDiv(id, name, classlist, customStyles, customAttributes, text) {
        return this.#divGenerator.generateSimpleDiv(id, name, classlist, customStyles, customAttributes, text);
    }
    /** Creates a new HTML img element
     * @param id -> the id of the element (if not adding id, use empty string '')
     * @param name -> the name of the element (if not adding name, use empty string '')
     * @param src -> the path to the image.
     * @param classlist -> Array of strings, each string is a css classname
     * @param customStyles -> array of objects in the following format
     *                        {style: string (in camelCase)}  ex style: 'backgroundColor',
     *                         value: 'green;}
     * @param alt -> a string for the alt field.
     * @return the new img
     */ createNewIMG(id, name, src, classlist, customStyles, alt) {
        return this.#imgGenerator.generateNewIMG(id, name, src, classlist, customStyles, alt);
    }
    /** Creates a new HTML p element
     * @param id -> the id of the element (if not adding id, use empty string '')
     * @param name -> the name of the element (if not adding name, use empty string '')
     * @param classlist -> Array of strings, each string is a css classname
     * @param customStyles -> array of objects in the following format
     *                        {style: string (in camelCase)}  ex style: 'backgroundColor',
     *                         value: 'green;}
     * @param text -> a string to display in the p element.
     * @return the new p
     */ createNewParagraph(id, name, classlist, customStyles, text) {
        return this.#paragraphGenerator.generateNewParagraph(id, name, classlist, customStyles, text);
    }
    /** Creates a new HTML span element
     * @param id -> the id of the element (if not adding id, use empty string '')
     * @param name -> the name of the element (if not adding name, use empty string '')
     * @param classlist -> Array of strings, each string is a css classname
     * @param customStyles -> array of objects in the following format
     *                        {style: string (in camelCase)}  ex style: 'backgroundColor',
     *                         value: 'green;}
     * @param text -> a string to display in the span element.
     * @return the new span
     */ createNewSpan(id, name, classlist, customStyles, text) {
        return this.#spanGenerator.generateNewSpan(id, name, classlist, customStyles, text);
    }
    /** Creates a new HTML label element
     * @param id -> the id of the element (if not adding id, use empty string '')
     * @param name -> the name of the element (if not adding name, use empty string '')
     * @param classlist -> Array of strings, each string is a css classname
     * @param customStyles -> array of objects in the following format
     *                        {style: string (in camelCase)}  ex style: 'backgroundColor',
     *                         value: 'green;}
     * @param text -> a string to display in the p element.
     * @return the new p
     */ createNewLabel(id, name, $for, classlist, customStyles, text) {
        return this.#labelGenerator.generateNewLabel(id, name, $for, classlist, customStyles, text);
    }
    /** Creates a new HTML h3 element
     * @param id -> the id of the element (if not adding id, use empty string '')
     * @param name -> the name of the element (if not adding name, use empty string '')
     * @param classlist -> Array of strings, each string is a css classname
     * @param customStyles -> array of objects in the following format
     *                        {style: string (in camelCase)}  ex style: 'backgroundColor',
     *                         value: 'green;}
     * @param text -> a string to display in the h3 element.
     * @return the new p
     */ createNewH3(id, name, classlist, customStyles, text) {
        return this.#h3Generator.generateNewH3(id, name, classlist, customStyles, text);
    }
    /** Creates a new HTML h1 element
     * @param id -> the id of the element (if not adding id, use empty string '')
     * @param name -> the name of the element (if not adding name, use empty string '')
     * @param classlist -> Array of strings, each string is a css classname
     * @param customStyles -> array of objects in the following format
     *                        {style: string (in camelCase)}  ex style: 'backgroundColor',
     *                         value: 'green;}
     * @param text -> a string to display in the h3 element.
     * @return the new p
     */ createNewH1(id, name, classlist, customStyles, text) {
        return this.#h1Generator.generateNewH3(id, name, classlist, customStyles, text);
    }
    /** Creates a new HTML button (input) element
         * @param id -> the id of the element (if not adding id, use empty string '')
         * @param name -> the name of the element (if not adding name, use empty string '')
         * @param classlist -> Array of strings, each string is a css classname
         * @param customStyles -> array of objects in the following format
         *                        {style: string (in camelCase)}  ex style: 'backgroundColor',
         *                         value: 'green;}
         * @param type -> must be 'button' (string)
         * @param value -> Text of the button (string)
         * @param disabeled -> boolean (true = disabeled, false = enabeled )
         * @return the new button
         */ createNewButton(id, name, classlist, customStyles, type, value, disabled) {
        return this.#inputGenerator.generateButton(id, name, classlist, customStyles, type, value, disabled);
    }
    /** Creates a new HTML file input element
         * @param id -> the id of the element (if not adding id, use empty string '')
         * @param name -> the name of the element (if not adding name, use empty string '')
         * @param classlist -> Array of strings, each string is a css classname
         * @param customStyles -> array of objects in the following format
         *                        {style: string (in camelCase)}  ex style: 'backgroundColor',
         *                         value: 'green;}
         * @param type -> must be 'file' (string)
         * @param disabeled -> boolean (true = disabeled, false = enabeled )
         * @return the new button
         */ createNewFileInput(id, name, classlist, customStyles, type, disabled) {
        return this.#inputGenerator.generateFileInput(id, name, classlist, customStyles, type, disabled);
    }
    /** Creates a new HTML text input element
             * @param id -> the id of the element (if not adding id, use empty string '')
             * @param name -> the name of the element (if not adding name, use empty string '')
             * @param classlist -> Array of strings, each string is a css classname
             * @param customStyles -> array of objects in the following format
             *                        {style: string (in camelCase)}  ex style: 'backgroundColor',
             *                         value: 'green;}
             * @param type -> must be 'text' (string)
             * @param disabled -> boolean (true = disabeled, false = enabeled )
             * @return the new button
             */ createNewTextInput(id, name, classlist, customStyles, type, value) {
        return this.#inputGenerator.generateTextInput(id, name, classlist, customStyles, type, value);
    }
    /** Creates a new HTML text input element
             * @param id -> the id of the element (if not adding id, use empty string '')
             * @param name -> the name of the element (if not adding name, use empty string '')
             * @param classlist -> Array of strings, each string is a css classname
             * @param customStyles -> array of objects in the following format
             *                        {style: string (in camelCase)}  ex style: 'backgroundColor',
             *                         value: 'green;}
             * @param type -> must be 'text' (string)
             * @param disabled -> boolean (true = disabeled, false = enabeled )
             * @return the new button
             */ createNewRangeInput(id, name, classlist, customStyles, min, max, step, value) {
        return this.#inputGenerator.generateRangeInput(id, name, classlist, customStyles, min, max, step, value);
    }
    createNewRangeInputComponent(id, name, classlist, customStyles, labelName, min, max, step, value) {
        const rangeInput = new (0, _indexJs.RangeInput)(id, name, classlist, customStyles, labelName, min, max, step, value);
        return rangeInput.get().wrapper;
    }
    /** Creates a new HTML text input element
             * @param id -> the id of the element (if not adding id, use empty string '')
             * @param name -> the name of the element (if not adding name, use empty string '')
             * @param classlist -> Array of strings, each string is a css classname
             * @param customStyles -> array of objects in the following format
             *                        { style: string (in camelCase)}  ex style: 'backgroundColor', value: 'green; }
             * @param type -> must be 'text' (string)
             * @return the new button
             */ createNewTextArea(id, name, classlist, customStyles) {
        return this.#textAreaGenerator.generateTextArea(id, name, classlist, customStyles);
    }
    /** Creates a new HTML form element
             * @param id -> the id of the element (if not adding id, use empty string '')
             * @param name -> the name of the element (if not adding name, use empty string '')
             * @param classlist -> Array of strings, each string is a css classname
             * @param customStyles -> array of objects in the following format
             *                        {style: string (in camelCase)}  ex style: 'backgroundColor',
             *                         value: 'green;}
             * @return the new button
             */ createNewForm(id, name, classlist, customStyles) {
        return this.#formGenerator.generateForm(id, name, classlist, customStyles);
    }
    /**
     * Creates a new Drop Down
     * @param {string} id 
     * @param {string} name 
     * @param {string[]} classlist 
     * @param {string[]} customStyles 
     * @param {string[]} options 
     * @param {string[]} optionText 
     * @returns 
     */ createNewSelect(id, name, classlist, customStyles, options, optionText) {
        return this.#selectGenerator.generateNewSelect(id, name, classlist, customStyles, options, optionText);
    }
    updateSelectOptions(dropdown, options) {
        return this.#selectGenerator.updateOptions(dropdown, options);
    }
    addSelectOption(dropdown, option) {
        this.#selectGenerator.addOption(dropdown, option);
    }
    removeSelectOption(dropdown, option) {
        this.#selectGenerator.removeOption(dropdown, option);
    }
    /**
     * Creates a checkbox with label wrapped in a div.
     * @param {string} id 
     * @param {string} name 
     * @param {string[]} classlist 
     * @param {string[]} customStyles 
     * @param {string} value 
     * @param {string} label 
     * @param {boolean} checked 
     * @return {wrapper: (Div), checkbox: (Input), label: (Label)t}
     */ createNewRadioButton(id, name, classlist, customStyles, value, checked) {
        return this.#inputGenerator.generateRadioInput(id, name, classlist, customStyles, value, checked);
    }
    /**
     * Creates a checkbox with label wrapped in a div.
     * @param {string} id 
     * @param {string} name 
     * @param {string[]} classlist 
     * @param {string[]} customStyles 
     * @param {string} value 
     * @param {string} label 
     * @param {boolean} checked 
     * @return {wrapper: (Div), checkbox: (Input), label: (Label)}
     */ createNewCheckbox(id, name, classlist, customStyles, value, label, checked) {
        return this.#checkboxGenerator.generateCheckbox(id, name, classlist, customStyles, value, label, checked);
    }
    createNewRangeSlider(id, name, classlist, customStyles, callback, updateSliderFunction) {
        const slider = new (0, _indexJs.RangeSlider)(id, name, classlist, customStyles, callback, updateSliderFunction);
        return slider.getWrappper();
    }
    /** Creates a new HTML a element
     * @param href -> the href link of the element
     * @param id -> the id of the element (if not adding id, use empty string '')
     * @param name -> the name of the element (if not adding name, use empty string '')
     * @param classlist -> Array of strings, each string is a css classname
     * @param customStyles -> array of objects in the following format
     *                        {style: string (in camelCase)}  ex style: 'backgroundColor',
     *                         value: 'green;}
     * @param text -> a string to display in the a element.
     * @return the new span
     */ createNewAnchor(href, id, name, classlist, customStyles, text) {
        return this.#anchorGenerator.generateNewAnchor(href, id, name, classlist, customStyles, text);
    }
    /** Creates a new HTML a element
     * @param href -> the href link of the element
     * @param id -> the id of the element (if not adding id, use empty string '')
     * @param name -> the name of the element (if not adding name, use empty string '')
     * @param classlist -> Array of strings, each string is a css classname
     * @param customStyles -> array of objects in the following format
     *                        {style: string (in camelCase)}  ex style: 'backgroundColor',
     *                         value: 'green;}
     * @param text -> a string to display in the a element.
     * @return the new span
     */ createNewList(id, name, classlist, customStyles, list) {
        return this.#listGenerator.generateNewList(id, name, classlist, customStyles, list);
    }
    /** Takes an array of style objects and applies them to an element
     * @param e -> the html element to be styled.
     * @param styleList -> array of objects in the following format
     *                     {style: string (in camelCase)}  ex style: 'backgroundColor',
     *                      value: 'green;}
     */ static setCustomStyles(e, styleList) {
        styleList.forEach((s)=>{
            e.style[s.style] = s.value;
        });
    }
    /** Converts a css vh value to pixels
     * @param vh -> a string in the format '10vh'
     * @return the equivalent value in pixels (float)
     */ static convertVHtoPX = (vh)=>{
        const val = vh.split("vh");
        const n = parseFloat(val);
        return window.innerHeight / 100 * n;
    };
    /** Converts a css vw value to pixels
    * @param vw -> a string in the format '10vw'
    * @return the equivalent value in pixels (float)
    */ static convertVWtoPX = (vw)=>{
        const val = vw.split("vw");
        const n = parseFloat(val);
        return window.innerWidth / 100 * n;
    };
}

},{"./index.js":"f3jdF","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"f3jdF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "HTMLFactory", ()=>(0, _htmlFactoryJs.HTMLFactory));
parcelHelpers.export(exports, "DivGenerator", ()=>(0, _divGeneratorJs.DivGenerator));
parcelHelpers.export(exports, "ImgGenerator", ()=>(0, _imgGeneratorJs.ImgGenerator));
parcelHelpers.export(exports, "InputGenerator", ()=>(0, _inputGeneratorJs.InputGenerator));
parcelHelpers.export(exports, "ParagraphGenerator", ()=>(0, _paragraphGeneratorJs.ParagraphGenerator));
parcelHelpers.export(exports, "SpanGenerator", ()=>(0, _spanGeneratorJs.SpanGenerator));
parcelHelpers.export(exports, "LabelGenerator", ()=>(0, _labelGeneratorJs.LabelGenerator));
parcelHelpers.export(exports, "TableGenerator", ()=>(0, _tableGeneratorJs.TableGenerator));
parcelHelpers.export(exports, "SelectGenerator", ()=>(0, _selectGeneratorJs.SelectGenerator));
parcelHelpers.export(exports, "H1Generator", ()=>(0, _h1GeneratorJs.H1Generator));
parcelHelpers.export(exports, "H3Generator", ()=>(0, _h3GeneratorJs.H3Generator));
parcelHelpers.export(exports, "CheckboxGenerator", ()=>(0, _checkboxGeneratorJs.CheckboxGenerator));
parcelHelpers.export(exports, "TextAreaGenerator", ()=>(0, _textAreaGeneratorJs.TextAreaGenerator));
parcelHelpers.export(exports, "FormGenerator", ()=>(0, _formGeneratorJs.FormGenerator));
parcelHelpers.export(exports, "AnchorGenerator", ()=>(0, _anchorGeneratorJs.AnchorGenerator));
parcelHelpers.export(exports, "ListGenerator", ()=>(0, _listGeneratorJs.ListGenerator));
parcelHelpers.export(exports, "RangeSlider", ()=>(0, _rangeSliderJs.RangeSlider));
parcelHelpers.export(exports, "RangeInput", ()=>(0, _rangeInputJs.RangeInput));
var _h3GeneratorJs = require("./elementGenerators/h3Generator.js");
var _htmlFactoryJs = require("./htmlFactory.js");
var _divGeneratorJs = require("./elementGenerators/divGenerator.js");
var _imgGeneratorJs = require("./elementGenerators/imgGenerator.js");
var _inputGeneratorJs = require("./elementGenerators/inputGenerator.js");
var _paragraphGeneratorJs = require("./elementGenerators/paragraphGenerator.js");
var _spanGeneratorJs = require("./elementGenerators/spanGenerator.js");
var _labelGeneratorJs = require("./elementGenerators/labelGenerator.js");
var _tableGeneratorJs = require("./elementGenerators/TableGenerator.js");
var _selectGeneratorJs = require("./elementGenerators/selectGenerator.js");
var _h1GeneratorJs = require("./elementGenerators/h1Generator.js");
var _checkboxGeneratorJs = require("./elementGenerators/checkboxGenerator.js");
var _textAreaGeneratorJs = require("./elementGenerators/textAreaGenerator.js");
var _formGeneratorJs = require("./elementGenerators/formGenerator.js");
var _anchorGeneratorJs = require("./elementGenerators/anchorGenerator.js");
var _listGeneratorJs = require("./elementGenerators/listGenerator.js");
var _rangeSliderJs = require("./componentGenerator/rangeSlider.js");
var _rangeInputJs = require("./componentGenerator/rangeInput.js");

},{"./elementGenerators/h3Generator.js":"eZkmT","./htmlFactory.js":"9lYdL","./elementGenerators/divGenerator.js":"hWYTL","./elementGenerators/imgGenerator.js":"kCDTy","./elementGenerators/inputGenerator.js":"kg0Dq","./elementGenerators/paragraphGenerator.js":"4reBS","./elementGenerators/spanGenerator.js":"lxBrf","./elementGenerators/labelGenerator.js":"badJY","./elementGenerators/TableGenerator.js":"5ucyL","./elementGenerators/selectGenerator.js":"3AABC","./elementGenerators/h1Generator.js":"6a52y","./elementGenerators/checkboxGenerator.js":"dgiTv","./elementGenerators/textAreaGenerator.js":"bZzVg","./elementGenerators/formGenerator.js":"5XlIg","./elementGenerators/anchorGenerator.js":"brTrV","./elementGenerators/listGenerator.js":"4FAja","./componentGenerator/rangeSlider.js":"1UwiD","./componentGenerator/rangeInput.js":"lnqdG","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eZkmT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "H3Generator", ()=>H3Generator);
var _indexJs = require("../index.js");
class H3Generator {
    constructor(){}
    generateNewH3 = (id, name, classlist, customStyles, text)=>{
        const e = document.createElement("h3");
        e.setAttribute("id", id);
        e.setAttribute("name", name);
        classlist.forEach((c)=>{
            e.classList.add(c);
        });
        const t = document.createTextNode(text);
        e.appendChild(t);
        (0, _indexJs.HTMLFactory).setCustomStyles(e, customStyles);
        return e;
    };
}

},{"../index.js":"f3jdF","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hWYTL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DivGenerator", ()=>DivGenerator);
var _indexJs = require("../index.js");
class DivGenerator {
    constructor(){}
    generateSimpleDiv = (id, name, classlist, customStyles, customAttributes, text)=>{
        const e = document.createElement("div");
        e.setAttribute("id", id);
        e.setAttribute("name", name);
        // Set class names
        classlist.forEach((c)=>{
            e.classList.add(c);
        });
        // Set custom styles
        (0, _indexJs.HTMLFactory).setCustomStyles(e, customStyles);
        // Set custom attributes (e.g. [{ attribute: 'data-tab', value: 'tab1' }, ..])
        if (customAttributes) customAttributes.forEach((a)=>{
            e.setAttribute(a.attribute, a.value);
        });
        // Set inner text
        if (text) e.innerHTML = text;
        return e;
    };
}

},{"../index.js":"f3jdF","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kCDTy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ImgGenerator", ()=>ImgGenerator);
var _indexJs = require("../index.js");
class ImgGenerator {
    constructor(){}
    generateNewIMG = (id, name, src, classlist, customStyles, alt)=>{
        const e = document.createElement("img");
        e.setAttribute("id", id);
        e.setAttribute("name", name);
        e.setAttribute("src", src);
        if (alt) e.setAttribute("alt", alt);
        classlist.forEach((c)=>{
            e.classList.add(c);
        });
        (0, _indexJs.HTMLFactory).setCustomStyles(e, customStyles);
        return e;
    };
}

},{"../index.js":"f3jdF","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kg0Dq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "InputGenerator", ()=>InputGenerator);
var _indexJs = require("../index.js");
class InputGenerator {
    constructor(){}
    generateButton = (id, name, classlist, customStyles, type, value, disabled)=>{
        const e = document.createElement("input");
        e.setAttribute("id", id);
        e.setAttribute("name", name);
        e.setAttribute("type", type);
        e.setAttribute("value", value);
        if (disabled) e.setAttribute("disabled", disabled);
        classlist.forEach((c)=>{
            e.classList.add(c);
        });
        (0, _indexJs.HTMLFactory).setCustomStyles(e, customStyles);
        return e;
    };
    generateFileInput = (id, name, classlist, customStyles, type, disabled)=>{
        const e = document.createElement("input");
        e.setAttribute("id", id);
        e.setAttribute("name", name);
        e.setAttribute("type", type);
        e.disabled = disabled;
        classlist.forEach((c)=>{
            e.classList.add(c);
        });
        (0, _indexJs.HTMLFactory).setCustomStyles(e, customStyles);
        return e;
    };
    generateTextInput = (id, name, classlist, customStyles, type, value)=>{
        const e = document.createElement("input");
        e.setAttribute("id", id);
        e.setAttribute("name", name);
        e.setAttribute("type", type);
        classlist.forEach((c)=>{
            e.classList.add(c);
        });
        (0, _indexJs.HTMLFactory).setCustomStyles(e, customStyles);
        e.value = value;
        return e;
    };
    // RangeInput
    generateRangeInput = (id, name, classlist, customStyles, min, max, step, value)=>{
        const e = document.createElement("input");
        e.setAttribute("id", id);
        e.setAttribute("name", name);
        e.setAttribute("type", "range");
        e.setAttribute("min", min);
        e.setAttribute("max", max);
        e.setAttribute("step", step);
        classlist.forEach((c)=>{
            e.classList.add(c);
        });
        (0, _indexJs.HTMLFactory).setCustomStyles(e, customStyles);
        e.value = value;
        return e;
    };
    // RadioInput
    generateRadioInput = (id, name, classlist, customStyles, type, value, checked)=>{
        const e = document.createElement("input");
        e.setAttribute("id", id);
        e.setAttribute("name", name);
        e.setAttribute("type", type);
        e.setAttribute("value", value);
        if (checked) e.setAttribute("checked", "checked");
        classlist.forEach((c)=>{
            e.classList.add(c);
        });
        (0, _indexJs.HTMLFactory).setCustomStyles(e, customStyles);
        return e;
    };
}

},{"../index.js":"f3jdF","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4reBS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ParagraphGenerator", ()=>ParagraphGenerator);
var _indexJs = require("../index.js");
class ParagraphGenerator {
    constructor(){}
    generateNewParagraph = (id, name, classlist, customStyles, text)=>{
        const e = document.createElement("p");
        e.setAttribute("id", id);
        e.setAttribute("name", name);
        classlist.forEach((c)=>{
            e.classList.add(c);
        });
        const t = document.createTextNode(text);
        e.appendChild(t);
        (0, _indexJs.HTMLFactory).setCustomStyles(e, customStyles);
        return e;
    };
}

},{"../index.js":"f3jdF","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lxBrf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SpanGenerator", ()=>SpanGenerator);
var _indexJs = require("../index.js");
class SpanGenerator {
    constructor(){}
    generateNewSpan = (id, name, classlist, customStyles, text)=>{
        const e = document.createElement("span");
        e.setAttribute("id", id);
        e.setAttribute("name", name);
        classlist.forEach((c)=>{
            e.classList.add(c);
        });
        const t = document.createTextNode(text);
        e.appendChild(t);
        (0, _indexJs.HTMLFactory).setCustomStyles(e, customStyles);
        return e;
    };
}

},{"../index.js":"f3jdF","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"badJY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "LabelGenerator", ()=>LabelGenerator);
var _indexJs = require("../index.js");
class LabelGenerator {
    constructor(){}
    generateNewLabel = (id, name, $for, classlist, customStyles, text)=>{
        const e = document.createElement("label");
        e.setAttribute("id", id);
        e.setAttribute("name", name);
        e.setAttribute("for", $for);
        classlist.forEach((c)=>{
            e.classList.add(c);
        });
        const t = document.createTextNode(text);
        e.appendChild(t);
        (0, _indexJs.HTMLFactory).setCustomStyles(e, customStyles);
        return e;
    };
}

},{"../index.js":"f3jdF","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5ucyL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "TableGenerator", ()=>TableGenerator);
class TableGenerator {
    constructor(){}
    generateTableFromData = (id, name, classlist, customStyles, headers, columnData, rowLimit)=>{
        const t = document.createElement("table");
        t.setAttribute("id", id);
        const thead = document.createElement("thead");
        const tbody = document.createElement("tbody");
        t.appendChild(thead);
        t.appendChild(tbody);
        console.log(columnData);
        /*const obj = JSON.parse(columnData);
        const tableObj = Object.entries(obj);*/ /*for (var value in tableObj[0]) {
            console.log(value);
        }*/ console.log(headers);
        console.log(columnData);
        const tableBodyElements = JSON.parse(tableObj[0][1]);
        //console.log(tableBodyElements);
        for(var i = 0; i < tableBodyElements.data.length; i++)if (i < rowLimit) {
            const tr = document.createElement("tr");
            tbody.appendChild(tr);
            const tableBodyElement = Object.values(tableBodyElements.data[i]);
            for(var j = 0; j < tableBodyElement.length; j++){
                //console.log(tableBodyElement[j])
                const td = document.createElement("td");
                const text = document.createTextNode(tableBodyElement[j]);
                td.appendChild(text);
                tr.appendChild(td);
            }
        }
        /*data.forEach((r, index) => {
            console.log(r);
        });*/ /*tableBodyElements.forEach((r, index) => {
            if (index < rowLimit) {
                const tr = document.createElement('tr');
                tbody.appendChild(tr);
                r.forEach(e => {
                    const td = document.createElement('td');
                    const text = document.createTextNode(e);
                    td.appendChild(text);
                    tr.appendChild(td);
                });
            }
        });*/ return t;
    };
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3AABC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SelectGenerator", ()=>SelectGenerator);
var _indexJs = require("../index.js");
class SelectGenerator {
    constructor(){}
    generateNewSelect = (id, name, classlist, customStyles, options, optionsText)=>{
        const e = document.createElement("select");
        e.setAttribute("id", id);
        e.setAttribute("name", name);
        classlist.forEach((c)=>{
            e.classList.add(c);
        });
        for(let i = 0; i < options.length; i++){
            const option = document.createElement("option");
            option.setAttribute("value", options[i]);
            option.innerHTML = optionsText[i];
            e.appendChild(option);
        }
        (0, _indexJs.HTMLFactory).setCustomStyles(e, customStyles);
        return e;
    };
    /**
     * Updates the options for existing dropdown.
     * @param {HTMLElement} dropdown the HTML Element of the target dropdown
     * @param {Array} options the array of objects with option display names and values
     * */ updateOptions = (dropdown, options)=>{
        while(dropdown.firstChild)dropdown.removeChild(dropdown.firstChild);
        for(let i = 0; i < options.length; i++){
            const option = document.createElement("option");
            option.setAttribute("value", options[i].value);
            option.innerHTML = options[i].name;
            dropdown.appendChild(option);
        }
    };
    addOption(dropdown, option) {
        const newOption = document.createElement("option");
        newOption.setAttribute("value", option.value);
        newOption.innerHTML = option.name;
        dropdown.appendChild(newOption);
    }
    removeOption(dropdown, option) {
        var optionIndex = Array.from(dropdown.options).indexOf(option);
        if (optionIndex !== -1) dropdown.options[optionIndex].remove();
    }
}

},{"../index.js":"f3jdF","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6a52y":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "H1Generator", ()=>H1Generator);
var _indexJs = require("../index.js");
class H1Generator {
    constructor(){}
    generateNewH3 = (id, name, classlist, customStyles, text)=>{
        const e = document.createElement("h1");
        e.setAttribute("id", id);
        e.setAttribute("name", name);
        classlist.forEach((c)=>{
            e.classList.add(c);
        });
        const t = document.createTextNode(text);
        e.appendChild(t);
        (0, _indexJs.HTMLFactory).setCustomStyles(e, customStyles);
        return e;
    };
}

},{"../index.js":"f3jdF","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dgiTv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CheckboxGenerator", ()=>CheckboxGenerator);
var _indexJs = require("../index.js");
class CheckboxGenerator {
    constructor(){}
    generateCheckbox = (id, name, classlist, customStyles, value, label, checked)=>{
        const wrapper = this.#createWrapperElement();
        const checkbox = this.#createCheckboxElement(id, name, value, checked);
        this.#addStyles(checkbox, classlist, customStyles);
        const labelElement = this.#createlabelElement(id, label);
        this.#combineElements(wrapper, checkbox, labelElement);
        return {
            wrapper: wrapper,
            checkbox: checkbox,
            label: labelElement
        };
    };
    #createWrapperElement() {
        const wrapper = document.createElement("Div");
        wrapper.classList.add("checkbox-wrapper");
        return wrapper;
    }
    #createCheckboxElement(id, name, value, checked) {
        const e = document.createElement("input");
        e.setAttribute("id", id);
        e.setAttribute("name", name);
        e.setAttribute("type", "checkbox");
        e.setAttribute("value", value);
        if (checked) e.setAttribute("checked", true);
        return e;
    }
    #createlabelElement(id, labelText) {
        const label = document.createElement("Label");
        label.setAttribute("for", id);
        label.innerHTML = labelText;
        return label;
    }
    #combineElements(wrapper, checkbox, label) {
        wrapper.appendChild(checkbox);
        wrapper.appendChild(label);
    }
    #addStyles(checkbox, classlist, customStyles) {
        classlist.forEach((c)=>checkbox.classList.add(c));
        (0, _indexJs.HTMLFactory).setCustomStyles(checkbox, customStyles);
    }
}

},{"../index.js":"f3jdF","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bZzVg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "TextAreaGenerator", ()=>TextAreaGenerator);
var _indexJs = require("../index.js");
class TextAreaGenerator {
    constructor(){}
    generateTextArea = (id, name, classlist, customStyles)=>{
        const e = document.createElement("textArea");
        e.setAttribute("id", id);
        e.setAttribute("name", name);
        classlist.forEach((c)=>{
            e.classList.add(c);
        });
        (0, _indexJs.HTMLFactory).setCustomStyles(e, customStyles);
        return e;
    };
}

},{"../index.js":"f3jdF","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5XlIg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "FormGenerator", ()=>FormGenerator);
var _indexJs = require("../index.js");
class FormGenerator {
    constructor(){}
    generateForm = (id, name, classlist, customStyles)=>{
        const e = document.createElement("form");
        e.setAttribute("id", id);
        e.setAttribute("name", name);
        classlist.forEach((c)=>{
            e.classList.add(c);
        });
        (0, _indexJs.HTMLFactory).setCustomStyles(e, customStyles);
        return e;
    };
}

},{"../index.js":"f3jdF","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"brTrV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AnchorGenerator", ()=>AnchorGenerator);
var _indexJs = require("../index.js");
class AnchorGenerator {
    constructor(){}
    generateNewAnchor = (href, id, name, classlist, customStyles, text)=>{
        const e = document.createElement("a");
        e.setAttribute("href", href);
        e.setAttribute("id", id);
        e.setAttribute("name", name);
        classlist.forEach((c)=>{
            e.classList.add(c);
        });
        const t = document.createTextNode(text);
        e.appendChild(t);
        (0, _indexJs.HTMLFactory).setCustomStyles(e, customStyles);
        return e;
    };
}

},{"../index.js":"f3jdF","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4FAja":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ListGenerator", ()=>ListGenerator);
var _indexJs = require("../index.js");
class ListGenerator {
    constructor(){}
    /** Generates HTML list element
     * @param {id} string id of the ul element
     * @param {name} string name of the ul element
     * @param {classList} list list of class name strings of the ul element
     * @param {customStyles} object object for setting styles of the ul element
     *                              e.g. { style: 'width', value: '100%' }
     * @param {list} list list of strings for the list element
     **/ generateNewList = (id, name, classlist, customStyles, list)=>{
        const e = document.createElement("ul");
        e.setAttribute("id", id);
        e.setAttribute("name", name);
        classlist.forEach((c)=>{
            e.classList.add(c);
        });
        (0, _indexJs.HTMLFactory).setCustomStyles(e, customStyles);
        if (list) list.forEach((item)=>{
            const listItem = document.createElement("li");
            listItem.textContent = item;
            e.appendChild(listItem);
        });
        return e;
    };
}

},{"../index.js":"f3jdF","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1UwiD":[function(require,module,exports) {
/*************************************************************
 * COPYRIGHT University of Hawaii - COMA Project / Lava Lab  *
 * Author: James Hutchison                                   *
 * Date: 5/5/2022                                            *
 *************************************************************/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "RangeSlider", ()=>RangeSlider);
class RangeSlider {
    constructor(id, name, classList, customstyles, callback, updateSliderFunction){
        updateSliderFunction(this.updateFunction.bind(this));
        this.callback = callback;
        this.slideBalls = [];
        this.backgroundBar = undefined;
        this.wrapper = this.generateRangeSlider(id, name, classList, customstyles);
        this.setStopDragEventListeners();
    }
    generateRangeSlider(id, name, classlist, customstyles) {
        const wrapper = document.createElement("div");
        wrapper.classList.add("range-slider-wrapper");
        this.backgroundBar = this.createBackgroundbar();
        const leftSlideBall = this.createSlideBall("left");
        const rightSlideBall = this.createSlideBall("right");
        wrapper.appendChild(this.backgroundBar);
        wrapper.appendChild(leftSlideBall);
        wrapper.appendChild(rightSlideBall);
        return wrapper;
    }
    createBackgroundbar() {
        const bar = document.createElement("div");
        bar.classList.add("range-slider-background-bar");
        return bar;
    }
    createSlideBall(side) {
        const ball = document.createElement("div");
        if (side === "left") ball.classList.add("range-slider-ball");
        else ball.classList.add("range-slider-ball-right");
        const percent = side === "left" ? 0 : 1;
        const ballObject = {
            element: ball,
            dragging: false,
            leftOffset: 0,
            parentWidth: this.getBarWidth(),
            parentPercentWidth: -1,
            parentLeft: this.getBarLeft(),
            width: ball.getBoundingClientRect().width,
            side: side,
            percent: percent
        };
        this.slideBalls.push(ballObject);
        this.createSlideEventListeners(ballObject);
        this.setParentPercentWidths();
        return ball;
    }
    createSlideEventListeners(ballObject) {
        ballObject.element.addEventListener("mousedown", (event1)=>{
            this.beginDragging(event1, ballObject);
        });
        document.addEventListener("mousemove", ()=>{
            this.drag(event, this.slideBalls.find((element)=>element.dragging === true));
        });
    }
    setStopDragEventListeners() {
        document.addEventListener("mouseup", ()=>{
            this.stopDragging(this.slideBalls.find((element)=>element.dragging === true));
        });
    }
    stopDragging = (ballObject)=>{
        if (!ballObject) return;
        ballObject.dragging = false;
        ballObject.positionArray = [];
    };
    beginDragging = (event1, ballObject)=>{
        ballObject.dragging = true;
        ballObject.leftOffset = this.calcLeftOffest(event1, ballObject.element);
        ballObject.parentWidth = this.getBarWidth();
        ballObject.parentLeft = this.getBarLeft();
        ballObject.width = ballObject.element.getBoundingClientRect().width;
        this.setParentPercentWidths();
    };
    drag = (event1, ballObject)=>{
        if (!ballObject) return;
        if (ballObject.dragging) {
            const dragToPosition = this.findDragToPosition(event1.clientX, ballObject);
            this.moveBallToPosition(ballObject.element, dragToPosition);
            ballObject.percent = this.calculatePercentageFromEdge(ballObject);
            this.callback({
                left: parseFloat(this.getBallOnLeftSide().percent.toFixed(3)),
                right: parseFloat(this.getBallOnRightSide().percent.toFixed(3)),
                callback: this.updateFunction.bind(this)
            });
        }
    };
    moveBallToPosition = (element, pos)=>element.style.left = `${pos}px`;
    calcLeftOffest = (event1, element)=>{
        return event1.clientX - element.getBoundingClientRect().left + window.pageXOffset || document.documentElement.scrollLeft;
    };
    isDragInBounds(mouseLeft, ballObject) {
        return this.checkLeftBound(mouseLeft, ballObject.leftOffset, ballObject.parentLeft) && this.checkRightBound(mouseLeft, ballObject.leftOffset, ballObject.width, ballObject.parentLeft, ballObject.parentWidth) && this.checkSecondBallBound(mouseLeft, ballObject.side, ballObject.leftOffset, ballObject.width);
    }
    findDragToPosition(mousePosition, ballObject) {
        if (this.isDragInBounds(mousePosition, ballObject)) return mousePosition - ballObject.leftOffset - ballObject.parentLeft;
        else return this.findBoundaryPosition(mousePosition, ballObject.leftOffset, ballObject.parentLeft, ballObject.width, ballObject.parentWidth, ballObject.side);
    }
    findBoundaryPosition(mousePosition, leftOffset, parentLeft, width, parentWidth, side) {
        if (!this.checkSecondBallBound(mousePosition, side, leftOffset, width)) {
            if (side === "left") return this.getBallLeft(this.getBallOnRightSide().element) - parentLeft - width;
            else return this.getBallLeft(this.getBallOnLeftSide().element) + width - parentLeft;
        } else if (!this.checkLeftBound(mousePosition, leftOffset, parentLeft)) return 0;
        else return parentWidth - width;
    }
    checkLeftBound = (mouseLeft, leftOffset, parentLeft)=>mouseLeft - leftOffset >= parentLeft;
    checkRightBound = (mouseLeft, leftOffset, width, parentLeft, parentWidth)=>mouseLeft - leftOffset + width <= parentLeft + parentWidth;
    checkSecondBallBound(mouseLeft, side, leftOffset, width) {
        if (side === "left") return this.checkLeftBallBounds(mouseLeft, leftOffset, width, this.getBallOnRightSide());
        else return this.checkRightBallBounds(mouseLeft, leftOffset, this.getBallOnLeftSide());
    }
    checkLeftBallBounds = (mouseLeft, leftOffset, width, other)=>mouseLeft - leftOffset + width <= this.getBallLeft(other.element);
    checkRightBallBounds = (mouseLeft, leftOffset, other)=>mouseLeft - leftOffset >= this.getBallLeft(other.element) + other.width;
    getBallOnLeftSide = ()=>this.slideBalls.find((e)=>e.side === "left");
    getBallOnRightSide = ()=>this.slideBalls.find((e)=>e.side === "right");
    getBarWidth = ()=>this.backgroundBar.getBoundingClientRect().width;
    getBarLeft = ()=>this.backgroundBar.getBoundingClientRect().left + window.pageXOffset || document.documentElement.scrollLeft;
    getBallLeft = (ball)=>ball.getBoundingClientRect().left + window.pageXOffset || document.documentElement.scrollLeft;
    setParentPercentWidths() {
        this.slideBalls.forEach((ball)=>{
            ball.parentWidth = this.getBarWidth();
            ball.width = ball.element.getBoundingClientRect().width;
            ball.parentPercentWidth = ball.parentWidth - 2 * ball.width;
        });
    }
    calculatePercentageFromEdge(ballObject) {
        if (ballObject.side === "left") {
            const right = this.getBallLeft(ballObject.element) + ballObject.width;
            const distanceTraveled = right - ballObject.parentLeft - ballObject.width;
            return distanceTraveled / ballObject.parentPercentWidth;
        } else {
            const left = this.getBallLeft(ballObject.element);
            const distanceTraveled = ballObject.parentLeft + ballObject.parentWidth - ballObject.width - left;
            return 1 - distanceTraveled / ballObject.parentPercentWidth;
        }
    }
    #calculateLeftBallPositionFromPercentage(percentage) {
        const ball = this.getBallOnLeftSide();
        const left = ball.parentPercentWidth * percentage;
        ball.percent = percentage;
        this.moveBallToPosition(ball.element, left);
    }
    #calculateRightBallPositionFromPercentage(percentage) {
        const ball = this.getBallOnRightSide();
        const right = ball.parentPercentWidth * percentage + ball.width;
        ball.percent = percentage;
        this.moveBallToPosition(ball.element, right);
    }
    /** --- PUBLIC ---
     * This function will position the left and right slide balls a percentage distance from their 
     * respective endpoints. 
     * @param {Number} min the percent distance traveled from the left endpoint 
     * @param {Number} max the percent distance traveled from the right endpoint */ updateFunction(min, max) {
        this.setParentPercentWidths();
        this.#calculateLeftBallPositionFromPercentage(min);
        this.#calculateRightBallPositionFromPercentage(max);
    }
    getWrappper = ()=>this.wrapper;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lnqdG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "RangeInput", ()=>RangeInput);
var _indexJs = require("../index.js");
class RangeInput {
    #HF;
    #wrapper;
    #rangeInput;
    #textInput;
    constructor(id, name, classlist, customStyles, labelName, min, max, step, value){
        this.#HF = new (0, _indexJs.HTMLFactory)();
        this.#wrapper = this.#createWrapper(id, name, classlist, customStyles);
        this.#createElements(labelName, min, max, step, value);
    }
    // Create wrapper
    #createWrapper(id, name, classlist, customStyles) {
        return this.#HF.createNewDiv(id, name, classlist, customStyles, [], "");
    }
    #createElements(labelName, min, max, step, value) {
        var wrapper = this.#wrapper;
        var label = this.#HF.createNewLabel("", "", "", [
            "label"
        ], [], labelName);
        var rangeInput = this.#HF.createNewRangeInput("", "", [
            "range-input"
        ], [], min, max, step, value);
        var textInput = this.#HF.createNewTextInput("", "", [
            "text-input"
        ], [
            {
                style: "width",
                value: "20%"
            }
        ], "text", value);
        // Append eventListeners
        rangeInput.addEventListener("input", (e)=>{
            let ti = e.target.nextElementSibling;
            console.log(ti);
            ti.value = e.target.value;
        });
        textInput.addEventListener("input", (e)=>{
            const newValue = parseFloat(e.target.value);
            if (!isNaN(newValue) && newValue >= min && newValue <= max) rangeInput.value = newValue;
        });
        wrapper.appendChild(label);
        wrapper.appendChild(rangeInput);
        wrapper.appendChild(textInput);
    }
    get() {
        return {
            wrapper: this.#wrapper,
            rangeInput: this.#rangeInput,
            textInput: this.#textInput
        };
    }
}

},{"../index.js":"f3jdF","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"f2N39":[function(require,module,exports) {
/*************************************************************
 * COPYRIGHT University of Hawaii - COMA Project / Lava Lab  *
 * Author: James Hutchison                                   *
 * Date: 5/5/2022                                            *
 *************************************************************/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AxisCard", ()=>AxisCard) /*
export class XAxisCard extends AxisCard {
    constructor(dropdown, labelInput, gridCheckbox, tickCheckbox, addTraceButton, addTraceFunction, errorDropDown) {
        super(dropdown, labelInput, 'X Axis', gridCheckbox, tickCheckbox, addTraceButton, addTraceFunction, errorDropDown);
    }
}

export class YAxisCard extends AxisCard {
    constructor(dropdown, labelInput, gridCheckbox, tickCheckbox, addTraceButton, addTraceFunction, errorDropDown) {
        super(dropdown, labelInput, 'Y Axis', gridCheckbox, tickCheckbox, addTraceButton, addTraceFunction, errorDropDown);
    }
}

export class ZAxisCard extends AxisCard {
    constructor(dropdown, labelInput, gridCheckbox, tickCheckbox, addTraceButton, errorDropDown) {
        super(dropdown, labelInput, 'Z Axis', gridCheckbox, tickCheckbox, addTraceButton, errorDropDown);
    }
}
*/ ;
var _mainJs = require("../../../main.js");
class AxisCard {
    #wrapper;
    #axisContentInfo;
    #axisHeader;
    #axisContent;
    #axisDropdown;
    #axisArea;
    #addAxisButton;
    axisCards;
    /** Creates an axis card for Chart Module inspector card.
     * @param { moduleKey } Number key of the module
     * @param { axisContentInfo } Object consists of name, displayName, and activeTab information of this axisCard
     *                            (e.g. { name: 'xAxis', displayName: 'X Axis', activeTab: true })
     * @param { axes } Array of objects with name, displayName and dataType information
     *                      (e.g. [{ name: 'iso_date_mjd', displayName: 'ISO Date', dataType: 'time' }, ..])
     * @param { defaultAxis } Object that consists of name, displayName and dataType information of a specified default axis.
     *                               defaultAxis will be an undefined object if it is not set for the current datasetType
     *                               (e.g. { name: 'mag', displayName: 'magnitude', dataType: 'value' })
     */ constructor(moduleKey, axisContentInfo, axes, defaultAxis){
        this.#axisContentInfo = axisContentInfo;
        this.#createElements(moduleKey, axisContentInfo, axes, defaultAxis);
        this.#buildCard();
        this.#addAxisFunction(axisContentInfo.name, axes);
    }
    #createElements(moduleKey, axisContentInfo, axes, defaultAxis) {
        this.#createWrapper(moduleKey, axisContentInfo);
        //this.#createHeader(axisName);
        this.#createContent(axisContentInfo, axes, defaultAxis);
    }
    #buildCard() {
        //this.#wrapper.appendChild(this.#axisHeader);
        this.#wrapper.appendChild(this.#axisContent);
    }
    #createWrapper(moduleKey, axisContentInfo) {
        this.#wrapper = (0, _mainJs.GM).HF.createNewDiv(`${axisContentInfo.name}-${moduleKey}`, axisContentInfo.name, [
            "axis-tab-content",
            "tab-content"
        ], [], [], "");
        if (axisContentInfo.activeTab) this.#wrapper.classList.add("active");
    }
    // create header
    #createHeader(axisContentInfo) {
        const axisCardHeader = (0, _mainJs.GM).HF.createNewDiv("", "", [
            "axis-card-header",
            "header"
        ], [], [], "");
        axisCardHeader.innerHTML = axisContentInfo.displayName;
        this.#wrapper.appendChild(axisCardHeader);
        this.#axisHeader = axisCardHeader;
    }
    // create content --> dropdowns & labels & (other chart options) & addTrace button for each field (add function to addTrace button)
    #createContent(axisContentInfo, axes, defaultAxis) {
        //console.log(axes);
        //console.log(defaultAxis);
        //console.log(errorFields);
        if (axes) {
            // create content wrapper
            var contentWrapper = (0, _mainJs.GM).HF.createNewDiv("", "", [
                "axis-content-wrapper"
            ], [], [], "");
            var axesWrapper = (0, _mainJs.GM).HF.createNewDiv("", "", [
                "axes-dropdown-wrapper"
            ], [], [], "");
            // create dropdown wrapper
            var options = {
                "none": "---- Select ----"
            };
            // foreach field, create a dropdown and a label input
            // sort fields by the default selection then the name
            axes.forEach((axis)=>{
                if (axis.name) options[axis.name] = axis.displayName;
            });
            this.#axisDropdown = (0, _mainJs.GM).HF.createNewSelect("", "", [
                "axes-dropdown"
            ], [], Object.keys(options), Object.values(options));
            this.#addAxisButton = (0, _mainJs.GM).HF.createNewButton(`add-axis-button`, "", [
                "button",
                "add-axis-button"
            ], [], "button", "Add Axis", false);
            axesWrapper.appendChild(this.#axisDropdown);
            axesWrapper.appendChild(this.#addAxisButton);
            // create trace area (table with removeable items? add error dropdown here if any?)
            this.#axisArea = (0, _mainJs.GM).HF.createNewDiv("", "", [
                "axis-area"
            ], [], [], "");
            // add default traceCard
            var axis = axes[0];
            if (defaultAxis) axis = axes.filter((a)=>a.name === defaultAxis.name)[0];
            this.#createAxisCard(axisContentInfo.name, axis);
            // label input for the added trace.. other options for the chart
            contentWrapper.appendChild(axesWrapper);
            contentWrapper.appendChild(this.#axisArea);
            this.#axisContent = contentWrapper;
        }
    }
    #addAxisFunction(axisContentName, axes) {
        //console.log(axes);
        const button = this.#addAxisButton;
        button.addEventListener("click", (e)=>{
            //-- Get the selected axis option
            let dropdown = e.target.previousElementSibling;
            let selected = dropdown.options[dropdown.selectedIndex];
            let selectedAxis = axes.filter((a)=>a.name === selected.value)[0];
            //-- Create new Axis Card
            if (selected.value !== "none") {
                var axisCard = this.#createAxisCard(axisContentName, selectedAxis);
                //-- Update Axis reference options in Series cards
                this.updateSeriesAxisOptions("add", axisContentName, axisCard);
            }
        });
    }
    /** Creates an Axis Card in the axis area
     * @param { axisName } Object that consists of elementId and displayName of the axisCard
     * @param { axis } Object that consists of axis information for the axisCard to be created
     * */ #createAxisCard(axisContentName, axis) {
        //console.log(axis);
        var axisArea = this.#axisArea;
        //-- Create traceCard content
        let axisCard = (0, _mainJs.GM).HF.createNewDiv(axis.name, "", [
            "axis-card-wrapper"
        ], [], [], "");
        //-- Create traceCard header
        let header = (0, _mainJs.GM).HF.createNewDiv("", "", [
            "axis-card-header"
        ], [], [], "");
        let axisTitle = (0, _mainJs.GM).HF.createNewSpan("", "axis-title", [
            "axis-title"
        ], [], axis.name);
        let axisDataType = (0, _mainJs.GM).HF.createNewTextInput("", "", [
            "data-type"
        ], [], "hidden", axis.dataType);
        let removeBtn = (0, _mainJs.GM).HF.createNewIMG("", "", "./images/icons/delete-icon.png", [
            "remove-button",
            "button"
        ], [], "");
        header.appendChild(axisTitle);
        header.appendChild(axisDataType);
        header.appendChild(removeBtn);
        axisCard.appendChild(header);
        axisArea.appendChild(axisCard);
        //-- Create removeFunction for this
        this.#removeAxisFunction(removeBtn);
        let axisBody = (0, _mainJs.GM).HF.createNewDiv("", "", [
            "axis-card-body"
        ], [], [], "");
        //-- Create axis label input
        let labelWrapper = (0, _mainJs.GM).HF.createNewDiv("", "", [
            "label-wrapper",
            "axis-card-element"
        ], [], [], "");
        let labelText = (0, _mainJs.GM).HF.createNewSpan("", "", [
            "label-text"
        ], [], `Label Name: `);
        let label = (0, _mainJs.GM).HF.createNewTextInput("", "", [
            "label-input"
        ], [], "text", false);
        label.value = axis.name;
        labelWrapper.appendChild(labelText);
        labelWrapper.appendChild(label);
        axisBody.appendChild(labelWrapper);
        /*if (errorFields) {
            // add error bar option
            let errorBarDDWrapper = GM.HF.createNewDiv('', '', ['errorbar-dropdown-wrapper', 'trace-card-element'], [], [], '');
            let errorBarLabel = GM.HF.createNewSpan('', '', ['errorbar-label'], [], 'Error Bar: ');
            let options = ['none'];
            let optionsText = ['-- None --'];
            errorFields.forEach(e => { optionsText.push(e.fieldName) });
            errorFields.forEach(e => { options.push(e.fieldName) });
            let errorBarDD = GM.HF.createNewSelect('', '', ['error-dropdown'], [], options, optionsText);
            errorBarDDWrapper.appendChild(errorBarLabel);
            errorBarDDWrapper.appendChild(errorBarDD);
            traceCard.appendChild(errorBarDDWrapper);
        }*/ // Add Corresponding x-axis field dropdown
        /*let xFieldNameWrapper = GM.HF.createNewDiv('', '', ['xaxis-field-wrapper', 'trace-card-element'], [], [], '');
        let xFieldNameLabel = GM.HF.createNewSpan('', '', ['xaxis-field-label'], [], 'X Axis Field: ');
        let xFieldNameDD = GM.HF.createNewSelect('', '', ['xaxis-field-dropdown'], [], [], []);
        xFieldNameWrapper.appendChild(xFieldNameLabel);
        xFieldNameWrapper.appendChild(xFieldNameDD);
        traceCard.appendChild(xFieldNameWrapper);*/ //-- Create positions options
        let positionOptionsWrapper = (0, _mainJs.GM).HF.createNewDiv("", "", [
            "position-options-wrapper",
            "axis-card-element"
        ], [], [], "");
        // position option
        let positionOptions = this.#createPositionOptions(axisContentName.name);
        let positionOptionsLabel = (0, _mainJs.GM).HF.createNewSpan("", "", [
            "position-options-label"
        ], [], `Axis Position: `);
        let positionOptionsDropdown = (0, _mainJs.GM).HF.createNewSelect("", "", [
            "position-options-dropdown"
        ], [], positionOptions, positionOptions);
        positionOptionsWrapper.appendChild(positionOptionsLabel);
        positionOptionsWrapper.appendChild(positionOptionsDropdown);
        axisBody.appendChild(positionOptionsWrapper);
        // offset option
        //let offsetOptionWrapper = GM.HF.createNewDiv('', '', ['offset-option-wrapper', 'trace-card-element'], [], [], '');
        // create range input here
        let offsetOptionRange = (0, _mainJs.GM).HF.createNewRangeInputComponent("", "", [
            "offset-option-wrapper",
            "axis-card-element"
        ], [], "Offset: ", 0, 50, 1, 0);
        axisBody.appendChild(offsetOptionRange);
        //-- Create options
        let axisOptionsWrapper = (0, _mainJs.GM).HF.createNewDiv("", "", [
            "axis-options-wrapper",
            "axis-card-element"
        ], [], [], "");
        //let optionsWrapper = GM.HF.createNewDiv('', '', ['options-wrapper'], [], [], '');
        // major gridlines option
        let gridLinesOption = (0, _mainJs.GM).HF.createNewCheckbox("", "", [
            "major-gridlines",
            "checkbox"
        ], [], "", "Major Grid Lines", true);
        axisOptionsWrapper.appendChild(gridLinesOption.wrapper);
        // minor gridlines option
        let minorTicksOption = (0, _mainJs.GM).HF.createNewCheckbox("", "", [
            "minor-ticks",
            "checkbox"
        ], [
            {
                style: "margin-left",
                value: "22%"
            }
        ], "", "Ticks", false);
        axisOptionsWrapper.appendChild(minorTicksOption.wrapper);
        // minor gridlines option
        let minorGridLinesOption = (0, _mainJs.GM).HF.createNewCheckbox("", "", [
            "minor-gridlines",
            "checkbox"
        ], [], "", "Minor Grid Lines", false);
        axisOptionsWrapper.appendChild(minorGridLinesOption.wrapper);
        // inverse option
        var inverseChecked = false;
        if (axis.name.includes("mag") && axis.dataType === "value") inverseChecked = true;
        let inverseOption = (0, _mainJs.GM).HF.createNewCheckbox("", "", [
            "inverse",
            "checkbox"
        ], [
            {
                style: "margin-left",
                value: "22%"
            }
        ], "", "Inverse", inverseChecked);
        axisOptionsWrapper.appendChild(inverseOption.wrapper);
        axisBody.appendChild(axisOptionsWrapper);
        axisCard.appendChild(axisBody);
        return axisCard;
    }
    //-- Creates options array for axis position configuration
    #createPositionOptions(axisContentName) {
        var positionOptions = [];
        if (axisContentName === "xAxis") positionOptions = [
            "bottom",
            "top"
        ];
        else positionOptions = [
            "left",
            "right"
        ];
        return positionOptions;
    }
    #removeAxisFunction(button) {
        // for xaxis don't remove if axisCard is less than or equal to 1
        button.addEventListener("click", (e)=>{
            let axisContentName = e.target.closest(".axis-tab-content").getAttribute("name");
            let axisArea = e.target.closest(".axis-area");
            let axisCard = e.target.closest(".axis-card-wrapper");
            let numAxisCards = axisArea.querySelectorAll(".axis-card-wrapper");
            if (numAxisCards.length <= 1) ;
            else {
                //-- Update the axis reference dropdown in series content
                this.updateSeriesAxisOptions("remove", axisContentName, axisCard);
                axisArea.removeChild(axisCard);
            }
        });
    }
    /** 
     *  Updates the Series Axis Reference Options in the series content
     *  If the action is to 'add' an axis, the name of the axis will be added to the axis reference dropdown in series content
     *  If the action is to 'remove' an axis, the name of the axis will be removed from the axis reference dropdown in series content
     *  @param { action } String of the action to add or remove an axis from axisArea
     *  @param { axisContentName } String of the axis content name, either xAxis or yAxis
     *  @param { axisCard } HTMLObject of the axisCard added/removed from axisArea
     * */ updateSeriesAxisOptions(action, axisContentName, axisCard) {
        const axisName = axisCard.getAttribute("id"); // xaxis or yaxis
        const inspectorWrapper = axisCard.closest(".chart-inspector-wrapper");
        //-- Select corresponding seriesCards and add/remove from axis reference dropdown
        const seriesCards = inspectorWrapper.querySelectorAll(".series-tab-content .series-area .series-card-wrapper");
        seriesCards.forEach((seriesCard)=>{
            const dropdown = seriesCard.querySelector(`.${axisContentName.toLowerCase()}-index-dropdown`);
            switch(action){
                case "add":
                    var index = dropdown.options.length;
                    (0, _mainJs.GM).HF.addSelectOption(dropdown, {
                        name: axisName,
                        value: index
                    });
                    break;
                case "remove":
                    const optionElement = Array.from(dropdown.options).find((option)=>option.textContent === axisName);
                    (0, _mainJs.GM).HF.removeSelectOption(dropdown, optionElement);
                    break;
            }
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                        OLD CODE                                                          //
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /** --- PRIVATE ---
     * Creates the HTML element for the axis card.
     * All of these arguments are HTML elements that are appended to the card.
     * @param {HTML p} title 
     * @param {HTML select} dropdown 
     * @param {HTML p} labelInput 
     * @param {HTML checkbox} gridCheckbox 
     * @param {HTML checkbox} tickCheckbox 
     * @param {HTML button} addTraceButton 
     * @param {function} addTraceFunction 
     * @param {HTML select} errorDropDown 
     */ #createHTMLElement(title, dropdown, labelInput, gridCheckbox, tickCheckbox, addTraceButton, addTraceFunction, errorDropDown) {
        this.#createWrapper(title);
        this.#createTitleBarElement(title);
        this.#createDataField(dropdown, errorDropDown, addTraceButton);
        this.#createLabelField(labelInput);
        this.#createCheckboxField(gridCheckbox, tickCheckbox);
        this.#createAddTraceListener(addTraceFunction);
    }
    /** --- PRIVATE ---
     * Creates and stores the wrapper element
     */ /*#createWrapper(title) {
        var elementId = title.replaceAll(' ', '-').toLowerCase();
        console.log(elementId);
        const wrapperElement = GM.HF.createNewDiv(`${elementId}-card-wrapper`, '', ['axis-card-wrapper'], [], [], '');
        this.storeElement('wrapperElement', wrapperElement);
    }*/ /** --- PRIVATE ---
     * Creates the title bar elements, stores that element, and adds the title text to the html object
     * @param {string} title 
     */ #createTitleBarElement(title) {
        const titleBarElement = (0, _mainJs.GM).HF.createNewDiv("", "", [
            "axis-card-title-bar"
        ], [], [], "");
        titleBarElement.innerHTML = title;
        this.storeElement("titleBar", titleBarElement);
        this.elementTable.get("wrapperElement").appendChild(titleBarElement);
    }
    /** --- PRIVATE ---
     * The data field is the area of the card where the user can chose which fields they wish to visualize with the chart
     * This function will create a wrapper, and add the buttons and dropdowns.
     * @param {HTML Select} dropdown 
     * @param {HTML Select} errorDropDown 
     * @param {HTML button} addTraceButton 
     */ #createDataField(dropdown, errorDropDown, addTraceButton) {
        const wrapper = (0, _mainJs.GM).HF.createNewDiv("", "", [
            "axis-card-label-field-wrapper"
        ], [], [], "");
        const dropdownsWrapper = (0, _mainJs.GM).HF.createNewDiv("", "", [
            "axis-card-dropdown-card-wrapper"
        ], [], [], "");
        const dataCard = this.#createDropDownCard("Data", dropdown);
        dropdownsWrapper.appendChild(dataCard);
        if (errorDropDown) {
            const errorCard = this.#createDropDownCard("Error", errorDropDown);
            errorCard.classList.add("axis-card-dropdown-card-errordd");
            dropdownsWrapper.appendChild(errorCard);
        }
        wrapper.appendChild(dropdownsWrapper);
        wrapper.appendChild(addTraceButton);
        this.storeElement("dataFieldWrapper", wrapper);
        this.storeElement("addTraceButton", addTraceButton);
        this.storeElement("lastDropdown", dropdownsWrapper);
        this.elementTable.get("wrapperElement").appendChild(wrapper);
    }
    /** -- PRIVATE ---
     * Each dropdown consists of a label, the header text. The text and the dropdown are created together.
     * @param {string} header 
     * @param {HTML Select} dropdown 
     * @returns the html container of this mini card
     */ #createDropDownCard(header, dropdown) {
        const dropDownWrapper = (0, _mainJs.GM).HF.createNewDiv("", "", [
            "axis-card-dropdown-wrapper"
        ], [], [], "");
        const headerText = (0, _mainJs.GM).HF.createNewParagraph("", "", [], [], header);
        dropDownWrapper.appendChild(headerText);
        dropDownWrapper.appendChild(dropdown);
        return dropDownWrapper;
    }
    /** --- PRIVATE ---
     * Used when there is no label for the dropdown (ie. When an additional trace is added)
     * @param {HTML Select} dropdown 
     * @returns the container of the mini card
     */ #createDropDownCardNoText(dropdown) {
        const dropDownWrapper = (0, _mainJs.GM).HF.createNewDiv("", "", [
            "axis-card-dropdown-wrapper"
        ], [], [], "");
        dropDownWrapper.appendChild(dropdown);
        return dropDownWrapper;
    }
    /** --- PRIVATE ---
     * Attaches the input field for user created label names
     * @param {HTML Input} labelInput 
     */ #createLabelField(labelInput) {
        const wrapper = (0, _mainJs.GM).HF.createNewDiv("", "", [
            "axis-card-label-field-wrapper"
        ], [], [], "");
        const header = (0, _mainJs.GM).HF.createNewParagraph("", "", [], [], "Label");
        wrapper.appendChild(header);
        wrapper.appendChild(labelInput);
        this.storeElement("labelFieldWrapper", wrapper);
        this.elementTable.get("wrapperElement").appendChild(wrapper);
    }
    /** --- PRIVATE ---
     * Adds the checkboxes for selecting grid lines and ticks
     * @param {HTML checkbox} gridCheckbox 
     * @param {HTML checkbox} tickCheckbox 
     */ #createCheckboxField(gridCheckbox, tickCheckbox) {
        const wrapper = (0, _mainJs.GM).HF.createNewDiv("", "", [
            "axis-card-label-field-wrapper",
            "justify-left"
        ], [], [], "");
        wrapper.appendChild(gridCheckbox);
        wrapper.appendChild(tickCheckbox);
        this.storeElement("labelFieldWrapper", wrapper);
        this.elementTable.get("wrapperElement").appendChild(wrapper);
    }
    /** --- PUBLIC ---
     * Adds a new trace dropdown and error dropdown when user clicks add trace button
     * @param {HTML Select} dropdown 
     * @param {HTML Select} errorDropdown 
     */ addTraceDropdown(dropdown, errorDropdown) {
        const dropdownsWrapper = (0, _mainJs.GM).HF.createNewDiv("", "", [
            "axis-card-dropdown-card-wrapper"
        ], [], [], "");
        dropdownsWrapper.appendChild(this.#createDropDownCardNoText(dropdown));
        dropdownsWrapper.appendChild(this.#createDropDownCardNoText(errorDropdown));
        this.elementTable.get("lastDropdown").after(dropdownsWrapper);
        this.elementTable.set("lastDropdown", dropdownsWrapper);
    }
    /** --- PRIVATE ---
     * Link the trace button to the Output Module
     * @param {function} fn This function fires when add trace is selected. It links the dropdowns to the 
     *                      card so that the chart data storage will be updated. 
     */ #createAddTraceListener(fn) {
        this.elementTable.get("addTraceButton").addEventListener("click", fn);
    }
    /** --- PUBLIC ---
     * @returns the HTML wrapper containing all child nodes. */ //getCard = () => this.elementTable.get('wrapperElement');
    storeElement(key, value) {
        this.elementTable.set(key, value);
    }
    getCard() {
        return {
            card: this,
            wrapper: this.#wrapper,
            content: this.#axisContent,
            axisContentInfo: this.#axisContentInfo,
            axisDropdown: this.#axisDropdown,
            axisArea: this.#axisArea,
            addAxisButton: this.#addAxisButton
        };
    }
}

},{"../../../main.js":"1SICI","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7yjEx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SeriesCard", ()=>SeriesCard);
var _mainJs = require("../../../main.js");
class SeriesCard {
    #wrapper;
    #seriesHeader;
    #seriesContent;
    #seriesDropdowns;
    #seriesArea;
    #addSeriesButton;
    /** 
     *  Creates Series Card instance for the Chart Module Inspector Card
     *  @param { moduleKey } Number key of the module
     *  @param { seriesFields } Array of objects that contains the series information
     *                          (e.g. [{ fieldName: 'object', 
     *                                   series: [{ name: "c-2019-u5", displayName: "C/2019 U5 (PanSTARRS)", dataType: 'category' },..]
     *                                 },..])
     * */ constructor(moduleKey, seriesFields){
        //this.#addSeriesAxisOptions = addSeriesAxisOptions.bind(this);
        this.#seriesDropdowns = [];
        this.#createElements(moduleKey, seriesFields);
        this.#buildCard();
    }
    #createElements(moduleKey, seriesFields) {
        this.#createWrapper(moduleKey);
        //this.#createHeader();
        this.#createContent(moduleKey, seriesFields);
    }
    #buildCard() {
        //this.#wrapper.appendChild(this.#seriesHeader);
        this.#wrapper.appendChild(this.#seriesContent);
    }
    //-- Create Wrapper
    #createWrapper(moduleKey) {
        this.#wrapper = (0, _mainJs.GM).HF.createNewDiv(`series-${moduleKey}`, "series", [
            "series-tab-content",
            "tab-content"
        ], [], [], "");
    }
    //-- Create Header
    /*#createHeader() {
        const seriesInspectorHeader = GM.HF.createNewDiv('', '', ['series-inspector-header', 'header'], [], [], '');
        seriesInspectorHeader.innerHTML = 'Series';
        this.#wrapper.appendChild(seriesInspectorHeader);
        this.#seriesHeader = seriesInspectorHeader;
    }*/ //-- Create Content
    #createContent(moduleKey, seriesFields) {
        console.log(seriesFields);
        try {
            let contentWrapper = (0, _mainJs.GM).HF.createNewDiv("", "", [
                "series-content-wrapper"
            ], [], [], "");
            let seriesDropdownArea = (0, _mainJs.GM).HF.createNewDiv("", "", [
                "series-dropdown-area"
            ], [], [], "");
            //-- Create Dropdown for each seriesField (e.g. telescope, object, etc)
            seriesFields.forEach((fieldData)=>{
                const fieldName = fieldData.fieldName;
                const series = fieldData.series;
                //-- Dropdown Wrapper for a field
                const seriesDropdownWrapper = (0, _mainJs.GM).HF.createNewDiv("", "", [
                    "series-dropdown-wrapper"
                ], [], [], "");
                const dropdownLabel = (0, _mainJs.GM).HF.createNewLabel(`${fieldName}-${moduleKey}-dropdown`, "", "", [
                    "series-dropdown-label"
                ], [], `${fieldName}: `);
                //-- Create series options for this field
                let options = {
                    "all": "--- Load All ---"
                };
                series.forEach((s)=>{
                    if (s.name) options[s.name] = s.displayName;
                });
                //-- Create series dropdown
                const dropdown = (0, _mainJs.GM).HF.createNewSelect(`${fieldName}-${moduleKey}-dropdown`, "", [
                    "series-dropdown"
                ], [], Object.keys(options), Object.values(options));
                const buttonWrapper = (0, _mainJs.GM).HF.createNewDiv("", "", [
                    "add-series-button-wrapper"
                ], [], [], "");
                const button = (0, _mainJs.GM).HF.createNewButton("", "", [
                    "button",
                    "add-series-button"
                ], [], "button", "Add Series", false);
                seriesDropdownWrapper.appendChild(dropdownLabel);
                seriesDropdownWrapper.appendChild(dropdown);
                buttonWrapper.appendChild(button);
                seriesDropdownWrapper.appendChild(buttonWrapper);
                seriesDropdownArea.appendChild(seriesDropdownWrapper);
                this.#createAddSeriesCardFunction(moduleKey, fieldName, series, button);
            });
            //-- Create dropdown options of all possible series
            /*let options = { "none": "---- Select ----" };
            series.forEach(s => {
                if (s.name) {
                    options[s.name] = s.displayName;
                }
            });
            console.log(options);*/ //-- Create fields dropdown
            /*this.#seriesDropdown = GM.HF.createNewSelect('', '', ['series-dropdown'], [{ style: "width", value: "70%" }, { style: "height", value: "25px" }], Object.keys(options), Object.values(options));
            this.#addSeriesButton = GM.HF.createNewButton('', '', ['button', 'add-series-button'], [{ style: "width", value: "30%" }, { style: "height", value: "25px" }], 'button', 'Add Series', false);
            seriesWrapper.appendChild(this.#seriesDropdown);
            seriesWrapper.appendChild(this.#addSeriesButton);*/ //-- Create series area where the seriesCard will be loaded
            this.#seriesArea = (0, _mainJs.GM).HF.createNewDiv("", "", [
                "series-card-area"
            ], [], [], "");
            //-- Append initial content to this series inspector content
            contentWrapper.appendChild(seriesDropdownArea);
            contentWrapper.appendChild(this.#seriesArea);
            this.#seriesContent = contentWrapper;
        //this.#addSeriesAxisOptions(traceCard);
        //this.#createAddSeriesCardFunction(moduleKey, fieldName, series);
        } catch (e) {
            // show error display
            console.error(e);
        }
    }
    /** 
     *  Creates addSeriesCard eventListener to add a seriesCard to seriesArea
     *  @param { fieldName } String Name of the column field from the dataset
     *                              (e.g. "ui_name" (current temporary name for the object name from the dataset))
     *  @param { series } Array of objects that contains the series information
     *                          (e.g. [{ name: "c-2019-u5", displayName: "C/2019 U5 (PanSTARRS)", dataType: 'category' },..])
     * */ #createAddSeriesCardFunction(moduleKey, fieldName, series, button) {
        button.addEventListener("click", (e)=>{
            //-- Get selected option of a series dropdown
            let dropdown = e.target.closest(".series-dropdown-wrapper").querySelector("select");
            let selected = dropdown.options[dropdown.selectedIndex];
            let selectedSeries = series.filter((s)=>s.name === selected.value)[0];
            console.log(selectedSeries);
            if (selected.value !== "all") {
                //-- Get all xAxisRefs and yAxisRefs of currently loaded axisCards in axisAreas
                const chartInspectorWrapper = document.getElementById(`chart-inspector-${moduleKey}`);
                //-- Get xAxisRefs information
                const xTraceArea = chartInspectorWrapper.querySelector(`#xAxis-${moduleKey}`);
                const xAxisElements = xTraceArea.querySelectorAll(".axis-card-wrapper");
                const xAxisRefs = [];
                xAxisElements.forEach((xEl, i)=>{
                    const axisName = xEl.getAttribute("id");
                    const dataType = xEl.querySelector(".data-type").value;
                    xAxisRefs.push({
                        index: i,
                        name: axisName,
                        displayName: axisName,
                        dataType: dataType
                    });
                });
                //-- Get yAxisRefs information
                const yTraceArea = chartInspectorWrapper.querySelector(`#yAxis-${moduleKey}`);
                const yAxisElements = yTraceArea.querySelectorAll(".axis-card-wrapper");
                const yAxisRefs = [];
                yAxisElements.forEach((yEl, i)=>{
                    const axisName = yEl.getAttribute("id");
                    const dataType = yEl.querySelector(".data-type").value;
                    yAxisRefs.push({
                        index: i,
                        name: axisName,
                        displayName: axisName,
                        dataType: dataType
                    });
                });
                //-- Create a seriesCard
                var seriesCard = this.#createSeriesCard(fieldName, selectedSeries, xAxisRefs, yAxisRefs);
            //-- Updates axis options for this seriesCard ........................................TODO: revise
            //this.#updateAxisReferenceOptions(seriesCard);
            }
        // else if all, load all the series cards
        });
    }
    /** 
     *  Creates a seriesCard that will be loaded to seriesArea
     *  @param { fieldName } String Name of the column field from the dataset
     *                              (e.g. "ui_name" (current temporary name for the object name from the dataset))
     *  @param { series } Object that contains the series information
     *                          (e.g. { name: "c-2019-u5", displayName: "C/2019 U5 (PanSTARRS)", dataType: 'category' })
     *  @param { xAxisRefs } Object that contains the current xAxis[0] information
     *                          (e.g. { index: 0, name: "iso_date_mid", displayName: 'date' dataType: 'time' })
     *  @param { yAxisRefs } Object that contains the series information
     *                          (e.g. { index: 0, name: "mag", displayName: "magnitude", dataType: 'category', errorName: 'mag_err' })
     * */ #createSeriesCard(fieldName, selectedSeries, xAxisRefs, yAxisRefs) {
        //-- Load this seriesCard to seriesArea
        let seriesArea = this.#seriesArea;
        const seriesName = selectedSeries.name;
        let seriesCard = (0, _mainJs.GM).HF.createNewDiv(fieldName + "-" + seriesName, "", [
            "series-card-wrapper"
        ], [], [], "");
        seriesArea.appendChild(seriesCard);
        //-- Create seriesCard header
        let header = (0, _mainJs.GM).HF.createNewDiv("", "", [
            "series-card-header"
        ], [], [], "");
        let headerText = (0, _mainJs.GM).HF.createNewSpan("", seriesName, [
            "series-name"
        ], [], selectedSeries.displayName);
        let seriesDataType = (0, _mainJs.GM).HF.createNewTextInput("", "", [
            "data-type"
        ], [], "hidden", selectedSeries.dataType);
        let removeBtn = (0, _mainJs.GM).HF.createNewIMG("", "", "./images/icons/delete-icon.png", [
            "remove-button",
            "button"
        ], [], "");
        header.appendChild(headerText);
        header.appendChild(seriesDataType);
        header.appendChild(removeBtn);
        seriesCard.appendChild(header);
        //-- Create removeFunction for this seriesCard
        this.#removeSeriesCardFunction(removeBtn);
        let seriesBody = (0, _mainJs.GM).HF.createNewDiv("", "", [
            "series-card-body"
        ], [], [], "");
        //-- Create series label input
        let labelWrapper = (0, _mainJs.GM).HF.createNewDiv("", "", [
            "label-wrapper",
            "series-card-element"
        ], [], [], "");
        let labelText = (0, _mainJs.GM).HF.createNewSpan("", "", [
            "label-text"
        ], [], "Label Name: ");
        let label = (0, _mainJs.GM).HF.createNewTextInput("", "", [
            "label-input"
        ], [], "text", false);
        label.value = selectedSeries.displayName;
        labelWrapper.appendChild(labelText);
        labelWrapper.appendChild(label);
        seriesBody.appendChild(labelWrapper);
        //-- Create xAxisIndex dropdown
        let xAxisIndexVals = xAxisRefs.map((xAxisRef)=>{
            return xAxisRef.index;
        });
        let xAxisIndexNames = xAxisRefs.map((xAxisRef)=>{
            return xAxisRef.name;
        });
        let xAxisIndexDDWrapper = (0, _mainJs.GM).HF.createNewDiv("", "", [
            "xaxis-index-dropdown-wrapper",
            "series-card-element"
        ], [], [], "");
        let xAxisIndexLabel = (0, _mainJs.GM).HF.createNewSpan("", "", [
            "xaxis-index-label"
        ], [], "X Axis:");
        let xAxisIndexDropdown = (0, _mainJs.GM).HF.createNewSelect("", "", [
            "xaxis-index-dropdown"
        ], [], xAxisIndexVals, xAxisIndexNames);
        xAxisIndexDDWrapper.appendChild(xAxisIndexLabel);
        xAxisIndexDDWrapper.appendChild(xAxisIndexDropdown);
        seriesBody.appendChild(xAxisIndexDDWrapper);
        //-- Create yAxisIndex dropdown
        let yAxisIndexVals = yAxisRefs.map((yAxisRef)=>{
            return yAxisRef.index;
        });
        let yAxisIndexNames = yAxisRefs.map((yAxisRef)=>{
            return yAxisRef.name;
        });
        let yAxisIndexDDWrapper = (0, _mainJs.GM).HF.createNewDiv("", "", [
            "yaxis-index-dropdown-wrapper",
            "series-card-element"
        ], [], [], "");
        let yAxisIndexLabel = (0, _mainJs.GM).HF.createNewSpan("", "", [
            "yaxis-index-label"
        ], [], "Y Axis:");
        let yAxisIndexDropdown = (0, _mainJs.GM).HF.createNewSelect("", "", [
            "yaxis-index-dropdown"
        ], [], yAxisIndexVals, yAxisIndexNames);
        yAxisIndexDDWrapper.appendChild(yAxisIndexLabel);
        yAxisIndexDDWrapper.appendChild(yAxisIndexDropdown);
        seriesBody.appendChild(yAxisIndexDDWrapper);
        //-- Create error dropdown (if any)
        var errorVals = [
            "none",
            yAxisRefs[0].errorName
        ];
        var errorNames = [
            "-- None --",
            yAxisRefs[0].errorName
        ];
        let errorDDWrapper = (0, _mainJs.GM).HF.createNewDiv("", "", [
            "error-dropdown-wrapper",
            "series-card-element"
        ], [], [], "");
        let errorLabel = (0, _mainJs.GM).HF.createNewSpan("", "", [
            "error-label"
        ], [], "Error: ");
        let errorDropdown = (0, _mainJs.GM).HF.createNewSelect("", "", [
            "error-dropdown"
        ], [], errorVals, errorNames);
        errorDDWrapper.appendChild(errorLabel);
        errorDDWrapper.appendChild(errorDropdown);
        seriesBody.appendChild(errorDDWrapper);
        //-- Create data point Symbols dropdown
        let datapointSymbolsDDWrapper = (0, _mainJs.GM).HF.createNewDiv("", "", [
            "symbols-dropdown-wrapper",
            "series-card-element"
        ], [], [], "");
        let datapointSymbolsOptions = [
            "circle",
            "rect",
            "roundRect",
            "triangle",
            "diamond",
            "pin",
            "pin",
            "arrow"
        ];
        let datapointSymbolsLabel = (0, _mainJs.GM).HF.createNewSpan("", "", [
            "symbols-label"
        ], [], "Symbols: ");
        let datapointSymbolsDropdown = (0, _mainJs.GM).HF.createNewSelect("", "", [
            "symbols-dropdown"
        ], [], datapointSymbolsOptions, datapointSymbolsOptions);
        // select circle as default
        datapointSymbolsDropdown.selectedIndex = 0;
        datapointSymbolsDDWrapper.appendChild(datapointSymbolsLabel);
        datapointSymbolsDDWrapper.appendChild(datapointSymbolsDropdown);
        seriesBody.appendChild(datapointSymbolsDDWrapper);
        //-- Create data point Size range input (0 - 50)
        let datapointSizeRange = (0, _mainJs.GM).HF.createNewRangeInputComponent("", "", [
            "symbols-size-range-wrapper",
            "series-card-element"
        ], [], "Symbol Size: ", 0, 50, 1, 5);
        seriesBody.appendChild(datapointSizeRange);
        //-- Create data point Label options
        // show: checkbox
        // position: dropdown
        seriesCard.appendChild(seriesBody);
        return seriesCard;
    }
    //-- Removes a seriesCard
    #removeSeriesCardFunction(button) {
        button.addEventListener("click", (e)=>{
            console.log(e.target);
            let seriesArea = e.target.closest(".series-card-area");
            let seriesCard = e.target.closest(".series-card-wrapper");
            seriesArea.removeChild(seriesCard);
        });
    }
    /*
    #updateAxisReferenceOptions(traceCard) {
        console.log(traceCard);
        // get xtraceArea
        var axisWrapper = traceCard.closest('.chart-inspector-wrapper');
        console.log(axisWrapper);
        var xAxisTraceArea = axisWrapper.querySelector('#xAxis .trace-area');
        var yAxisTraceArea = axisWrapper.querySelector('#yAxis .trace-area');

        var xTraces = xAxisTraceArea.querySelectorAll('.trace-card-wrapper');
        var yTraces = yAxisTraceArea.querySelectorAll('.trace-card-wrapper');

        var xAxisIndexOptions = [];
        var yAxisIndexOptions = [];
        xTraces.forEach((x, i) => { xAxisIndexOptions.push({ name: x.getAttribute('id'), value: i }) });
        yTraces.forEach((y, i) => { yAxisIndexOptions.push({ name: y.getAttribute('id'), value: i }) });

        var xAxisDD = traceCard.querySelector('.xaxis-index-dropdown-wrapper .xaxis-index-dropdown');
        var yAxisDD = traceCard.querySelector('.yaxis-index-dropdown-wrapper .yaxis-index-dropdown');

        GM.HF.updateSelectOptions(xAxisDD, xAxisIndexOptions);
        GM.HF.updateSelectOptions(yAxisDD, yAxisIndexOptions);
    }*/ getCard() {
        return {
            card: this,
            wrapper: this.#wrapper,
            content: this.#seriesContent,
            seriesDropdowns: this.#seriesDropdowns,
            seriesArea: this.#seriesArea
        };
    }
}

},{"../../../main.js":"1SICI","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3gLJq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ObjectSearchCard", ()=>ObjectSearchCard);
var _mainJs = require("../../../main.js");
class ObjectSearchCard {
    #wrapper;
    #searchBar;
    #text;
    #dropdown;
    constructor(objects){
        this.#createElements(objects);
        this.#buildCard();
    }
    #createElements(objects) {
        this.#createWrapper();
        this.#createTextArea();
        this.#createSearchBar();
        this.#createDropdown(objects);
    }
    #buildCard() {
        this.#wrapper.appendChild(this.#text);
        this.#wrapper.appendChild(this.#searchBar);
        this.#wrapper.appendChild(this.#dropdown);
    }
    #createTextArea() {
        this.#text = (0, _mainJs.GM).HF.createNewParagraph("", "", [], [], "Select Object");
    }
    #createWrapper() {
        this.#wrapper = (0, _mainJs.GM).HF.createNewDiv("", "", [
            "inspector-card-objects-search-wrapper"
        ], [], [], "");
    }
    #createSearchBar() {
        this.#searchBar = (0, _mainJs.GM).HF.createNewTextInput("", "", [
            "inspector-card-objects-search-bar"
        ], []);
    }
    #createDropdown(objects) {
        this.#dropdown = (0, _mainJs.GM).HF.createNewSelect("", "", [
            "inspector-card-objects-search-dropdown"
        ], [], Object.keys(objects), Object.values(objects));
    }
    getCard() {
        return {
            wrapper: this.#wrapper,
            searchbar: this.#searchBar,
            dropdown: this.#dropdown
        };
    }
}

},{"../../../main.js":"1SICI","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5Sp6o":[function(require,module,exports) {
/*************************************************************
 * COPYRIGHT University of Hawaii - COMA Project / Lava Lab  *
 * Author: James Hutchison                                   *
 * Date: 5/5/2022                                            *
 *************************************************************/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "KeyValueCard", ()=>KeyValueCard);
var _mainJs = require("../../../main.js");
class KeyValueCard {
    #data;
    constructor(key, values){
        this.#data = new Map();
        this.#storeData("key", key);
        this.#storeData("values", values);
        this.#storeData("bodyElements", []);
        this.#createCardElements();
        this.#appendCardElements();
    }
    #createCardElements() {
        this.#createCardWrapper();
        this.#createCardHeader();
        this.#createCardBody();
    }
    #appendCardElements() {
        this.#data.get("wrapperElement").appendChild(this.#data.get("headerElement"));
        const bodyElements = this.#data.get("bodyElements");
        bodyElements.forEach((element)=>this.#data.get("wrapperElement").appendChild(element));
    }
    #createCardWrapper() {
        const wrapper = (0, _mainJs.GM).HF.createNewDiv("", "", [
            "static-key-value-card-wrapper"
        ], [], [], "");
        this.#storeData("wrapperElement", wrapper);
    }
    #createCardHeader() {
        const header = (0, _mainJs.GM).HF.createNewDiv("", "", [
            "static-key-value-card-header"
        ], [], [], "");
        header.innerHTML = this.#data.get("key");
        this.#storeData("headerElement", header);
    }
    #createCardBody() {
        const values = this.#data.get("values");
        values.forEach((value)=>{
            if (typeof value === "object") this.#data.get("bodyElements").push(value);
            else this.#data.get("bodyElements").push((0, _mainJs.GM).HF.createNewParagraph("", "", [
                "static-key-value-card-body"
            ], [], value));
        });
    }
    #storeData(key, value) {
        this.#data.set(key, value);
    }
    updateValue(newValue) {
        this.#storeData("values", [
            newValue
        ]);
        this.#data.get("bodyElements")[0].innerHTML = newValue;
    }
    getCard = ()=>this.#data.get("wrapperElement");
}

},{"../../../main.js":"1SICI","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ekKGP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Inspector", ()=>(0, _inspectorJs.Inspector));
parcelHelpers.export(exports, "InspectorCard", ()=>(0, _inspectorCardJs.InspectorCard));
parcelHelpers.export(exports, "IncludeColumnCard", ()=>(0, _includeColumnCardJs.IncludeColumnCard));
var _inspectorJs = require("./inspector.js");
var _inspectorCardJs = require("./inspectorCard.js");
var _includeColumnCardJs = require("./inspectorCardComponents/includeColumnCard.js");

},{"./inspector.js":"4OqDf","./inspectorCard.js":"l43aQ","./inspectorCardComponents/includeColumnCard.js":"7LSD4","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4OqDf":[function(require,module,exports) {
/*************************************************************
 * COPYRIGHT University of Hawaii - COMA Project / Lava Lab  *
 * Author: James Hutchison                                   *
 * Date: 5/5/2022                                            *
 *************************************************************/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Inspector", ()=>Inspector);
var _indexJs = require("../../communication/index.js");
var _mainJs = require("../../main.js");
var _indexJs1 = require("../../htmlGeneration/index.js");
class Inspector {
    publisher;
    subscriber;
    #currentModuleKey;
    #moduleCards;
    constructor(){
        this.domNodes = {};
        this.domNodes.container = document.querySelector("#inspector");
        this.publisher = new (0, _indexJs.Publisher)();
        this.#currentModuleKey;
        this.contentArea;
        this.#moduleCards = new Map();
        this.HF = new (0, _indexJs1.HTMLFactory)();
    }
    /** --- PUBLIC ---
     * This function is called by the global manager when the application starts. */ createInspectorDomNode() {
        this.#createInspectorModuleCardContainer();
    }
    /** --- PRIVATE ---
     * Creates the HTML element and stores it in the domNodes object. */ #createInspectorModuleCardContainer() {
        this.domNodes.moduleCardContainer = (0, _mainJs.GM).HF.createNewDiv("inspector-module-card-container", "inspector-card-container", [
            "inspector-card-container"
        ], [], [], "");
        this.domNodes.container.appendChild(this.domNodes.moduleCardContainer);
    }
    /** --- PUBLIC ---
     * Gets an inspector card linked to the module whos id is passed
     * @param {Number} id the key of the module linked to the inspector card
     * @returns a module card from the map
     */ getCard(id) {
        return this.#moduleCards.get(id);
    }
    /** --- PUBLIC ---
     * Called by the Hub when a new module is generated and added to the environment
     * @param {Number} key The id of the module
     * @param {HTML element} card the HTML element of the inspector card
     */ addModuleCard(key, card) {
        console.log(card);
        this.domNodes.moduleCardContainer.append(card);
        this.#moduleCards.set(key, card);
    }
    /** --- PUBLIC ---
     * Maximizes a single card that matches the key, hides all other elements
     * @param {Number} cardId the module mey to identify the inspector card 
     */ maximizeCard(cardId) {
        this.#moduleCards.forEach((card, key)=>{
            if (key !== cardId) card.style.display = "none";
            else card.style.display = "flex";
        });
    }
    /** --- PUBLIC ---
     * Minimizes all Cards */ minimizeCards() {
        this.#moduleCards.forEach((card)=>card.style.display = "flex");
    }
    /** --- PUBLIC ---
     * Sets remote dropedown options for a field dropdown */ setRemoteDropdownOptions(moduleKey, fieldWrapperId, options) {
        console.log(fieldWrapperId);
        const fieldWrapper = document.querySelector(`#search-form-${moduleKey} #${fieldWrapperId}`);
        console.log(fieldWrapper);
        var dropdown = fieldWrapper.querySelector("select");
        if (dropdown) {
            this.HF.updateSelectOptions(dropdown, options);
            return true;
        }
        return false;
    }
    /** --- PUBLIC ---
     * Sets remote objects suggestions for the search form object field */ setRemoteObjectsSuggestions(moduleKey, fieldWrapperId, data) {
        let success = false;
        try {
            // moduleKey, result
            const fieldWrapper = document.getElementById(fieldWrapperId);
            let resultContainer = fieldWrapper.querySelector(".typeahead-result-container");
            resultContainer.innerHTML = "";
            // get responseContainer
            resultContainer.style.display = "block";
            // append suggestions elements to the resultContainer
            data.forEach((suggestion)=>{
                console.log(suggestion);
                let suggestionElement = this.HF.createNewDiv("", "", [
                    "object-suggestion"
                ], [], [], suggestion.ui_name);
                //suggestionElement.textContent = suggestion.ui_name;
                suggestionElement.addEventListener("click", ()=>{
                    // When a suggestion is clicked, populate the input with the suggestion
                    fieldWrapper.querySelector("input").setAttribute("object-id", suggestion.id);
                    fieldWrapper.querySelector("input").value = suggestion.ui_name;
                    resultContainer.style.display = "none";
                });
                resultContainer.appendChild(suggestionElement);
            });
            success = true;
        } catch (e) {
            console.log(e);
            console.log("ERROR Setting Remote Objects Suggestions -- inspector 91");
        }
        // append result list to resultContainer
        return success;
    }
    #sendMessage = (msg)=>{
        this.publisher.publishMessage(msg);
    };
}

},{"../../communication/index.js":"eT70M","../../main.js":"1SICI","../../htmlGeneration/index.js":"f3jdF","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7LSD4":[function(require,module,exports) {
/*************************************************************
 * COPYRIGHT University of Hawaii - COMA Project / Lava Lab  *
 * Author: James Hutchison / Mai Abe                         *
 * Date: 5/5/2022                                            *
 *************************************************************/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "IncludeColumnCard", ()=>IncludeColumnCard);
var _mainJs = require("../../../main.js");
class IncludeColumnCard {
    #wrapper;
    // card column titles
    // card inputs
    #bodyElements;
    #viewButton;
    // params: fields object includes the { fieldName, displayName, units (temp) }
    constructor(moduleKey, columnHeaders, buttonName){
        this.#wrapper = (0, _mainJs.GM).HF.createNewDiv("include-column-card-" + moduleKey, "", [
            "include-column-card"
        ], [], [], "");
        //this.#appendChildren(this.#wrapper, header, checkboxArray);
        this.#createElements(moduleKey, columnHeaders, buttonName);
        this.#buildCard();
    }
    #createElements(moduleKey, columnHeaders, buttonName) {
        this.#createFieldsInputTable(columnHeaders);
        // create button
        this.#createViewButton(moduleKey, buttonName);
    }
    #buildCard() {
        // append header, column titles, input fields and viewButton to the table
        const header = (0, _mainJs.GM).HF.createNewH3("", "", [
            "include-column-card-header"
        ], [], "Include Checked Columns");
        this.#wrapper.appendChild(header);
        this.#wrapper.appendChild(this.#bodyElements);
        this.#wrapper.appendChild(this.#viewButton);
    }
    #createFieldsInputTable(columnHeaders) {
        const bodyWrapper = (0, _mainJs.GM).HF.createNewDiv("", "", [
            "body-wrapper"
        ], [], [], "");
        const columnTitleWrapper = (0, _mainJs.GM).HF.createNewDiv("", "", [
            "title-wrapper"
        ], [], [], "");
        // create column title
        //const columnTitle_Include = GM.HF.createNewH3('', '', ['include-column-card-title'], [{ style: 'width', value: '23.33%' }, { style: 'text-align', value: 'center' }], 'Include');
        const columnTitle_Columns = (0, _mainJs.GM).HF.createNewH3("", "", [
            "title"
        ], [
            {
                style: "width",
                value: "80%"
            }
        ], "Include columns");
        //const columnTitle_Units = GM.HF.createNewH3('', '', ['title'], [{ style: 'width', value: '20%' }], 'Units');
        //columnTitleWrapper.appendChild(columnTitle_Include);
        columnTitleWrapper.appendChild(columnTitle_Columns);
        //columnTitleWrapper.appendChild(columnTitle_Units);
        bodyWrapper.appendChild(columnTitleWrapper);
        const includeColumnsWrapper = (0, _mainJs.GM).HF.createNewDiv("", "", [
            "include-columns-wrapper"
        ], [], [], "");
        bodyWrapper.appendChild(includeColumnsWrapper);
        /*columnHeaders = [
            { fieldName: 'test1', dataType: 'value' },
            { fieldName: 'test2', data: [{ fieldName: 'testtest1', dataType: 'value' }, { fieldName: 'testtest2', dataType: 'category' }, { fieldName: 'TEST', data: [{ fieldName: 'lalala', dataType: 'value' }, { fieldName: 'lalala', dataType: 'category' }] }] },
            { fieldName: 'test2', data: [{ fieldName: 'testtest1', dataType: 'value' }, { fieldName: 'testtest2', dataType: 'category' }, { fieldName: 'TEST', data: [{ fieldName: 'lalala', dataType: 'value' }, { fieldName: 'lalala', dataType: 'category' }] }] },
            { fieldName: 'test4', dataType: 'value' },
        ];*/ this.#createColumnGroups(columnHeaders, includeColumnsWrapper);
        // create field elements
        /*columnHeaders.forEach(columnHeader => {
            var column = columnHeader;
            if (column.hasOwnProperty('data')) {
                var columnData = column.data;
                var columnGroupWrapper = GM.HF.createNewDiv('', '', ['column-group-wrapper'], [], [], '');
                var columnDataLabel = GM.HF.createNewLabel('', '', `column-group-${column.fieldName}`, ['column-group-label'], [], column.fieldName)
                var columnDataWrapper = GM.HF.createNewDiv(`column-group-${column.fieldName}`, `${column.fieldName}`, ['column-group'], [], [], '');
                columnGroupWrapper.appendChild(columnDataLabel);
                columnData.forEach(cd => {
                    column = cd;
                    var columnInputWrapper = this.#createFieldElements(column);
                    columnDataWrapper.appendChild(columnInputWrapper);
                });
                columnGroupWrapper.appendChild(columnDataWrapper);
                bodyWrapper.appendChild(columnGroupWrapper);
            }
            else {
                var columnInputWrapper = this.#createFieldElements(column);
                bodyWrapper.appendChild(columnInputWrapper);
            }
        });*/ this.#bodyElements = bodyWrapper;
    }
    #createColumnGroups(columnHeaders, columnWrapper) {
        columnHeaders.forEach((columnHeader)=>{
            if (columnHeader.hasOwnProperty("data")) {
                var columnGroupWrapper = (0, _mainJs.GM).HF.createNewDiv("", "", [
                    "column-group-wrapper"
                ], [], [], "");
                var columnDataLabel = (0, _mainJs.GM).HF.createNewLabel("", "", `column-group-${columnHeader.fieldName}`, [
                    "column-group-label"
                ], [], columnHeader.fieldName);
                var columnDataWrapper = (0, _mainJs.GM).HF.createNewDiv(`column-group-${columnHeader.fieldName}`, `${columnHeader.fieldName}`, [
                    "column-group"
                ], [], [], "");
                columnGroupWrapper.appendChild(columnDataLabel);
                columnGroupWrapper.appendChild(columnDataWrapper);
                columnWrapper.appendChild(columnGroupWrapper);
                var nestedColumnHeaders = columnHeader.data;
                this.#createColumnGroups(nestedColumnHeaders, columnDataWrapper);
            } else {
                var columnInputWrapper = this.#createFieldElements(columnHeader);
                columnWrapper.appendChild(columnInputWrapper);
            }
        });
    }
    #createFieldElements(column) {
        const columnInputWrapper = (0, _mainJs.GM).HF.createNewDiv("", "", [
            "column-wrapper"
        ], [], [], "");
        var checkbox = (0, _mainJs.GM).HF.createNewCheckbox("checkbox-" + column.fieldName, column.fieldName, [
            "include-column-checkbox"
        ], [], column.fieldName, column.fieldName, true);
        var unitsWrapper = (0, _mainJs.GM).HF.createNewDiv("", "", [
            "dropdown-wrapper"
        ], [], [], "");
        if (column.units) {
            var unitsDropdown = (0, _mainJs.GM).HF.createNewSelect("dropdown-" + column.fieldName, column.fieldName, [
                "include-column-dropdown"
            ], [], Object.keys(column.units), Object.keys(column.units));
            unitsWrapper.appendChild(unitsDropdown);
        }
        columnInputWrapper.appendChild(checkbox.wrapper);
        columnInputWrapper.appendChild(unitsWrapper);
        return columnInputWrapper;
    }
    #createViewButton(moduleKey, buttonName) {
        const viewButtonWrapper = (0, _mainJs.GM).HF.createNewDiv("", "", [
            "view-button-wrapper"
        ], [], [], "");
        const viewButton = (0, _mainJs.GM).HF.createNewButton("view-button-" + moduleKey, "", [
            "btn",
            "view-btn"
        ], [], "button", buttonName, false);
        viewButtonWrapper.appendChild(viewButton);
        this.#viewButton = viewButtonWrapper;
    }
    // add eventListener for view button
    getCard() {
        return {
            wrapper: this.#wrapper,
            bodyElements: this.#bodyElements,
            viewButton: this.#viewButton
        };
    }
}

},{"../../../main.js":"1SICI","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3zvzN":[function(require,module,exports) {
/*************************************************************
 * COPYRIGHT University of Hawaii - COMA Project / Lava Lab  *
 * Author: James Hutchison                                   *
 * Date: 5/5/2022                                            *
 *************************************************************/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CompositeDetailsCard", ()=>CompositeDetailsCard);
var _mainJs = require("../../../main.js");
class CompositeDetailsCard {
    #wrapper;
    #header;
    #nodesRow;
    #saveButton;
    constructor(groupData, saveModuleCallback){
        this.#wrapper = this.createWrapperElement();
        this.#header = this.createHeader();
        this.#nodesRow = this.createNodesRow(groupData.nodes);
        this.#saveButton = this.createSaveButton();
        this.addSaveEventListener(saveModuleCallback);
        this.buildCard();
    }
    createWrapperElement = ()=>{
        return (0, _mainJs.GM).HF.createNewDiv("", "", [
            "composite-details-card"
        ], [], [], "");
    };
    createHeader() {
        const header = (0, _mainJs.GM).HF.createNewDiv("", "", [
            "composite-details-card-header"
        ], [], [], "");
        header.appendChild((0, _mainJs.GM).HF.createNewParagraph("", "", [], [], "Composite Details"));
        return header;
    }
    createNodesRow(nodes) {
        const div = (0, _mainJs.GM).HF.createNewDiv("", "", [], [], [], "");
        const left = (0, _mainJs.GM).HF.createNewParagraph("", "", [], [], "Nodes: ");
        let nodesString = "";
        nodes.forEach((node, index)=>{
            if (index === nodes.length - 1) nodesString += `${node.key}`;
            else nodesString += `${node.key}, `;
        });
        const right = (0, _mainJs.GM).HF.createNewParagraph("", "", [], [], nodesString);
        div.appendChild(left);
        div.appendChild(right);
        return div;
    }
    createSaveButton() {
        return (0, _mainJs.GM).HF.createNewButton("", "", [], [], "button", "Save");
    }
    addSaveEventListener(callback) {
        this.#saveButton.addEventListener("click", callback);
    }
    buildCard() {
        this.#wrapper.appendChild(this.#header);
        this.#wrapper.appendChild(this.#nodesRow);
        this.#wrapper.appendChild(this.#saveButton);
    }
    getCard = ()=>this.#wrapper;
}

},{"../../../main.js":"1SICI","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5JXPH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MinMaxFilter", ()=>MinMaxFilter);
var _mainJs = require("../../../main.js");
class MinMaxFilter {
    dataTable;
    constructor(label, min, max, dataType, dataFormat, changeDataTypeFunction){
        this.dataTable = new Map();
        this.#createWrapperElement();
        this.dataTable.set("isFlipped", false); // If true, max goes on the left, min goes on the right
        this.dataTable.set("label", label); // Label identifying the name of the column in the data table
        this.dataTable.set("dataType", dataType); // String identifying the data type
        this.dataTable.set("dataFormat", dataFormat); // String identifying the data format (ie dd/mm/yyyy or int or float etc)
        this.dataTable.set("min", min); // Min value (set by the metadata on creation)
        this.dataTable.set("max", max); // Max value (set by the metadata on creation)
        this.dataTable.set("lastValidLeft", min); // The current minimum (set by the user in the text inputs or the range slider)
        this.dataTable.set("lastValidRight", max); // The current max (set by the user in the text inputs or range slider)
        this.#buildCard();
        this.changeDataTypeFunction = changeDataTypeFunction; // This function is linked to the module and data manager for when user wants to change an automatically assigned data type
    }
    /** --- PRIVATE ---
     * Creates all elements of the card
     */ #buildCard() {
        // Date datatypes need to be converted into a numerical value before storing.
        if (this.dataTable.get("dataType") === "date") {
            this.dataTable.set("min", this.convertDateStringToMilliseconds(this.dataTable.get("min")));
            this.dataTable.set("max", this.convertDateStringToMilliseconds(this.dataTable.get("max")));
            this.dataTable.set("lastValidLeft", this.convertMillisecondsToString(this.dataTable.get("min")));
            this.dataTable.set("lastValidRight", this.convertDateStringToMilliseconds(this.dataTable.get("max")));
        }
        const max = this.dataTable.get("max");
        const min = this.dataTable.get("min");
        const label = this.dataTable.get("label");
        this.dataTable.set("range", max - min);
        if (this.dataTable.get("dataType") === "date") this.#createFirstLevel(label, this.convertMillisecondsToString(min), this.convertMillisecondsToString(max));
        else this.#createFirstLevel(label, min, max);
        this.#createRangeSlider();
        this.#createOptionsMenu();
        this.#setInputListeners();
    }
    #createWrapperElement() {
        const wrapper = (0, _mainJs.GM).HF.createNewDiv("", "", [
            "min-max-filter-wrapper"
        ], [], [], "");
        this.dataTable.set("wrapper", wrapper);
    }
    #createRangeSlider() {
        // The slider gets two callback functions. One for when the slider is changed, and one for when the user changes some value in the input
        // And the slider must be changed to match.
        const sliderBar = (0, _mainJs.GM).HF.createNewRangeSlider("", "", [], [], this.sliderCallback.bind(this), this.#setUpdateSliderFunction.bind(this));
        const sliderWrapper = (0, _mainJs.GM).HF.createNewDiv("", "", [
            "slider-wrapper"
        ], [], [], "");
        this.dataTable.get("wrapper").appendChild(sliderWrapper).appendChild(sliderBar);
    }
    /** --- PRIVATE ---
     * Creates the first level of the card. (include chekbox, min label and input box, max label and input box.)
     * @param {*} labelText 
     * @param {*} min 
     * @param {*} max 
     */ #createFirstLevel(labelText, min, max) {
        const wrapper = (0, _mainJs.GM).HF.createNewDiv("", "", [
            "min-max-first-level-wrapper"
        ], [], [], "");
        const labelWrapper = (0, _mainJs.GM).HF.createNewDiv("", "", [
            "min-max-label-wrapper"
        ], [], [], "");
        const label = (0, _mainJs.GM).HF.createNewParagraph("", "", [
            "min-max-label"
        ], [], labelText);
        const labelCheckbox = (0, _mainJs.GM).HF.createNewCheckbox("", "", [], [], "include-row", "Include", true);
        const leftInputWrapper = (0, _mainJs.GM).HF.createNewDiv("", "", [
            "min-max-input-wrapper"
        ], [], [], "");
        const rightInputWrapper = (0, _mainJs.GM).HF.createNewDiv("", "", [
            "min-max-input-wrapper"
        ], [], [], "");
        const dotMenuInputWrapper = (0, _mainJs.GM).HF.createNewDiv("", "", [
            "min-max-input-wrapper",
            "min-max-button"
        ], [], [], "");
        const leftInputLabel = (0, _mainJs.GM).HF.createNewParagraph("", "", [], [], "Min");
        const leftInput = (0, _mainJs.GM).HF.createNewTextInput("", "", [], [], "text");
        leftInput.value = min; // Set initial Min value in the input
        const rightInputLabel = (0, _mainJs.GM).HF.createNewParagraph("", "", [], [], "Max");
        const rightInput = (0, _mainJs.GM).HF.createNewTextInput("", "", [], [], "text");
        rightInput.value = max; // Set initial max value in the input
        this.dataTable.get("wrapper").appendChild(wrapper);
        // the 3 dots menu is not currently in use but is likely a good idea to hide options
        const threeDotMenuButton = (0, _mainJs.GM).HF.createNewIMG("", "", "../../../images/icons/three-dots.png", [], [], "");
        dotMenuInputWrapper.appendChild(threeDotMenuButton);
        wrapper.appendChild(labelWrapper);
        wrapper.appendChild(leftInputWrapper);
        wrapper.appendChild(rightInputWrapper);
        wrapper.appendChild(dotMenuInputWrapper);
        labelWrapper.appendChild(label);
        labelWrapper.appendChild(labelCheckbox.wrapper);
        leftInputWrapper.appendChild(leftInputLabel);
        leftInputWrapper.appendChild(leftInput);
        rightInputWrapper.appendChild(rightInputLabel);
        rightInputWrapper.appendChild(rightInput);
        // Save the elements
        this.dataTable.set("Min Input Wrapper", leftInputWrapper);
        this.dataTable.set("Max Input Wrapper", rightInputWrapper);
        this.dataTable.set("Min Input Label", leftInputLabel);
        this.dataTable.set("Max Input Label", rightInputLabel);
        this.dataTable.set("Min Input", leftInput);
        this.dataTable.set("Max Input", rightInput);
    }
    /** --- PRIVATE ---
     * The options menu is the bottom row. In the future it is probably best to hide this and then
     * show it when the user clicks on the 3 buttons.
     */ #createOptionsMenu() {
        const wrapper = (0, _mainJs.GM).HF.createNewDiv("", "", [
            "min-max-options-wrapper"
        ], [], [], "");
        const flipButton = (0, _mainJs.GM).HF.createNewButton("", "", [
            "min-max-flip-button"
        ], [], "button", "Flip Min/Max");
        const ddWrapper = (0, _mainJs.GM).HF.createNewDiv("", "", [
            "min-max-dropdown-wrapper"
        ], [], [], "");
        const changeTypeLabel = (0, _mainJs.GM).HF.createNewParagraph("", "", [], [], "Change Data Type");
        const changeTypeDropdown = (0, _mainJs.GM).HF.createNewSelect("", "", [], [], [
            "number",
            "date",
            "category"
        ], [
            "Number",
            "Date",
            "Category"
        ]);
        ddWrapper.appendChild(changeTypeLabel);
        ddWrapper.appendChild(changeTypeDropdown);
        wrapper.appendChild(flipButton);
        wrapper.appendChild(ddWrapper);
        // Store these elements for easy access
        this.dataTable.get("wrapper").appendChild(wrapper);
        this.dataTable.set("flipButton", flipButton);
        this.dataTable.set("changeTypeDropdown", changeTypeDropdown);
    }
    #setInputListeners() {
        this.dataTable.get("Min Input").addEventListener("input", ()=>{
            this.updateRangeSlider();
        });
        this.dataTable.get("Max Input").addEventListener("input", ()=>{
            this.updateRangeSlider();
        });
        this.dataTable.get("Min Input").addEventListener("focusout", ()=>{
            if (this.isValueInput(this.dataTable.get("Min Input").value, "left")) this.dataTable.set("lastValidLeft", this.dataTable.get("Min Input").value);
            else this.dataTable.get("Min Input").value = this.dataTable.get("lastValidLeft");
            this.updateRangeSlider();
        });
        this.dataTable.get("Max Input").addEventListener("focusout", ()=>{
            if (this.isValueInput(this.dataTable.get("Max Input").value, "right")) this.dataTable.set("lastValidRight", this.dataTable.get("Max Input").value);
            else this.dataTable.get("Max Input").value = this.dataTable.get("lastValidRight");
            this.updateRangeSlider();
        });
        this.dataTable.get("changeTypeDropdown").addEventListener("change", this.changeDataType.bind(this));
        this.dataTable.get("flipButton").addEventListener("click", this.flipMinMax.bind(this));
    }
    /** --- PUBLIC ---
     * When the user changes a value in the input boxes, the range slider must be updated to reflect this change.
     * Find the percentage from bounds of the range and send it to the slider. */ updateRangeSlider() {
        if (this.isValueInput(this.dataTable.get("Min Input").value, "left") && this.isValueInput(this.dataTable.get("Max Input").value, "right")) {
            const min = Number(this.dataTable.get("Min Input").value);
            const max = Number(this.dataTable.get("Max Input").value);
            const minPercent = (min - Number(this.dataTable.get("min"))) / Number(this.dataTable.get("range"));
            const maxPercent = (max - Number(this.dataTable.get("min"))) / Number(this.dataTable.get("range"));
            this.dataTable.get("sliderUpdateFunction")(minPercent, maxPercent);
        }
    }
    /** --- PUBLIC ---
     * Callback attached to the flip min max button.
     * Sets the isFlipped flag and swaps the min and max inputs.
     * is Flipped tag is used to identify which value to update when the slider is changed.  */ flipMinMax() {
        this.dataTable.set("isFlipped", !this.dataTable.get("isFlipped"));
        if (this.dataTable.get("isFlipped")) this.#moveMaxLeft();
        else this.#moveMaxRight();
    }
    /** --- PRIVATE ---
     * When the min and max are flipped, the max input either gets moved to the rights side or the left side.
     */ #moveMaxRight() {
        this.dataTable.get("Max Input Wrapper").remove(); // Remove it and place it after the min
        this.dataTable.get("Min Input Wrapper").after(this.dataTable.get("Max Input Wrapper"));
        this.dataTable.get("Min Input Label").innerHTML = "Min";
        this.dataTable.get("Max Input Label").innerHTML = "Max";
    }
    /** --- PRIVATE ---
     * When the min and max are flipped, the max input either gets moved to the rights side or the left side.
     */ #moveMaxLeft() {
        this.dataTable.get("Min Input Wrapper").remove(); // Remove it and place it after the max
        this.dataTable.get("Max Input Wrapper").after(this.dataTable.get("Min Input Wrapper"));
        this.dataTable.get("Min Input Label").innerHTML = "Max";
        this.dataTable.get("Max Input Label").innerHTML = "Min";
    }
    /** --- PUBLIC ---
     * When the slider is moved, the slider passes the left percentage and right percentage of the slide balls from their respective endpoints.
     * This information is used to update the current min and max values.
     * @param {{left (number), right{number}}} sliderData decimal representing fraction of distance from the bounds of left and right */ sliderCallback(sliderData) {
        console.log(sliderData);
        const left = this.dataTable.get("isFlipped") ? sliderData.right : sliderData.left;
        const right = this.dataTable.get("isFlipped") ? sliderData.left : sliderData.right;
        let leftValue = this.#calcValue(left);
        let rightValue = this.#calcValue(right);
        this.dataTable.get("Min Input").value = leftValue;
        this.dataTable.get("Max Input").value = rightValue;
        this.dataTable.set("lastValidLeft", leftValue);
        this.dataTable.set("lastValidRight", rightValue);
    }
    /** --- PUBLIC ---
     * This is a callback bound to the changeDataType dropdown. It gets the new type from the dropdown.
     * This function is working but not totally finished. Currently there are only a few datatypes that can 
     * be switched. This function will notify the DataManager to change the data type if possible. More validation
     * is also needed on the DataManager end. Also, the dropdown does not currently update its value to the current type but 
     * always shows Number regardless. */ changeDataType() {
        const newType = this.dataTable.get("changeTypeDropdown").value;
        this.changeDataTypeFunction(this.dataTable.get("label"), this.dataTable.get("dataType"), newType, this.handleChangeDataTypeReturn.bind(this));
    }
    /** --- PUBLIC ---
     * Handles the return of a data type change. 
     * @param {
     * changeDataTypeFunction
     * dataFormat (string)
     * dataType (string)
     * max (string or number)
     * min (string or number)
     * name (string)} result */ handleChangeDataTypeReturn(result) {
        if (result.success) {
            const old = this.dataTable.get("dataType");
            this.dataTable.set("dataType", result.row.dataType.toLowerCase());
            if (old.toLowerCase() === "number") {
                if (this.dataTable.get("dataType") == "date") this.convertNumberToDate();
            } else if (old.toLowerCase() === "date") {
                if (this.dataTable.get("dataType") == "number") this.convertDateToNumber();
            }
        } else console.log("Unable To Convert Data");
    }
    convertNumberToDate() {
        this.dataTable.get("Min Input").value = this.convertMillisecondsToString(Number(this.dataTable.get("Min Input").value));
        this.dataTable.get("Max Input").value = this.convertMillisecondsToString(Number(this.dataTable.get("Max Input").value));
    }
    convertDateToNumber() {
        this.dataTable.get("Min Input").value = this.dataTable.get("lastValidLeft");
        this.dataTable.get("Max Input").value = this.dataTable.get("lastValidRight");
    }
    /** --- PUBLIC ---
     * Validates if the value is within the bounds of the range
     * @param {any} input 
     * @param {string} side left or right
     * @returns true if it is a valid value, false if not
     */ isValueInput(input, side) {
        if (side === "left") return Number(input) <= Number(this.dataTable.get("lastValidRight")) && Number(input) >= Number(this.dataTable.get("min"));
        else return Number(input) >= Number(this.dataTable.get("lastValidLeft")) && Number(input) <= Number(this.dataTable.get("max"));
    }
    /** --- PRIVATE---
     * Calculates the a value based on the position of the slider
     * @param {Number} percentage The percentage of the range
     * @returns the value
     */ #calcValue = (percentage)=>{
        const type = this.dataTable.get("dataType");
        if (type === "date") {
            let val = Number(this.dataTable.get("range")) * Number(percentage) + Number(this.dataTable.get("min"));
            if (this.dataTable.get("isFlipped")) val = Number(this.dataTable.get("max") - Number(this.dataTable.get("range")) * Number(percentage));
            return this.convertMillisecondsToString(val);
        } else {
            let val = Number(this.dataTable.get("range")) * Number(percentage) + Number(this.dataTable.get("min"));
            if (this.dataTable.get("isFlipped")) val = Number(this.dataTable.get("max") - Number(this.dataTable.get("range")) * Number(percentage));
            // If a datatype is set, make the adjustment
            switch(type){
                case "int":
                    return parseInt(val);
                case "number":
                    return Number(val).toFixed(2);
                case "float":
                    return parseFloat(val).toFixed(3);
                case "double":
                    return parseDouble(val).toFixed(5);
                default:
                    return Number(val).toFixed(2);
            }
        }
    };
    convertDateStringToMilliseconds = (string)=>new Date(string).getTime();
    convertMillisecondsToString(milliseconds) {
        const conversion = new Date(milliseconds);
        return `${conversion.getMonth() + 1}/${conversion.getDate()}/${conversion.getFullYear()}`;
    }
    /** --- PRIVATE ---
     * Stores the update slider function in the data table
     * @param {function} fn the function to store
     */ #setUpdateSliderFunction(fn) {
        this.dataTable.set("sliderUpdateFunction", fn);
    }
    getHTML = ()=>this.dataTable.get("wrapper");
    getData = ()=>this.dataTable;
}

},{"../../../main.js":"1SICI","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"il6hg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Creates Form elements
 * @param {formName Object} formName contains the 'name' of the form used as id of HTML elements in the form and
 *                                            the 'className'' of the form used as the class name of the HTML elements in the form
 * @param {fields Object} fields contains the 'type' of the field HTML element, 'labelName' for the label of the field, and
 *                                            the 'fieldName' as the name of the field used as an id of the HTML element
 * */ parcelHelpers.export(exports, "FormCard", ()=>FormCard);
var _mainJs = require("../../../main.js");
var _minMaxFilterJs = require("./minMaxFilter.js");
var _rangePluginJs = require("flatpickr/dist/plugins/rangePlugin.js");
var _flatpickr = require("flatpickr");
var _flatpickrDefault = parcelHelpers.interopDefault(_flatpickr);
class FormCard {
    #wrapper;
    #formName;
    #form;
    #submitButton;
    constructor(moduleKey, formName, fields){
        this.#formName = formName.name;
        this.#createElements(moduleKey, formName, fields);
        this.#buildCard();
    }
    #createElements(moduleKey, formName, fields) {
        this.#createWrapper();
        this.#createForm(moduleKey, formName, fields);
        this.#createSubmitButton(formName);
    }
    #buildCard() {
        this.#wrapper.appendChild(this.#form);
        this.#wrapper.appendChild(this.#submitButton);
    }
    #createWrapper() {
        this.#wrapper = (0, _mainJs.GM).HF.createNewDiv("", "", [
            "form-wrapper"
        ], [], [], "");
    }
    /** --- PRIVATE ---
   * Creates the initial form
   * @param {formName string} formName of the form
   * @param {fields Array} fields array of objects containing labelName, type and fieldName data
   * @returns {form Object} form html element
   */ #createForm(moduleKey, formName, fields) {
        this.#form = (0, _mainJs.GM).HF.createNewForm(formName.name, "", [
            formName.className
        ], []);
        fields.forEach((field)=>{
            const fieldWrapper = (0, _mainJs.GM).HF.createNewDiv("", "", [
                "field-wrapper"
            ], [], [], "");
            // create field label
            const fieldInputId = field.fieldName + "-" + moduleKey;
            const fieldLabel = (0, _mainJs.GM).HF.createNewLabel("", "", [
                `${fieldInputId}`
            ], [], [], field.labelName + ": ");
            // create fields
            var formField = this.#createFormField(field, fieldInputId);
            // append to fieldWrapper
            fieldWrapper.appendChild(fieldLabel);
            fieldWrapper.appendChild(formField);
            // append fields to the form
            this.#form.appendChild(fieldWrapper);
        });
    }
    /** --- PRIVATE ---
   * Creates the form field
   * @param {field Object} field object contains labelName, type, and fieldName data
   * */ #createFormField(field, fieldInputId) {
        var formField;
        switch(field.type){
            case "text":
                formField = (0, _mainJs.GM).HF.createNewDiv(fieldInputId, "", [
                    "field-input-wrapper"
                ], [], [], "");
                var textInput = (0, _mainJs.GM).HF.createNewTextInput("", field.fieldName, [
                    "field-input"
                ], [
                    {
                        style: "border",
                        value: "inset"
                    }
                ], "text", "");
                //formField.setAttribute('remote', field.remote);
                if (field.value) textInput.value = field.value;
                formField.appendChild(textInput);
                break;
            case "date":
                formField = (0, _mainJs.GM).HF.createNewDiv(fieldInputId, "", [
                    "field-input-wrapper"
                ], [], [], "");
                var textInput = (0, _mainJs.GM).HF.createNewTextInput("", field.fieldName, [
                    "field-input"
                ], [
                    {
                        style: "border",
                        value: "inset"
                    }
                ], "text", "");
                //formField.setAttribute('remote', field.remote);
                // set default value
                if (field.value) textInput.value = field.value;
                else textInput.value = "2000-01-01";
                textInput._datepicker = (0, _flatpickrDefault.default)(textInput, {
                    dateFormat: "Y-m-d",
                    allowInput: true
                });
                if (field.fieldName === "begin" || field.fieldName === "end") {
                    textInput.classList.add("date-range");
                    textInput.setAttribute("id", `date-range-${field.fieldName}-${field.index}`);
                }
                formField.appendChild(textInput);
                break;
            case "dropdown":
                formField = (0, _mainJs.GM).HF.createNewDiv(fieldInputId, "", [
                    "field-input-wrapper"
                ], [], [], "");
                const options = field.options;
                var values = [];
                var displayNames = [];
                if (options) {
                    values = options.map((obj)=>{
                        return obj.Key;
                    });
                    displayNames = options.map((obj)=>{
                        return obj.Value;
                    });
                }
                var dropdown = (0, _mainJs.GM).HF.createNewSelect("", field.fieldName, [
                    "field-input"
                ], [], values, displayNames);
                formField.appendChild(dropdown);
                break;
            case "checkbox":
                formField = (0, _mainJs.GM).HF.createNewDiv(fieldInputId, "", [
                    "checkbox-wrapper",
                    "field-input-wrapper"
                ], [], [], "");
                const checkbox_options = field.options;
                // foreach option, create check box
                checkbox_options.forEach((option)=>{
                    var checkbox = (0, _mainJs.GM).HF.createNewCheckbox("checkbox-" + field.fieldName + "-" + option.value, field.fieldName + "-" + option.value, [
                        "checkbox",
                        "field-input"
                    ], [], option.value, option.key, false);
                    formField.appendChild(checkbox.wrapper);
                });
                break;
            case "radio":
                formField = (0, _mainJs.GM).HF.createNewDiv(fieldInputId, "", [
                    "radio-wrapper",
                    "field-input-wrapper"
                ], [], [], "");
                console.log(field);
                const radio_options = field.options;
                // foreach option, create radiobuttons
                radio_options.forEach((option)=>{
                    const id = "radiobutton-" + field.fieldName + "-" + option.value;
                    const radiolabel = document.createElement("Label");
                    radiolabel.setAttribute("for", id);
                    radiolabel.innerHTML = option.key;
                    var radioButton = (0, _mainJs.GM).HF.createNewRadioButton(id, field.fieldName, [
                        "radiobutton",
                        "field-input"
                    ], [], field.type, option.value, false);
                    formField.appendChild(radioButton);
                    formField.appendChild(radiolabel);
                });
                break;
            case "range":
                break;
            case "typeahead":
                formField = (0, _mainJs.GM).HF.createNewDiv(fieldInputId, "", [
                    "field-input-wrapper"
                ], [
                    {
                        style: "position",
                        value: "relative"
                    }
                ], [], "");
                var textInput = (0, _mainJs.GM).HF.createNewTextInput("", field.fieldName, [
                    "typeahead-input",
                    "field-input"
                ], [
                    {
                        style: "border",
                        value: "inset"
                    }
                ], "text", "");
                textInput.setAttribute("remote", field.remote);
                if (field.value) textInput.value = field.value;
                // create empty container for result
                const resultContainer = (0, _mainJs.GM).HF.createNewDiv("", "", [
                    "typeahead-result-container"
                ], [
                    {
                        style: "display",
                        value: "none"
                    }
                ], [], "");
                formField.appendChild(textInput);
                formField.appendChild(resultContainer);
                break;
            default:
                formField = (0, _mainJs.GM).HF.createNewDiv(fieldInputId, "", [
                    "field-input-wrapper"
                ], [], [], "");
                var textInput = (0, _mainJs.GM).HF.createNewTextInput("", field.fieldName, [
                    "field-input"
                ], [
                    {
                        style: "border",
                        value: "inset"
                    }
                ], "text", false);
                //formField.setAttribute('remote', field.remote);
                if (field.value) textInput.value = field.value;
                formField.appendChild(textInput);
                break;
        }
        return formField;
    }
    /** --- PRIVATE ---
   * Creates the submit button of the existing form
   * @param {formName String} formName of the form to attach the submit button
   * */ #createSubmitButton(formName) {
        const submitButtonWrapper = (0, _mainJs.GM).HF.createNewDiv("", "", [
            "button-wrapper"
        ], [], [], "");
        const submitButton = (0, _mainJs.GM).HF.createNewButton(formName.name + "-btn", "", [
            "btn",
            "form-submit-btn"
        ], [], "button", formName.submitButton, false);
        //submitButton.setAttribute('form', formName.name);
        submitButtonWrapper.appendChild(submitButton);
        this.#submitButton = submitButtonWrapper;
    }
    /** --- PUBLIC ---
   * addFormField adds the field to this form card.
   * @param {Object} field has the 'type' element as the html element type,
   *                      'labelName' as the display name for this html element type,
   *                      and the 'fieldName' as the value for this html element type.
   * */ appendFormField(field) {
        var form = this.getCard().form;
        // create field elements for this field
        var fieldWrapper = (0, _mainJs.GM).HF.createNewDiv("", "", [
            "field-wrapper"
        ], [], [], "");
        var label = (0, _mainJs.GM).HF.createNewLabel("", "", [
            field.labelName
        ], [], [], field.labelName + ": ");
        var input = this.#createFormField(field);
        if (field.value) input.value = field.value;
        fieldWrapper.appendChild(label);
        fieldWrapper.appendChild(input);
        form.appendChild(fieldWrapper);
        console.log(form);
    //return fieldWrapper;
    }
    /** updateFormFields updates the fields of this form card.
   * @param {fields Array} fields array of field objects containing the labelName and fieldName of the fields to be updated.
   * */ updateFormFields(fields) {
        var form = this.getCard().form;
        // Clear the form fields
        while(form.firstChild)form.removeChild(form.firstChild);
        // Append the form fields passed
        for(var i = 0; i < fields.length; i++){
            var field = fields[i];
            // create field elements
            var fieldWrapper = (0, _mainJs.GM).HF.createNewDiv("", "", [
                "field-wrapper"
            ], [], [], "");
            const fieldInputId = field.fieldName + "-" + field.index;
            const label = (0, _mainJs.GM).HF.createNewLabel("", "", [
                `${fieldInputId}`
            ], [], [], field.labelName + ": ");
            var input = this.#createFormField(field, fieldInputId);
            fieldWrapper.appendChild(label);
            fieldWrapper.appendChild(input);
            form.appendChild(fieldWrapper);
        }
    }
    // In progress
    /** appendRemoveField appends the remove buttons to each of the form
   *                      with the remove event from the form
   * */ appendRemoveField() {
        // find the current form
        var formWrapper = this.getCard().wrapper;
        var fieldWrappers = formWrapper.querySelectorAll(".field-wrapper");
        fieldWrappers.forEach((field)=>{
            // Create remove btn
            var removeFieldIcon = (0, _mainJs.GM).HF.createNewSpan("", "", [
                "remove-field-btn"
            ], [], "", "x", false);
            // append remove icon to the field wrapper
            field.appendChild(removeFieldIcon);
        });
    // Remove field event
    // add id for each form field
    // remove that field-wrapper div
    }
    /** --- PUBLIC ---
   * Creates the form field tooltip
   * @param {fieldinfo String} fieldinfo tooltip
   * */ appendToolTip(fieldinfo, tooltipElement) {
        var tooltipDiv = (0, _mainJs.GM).HF.createNewDiv("", "", [
            "tooltip-div"
        ], [], [], "");
        //var tooltipIcon = GM.HF.createNewIMG('', '', '../../../images/icons/info.png', ['tooltip-img'], [{ style: 'width', value: '30px' }], 'form field format');
        var tooltipSpan = (0, _mainJs.GM).HF.createNewSpan("", "", [
            "tooltip-text"
        ], [], fieldinfo);
        if (!tooltipElement) tooltipElement = (0, _mainJs.GM).HF.createNewIMG("", "", "../../../images/icons/info.png", [
            "tooltip-img"
        ], [
            {
                style: "width",
                value: "30px"
            }
        ], "form field format");
        tooltipDiv.appendChild(tooltipElement);
        //tooltipDiv.appendChild(tooltipIcon);
        tooltipDiv.appendChild(tooltipSpan);
        tooltipDiv.addEventListener("mouseenter", (e)=>{
            const tooltipElementRect = tooltipElement.getBoundingClientRect();
            console.log(tooltipElementRect);
            const top = tooltipElementRect.top - tooltipElementRect.height / 4;
            const right = window.innerWidth - tooltipElementRect.left;
            tooltipSpan.style.top = `${top}px`; // Adjust the vertical position
            tooltipSpan.style.right = `${right}px`; // Position it right next to the tooltip-div
        });
        return tooltipDiv;
    }
    appendMessage(wrapper, message) {
        var formMessage = (0, _mainJs.GM).HF.createNewParagraph("", "", [
            "form-message"
        ], [], message);
        wrapper.insertBefore(formMessage, wrapper.firstChild);
    }
    /** Add a Flatpickr Date Range Plugin to corresponding fields
   * @param {dateFields} array of objects consisting of date field information
   *                      (e.g. { index: 0, remote: false, labelName: "Begin", fieldName: "begin", type: "date" })
   * */ createFlatpickrRangePlugin(dateFields) {
        // for all the date fields with the same index, find begin and end pairs
        var beginEndPairs = this.findBeginEndPairs(dateFields);
        // if both begin and end exists, add plugin for those
        if (beginEndPairs.length > 0) beginEndPairs.forEach((pair)=>{
            var beginField = pair.begin;
            var endField = pair.end;
            var endFieldId = `#date-range-${endField.fieldName}-${endField.index}`;
            // Initialize flatpickr with the range plugin
            (0, _flatpickrDefault.default)(`#date-range-${beginField.fieldName}-${beginField.index}`, {
                mode: "range",
                dateFormat: "Y-m-d",
                plugins: [
                    new (0, _rangePluginJs.rangePlugin)({
                        input: endFieldId
                    })
                ]
            });
        });
    }
    findBeginEndPairs(dateFields) {
        var pairs = [];
        dateFields.forEach((beginField)=>{
            if (beginField.fieldName === "begin") {
                var endField = dateFields.find((field)=>field.index === beginField.index && field.fieldName === "end");
                if (endField) pairs.push({
                    begin: beginField,
                    end: endField
                });
            }
        });
        return pairs;
    }
    /*
    // Create Layout
    #createLayout() {
        //const wrapper = GM.HF.createNewDiv('', '', ['sql-query-wrapper'], [], [], '');

        const dateRangeWrapper = GM.HF.createNewDiv('', '', ['query-date-range-wrapper'], [], [], '');
        const cometWrapper = GM.HF.createNewDiv('', '', ['query-comet-wrapper'], [], [], '');
        const buttonsWrapper = GM.HF.createNewDiv('', '', ['query-buttons-wrapper'], [], [], '');

        const dateRangeLabel = GM.HF.createNewLabel('', '', 'date-range-label', [], [], ['Dates Between: ']);
        const cometLabel = GM.HF.createNewLabel('', '', 'comet-label', [], [], ['Comet: ']);

        //const dateRange = GM.HF.createNewDiv('query-date-range', '', ['range-slider-wrapper'], [], [], '');
        // create minMaxFilter here 

        const cometDropdown = GM.HF.createNewSelect('cometDD', '', [], [], ['objects', 'objecttypelink', 'objectname', 'tnos', 'centaurs' ], ['objects', 'objecttypelink', 'objectnames', 'tnos', 'centaurs']);
        const queryButton = GM.HF.createNewButton('queryBtn', [], ['query-button'], ['border-radius: 3px'], 'submit', 'Query', '');

        */ /*const rangeSliderBar = GM.HF.createNewDiv('', '', ['range-slider-background-bar'], [], [], '');
        const rangeSliderBall_left = GM.HF.createNewDiv('', '', ['range-slider-ball'], [], [], '');
        const rangeSliderBall_right = GM.HF.createNewDiv('', '', ['range-slider-ball-right'], [], [], '');*/ /*

        // Create Section Wrappers
        this.card.appendChild(dateRangeWrapper);
        this.card.appendChild(cometWrapper);
        this.card.appendChild(buttonsWrapper);

        // Create Labels for each section
        dateRangeWrapper.appendChild(dateRangeLabel);
        cometWrapper.appendChild(cometLabel);

        // Append Elements to each section
        //dateRangeWrapper.appendChild(dateRange);
        cometWrapper.appendChild(cometDropdown);
        buttonsWrapper.appendChild(queryButton);

        // Range Input Elements


        // Range Slider Elements
        */ /*dateRange.appendChild(rangeSliderBar);
        dateRange.appendChild(rangeSliderBall_left);
        dateRange.appendChild(rangeSliderBall_right);*/ /*
    }*/ getCard() {
        return {
            wrapper: this.#wrapper,
            formName: this.#formName,
            form: this.#form,
            submitButton: this.#submitButton
        };
    }
    getFormFields() {
        var form = this.#form;
        return form.children;
    }
}

},{"../../../main.js":"1SICI","./minMaxFilter.js":"5JXPH","flatpickr/dist/plugins/rangePlugin.js":"aEI2X","flatpickr":"llQu5","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aEI2X":[function(require,module,exports) {
(function(global, factory) {
    module.exports = factory();
})(this, function() {
    "use strict";
    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */ function __spreadArrays() {
        for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
        for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
        return r;
    }
    function rangePlugin(config) {
        if (config === void 0) config = {};
        return function(fp) {
            var dateFormat = "", secondInput, _secondInputFocused, _prevDates;
            var createSecondInput = function() {
                if (config.input) {
                    secondInput = config.input instanceof Element ? config.input : window.document.querySelector(config.input);
                    if (!secondInput) {
                        fp.config.errorHandler(new Error("Invalid input element specified"));
                        return;
                    }
                    if (fp.config.wrap) secondInput = secondInput.querySelector("[data-input]");
                } else {
                    secondInput = fp._input.cloneNode();
                    secondInput.removeAttribute("id");
                    secondInput._flatpickr = undefined;
                }
                if (secondInput.value) {
                    var parsedDate = fp.parseDate(secondInput.value);
                    if (parsedDate) fp.selectedDates.push(parsedDate);
                }
                secondInput.setAttribute("data-fp-omit", "");
                if (fp.config.clickOpens) {
                    fp._bind(secondInput, [
                        "focus",
                        "click"
                    ], function() {
                        if (fp.selectedDates[1]) {
                            fp.latestSelectedDateObj = fp.selectedDates[1];
                            fp._setHoursFromDate(fp.selectedDates[1]);
                            fp.jumpToDate(fp.selectedDates[1]);
                        }
                        _secondInputFocused = true;
                        fp.isOpen = false;
                        fp.open(undefined, config.position === "left" ? fp._input : secondInput);
                    });
                    fp._bind(fp._input, [
                        "focus",
                        "click"
                    ], function(e) {
                        e.preventDefault();
                        fp.isOpen = false;
                        fp.open();
                    });
                }
                if (fp.config.allowInput) fp._bind(secondInput, "keydown", function(e) {
                    if (e.key === "Enter") {
                        fp.setDate([
                            fp.selectedDates[0],
                            secondInput.value
                        ], true, dateFormat);
                        secondInput.click();
                    }
                });
                if (!config.input) fp._input.parentNode && fp._input.parentNode.insertBefore(secondInput, fp._input.nextSibling);
            };
            var plugin = {
                onParseConfig: function() {
                    fp.config.mode = "range";
                    dateFormat = fp.config.altInput ? fp.config.altFormat : fp.config.dateFormat;
                },
                onReady: function() {
                    createSecondInput();
                    fp.config.ignoredFocusElements.push(secondInput);
                    if (fp.config.allowInput) {
                        fp._input.removeAttribute("readonly");
                        secondInput.removeAttribute("readonly");
                    } else secondInput.setAttribute("readonly", "readonly");
                    fp._bind(fp._input, "focus", function() {
                        fp.latestSelectedDateObj = fp.selectedDates[0];
                        fp._setHoursFromDate(fp.selectedDates[0]);
                        _secondInputFocused = false;
                        fp.jumpToDate(fp.selectedDates[0]);
                    });
                    if (fp.config.allowInput) fp._bind(fp._input, "keydown", function(e) {
                        if (e.key === "Enter") fp.setDate([
                            fp._input.value,
                            fp.selectedDates[1]
                        ], true, dateFormat);
                    });
                    fp.setDate(fp.selectedDates, false);
                    plugin.onValueUpdate(fp.selectedDates);
                    fp.loadedPlugins.push("range");
                },
                onPreCalendarPosition: function() {
                    if (_secondInputFocused) {
                        fp._positionElement = secondInput;
                        setTimeout(function() {
                            fp._positionElement = fp._input;
                        }, 0);
                    }
                },
                onChange: function() {
                    if (!fp.selectedDates.length) setTimeout(function() {
                        if (fp.selectedDates.length) return;
                        secondInput.value = "";
                        _prevDates = [];
                    }, 10);
                    if (_secondInputFocused) setTimeout(function() {
                        secondInput.focus();
                    }, 0);
                },
                onDestroy: function() {
                    if (!config.input) secondInput.parentNode && secondInput.parentNode.removeChild(secondInput);
                },
                onValueUpdate: function(selDates) {
                    var _a, _b, _c;
                    if (!secondInput) return;
                    _prevDates = !_prevDates || selDates.length >= _prevDates.length ? __spreadArrays(selDates) : _prevDates;
                    if (_prevDates.length > selDates.length) {
                        var newSelectedDate = selDates[0];
                        var newDates = _secondInputFocused ? [
                            _prevDates[0],
                            newSelectedDate
                        ] : [
                            newSelectedDate,
                            _prevDates[1]
                        ];
                        if (newDates[0].getTime() > newDates[1].getTime()) {
                            if (_secondInputFocused) newDates[0] = newDates[1];
                            else newDates[1] = newDates[0];
                        }
                        fp.setDate(newDates, false);
                        _prevDates = __spreadArrays(newDates);
                    }
                    _a = fp.selectedDates.map(function(d) {
                        return fp.formatDate(d, dateFormat);
                    }), _b = _a[0], fp._input.value = _b === void 0 ? "" : _b, _c = _a[1], secondInput.value = _c === void 0 ? "" : _c;
                }
            };
            return plugin;
        };
    }
    return rangePlugin;
});

},{}],"llQu5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _options = require("./types/options");
var _default = require("./l10n/default");
var _defaultDefault = parcelHelpers.interopDefault(_default);
var _utils = require("./utils");
var _dom = require("./utils/dom");
var _dates = require("./utils/dates");
var _formatting = require("./utils/formatting");
var _polyfills = require("./utils/polyfills");
var __assign = undefined && undefined.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = undefined && undefined.__spreadArrays || function() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
};
var DEBOUNCED_CHANGE_MS = 300;
function FlatpickrInstance(element, instanceConfig) {
    var self = {
        config: __assign(__assign({}, (0, _options.defaults)), flatpickr.defaultConfig),
        l10n: (0, _defaultDefault.default)
    };
    self.parseDate = (0, _dates.createDateParser)({
        config: self.config,
        l10n: self.l10n
    });
    self._handlers = [];
    self.pluginElements = [];
    self.loadedPlugins = [];
    self._bind = bind;
    self._setHoursFromDate = setHoursFromDate;
    self._positionCalendar = positionCalendar;
    self.changeMonth = changeMonth;
    self.changeYear = changeYear;
    self.clear = clear;
    self.close = close;
    self.onMouseOver = onMouseOver;
    self._createElement = (0, _dom.createElement);
    self.createDay = createDay;
    self.destroy = destroy;
    self.isEnabled = isEnabled;
    self.jumpToDate = jumpToDate;
    self.updateValue = updateValue;
    self.open = open;
    self.redraw = redraw;
    self.set = set;
    self.setDate = setDate;
    self.toggle = toggle;
    function setupHelperFunctions() {
        self.utils = {
            getDaysInMonth: function(month, yr) {
                if (month === void 0) month = self.currentMonth;
                if (yr === void 0) yr = self.currentYear;
                if (month === 1 && (yr % 4 === 0 && yr % 100 !== 0 || yr % 400 === 0)) return 29;
                return self.l10n.daysInMonth[month];
            }
        };
    }
    function init() {
        self.element = self.input = element;
        self.isOpen = false;
        parseConfig();
        setupLocale();
        setupInputs();
        setupDates();
        setupHelperFunctions();
        if (!self.isMobile) build();
        bindEvents();
        if (self.selectedDates.length || self.config.noCalendar) {
            if (self.config.enableTime) setHoursFromDate(self.config.noCalendar ? self.latestSelectedDateObj : undefined);
            updateValue(false);
        }
        setCalendarWidth();
        var isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
        if (!self.isMobile && isSafari) positionCalendar();
        triggerEvent("onReady");
    }
    function getClosestActiveElement() {
        var _a;
        return ((_a = self.calendarContainer) === null || _a === void 0 ? void 0 : _a.getRootNode()).activeElement || document.activeElement;
    }
    function bindToInstance(fn) {
        return fn.bind(self);
    }
    function setCalendarWidth() {
        var config = self.config;
        if (config.weekNumbers === false && config.showMonths === 1) return;
        else if (config.noCalendar !== true) window.requestAnimationFrame(function() {
            if (self.calendarContainer !== undefined) {
                self.calendarContainer.style.visibility = "hidden";
                self.calendarContainer.style.display = "block";
            }
            if (self.daysContainer !== undefined) {
                var daysWidth = (self.days.offsetWidth + 1) * config.showMonths;
                self.daysContainer.style.width = daysWidth + "px";
                self.calendarContainer.style.width = daysWidth + (self.weekWrapper !== undefined ? self.weekWrapper.offsetWidth : 0) + "px";
                self.calendarContainer.style.removeProperty("visibility");
                self.calendarContainer.style.removeProperty("display");
            }
        });
    }
    function updateTime(e) {
        if (self.selectedDates.length === 0) {
            var defaultDate = self.config.minDate === undefined || (0, _dates.compareDates)(new Date(), self.config.minDate) >= 0 ? new Date() : new Date(self.config.minDate.getTime());
            var defaults = (0, _dates.getDefaultHours)(self.config);
            defaultDate.setHours(defaults.hours, defaults.minutes, defaults.seconds, defaultDate.getMilliseconds());
            self.selectedDates = [
                defaultDate
            ];
            self.latestSelectedDateObj = defaultDate;
        }
        if (e !== undefined && e.type !== "blur") timeWrapper(e);
        var prevValue = self._input.value;
        setHoursFromInputs();
        updateValue();
        if (self._input.value !== prevValue) self._debouncedChange();
    }
    function ampm2military(hour, amPM) {
        return hour % 12 + 12 * (0, _utils.int)(amPM === self.l10n.amPM[1]);
    }
    function military2ampm(hour) {
        switch(hour % 24){
            case 0:
            case 12:
                return 12;
            default:
                return hour % 12;
        }
    }
    function setHoursFromInputs() {
        if (self.hourElement === undefined || self.minuteElement === undefined) return;
        var hours = (parseInt(self.hourElement.value.slice(-2), 10) || 0) % 24, minutes = (parseInt(self.minuteElement.value, 10) || 0) % 60, seconds = self.secondElement !== undefined ? (parseInt(self.secondElement.value, 10) || 0) % 60 : 0;
        if (self.amPM !== undefined) hours = ampm2military(hours, self.amPM.textContent);
        var limitMinHours = self.config.minTime !== undefined || self.config.minDate && self.minDateHasTime && self.latestSelectedDateObj && (0, _dates.compareDates)(self.latestSelectedDateObj, self.config.minDate, true) === 0;
        var limitMaxHours = self.config.maxTime !== undefined || self.config.maxDate && self.maxDateHasTime && self.latestSelectedDateObj && (0, _dates.compareDates)(self.latestSelectedDateObj, self.config.maxDate, true) === 0;
        if (self.config.maxTime !== undefined && self.config.minTime !== undefined && self.config.minTime > self.config.maxTime) {
            var minBound = (0, _dates.calculateSecondsSinceMidnight)(self.config.minTime.getHours(), self.config.minTime.getMinutes(), self.config.minTime.getSeconds());
            var maxBound = (0, _dates.calculateSecondsSinceMidnight)(self.config.maxTime.getHours(), self.config.maxTime.getMinutes(), self.config.maxTime.getSeconds());
            var currentTime = (0, _dates.calculateSecondsSinceMidnight)(hours, minutes, seconds);
            if (currentTime > maxBound && currentTime < minBound) {
                var result = (0, _dates.parseSeconds)(minBound);
                hours = result[0];
                minutes = result[1];
                seconds = result[2];
            }
        } else {
            if (limitMaxHours) {
                var maxTime = self.config.maxTime !== undefined ? self.config.maxTime : self.config.maxDate;
                hours = Math.min(hours, maxTime.getHours());
                if (hours === maxTime.getHours()) minutes = Math.min(minutes, maxTime.getMinutes());
                if (minutes === maxTime.getMinutes()) seconds = Math.min(seconds, maxTime.getSeconds());
            }
            if (limitMinHours) {
                var minTime = self.config.minTime !== undefined ? self.config.minTime : self.config.minDate;
                hours = Math.max(hours, minTime.getHours());
                if (hours === minTime.getHours() && minutes < minTime.getMinutes()) minutes = minTime.getMinutes();
                if (minutes === minTime.getMinutes()) seconds = Math.max(seconds, minTime.getSeconds());
            }
        }
        setHours(hours, minutes, seconds);
    }
    function setHoursFromDate(dateObj) {
        var date = dateObj || self.latestSelectedDateObj;
        if (date && date instanceof Date) setHours(date.getHours(), date.getMinutes(), date.getSeconds());
    }
    function setHours(hours, minutes, seconds) {
        if (self.latestSelectedDateObj !== undefined) self.latestSelectedDateObj.setHours(hours % 24, minutes, seconds || 0, 0);
        if (!self.hourElement || !self.minuteElement || self.isMobile) return;
        self.hourElement.value = (0, _utils.pad)(!self.config.time_24hr ? (12 + hours) % 12 + 12 * (0, _utils.int)(hours % 12 === 0) : hours);
        self.minuteElement.value = (0, _utils.pad)(minutes);
        if (self.amPM !== undefined) self.amPM.textContent = self.l10n.amPM[(0, _utils.int)(hours >= 12)];
        if (self.secondElement !== undefined) self.secondElement.value = (0, _utils.pad)(seconds);
    }
    function onYearInput(event) {
        var eventTarget = (0, _dom.getEventTarget)(event);
        var year = parseInt(eventTarget.value) + (event.delta || 0);
        if (year / 1000 > 1 || event.key === "Enter" && !/[^\d]/.test(year.toString())) changeYear(year);
    }
    function bind(element, event, handler, options) {
        if (event instanceof Array) return event.forEach(function(ev) {
            return bind(element, ev, handler, options);
        });
        if (element instanceof Array) return element.forEach(function(el) {
            return bind(el, event, handler, options);
        });
        element.addEventListener(event, handler, options);
        self._handlers.push({
            remove: function() {
                return element.removeEventListener(event, handler, options);
            }
        });
    }
    function triggerChange() {
        triggerEvent("onChange");
    }
    function bindEvents() {
        if (self.config.wrap) [
            "open",
            "close",
            "toggle",
            "clear"
        ].forEach(function(evt) {
            Array.prototype.forEach.call(self.element.querySelectorAll("[data-" + evt + "]"), function(el) {
                return bind(el, "click", self[evt]);
            });
        });
        if (self.isMobile) {
            setupMobile();
            return;
        }
        var debouncedResize = (0, _utils.debounce)(onResize, 50);
        self._debouncedChange = (0, _utils.debounce)(triggerChange, DEBOUNCED_CHANGE_MS);
        if (self.daysContainer && !/iPhone|iPad|iPod/i.test(navigator.userAgent)) bind(self.daysContainer, "mouseover", function(e) {
            if (self.config.mode === "range") onMouseOver((0, _dom.getEventTarget)(e));
        });
        bind(self._input, "keydown", onKeyDown);
        if (self.calendarContainer !== undefined) bind(self.calendarContainer, "keydown", onKeyDown);
        if (!self.config.inline && !self.config.static) bind(window, "resize", debouncedResize);
        if (window.ontouchstart !== undefined) bind(window.document, "touchstart", documentClick);
        else bind(window.document, "mousedown", documentClick);
        bind(window.document, "focus", documentClick, {
            capture: true
        });
        if (self.config.clickOpens === true) {
            bind(self._input, "focus", self.open);
            bind(self._input, "click", self.open);
        }
        if (self.daysContainer !== undefined) {
            bind(self.monthNav, "click", onMonthNavClick);
            bind(self.monthNav, [
                "keyup",
                "increment"
            ], onYearInput);
            bind(self.daysContainer, "click", selectDate);
        }
        if (self.timeContainer !== undefined && self.minuteElement !== undefined && self.hourElement !== undefined) {
            var selText = function(e) {
                return (0, _dom.getEventTarget)(e).select();
            };
            bind(self.timeContainer, [
                "increment"
            ], updateTime);
            bind(self.timeContainer, "blur", updateTime, {
                capture: true
            });
            bind(self.timeContainer, "click", timeIncrement);
            bind([
                self.hourElement,
                self.minuteElement
            ], [
                "focus",
                "click"
            ], selText);
            if (self.secondElement !== undefined) bind(self.secondElement, "focus", function() {
                return self.secondElement && self.secondElement.select();
            });
            if (self.amPM !== undefined) bind(self.amPM, "click", function(e) {
                updateTime(e);
            });
        }
        if (self.config.allowInput) bind(self._input, "blur", onBlur);
    }
    function jumpToDate(jumpDate, triggerChange) {
        var jumpTo = jumpDate !== undefined ? self.parseDate(jumpDate) : self.latestSelectedDateObj || (self.config.minDate && self.config.minDate > self.now ? self.config.minDate : self.config.maxDate && self.config.maxDate < self.now ? self.config.maxDate : self.now);
        var oldYear = self.currentYear;
        var oldMonth = self.currentMonth;
        try {
            if (jumpTo !== undefined) {
                self.currentYear = jumpTo.getFullYear();
                self.currentMonth = jumpTo.getMonth();
            }
        } catch (e) {
            e.message = "Invalid date supplied: " + jumpTo;
            self.config.errorHandler(e);
        }
        if (triggerChange && self.currentYear !== oldYear) {
            triggerEvent("onYearChange");
            buildMonthSwitch();
        }
        if (triggerChange && (self.currentYear !== oldYear || self.currentMonth !== oldMonth)) triggerEvent("onMonthChange");
        self.redraw();
    }
    function timeIncrement(e) {
        var eventTarget = (0, _dom.getEventTarget)(e);
        if (~eventTarget.className.indexOf("arrow")) incrementNumInput(e, eventTarget.classList.contains("arrowUp") ? 1 : -1);
    }
    function incrementNumInput(e, delta, inputElem) {
        var target = e && (0, _dom.getEventTarget)(e);
        var input = inputElem || target && target.parentNode && target.parentNode.firstChild;
        var event = createEvent("increment");
        event.delta = delta;
        input && input.dispatchEvent(event);
    }
    function build() {
        var fragment = window.document.createDocumentFragment();
        self.calendarContainer = (0, _dom.createElement)("div", "flatpickr-calendar");
        self.calendarContainer.tabIndex = -1;
        if (!self.config.noCalendar) {
            fragment.appendChild(buildMonthNav());
            self.innerContainer = (0, _dom.createElement)("div", "flatpickr-innerContainer");
            if (self.config.weekNumbers) {
                var _a = buildWeeks(), weekWrapper = _a.weekWrapper, weekNumbers = _a.weekNumbers;
                self.innerContainer.appendChild(weekWrapper);
                self.weekNumbers = weekNumbers;
                self.weekWrapper = weekWrapper;
            }
            self.rContainer = (0, _dom.createElement)("div", "flatpickr-rContainer");
            self.rContainer.appendChild(buildWeekdays());
            if (!self.daysContainer) {
                self.daysContainer = (0, _dom.createElement)("div", "flatpickr-days");
                self.daysContainer.tabIndex = -1;
            }
            buildDays();
            self.rContainer.appendChild(self.daysContainer);
            self.innerContainer.appendChild(self.rContainer);
            fragment.appendChild(self.innerContainer);
        }
        if (self.config.enableTime) fragment.appendChild(buildTime());
        (0, _dom.toggleClass)(self.calendarContainer, "rangeMode", self.config.mode === "range");
        (0, _dom.toggleClass)(self.calendarContainer, "animate", self.config.animate === true);
        (0, _dom.toggleClass)(self.calendarContainer, "multiMonth", self.config.showMonths > 1);
        self.calendarContainer.appendChild(fragment);
        var customAppend = self.config.appendTo !== undefined && self.config.appendTo.nodeType !== undefined;
        if (self.config.inline || self.config.static) {
            self.calendarContainer.classList.add(self.config.inline ? "inline" : "static");
            if (self.config.inline) {
                if (!customAppend && self.element.parentNode) self.element.parentNode.insertBefore(self.calendarContainer, self._input.nextSibling);
                else if (self.config.appendTo !== undefined) self.config.appendTo.appendChild(self.calendarContainer);
            }
            if (self.config.static) {
                var wrapper = (0, _dom.createElement)("div", "flatpickr-wrapper");
                if (self.element.parentNode) self.element.parentNode.insertBefore(wrapper, self.element);
                wrapper.appendChild(self.element);
                if (self.altInput) wrapper.appendChild(self.altInput);
                wrapper.appendChild(self.calendarContainer);
            }
        }
        if (!self.config.static && !self.config.inline) (self.config.appendTo !== undefined ? self.config.appendTo : window.document.body).appendChild(self.calendarContainer);
    }
    function createDay(className, date, _dayNumber, i) {
        var dateIsEnabled = isEnabled(date, true), dayElement = (0, _dom.createElement)("span", className, date.getDate().toString());
        dayElement.dateObj = date;
        dayElement.$i = i;
        dayElement.setAttribute("aria-label", self.formatDate(date, self.config.ariaDateFormat));
        if (className.indexOf("hidden") === -1 && (0, _dates.compareDates)(date, self.now) === 0) {
            self.todayDateElem = dayElement;
            dayElement.classList.add("today");
            dayElement.setAttribute("aria-current", "date");
        }
        if (dateIsEnabled) {
            dayElement.tabIndex = -1;
            if (isDateSelected(date)) {
                dayElement.classList.add("selected");
                self.selectedDateElem = dayElement;
                if (self.config.mode === "range") {
                    (0, _dom.toggleClass)(dayElement, "startRange", self.selectedDates[0] && (0, _dates.compareDates)(date, self.selectedDates[0], true) === 0);
                    (0, _dom.toggleClass)(dayElement, "endRange", self.selectedDates[1] && (0, _dates.compareDates)(date, self.selectedDates[1], true) === 0);
                    if (className === "nextMonthDay") dayElement.classList.add("inRange");
                }
            }
        } else dayElement.classList.add("flatpickr-disabled");
        if (self.config.mode === "range") {
            if (isDateInRange(date) && !isDateSelected(date)) dayElement.classList.add("inRange");
        }
        if (self.weekNumbers && self.config.showMonths === 1 && className !== "prevMonthDay" && i % 7 === 6) self.weekNumbers.insertAdjacentHTML("beforeend", "<span class='flatpickr-day'>" + self.config.getWeek(date) + "</span>");
        triggerEvent("onDayCreate", dayElement);
        return dayElement;
    }
    function focusOnDayElem(targetNode) {
        targetNode.focus();
        if (self.config.mode === "range") onMouseOver(targetNode);
    }
    function getFirstAvailableDay(delta) {
        var startMonth = delta > 0 ? 0 : self.config.showMonths - 1;
        var endMonth = delta > 0 ? self.config.showMonths : -1;
        for(var m = startMonth; m != endMonth; m += delta){
            var month = self.daysContainer.children[m];
            var startIndex = delta > 0 ? 0 : month.children.length - 1;
            var endIndex = delta > 0 ? month.children.length : -1;
            for(var i = startIndex; i != endIndex; i += delta){
                var c = month.children[i];
                if (c.className.indexOf("hidden") === -1 && isEnabled(c.dateObj)) return c;
            }
        }
        return undefined;
    }
    function getNextAvailableDay(current, delta) {
        var givenMonth = current.className.indexOf("Month") === -1 ? current.dateObj.getMonth() : self.currentMonth;
        var endMonth = delta > 0 ? self.config.showMonths : -1;
        var loopDelta = delta > 0 ? 1 : -1;
        for(var m = givenMonth - self.currentMonth; m != endMonth; m += loopDelta){
            var month = self.daysContainer.children[m];
            var startIndex = givenMonth - self.currentMonth === m ? current.$i + delta : delta < 0 ? month.children.length - 1 : 0;
            var numMonthDays = month.children.length;
            for(var i = startIndex; i >= 0 && i < numMonthDays && i != (delta > 0 ? numMonthDays : -1); i += loopDelta){
                var c = month.children[i];
                if (c.className.indexOf("hidden") === -1 && isEnabled(c.dateObj) && Math.abs(current.$i - i) >= Math.abs(delta)) return focusOnDayElem(c);
            }
        }
        self.changeMonth(loopDelta);
        focusOnDay(getFirstAvailableDay(loopDelta), 0);
        return undefined;
    }
    function focusOnDay(current, offset) {
        var activeElement = getClosestActiveElement();
        var dayFocused = isInView(activeElement || document.body);
        var startElem = current !== undefined ? current : dayFocused ? activeElement : self.selectedDateElem !== undefined && isInView(self.selectedDateElem) ? self.selectedDateElem : self.todayDateElem !== undefined && isInView(self.todayDateElem) ? self.todayDateElem : getFirstAvailableDay(offset > 0 ? 1 : -1);
        if (startElem === undefined) self._input.focus();
        else if (!dayFocused) focusOnDayElem(startElem);
        else getNextAvailableDay(startElem, offset);
    }
    function buildMonthDays(year, month) {
        var firstOfMonth = (new Date(year, month, 1).getDay() - self.l10n.firstDayOfWeek + 7) % 7;
        var prevMonthDays = self.utils.getDaysInMonth((month - 1 + 12) % 12, year);
        var daysInMonth = self.utils.getDaysInMonth(month, year), days = window.document.createDocumentFragment(), isMultiMonth = self.config.showMonths > 1, prevMonthDayClass = isMultiMonth ? "prevMonthDay hidden" : "prevMonthDay", nextMonthDayClass = isMultiMonth ? "nextMonthDay hidden" : "nextMonthDay";
        var dayNumber = prevMonthDays + 1 - firstOfMonth, dayIndex = 0;
        for(; dayNumber <= prevMonthDays; dayNumber++, dayIndex++)days.appendChild(createDay("flatpickr-day " + prevMonthDayClass, new Date(year, month - 1, dayNumber), dayNumber, dayIndex));
        for(dayNumber = 1; dayNumber <= daysInMonth; dayNumber++, dayIndex++)days.appendChild(createDay("flatpickr-day", new Date(year, month, dayNumber), dayNumber, dayIndex));
        for(var dayNum = daysInMonth + 1; dayNum <= 42 - firstOfMonth && (self.config.showMonths === 1 || dayIndex % 7 !== 0); dayNum++, dayIndex++)days.appendChild(createDay("flatpickr-day " + nextMonthDayClass, new Date(year, month + 1, dayNum % daysInMonth), dayNum, dayIndex));
        var dayContainer = (0, _dom.createElement)("div", "dayContainer");
        dayContainer.appendChild(days);
        return dayContainer;
    }
    function buildDays() {
        if (self.daysContainer === undefined) return;
        (0, _dom.clearNode)(self.daysContainer);
        if (self.weekNumbers) (0, _dom.clearNode)(self.weekNumbers);
        var frag = document.createDocumentFragment();
        for(var i = 0; i < self.config.showMonths; i++){
            var d = new Date(self.currentYear, self.currentMonth, 1);
            d.setMonth(self.currentMonth + i);
            frag.appendChild(buildMonthDays(d.getFullYear(), d.getMonth()));
        }
        self.daysContainer.appendChild(frag);
        self.days = self.daysContainer.firstChild;
        if (self.config.mode === "range" && self.selectedDates.length === 1) onMouseOver();
    }
    function buildMonthSwitch() {
        if (self.config.showMonths > 1 || self.config.monthSelectorType !== "dropdown") return;
        var shouldBuildMonth = function(month) {
            if (self.config.minDate !== undefined && self.currentYear === self.config.minDate.getFullYear() && month < self.config.minDate.getMonth()) return false;
            return !(self.config.maxDate !== undefined && self.currentYear === self.config.maxDate.getFullYear() && month > self.config.maxDate.getMonth());
        };
        self.monthsDropdownContainer.tabIndex = -1;
        self.monthsDropdownContainer.innerHTML = "";
        for(var i = 0; i < 12; i++){
            if (!shouldBuildMonth(i)) continue;
            var month = (0, _dom.createElement)("option", "flatpickr-monthDropdown-month");
            month.value = new Date(self.currentYear, i).getMonth().toString();
            month.textContent = (0, _formatting.monthToStr)(i, self.config.shorthandCurrentMonth, self.l10n);
            month.tabIndex = -1;
            if (self.currentMonth === i) month.selected = true;
            self.monthsDropdownContainer.appendChild(month);
        }
    }
    function buildMonth() {
        var container = (0, _dom.createElement)("div", "flatpickr-month");
        var monthNavFragment = window.document.createDocumentFragment();
        var monthElement;
        if (self.config.showMonths > 1 || self.config.monthSelectorType === "static") monthElement = (0, _dom.createElement)("span", "cur-month");
        else {
            self.monthsDropdownContainer = (0, _dom.createElement)("select", "flatpickr-monthDropdown-months");
            self.monthsDropdownContainer.setAttribute("aria-label", self.l10n.monthAriaLabel);
            bind(self.monthsDropdownContainer, "change", function(e) {
                var target = (0, _dom.getEventTarget)(e);
                var selectedMonth = parseInt(target.value, 10);
                self.changeMonth(selectedMonth - self.currentMonth);
                triggerEvent("onMonthChange");
            });
            buildMonthSwitch();
            monthElement = self.monthsDropdownContainer;
        }
        var yearInput = (0, _dom.createNumberInput)("cur-year", {
            tabindex: "-1"
        });
        var yearElement = yearInput.getElementsByTagName("input")[0];
        yearElement.setAttribute("aria-label", self.l10n.yearAriaLabel);
        if (self.config.minDate) yearElement.setAttribute("min", self.config.minDate.getFullYear().toString());
        if (self.config.maxDate) {
            yearElement.setAttribute("max", self.config.maxDate.getFullYear().toString());
            yearElement.disabled = !!self.config.minDate && self.config.minDate.getFullYear() === self.config.maxDate.getFullYear();
        }
        var currentMonth = (0, _dom.createElement)("div", "flatpickr-current-month");
        currentMonth.appendChild(monthElement);
        currentMonth.appendChild(yearInput);
        monthNavFragment.appendChild(currentMonth);
        container.appendChild(monthNavFragment);
        return {
            container: container,
            yearElement: yearElement,
            monthElement: monthElement
        };
    }
    function buildMonths() {
        (0, _dom.clearNode)(self.monthNav);
        self.monthNav.appendChild(self.prevMonthNav);
        if (self.config.showMonths) {
            self.yearElements = [];
            self.monthElements = [];
        }
        for(var m = self.config.showMonths; m--;){
            var month = buildMonth();
            self.yearElements.push(month.yearElement);
            self.monthElements.push(month.monthElement);
            self.monthNav.appendChild(month.container);
        }
        self.monthNav.appendChild(self.nextMonthNav);
    }
    function buildMonthNav() {
        self.monthNav = (0, _dom.createElement)("div", "flatpickr-months");
        self.yearElements = [];
        self.monthElements = [];
        self.prevMonthNav = (0, _dom.createElement)("span", "flatpickr-prev-month");
        self.prevMonthNav.innerHTML = self.config.prevArrow;
        self.nextMonthNav = (0, _dom.createElement)("span", "flatpickr-next-month");
        self.nextMonthNav.innerHTML = self.config.nextArrow;
        buildMonths();
        Object.defineProperty(self, "_hidePrevMonthArrow", {
            get: function() {
                return self.__hidePrevMonthArrow;
            },
            set: function(bool) {
                if (self.__hidePrevMonthArrow !== bool) {
                    (0, _dom.toggleClass)(self.prevMonthNav, "flatpickr-disabled", bool);
                    self.__hidePrevMonthArrow = bool;
                }
            }
        });
        Object.defineProperty(self, "_hideNextMonthArrow", {
            get: function() {
                return self.__hideNextMonthArrow;
            },
            set: function(bool) {
                if (self.__hideNextMonthArrow !== bool) {
                    (0, _dom.toggleClass)(self.nextMonthNav, "flatpickr-disabled", bool);
                    self.__hideNextMonthArrow = bool;
                }
            }
        });
        self.currentYearElement = self.yearElements[0];
        updateNavigationCurrentMonth();
        return self.monthNav;
    }
    function buildTime() {
        self.calendarContainer.classList.add("hasTime");
        if (self.config.noCalendar) self.calendarContainer.classList.add("noCalendar");
        var defaults = (0, _dates.getDefaultHours)(self.config);
        self.timeContainer = (0, _dom.createElement)("div", "flatpickr-time");
        self.timeContainer.tabIndex = -1;
        var separator = (0, _dom.createElement)("span", "flatpickr-time-separator", ":");
        var hourInput = (0, _dom.createNumberInput)("flatpickr-hour", {
            "aria-label": self.l10n.hourAriaLabel
        });
        self.hourElement = hourInput.getElementsByTagName("input")[0];
        var minuteInput = (0, _dom.createNumberInput)("flatpickr-minute", {
            "aria-label": self.l10n.minuteAriaLabel
        });
        self.minuteElement = minuteInput.getElementsByTagName("input")[0];
        self.hourElement.tabIndex = self.minuteElement.tabIndex = -1;
        self.hourElement.value = (0, _utils.pad)(self.latestSelectedDateObj ? self.latestSelectedDateObj.getHours() : self.config.time_24hr ? defaults.hours : military2ampm(defaults.hours));
        self.minuteElement.value = (0, _utils.pad)(self.latestSelectedDateObj ? self.latestSelectedDateObj.getMinutes() : defaults.minutes);
        self.hourElement.setAttribute("step", self.config.hourIncrement.toString());
        self.minuteElement.setAttribute("step", self.config.minuteIncrement.toString());
        self.hourElement.setAttribute("min", self.config.time_24hr ? "0" : "1");
        self.hourElement.setAttribute("max", self.config.time_24hr ? "23" : "12");
        self.hourElement.setAttribute("maxlength", "2");
        self.minuteElement.setAttribute("min", "0");
        self.minuteElement.setAttribute("max", "59");
        self.minuteElement.setAttribute("maxlength", "2");
        self.timeContainer.appendChild(hourInput);
        self.timeContainer.appendChild(separator);
        self.timeContainer.appendChild(minuteInput);
        if (self.config.time_24hr) self.timeContainer.classList.add("time24hr");
        if (self.config.enableSeconds) {
            self.timeContainer.classList.add("hasSeconds");
            var secondInput = (0, _dom.createNumberInput)("flatpickr-second");
            self.secondElement = secondInput.getElementsByTagName("input")[0];
            self.secondElement.value = (0, _utils.pad)(self.latestSelectedDateObj ? self.latestSelectedDateObj.getSeconds() : defaults.seconds);
            self.secondElement.setAttribute("step", self.minuteElement.getAttribute("step"));
            self.secondElement.setAttribute("min", "0");
            self.secondElement.setAttribute("max", "59");
            self.secondElement.setAttribute("maxlength", "2");
            self.timeContainer.appendChild((0, _dom.createElement)("span", "flatpickr-time-separator", ":"));
            self.timeContainer.appendChild(secondInput);
        }
        if (!self.config.time_24hr) {
            self.amPM = (0, _dom.createElement)("span", "flatpickr-am-pm", self.l10n.amPM[(0, _utils.int)((self.latestSelectedDateObj ? self.hourElement.value : self.config.defaultHour) > 11)]);
            self.amPM.title = self.l10n.toggleTitle;
            self.amPM.tabIndex = -1;
            self.timeContainer.appendChild(self.amPM);
        }
        return self.timeContainer;
    }
    function buildWeekdays() {
        if (!self.weekdayContainer) self.weekdayContainer = (0, _dom.createElement)("div", "flatpickr-weekdays");
        else (0, _dom.clearNode)(self.weekdayContainer);
        for(var i = self.config.showMonths; i--;){
            var container = (0, _dom.createElement)("div", "flatpickr-weekdaycontainer");
            self.weekdayContainer.appendChild(container);
        }
        updateWeekdays();
        return self.weekdayContainer;
    }
    function updateWeekdays() {
        if (!self.weekdayContainer) return;
        var firstDayOfWeek = self.l10n.firstDayOfWeek;
        var weekdays = __spreadArrays(self.l10n.weekdays.shorthand);
        if (firstDayOfWeek > 0 && firstDayOfWeek < weekdays.length) weekdays = __spreadArrays(weekdays.splice(firstDayOfWeek, weekdays.length), weekdays.splice(0, firstDayOfWeek));
        for(var i = self.config.showMonths; i--;)self.weekdayContainer.children[i].innerHTML = "\n      <span class='flatpickr-weekday'>\n        " + weekdays.join("</span><span class='flatpickr-weekday'>") + "\n      </span>\n      ";
    }
    function buildWeeks() {
        self.calendarContainer.classList.add("hasWeeks");
        var weekWrapper = (0, _dom.createElement)("div", "flatpickr-weekwrapper");
        weekWrapper.appendChild((0, _dom.createElement)("span", "flatpickr-weekday", self.l10n.weekAbbreviation));
        var weekNumbers = (0, _dom.createElement)("div", "flatpickr-weeks");
        weekWrapper.appendChild(weekNumbers);
        return {
            weekWrapper: weekWrapper,
            weekNumbers: weekNumbers
        };
    }
    function changeMonth(value, isOffset) {
        if (isOffset === void 0) isOffset = true;
        var delta = isOffset ? value : value - self.currentMonth;
        if (delta < 0 && self._hidePrevMonthArrow === true || delta > 0 && self._hideNextMonthArrow === true) return;
        self.currentMonth += delta;
        if (self.currentMonth < 0 || self.currentMonth > 11) {
            self.currentYear += self.currentMonth > 11 ? 1 : -1;
            self.currentMonth = (self.currentMonth + 12) % 12;
            triggerEvent("onYearChange");
            buildMonthSwitch();
        }
        buildDays();
        triggerEvent("onMonthChange");
        updateNavigationCurrentMonth();
    }
    function clear(triggerChangeEvent, toInitial) {
        if (triggerChangeEvent === void 0) triggerChangeEvent = true;
        if (toInitial === void 0) toInitial = true;
        self.input.value = "";
        if (self.altInput !== undefined) self.altInput.value = "";
        if (self.mobileInput !== undefined) self.mobileInput.value = "";
        self.selectedDates = [];
        self.latestSelectedDateObj = undefined;
        if (toInitial === true) {
            self.currentYear = self._initialDate.getFullYear();
            self.currentMonth = self._initialDate.getMonth();
        }
        if (self.config.enableTime === true) {
            var _a = (0, _dates.getDefaultHours)(self.config), hours = _a.hours, minutes = _a.minutes, seconds = _a.seconds;
            setHours(hours, minutes, seconds);
        }
        self.redraw();
        if (triggerChangeEvent) triggerEvent("onChange");
    }
    function close() {
        self.isOpen = false;
        if (!self.isMobile) {
            if (self.calendarContainer !== undefined) self.calendarContainer.classList.remove("open");
            if (self._input !== undefined) self._input.classList.remove("active");
        }
        triggerEvent("onClose");
    }
    function destroy() {
        if (self.config !== undefined) triggerEvent("onDestroy");
        for(var i = self._handlers.length; i--;)self._handlers[i].remove();
        self._handlers = [];
        if (self.mobileInput) {
            if (self.mobileInput.parentNode) self.mobileInput.parentNode.removeChild(self.mobileInput);
            self.mobileInput = undefined;
        } else if (self.calendarContainer && self.calendarContainer.parentNode) {
            if (self.config.static && self.calendarContainer.parentNode) {
                var wrapper = self.calendarContainer.parentNode;
                wrapper.lastChild && wrapper.removeChild(wrapper.lastChild);
                if (wrapper.parentNode) {
                    while(wrapper.firstChild)wrapper.parentNode.insertBefore(wrapper.firstChild, wrapper);
                    wrapper.parentNode.removeChild(wrapper);
                }
            } else self.calendarContainer.parentNode.removeChild(self.calendarContainer);
        }
        if (self.altInput) {
            self.input.type = "text";
            if (self.altInput.parentNode) self.altInput.parentNode.removeChild(self.altInput);
            delete self.altInput;
        }
        if (self.input) {
            self.input.type = self.input._type;
            self.input.classList.remove("flatpickr-input");
            self.input.removeAttribute("readonly");
        }
        [
            "_showTimeInput",
            "latestSelectedDateObj",
            "_hideNextMonthArrow",
            "_hidePrevMonthArrow",
            "__hideNextMonthArrow",
            "__hidePrevMonthArrow",
            "isMobile",
            "isOpen",
            "selectedDateElem",
            "minDateHasTime",
            "maxDateHasTime",
            "days",
            "daysContainer",
            "_input",
            "_positionElement",
            "innerContainer",
            "rContainer",
            "monthNav",
            "todayDateElem",
            "calendarContainer",
            "weekdayContainer",
            "prevMonthNav",
            "nextMonthNav",
            "monthsDropdownContainer",
            "currentMonthElement",
            "currentYearElement",
            "navigationCurrentMonth",
            "selectedDateElem",
            "config"
        ].forEach(function(k) {
            try {
                delete self[k];
            } catch (_) {}
        });
    }
    function isCalendarElem(elem) {
        return self.calendarContainer.contains(elem);
    }
    function documentClick(e) {
        if (self.isOpen && !self.config.inline) {
            var eventTarget_1 = (0, _dom.getEventTarget)(e);
            var isCalendarElement = isCalendarElem(eventTarget_1);
            var isInput = eventTarget_1 === self.input || eventTarget_1 === self.altInput || self.element.contains(eventTarget_1) || e.path && e.path.indexOf && (~e.path.indexOf(self.input) || ~e.path.indexOf(self.altInput));
            var lostFocus = !isInput && !isCalendarElement && !isCalendarElem(e.relatedTarget);
            var isIgnored = !self.config.ignoredFocusElements.some(function(elem) {
                return elem.contains(eventTarget_1);
            });
            if (lostFocus && isIgnored) {
                if (self.config.allowInput) self.setDate(self._input.value, false, self.config.altInput ? self.config.altFormat : self.config.dateFormat);
                if (self.timeContainer !== undefined && self.minuteElement !== undefined && self.hourElement !== undefined && self.input.value !== "" && self.input.value !== undefined) updateTime();
                self.close();
                if (self.config && self.config.mode === "range" && self.selectedDates.length === 1) self.clear(false);
            }
        }
    }
    function changeYear(newYear) {
        if (!newYear || self.config.minDate && newYear < self.config.minDate.getFullYear() || self.config.maxDate && newYear > self.config.maxDate.getFullYear()) return;
        var newYearNum = newYear, isNewYear = self.currentYear !== newYearNum;
        self.currentYear = newYearNum || self.currentYear;
        if (self.config.maxDate && self.currentYear === self.config.maxDate.getFullYear()) self.currentMonth = Math.min(self.config.maxDate.getMonth(), self.currentMonth);
        else if (self.config.minDate && self.currentYear === self.config.minDate.getFullYear()) self.currentMonth = Math.max(self.config.minDate.getMonth(), self.currentMonth);
        if (isNewYear) {
            self.redraw();
            triggerEvent("onYearChange");
            buildMonthSwitch();
        }
    }
    function isEnabled(date, timeless) {
        var _a;
        if (timeless === void 0) timeless = true;
        var dateToCheck = self.parseDate(date, undefined, timeless);
        if (self.config.minDate && dateToCheck && (0, _dates.compareDates)(dateToCheck, self.config.minDate, timeless !== undefined ? timeless : !self.minDateHasTime) < 0 || self.config.maxDate && dateToCheck && (0, _dates.compareDates)(dateToCheck, self.config.maxDate, timeless !== undefined ? timeless : !self.maxDateHasTime) > 0) return false;
        if (!self.config.enable && self.config.disable.length === 0) return true;
        if (dateToCheck === undefined) return false;
        var bool = !!self.config.enable, array = (_a = self.config.enable) !== null && _a !== void 0 ? _a : self.config.disable;
        for(var i = 0, d = void 0; i < array.length; i++){
            d = array[i];
            if (typeof d === "function" && d(dateToCheck)) return bool;
            else if (d instanceof Date && dateToCheck !== undefined && d.getTime() === dateToCheck.getTime()) return bool;
            else if (typeof d === "string") {
                var parsed = self.parseDate(d, undefined, true);
                return parsed && parsed.getTime() === dateToCheck.getTime() ? bool : !bool;
            } else if (typeof d === "object" && dateToCheck !== undefined && d.from && d.to && dateToCheck.getTime() >= d.from.getTime() && dateToCheck.getTime() <= d.to.getTime()) return bool;
        }
        return !bool;
    }
    function isInView(elem) {
        if (self.daysContainer !== undefined) return elem.className.indexOf("hidden") === -1 && elem.className.indexOf("flatpickr-disabled") === -1 && self.daysContainer.contains(elem);
        return false;
    }
    function onBlur(e) {
        var isInput = e.target === self._input;
        var valueChanged = self._input.value.trimEnd() !== getDateStr();
        if (isInput && valueChanged && !(e.relatedTarget && isCalendarElem(e.relatedTarget))) self.setDate(self._input.value, true, e.target === self.altInput ? self.config.altFormat : self.config.dateFormat);
    }
    function onKeyDown(e) {
        var eventTarget = (0, _dom.getEventTarget)(e);
        var isInput = self.config.wrap ? element.contains(eventTarget) : eventTarget === self._input;
        var allowInput = self.config.allowInput;
        var allowKeydown = self.isOpen && (!allowInput || !isInput);
        var allowInlineKeydown = self.config.inline && isInput && !allowInput;
        if (e.keyCode === 13 && isInput) {
            if (allowInput) {
                self.setDate(self._input.value, true, eventTarget === self.altInput ? self.config.altFormat : self.config.dateFormat);
                self.close();
                return eventTarget.blur();
            } else self.open();
        } else if (isCalendarElem(eventTarget) || allowKeydown || allowInlineKeydown) {
            var isTimeObj = !!self.timeContainer && self.timeContainer.contains(eventTarget);
            switch(e.keyCode){
                case 13:
                    if (isTimeObj) {
                        e.preventDefault();
                        updateTime();
                        focusAndClose();
                    } else selectDate(e);
                    break;
                case 27:
                    e.preventDefault();
                    focusAndClose();
                    break;
                case 8:
                case 46:
                    if (isInput && !self.config.allowInput) {
                        e.preventDefault();
                        self.clear();
                    }
                    break;
                case 37:
                case 39:
                    if (!isTimeObj && !isInput) {
                        e.preventDefault();
                        var activeElement = getClosestActiveElement();
                        if (self.daysContainer !== undefined && (allowInput === false || activeElement && isInView(activeElement))) {
                            var delta_1 = e.keyCode === 39 ? 1 : -1;
                            if (!e.ctrlKey) focusOnDay(undefined, delta_1);
                            else {
                                e.stopPropagation();
                                changeMonth(delta_1);
                                focusOnDay(getFirstAvailableDay(1), 0);
                            }
                        }
                    } else if (self.hourElement) self.hourElement.focus();
                    break;
                case 38:
                case 40:
                    e.preventDefault();
                    var delta = e.keyCode === 40 ? 1 : -1;
                    if (self.daysContainer && eventTarget.$i !== undefined || eventTarget === self.input || eventTarget === self.altInput) {
                        if (e.ctrlKey) {
                            e.stopPropagation();
                            changeYear(self.currentYear - delta);
                            focusOnDay(getFirstAvailableDay(1), 0);
                        } else if (!isTimeObj) focusOnDay(undefined, delta * 7);
                    } else if (eventTarget === self.currentYearElement) changeYear(self.currentYear - delta);
                    else if (self.config.enableTime) {
                        if (!isTimeObj && self.hourElement) self.hourElement.focus();
                        updateTime(e);
                        self._debouncedChange();
                    }
                    break;
                case 9:
                    if (isTimeObj) {
                        var elems = [
                            self.hourElement,
                            self.minuteElement,
                            self.secondElement,
                            self.amPM
                        ].concat(self.pluginElements).filter(function(x) {
                            return x;
                        });
                        var i = elems.indexOf(eventTarget);
                        if (i !== -1) {
                            var target = elems[i + (e.shiftKey ? -1 : 1)];
                            e.preventDefault();
                            (target || self._input).focus();
                        }
                    } else if (!self.config.noCalendar && self.daysContainer && self.daysContainer.contains(eventTarget) && e.shiftKey) {
                        e.preventDefault();
                        self._input.focus();
                    }
                    break;
                default:
                    break;
            }
        }
        if (self.amPM !== undefined && eventTarget === self.amPM) switch(e.key){
            case self.l10n.amPM[0].charAt(0):
            case self.l10n.amPM[0].charAt(0).toLowerCase():
                self.amPM.textContent = self.l10n.amPM[0];
                setHoursFromInputs();
                updateValue();
                break;
            case self.l10n.amPM[1].charAt(0):
            case self.l10n.amPM[1].charAt(0).toLowerCase():
                self.amPM.textContent = self.l10n.amPM[1];
                setHoursFromInputs();
                updateValue();
                break;
        }
        if (isInput || isCalendarElem(eventTarget)) triggerEvent("onKeyDown", e);
    }
    function onMouseOver(elem, cellClass) {
        if (cellClass === void 0) cellClass = "flatpickr-day";
        if (self.selectedDates.length !== 1 || elem && (!elem.classList.contains(cellClass) || elem.classList.contains("flatpickr-disabled"))) return;
        var hoverDate = elem ? elem.dateObj.getTime() : self.days.firstElementChild.dateObj.getTime(), initialDate = self.parseDate(self.selectedDates[0], undefined, true).getTime(), rangeStartDate = Math.min(hoverDate, self.selectedDates[0].getTime()), rangeEndDate = Math.max(hoverDate, self.selectedDates[0].getTime());
        var containsDisabled = false;
        var minRange = 0, maxRange = 0;
        for(var t = rangeStartDate; t < rangeEndDate; t += (0, _dates.duration).DAY)if (!isEnabled(new Date(t), true)) {
            containsDisabled = containsDisabled || t > rangeStartDate && t < rangeEndDate;
            if (t < initialDate && (!minRange || t > minRange)) minRange = t;
            else if (t > initialDate && (!maxRange || t < maxRange)) maxRange = t;
        }
        var hoverableCells = Array.from(self.rContainer.querySelectorAll("*:nth-child(-n+" + self.config.showMonths + ") > ." + cellClass));
        hoverableCells.forEach(function(dayElem) {
            var date = dayElem.dateObj;
            var timestamp = date.getTime();
            var outOfRange = minRange > 0 && timestamp < minRange || maxRange > 0 && timestamp > maxRange;
            if (outOfRange) {
                dayElem.classList.add("notAllowed");
                [
                    "inRange",
                    "startRange",
                    "endRange"
                ].forEach(function(c) {
                    dayElem.classList.remove(c);
                });
                return;
            } else if (containsDisabled && !outOfRange) return;
            [
                "startRange",
                "inRange",
                "endRange",
                "notAllowed"
            ].forEach(function(c) {
                dayElem.classList.remove(c);
            });
            if (elem !== undefined) {
                elem.classList.add(hoverDate <= self.selectedDates[0].getTime() ? "startRange" : "endRange");
                if (initialDate < hoverDate && timestamp === initialDate) dayElem.classList.add("startRange");
                else if (initialDate > hoverDate && timestamp === initialDate) dayElem.classList.add("endRange");
                if (timestamp >= minRange && (maxRange === 0 || timestamp <= maxRange) && (0, _dates.isBetween)(timestamp, initialDate, hoverDate)) dayElem.classList.add("inRange");
            }
        });
    }
    function onResize() {
        if (self.isOpen && !self.config.static && !self.config.inline) positionCalendar();
    }
    function open(e, positionElement) {
        if (positionElement === void 0) positionElement = self._positionElement;
        if (self.isMobile === true) {
            if (e) {
                e.preventDefault();
                var eventTarget = (0, _dom.getEventTarget)(e);
                if (eventTarget) eventTarget.blur();
            }
            if (self.mobileInput !== undefined) {
                self.mobileInput.focus();
                self.mobileInput.click();
            }
            triggerEvent("onOpen");
            return;
        } else if (self._input.disabled || self.config.inline) return;
        var wasOpen = self.isOpen;
        self.isOpen = true;
        if (!wasOpen) {
            self.calendarContainer.classList.add("open");
            self._input.classList.add("active");
            triggerEvent("onOpen");
            positionCalendar(positionElement);
        }
        if (self.config.enableTime === true && self.config.noCalendar === true) {
            if (self.config.allowInput === false && (e === undefined || !self.timeContainer.contains(e.relatedTarget))) setTimeout(function() {
                return self.hourElement.select();
            }, 50);
        }
    }
    function minMaxDateSetter(type) {
        return function(date) {
            var dateObj = self.config["_" + type + "Date"] = self.parseDate(date, self.config.dateFormat);
            var inverseDateObj = self.config["_" + (type === "min" ? "max" : "min") + "Date"];
            if (dateObj !== undefined) self[type === "min" ? "minDateHasTime" : "maxDateHasTime"] = dateObj.getHours() > 0 || dateObj.getMinutes() > 0 || dateObj.getSeconds() > 0;
            if (self.selectedDates) {
                self.selectedDates = self.selectedDates.filter(function(d) {
                    return isEnabled(d);
                });
                if (!self.selectedDates.length && type === "min") setHoursFromDate(dateObj);
                updateValue();
            }
            if (self.daysContainer) {
                redraw();
                if (dateObj !== undefined) self.currentYearElement[type] = dateObj.getFullYear().toString();
                else self.currentYearElement.removeAttribute(type);
                self.currentYearElement.disabled = !!inverseDateObj && dateObj !== undefined && inverseDateObj.getFullYear() === dateObj.getFullYear();
            }
        };
    }
    function parseConfig() {
        var boolOpts = [
            "wrap",
            "weekNumbers",
            "allowInput",
            "allowInvalidPreload",
            "clickOpens",
            "time_24hr",
            "enableTime",
            "noCalendar",
            "altInput",
            "shorthandCurrentMonth",
            "inline",
            "static",
            "enableSeconds",
            "disableMobile"
        ];
        var userConfig = __assign(__assign({}, JSON.parse(JSON.stringify(element.dataset || {}))), instanceConfig);
        var formats = {};
        self.config.parseDate = userConfig.parseDate;
        self.config.formatDate = userConfig.formatDate;
        Object.defineProperty(self.config, "enable", {
            get: function() {
                return self.config._enable;
            },
            set: function(dates) {
                self.config._enable = parseDateRules(dates);
            }
        });
        Object.defineProperty(self.config, "disable", {
            get: function() {
                return self.config._disable;
            },
            set: function(dates) {
                self.config._disable = parseDateRules(dates);
            }
        });
        var timeMode = userConfig.mode === "time";
        if (!userConfig.dateFormat && (userConfig.enableTime || timeMode)) {
            var defaultDateFormat = flatpickr.defaultConfig.dateFormat || (0, _options.defaults).dateFormat;
            formats.dateFormat = userConfig.noCalendar || timeMode ? "H:i" + (userConfig.enableSeconds ? ":S" : "") : defaultDateFormat + " H:i" + (userConfig.enableSeconds ? ":S" : "");
        }
        if (userConfig.altInput && (userConfig.enableTime || timeMode) && !userConfig.altFormat) {
            var defaultAltFormat = flatpickr.defaultConfig.altFormat || (0, _options.defaults).altFormat;
            formats.altFormat = userConfig.noCalendar || timeMode ? "h:i" + (userConfig.enableSeconds ? ":S K" : " K") : defaultAltFormat + (" h:i" + (userConfig.enableSeconds ? ":S" : "") + " K");
        }
        Object.defineProperty(self.config, "minDate", {
            get: function() {
                return self.config._minDate;
            },
            set: minMaxDateSetter("min")
        });
        Object.defineProperty(self.config, "maxDate", {
            get: function() {
                return self.config._maxDate;
            },
            set: minMaxDateSetter("max")
        });
        var minMaxTimeSetter = function(type) {
            return function(val) {
                self.config[type === "min" ? "_minTime" : "_maxTime"] = self.parseDate(val, "H:i:S");
            };
        };
        Object.defineProperty(self.config, "minTime", {
            get: function() {
                return self.config._minTime;
            },
            set: minMaxTimeSetter("min")
        });
        Object.defineProperty(self.config, "maxTime", {
            get: function() {
                return self.config._maxTime;
            },
            set: minMaxTimeSetter("max")
        });
        if (userConfig.mode === "time") {
            self.config.noCalendar = true;
            self.config.enableTime = true;
        }
        Object.assign(self.config, formats, userConfig);
        for(var i = 0; i < boolOpts.length; i++)self.config[boolOpts[i]] = self.config[boolOpts[i]] === true || self.config[boolOpts[i]] === "true";
        (0, _options.HOOKS).filter(function(hook) {
            return self.config[hook] !== undefined;
        }).forEach(function(hook) {
            self.config[hook] = (0, _utils.arrayify)(self.config[hook] || []).map(bindToInstance);
        });
        self.isMobile = !self.config.disableMobile && !self.config.inline && self.config.mode === "single" && !self.config.disable.length && !self.config.enable && !self.config.weekNumbers && /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
        for(var i = 0; i < self.config.plugins.length; i++){
            var pluginConf = self.config.plugins[i](self) || {};
            for(var key in pluginConf){
                if ((0, _options.HOOKS).indexOf(key) > -1) self.config[key] = (0, _utils.arrayify)(pluginConf[key]).map(bindToInstance).concat(self.config[key]);
                else if (typeof userConfig[key] === "undefined") self.config[key] = pluginConf[key];
            }
        }
        if (!userConfig.altInputClass) self.config.altInputClass = getInputElem().className + " " + self.config.altInputClass;
        triggerEvent("onParseConfig");
    }
    function getInputElem() {
        return self.config.wrap ? element.querySelector("[data-input]") : element;
    }
    function setupLocale() {
        if (typeof self.config.locale !== "object" && typeof flatpickr.l10ns[self.config.locale] === "undefined") self.config.errorHandler(new Error("flatpickr: invalid locale " + self.config.locale));
        self.l10n = __assign(__assign({}, flatpickr.l10ns.default), typeof self.config.locale === "object" ? self.config.locale : self.config.locale !== "default" ? flatpickr.l10ns[self.config.locale] : undefined);
        (0, _formatting.tokenRegex).D = "(" + self.l10n.weekdays.shorthand.join("|") + ")";
        (0, _formatting.tokenRegex).l = "(" + self.l10n.weekdays.longhand.join("|") + ")";
        (0, _formatting.tokenRegex).M = "(" + self.l10n.months.shorthand.join("|") + ")";
        (0, _formatting.tokenRegex).F = "(" + self.l10n.months.longhand.join("|") + ")";
        (0, _formatting.tokenRegex).K = "(" + self.l10n.amPM[0] + "|" + self.l10n.amPM[1] + "|" + self.l10n.amPM[0].toLowerCase() + "|" + self.l10n.amPM[1].toLowerCase() + ")";
        var userConfig = __assign(__assign({}, instanceConfig), JSON.parse(JSON.stringify(element.dataset || {})));
        if (userConfig.time_24hr === undefined && flatpickr.defaultConfig.time_24hr === undefined) self.config.time_24hr = self.l10n.time_24hr;
        self.formatDate = (0, _dates.createDateFormatter)(self);
        self.parseDate = (0, _dates.createDateParser)({
            config: self.config,
            l10n: self.l10n
        });
    }
    function positionCalendar(customPositionElement) {
        if (typeof self.config.position === "function") return void self.config.position(self, customPositionElement);
        if (self.calendarContainer === undefined) return;
        triggerEvent("onPreCalendarPosition");
        var positionElement = customPositionElement || self._positionElement;
        var calendarHeight = Array.prototype.reduce.call(self.calendarContainer.children, function(acc, child) {
            return acc + child.offsetHeight;
        }, 0), calendarWidth = self.calendarContainer.offsetWidth, configPos = self.config.position.split(" "), configPosVertical = configPos[0], configPosHorizontal = configPos.length > 1 ? configPos[1] : null, inputBounds = positionElement.getBoundingClientRect(), distanceFromBottom = window.innerHeight - inputBounds.bottom, showOnTop = configPosVertical === "above" || configPosVertical !== "below" && distanceFromBottom < calendarHeight && inputBounds.top > calendarHeight;
        var top = window.pageYOffset + inputBounds.top + (!showOnTop ? positionElement.offsetHeight + 2 : -calendarHeight - 2);
        (0, _dom.toggleClass)(self.calendarContainer, "arrowTop", !showOnTop);
        (0, _dom.toggleClass)(self.calendarContainer, "arrowBottom", showOnTop);
        if (self.config.inline) return;
        var left = window.pageXOffset + inputBounds.left;
        var isCenter = false;
        var isRight = false;
        if (configPosHorizontal === "center") {
            left -= (calendarWidth - inputBounds.width) / 2;
            isCenter = true;
        } else if (configPosHorizontal === "right") {
            left -= calendarWidth - inputBounds.width;
            isRight = true;
        }
        (0, _dom.toggleClass)(self.calendarContainer, "arrowLeft", !isCenter && !isRight);
        (0, _dom.toggleClass)(self.calendarContainer, "arrowCenter", isCenter);
        (0, _dom.toggleClass)(self.calendarContainer, "arrowRight", isRight);
        var right = window.document.body.offsetWidth - (window.pageXOffset + inputBounds.right);
        var rightMost = left + calendarWidth > window.document.body.offsetWidth;
        var centerMost = right + calendarWidth > window.document.body.offsetWidth;
        (0, _dom.toggleClass)(self.calendarContainer, "rightMost", rightMost);
        if (self.config.static) return;
        self.calendarContainer.style.top = top + "px";
        if (!rightMost) {
            self.calendarContainer.style.left = left + "px";
            self.calendarContainer.style.right = "auto";
        } else if (!centerMost) {
            self.calendarContainer.style.left = "auto";
            self.calendarContainer.style.right = right + "px";
        } else {
            var doc = getDocumentStyleSheet();
            if (doc === undefined) return;
            var bodyWidth = window.document.body.offsetWidth;
            var centerLeft = Math.max(0, bodyWidth / 2 - calendarWidth / 2);
            var centerBefore = ".flatpickr-calendar.centerMost:before";
            var centerAfter = ".flatpickr-calendar.centerMost:after";
            var centerIndex = doc.cssRules.length;
            var centerStyle = "{left:" + inputBounds.left + "px;right:auto;}";
            (0, _dom.toggleClass)(self.calendarContainer, "rightMost", false);
            (0, _dom.toggleClass)(self.calendarContainer, "centerMost", true);
            doc.insertRule(centerBefore + "," + centerAfter + centerStyle, centerIndex);
            self.calendarContainer.style.left = centerLeft + "px";
            self.calendarContainer.style.right = "auto";
        }
    }
    function getDocumentStyleSheet() {
        var editableSheet = null;
        for(var i = 0; i < document.styleSheets.length; i++){
            var sheet = document.styleSheets[i];
            if (!sheet.cssRules) continue;
            try {
                sheet.cssRules;
            } catch (err) {
                continue;
            }
            editableSheet = sheet;
            break;
        }
        return editableSheet != null ? editableSheet : createStyleSheet();
    }
    function createStyleSheet() {
        var style = document.createElement("style");
        document.head.appendChild(style);
        return style.sheet;
    }
    function redraw() {
        if (self.config.noCalendar || self.isMobile) return;
        buildMonthSwitch();
        updateNavigationCurrentMonth();
        buildDays();
    }
    function focusAndClose() {
        self._input.focus();
        if (window.navigator.userAgent.indexOf("MSIE") !== -1 || navigator.msMaxTouchPoints !== undefined) setTimeout(self.close, 0);
        else self.close();
    }
    function selectDate(e) {
        e.preventDefault();
        e.stopPropagation();
        var isSelectable = function(day) {
            return day.classList && day.classList.contains("flatpickr-day") && !day.classList.contains("flatpickr-disabled") && !day.classList.contains("notAllowed");
        };
        var t = (0, _dom.findParent)((0, _dom.getEventTarget)(e), isSelectable);
        if (t === undefined) return;
        var target = t;
        var selectedDate = self.latestSelectedDateObj = new Date(target.dateObj.getTime());
        var shouldChangeMonth = (selectedDate.getMonth() < self.currentMonth || selectedDate.getMonth() > self.currentMonth + self.config.showMonths - 1) && self.config.mode !== "range";
        self.selectedDateElem = target;
        if (self.config.mode === "single") self.selectedDates = [
            selectedDate
        ];
        else if (self.config.mode === "multiple") {
            var selectedIndex = isDateSelected(selectedDate);
            if (selectedIndex) self.selectedDates.splice(parseInt(selectedIndex), 1);
            else self.selectedDates.push(selectedDate);
        } else if (self.config.mode === "range") {
            if (self.selectedDates.length === 2) self.clear(false, false);
            self.latestSelectedDateObj = selectedDate;
            self.selectedDates.push(selectedDate);
            if ((0, _dates.compareDates)(selectedDate, self.selectedDates[0], true) !== 0) self.selectedDates.sort(function(a, b) {
                return a.getTime() - b.getTime();
            });
        }
        setHoursFromInputs();
        if (shouldChangeMonth) {
            var isNewYear = self.currentYear !== selectedDate.getFullYear();
            self.currentYear = selectedDate.getFullYear();
            self.currentMonth = selectedDate.getMonth();
            if (isNewYear) {
                triggerEvent("onYearChange");
                buildMonthSwitch();
            }
            triggerEvent("onMonthChange");
        }
        updateNavigationCurrentMonth();
        buildDays();
        updateValue();
        if (!shouldChangeMonth && self.config.mode !== "range" && self.config.showMonths === 1) focusOnDayElem(target);
        else if (self.selectedDateElem !== undefined && self.hourElement === undefined) self.selectedDateElem && self.selectedDateElem.focus();
        if (self.hourElement !== undefined) self.hourElement !== undefined && self.hourElement.focus();
        if (self.config.closeOnSelect) {
            var single = self.config.mode === "single" && !self.config.enableTime;
            var range = self.config.mode === "range" && self.selectedDates.length === 2 && !self.config.enableTime;
            if (single || range) focusAndClose();
        }
        triggerChange();
    }
    var CALLBACKS = {
        locale: [
            setupLocale,
            updateWeekdays
        ],
        showMonths: [
            buildMonths,
            setCalendarWidth,
            buildWeekdays
        ],
        minDate: [
            jumpToDate
        ],
        maxDate: [
            jumpToDate
        ],
        positionElement: [
            updatePositionElement
        ],
        clickOpens: [
            function() {
                if (self.config.clickOpens === true) {
                    bind(self._input, "focus", self.open);
                    bind(self._input, "click", self.open);
                } else {
                    self._input.removeEventListener("focus", self.open);
                    self._input.removeEventListener("click", self.open);
                }
            }
        ]
    };
    function set(option, value) {
        if (option !== null && typeof option === "object") {
            Object.assign(self.config, option);
            for(var key in option)if (CALLBACKS[key] !== undefined) CALLBACKS[key].forEach(function(x) {
                return x();
            });
        } else {
            self.config[option] = value;
            if (CALLBACKS[option] !== undefined) CALLBACKS[option].forEach(function(x) {
                return x();
            });
            else if ((0, _options.HOOKS).indexOf(option) > -1) self.config[option] = (0, _utils.arrayify)(value);
        }
        self.redraw();
        updateValue(true);
    }
    function setSelectedDate(inputDate, format) {
        var dates = [];
        if (inputDate instanceof Array) dates = inputDate.map(function(d) {
            return self.parseDate(d, format);
        });
        else if (inputDate instanceof Date || typeof inputDate === "number") dates = [
            self.parseDate(inputDate, format)
        ];
        else if (typeof inputDate === "string") switch(self.config.mode){
            case "single":
            case "time":
                dates = [
                    self.parseDate(inputDate, format)
                ];
                break;
            case "multiple":
                dates = inputDate.split(self.config.conjunction).map(function(date) {
                    return self.parseDate(date, format);
                });
                break;
            case "range":
                dates = inputDate.split(self.l10n.rangeSeparator).map(function(date) {
                    return self.parseDate(date, format);
                });
                break;
            default:
                break;
        }
        else self.config.errorHandler(new Error("Invalid date supplied: " + JSON.stringify(inputDate)));
        self.selectedDates = self.config.allowInvalidPreload ? dates : dates.filter(function(d) {
            return d instanceof Date && isEnabled(d, false);
        });
        if (self.config.mode === "range") self.selectedDates.sort(function(a, b) {
            return a.getTime() - b.getTime();
        });
    }
    function setDate(date, triggerChange, format) {
        if (triggerChange === void 0) triggerChange = false;
        if (format === void 0) format = self.config.dateFormat;
        if (date !== 0 && !date || date instanceof Array && date.length === 0) return self.clear(triggerChange);
        setSelectedDate(date, format);
        self.latestSelectedDateObj = self.selectedDates[self.selectedDates.length - 1];
        self.redraw();
        jumpToDate(undefined, triggerChange);
        setHoursFromDate();
        if (self.selectedDates.length === 0) self.clear(false);
        updateValue(triggerChange);
        if (triggerChange) triggerEvent("onChange");
    }
    function parseDateRules(arr) {
        return arr.slice().map(function(rule) {
            if (typeof rule === "string" || typeof rule === "number" || rule instanceof Date) return self.parseDate(rule, undefined, true);
            else if (rule && typeof rule === "object" && rule.from && rule.to) return {
                from: self.parseDate(rule.from, undefined),
                to: self.parseDate(rule.to, undefined)
            };
            return rule;
        }).filter(function(x) {
            return x;
        });
    }
    function setupDates() {
        self.selectedDates = [];
        self.now = self.parseDate(self.config.now) || new Date();
        var preloadedDate = self.config.defaultDate || ((self.input.nodeName === "INPUT" || self.input.nodeName === "TEXTAREA") && self.input.placeholder && self.input.value === self.input.placeholder ? null : self.input.value);
        if (preloadedDate) setSelectedDate(preloadedDate, self.config.dateFormat);
        self._initialDate = self.selectedDates.length > 0 ? self.selectedDates[0] : self.config.minDate && self.config.minDate.getTime() > self.now.getTime() ? self.config.minDate : self.config.maxDate && self.config.maxDate.getTime() < self.now.getTime() ? self.config.maxDate : self.now;
        self.currentYear = self._initialDate.getFullYear();
        self.currentMonth = self._initialDate.getMonth();
        if (self.selectedDates.length > 0) self.latestSelectedDateObj = self.selectedDates[0];
        if (self.config.minTime !== undefined) self.config.minTime = self.parseDate(self.config.minTime, "H:i");
        if (self.config.maxTime !== undefined) self.config.maxTime = self.parseDate(self.config.maxTime, "H:i");
        self.minDateHasTime = !!self.config.minDate && (self.config.minDate.getHours() > 0 || self.config.minDate.getMinutes() > 0 || self.config.minDate.getSeconds() > 0);
        self.maxDateHasTime = !!self.config.maxDate && (self.config.maxDate.getHours() > 0 || self.config.maxDate.getMinutes() > 0 || self.config.maxDate.getSeconds() > 0);
    }
    function setupInputs() {
        self.input = getInputElem();
        if (!self.input) {
            self.config.errorHandler(new Error("Invalid input element specified"));
            return;
        }
        self.input._type = self.input.type;
        self.input.type = "text";
        self.input.classList.add("flatpickr-input");
        self._input = self.input;
        if (self.config.altInput) {
            self.altInput = (0, _dom.createElement)(self.input.nodeName, self.config.altInputClass);
            self._input = self.altInput;
            self.altInput.placeholder = self.input.placeholder;
            self.altInput.disabled = self.input.disabled;
            self.altInput.required = self.input.required;
            self.altInput.tabIndex = self.input.tabIndex;
            self.altInput.type = "text";
            self.input.setAttribute("type", "hidden");
            if (!self.config.static && self.input.parentNode) self.input.parentNode.insertBefore(self.altInput, self.input.nextSibling);
        }
        if (!self.config.allowInput) self._input.setAttribute("readonly", "readonly");
        updatePositionElement();
    }
    function updatePositionElement() {
        self._positionElement = self.config.positionElement || self._input;
    }
    function setupMobile() {
        var inputType = self.config.enableTime ? self.config.noCalendar ? "time" : "datetime-local" : "date";
        self.mobileInput = (0, _dom.createElement)("input", self.input.className + " flatpickr-mobile");
        self.mobileInput.tabIndex = 1;
        self.mobileInput.type = inputType;
        self.mobileInput.disabled = self.input.disabled;
        self.mobileInput.required = self.input.required;
        self.mobileInput.placeholder = self.input.placeholder;
        self.mobileFormatStr = inputType === "datetime-local" ? "Y-m-d\\TH:i:S" : inputType === "date" ? "Y-m-d" : "H:i:S";
        if (self.selectedDates.length > 0) self.mobileInput.defaultValue = self.mobileInput.value = self.formatDate(self.selectedDates[0], self.mobileFormatStr);
        if (self.config.minDate) self.mobileInput.min = self.formatDate(self.config.minDate, "Y-m-d");
        if (self.config.maxDate) self.mobileInput.max = self.formatDate(self.config.maxDate, "Y-m-d");
        if (self.input.getAttribute("step")) self.mobileInput.step = String(self.input.getAttribute("step"));
        self.input.type = "hidden";
        if (self.altInput !== undefined) self.altInput.type = "hidden";
        try {
            if (self.input.parentNode) self.input.parentNode.insertBefore(self.mobileInput, self.input.nextSibling);
        } catch (_a) {}
        bind(self.mobileInput, "change", function(e) {
            self.setDate((0, _dom.getEventTarget)(e).value, false, self.mobileFormatStr);
            triggerEvent("onChange");
            triggerEvent("onClose");
        });
    }
    function toggle(e) {
        if (self.isOpen === true) return self.close();
        self.open(e);
    }
    function triggerEvent(event, data) {
        if (self.config === undefined) return;
        var hooks = self.config[event];
        if (hooks !== undefined && hooks.length > 0) for(var i = 0; hooks[i] && i < hooks.length; i++)hooks[i](self.selectedDates, self.input.value, self, data);
        if (event === "onChange") {
            self.input.dispatchEvent(createEvent("change"));
            self.input.dispatchEvent(createEvent("input"));
        }
    }
    function createEvent(name) {
        var e = document.createEvent("Event");
        e.initEvent(name, true, true);
        return e;
    }
    function isDateSelected(date) {
        for(var i = 0; i < self.selectedDates.length; i++){
            var selectedDate = self.selectedDates[i];
            if (selectedDate instanceof Date && (0, _dates.compareDates)(selectedDate, date) === 0) return "" + i;
        }
        return false;
    }
    function isDateInRange(date) {
        if (self.config.mode !== "range" || self.selectedDates.length < 2) return false;
        return (0, _dates.compareDates)(date, self.selectedDates[0]) >= 0 && (0, _dates.compareDates)(date, self.selectedDates[1]) <= 0;
    }
    function updateNavigationCurrentMonth() {
        if (self.config.noCalendar || self.isMobile || !self.monthNav) return;
        self.yearElements.forEach(function(yearElement, i) {
            var d = new Date(self.currentYear, self.currentMonth, 1);
            d.setMonth(self.currentMonth + i);
            if (self.config.showMonths > 1 || self.config.monthSelectorType === "static") self.monthElements[i].textContent = (0, _formatting.monthToStr)(d.getMonth(), self.config.shorthandCurrentMonth, self.l10n) + " ";
            else self.monthsDropdownContainer.value = d.getMonth().toString();
            yearElement.value = d.getFullYear().toString();
        });
        self._hidePrevMonthArrow = self.config.minDate !== undefined && (self.currentYear === self.config.minDate.getFullYear() ? self.currentMonth <= self.config.minDate.getMonth() : self.currentYear < self.config.minDate.getFullYear());
        self._hideNextMonthArrow = self.config.maxDate !== undefined && (self.currentYear === self.config.maxDate.getFullYear() ? self.currentMonth + 1 > self.config.maxDate.getMonth() : self.currentYear > self.config.maxDate.getFullYear());
    }
    function getDateStr(specificFormat) {
        var format = specificFormat || (self.config.altInput ? self.config.altFormat : self.config.dateFormat);
        return self.selectedDates.map(function(dObj) {
            return self.formatDate(dObj, format);
        }).filter(function(d, i, arr) {
            return self.config.mode !== "range" || self.config.enableTime || arr.indexOf(d) === i;
        }).join(self.config.mode !== "range" ? self.config.conjunction : self.l10n.rangeSeparator);
    }
    function updateValue(triggerChange) {
        if (triggerChange === void 0) triggerChange = true;
        if (self.mobileInput !== undefined && self.mobileFormatStr) self.mobileInput.value = self.latestSelectedDateObj !== undefined ? self.formatDate(self.latestSelectedDateObj, self.mobileFormatStr) : "";
        self.input.value = getDateStr(self.config.dateFormat);
        if (self.altInput !== undefined) self.altInput.value = getDateStr(self.config.altFormat);
        if (triggerChange !== false) triggerEvent("onValueUpdate");
    }
    function onMonthNavClick(e) {
        var eventTarget = (0, _dom.getEventTarget)(e);
        var isPrevMonth = self.prevMonthNav.contains(eventTarget);
        var isNextMonth = self.nextMonthNav.contains(eventTarget);
        if (isPrevMonth || isNextMonth) changeMonth(isPrevMonth ? -1 : 1);
        else if (self.yearElements.indexOf(eventTarget) >= 0) eventTarget.select();
        else if (eventTarget.classList.contains("arrowUp")) self.changeYear(self.currentYear + 1);
        else if (eventTarget.classList.contains("arrowDown")) self.changeYear(self.currentYear - 1);
    }
    function timeWrapper(e) {
        e.preventDefault();
        var isKeyDown = e.type === "keydown", eventTarget = (0, _dom.getEventTarget)(e), input = eventTarget;
        if (self.amPM !== undefined && eventTarget === self.amPM) self.amPM.textContent = self.l10n.amPM[(0, _utils.int)(self.amPM.textContent === self.l10n.amPM[0])];
        var min = parseFloat(input.getAttribute("min")), max = parseFloat(input.getAttribute("max")), step = parseFloat(input.getAttribute("step")), curValue = parseInt(input.value, 10), delta = e.delta || (isKeyDown ? e.which === 38 ? 1 : -1 : 0);
        var newValue = curValue + step * delta;
        if (typeof input.value !== "undefined" && input.value.length === 2) {
            var isHourElem = input === self.hourElement, isMinuteElem = input === self.minuteElement;
            if (newValue < min) {
                newValue = max + newValue + (0, _utils.int)(!isHourElem) + ((0, _utils.int)(isHourElem) && (0, _utils.int)(!self.amPM));
                if (isMinuteElem) incrementNumInput(undefined, -1, self.hourElement);
            } else if (newValue > max) {
                newValue = input === self.hourElement ? newValue - max - (0, _utils.int)(!self.amPM) : min;
                if (isMinuteElem) incrementNumInput(undefined, 1, self.hourElement);
            }
            if (self.amPM && isHourElem && (step === 1 ? newValue + curValue === 23 : Math.abs(newValue - curValue) > step)) self.amPM.textContent = self.l10n.amPM[(0, _utils.int)(self.amPM.textContent === self.l10n.amPM[0])];
            input.value = (0, _utils.pad)(newValue);
        }
    }
    init();
    return self;
}
function _flatpickr(nodeList, config) {
    var nodes = Array.prototype.slice.call(nodeList).filter(function(x) {
        return x instanceof HTMLElement;
    });
    var instances = [];
    for(var i = 0; i < nodes.length; i++){
        var node = nodes[i];
        try {
            if (node.getAttribute("data-fp-omit") !== null) continue;
            if (node._flatpickr !== undefined) {
                node._flatpickr.destroy();
                node._flatpickr = undefined;
            }
            node._flatpickr = FlatpickrInstance(node, config || {});
            instances.push(node._flatpickr);
        } catch (e) {
            console.error(e);
        }
    }
    return instances.length === 1 ? instances[0] : instances;
}
if (typeof HTMLElement !== "undefined" && typeof HTMLCollection !== "undefined" && typeof NodeList !== "undefined") {
    HTMLCollection.prototype.flatpickr = NodeList.prototype.flatpickr = function(config) {
        return _flatpickr(this, config);
    };
    HTMLElement.prototype.flatpickr = function(config) {
        return _flatpickr([
            this
        ], config);
    };
}
var flatpickr = function(selector, config) {
    if (typeof selector === "string") return _flatpickr(window.document.querySelectorAll(selector), config);
    else if (selector instanceof Node) return _flatpickr([
        selector
    ], config);
    else return _flatpickr(selector, config);
};
flatpickr.defaultConfig = {};
flatpickr.l10ns = {
    en: __assign({}, (0, _defaultDefault.default)),
    default: __assign({}, (0, _defaultDefault.default))
};
flatpickr.localize = function(l10n) {
    flatpickr.l10ns.default = __assign(__assign({}, flatpickr.l10ns.default), l10n);
};
flatpickr.setDefaults = function(config) {
    flatpickr.defaultConfig = __assign(__assign({}, flatpickr.defaultConfig), config);
};
flatpickr.parseDate = (0, _dates.createDateParser)({});
flatpickr.formatDate = (0, _dates.createDateFormatter)({});
flatpickr.compareDates = (0, _dates.compareDates);
if (typeof jQuery !== "undefined" && typeof jQuery.fn !== "undefined") jQuery.fn.flatpickr = function(config) {
    return _flatpickr(this, config);
};
Date.prototype.fp_incr = function(days) {
    return new Date(this.getFullYear(), this.getMonth(), this.getDate() + (typeof days === "string" ? parseInt(days, 10) : days));
};
if (typeof window !== "undefined") window.flatpickr = flatpickr;
exports.default = flatpickr;

},{"./types/options":"bXtBt","./l10n/default":"fxflw","./utils":"tqkc0","./utils/dom":"eoD9c","./utils/dates":"hioKU","./utils/formatting":"i6nZP","./utils/polyfills":"2RVlY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bXtBt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "HOOKS", ()=>HOOKS);
parcelHelpers.export(exports, "defaults", ()=>defaults);
var HOOKS = [
    "onChange",
    "onClose",
    "onDayCreate",
    "onDestroy",
    "onKeyDown",
    "onMonthChange",
    "onOpen",
    "onParseConfig",
    "onReady",
    "onValueUpdate",
    "onYearChange",
    "onPreCalendarPosition"
];
var defaults = {
    _disable: [],
    allowInput: false,
    allowInvalidPreload: false,
    altFormat: "F j, Y",
    altInput: false,
    altInputClass: "form-control input",
    animate: typeof window === "object" && window.navigator.userAgent.indexOf("MSIE") === -1,
    ariaDateFormat: "F j, Y",
    autoFillDefaultTime: true,
    clickOpens: true,
    closeOnSelect: true,
    conjunction: ", ",
    dateFormat: "Y-m-d",
    defaultHour: 12,
    defaultMinute: 0,
    defaultSeconds: 0,
    disable: [],
    disableMobile: false,
    enableSeconds: false,
    enableTime: false,
    errorHandler: function(err) {
        return typeof console !== "undefined" && console.warn(err);
    },
    getWeek: function(givenDate) {
        var date = new Date(givenDate.getTime());
        date.setHours(0, 0, 0, 0);
        date.setDate(date.getDate() + 3 - (date.getDay() + 6) % 7);
        var week1 = new Date(date.getFullYear(), 0, 4);
        return 1 + Math.round(((date.getTime() - week1.getTime()) / 86400000 - 3 + (week1.getDay() + 6) % 7) / 7);
    },
    hourIncrement: 1,
    ignoredFocusElements: [],
    inline: false,
    locale: "default",
    minuteIncrement: 5,
    mode: "single",
    monthSelectorType: "dropdown",
    nextArrow: "<svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 17 17'><g></g><path d='M13.207 8.472l-7.854 7.854-0.707-0.707 7.146-7.146-7.146-7.148 0.707-0.707 7.854 7.854z' /></svg>",
    noCalendar: false,
    now: new Date(),
    onChange: [],
    onClose: [],
    onDayCreate: [],
    onDestroy: [],
    onKeyDown: [],
    onMonthChange: [],
    onOpen: [],
    onParseConfig: [],
    onReady: [],
    onValueUpdate: [],
    onYearChange: [],
    onPreCalendarPosition: [],
    plugins: [],
    position: "auto",
    positionElement: undefined,
    prevArrow: "<svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 17 17'><g></g><path d='M5.207 8.471l7.146 7.147-0.707 0.707-7.853-7.854 7.854-7.853 0.707 0.707-7.147 7.146z' /></svg>",
    shorthandCurrentMonth: false,
    showMonths: 1,
    static: false,
    time_24hr: false,
    weekNumbers: false,
    wrap: false
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fxflw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "english", ()=>english);
var english = {
    weekdays: {
        shorthand: [
            "Sun",
            "Mon",
            "Tue",
            "Wed",
            "Thu",
            "Fri",
            "Sat"
        ],
        longhand: [
            "Sunday",
            "Monday",
            "Tuesday",
            "Wednesday",
            "Thursday",
            "Friday",
            "Saturday"
        ]
    },
    months: {
        shorthand: [
            "Jan",
            "Feb",
            "Mar",
            "Apr",
            "May",
            "Jun",
            "Jul",
            "Aug",
            "Sep",
            "Oct",
            "Nov",
            "Dec"
        ],
        longhand: [
            "January",
            "February",
            "March",
            "April",
            "May",
            "June",
            "July",
            "August",
            "September",
            "October",
            "November",
            "December"
        ]
    },
    daysInMonth: [
        31,
        28,
        31,
        30,
        31,
        30,
        31,
        31,
        30,
        31,
        30,
        31
    ],
    firstDayOfWeek: 0,
    ordinal: function(nth) {
        var s = nth % 100;
        if (s > 3 && s < 21) return "th";
        switch(s % 10){
            case 1:
                return "st";
            case 2:
                return "nd";
            case 3:
                return "rd";
            default:
                return "th";
        }
    },
    rangeSeparator: " to ",
    weekAbbreviation: "Wk",
    scrollTitle: "Scroll to increment",
    toggleTitle: "Click to toggle",
    amPM: [
        "AM",
        "PM"
    ],
    yearAriaLabel: "Year",
    monthAriaLabel: "Month",
    hourAriaLabel: "Hour",
    minuteAriaLabel: "Minute",
    time_24hr: false
};
exports.default = english;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"tqkc0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "pad", ()=>pad);
parcelHelpers.export(exports, "int", ()=>int);
parcelHelpers.export(exports, "debounce", ()=>debounce);
parcelHelpers.export(exports, "arrayify", ()=>arrayify);
var pad = function(number, length) {
    if (length === void 0) length = 2;
    return ("000" + number).slice(length * -1);
};
var int = function(bool) {
    return bool === true ? 1 : 0;
};
function debounce(fn, wait) {
    var t;
    return function() {
        var _this = this;
        var args = arguments;
        clearTimeout(t);
        t = setTimeout(function() {
            return fn.apply(_this, args);
        }, wait);
    };
}
var arrayify = function(obj) {
    return obj instanceof Array ? obj : [
        obj
    ];
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eoD9c":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "toggleClass", ()=>toggleClass);
parcelHelpers.export(exports, "createElement", ()=>createElement);
parcelHelpers.export(exports, "clearNode", ()=>clearNode);
parcelHelpers.export(exports, "findParent", ()=>findParent);
parcelHelpers.export(exports, "createNumberInput", ()=>createNumberInput);
parcelHelpers.export(exports, "getEventTarget", ()=>getEventTarget);
function toggleClass(elem, className, bool) {
    if (bool === true) return elem.classList.add(className);
    elem.classList.remove(className);
}
function createElement(tag, className, content) {
    var e = window.document.createElement(tag);
    className = className || "";
    content = content || "";
    e.className = className;
    if (content !== undefined) e.textContent = content;
    return e;
}
function clearNode(node) {
    while(node.firstChild)node.removeChild(node.firstChild);
}
function findParent(node, condition) {
    if (condition(node)) return node;
    else if (node.parentNode) return findParent(node.parentNode, condition);
    return undefined;
}
function createNumberInput(inputClassName, opts) {
    var wrapper = createElement("div", "numInputWrapper"), numInput = createElement("input", "numInput " + inputClassName), arrowUp = createElement("span", "arrowUp"), arrowDown = createElement("span", "arrowDown");
    if (navigator.userAgent.indexOf("MSIE 9.0") === -1) numInput.type = "number";
    else {
        numInput.type = "text";
        numInput.pattern = "\\d*";
    }
    if (opts !== undefined) for(var key in opts)numInput.setAttribute(key, opts[key]);
    wrapper.appendChild(numInput);
    wrapper.appendChild(arrowUp);
    wrapper.appendChild(arrowDown);
    return wrapper;
}
function getEventTarget(event) {
    try {
        if (typeof event.composedPath === "function") {
            var path = event.composedPath();
            return path[0];
        }
        return event.target;
    } catch (error) {
        return event.target;
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hioKU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createDateFormatter", ()=>createDateFormatter);
parcelHelpers.export(exports, "createDateParser", ()=>createDateParser);
parcelHelpers.export(exports, "compareDates", ()=>compareDates);
parcelHelpers.export(exports, "compareTimes", ()=>compareTimes);
parcelHelpers.export(exports, "isBetween", ()=>isBetween);
parcelHelpers.export(exports, "calculateSecondsSinceMidnight", ()=>calculateSecondsSinceMidnight);
parcelHelpers.export(exports, "parseSeconds", ()=>parseSeconds);
parcelHelpers.export(exports, "duration", ()=>duration);
parcelHelpers.export(exports, "getDefaultHours", ()=>getDefaultHours);
var _formatting = require("./formatting");
var _options = require("../types/options");
var _default = require("../l10n/default");
var createDateFormatter = function(_a) {
    var _b = _a.config, config = _b === void 0 ? (0, _options.defaults) : _b, _c = _a.l10n, l10n = _c === void 0 ? (0, _default.english) : _c, _d = _a.isMobile, isMobile = _d === void 0 ? false : _d;
    return function(dateObj, frmt, overrideLocale) {
        var locale = overrideLocale || l10n;
        if (config.formatDate !== undefined && !isMobile) return config.formatDate(dateObj, frmt, locale);
        return frmt.split("").map(function(c, i, arr) {
            return (0, _formatting.formats)[c] && arr[i - 1] !== "\\" ? (0, _formatting.formats)[c](dateObj, locale, config) : c !== "\\" ? c : "";
        }).join("");
    };
};
var createDateParser = function(_a) {
    var _b = _a.config, config = _b === void 0 ? (0, _options.defaults) : _b, _c = _a.l10n, l10n = _c === void 0 ? (0, _default.english) : _c;
    return function(date, givenFormat, timeless, customLocale) {
        if (date !== 0 && !date) return undefined;
        var locale = customLocale || l10n;
        var parsedDate;
        var dateOrig = date;
        if (date instanceof Date) parsedDate = new Date(date.getTime());
        else if (typeof date !== "string" && date.toFixed !== undefined) parsedDate = new Date(date);
        else if (typeof date === "string") {
            var format = givenFormat || (config || (0, _options.defaults)).dateFormat;
            var datestr = String(date).trim();
            if (datestr === "today") {
                parsedDate = new Date();
                timeless = true;
            } else if (config && config.parseDate) parsedDate = config.parseDate(date, format);
            else if (/Z$/.test(datestr) || /GMT$/.test(datestr)) parsedDate = new Date(date);
            else {
                var matched = void 0, ops = [];
                for(var i = 0, matchIndex = 0, regexStr = ""; i < format.length; i++){
                    var token = format[i];
                    var isBackSlash = token === "\\";
                    var escaped = format[i - 1] === "\\" || isBackSlash;
                    if ((0, _formatting.tokenRegex)[token] && !escaped) {
                        regexStr += (0, _formatting.tokenRegex)[token];
                        var match = new RegExp(regexStr).exec(date);
                        if (match && (matched = true)) ops[token !== "Y" ? "push" : "unshift"]({
                            fn: (0, _formatting.revFormat)[token],
                            val: match[++matchIndex]
                        });
                    } else if (!isBackSlash) regexStr += ".";
                }
                parsedDate = !config || !config.noCalendar ? new Date(new Date().getFullYear(), 0, 1, 0, 0, 0, 0) : new Date(new Date().setHours(0, 0, 0, 0));
                ops.forEach(function(_a) {
                    var fn = _a.fn, val = _a.val;
                    return parsedDate = fn(parsedDate, val, locale) || parsedDate;
                });
                parsedDate = matched ? parsedDate : undefined;
            }
        }
        if (!(parsedDate instanceof Date && !isNaN(parsedDate.getTime()))) {
            config.errorHandler(new Error("Invalid date provided: " + dateOrig));
            return undefined;
        }
        if (timeless === true) parsedDate.setHours(0, 0, 0, 0);
        return parsedDate;
    };
};
function compareDates(date1, date2, timeless) {
    if (timeless === void 0) timeless = true;
    if (timeless !== false) return new Date(date1.getTime()).setHours(0, 0, 0, 0) - new Date(date2.getTime()).setHours(0, 0, 0, 0);
    return date1.getTime() - date2.getTime();
}
function compareTimes(date1, date2) {
    return 3600 * (date1.getHours() - date2.getHours()) + 60 * (date1.getMinutes() - date2.getMinutes()) + date1.getSeconds() - date2.getSeconds();
}
var isBetween = function(ts, ts1, ts2) {
    return ts > Math.min(ts1, ts2) && ts < Math.max(ts1, ts2);
};
var calculateSecondsSinceMidnight = function(hours, minutes, seconds) {
    return hours * 3600 + minutes * 60 + seconds;
};
var parseSeconds = function(secondsSinceMidnight) {
    var hours = Math.floor(secondsSinceMidnight / 3600), minutes = (secondsSinceMidnight - hours * 3600) / 60;
    return [
        hours,
        minutes,
        secondsSinceMidnight - hours * 3600 - minutes * 60
    ];
};
var duration = {
    DAY: 86400000
};
function getDefaultHours(config) {
    var hours = config.defaultHour;
    var minutes = config.defaultMinute;
    var seconds = config.defaultSeconds;
    if (config.minDate !== undefined) {
        var minHour = config.minDate.getHours();
        var minMinutes = config.minDate.getMinutes();
        var minSeconds = config.minDate.getSeconds();
        if (hours < minHour) hours = minHour;
        if (hours === minHour && minutes < minMinutes) minutes = minMinutes;
        if (hours === minHour && minutes === minMinutes && seconds < minSeconds) seconds = config.minDate.getSeconds();
    }
    if (config.maxDate !== undefined) {
        var maxHr = config.maxDate.getHours();
        var maxMinutes = config.maxDate.getMinutes();
        hours = Math.min(hours, maxHr);
        if (hours === maxHr) minutes = Math.min(maxMinutes, minutes);
        if (hours === maxHr && minutes === maxMinutes) seconds = config.maxDate.getSeconds();
    }
    return {
        hours: hours,
        minutes: minutes,
        seconds: seconds
    };
}

},{"./formatting":"i6nZP","../types/options":"bXtBt","../l10n/default":"fxflw","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"i6nZP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "monthToStr", ()=>monthToStr);
parcelHelpers.export(exports, "revFormat", ()=>revFormat);
parcelHelpers.export(exports, "tokenRegex", ()=>tokenRegex);
parcelHelpers.export(exports, "formats", ()=>formats);
var _utils = require("../utils");
var doNothing = function() {
    return undefined;
};
var monthToStr = function(monthNumber, shorthand, locale) {
    return locale.months[shorthand ? "shorthand" : "longhand"][monthNumber];
};
var revFormat = {
    D: doNothing,
    F: function(dateObj, monthName, locale) {
        dateObj.setMonth(locale.months.longhand.indexOf(monthName));
    },
    G: function(dateObj, hour) {
        dateObj.setHours((dateObj.getHours() >= 12 ? 12 : 0) + parseFloat(hour));
    },
    H: function(dateObj, hour) {
        dateObj.setHours(parseFloat(hour));
    },
    J: function(dateObj, day) {
        dateObj.setDate(parseFloat(day));
    },
    K: function(dateObj, amPM, locale) {
        dateObj.setHours(dateObj.getHours() % 12 + 12 * (0, _utils.int)(new RegExp(locale.amPM[1], "i").test(amPM)));
    },
    M: function(dateObj, shortMonth, locale) {
        dateObj.setMonth(locale.months.shorthand.indexOf(shortMonth));
    },
    S: function(dateObj, seconds) {
        dateObj.setSeconds(parseFloat(seconds));
    },
    U: function(_, unixSeconds) {
        return new Date(parseFloat(unixSeconds) * 1000);
    },
    W: function(dateObj, weekNum, locale) {
        var weekNumber = parseInt(weekNum);
        var date = new Date(dateObj.getFullYear(), 0, 2 + (weekNumber - 1) * 7, 0, 0, 0, 0);
        date.setDate(date.getDate() - date.getDay() + locale.firstDayOfWeek);
        return date;
    },
    Y: function(dateObj, year) {
        dateObj.setFullYear(parseFloat(year));
    },
    Z: function(_, ISODate) {
        return new Date(ISODate);
    },
    d: function(dateObj, day) {
        dateObj.setDate(parseFloat(day));
    },
    h: function(dateObj, hour) {
        dateObj.setHours((dateObj.getHours() >= 12 ? 12 : 0) + parseFloat(hour));
    },
    i: function(dateObj, minutes) {
        dateObj.setMinutes(parseFloat(minutes));
    },
    j: function(dateObj, day) {
        dateObj.setDate(parseFloat(day));
    },
    l: doNothing,
    m: function(dateObj, month) {
        dateObj.setMonth(parseFloat(month) - 1);
    },
    n: function(dateObj, month) {
        dateObj.setMonth(parseFloat(month) - 1);
    },
    s: function(dateObj, seconds) {
        dateObj.setSeconds(parseFloat(seconds));
    },
    u: function(_, unixMillSeconds) {
        return new Date(parseFloat(unixMillSeconds));
    },
    w: doNothing,
    y: function(dateObj, year) {
        dateObj.setFullYear(2000 + parseFloat(year));
    }
};
var tokenRegex = {
    D: "",
    F: "",
    G: "(\\d\\d|\\d)",
    H: "(\\d\\d|\\d)",
    J: "(\\d\\d|\\d)\\w+",
    K: "",
    M: "",
    S: "(\\d\\d|\\d)",
    U: "(.+)",
    W: "(\\d\\d|\\d)",
    Y: "(\\d{4})",
    Z: "(.+)",
    d: "(\\d\\d|\\d)",
    h: "(\\d\\d|\\d)",
    i: "(\\d\\d|\\d)",
    j: "(\\d\\d|\\d)",
    l: "",
    m: "(\\d\\d|\\d)",
    n: "(\\d\\d|\\d)",
    s: "(\\d\\d|\\d)",
    u: "(.+)",
    w: "(\\d\\d|\\d)",
    y: "(\\d{2})"
};
var formats = {
    Z: function(date) {
        return date.toISOString();
    },
    D: function(date, locale, options) {
        return locale.weekdays.shorthand[formats.w(date, locale, options)];
    },
    F: function(date, locale, options) {
        return monthToStr(formats.n(date, locale, options) - 1, false, locale);
    },
    G: function(date, locale, options) {
        return (0, _utils.pad)(formats.h(date, locale, options));
    },
    H: function(date) {
        return (0, _utils.pad)(date.getHours());
    },
    J: function(date, locale) {
        return locale.ordinal !== undefined ? date.getDate() + locale.ordinal(date.getDate()) : date.getDate();
    },
    K: function(date, locale) {
        return locale.amPM[(0, _utils.int)(date.getHours() > 11)];
    },
    M: function(date, locale) {
        return monthToStr(date.getMonth(), true, locale);
    },
    S: function(date) {
        return (0, _utils.pad)(date.getSeconds());
    },
    U: function(date) {
        return date.getTime() / 1000;
    },
    W: function(date, _, options) {
        return options.getWeek(date);
    },
    Y: function(date) {
        return (0, _utils.pad)(date.getFullYear(), 4);
    },
    d: function(date) {
        return (0, _utils.pad)(date.getDate());
    },
    h: function(date) {
        return date.getHours() % 12 ? date.getHours() % 12 : 12;
    },
    i: function(date) {
        return (0, _utils.pad)(date.getMinutes());
    },
    j: function(date) {
        return date.getDate();
    },
    l: function(date, locale) {
        return locale.weekdays.longhand[date.getDay()];
    },
    m: function(date) {
        return (0, _utils.pad)(date.getMonth() + 1);
    },
    n: function(date) {
        return date.getMonth() + 1;
    },
    s: function(date) {
        return date.getSeconds();
    },
    u: function(date) {
        return date.getTime();
    },
    w: function(date) {
        return date.getDay();
    },
    y: function(date) {
        return String(date.getFullYear()).substring(2);
    }
};

},{"../utils":"tqkc0","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2RVlY":[function(require,module,exports) {
"use strict";
if (typeof Object.assign !== "function") Object.assign = function(target) {
    var args = [];
    for(var _i = 1; _i < arguments.length; _i++)args[_i - 1] = arguments[_i];
    if (!target) throw TypeError("Cannot convert undefined or null to object");
    var _loop_1 = function(source) {
        if (source) Object.keys(source).forEach(function(key) {
            return target[key] = source[key];
        });
    };
    for(var _a = 0, args_1 = args; _a < args_1.length; _a++){
        var source = args_1[_a];
        _loop_1(source);
    }
    return target;
};

},{}],"BJmZe":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "FormSelectCard", ()=>FormSelectCard);
var _mainJs = require("../../../main.js");
class FormSelectCard {
    dataTable;
    #wrapper;
    #label;
    #dropdown;
    #addButton;
    constructor(label, options){
        this.#createElements(label, options);
        this.#buildCard();
    }
    #createElements(label, options) {
        this.#createWrapper();
        this.#createLabel(label);
        this.#createDropdown(label, options);
    //this.#createAddButton(label);
    }
    #buildCard() {
        this.#wrapper.appendChild(this.#label);
        this.#wrapper.appendChild(this.#dropdown);
    //this.#wrapper.appendChild(this.#addButton);
    }
    #createWrapper() {
        this.#wrapper = (0, _mainJs.GM).HF.createNewDiv("", "", [
            "select-field-wrapper"
        ], [], [], "");
    }
    #createLabel(label) {
        this.#label = (0, _mainJs.GM).HF.createNewLabel("", "", label.key, [
            "select-field-label"
        ], [], label.value);
    }
    #createDropdown(label, options) {
        this.#dropdown = (0, _mainJs.GM).HF.createNewSelect(label.key, "", [
            "select-field-dropdown"
        ], [], Object.keys(options), Object.values(options));
    }
    /** createAddButton adds the field to this form card. Optional function if adding new fields to the form is preferred.
     * @param { Object } label of the select element. key is the class name and value is the label text
     * */ createAddButton(label) {
        this.#addButton = (0, _mainJs.GM).HF.createNewButton(label.key + "-btn", "", [
            "select-field-add-button"
        ], [
            {
                style: "border",
                value: "outset"
            }
        ], "button", "Add", false);
        this.#wrapper.appendChild(this.#addButton);
    }
    /** updateDropdown updates the options of the dropdown.
     * @param {Object} field has the 'type' element as the html element type,
     *                      'labelName' as the display name for this html element type,
     *                      and the 'fieldName' as the value for this html element type.
     * */ updateDropdown(options) {
        var dropdown = this.getCard().dropdown;
        (0, _mainJs.GM).HF.updateSelectOptions(dropdown, options);
    }
    /** --- PUBLIC ---
     * Creates the field tooltip
     * @param {fieldinfo String} fieldinfo tooltip
     * */ appendToolTip(fieldinfo, tooltipElement) {
        var tooltipDiv = (0, _mainJs.GM).HF.createNewDiv("", "", [
            "tooltip-div"
        ], [], [], "");
        //var tooltipIcon = GM.HF.createNewIMG('', '', '../../../images/icons/info.png', ['tooltip-img'], [{ style: 'width', value: '30px' }], 'form field format');
        var tooltipSpan = (0, _mainJs.GM).HF.createNewSpan("", "", [
            "tooltip-text"
        ], [], fieldinfo);
        if (!tooltipElement) tooltipElement = (0, _mainJs.GM).HF.createNewIMG("", "", "../../../images/icons/info.png", [
            "tooltip-img"
        ], [
            {
                style: "width",
                value: "30px"
            }
        ], "form field format");
        tooltipDiv.appendChild(tooltipElement);
        //tooltipDiv.appendChild(tooltipIcon);
        tooltipDiv.appendChild(tooltipSpan);
        tooltipDiv.addEventListener("mouseenter", (e)=>{
            const tooltipElementRect = tooltipElement.getBoundingClientRect();
            console.log(tooltipElementRect);
            const top = tooltipElementRect.top;
            const right = window.innerWidth - tooltipElementRect.left;
            tooltipSpan.style.top = `${top}px`; // Adjust the vertical position
            tooltipSpan.style.right = `${right}px`; // Position it right next to the tooltip-div
        });
        return tooltipDiv;
    }
    getCard() {
        return {
            wrapper: this.#wrapper,
            label: this.#label,
            dropdown: this.#dropdown,
            addButton: this.#addButton
        };
    }
}

},{"../../../main.js":"1SICI","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eZxC1":[function(require,module,exports) {
/*************************************************************
 * COPYRIGHT University of Hawaii - COMA Project / Lava Lab  *
 * Author: James Hutchison                                   *
 * Date: 5/5/2022                                            *
 *************************************************************/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ConversionCard", ()=>ConversionCard);
var _mainJs = require("../../../main.js");
var _conversionFunctionsJs = require("../../../sharedVariables/conversionFunctions.js");
class ConversionCard {
    constructor(metadata){
        this.inputDropdown = null;
        this.functionDropdown = null;
        this.convertButton = null;
        this.card = (0, _mainJs.GM).HF.createNewDiv("", "", [
            "conversion-card"
        ], [], [], "");
        this.card.appendChild(this.#createUpperLevel(metadata));
        this.card.appendChild(this.#createMiddleLayer());
        this.card.appendChild(this.#createLowerLayer());
    }
    /** --- PRIVATE ---
     * Creates the top row. It has dropdowns for the column to convert and the function to apply.
     * @param {JSON Object} metadata object containing all metadata
     * @returns HTML node */ #createUpperLevel(metadata) {
        const upperLevel = (0, _mainJs.GM).HF.createNewDiv("", "", [
            "conversion-card-upper"
        ], [], [], "");
        const left = this.#createUpperLevelLeft(metadata);
        const center = this.#createUpperLevelCenter();
        const right = this.#createUpperLevelRight();
        upperLevel.appendChild(left);
        upperLevel.appendChild(center);
        upperLevel.appendChild(right);
        return upperLevel;
    }
    /** --- PRIVATE ---
     * Creates the dropdown for selecting the source column.
     * @param {JSON Metadata Object} metadata 
     * @returns HTML Node */ #createUpperLevelLeft(metadata) {
        const options = [];
        Object.values(metadata.columnHeaders).forEach((header)=>{
            options.push(header.name);
        });
        const wrapper = (0, _mainJs.GM).HF.createNewDiv("", "", [
            "conversion-card-upper-segment"
        ], [], [], "");
        const label = (0, _mainJs.GM).HF.createNewParagraph("", "", [], [], "Source");
        const select = (0, _mainJs.GM).HF.createNewSelect("", "", [], [], options, options, options);
        wrapper.appendChild(label);
        wrapper.appendChild(select);
        this.inputDropdown = select;
        return wrapper;
    }
    /** --- PRIVATE ---
     * Creates the dropdown of selectable functions
     * @returns HTML Node */ #createUpperLevelRight() {
        const options = [];
        (0, _conversionFunctionsJs.conversionFunctions).forEach((fn)=>{
            options.push(fn.name);
        });
        const wrapper = (0, _mainJs.GM).HF.createNewDiv("", "", [
            "conversion-card-upper-segment"
        ], [], [], "");
        const label = (0, _mainJs.GM).HF.createNewParagraph("", "", [], [], "Function");
        const select = (0, _mainJs.GM).HF.createNewSelect("", "", [], [], options, options, options);
        wrapper.appendChild(label);
        wrapper.appendChild(select);
        this.functionDropdown = select;
        return wrapper;
    }
    /** --- PRIVATE ---
     * Creates the arrow Icon in between the two dropdowns
     * @returns HTML node */ #createUpperLevelCenter() {
        const wrapper = (0, _mainJs.GM).HF.createNewDiv("", "", [
            "conversion-card-upper-segment"
        ], [], [], "");
        const image = (0, _mainJs.GM).HF.createNewIMG("", "", "../../../../images/icons/right-arrow.png", [], [], "");
        wrapper.appendChild(image);
        return wrapper;
    }
    /** --- PRIVATE ---
     * Creates the row containing the description of the function selected
     * @returns HTML Node */ #createMiddleLayer() {
        const wrapper = (0, _mainJs.GM).HF.createNewDiv("", "", [
            "conversion-card-middle-layer"
        ], [], [], "");
        const description = (0, _mainJs.GM).HF.createNewParagraph("", "", [], [], (0, _conversionFunctionsJs.conversionFunctions)[0].description);
        wrapper.appendChild(description);
        return wrapper;
    }
    /** --- PRIVATE ---
     * Creates the bottom row with the conversion buttons
     * @return HTML element */ #createLowerLayer() {
        const wrapper = (0, _mainJs.GM).HF.createNewDiv("", "", [
            "conversion-card-middle-layer"
        ], [], [], "");
        const button = (0, _mainJs.GM).HF.createNewButton("", "", [
            "conversion-card-button"
        ], [], "button", "Convert");
        wrapper.appendChild(button);
        this.convertButton = button;
        return wrapper;
    }
    /** --- PUBLIC ---
     * Gets the currently selected function
     * @returns the currently selected function */ getConversionFunction = ()=>{
        const element = (0, _conversionFunctionsJs.conversionFunctions).find((element)=>element.name === this.functionDropdown.value);
        return element.fn;
    };
    /** --- PUBLIC ---
     * Gets the currently selected source field
     * @returns the currently selected source field */ getConversionFieldName = ()=>{
        const element = (0, _conversionFunctionsJs.conversionFunctions).find((element)=>element.name === this.functionDropdown.value);
        return element.outputFieldName;
    };
    /** --- PUBLIC ---
     * gets the conversion button for adding event listeners
     * @returns HTML Element */ getButton = ()=>this.convertButton;
    /** --- PUBLIC ---
     * This function will return the input fields, the outpfield name, and the function to apply to the specific column.
     * @returns object with the soruce field, conversion function */ getConversionInputAndFunction = ()=>({
            input: this.inputDropdown.value,
            fn: this.getConversionFunction(),
            outputFieldName: this.getConversionFieldName()
        });
    /** --- PUBLIC ---
     * @returns HTML Wrapper Element */ getCard = ()=>this.card;
}

},{"../../../main.js":"1SICI","../../../sharedVariables/conversionFunctions.js":"1GcYQ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1GcYQ":[function(require,module,exports) {
/*************************************************************
 * COPYRIGHT University of Hawaii - COMA Project / Lava Lab  *
 * Author: James Hutchison                                   *
 * Date: 5/5/2022                                            *
 *************************************************************/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "conversionFunctions", ()=>conversionFunctions);
const conversionFunctions = [
    {
        name: "JD to MJD",
        fn: function(dataArray) {
            const converted = [];
            dataArray.forEach((element)=>{
                converted.push(element - 2400000.5);
            });
            return converted;
        },
        outputFieldName: "MJD",
        description: "This function will convert Julian Date to Modified Julian Data according to the function: MJD = JD - 244000.5. The values will be stored in the data table in a new field called MJD."
    },
    {
        name: "JD to UTC Date",
        fn: function(dataArray) {
            const converted = [];
            dataArray.forEach((element)=>{
                var millis = (element - 2440587.5) * 86400000;
                converted.push(millis);
            });
            return converted;
        },
        outputFieldName: "UTC",
        description: "This function will convert Julian Date to Modified Julian Data according to the function: MJD = JD - 244000.5. The values will be stored in the data table in a new field called MJD."
    }
];

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1uX14":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "moduleMenuColor", ()=>(0, _colorsJs.moduleMenuColor));
parcelHelpers.export(exports, "sourceColor", ()=>(0, _colorsJs.sourceColor));
parcelHelpers.export(exports, "processorColor", ()=>(0, _colorsJs.processorColor));
parcelHelpers.export(exports, "outputColor", ()=>(0, _colorsJs.outputColor));
parcelHelpers.export(exports, "compositColor", ()=>(0, _colorsJs.compositColor));
parcelHelpers.export(exports, "typeColorArray", ()=>(0, _colorsJs.typeColorArray));
parcelHelpers.export(exports, "processedModuleColor", ()=>(0, _colorsJs.processedModuleColor));
parcelHelpers.export(exports, "orbitColors", ()=>(0, _colorsJs.orbitColors));
parcelHelpers.export(exports, "ENVIRONMENT_DATA_TABLE", ()=>(0, _constantsJs.ENVIRONMENT_DATA_TABLE));
parcelHelpers.export(exports, "DATA_MANAGER", ()=>(0, _constantsJs.DATA_MANAGER));
parcelHelpers.export(exports, "MODULE", ()=>(0, _constantsJs.MODULE));
parcelHelpers.export(exports, "MODULE_MANAGER", ()=>(0, _constantsJs.MODULE_MANAGER));
parcelHelpers.export(exports, "ENVIRONMENT", ()=>(0, _constantsJs.ENVIRONMENT));
parcelHelpers.export(exports, "MODULE_SELECTION_MENU", ()=>(0, _constantsJs.MODULE_SELECTION_MENU));
parcelHelpers.export(exports, "INPUT_MANAGER", ()=>(0, _constantsJs.INPUT_MANAGER));
parcelHelpers.export(exports, "INSPECTOR", ()=>(0, _constantsJs.INSPECTOR));
parcelHelpers.export(exports, "INSPECTOR_CARD", ()=>(0, _constantsJs.INSPECTOR_CARD));
parcelHelpers.export(exports, "INSPECTOR_CARD_MAKER", ()=>(0, _constantsJs.INSPECTOR_CARD_MAKER));
parcelHelpers.export(exports, "POPUP_MANAGER", ()=>(0, _constantsJs.POPUP_MANAGER));
parcelHelpers.export(exports, "POPUP", ()=>(0, _constantsJs.POPUP));
parcelHelpers.export(exports, "POPUP_CONTENT_MAKER", ()=>(0, _constantsJs.POPUP_CONTENT_MAKER));
parcelHelpers.export(exports, "OUTPUT_MANAGER", ()=>(0, _constantsJs.OUTPUT_MANAGER));
parcelHelpers.export(exports, "PIPELINE_MANAGER", ()=>(0, _constantsJs.PIPELINE_MANAGER));
parcelHelpers.export(exports, "WORKER_MANAGER", ()=>(0, _constantsJs.WORKER_MANAGER));
parcelHelpers.export(exports, "compositIcon", ()=>(0, _constantsJs.compositIcon));
parcelHelpers.export(exports, "datasetKeyDict", ()=>(0, _defaultDataJs.datasetKeyDict));
parcelHelpers.export(exports, "telescope_options", ()=>(0, _defaultDataJs.telescope_options));
parcelHelpers.export(exports, "filter_options", ()=>(0, _defaultDataJs.filter_options));
parcelHelpers.export(exports, "objectType_options", ()=>(0, _defaultDataJs.objectType_options));
parcelHelpers.export(exports, "PlanetCodes", ()=>(0, _defaultDataJs.PlanetCodes));
parcelHelpers.export(exports, "getNumDigits", ()=>(0, _formatValuesJs.getNumDigits));
parcelHelpers.export(exports, "getDataType", ()=>(0, _formatValuesJs.getDataType));
parcelHelpers.export(exports, "DatasetTypes", ()=>(0, _moduleDataJs.DatasetTypes));
parcelHelpers.export(exports, "DatasetFields", ()=>(0, _moduleDataJs.DatasetFields));
parcelHelpers.export(exports, "SearchFields", ()=>(0, _moduleDataJs.SearchFields));
parcelHelpers.export(exports, "DefaultAxes", ()=>(0, _moduleDataJs.DefaultAxes));
parcelHelpers.export(exports, "moduleDataObject", ()=>(0, _moduleDataJs.moduleDataObject));
var _colorsJs = require("./colors.js");
var _constantsJs = require("./constants.js");
var _defaultDataJs = require("./defaultData.js");
var _formatValuesJs = require("./formatValues.js");
var _moduleDataJs = require("./moduleData.js");

},{"./colors.js":"hy48G","./constants.js":"dxmqI","./defaultData.js":"lcoZe","./formatValues.js":"dLTDz","./moduleData.js":"87R3y","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hy48G":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "moduleMenuColor", ()=>moduleMenuColor);
parcelHelpers.export(exports, "sourceColor", ()=>sourceColor);
parcelHelpers.export(exports, "processorColor", ()=>processorColor);
parcelHelpers.export(exports, "outputColor", ()=>outputColor);
parcelHelpers.export(exports, "compositColor", ()=>compositColor);
parcelHelpers.export(exports, "typeColorArray", ()=>typeColorArray);
parcelHelpers.export(exports, "processedModuleColor", ()=>processedModuleColor);
parcelHelpers.export(exports, "orbitColors", ()=>orbitColors);
const red = "#ff453a";
const green = "#32d74b";
const mint = "#00c7be";
const rubyRed = "#931621";
const slateGray = "#28464B";
const orange = "#f07237";
const pink = "#7edd86";
const bluepurple = "#2a60f5";
const purple = "#542bd9";
const blue = "#77b6ea";
const emerald = "#48db83";
const yellow = "#ffcf56";
//const mint = '#326771';
const blueMunsell = "#2C8C99";
const turquoise = "#66d4cf";
const darkLiver = "#52414C";
const ebony = "#596157";
const middleGreen = "#3f743e";
//const yellow = '#a1810e';
const darkRed = "#ac232f";
// Viz Pallete
const darkGreen = "#003f5c";
//const blue = '#1a3c77';
const darkPurple = "#665191";
const lightPurple = "#a05195";
//const pink = '#d45087';
const salmon = "#f95d61";
const darkOrange = "#ff7c42";
const lightGreen = "#316728";
const lightRed = "#792f24";
const lightBlue = "#1E4D48";
const lightOrange = "#7D5130";
//const darkGray = "#383838";
const themeBlue = "#19171a";
const themeGreen = "#363538";
const themeBlack = "#363538";
const themeGray = "#757474";
const themeWhite = "#F6F6F6";
const logoGreen = "#00e17b";
const lightGray = "e3e3e3";
const darkGray = "#363538";
const objectColor = "#B0B0B0";
const mercuryGray = "#CCCCCC";
const venusRed = "#B05743";
const earthBlue = "#20A4F3";
const marsYellow = "#f9c74f";
const jupiterPink = "#FFD3DA";
const saturnGreen = "#4B7F52";
const uranusBlue = "#BBE5ED";
const neptuneBlue = "#016FB9";
const plutoYellow = "#FCD581";
const moduleMenuColor = darkGray;
// const sourceColor = lightGreen;
const processorColor = themeGray;
// const outputColor = lightBlue;
// const compositColor = lightOrange;
const sourceColor = themeGray;
const outputColor = themeGray;
const compositColor = themeGray;
const processedModuleColor = darkGray;
const typeColorArray = [
    blue,
    yellow,
    pink
];
const orbitColors = {
    "C/2017 K2": objectColor,
    mercury: mercuryGray,
    venus: venusRed,
    earth: earthBlue,
    mars: marsYellow,
    jupiter: jupiterPink,
    saturn: saturnGreen,
    uranus: uranusBlue,
    neptune: neptuneBlue,
    pluto: plutoYellow
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dxmqI":[function(require,module,exports) {
// These values identify message recepients.
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/*export {
    ENVIRONMENT_DATA_TABLE, DATA_MANAGER, MODULE_MANAGER, ENVIRONMENT, MODULE_SELECTION_MENU, INPUT_MANAGER, INSPECTOR, INSPECTOR_CARD, INSPECTOR_CARD_MAKER, POPUP_MANAGER, POPUP, OUTPUT_MANAGER, PIPELINE_MANAGER, WORKER_MANAGER, DOM_MANAGER, compositIcon,
    LOCAL_DATA_SOURCE, REMOTE_DATA_IMAGE, REMOTE_DATA_TABLE, TABLE_IMAGE, TABLE_OUTPUT, MODULE, POPUP_CONTENT_MAKER
};*/ parcelHelpers.export(exports, "ENVIRONMENT_DATA_TABLE", ()=>ENVIRONMENT_DATA_TABLE);
parcelHelpers.export(exports, "DATA_MANAGER", ()=>DATA_MANAGER);
parcelHelpers.export(exports, "MODULE_MANAGER", ()=>MODULE_MANAGER);
parcelHelpers.export(exports, "ENVIRONMENT", ()=>ENVIRONMENT);
parcelHelpers.export(exports, "MODULE_SELECTION_MENU", ()=>MODULE_SELECTION_MENU);
parcelHelpers.export(exports, "MODULE", ()=>MODULE);
parcelHelpers.export(exports, "INPUT_MANAGER", ()=>INPUT_MANAGER);
parcelHelpers.export(exports, "INSPECTOR", ()=>INSPECTOR);
parcelHelpers.export(exports, "INSPECTOR_CARD", ()=>INSPECTOR_CARD);
parcelHelpers.export(exports, "INSPECTOR_CARD_MAKER", ()=>INSPECTOR_CARD_MAKER);
parcelHelpers.export(exports, "POPUP_MANAGER", ()=>POPUP_MANAGER);
parcelHelpers.export(exports, "POPUP", ()=>POPUP);
parcelHelpers.export(exports, "POPUP_CONTENT_MAKER", ()=>POPUP_CONTENT_MAKER);
parcelHelpers.export(exports, "OUTPUT_MANAGER", ()=>OUTPUT_MANAGER);
parcelHelpers.export(exports, "PIPELINE_MANAGER", ()=>PIPELINE_MANAGER);
parcelHelpers.export(exports, "WORKER_MANAGER", ()=>WORKER_MANAGER);
parcelHelpers.export(exports, "DOM_MANAGER", ()=>DOM_MANAGER);
parcelHelpers.export(exports, "compositIcon", ()=>compositIcon);
parcelHelpers.export(exports, "LT_SOURCE", ()=>LT_SOURCE);
parcelHelpers.export(exports, "LT_PROCESSOR", ()=>LT_PROCESSOR);
parcelHelpers.export(exports, "LT_OUTPUT", ()=>LT_OUTPUT);
const ENVIRONMENT_DATA_TABLE = 0;
const DATA_MANAGER = 1;
const MODULE_MANAGER = 2;
const ENVIRONMENT = 3;
const MODULE_SELECTION_MENU = 4;
const INSPECTOR = 5;
const POPUP_MANAGER = 6;
const POPUP = 7;
const INPUT_MANAGER = 8;
const OUTPUT_MANAGER = 9;
const PIPELINE_MANAGER = 10;
const WORKER_MANAGER = 11;
const DOM_MANAGER = 12;
const MODULE = 13;
const INSPECTOR_CARD = 14;
const INSPECTOR_CARD_MAKER = 15;
const POPUP_CONTENT_MAKER = 16;
// Link Type Constants
/*const LOCAL_DATA_SOURCE = 0;
const REMOTE_DATA_IMAGE = 1;
const REMOTE_DATA_TABLE = 2;
const TABLE_OUTPUT = 3;
const TABLE_IMAGE = 4;
*/ // Link Type Constants
const LT_SOURCE = 0;
const LT_PROCESSOR = 1;
const LT_OUTPUT = 2;
const compositIcon = "images/icons/flow-diagram-white.png";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lcoZe":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "datasetKeyDict", ()=>datasetKeyDict);
parcelHelpers.export(exports, "telescope_options", ()=>telescope_options);
parcelHelpers.export(exports, "filter_options", ()=>filter_options);
parcelHelpers.export(exports, "objectType_options", ()=>objectType_options);
parcelHelpers.export(exports, "PlanetCodes", ()=>PlanetCodes);
const objectType_options = [
    {
        Key: -1,
        Value: "-- None --"
    },
    {
        Key: "Comet",
        Value: "Comet"
    },
    {
        Key: "TNO",
        Value: "TNO (Trans-Neptunian Object)"
    },
    {
        Key: "KBO",
        Value: "KBO (Kuiper Belt Object)"
    },
    {
        Key: "Centaur",
        Value: "Centaur"
    },
    {
        Key: "Asteroid",
        Value: "Asteroid"
    },
    {
        Key: "ISO",
        Value: "ISO"
    },
    {
        Key: "Standard Star",
        Value: "Standard Star"
    }
];
const telescope_options = [
    {
        Key: -1,
        Value: "-- None --"
    },
    {
        Key: "SDSS",
        Value: "SDSS"
    },
    {
        Key: "JC",
        Value: "Johnson/Cousins"
    },
    {
        Key: "BESSEL",
        Value: "Bessel"
    },
    {
        Key: "PS1",
        Value: "PanSTARRS"
    },
    {
        Key: "ATLAS",
        Value: "ATLAS"
    },
    {
        Key: "GAIA",
        Value: "GAIA"
    },
    {
        Key: "MEGACAM",
        Value: "CFHT Megacam"
    }
];
const filter_options = [
    {
        Key: -1,
        Value: "-- None --"
    },
    {
        Key: "U_JC",
        Value: "U, Johnson-Cousins"
    },
    {
        Key: "B_JC",
        Value: "B, Johnson-Cousins"
    },
    {
        Key: "V_JC",
        Value: "V, Johnson-Cousins"
    },
    {
        Key: "R_JC",
        Value: "R, Johnson-Cousins"
    },
    {
        Key: "I_JC",
        Value: "I, Johnson-Cousins"
    },
    {
        Key: "U_SDSS",
        Value: "u, SDSS"
    },
    {
        Key: "G_SDSS",
        Value: "g, SDSS"
    },
    {
        Key: "R_SDSS",
        Value: "r, SDSS"
    },
    {
        Key: "I_SDSS",
        Value: "i, SDSS"
    },
    {
        Key: "Z_SDSS",
        Value: "z, SDSS"
    },
    {
        Key: "G_PS1",
        Value: "g, PS1"
    },
    {
        Key: "R_PS1",
        Value: "r, PS1"
    },
    {
        Key: "I_PS1",
        Value: "i, PS1"
    },
    {
        Key: "Z_PS1",
        Value: "z, PS1"
    },
    {
        Key: "W_PS1",
        Value: "w, PS1"
    },
    {
        Key: "Y_GMOS",
        Value: "Y, Gemini GMOS"
    },
    {
        Key: "U_AB",
        Value: "u, AB"
    },
    {
        Key: "G_AB",
        Value: "g, AB"
    },
    {
        Key: "R_AB",
        Value: "r, AB"
    },
    {
        Key: "I_AB",
        Value: "i, AB"
    },
    {
        Key: "Z_AB",
        Value: "z, AB"
    },
    {
        Key: "GRI_MEGACAM",
        Value: "gri, CFHT MegaCam wideband"
    },
    {
        Key: "B_BESSEL",
        Value: "B, Bessel"
    },
    {
        Key: "V_BESSEL",
        Value: "V, Bessel"
    },
    {
        Key: "R_BESSEL",
        Value: "R, Bessel"
    },
    {
        Key: "I_BESSEL",
        Value: "I, Bessel"
    },
    {
        Key: "C_ATLAS",
        Value: "C, ATLAS"
    },
    {
        Key: "O_ATLAS1",
        Value: "O, ATLAS1"
    },
    {
        Key: "O_ATLAS2",
        Value: "O, ATLAS2"
    },
    {
        Key: "G_GAIA",
        Value: "G, GAIA"
    },
    {
        Key: "OPEN",
        Value: "OPEN, no filter"
    },
    {
        Key: "WIDE",
        Value: "Wide band filter, generic"
    }
];
const datasetKeyDict = [
    {
        datasetType: "lightcurves",
        datasetKey: "Photometry"
    }
];
const PlanetCodes = [
    {
        name: "mercury",
        displayName: "Mercury",
        code: "Me"
    },
    {
        name: "venus",
        displayName: "Venus",
        code: "V"
    },
    {
        name: "earth",
        displayName: "Earth",
        code: "E"
    },
    {
        name: "mars",
        displayName: "Mars",
        code: "Ma"
    },
    {
        name: "jupiter",
        displayName: "Jupiter",
        code: "J"
    },
    {
        name: "saturn",
        displayName: "Saturn",
        code: "S"
    },
    {
        name: "uranus",
        displayName: "Uranus",
        code: "U"
    },
    {
        name: "neptune",
        displayName: "Neptune",
        code: "N"
    },
    {
        name: "pluto",
        displayName: "Pluto",
        code: "P"
    }
];

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dLTDz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "format_mapping", ()=>format_mapping);
parcelHelpers.export(exports, "decimalAlignFormatter", ()=>decimalAlignFormatter);
parcelHelpers.export(exports, "getNumDigits", ()=>getNumDigits);
parcelHelpers.export(exports, "getDataType", ()=>getDataType);
const format_mapping = {
    /*'mag': 3,
    'mag_err': 3,
    'zpmag': 3,
    'zpmagerr': 3,*/ "ra-object": 6,
    "dec-object": 7,
    /*'exposure': 3,*/ "mjd_mid": 9
};
function getNumDigits(fieldName) {
    var numDigits = 3;
    if (format_mapping.hasOwnProperty(fieldName)) numDigits = format_mapping[fieldName];
    return numDigits;
}
function decimalAlignFormatter(cell, formatterParams, onRendered) {
    var value = cell.getValue();
    // Check if the value is a number
    if (!isNaN(parseFloat(value)) && isFinite(value)) {
        var decimalCount = (value.toString().split(".")[1] || []).length;
        // Apply CSS class to align the value at the decimal point
        cell.getElement().style.textAlign = "right";
        cell.getElement().style.paddingRight = decimalCount * 10 + "px";
    }
    console.log(value);
    return value;
}
/** Gets the dataType of that column values
*  @param {inputVal} string value of the first item in a column
*  @returns {dataType} of the input value - value, category, or time
* */ function getDataType(inputVal) {
    let dataType = "category";
    // Check if it's a numeric value
    if (/^[-+]?\d*\.?\d+$/.test(inputVal)) dataType = "value";
    else if (Date.parse(inputVal)) dataType = "time";
    return dataType;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"87R3y":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "moduleDataObject", ()=>moduleDataObject);
parcelHelpers.export(exports, "SearchFields", ()=>SearchFields);
parcelHelpers.export(exports, "DatasetTypes", ()=>DatasetTypes);
parcelHelpers.export(exports, "DatasetFields", ()=>DatasetFields);
parcelHelpers.export(exports, "DefaultAxes", ()=>DefaultAxes);
var _indexJs = require("../modules/index.js");
var _colorsJs = require("./colors.js");
/*import { LOCAL_DATA_SOURCE } from "./constants.js";*/ var _defaultDataJs = require("./defaultData.js");
const colors = {
    source: (0, _colorsJs.sourceColor),
    processor: (0, _colorsJs.processorColor),
    output: (0, _colorsJs.outputColor),
    composite: (0, _colorsJs.compositColor)
};
const shapes = {
    source: "RoundedRectangle",
    processor: "RoundedRectangle",
    output: "RoundedRectangle",
    composite: "Rectangle"
};
/** This Object Stores the data for creating new modules
 *  key: (string) used to index into the hash table that stores the moduleCreation function
 *  moduleCreationFunction: (function) used to create a new instance of the module class
 *  menuData: (object) icon, text, and category information used to populate the module selection menu. 
 */ const moduleDataObject = [
    {
        key: "Search",
        moduleCreationFunction: (category, key)=>new (0, _indexJs.Search)(category, colors[category.toLowerCase()], shapes[category.toLowerCase()], key),
        menuData: {
            icon: "images/icons/database.png",
            text: "Search",
            category: "Source"
        }
    },
    {
        key: "CSV File",
        moduleCreationFunction: (category, key)=>new (0, _indexJs.Csv)(category, colors[category.toLowerCase()], shapes[category.toLowerCase()], key),
        menuData: {
            icon: "images/icons/csv-file-format-extension.png",
            text: "CSV File",
            category: "Source"
        }
    },
    /*{
        key: 'Cholera',
        moduleCreationFunction: (category, key) => new Cholera(category, colors[category.toLowerCase()], shapes[category.toLowerCase()], key),
        menuData: { icon: 'images/icons/skull.png', text: 'Cholera', category: 'Source' }
    },*/ {
        key: "Filter",
        moduleCreationFunction: (category, key)=>new (0, _indexJs.Filter)(category, colors[category.toLowerCase()], shapes[category.toLowerCase()], key),
        menuData: {
            icon: "images/icons/filter.png",
            text: "Filter",
            category: "Processor"
        }
    },
    {
        key: "Data Conversion",
        moduleCreationFunction: (category, key)=>new (0, _indexJs.DataConversion)(category, colors[category.toLowerCase()], shapes[category.toLowerCase()], key),
        menuData: {
            icon: "images/icons/convert.png",
            text: "Data Conversion",
            category: "Processor"
        }
    },
    {
        key: "Scatter Plot",
        moduleCreationFunction: (category, key)=>new (0, _indexJs.ScatterPlot)(category, colors[category.toLowerCase()], shapes[category.toLowerCase()], key),
        menuData: {
            icon: "images/icons/scatter-graph-black.png",
            text: "Scatter Plot",
            category: "Output"
        }
    },
    {
        key: "Bar Chart",
        moduleCreationFunction: (category, key)=>new (0, _indexJs.BarChart)(category, colors[category.toLowerCase()], shapes[category.toLowerCase()], key),
        menuData: {
            icon: "images/icons/bar-chart.png",
            text: "Bar Chart",
            category: "Output"
        }
    },
    {
        key: "Table",
        moduleCreationFunction: (category, key)=>new (0, _indexJs.Table)(category, colors[category.toLowerCase()], shapes[category.toLowerCase()], key),
        menuData: {
            icon: "images/icons/table.png",
            text: "Table",
            category: "Output"
        }
    },
    {
        key: "Line Chart",
        moduleCreationFunction: (category, key)=>new (0, _indexJs.LineChart)(category, colors[category.toLowerCase()], shapes[category.toLowerCase()], key),
        menuData: {
            icon: "images/icons/line-chart.png",
            text: "Line Chart",
            category: "Output"
        }
    },
    {
        key: "Orbital Plot",
        moduleCreationFunction: (category, key)=>new (0, _indexJs.OrbitalPlot)(category, colors[category.toLowerCase()], shapes[category.toLowerCase()], key),
        menuData: {
            icon: "images/icons/orbital-plot.png",
            text: "Orbital Plot",
            category: "Output"
        }
    },
    {
        key: "Images",
        moduleCreationFunction: (category, key)=>new (0, _indexJs.ObjectImages)(category, colors[category.toLowerCase()], shapes[category.toLowerCase()], key),
        menuData: {
            icon: "images/icons/image.png",
            text: "Images",
            category: "Output"
        }
    },
    /*{
        key: 'To Csv',
        moduleCreationFunction: (category, key) => new ToCSV(category, colors[category.toLowerCase()], shapes[category.toLowerCase()], key, 'Data', [{ name: 'IN', leftSide: false }], true),
        menuData: { icon: 'images/icons/csv-file-format-extension.png', text: 'To Csv', category: 'Output' }
    },*/ /*{
        key: 'Data',
        moduleCreationFunction: (category, key) => new Data(category, colors[category.toLowerCase()], shapes[category.toLowerCase()], key, 'Data', [{ name: 'IN', leftSide: false, type: LOCAL_DATA_SOURCE }], true)
    },*/ {
        key: "Composite",
        moduleCreationFunction: (category, key)=>new (0, _indexJs.Composite)(category, colors[category.toLowerCase()], shapes[category.toLowerCase()], key, "Composite", [], false)
    },
    {
        key: "CompositePrefab",
        moduleCreationFunction: (category, key)=>new (0, _indexJs.CompositePrefab)(category, colors[category.toLowerCase()], shapes[category.toLowerCase()], key, "Composite", [], false)
    }
];
const DatasetFields = [
    "lightcurves",
    "photometries",
    "calibrations",
    "images"
];
// responseKey is for the api response key
const DatasetTypes = [
    {
        type: "Photometry",
        queryKey: "lightcurves",
        responseKey: "lightcurve",
        sortBy: "iso_date_mid"
    }
];
const DefaultAxes = [
    {
        datasetType: "Photometry",
        xAxis: {
            name: "iso_date_mid",
            displayName: "ISO date",
            dataType: "value"
        },
        yAxis: {
            name: "mag",
            displayName: "magnitude",
            dataType: "value",
            error: "mag_err"
        }
    }
];
/** This Object Stores the data for search module fields
 *  type: (array) list of strings that describes the types of a query
 *  field: (array) list of strings that describtes the form field options
 *  data-representation: (object) list of objects that stores the query data representation options
 *                          type: (string) type of query operation
 *                          data: (string) type of data representation to configure
 *                          option: (array) list of numbers to represent the data with
 */ const SearchFields = {
    "queryTypeTooltip": [
        {
            type: "Photometry",
            description: "Search for lightcurve of an object.\r\n"
        },
        {
            type: "Images",
            description: "Search for images of an object.\r\n"
        }
    ],
    "fieldTooltip": [
        {
            field: "objects",
            format: "Name of the comet.\r\nex) C_2017_K2"
        },
        {
            field: "begin",
            format: "ISO standard date format.\r\nex) 2018-01-01"
        },
        {
            field: "end",
            format: "ISO standard date format.\r\nex) 2022-12-31"
        },
        {
            field: "test",
            format: "test format.\r\nex) test"
        }
    ],
    "fieldsDict": [
        {
            "type": "Photometry",
            "fields": [
                {
                    index: 0,
                    remote: true,
                    dirName: "objects",
                    labelName: "Object",
                    fieldName: "objects",
                    type: "typeahead",
                    value: "2017"
                },
                {
                    index: 0,
                    remote: true,
                    dirName: "telescopes",
                    labelName: "Telescope",
                    fieldName: "telescopes",
                    type: "dropdown",
                    options: [
                        {
                            Value: "--- None ---",
                            Key: -1
                        }
                    ]
                },
                {
                    index: 0,
                    remote: true,
                    dirName: "filters",
                    labelName: "Filter",
                    fieldName: "filters",
                    type: "dropdown",
                    options: [
                        {
                            Value: "--- None ---",
                            Key: -1
                        }
                    ]
                },
                {
                    index: 0,
                    remote: false,
                    labelName: "Begin",
                    fieldName: "begin",
                    type: "date",
                    value: "2015-01-01"
                },
                {
                    index: 0,
                    remote: false,
                    labelName: "End",
                    fieldName: "end",
                    type: "date",
                    value: "2023-10-08"
                },
                {
                    index: 0,
                    remote: false,
                    labelName: "Aperture",
                    fieldName: "aperture",
                    type: "dropdown",
                    options: [
                        {
                            Value: "--- All ---",
                            Key: -1
                        },
                        {
                            Value: "10",
                            Key: 0
                        },
                        {
                            Value: "16",
                            Key: 1
                        }
                    ]
                }
            ]
        },
        {
            "type": "Images",
            "fields": [
                {
                    index: 0,
                    remote: true,
                    dirName: "objects",
                    labelName: "Object",
                    fieldName: "objects",
                    type: "typeahead"
                },
                {
                    index: 0,
                    remote: true,
                    dirName: "telescopes",
                    labelName: "Telescope",
                    fieldName: "telescopes",
                    type: "dropdown",
                    optionName: "telescope",
                    options: undefined
                },
                {
                    index: 0,
                    remote: true,
                    dirName: "filters",
                    labelName: "Filter",
                    fieldName: "filters",
                    type: "dropdown",
                    optionName: "filter",
                    options: undefined
                },
                {
                    index: 0,
                    remote: false,
                    labelName: "Begin",
                    fieldName: "begin",
                    type: "date",
                    value: "2022-01-01"
                },
                {
                    index: 0,
                    remote: false,
                    labelName: "End",
                    fieldName: "end",
                    type: "date",
                    value: "2022-12-31"
                }
            ]
        }
    ],
    "data-representation": [
        {
            "type": "photometry",
            "data": "radius aperture",
            "option": [
                5,
                10,
                20
            ]
        },
        {
            "type": "objects",
            "data": "au",
            "option": [
                5,
                10,
                20
            ]
        }
    ]
};

},{"../modules/index.js":"ddnCK","./colors.js":"hy48G","./defaultData.js":"lcoZe","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bJ8ZI":[function(require,module,exports) {
/**
 * lil-gui
 * https://lil-gui.georgealways.com
 * @version 0.17.0
 * @author George Michael Brower
 * @license MIT
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "BooleanController", ()=>i);
parcelHelpers.export(exports, "ColorController", ()=>a);
parcelHelpers.export(exports, "Controller", ()=>t);
parcelHelpers.export(exports, "FunctionController", ()=>h);
parcelHelpers.export(exports, "GUI", ()=>g);
parcelHelpers.export(exports, "NumberController", ()=>d);
parcelHelpers.export(exports, "OptionController", ()=>c);
parcelHelpers.export(exports, "StringController", ()=>u);
class t {
    constructor(i, e, s, n, l = "div"){
        this.parent = i, this.object = e, this.property = s, this._disabled = !1, this._hidden = !1, this.initialValue = this.getValue(), this.domElement = document.createElement("div"), this.domElement.classList.add("controller"), this.domElement.classList.add(n), this.$name = document.createElement("div"), this.$name.classList.add("name"), t.nextNameID = t.nextNameID || 0, this.$name.id = "lil-gui-name-" + ++t.nextNameID, this.$widget = document.createElement(l), this.$widget.classList.add("widget"), this.$disable = this.$widget, this.domElement.appendChild(this.$name), this.domElement.appendChild(this.$widget), this.parent.children.push(this), this.parent.controllers.push(this), this.parent.$children.appendChild(this.domElement), this._listenCallback = this._listenCallback.bind(this), this.name(s);
    }
    name(t) {
        return this._name = t, this.$name.innerHTML = t, this;
    }
    onChange(t) {
        return this._onChange = t, this;
    }
    _callOnChange() {
        this.parent._callOnChange(this), void 0 !== this._onChange && this._onChange.call(this, this.getValue()), this._changed = !0;
    }
    onFinishChange(t) {
        return this._onFinishChange = t, this;
    }
    _callOnFinishChange() {
        this._changed && (this.parent._callOnFinishChange(this), void 0 !== this._onFinishChange && this._onFinishChange.call(this, this.getValue())), this._changed = !1;
    }
    reset() {
        return this.setValue(this.initialValue), this._callOnFinishChange(), this;
    }
    enable(t = !0) {
        return this.disable(!t);
    }
    disable(t = !0) {
        return t === this._disabled || (this._disabled = t, this.domElement.classList.toggle("disabled", t), this.$disable.toggleAttribute("disabled", t)), this;
    }
    show(t = !0) {
        return this._hidden = !t, this.domElement.style.display = this._hidden ? "none" : "", this;
    }
    hide() {
        return this.show(!1);
    }
    options(t) {
        const i = this.parent.add(this.object, this.property, t);
        return i.name(this._name), this.destroy(), i;
    }
    min(t) {
        return this;
    }
    max(t) {
        return this;
    }
    step(t) {
        return this;
    }
    decimals(t) {
        return this;
    }
    listen(t = !0) {
        return this._listening = t, void 0 !== this._listenCallbackID && (cancelAnimationFrame(this._listenCallbackID), this._listenCallbackID = void 0), this._listening && this._listenCallback(), this;
    }
    _listenCallback() {
        this._listenCallbackID = requestAnimationFrame(this._listenCallback);
        const t = this.save();
        t !== this._listenPrevValue && this.updateDisplay(), this._listenPrevValue = t;
    }
    getValue() {
        return this.object[this.property];
    }
    setValue(t) {
        return this.object[this.property] = t, this._callOnChange(), this.updateDisplay(), this;
    }
    updateDisplay() {
        return this;
    }
    load(t) {
        return this.setValue(t), this._callOnFinishChange(), this;
    }
    save() {
        return this.getValue();
    }
    destroy() {
        this.listen(!1), this.parent.children.splice(this.parent.children.indexOf(this), 1), this.parent.controllers.splice(this.parent.controllers.indexOf(this), 1), this.parent.$children.removeChild(this.domElement);
    }
}
class i extends t {
    constructor(t, i, e){
        super(t, i, e, "boolean", "label"), this.$input = document.createElement("input"), this.$input.setAttribute("type", "checkbox"), this.$input.setAttribute("aria-labelledby", this.$name.id), this.$widget.appendChild(this.$input), this.$input.addEventListener("change", ()=>{
            this.setValue(this.$input.checked), this._callOnFinishChange();
        }), this.$disable = this.$input, this.updateDisplay();
    }
    updateDisplay() {
        return this.$input.checked = this.getValue(), this;
    }
}
function e(t) {
    let i, e;
    return (i = t.match(/(#|0x)?([a-f0-9]{6})/i)) ? e = i[2] : (i = t.match(/rgb\(\s*(\d*)\s*,\s*(\d*)\s*,\s*(\d*)\s*\)/)) ? e = parseInt(i[1]).toString(16).padStart(2, 0) + parseInt(i[2]).toString(16).padStart(2, 0) + parseInt(i[3]).toString(16).padStart(2, 0) : (i = t.match(/^#?([a-f0-9])([a-f0-9])([a-f0-9])$/i)) && (e = i[1] + i[1] + i[2] + i[2] + i[3] + i[3]), !!e && "#" + e;
}
const s = {
    isPrimitive: !0,
    match: (t)=>"string" == typeof t,
    fromHexString: e,
    toHexString: e
}, n = {
    isPrimitive: !0,
    match: (t)=>"number" == typeof t,
    fromHexString: (t)=>parseInt(t.substring(1), 16),
    toHexString: (t)=>"#" + t.toString(16).padStart(6, 0)
}, l = {
    isPrimitive: !1,
    match: Array.isArray,
    fromHexString (t, i, e = 1) {
        const s = n.fromHexString(t);
        i[0] = (s >> 16 & 255) / 255 * e, i[1] = (s >> 8 & 255) / 255 * e, i[2] = (255 & s) / 255 * e;
    },
    toHexString: ([t, i, e], s = 1)=>n.toHexString(t * (s = 255 / s) << 16 ^ i * s << 8 ^ e * s << 0)
}, r = {
    isPrimitive: !1,
    match: (t)=>Object(t) === t,
    fromHexString (t, i, e = 1) {
        const s = n.fromHexString(t);
        i.r = (s >> 16 & 255) / 255 * e, i.g = (s >> 8 & 255) / 255 * e, i.b = (255 & s) / 255 * e;
    },
    toHexString: ({ r: t, g: i, b: e }, s = 1)=>n.toHexString(t * (s = 255 / s) << 16 ^ i * s << 8 ^ e * s << 0)
}, o = [
    s,
    n,
    l,
    r
];
class a extends t {
    constructor(t, i, s, n){
        var l;
        super(t, i, s, "color"), this.$input = document.createElement("input"), this.$input.setAttribute("type", "color"), this.$input.setAttribute("tabindex", -1), this.$input.setAttribute("aria-labelledby", this.$name.id), this.$text = document.createElement("input"), this.$text.setAttribute("type", "text"), this.$text.setAttribute("spellcheck", "false"), this.$text.setAttribute("aria-labelledby", this.$name.id), this.$display = document.createElement("div"), this.$display.classList.add("display"), this.$display.appendChild(this.$input), this.$widget.appendChild(this.$display), this.$widget.appendChild(this.$text), this._format = (l = this.initialValue, o.find((t)=>t.match(l))), this._rgbScale = n, this._initialValueHexString = this.save(), this._textFocused = !1, this.$input.addEventListener("input", ()=>{
            this._setValueFromHexString(this.$input.value);
        }), this.$input.addEventListener("blur", ()=>{
            this._callOnFinishChange();
        }), this.$text.addEventListener("input", ()=>{
            const t = e(this.$text.value);
            t && this._setValueFromHexString(t);
        }), this.$text.addEventListener("focus", ()=>{
            this._textFocused = !0, this.$text.select();
        }), this.$text.addEventListener("blur", ()=>{
            this._textFocused = !1, this.updateDisplay(), this._callOnFinishChange();
        }), this.$disable = this.$text, this.updateDisplay();
    }
    reset() {
        return this._setValueFromHexString(this._initialValueHexString), this;
    }
    _setValueFromHexString(t) {
        if (this._format.isPrimitive) {
            const i = this._format.fromHexString(t);
            this.setValue(i);
        } else this._format.fromHexString(t, this.getValue(), this._rgbScale), this._callOnChange(), this.updateDisplay();
    }
    save() {
        return this._format.toHexString(this.getValue(), this._rgbScale);
    }
    load(t) {
        return this._setValueFromHexString(t), this._callOnFinishChange(), this;
    }
    updateDisplay() {
        return this.$input.value = this._format.toHexString(this.getValue(), this._rgbScale), this._textFocused || (this.$text.value = this.$input.value.substring(1)), this.$display.style.backgroundColor = this.$input.value, this;
    }
}
class h extends t {
    constructor(t, i, e){
        super(t, i, e, "function"), this.$button = document.createElement("button"), this.$button.appendChild(this.$name), this.$widget.appendChild(this.$button), this.$button.addEventListener("click", (t)=>{
            t.preventDefault(), this.getValue().call(this.object);
        }), this.$button.addEventListener("touchstart", ()=>{}, {
            passive: !0
        }), this.$disable = this.$button;
    }
}
class d extends t {
    constructor(t, i, e, s, n, l){
        super(t, i, e, "number"), this._initInput(), this.min(s), this.max(n);
        const r = void 0 !== l;
        this.step(r ? l : this._getImplicitStep(), r), this.updateDisplay();
    }
    decimals(t) {
        return this._decimals = t, this.updateDisplay(), this;
    }
    min(t) {
        return this._min = t, this._onUpdateMinMax(), this;
    }
    max(t) {
        return this._max = t, this._onUpdateMinMax(), this;
    }
    step(t, i = !0) {
        return this._step = t, this._stepExplicit = i, this;
    }
    updateDisplay() {
        const t = this.getValue();
        if (this._hasSlider) {
            let i = (t - this._min) / (this._max - this._min);
            i = Math.max(0, Math.min(i, 1)), this.$fill.style.width = 100 * i + "%";
        }
        return this._inputFocused || (this.$input.value = void 0 === this._decimals ? t : t.toFixed(this._decimals)), this;
    }
    _initInput() {
        this.$input = document.createElement("input"), this.$input.setAttribute("type", "number"), this.$input.setAttribute("step", "any"), this.$input.setAttribute("aria-labelledby", this.$name.id), this.$widget.appendChild(this.$input), this.$disable = this.$input;
        const t = (t)=>{
            const i = parseFloat(this.$input.value);
            isNaN(i) || (this._snapClampSetValue(i + t), this.$input.value = this.getValue());
        };
        let i, e, s, n, l, r = !1;
        const o = (t)=>{
            if (r) {
                const s = t.clientX - i, n = t.clientY - e;
                Math.abs(n) > 5 ? (t.preventDefault(), this.$input.blur(), r = !1, this._setDraggingStyle(!0, "vertical")) : Math.abs(s) > 5 && a();
            }
            if (!r) {
                const i = t.clientY - s;
                l -= i * this._step * this._arrowKeyMultiplier(t), n + l > this._max ? l = this._max - n : n + l < this._min && (l = this._min - n), this._snapClampSetValue(n + l);
            }
            s = t.clientY;
        }, a = ()=>{
            this._setDraggingStyle(!1, "vertical"), this._callOnFinishChange(), window.removeEventListener("mousemove", o), window.removeEventListener("mouseup", a);
        };
        this.$input.addEventListener("input", ()=>{
            let t = parseFloat(this.$input.value);
            isNaN(t) || (this._stepExplicit && (t = this._snap(t)), this.setValue(this._clamp(t)));
        }), this.$input.addEventListener("keydown", (i)=>{
            "Enter" === i.code && this.$input.blur(), "ArrowUp" === i.code && (i.preventDefault(), t(this._step * this._arrowKeyMultiplier(i))), "ArrowDown" === i.code && (i.preventDefault(), t(this._step * this._arrowKeyMultiplier(i) * -1));
        }), this.$input.addEventListener("wheel", (i)=>{
            this._inputFocused && (i.preventDefault(), t(this._step * this._normalizeMouseWheel(i)));
        }, {
            passive: !1
        }), this.$input.addEventListener("mousedown", (t)=>{
            i = t.clientX, e = s = t.clientY, r = !0, n = this.getValue(), l = 0, window.addEventListener("mousemove", o), window.addEventListener("mouseup", a);
        }), this.$input.addEventListener("focus", ()=>{
            this._inputFocused = !0;
        }), this.$input.addEventListener("blur", ()=>{
            this._inputFocused = !1, this.updateDisplay(), this._callOnFinishChange();
        });
    }
    _initSlider() {
        this._hasSlider = !0, this.$slider = document.createElement("div"), this.$slider.classList.add("slider"), this.$fill = document.createElement("div"), this.$fill.classList.add("fill"), this.$slider.appendChild(this.$fill), this.$widget.insertBefore(this.$slider, this.$input), this.domElement.classList.add("hasSlider");
        const t = (t)=>{
            const i = this.$slider.getBoundingClientRect();
            let e = (s = t, n = i.left, l = i.right, r = this._min, o = this._max, (s - n) / (l - n) * (o - r) + r);
            var s, n, l, r, o;
            this._snapClampSetValue(e);
        }, i = (i)=>{
            t(i.clientX);
        }, e = ()=>{
            this._callOnFinishChange(), this._setDraggingStyle(!1), window.removeEventListener("mousemove", i), window.removeEventListener("mouseup", e);
        };
        let s, n, l = !1;
        const r = (i)=>{
            i.preventDefault(), this._setDraggingStyle(!0), t(i.touches[0].clientX), l = !1;
        }, o = (i)=>{
            if (l) {
                const t = i.touches[0].clientX - s, e = i.touches[0].clientY - n;
                Math.abs(t) > Math.abs(e) ? r(i) : (window.removeEventListener("touchmove", o), window.removeEventListener("touchend", a));
            } else i.preventDefault(), t(i.touches[0].clientX);
        }, a = ()=>{
            this._callOnFinishChange(), this._setDraggingStyle(!1), window.removeEventListener("touchmove", o), window.removeEventListener("touchend", a);
        }, h = this._callOnFinishChange.bind(this);
        let d;
        this.$slider.addEventListener("mousedown", (s)=>{
            this._setDraggingStyle(!0), t(s.clientX), window.addEventListener("mousemove", i), window.addEventListener("mouseup", e);
        }), this.$slider.addEventListener("touchstart", (t)=>{
            t.touches.length > 1 || (this._hasScrollBar ? (s = t.touches[0].clientX, n = t.touches[0].clientY, l = !0) : r(t), window.addEventListener("touchmove", o, {
                passive: !1
            }), window.addEventListener("touchend", a));
        }, {
            passive: !1
        }), this.$slider.addEventListener("wheel", (t)=>{
            if (Math.abs(t.deltaX) < Math.abs(t.deltaY) && this._hasScrollBar) return;
            t.preventDefault();
            const i = this._normalizeMouseWheel(t) * this._step;
            this._snapClampSetValue(this.getValue() + i), this.$input.value = this.getValue(), clearTimeout(d), d = setTimeout(h, 400);
        }, {
            passive: !1
        });
    }
    _setDraggingStyle(t, i = "horizontal") {
        this.$slider && this.$slider.classList.toggle("active", t), document.body.classList.toggle("lil-gui-dragging", t), document.body.classList.toggle("lil-gui-" + i, t);
    }
    _getImplicitStep() {
        return this._hasMin && this._hasMax ? (this._max - this._min) / 1e3 : .1;
    }
    _onUpdateMinMax() {
        !this._hasSlider && this._hasMin && this._hasMax && (this._stepExplicit || this.step(this._getImplicitStep(), !1), this._initSlider(), this.updateDisplay());
    }
    _normalizeMouseWheel(t) {
        let { deltaX: i, deltaY: e } = t;
        Math.floor(t.deltaY) !== t.deltaY && t.wheelDelta && (i = 0, e = -t.wheelDelta / 120, e *= this._stepExplicit ? 1 : 10);
        return i + -e;
    }
    _arrowKeyMultiplier(t) {
        let i = this._stepExplicit ? 1 : 10;
        return t.shiftKey ? i *= 10 : t.altKey && (i /= 10), i;
    }
    _snap(t) {
        const i = Math.round(t / this._step) * this._step;
        return parseFloat(i.toPrecision(15));
    }
    _clamp(t) {
        return t < this._min && (t = this._min), t > this._max && (t = this._max), t;
    }
    _snapClampSetValue(t) {
        this.setValue(this._clamp(this._snap(t)));
    }
    get _hasScrollBar() {
        const t = this.parent.root.$children;
        return t.scrollHeight > t.clientHeight;
    }
    get _hasMin() {
        return void 0 !== this._min;
    }
    get _hasMax() {
        return void 0 !== this._max;
    }
}
class c extends t {
    constructor(t, i, e, s){
        super(t, i, e, "option"), this.$select = document.createElement("select"), this.$select.setAttribute("aria-labelledby", this.$name.id), this.$display = document.createElement("div"), this.$display.classList.add("display"), this._values = Array.isArray(s) ? s : Object.values(s), this._names = Array.isArray(s) ? s : Object.keys(s), this._names.forEach((t)=>{
            const i = document.createElement("option");
            i.innerHTML = t, this.$select.appendChild(i);
        }), this.$select.addEventListener("change", ()=>{
            this.setValue(this._values[this.$select.selectedIndex]), this._callOnFinishChange();
        }), this.$select.addEventListener("focus", ()=>{
            this.$display.classList.add("focus");
        }), this.$select.addEventListener("blur", ()=>{
            this.$display.classList.remove("focus");
        }), this.$widget.appendChild(this.$select), this.$widget.appendChild(this.$display), this.$disable = this.$select, this.updateDisplay();
    }
    updateDisplay() {
        const t = this.getValue(), i = this._values.indexOf(t);
        return this.$select.selectedIndex = i, this.$display.innerHTML = -1 === i ? t : this._names[i], this;
    }
}
class u extends t {
    constructor(t, i, e){
        super(t, i, e, "string"), this.$input = document.createElement("input"), this.$input.setAttribute("type", "text"), this.$input.setAttribute("aria-labelledby", this.$name.id), this.$input.addEventListener("input", ()=>{
            this.setValue(this.$input.value);
        }), this.$input.addEventListener("keydown", (t)=>{
            "Enter" === t.code && this.$input.blur();
        }), this.$input.addEventListener("blur", ()=>{
            this._callOnFinishChange();
        }), this.$widget.appendChild(this.$input), this.$disable = this.$input, this.updateDisplay();
    }
    updateDisplay() {
        return this.$input.value = this.getValue(), this;
    }
}
let p = !1;
class g {
    constructor({ parent: t, autoPlace: i = void 0 === t, container: e, width: s, title: n = "Controls", injectStyles: l = !0, touchStyles: r = !0 } = {}){
        if (this.parent = t, this.root = t ? t.root : this, this.children = [], this.controllers = [], this.folders = [], this._closed = !1, this._hidden = !1, this.domElement = document.createElement("div"), this.domElement.classList.add("lil-gui"), this.$title = document.createElement("div"), this.$title.classList.add("title"), this.$title.setAttribute("role", "button"), this.$title.setAttribute("aria-expanded", !0), this.$title.setAttribute("tabindex", 0), this.$title.addEventListener("click", ()=>this.openAnimated(this._closed)), this.$title.addEventListener("keydown", (t)=>{
            "Enter" !== t.code && "Space" !== t.code || (t.preventDefault(), this.$title.click());
        }), this.$title.addEventListener("touchstart", ()=>{}, {
            passive: !0
        }), this.$children = document.createElement("div"), this.$children.classList.add("children"), this.domElement.appendChild(this.$title), this.domElement.appendChild(this.$children), this.title(n), r && this.domElement.classList.add("allow-touch-styles"), this.parent) return this.parent.children.push(this), this.parent.folders.push(this), void this.parent.$children.appendChild(this.domElement);
        this.domElement.classList.add("root"), !p && l && (!function(t) {
            const i = document.createElement("style");
            i.innerHTML = t;
            const e = document.querySelector("head link[rel=stylesheet], head style");
            e ? document.head.insertBefore(i, e) : document.head.appendChild(i);
        }('.lil-gui{--background-color:#1f1f1f;--text-color:#ebebeb;--title-background-color:#111;--title-text-color:#ebebeb;--widget-color:#424242;--hover-color:#4f4f4f;--focus-color:#595959;--number-color:#2cc9ff;--string-color:#a2db3c;--font-size:11px;--input-font-size:11px;--font-family:-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,Arial,sans-serif;--font-family-mono:Menlo,Monaco,Consolas,"Droid Sans Mono",monospace;--padding:4px;--spacing:4px;--widget-height:20px;--name-width:45%;--slider-knob-width:2px;--slider-input-width:27%;--color-input-width:27%;--slider-input-min-width:45px;--color-input-min-width:45px;--folder-indent:7px;--widget-padding:0 0 0 3px;--widget-border-radius:2px;--checkbox-size:calc(var(--widget-height)*0.75);--scrollbar-width:5px;background-color:var(--background-color);color:var(--text-color);font-family:var(--font-family);font-size:var(--font-size);font-style:normal;font-weight:400;line-height:1;text-align:left;touch-action:manipulation;user-select:none;-webkit-user-select:none}.lil-gui,.lil-gui *{box-sizing:border-box;margin:0;padding:0}.lil-gui.root{display:flex;flex-direction:column;width:var(--width,245px)}.lil-gui.root>.title{background:var(--title-background-color);color:var(--title-text-color)}.lil-gui.root>.children{overflow-x:hidden;overflow-y:auto}.lil-gui.root>.children::-webkit-scrollbar{background:var(--background-color);height:var(--scrollbar-width);width:var(--scrollbar-width)}.lil-gui.root>.children::-webkit-scrollbar-thumb{background:var(--focus-color);border-radius:var(--scrollbar-width)}.lil-gui.force-touch-styles{--widget-height:28px;--padding:6px;--spacing:6px;--font-size:13px;--input-font-size:16px;--folder-indent:10px;--scrollbar-width:7px;--slider-input-min-width:50px;--color-input-min-width:65px}.lil-gui.autoPlace{max-height:100%;position:fixed;right:15px;top:0;z-index:1001}.lil-gui .controller{align-items:center;display:flex;margin:var(--spacing) 0;padding:0 var(--padding)}.lil-gui .controller.disabled{opacity:.5}.lil-gui .controller.disabled,.lil-gui .controller.disabled *{pointer-events:none!important}.lil-gui .controller>.name{flex-shrink:0;line-height:var(--widget-height);min-width:var(--name-width);padding-right:var(--spacing);white-space:pre}.lil-gui .controller .widget{align-items:center;display:flex;min-height:var(--widget-height);position:relative;width:100%}.lil-gui .controller.string input{color:var(--string-color)}.lil-gui .controller.boolean .widget{cursor:pointer}.lil-gui .controller.color .display{border-radius:var(--widget-border-radius);height:var(--widget-height);position:relative;width:100%}.lil-gui .controller.color input[type=color]{cursor:pointer;height:100%;opacity:0;width:100%}.lil-gui .controller.color input[type=text]{flex-shrink:0;font-family:var(--font-family-mono);margin-left:var(--spacing);min-width:var(--color-input-min-width);width:var(--color-input-width)}.lil-gui .controller.option select{max-width:100%;opacity:0;position:absolute;width:100%}.lil-gui .controller.option .display{background:var(--widget-color);border-radius:var(--widget-border-radius);height:var(--widget-height);line-height:var(--widget-height);max-width:100%;overflow:hidden;padding-left:.55em;padding-right:1.75em;pointer-events:none;position:relative;word-break:break-all}.lil-gui .controller.option .display.active{background:var(--focus-color)}.lil-gui .controller.option .display:after{bottom:0;content:"\u2195";font-family:lil-gui;padding-right:.375em;position:absolute;right:0;top:0}.lil-gui .controller.option .widget,.lil-gui .controller.option select{cursor:pointer}.lil-gui .controller.number input{color:var(--number-color)}.lil-gui .controller.number.hasSlider input{flex-shrink:0;margin-left:var(--spacing);min-width:var(--slider-input-min-width);width:var(--slider-input-width)}.lil-gui .controller.number .slider{background-color:var(--widget-color);border-radius:var(--widget-border-radius);cursor:ew-resize;height:var(--widget-height);overflow:hidden;padding-right:var(--slider-knob-width);touch-action:pan-y;width:100%}.lil-gui .controller.number .slider.active{background-color:var(--focus-color)}.lil-gui .controller.number .slider.active .fill{opacity:.95}.lil-gui .controller.number .fill{border-right:var(--slider-knob-width) solid var(--number-color);box-sizing:content-box;height:100%}.lil-gui-dragging .lil-gui{--hover-color:var(--widget-color)}.lil-gui-dragging *{cursor:ew-resize!important}.lil-gui-dragging.lil-gui-vertical *{cursor:ns-resize!important}.lil-gui .title{--title-height:calc(var(--widget-height) + var(--spacing)*1.25);-webkit-tap-highlight-color:transparent;text-decoration-skip:objects;cursor:pointer;font-weight:600;height:var(--title-height);line-height:calc(var(--title-height) - 4px);outline:none;padding:0 var(--padding)}.lil-gui .title:before{content:"\u25BE";display:inline-block;font-family:lil-gui;padding-right:2px}.lil-gui .title:active{background:var(--title-background-color);opacity:.75}.lil-gui.root>.title:focus{text-decoration:none!important}.lil-gui.closed>.title:before{content:"\u25B8"}.lil-gui.closed>.children{opacity:0;transform:translateY(-7px)}.lil-gui.closed:not(.transition)>.children{display:none}.lil-gui.transition>.children{overflow:hidden;pointer-events:none;transition-duration:.3s;transition-property:height,opacity,transform;transition-timing-function:cubic-bezier(.2,.6,.35,1)}.lil-gui .children:empty:before{content:"Empty";display:block;font-style:italic;height:var(--widget-height);line-height:var(--widget-height);margin:var(--spacing) 0;opacity:.5;padding:0 var(--padding)}.lil-gui.root>.children>.lil-gui>.title{border-width:0;border-bottom:1px solid var(--widget-color);border-left:0 solid var(--widget-color);border-right:0 solid var(--widget-color);border-top:1px solid var(--widget-color);transition:border-color .3s}.lil-gui.root>.children>.lil-gui.closed>.title{border-bottom-color:transparent}.lil-gui+.controller{border-top:1px solid var(--widget-color);margin-top:0;padding-top:var(--spacing)}.lil-gui .lil-gui .lil-gui>.title{border:none}.lil-gui .lil-gui .lil-gui>.children{border:none;border-left:2px solid var(--widget-color);margin-left:var(--folder-indent)}.lil-gui .lil-gui .controller{border:none}.lil-gui input{-webkit-tap-highlight-color:transparent;background:var(--widget-color);border:0;border-radius:var(--widget-border-radius);color:var(--text-color);font-family:var(--font-family);font-size:var(--input-font-size);height:var(--widget-height);outline:none;width:100%}.lil-gui input:disabled{opacity:1}.lil-gui input[type=number],.lil-gui input[type=text]{padding:var(--widget-padding)}.lil-gui input[type=number]:focus,.lil-gui input[type=text]:focus{background:var(--focus-color)}.lil-gui input::-webkit-inner-spin-button,.lil-gui input::-webkit-outer-spin-button{-webkit-appearance:none;margin:0}.lil-gui input[type=number]{-moz-appearance:textfield}.lil-gui input[type=checkbox]{appearance:none;-webkit-appearance:none;border-radius:var(--widget-border-radius);cursor:pointer;height:var(--checkbox-size);text-align:center;width:var(--checkbox-size)}.lil-gui input[type=checkbox]:checked:before{content:"\u2713";font-family:lil-gui;font-size:var(--checkbox-size);line-height:var(--checkbox-size)}.lil-gui button{-webkit-tap-highlight-color:transparent;background:var(--widget-color);border:1px solid var(--widget-color);border-radius:var(--widget-border-radius);color:var(--text-color);cursor:pointer;font-family:var(--font-family);font-size:var(--font-size);height:var(--widget-height);line-height:calc(var(--widget-height) - 4px);outline:none;text-align:center;text-transform:none;width:100%}.lil-gui button:active{background:var(--focus-color)}@font-face{font-family:lil-gui;src:url("data:application/font-woff;charset=utf-8;base64,d09GRgABAAAAAAUsAAsAAAAACJwAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAABHU1VCAAABCAAAAH4AAADAImwmYE9TLzIAAAGIAAAAPwAAAGBKqH5SY21hcAAAAcgAAAD0AAACrukyyJBnbHlmAAACvAAAAF8AAACEIZpWH2hlYWQAAAMcAAAAJwAAADZfcj2zaGhlYQAAA0QAAAAYAAAAJAC5AHhobXR4AAADXAAAABAAAABMAZAAAGxvY2EAAANsAAAAFAAAACgCEgIybWF4cAAAA4AAAAAeAAAAIAEfABJuYW1lAAADoAAAASIAAAIK9SUU/XBvc3QAAATEAAAAZgAAAJCTcMc2eJxVjbEOgjAURU+hFRBK1dGRL+ALnAiToyMLEzFpnPz/eAshwSa97517c/MwwJmeB9kwPl+0cf5+uGPZXsqPu4nvZabcSZldZ6kfyWnomFY/eScKqZNWupKJO6kXN3K9uCVoL7iInPr1X5baXs3tjuMqCtzEuagm/AAlzQgPAAB4nGNgYRBlnMDAysDAYM/gBiT5oLQBAwuDJAMDEwMrMwNWEJDmmsJwgCFeXZghBcjlZMgFCzOiKOIFAB71Bb8AeJy1kjFuwkAQRZ+DwRAwBtNQRUGKQ8OdKCAWUhAgKLhIuAsVSpWz5Bbkj3dEgYiUIszqWdpZe+Z7/wB1oCYmIoboiwiLT2WjKl/jscrHfGg/pKdMkyklC5Zs2LEfHYpjcRoPzme9MWWmk3dWbK9ObkWkikOetJ554fWyoEsmdSlt+uR0pCJR34b6t/TVg1SY3sYvdf8vuiKrpyaDXDISiegp17p7579Gp3p++y7HPAiY9pmTibljrr85qSidtlg4+l25GLCaS8e6rRxNBmsnERunKbaOObRz7N72ju5vdAjYpBXHgJylOAVsMseDAPEP8LYoUHicY2BiAAEfhiAGJgZWBgZ7RnFRdnVJELCQlBSRlATJMoLV2DK4glSYs6ubq5vbKrJLSbGrgEmovDuDJVhe3VzcXFwNLCOILB/C4IuQ1xTn5FPilBTj5FPmBAB4WwoqAHicY2BkYGAA4sk1sR/j+W2+MnAzpDBgAyEMQUCSg4EJxAEAwUgFHgB4nGNgZGBgSGFggJMhDIwMqEAYAByHATJ4nGNgAIIUNEwmAABl3AGReJxjYAACIQYlBiMGJ3wQAEcQBEV4nGNgZGBgEGZgY2BiAAEQyQWEDAz/wXwGAAsPATIAAHicXdBNSsNAHAXwl35iA0UQXYnMShfS9GPZA7T7LgIu03SSpkwzYTIt1BN4Ak/gKTyAeCxfw39jZkjymzcvAwmAW/wgwHUEGDb36+jQQ3GXGot79L24jxCP4gHzF/EIr4jEIe7wxhOC3g2TMYy4Q7+Lu/SHuEd/ivt4wJd4wPxbPEKMX3GI5+DJFGaSn4qNzk8mcbKSR6xdXdhSzaOZJGtdapd4vVPbi6rP+cL7TGXOHtXKll4bY1Xl7EGnPtp7Xy2n00zyKLVHfkHBa4IcJ2oD3cgggWvt/V/FbDrUlEUJhTn/0azVWbNTNr0Ens8de1tceK9xZmfB1CPjOmPH4kitmvOubcNpmVTN3oFJyjzCvnmrwhJTzqzVj9jiSX911FjeAAB4nG3HMRKCMBBA0f0giiKi4DU8k0V2GWbIZDOh4PoWWvq6J5V8If9NVNQcaDhyouXMhY4rPTcG7jwYmXhKq8Wz+p762aNaeYXom2n3m2dLTVgsrCgFJ7OTmIkYbwIbC6vIB7WmFfAAAA==") format("woff")}@media (pointer:coarse){.lil-gui.allow-touch-styles{--widget-height:28px;--padding:6px;--spacing:6px;--font-size:13px;--input-font-size:16px;--folder-indent:10px;--scrollbar-width:7px;--slider-input-min-width:50px;--color-input-min-width:65px}}@media (hover:hover){.lil-gui .controller.color .display:hover:before{border:1px solid #fff9;border-radius:var(--widget-border-radius);bottom:0;content:" ";display:block;left:0;position:absolute;right:0;top:0}.lil-gui .controller.option .display.focus{background:var(--focus-color)}.lil-gui .controller.option .widget:hover .display{background:var(--hover-color)}.lil-gui .controller.number .slider:hover{background-color:var(--hover-color)}body:not(.lil-gui-dragging) .lil-gui .title:hover{background:var(--title-background-color);opacity:.85}.lil-gui .title:focus{text-decoration:underline var(--focus-color)}.lil-gui input:hover{background:var(--hover-color)}.lil-gui input:active{background:var(--focus-color)}.lil-gui input[type=checkbox]:focus{box-shadow:inset 0 0 0 1px var(--focus-color)}.lil-gui button:hover{background:var(--hover-color);border-color:var(--hover-color)}.lil-gui button:focus{border-color:var(--focus-color)}}'), p = !0), e ? e.appendChild(this.domElement) : i && (this.domElement.classList.add("autoPlace"), document.body.appendChild(this.domElement)), s && this.domElement.style.setProperty("--width", s + "px"), this.domElement.addEventListener("keydown", (t)=>t.stopPropagation()), this.domElement.addEventListener("keyup", (t)=>t.stopPropagation());
    }
    add(t, e, s, n, l) {
        if (Object(s) === s) return new c(this, t, e, s);
        const r = t[e];
        switch(typeof r){
            case "number":
                return new d(this, t, e, s, n, l);
            case "boolean":
                return new i(this, t, e);
            case "string":
                return new u(this, t, e);
            case "function":
                return new h(this, t, e);
        }
        console.error("gui.add failed\n	property:", e, "\n	object:", t, "\n	value:", r);
    }
    addColor(t, i, e = 1) {
        return new a(this, t, i, e);
    }
    addFolder(t) {
        return new g({
            parent: this,
            title: t
        });
    }
    load(t, i = !0) {
        return t.controllers && this.controllers.forEach((i)=>{
            i instanceof h || i._name in t.controllers && i.load(t.controllers[i._name]);
        }), i && t.folders && this.folders.forEach((i)=>{
            i._title in t.folders && i.load(t.folders[i._title]);
        }), this;
    }
    save(t = !0) {
        const i = {
            controllers: {},
            folders: {}
        };
        return this.controllers.forEach((t)=>{
            if (!(t instanceof h)) {
                if (t._name in i.controllers) throw new Error(`Cannot save GUI with duplicate property "${t._name}"`);
                i.controllers[t._name] = t.save();
            }
        }), t && this.folders.forEach((t)=>{
            if (t._title in i.folders) throw new Error(`Cannot save GUI with duplicate folder "${t._title}"`);
            i.folders[t._title] = t.save();
        }), i;
    }
    open(t = !0) {
        return this._closed = !t, this.$title.setAttribute("aria-expanded", !this._closed), this.domElement.classList.toggle("closed", this._closed), this;
    }
    close() {
        return this.open(!1);
    }
    show(t = !0) {
        return this._hidden = !t, this.domElement.style.display = this._hidden ? "none" : "", this;
    }
    hide() {
        return this.show(!1);
    }
    openAnimated(t = !0) {
        return this._closed = !t, this.$title.setAttribute("aria-expanded", !this._closed), requestAnimationFrame(()=>{
            const i = this.$children.clientHeight;
            this.$children.style.height = i + "px", this.domElement.classList.add("transition");
            const e = (t)=>{
                t.target === this.$children && (this.$children.style.height = "", this.domElement.classList.remove("transition"), this.$children.removeEventListener("transitionend", e));
            };
            this.$children.addEventListener("transitionend", e);
            const s = t ? this.$children.scrollHeight : 0;
            this.domElement.classList.toggle("closed", !t), requestAnimationFrame(()=>{
                this.$children.style.height = s + "px";
            });
        }), this;
    }
    title(t) {
        return this._title = t, this.$title.innerHTML = t, this;
    }
    reset(t = !0) {
        return (t ? this.controllersRecursive() : this.controllers).forEach((t)=>t.reset()), this;
    }
    onChange(t) {
        return this._onChange = t, this;
    }
    _callOnChange(t) {
        this.parent && this.parent._callOnChange(t), void 0 !== this._onChange && this._onChange.call(this, {
            object: t.object,
            property: t.property,
            value: t.getValue(),
            controller: t
        });
    }
    onFinishChange(t) {
        return this._onFinishChange = t, this;
    }
    _callOnFinishChange(t) {
        this.parent && this.parent._callOnFinishChange(t), void 0 !== this._onFinishChange && this._onFinishChange.call(this, {
            object: t.object,
            property: t.property,
            value: t.getValue(),
            controller: t
        });
    }
    destroy() {
        this.parent && (this.parent.children.splice(this.parent.children.indexOf(this), 1), this.parent.folders.splice(this.parent.folders.indexOf(this), 1)), this.domElement.parentElement && this.domElement.parentElement.removeChild(this.domElement), Array.from(this.children).forEach((t)=>t.destroy());
    }
    controllersRecursive() {
        let t = Array.from(this.controllers);
        return this.folders.forEach((i)=>{
            t = t.concat(i.controllersRecursive());
        }), t;
    }
    foldersRecursive() {
        let t = Array.from(this.folders);
        return this.folders.forEach((i)=>{
            t = t.concat(i.foldersRecursive());
        }), t;
    }
}
exports.default = g;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"byeW1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "PopupContentMaker", ()=>PopupContentMaker);
var _htmlFactoryJs = require("../../htmlGeneration/htmlFactory.js");
var _echartsThemesJs = require("../../dataComponents/charts/echarts/theme/echartsThemes.js");
var _echartsThemesJsDefault = parcelHelpers.interopDefault(_echartsThemesJs);
var _chartBuilderJs = require("../../dataComponents/charts/chartBuilder.js");
var _indexJs = require("../../communication/index.js");
var _constantsJs = require("../../sharedVariables/constants.js");
var _popupJs = require("../../components/popup/popup.js");
class PopupContentMaker {
    dataTable;
    constructor(){
        this.dataTable = new Map();
        this.HF = new (0, _htmlFactoryJs.HTMLFactory)();
        this.dataTable.set("popupContentWrapper", this.HF.createNewDiv("", "", [
            "popup-content"
        ], []));
        this.publisher = new (0, _indexJs.Publisher)();
        this.chartBuilder = new (0, _chartBuilderJs.ChartBuilder)();
    }
    /** --- PUBLIC ---
     * Appends the description string to the popup content wraper.
     * @param {string} text a description of the module associated with the popup.
     */ addDescriptionText(text) {
        this.getPopupContentWrapper().appendChild(this.HF.createNewParagraph("", "", [
            "popup-module-description"
        ], [], text));
    }
    setPopupDimension(width, height) {
        const popup = this.getPopupContentWrapper().closest(".popup");
        console.log(this.getPopupContentWrapper());
        console.log(popup);
    /*if (width) {
            popup.style.width = width;
        }
        if (height) {
            popup.style.height = height;
        }*/ }
    /** --- PUBLIC --- DEPRECATED
     * Creates the HTML elements for the file upload section and binds a callback function to the button.
     * @param {function} callback validates the file on the CSV module
     * @param {number} key id of the CSV module that created this.
     */ createFileUploadField(callback, key) {
        const uploadWrapper = this.HF.createNewDiv("", "", [
            "uploadWrapper"
        ], []);
        this.getPopupContentWrapper().appendChild(uploadWrapper);
        const upload = this.HF.createNewFileInput("upload_csv", "upload_csv", [], [], "file", false);
        uploadWrapper.append(upload);
        upload.addEventListener("change", callback);
        this.dataTable.set("readFileButton", this.HF.createNewButton("read-file-button", "read-file-button", [], [], "button", "Read File", true));
        uploadWrapper.appendChild(this.getField("readFileButton"));
        this.getField("readFileButton").addEventListener("click", ()=>{
            const message = new (0, _indexJs.Message)((0, _constantsJs.INPUT_MANAGER), (0, _constantsJs.POPUP_CONTENT_MAKER), "Read File Event", {
                type: "csv",
                source: "html",
                path: "upload_csv",
                moduleKey: key
            });
            this.sendMessage(message);
        });
    }
    /** --- PUBLIC ---
     * Not Yet Implemented --- 
     * Should display information about the metadata for a data set.
    */ addMetadataCard(metadata) {
        console.log(metadata);
    }
    addDataCard(data, tableId) {
        // create table elements
        // display headers
        // display content
        // console.log(data);
        // change to plotly data display instead of HTML
        return this.HF.createNewTable(data, 10, tableId);
    }
    /** --- PUBLIC ---
     * Called by the CSV source. This will create a DIV where data about the csv file can be inserted.
     * @returns HTML div
     */ addDataArea() {
        this.dataTable.set("dataArea", this.HF.createNewDiv("csvDataArea", "csvDataArea", [], []));
        this.getPopupContentWrapper().appendChild(this.dataTable.get("dataArea"));
        return this.getField("dataArea");
    }
    /** --- PUBLIC ---
     * Stores the chart information and data into the outputmap hash table.
     * @param {number} key key identifying the location in the hash table. it is also the id of the module associated with this chart.
     * @param {object} data the data that is used for the chart
     * @param {object} div the html div to inject the chart
     * @param {string} type the type of chart. ie. 'bar', 'scatter'
     * @param {string} xAxisLabel (Optional)
     * @param {string} yAxisLabel (Optional)
     * @returns true if successful, false if failure  
     */ /*
    storeChartData = (key, data, div, type, xAxisLabel, yAxisLabel, xAxisGrid, yAxisGrid, xAxisTick, yAxisTick, coordinateSystem) => {
        if (invalidVariables([varTest(key, 'key', 'number'), varTest(data, 'data', 'object'), varTest(div, 'div', 'object'), varTest(type, 'type', 'string')], 'OutputManager', 'storeChartData')) return false;
        this.#outputMap.set(key, { data: data, type: type, div: div, outputType: 'chart', framework: this.#getFramework(type), theme: 'dark', xAxisLabel: xAxisLabel, yAxisLabel: yAxisLabel, xAxisGrid: xAxisGrid, yAxisGrid: yAxisGrid, xAxisTick: xAxisTick, yAxisTick: yAxisTick, coordinateSystem: coordinateSystem });
        return true;
    }*/ /***************** Mai 022823 ******************/ /** --- PUBLIC ---
     * Called from Search Module when data is queried. This will create a search result data table
     * @params {Object} data to update the content with.
     * @returns HTML div (content of the popup to be updated)
     */ setSearchModuleContent(moduleKey, content, data) {
        // if content is for Search Module.. display tabulator table >>>>>>>>>>>> change to switch statement?
        /* if (data.tableData) {
            // Organize data for the tabulator data
            if (content.querySelector('.tabulator') == null) {
                // delete any div child under popup content
                var popupcontent = content.querySelector('div');
                if (popupcontent) {
                    content.removeChild(content.querySelector('div'));
                }

                content.style.height = "calc(100% - 2rem)"; // set height to fit content

                var downloadBtn = this.HF.createNewButton('', [], ['download-csv-button'], ['border-radius: 3px'], 'button', 'Download CSV');
                this.dataTable.set('downloadControls', this.HF.createNewDiv('download-wrapper', '', ['download-wrapper'], []));
                this.getField('downloadControls').appendChild(downloadBtn);
                content.appendChild(this.getField('downloadControls'));

                var tableWrapper = this.HF.createNewDiv('table-wrapper-' + moduleKey, '', ['table-wrapper'], []);
                this.dataTable.set('searchTableDiv', tableWrapper);

                content.appendChild(this.getField('searchTableDiv'));
                console.log(data);
                var table = this.chartBuilder.plotData(data, 'table', tableWrapper, '', '', 'tabulator');

                // add download csv event listener
                downloadBtn.addEventListener('click', function () {
                    var filename = 'search-results-' + moduleKey;
                    table.download('csv', filename + '.csv');
                });
            }
            // Update table content
            else {
                var pdiv = content.querySelector('.table-wrapper');
                this.chartBuilder.updatePlotData(data, 'table', pdiv, '', '', 'tabulator');
            }
        }*/ var popupcontent = content.querySelector("div");
        if (popupcontent) content.removeChild(content.querySelector("div"));
        content.style.height = "calc(100% - 2rem)"; // set height to fit content
        if (data) {
            var popupContentWrapper = this.HF.createNewDiv("popup-content-wrapper-" + moduleKey, "", [
                "popup-content-wrapper"
            ], []);
            // temp content
            var queryType = this.HF.createNewH1("", "", [
                "query-type"
            ], [], data.queryType);
            popupContentWrapper.appendChild(queryType);
            var queryKeys = Object.keys(data.queryEntries);
            queryKeys.forEach((key)=>{
                var queryEntryDiv = this.HF.createNewDiv("", "", [
                    "query-entries"
                ], []);
                var label = this.HF.createNewLabel("", "", "query-type-" + key, [
                    "query-type"
                ], [], key + ": ");
                var span = this.HF.createNewSpan("query-type-" + key, "", [
                    "query-type"
                ], [], data.queryEntries[key]);
                queryEntryDiv.appendChild(label);
                queryEntryDiv.appendChild(span);
                popupContentWrapper.appendChild(queryEntryDiv);
            });
            content.appendChild(popupContentWrapper);
        }
    }
    setTablePopupContent(moduleKey) {
        // Create CSV download button
        var downloadWrapper = this.HF.createNewDiv("download-wrapper", "", [
            "download-wrapper"
        ], []);
        var downloadBtn = this.HF.createNewButton("", [], [
            "download-csv-button"
        ], [
            "border-radius: 3px"
        ], "button", "Download CSV");
        downloadWrapper.appendChild(downloadBtn);
        this.dataTable.set("downloadControls", downloadWrapper);
        // Create table wrapper
        var tableWrapper = this.HF.createNewDiv(`table-wrapper-${moduleKey}`, "", [
            "table-wrapper"
        ], []);
        this.getPopupContentWrapper().appendChild(downloadWrapper);
        this.getPopupContentWrapper().appendChild(tableWrapper);
    }
    setTableData(moduleKey, content, data) {
        if (data) {
            var tableWrapper = content.querySelector(".table-wrapper");
            var downloadBtn = content.querySelector(".download-wrapper");
            // Organize data for the tabulator data
            var table = this.chartBuilder.plotData(data, "table", tableWrapper, "", "80%", "tabulator");
            // add download csv event listener
            downloadBtn.addEventListener("click", function() {
                var filename = `table-results-${moduleKey}`;
                table.download("csv", `${filename}.csv`, {
                    delimiter: ","
                });
            });
        /*if (content.querySelector('.tabulator') == null) {
                // delete any div child under popup content
                var popupcontent = content.querySelector('div');
                if (popupcontent) {
                    content.removeChild(content.firstChild);
                }
                content.style.height = "calc(100% - 3rem)"; // set height to fit content

                var downloadBtn = this.HF.createNewButton('', [], ['download-csv-button'], ['border-radius: 3px'], 'button', 'Download CSV');
                this.dataTable.set('downloadControls', this.HF.createNewDiv('download-wrapper', '', ['download-wrapper'], []));
                this.getField('downloadControls').appendChild(downloadBtn);
                content.appendChild(this.getField('downloadControls'));

                var tableWrapper = this.HF.createNewDiv('table-wrapper-' + moduleKey, '', ['table-wrapper', 'tabulator'], []);
                this.dataTable.set('tableWrapper-' + moduleKey, tableWrapper);

                content.appendChild(this.getField('tableWrapper-' + moduleKey));
                var table = this.chartBuilder.plotData(data.tableData, 'table', tableWrapper, '', '85%', 'tabulator');
                // add download csv event listener
                downloadBtn.addEventListener('click', function () {
                    var filename = 'table-results-' + moduleKey;
                    table.download('csv', filename + '.csv');
                });
            }
            else {
                console.log('------------ update table content ------------');
                var pdiv = content.querySelector('.table-wrapper'); // get from dataTable instead
                this.chartBuilder.updatePlotData(data.tableData, 'table', pdiv, '', '', 'tabulator');
            }*/ }
    }
    /***************** SEARCH Module ******************/ /***************** Mai 041923 ******************/ /** --- PUBLIC ---
     * Sets error message in the popup content.
     * @params {number} key the keyof the parent module for this popup.
     * @params {object} object containing error details (messages, etc)
     * @returns HTML div (content of the popup to be updated displayed)
     */ setErrorDisplay(moduleKey, content, data) {
        /*var popupcontent = content.querySelector('div');
        if (popupcontent) {
            content.removeChild(content.firstChild);
        }*/ // Search Module Error .......... [change to switch statement]
        if (data.queryEntries) {
            // if query type, search module error
            const messages = [];
            let errorMessage = this.HF.createNewParagraph("", "", [
                "error-message"
            ], [], "The following query failed:");
            messages.push(errorMessage);
            let queryFields = this.HF.createNewDiv("", "", [
                "error-message"
            ], [
                {
                    key: "display",
                    value: "grid"
                },
                {
                    key: "grid-template-columns",
                    value: "repeat(3, 1fr)"
                }
            ]);
            let queryKeys = Object.keys(data.queryEntries);
            // Find the longest string in queryKeys
            let longestText = "";
            queryKeys.forEach((text)=>{
                if (text.length > longestText.length) longestText = text;
            });
            // Fields of the query that failed
            queryKeys.forEach((key)=>{
                let wrapper = this.HF.createNewParagraph("", "", [
                    "error-query-wrapper"
                ], [], "");
                let keySpan = this.HF.createNewSpan("", "", [
                    "error-query-key"
                ], [
                    {
                        style: "width",
                        value: longestText.length + "ch"
                    },
                    {
                        style: "text-align",
                        value: "right"
                    }
                ], key + ":");
                keySpan.innerHTML += "&nbsp;&nbsp;";
                let valueSpan = this.HF.createNewSpan("", "", [
                    "error-query-value"
                ], [], data.queryEntries[key]);
                wrapper.appendChild(keySpan);
                wrapper.appendChild(valueSpan);
                queryFields.appendChild(wrapper);
            });
            messages.push(queryFields);
            // error contact message sentence organized into span and anchor elements
            let errorContact = this.HF.createNewParagraph("", "", [
                "error-contact-wrapper"
            ], [], "");
            let firstspan = this.HF.createNewSpan("", "", [
                "error-contact"
            ], [], "Please contact the ");
            let anchor = this.HF.createNewAnchor("mailto:admin@comaifa.com", "", "", [
                "error-contact"
            ], [], "admin@comaifa.com");
            let lastspan = this.HF.createNewSpan("", "", [
                "error-contact"
            ], [], " if error persists.");
            errorContact.appendChild(firstspan);
            errorContact.appendChild(anchor);
            errorContact.appendChild(lastspan);
            messages.push(errorContact);
            // if it doesnt exist in the dataTable already, set the errorwrapper to dataTable
            if (this.getField("errorWrapper") === undefined) {
                // delete any div child under popup content
                var popupcontent = content.querySelector("div");
                if (popupcontent) content.removeChild(content.querySelector("div"));
                this.dataTable.set("errorWrapper", this.HF.createNewDiv("error-wrapper-" + moduleKey, "", [
                    "error-wrapper"
                ], [
                    {
                        style: "width",
                        value: "60%"
                    },
                    {
                        style: "display",
                        value: "flex"
                    },
                    {
                        style: "margin",
                        value: "auto"
                    },
                    {
                        style: "flex-flow",
                        value: "column"
                    }
                ]));
                var errorWrapper = this.getField("errorWrapper");
                var errorHeader = this.HF.createNewDiv("", "", [
                    "error-header"
                ], [
                    {
                        style: "height",
                        value: "2rem"
                    }
                ]);
                var errorBody = this.HF.createNewDiv("", "", [
                    "error-body"
                ], [
                    {
                        style: "height",
                        value: "70%"
                    }
                ]);
                var errorTitle = this.HF.createNewH1("", "", [
                    "error-title"
                ], [], "Error");
                errorWrapper.appendChild(errorHeader);
                errorWrapper.appendChild(errorBody);
                errorHeader.appendChild(errorTitle);
                messages.forEach((message)=>{
                    errorBody.appendChild(message);
                });
                content.appendChild(errorWrapper);
            } else {
                var errorWrapper = this.getField("errorWrapper");
                var errorBody = errorWrapper.querySelector(".error-body");
                while(errorBody.firstChild)errorBody.removeChild(errorBody.firstChild);
                messages.forEach((message)=>{
                    errorBody.appendChild(message);
                });
                errorWrapper.appendChild(errorBody);
            }
        }
    }
    /** --- PUBLIC ---
     * 
     * @param {*} key 
     * @returns 
     */ addPlotDiv(key) {
        this.dataTable.set("plotDiv", this.HF.createNewDiv(`plot_${key}`, `plot_${key}`, [
            "plot-wrapper"
        ], [
            "chartDiv"
        ]));
        this.getPopupContentWrapper().appendChild(this.getField("plotDiv"));
        return this.getField("plotDiv");
    }
    addEChartThemeDropdown(key) {
        var themeDDWrapper = this.HF.createNewDiv("", "", [
            "chart-theme-wrapper"
        ], []);
        this.dataTable.set("themeDD", this.HF.createNewSelect(`chart-theme-dd-${key}`, "", [
            "chart-theme-dd"
        ], [], (0, _echartsThemesJsDefault.default), (0, _echartsThemesJsDefault.default)));
        var themeDD = this.getField("themeDD");
        this.setEchartThemeDropdownEventListener(themeDD, key);
        themeDDWrapper.appendChild(themeDD);
        this.getPopupContentWrapper().appendChild(themeDDWrapper);
        return themeDD;
    }
    buildEchartThemeDropdown = (key)=>{
        return this.HF.createNewSelect(`plot_${key}`, `plot_${key}`, [
            "plot-dd"
        ], [], (0, _echartsThemesJsDefault.default), (0, _echartsThemesJsDefault.default));
    };
    setEchartThemeDropdownEventListener = (dropDownElement, key)=>{
        dropDownElement.addEventListener("change", (event)=>{
            this.sendMessage(new (0, _indexJs.Message)((0, _constantsJs.OUTPUT_MANAGER), (0, _constantsJs.POPUP_CONTENT_MAKER), "Change EChart Theme Event", {
                moduleKey: key,
                theme: event.target.value
            }));
        });
    };
    /*********************************************** Render Object Image ****************************************************/ createObjectImagesPopup(moduleKey, objectName, imageDates, imagesToRender) {
        // Create Dropdown of observed dates
        //--------- TEST
        //imageDates = ['2019-01-03', '2021-10-11', '2022-06-23'];
        console.log(objectName);
        const datesDropdownWrapper = this.HF.createNewDiv("dates-dropdown-wrapper", "", [
            "dropdown-wrapper"
        ], []);
        const datesDropdown = this.HF.createNewSelect("", "", [
            "dates-dropdown"
        ], [], imageDates, imageDates);
        datesDropdownWrapper.appendChild(datesDropdown);
        //--------- TEST
        //imagesToRender = ['C2018DO4_2019-01-03.png', 'C2018DO4_2021-10-11.png', 'C2018DO4_2022-06-23.png'];
        const imageWrapper = this.HF.createNewDiv("", "", [
            "image-wrapper"
        ], []);
        const objectImages = this.HF.createNewIMG("", "", `./images/fits_demo/Object_Images/${imagesToRender[0]}`, [
            "object-image"
        ], [
            {
                style: "width",
                value: "400px"
            }
        ], imagesToRender[0].replace(".png", ""));
        imageWrapper.appendChild(objectImages);
        const popupDiv = this.getPopupContentWrapper();
        popupDiv.classList.add("image-popup-content");
        popupDiv.appendChild(datesDropdownWrapper);
        popupDiv.appendChild(imageWrapper);
        // add event listener when the image date is selected, render that image instead
        datesDropdown.addEventListener("change", (e)=>{
            const dropdown = e.target;
            // get the image to render from selected date
            let newImagePath = imagesToRender.filter((path)=>path.includes(dropdown.value));
            newImagePath = newImagePath ? newImagePath[0] : dropdown.options[0];
            // remove child of imageWrapper
            //const imageWrapper = dropdown.closest('.image-popup-content').querySelector('.image-wrapper');
            imageWrapper.removeChild(imageWrapper.firstChild);
            // add image to imageWrapper with the selected date
            const newImage = this.HF.createNewIMG("", "", `./images/fits_demo/Object_Images/${newImagePath}`, [
                "object-image"
            ], [
                {
                    style: "width",
                    value: "400px"
                }
            ], newImagePath.replace(".png", ""));
            imageWrapper.appendChild(newImage);
        });
    }
    getField = (key)=>this.dataTable.get(key);
    getPopupContentWrapper = ()=>this.dataTable.get("popupContentWrapper");
    sendMessage(msg) {
        console.log(msg);
        this.publisher.publishMessage(msg);
    }
}

},{"../../htmlGeneration/htmlFactory.js":"9lYdL","../../dataComponents/charts/echarts/theme/echartsThemes.js":"5QhcJ","../../dataComponents/charts/chartBuilder.js":"iLUoX","../../communication/index.js":"eT70M","../../sharedVariables/constants.js":"dxmqI","../../components/popup/popup.js":"7Q5cD","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5QhcJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const themes = [
    "dark",
    "macarons",
    "roma",
    "shine",
    "vintage"
];
exports.default = themes;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iLUoX":[function(require,module,exports) {
/*************************************************************
 * COPYRIGHT University of Hawaii - COMA Project / Lava Lab  *
 * Author: James Hutchison                                   *
 * Date: 5/5/2022                                            *
 *************************************************************/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ChartBuilder", ()=>ChartBuilder);
var _htmlFactoryJs = require("../../htmlGeneration/htmlFactory.js");
class ChartBuilder {
    #optionGenerationMap;
    #planetaryRadii;
    #dataTable;
    #HF;
    constructor(){
        this.#optionGenerationMap = new Map();
        this.#optionGenerationMap.set("polar", this.#generatePolarOptions.bind(this));
        this.#optionGenerationMap.set("cartesian2d", this.#generate2dCartesianOptions.bind(this));
        this.#planetaryRadii = new Map();
        this.#planetaryRadii.set("mercury", 0.38);
        this.#planetaryRadii.set("venus", 0.72);
        this.#planetaryRadii.set("earth", 1);
        this.#planetaryRadii.set("mars", 1.52);
        this.#planetaryRadii.set("jupiter", 5.33);
        this.#planetaryRadii.set("saturn", 9.54);
        this.#planetaryRadii.set("uranus", 19.22);
        this.#planetaryRadii.set("neptune", 30.06);
        this.#dataTable = new Map();
        this.#HF = new (0, _htmlFactoryJs.HTMLFactory)();
    }
    /** --- PUBLIC ---
     * There are a lot of options passed to the function from the HUB.
     * @param {{e: any[], x: any[]}, y: any[]} data Arrays of the data for the x axis, y axis, and error trace
     * @param {string} type chart type, ie 'bar'
     * @param {HTML div} pdiv the plot div is the location to inject the chart in the dom 
     * @param {Number} width width of the chart
     * @param {Number} height height of the chart
     * @param {string} framework echart makes all charts except table. plotly makes the table 
     * @param {string} theme echart color theme 
     * @param {string} xAxisLabel user defined label for the x axis 
     * @param {string} yAxisLabel user defined label for the y axis 
     * @param {boolean} xAxisGrid true if include grid
     * @param {boolean} yAxisGrid true if include grid
     * @param {boolean} xAxisTick true if include tick marks
     * @param {boolean} yAxisTick true if include tick marks
     * @param {string} coordinateSystem polar or cartesian2d
     * @returns chart object  */ plotData = (data, type, pdiv, width, height, framework, theme, coordinateSystem)=>{
        switch(framework){
            case "tabulator":
                return this.#drawTabulatorTable(data, type, pdiv, width, height);
            case "plotly":
                return this.#drawPlotlyChart(data, type, pdiv, width, height);
            case "echart":
                return this.#drawEChartChart(data, type, pdiv, width, height, theme, coordinateSystem);
        }
    };
    /** --- PRIVATE ---
     * Plots data as an echart with options
     * @param {{e: any[], x: any[]}, y: any[][]} data Arrays of the data for the x axis, y axis, and error trace
     * @param {string} type chart type, ie 'bar'
     * @param {HTML div} pdiv the plot div is the location to inject the chart in the dom 
     * @param {Number} width width of the chart
     * @param {Number} height height of the chart
     * @param {string} framework echart makes all charts
     * @param {string} theme echart color theme 
     * @param {string} xAxisLabel user defined label for the x axis 
     * @param {string} yAxisLabel user defined label for the y axis 
     * @param {boolean} xAxisGrid true if include grid
     * @param {boolean} yAxisGrid true if include grid
     * @param {boolean} xAxisTick true if include tick marks
     * @param {boolean} yAxisTick true if include tick marks
     * @param {string} coordinateSystem polar or cartesian2d
     * @returns echart object
     */ #drawEChartChart = (data, type, pdiv, width, height, theme, coordinateSystem)=>{
        const myChart = echarts.init(pdiv, theme);
        const option = this.#optionGenerationMap.get(coordinateSystem)(data, type, coordinateSystem);
        option && myChart.setOption(option);
        //console.log(option);
        this.resizeEchart(myChart, width, height);
        return myChart;
    };
    /** --- PRIVATE ---
     * Create the option set for an echart polar chart
     * There are many more possible options that can and should be included in the final product
     * @param {{e: any[], x: any[]}, y: any[][]} data Arrays of the data for the x axis, y axis, and error trace
     * @param {string} type chart type, ie 'bar'
     * @param {string} xAxisLabel user defined label for the x axis 
     * @param {string} yAxisLabel user defined label for the y axis 
     * @param {boolean} xAxisGrid true if include grid
     * @param {boolean} yAxisGrid true if include grid
     * @param {boolean} xAxisTick true if include tick marks
     * @param {boolean} yAxisTick true if include tick marks
     * @param {string} coordinateSystem polar or cartesian2d
     * @returns object wil all settings
     */ #generatePolarOptions(data, type, coordinateSystem) {
        const options = {
            title: {
                text: "Polar"
            },
            legend: {
                data: [
                    type
                ]
            },
            polar: {},
            tooltip: {
                trigger: "axis",
                axisPointer: {
                    type: "cross"
                }
            },
            angleAxis: {
                type: "value",
                startAngle: 0,
                axisLine: {
                    show: false
                },
                axisTick: {
                    show: false
                },
                axisLabel: {
                    show: false
                },
                splitLine: {
                    show: false
                }
            },
            radiusAxis: {
                axisLine: {
                    show: false
                },
                axisTick: {
                    show: false
                },
                axisLabel: {
                    show: false
                },
                splitLine: {
                    show: false
                }
            },
            series: [
                {
                    coordinateSystem: coordinateSystem,
                    name: "Name",
                    type: type,
                    data: this.#mergeXYDataForPolarPlot(data)
                }
            ]
        };
        // DRAW ORBITS OF THE PLANETS TAHT ARE INSIDE THIS OBJECTS ORBIT
        // Find the maximum radius value
        const maxR = Math.max(...data.data.x);
        // Draw planetary orbits that have orbit radii smaller than the max
        this.#planetaryRadii.forEach((value, key)=>{
            if (Number(value) < Number(maxR)) options.series.push(this.#getPlanet(key));
        });
        return options;
    }
    /** --- PRIVATE ---
     * Polar charts are created using data that is in the form of [x, y]
     * @param {{e: any[], x: any[]}, y: any[]} data Arrays of the data for the x axis, y axis, and error trace
     * @returns the new array of merged data */ #mergeXYDataForPolarPlot(data) {
        const mergedData = [];
        if (data.data.x.length === data.data.y[0].length) for(let i = 0; i < data.data.x.length; i++)mergedData.push([
            data.data.x[i],
            data.data.y[0][i]
        ]);
        else alert("Invalid Data For Polar Plot");
        return mergedData;
    }
    /** --- PRIVATE ---
     * Create the option set for an echart cartesian 2d
     * There are many more possible options that can and should be included in the final product
     * @param {{e: any[], x: any[]}, y: any[][]} data Arrays of the data for the x axis, y axis, and error trace
     * @param {string} type chart type, ie 'bar'
     * @param {string} coordinateSystem polar or cartesian2d
     * @returns object wil all settings
     */ #generate2dCartesianOptions(data, type, coordinateSystem) {
        console.log(data);
        console.log(data.dataset.source);
        var echartData = {
            dataset: {
                source: data.dataset.source
            },
            title: {
                text: data.chartTitle,
                left: "center",
                top: "5%"
            },
            grid: {
                height: "68%",
                top: "11%",
                bottom: "18%",
                left: "12%"
            },
            toolbox: {
                show: true,
                feature: {
                    saveAsImage: {}
                },
                top: "3%",
                right: "5%",
                z: 2
            },
            tooltip: {},
            /*tooltip: {
                trigger: 'axis',
                axisPointer: {
                    type: 'cross'
                },
                */ /*formatter: function (param) {
                    const result = [];
                    const seriesName = param[0].seriesName; // Get the series name
                    const seriesColor = param[0].color;
                    var dataIndex = param[0].dataIndex; // Get the index of the data point
                    const data = param[0].data; // Get the entire data array for the point

                    const xAxis = data[0] + '<hr size=1 style="margin: 3px 0">';
                    const color = `<span style="display:inline-block; width:10px; height:10px; border-radius:50%; background-color:${seriesColor}; margin-right:5px;"></span>`;
                    const seriesVal = `${seriesName}: ` + data[1] + '<br/>';
                    //const errorVal = data[2] ? `error: ` + data[2] + '<br/>' : undefined;

                    //result.push(dataIndex);
                    result.push(xAxis);
                    result.push(color);
                    result.push(seriesVal);
                    */ /*if (errorVal) {
                        result.push(errorVal);
                    }*/ /*

                    return result.join('');
                },*/ /*
                //color: 'black'
                backgroundColor: 'rgba(255, 255, 255, 0.9)',
            },*/ dataZoom: [],
            series: []
        };
        //-- Set Dataset
        //echartData['dataset'].push(data.dataset);
        // TEST DATA
        //-- Set X Axis Options
        echartData["xAxis"] = [];
        data["xAxis"].forEach((xAxis, i)=>{
            echartData["xAxis"].push({
                type: xAxis.dataType,
                name: xAxis.labelName,
                nameLocation: "middle",
                nameTextStyle: {
                    fontWeight: "bold",
                    fontSize: 14,
                    lineHeight: 35
                },
                position: xAxis.position,
                offset: xAxis.offset,
                //axisLabel: {
                /*formatter: function (value) {
                        // Parse the datetime string to a Date object
                        const date = new Date(value);

                        // Extract the year and month components
                        const year = date.getFullYear();
                        let month = date.getMonth();
                        //let month = (date.getMonth() + 1).toString().padStart(2, '0'); // Month is zero-based
                        const monthString = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'];

                        // Format the label to display year and month
                        if (!Number.isNaN(year) && monthString[month]) {
                            return year + '-' + monthString[month];
                        }
                    },*/ //},
                axisPointer: {
                    label: {
                        show: true,
                        color: "black"
                    }
                },
                //data: t.data,
                //scale: 'true',
                inverse: xAxis.inverse,
                minorTick: {
                    show: xAxis.ticks
                },
                splitLine: {
                    show: xAxis.majorGridLines,
                    lineStyle: {
                        type: "solid"
                    }
                },
                minorSplitLine: {
                    show: xAxis.minorGridLines,
                    lineStyle: {
                        type: "dashed",
                        opacity: 0.3
                    }
                }
            });
            // Add data range slider for each x axis
            echartData["dataZoom"].push({
                type: "slider",
                xAxisIndex: i,
                bottom: "5%",
                height: "20px"
            });
        });
        if (data["xAxis"].length > 1) echartData["grid"].top = "15%";
        //-- Set Y Axis Options
        echartData["yAxis"] = [];
        data["yAxis"].forEach((yAxis, i)=>{
            echartData["yAxis"].push({
                type: yAxis.dataType,
                name: yAxis.labelName,
                nameLocation: "middle",
                nameTextStyle: {
                    fontWeight: "bold",
                    fontSize: 14,
                    verticalAlign: "bottom",
                    lineHeight: 50
                },
                position: yAxis.position,
                offset: yAxis.offset,
                axisPointer: {
                    label: {
                        show: true,
                        color: "black"
                    }
                },
                scale: "true",
                inverse: yAxis.inverse,
                minorTick: {
                    show: yAxis.ticks
                },
                splitLine: {
                    show: yAxis.majorGridLines,
                    lineStyle: {
                        type: "solid"
                    }
                },
                minorSplitLine: {
                    show: yAxis.minorGridLines,
                    lineStyle: {
                        type: "dashed",
                        opacity: 0.3
                    }
                }
            });
            // Add data range slider for each y axis
            echartData["dataZoom"].push({
                type: "slider",
                yAxisIndex: i,
                left: "3%",
                //top: '100px',
                //bottom: '8%',
                width: "20px"
            });
        });
        //-- Set Series Options
        echartData["series"] = [];
        data["series"].forEach((o)=>{
            console.log(o.xAxisIndex);
            echartData["series"].push({
                encode: {
                    x: o.xAxisName,
                    y: o.seriesName
                },
                type: type,
                name: o.labelName,
                data: o.data,
                xAxisIndex: o.xAxisIndex,
                //yAxisIndex: o.yAxisIndex,
                symbol: o.symbol,
                symbolSize: o.symbolSize
            });
        });
        /*
        var chartAxis = Object.keys(data);
        chartAxis.forEach(axis => {
            var trace = data[axis];
            echartData[axis] = [];
            switch (axis) {
                case "xAxis":
                    trace.forEach(t => {
                        echartData[axis].push({
                            type: t.dataType,
                            name: t.labelName,
                            nameLocation: "middle",
                            nameTextStyle: {
                                fontWeight: "bold",
                                fontSize: 14,
                                lineHeight: 35,
                            },
                            position: t.position,
                            offset: t.offset,
                            axisLabel: {
                                */ /*formatter: function (value) {
                                    // Parse the datetime string to a Date object
                                    const date = new Date(value);

                                    // Extract the year and month components
                                    const year = date.getFullYear();
                                    let month = date.getMonth();
                                    //let month = (date.getMonth() + 1).toString().padStart(2, '0'); // Month is zero-based
                                    const monthString = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'];

                                    // Format the label to display year and month
                                    if (!Number.isNaN(year) && monthString[month]) {
                                        return year + '-' + monthString[month];
                                    }
                                },*/ /*
                            },
                            axisPointer: {
                                label: {
                                    show: true,
                                    color: 'black',
                                },
                            },
                            //data: t.data,
                            //scale: 'true',
                            inverse: t.inverse,
                            minorTick: {
                                show: t.ticks
                            },
                            splitLine: {
                                show: t.majorGridLines,
                                lineStyle: { type: 'solid' },
                            },
                            minorSplitLine: {
                                show: t.minorGridLines,
                                lineStyle: { type: 'dashed', opacity: 0.3, }
                            },
                        });
                    });
                    if (trace.length > 1) {
                        echartData['grid'].top = '15%';
                    }
                    break;
                case "yAxis":
                    trace.forEach(t => {
                        echartData[axis].push({
                            type: t.dataType,
                            name: t.labelName,
                            nameLocation: "middle",
                            nameTextStyle: {
                                fontWeight: "bold",
                                fontSize: 14,
                                verticalAlign: "bottom",
                                lineHeight: 50
                            },
                            position: t.position,
                            offset: t.offset,
                            axisPointer: {
                                label: {
                                    show: true,
                                    color: 'black',
                                },
                            },
                            scale: 'true',
                            inverse: t.inverse,
                            minorTick: {
                                show: t.ticks
                            },
                            splitLine: {
                                show: t.majorGridLines,
                                lineStyle: { type: 'solid' },
                            },
                            minorSplitLine: {
                                show: t.minorGridLines,
                                lineStyle: { type: 'dashed', opacity: 0.3, }
                            },
                        });
                    });
                    break;
                case "series":
                    trace.forEach(t => {
                        console.log(t);
                        echartData['dataZoom'].push({
                            type: 'slider',
                            xAxisIndex: [t.xAxisIndex],
                            bottom: '5%',
                            height: '20px',
                        });
                        echartData['dataZoom'].push({
                            type: 'slider',
                            yAxisIndex: [t.yAxisIndex],
                            left: '3%',
                            //top: '100px',
                            //bottom: '8%',
                            width: '20px',
                            //height: '68%',
                        });
                        echartData[axis].push({
                            type: type,
                            name: t.labelName,
                            data: t.data,
                            xAxisIndex: t.xAxisIndex,
                            yAxisIndex: t.yAxisIndex,
                            symbol: t.symbol,
                            symbolSize: t.symbolSize,
                            // add seriesColor
                        });

                        // draw error bar if any
                        */ /*if (t.error) {
                            const errorData =
                            {
                                type: 'custom',
                                name: 'error',
                                itemStyle: {
                                    borderWidth: 1.5
                                },
                                */ /*renderItem: function (params, api) {
                                    const xValue = api.value(0);

                                    const lowPos = api.value(1) - api.value(2);
                                    const highPos = api.value(1) + api.value(2);
                                    const lowPoint = api.coord([xValue, lowPos]);
                                    const highPoint = api.coord([xValue, highPos]);

                                    const halfWidth = api.size([1, 0])[0] * 0.05;

                                    api.style({
                                        stroke: api.visual('color'),
                                        fill: undefined
                                    });
                                    return {
                                        type: 'group',
                                        children: [
                                            {
                                                type: 'line',
                                                transition: ['shape'],
                                                shape: {
                                                    x1: highPoint[0] - halfWidth,
                                                    y1: highPoint[1],
                                                    x2: highPoint[0] + halfWidth,
                                                    y2: highPoint[1]
                                                },
                                                style: {
                                                    stroke: '#5470c6',
                                                    lineWidth: 1,
                                                }
                                            },
                                            {
                                                type: 'line',
                                                transition: ['shape'],
                                                shape: {
                                                    x1: highPoint[0],
                                                    y1: highPoint[1],
                                                    x2: lowPoint[0],
                                                    y2: lowPoint[1]
                                                },
                                                style: {
                                                    stroke: '#5470c6',
                                                    lineWidth: 1,
                                                }
                                            },
                                            {
                                                type: 'line',
                                                transition: ['shape'],
                                                shape: {
                                                    x1: lowPoint[0] - halfWidth,
                                                    y1: lowPoint[1],
                                                    x2: lowPoint[0] + halfWidth,
                                                    y2: lowPoint[1]
                                                },
                                                style: {
                                                    stroke: '#5470c6',
                                                    lineWidth: 1,
                                                }
                                            }
                                        ]
                                    };
                                },*/ /*
                                encode: {
                                    x: 0,
                                    y: 1
                                },
                                //data: t.data,
                                z: 100
                            };

                            echartData['series'].push(errorData);
                        }*/ /*
                    });
                    break;
                default:
                    return false;
            }
        });*/ console.log(echartData);
        return echartData;
    }
    /** --- PRIVATE ---
     * Creats an array of series to chart. These are the y axis values
     * @param {{e: any[], x: any[]}, y: any[][]} data Arrays of the data for the x axis, y axis, and error trace
     * @param {string} type chart type, ie 'bar'
     * @param {string} coordinateSystem polar or cartesian2d
     * @returns array of chart series
     */ #createSeries(data, type, coordinateSystem) {
        const seriesArray = [];
        // The Y axis data is an array of arrays of data
        data.yAxis.forEach((dataList)=>{
            seriesArray.push({
                data: dataList,
                type: type,
                coordinateSystem: coordinateSystem
            });
        });
        // Create the error series. This has error bars that are created manually
        // This code came from the Echarts site with slight modifications
        /*data.error.forEach((dataList, index) => {
            const errorData = [];
            for (let i = 0; i < dataList.length; i++) {
                errorData.push([i,
                    Number(data.data.y[index][i]) - Number(dataList[i]),
                    Number(data.data.y[index][i]) + Number(dataList[i])
                ]);
            }
            if (errorData.length > 0) {
                seriesArray.push({
                    type: 'custom',
                    name: 'error',
                    itemStyle: {
                        borderWidth: 1.5
                    },
                    renderItem: function (params, api) {
                        var xValue = api.value(0);
                        var highPoint = api.coord([xValue, api.value(1)]);
                        var lowPoint = api.coord([xValue, api.value(2)]);
                        var halfWidth = api.size([1, 0])[0] * 0.3;
                        var style = api.style({
                            stroke: api.visual('color'),
                            fill: undefined
                        });
                        return {
                            type: 'group',
                            children: [
                                {
                                    type: 'line',
                                    transition: ['shape'],
                                    shape: {
                                        x1: highPoint[0] - halfWidth,
                                        y1: highPoint[1],
                                        x2: highPoint[0] + halfWidth,
                                        y2: highPoint[1]
                                    },
                                    style: style
                                },
                                {
                                    type: 'line',
                                    transition: ['shape'],
                                    shape: {
                                        x1: highPoint[0],
                                        y1: highPoint[1],
                                        x2: lowPoint[0],
                                        y2: lowPoint[1]
                                    },
                                    style: style
                                },
                                {
                                    type: 'line',
                                    transition: ['shape'],
                                    shape: {
                                        x1: lowPoint[0] - halfWidth,
                                        y1: lowPoint[1],
                                        x2: lowPoint[0] + halfWidth,
                                        y2: lowPoint[1]
                                    },
                                    style: style
                                }
                            ]
                        };
                    },
                    encode: {
                        x: 0,
                        y: [1, 2]
                    },
                    data: errorData,
                    z: 100
                })
            }
        });*/ return seriesArray;
    }
    /** --- PRIVATE ---
     * Gets the details for the planet that will be charted in the polar graph
     * @param {string} planet the name of the planet is a key to the radius 
     * @returns polar chart series 
     * */ #getPlanet(planet) {
        const r = this.#planetaryRadii.get(planet);
        const data = [];
        for(let i = 0; i < 360; i += 0.1)data.push([
            r,
            i
        ]);
        return {
            data: data,
            type: "line",
            symbol: "none",
            coordinateSystem: "polar"
        };
    }
    /**
     * Resizes an Echart
     * @param {Echart Object} chartObject 
     * @param {number} width 
     * @param {height} height 
     */ resizeEchart = (chartObject, width, height)=>{
        chartObject.resize({
            width: width,
            height: height
        });
    };
    /** --- PRIVATE ---
    * Creates a plotly chart. Currently this is only used to create tables.
    * @param {{e: any[], x: any[]}, y: any[][]} data Arrays of the data for the x axis, y axis, and error trace
    * @param {string} type chart type, ie 'bar'
    * @param {HTML div} pdiv the plot div is the location to inject the chart in the dom 
    * @param {Number} width width of the chart
    * @param {Number} height height of the chart
    * @returns Plotly chart object
    */ #drawPlotlyChart = (data, type, pdiv, width, height)=>{
        data = this.#getPlotlyType(data, type);
        let result = undefined;
        switch(type){
            case "line":
                result = Plotly.newPlot(pdiv, [
                    data
                ], {
                    margin: {
                        t: 40
                    },
                    width: width,
                    height: height,
                    xaxis: {
                        title: {
                            text: "x Axis",
                            font: {
                                family: "Arial, monospace",
                                size: 18,
                                color: "#7f7f7f"
                            }
                        }
                    },
                    yaxis: {
                        title: {
                            text: "y Axis",
                            font: {
                                family: "Arial, monospace",
                                size: 18,
                                color: "#7f7f7f"
                            }
                        }
                    }
                });
                break;
            case "table":
                // Calculate the total width of the table
                var columnWidths = [];
                for(var i = 0; i < data[0].cells.values.length; i++){
                    var maxWidth = 0;
                    for(var j = 0; j < data[0].cells.values[i].length; j++){
                        var cellWidth = data[0].cells.values[i][j].length * 10; // set width based on number of characters
                        if (cellWidth > maxWidth) {
                            console.log(data[0].cells.values[i][j].length);
                            maxWidth = cellWidth;
                        }
                    }
                    columnWidths.push(maxWidth);
                }
                var totalWidth = columnWidths.reduce(function(a, b) {
                    return a + b;
                }, 0);
                var layout = {
                    title: "Query Result",
                    margin: {
                        t: 30,
                        l: 30,
                        r: 30,
                        b: 30
                    },
                    autosize: true,
                    height: 500
                };
                var config = {
                    modeBarButtonsToAdd: [
                        {
                            name: "zoom-in",
                            icon: Plotly.Icons.zoom_plus,
                            click: function(gd) {
                                var update = {
                                    "width": layout.width * 1.1,
                                    "height": layout.height * 1.1
                                };
                                Plotly.update(gd, {}, update);
                            }
                        },
                        {
                            name: "zoom-out",
                            icon: Plotly.Icons.zoom_minus,
                            click: function(gd) {
                                var update = {
                                    "width": layout.width * 0.9,
                                    "height": layout.height * 0.9
                                };
                                Plotly.update(gd, {}, update);
                            }
                        },
                        {
                            name: "Auto Scale",
                            icon: Plotly.Icons.zoombox,
                            click: function(gd) {
                                Plotly.relayout(gd, {
                                    "xaxis.autorange": true,
                                    "yaxis.autorange": true
                                });
                            }
                        }
                    ],
                    displaylogo: false,
                    autosize: true,
                    columnwidth: "auto"
                };
                result = Plotly.newPlot(pdiv, data, layout, config);
                console.log(result);
                break;
        }
        return result;
    };
    /** --- PRIVATE ---
     * This returns a converted version of the type to the correct string.
     * This is currently useless because the types are correctly store in the object but may be usesul in the 
     * future when new charts arise.
     * @param {string} type 
     * @returns the chart type 
     */ #getEchartType = (type)=>{
        return type;
    // switch (type) {
    //     case 'line':
    //         return 'line';
    //     case 'bar':
    //         return 'bar';
    //     case 'scatter':
    //         return 'scatter';
    // }
    };
    /** --- PRIVATE ---
     * Plotly charts have more complex names than echarts and this function attaches correct options for the chart type
     * @param {Data Object} data 
     * @param {string} type 
     * @returns plotly chart data
     */ #getPlotlyType = (data, type)=>{
        switch(type){
            case "bar":
                data.type = "bar";
                break;
            case "scatter":
                data.type = "scatter";
                data.mode = "markers";
                break;
            case "line":
                data.type = "scatter";
                data.mode = "lines";
                break;
            case "table":
                data[0].type = "table";
                data[0].header = this.#getPlotlyTableHeaderObject(data[0]);
                data[0].cells = this.#getPlotlyTableCellsObject(data[0]);
                data[0].columnwidth = new Array(data[0].cells.values.length + 1).fill(150);
                break;
        }
        return data;
    };
    /** --- PRIVATE ---
     * Creates the settings for the table header. Add the names for the columns
     * @param {Data Object} data 
     * @returns the settings for the table header */ #getPlotlyTableHeaderObject = (data)=>{
        //console.log(data);
        const header = {
            values: data.headers,
            align: "center",
            line: {
                width: 0.5,
                color: "white"
            },
            fill: {
                color: "#383838"
            },
            font: {
                family: "Arial",
                size: 18,
                color: "white"
            },
            height: 50
        };
        return header;
    };
    /** --- PRIVATE ---
     * creates the settings for the cells
     * @param {Data Object} data 
     * @returns settings for the cells */ #getPlotlyTableCellsObject = (data)=>{
        const cellObject = {
            values: data.cellvalues,
            align: "left",
            line: {
                color: "#737373",
                width: 0.5
            },
            font: {
                family: "Arial",
                size: 16,
                color: [
                    "#171717"
                ]
            },
            height: 35
        };
        return cellObject;
    };
    /** --- PRIVATE ---
    * Creates a tabulator table.
    * @param {{e: any[], x: any[]}, y: any[][]} data Arrays of the data for the data columns
    * @param {string} type chart type, ie 'bar'
    * @param {HTML div} pdiv the plot div is the location to inject the chart in the dom 
    * @param {Number} width width of the chart
    * @param {Number} height height of the chart
    * @returns Tabulator Object
    */ #drawTabulatorTable = (data, type, tablediv, width, height)=>{
        var result = undefined;
        //console.log(data.tabledata);
        switch(type){
            case "table":
                var tabulatorId = tablediv.getAttribute("id");
                result = new Tabulator(`#${tabulatorId}`, {
                    columns: data.columns,
                    data: data.tabledata,
                    pagination: "local",
                    paginationSize: 100,
                    paginationSizeSelector: [
                        10,
                        50,
                        100,
                        250
                    ],
                    movableColumns: true,
                    width: width,
                    height: height,
                    ajaxLoader: true
                });
                this.#dataTable.set(tabulatorId, result);
                break;
        }
        return result;
    };
    /** --- PUBLIC ---
     * There are a lot of options passed to the function from the HUB.
     * @param {{e: any[], x: any[]}, y: any[]} data Arrays of the data for the x axis, y axis, and error trace
     * @param {string} type chart type, ie 'bar'
     * @param {HTML div} pdiv the plot div is the location to inject the chart in the dom 
     * @param {Number} width width of the chart
     * @param {Number} height height of the chart
     * @param {string} framework echart makes all charts except table. plotly makes the table 
     * @param {string} theme echart color theme 
     * @param {string} xAxisLabel user defined label for the x axis 
     * @param {string} yAxisLabel user defined label for the y axis 
     * @param {boolean} xAxisGrid true if include grid
     * @param {boolean} yAxisGrid true if include grid
     * @param {boolean} xAxisTick true if include tick marks
     * @param {boolean} yAxisTick true if include tick marks
     * @param {string} coordinateSystem polar or cartesian2d
     * @returns chart object  */ //updateData = (data, type, pdiv, width, height, framework, theme, xAxisLabel, yAxisLabel, xAxisGrid, yAxisGrid, xAxisTick, yAxisTick, coordinateSystem) => {
    updatePlotData = (data, type, pdiv, width, height, framework, coordinateSystem)=>{
        switch(framework){
            case "tabulator":
                return this.#updateTabulatorTable(data, type, pdiv, width, height);
            /*case 'plotly':
                return this.#updatePlotlyChart(data, type, pdiv, width, height);*/ case "echart":
                return this.#updateEChartChart(data, type, pdiv, width, height, coordinateSystem);
        }
    };
    #updateTabulatorTable(data, type, pdiv, width, height) {
        let result = undefined;
        // get the target table to update
        var tableId = pdiv.getAttribute("id");
        var tabulator = this.#dataTable.get(tableId);
        if (tabulator) {
            tabulator.setData(data.tabledata);
            tabulator.setColumns(data.columns);
        } else console.log("tabulator table not found", "chartBuilder -> updateTabulatorTable");
        return result;
    }
    #updateEChartChart(data, type, pdiv, width, height, coordinateSystem) {
        // get the active chart
        const myChart = echarts.getInstanceByDom(pdiv);
        myChart.clear();
        const option = this.#optionGenerationMap.get(coordinateSystem)(data, type, coordinateSystem);
        option && myChart.setOption(option);
        this.resizeEchart(myChart, width, height);
        return myChart;
    }
}

},{"../../htmlGeneration/htmlFactory.js":"9lYdL","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7Q5cD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Popup", ()=>Popup);
var _htmlFactoryJs = require("../../htmlGeneration/htmlFactory.js");
var _indexJs = require("../../communication/index.js");
var _constantsJs = require("../../sharedVariables/constants.js");
class Popup {
    static idle = 0;
    static dragging = 1;
    static resizing = 2;
    constructor(width, height, initialTop, initialLeft, key, color, content, headerText){
        this.HF = new (0, _htmlFactoryJs.HTMLFactory)();
        this.publisher = new (0, _indexJs.Publisher)();
        this.content = content;
        // HTML elements
        this.element;
        this.header;
        this.headerTitle;
        this.body;
        this.resizeDiv;
        // ID
        this.key = key;
        // Initial CSS Values
        this.top = initialTop;
        this.left = initialLeft;
        this.width = width;
        this.height = height;
        this.headerColor = color;
        // State Variables
        this.state;
        this.setState(Popup.idle);
        this.#createHTMLElement(headerText);
        this.setInitialValues();
        this.setEventListeners();
        // Drag Position Array
        this.mousePositions = [];
    }
    /** --- PRIVATE --- 
     * Creates the HTML element for the popup
     * @param {string} headerText text to display in popup header.
     */ #createHTMLElement = (headerText)=>{
        this.element = this.HF.createNewDiv(`popup-${this.key}`, `popup-${this.key}`, [
            "popup"
        ], [
            {
                style: "visibility",
                value: "hidden"
            }
        ], [], "");
        this.#createHeader(headerText);
        this.body = this.HF.createNewDiv(`popup-body-${this.key}`, `popup-body-${this.key}`, [
            "popupBody"
        ], [], [], "");
        this.element.appendChild(this.header);
        this.element.appendChild(this.body);
        this.#setBodyContent(this.content);
        document.body.appendChild(this.element);
        this.#createResizeDiv();
    };
    /** --- PRIVATE ---
     * Creates the header element of the popup
     * @param {string} headerText ext to display in popup header.
     */ #createHeader = (headerText)=>{
        this.header = this.HF.createNewDiv(`popup-header-${this.key}`, `popup-header-${this.key}`, [
            "popupHeader"
        ], [
            {
                style: "backgroundColor",
                value: this.headerColor
            }
        ], [], "");
        this.headerTitle = this.HF.createNewParagraph("", "", [
            "popupHeaderTitle"
        ], [], headerText);
        this.header.appendChild(this.headerTitle);
        const closeIcon = this.HF.createNewDiv("", "", [
            "closePopupIcon"
        ], [], [], "");
        const img = this.HF.createNewIMG("", "", "images/icons/cancel.png", [], [], "Close Popup Button");
        closeIcon.appendChild(img);
        closeIcon.addEventListener("click", this.close);
        this.header.appendChild(closeIcon);
    };
    /** --- PRIVATE ---
     * Creates the HTML element that goes in the corner of the popup. User places cursor in this area to begin resize.
     */ #createResizeDiv = ()=>{
        this.resizeDiv = this.HF.createNewDiv(`popup-resize-${this.id}`, `popup-resize-${this.id}`, [
            "popupResize"
        ], [], [], "");
        this.element.appendChild(this.resizeDiv);
    };
    /** --- PRIVATE ---
     * The content is passed to the popup through the manager. This content is appended to the body.
     * @param {HTML element} content the HTML element to add to the popup
     */ #setBodyContent = (content)=>{
        console.log(content);
        this.#clearBodyContent();
        this.body.appendChild(content);
    };
    /** --- PRIVATE ---
     * Clear the innerHTML in case this is new content on an existing popup
     */ #clearBodyContent = ()=>{
        this.body.innerHTML = "";
    };
    setInitialValues = ()=>{
        this.setWidth();
        this.setHeight();
        this.setTop();
        this.setLeft();
    };
    setWidth = ()=>{
        this.element.style.width = `${this.width}px`;
    };
    setHeight = ()=>{
        this.element.style.height = `${this.height}px`;
    };
    setTop = ()=>{
        this.element.style.top = `${this.top}px`;
    };
    setLeft = ()=>{
        this.element.style.left = `${this.left}px`;
    };
    setEventListeners = ()=>{
        // Drag And Drop Listeners
        this.header.addEventListener("mousedown", ()=>{
            this.startDrag();
            this.moveToFront();
        });
        document.addEventListener("mouseup", this.endDrag);
        document.addEventListener("mousemove", (e)=>{
            this.drag(e);
            e.preventDefault();
        });
        // Expand and Shrink Listeners
        this.resizeDiv.addEventListener("mousedown", this.startResize);
        document.addEventListener("mouseup", this.endResize);
        document.addEventListener("mousemove", (e)=>{
            this.resize(e);
            e.preventDefault();
        });
        // Move To Front Event Listeners
        this.body.addEventListener("mousedown", this.moveToFront);
        this.element.addEventListener("mousedown", this.moveToFront);
    };
    /** --- PUBLIC ---
     * Possible states are dragging, idle, or resizing. These are Numbers.
     * @param {Number} state of the popup. (These states are defined as member variables.)
     */ setState = (state)=>{
        this.state = state;
    };
    getState = ()=>{
        return this.state;
    };
    //  DRAG AND DROP FUNCTIONS
    startDrag = ()=>{
        this.setState(Popup.dragging);
        this.mousePositions = [];
    };
    endDrag = ()=>{
        if (this.getState() === Popup.dragging) {
            this.setState(Popup.idle);
            this.mousePositions = [];
        }
    };
    /** --- PUBLIC ---
     * Drag Event --- Moves the popup around the DOM
     * @param {event} e DOM event
     */ drag = (e)=>{
        if (this.getState() === Popup.dragging) {
            const pos = {
                x: e.screenX,
                y: e.screenY
            };
            this.mousePositions.push(pos);
            if (this.mousePositions.length > 1) {
                const distance = this.#calculateDistanceTraveled(this.mousePositions[0], this.mousePositions[this.mousePositions.length - 1]);
                this.#resetMousePositionsArray(this.mousePositions[this.mousePositions.length - 1]);
                this.#updateTop(distance.y);
                this.#updateLeft(distance.x);
                this.setLeft();
                this.setTop();
            }
        }
    };
    /**
     * Calculates the distance the mouse has traveled in pixels
     * @param {object} firstPosition index [0] in the mousePositions array - contains x and y
     * @param {object} lastPosition  index [array.length-1] in the mousePositions array - contains x and y
     * @returns {x: xdistance (number), y: ydistance (number)}
     */ #calculateDistanceTraveled = (firstPosition, lastPosition)=>{
        return {
            x: lastPosition.x - firstPosition.x,
            y: lastPosition.y - firstPosition.y
        };
    };
    /**
     * When a drag is completed, this function is called to reset the positions array. The last measured position is places in the first index.
     * @param {number} lastPosition the last captured mouse position
     */ #resetMousePositionsArray = (lastPosition)=>this.mousePositions = [
            lastPosition
        ];
    #updateTop = (yDistanceTraveled)=>this.top += parseInt(yDistanceTraveled);
    #updateLeft = (xDistanceTraveled)=>this.left += parseInt(xDistanceTraveled);
    // RESIZE FUNCTIONS
    startResize = ()=>{
        this.setState(Popup.resizing);
        this.mousePositions = [];
        const message = new (0, _indexJs.Message)((0, _constantsJs.OUTPUT_MANAGER), (0, _constantsJs.POPUP), "Start Resize Popup Event", {
            moduleKey: this.key
        });
        this.sendMessage(message);
    };
    endResize = ()=>{
        if (this.getState() === Popup.resizing) {
            this.setState(this.idle);
            this.mousePositions = [];
        }
    };
    /** --- PUBLIC ---
     * Resizes the popup.
     * @param {HTML Event} e 
     */ resize = (e)=>{
        if (this.getState() === Popup.resizing) {
            const pos = {
                x: e.screenX,
                y: e.screenY
            };
            this.mousePositions.push(pos);
            if (this.mousePositions.length > 1) {
                const distance = this.#calculateDistanceTraveled(this.mousePositions[0], this.mousePositions[this.mousePositions.length - 1]);
                this.#resetMousePositionsArray(this.mousePositions[this.mousePositions.length - 1]);
                this.#updateHeight(distance.y);
                this.#updateWidth(distance.x);
                this.setWidth();
                this.setHeight();
            }
            const message = new (0, _indexJs.Message)((0, _constantsJs.OUTPUT_MANAGER), (0, _constantsJs.POPUP), "Resize Popup Event", {
                moduleKey: this.key
            });
            this.sendMessage(message);
        }
    };
    #updateWidth = (yDistanceTraveled)=>this.width += parseInt(yDistanceTraveled);
    #updateHeight = (xDistanceTraveled)=>this.height += parseInt(xDistanceTraveled);
    /** --- Public ---
     * The popup is moved to the front of the screen when it is clicked. It requests a z index value which is strictly increasing from the manager which is passed to the callback.
     */ moveToFront = ()=>this.sendMessage(new (0, _indexJs.Message)((0, _constantsJs.POPUP_MANAGER), (0, _constantsJs.POPUP), "Request Z Index", {
            callback: this.moveToFrontHelper.bind(this)
        }));
    moveToFrontHelper = (index)=>this.element.style.zIndex = index;
    close = ()=>{
        //document.body.removeChild(this.element);
        this.sendMessage(new (0, _indexJs.Message)((0, _constantsJs.POPUP_MANAGER), (0, _constantsJs.POPUP), "Popup Closed Event", {
            moduleKey: this.key
        }));
    };
    sendMessage = (message)=>this.publisher.publishMessage(message);
}

},{"../../htmlGeneration/htmlFactory.js":"9lYdL","../../communication/index.js":"eT70M","../../sharedVariables/constants.js":"dxmqI","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5DxJP":[function(require,module,exports) {
/*************************************************************
 * COPYRIGHT University of Hawaii - COMA Project / Lava Lab  *
 * Author: James Hutchison                                   *
 * Date: 5/5/2022                                            *
 *************************************************************/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/*******************************************************************************
 * dataTable fields specific to source
 * --------------------------------------------------------------------------------------------
 * remoteData (boolean)                     | true if data associated with the module is remotely obtained
 * sourceData (Object)                      | data to be passed to the next module
 * ----------------------------------------------------------------------------------------------
*/ /** This represents a source module and extends the module class. */ parcelHelpers.export(exports, "Source", ()=>Source);
/** This Class pulls data off the server that I used for testing. 
 */ parcelHelpers.export(exports, "Cholera", ()=>Cholera);
var _indexJs = require("../index.js");
var _constantsJs = require("../../sharedVariables/constants.js");
class Source extends (0, _indexJs.Module) {
    constructor(category, color, shape, location, command, name, image, inports, outports, key, description){
        super(category, color, shape, command, name, image, inports, outports, key, description);
    }
}
class Cholera extends Source {
    constructor(category, color, shape, key){
        super(category, color, shape, "remote", "getCholeraData", "Cholera", "images/icons/skull-white.png", [], [
            {
                name: "OUT",
                leftSide: false,
                type: (0, _constantsJs.LT_SOURCE)
            }
        ], key);
        this.addData("description", "This module returns all data on the London Cholera Outbreak.");
        this.addData("onCreationFunction", this.onCreation.bind(this));
        this.addData("requestMetadataOnCreation", true);
        this.addData("linkedToData", false);
        this.addData("remoteData", false);
        this.createInspectorCardData();
    }
    createInspectorCardData() {
        this.inspectorCardMaker.addInspectorCardDescription(this.getData("description"));
    }
    /*
    setPopupContent = (width, height) => {
        this.popupContentMaker.addDescriptionText(this.getData('description'));
        this.addData('popupContent', this.popupContentMaker.getPopupContentWrapper());
    }*/ onCreation = (metadata)=>{
        this.addData("metadata", metadata);
        this.inspectorCardMaker.addMetadataCard(metadata);
        this.popupContentMaker.addMetadataCard(metadata);
        this.addData("linkedToData", true);
    };
}

},{"../index.js":"ddnCK","../../sharedVariables/constants.js":"dxmqI","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9CYU7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/** This represents a source module and extends the module class. */ /*export class Source extends Module {
    constructor(category, color, shape, location, command, name, image, inports, outports, key, description) {
        super(category, color, shape, command, name, image, inports, outports, key, description);
    }
}*/ // add comment for module data content.. queryType, queryEntries, resultData
/** This Class pulls data off the server that I used for testing. 
 */ parcelHelpers.export(exports, "Search", ()=>Search);
var _indexJs = require("../index.js");
var _constantsJs = require("../../sharedVariables/constants.js");
class Search extends (0, _indexJs.Source) {
    constructor(category, color, shape, key){
        super(category, color, shape, "local", "getQueryResult", "Search", "images/icons/db-image.png", [], [
            {
                name: "OUT",
                leftSide: false,
                type: (0, _constantsJs.LT_SOURCE)
            }
        ], key);
        //this.addData('onCreationFunction', this.onCreation.bind(this));
        this.addData("callOnCreationFunction", true);
        this.addData("remoteData", true);
        this.addData("popupWidth", 300);
        this.addData("popupHeight", 300);
    }
    setInspectorCardContent = ()=>{
        this.inspectorCardMaker.addSearchFormFields(this.getData("key"));
    };
    /*
    setPopupContent = () => {
        //this.popupContentMaker.addDescriptionText(this.getData('description'));
        this.addData('popupContent', this.popupContentMaker.getPopupContentWrapper(), false, '', false);
    }*/ /** --- PUBLIC ---
     * Gets the content to populate a popup associated with this module.
     * @returns the content to populate the popup associated with this module*/ getPopupContent = ()=>{
        return {
            width: 300,
            height: 300,
            color: this.getData("color"),
            content: this.getData("popupContent"),
            headerText: this.getData("name")
        };
    };
    onCreation = ()=>{
        this.inspectorCardMaker.addSearchFormFields(this.getData("key"));
        this.inspectorCardMaker.addFormFieldFunctions(this.getData("key"));
    //this.inspectorCardMaker.addSearchFormFields(metadata)
    // --> Add Date Range Field Min Max = date picker? (too many dates can be chosen from, slider may not be very useful)
    // --> Add Object (Comet) text input
    };
}

},{"../index.js":"ddnCK","../../sharedVariables/constants.js":"dxmqI","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5ZaQJ":[function(require,module,exports) {
/*************************************************************
 * COPYRIGHT University of Hawaii - COMA Project / Lava Lab  *
 * Author: James Hutchison                                   *
 * Date: 5/5/2022                                            *
 *************************************************************/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Csv", ()=>Csv);
var _indexJs = require("../index.js");
var _indexJs1 = require("../../dataComponents/index.js");
var _constantsJs = require("../../sharedVariables/constants.js");
class Csv extends (0, _indexJs.Source) {
    constructor(category, color, shape, key){
        super(category, color, shape, "local", "storeData", "CSV File", "images/icons/csv-file-format-extension-white.png", [], [
            {
                name: "OUT",
                leftSide: false,
                type: (0, _constantsJs.LT_SOURCE)
            }
        ], key);
        this.csvReader = new (0, _indexJs1.CsvReader)();
        this.addData("inportType", [
            -1
        ]);
        this.addData("outportType", [
            (0, _constantsJs.LT_PROCESSOR),
            (0, _constantsJs.LT_OUTPUT)
        ]);
        this.addData("description", "This module loads a CSV file (.csv) and converts it into a module.");
        this.addData("linkedToData", false);
        this.addData("remoteData", false);
        this.addData("callOnCreationFunction", true);
        this.addData("popupWidth", 300);
        this.addData("popupHeight", 300);
    //this.addData('onCreationFunction', this.onCreation.bind(this));
    //this.#createInspectorCardData();
    //this.setPopupContent();
    //this.#createInspectorCardData();
    }
    /** --- PRIVATE ---
     * Adds cards to the Inspector Card */ #createInspectorCardData() {
        //this.inspectorCardMaker.addInspectorCardDescription(this.getData('description'));
        this.inspectorCardMaker.createCSVModuleInspectorCard(this.handleFiles.bind(this), this.getData("key"));
    //this.inspectorCardMaker.createFileUploadField(this.handleFiles.bind(this), this.getData('key'));
    }
    /** --- PUBLIC ---
     * This function is attached to the file upload field in the CSV popup window. This function
     * is called when a file is uploaded. It will check that the file has a .csv extension. */ handleFiles = ()=>{
        const newFileArray = document.getElementById("upload_csv-" + this.getData("key")).files;
        if (newFileArray.length > 0) {
            const words = newFileArray[0].name.split(".");
            if (words[words.length - 1].toLowerCase() === "csv") this.#toggleReadFileButton(false);
            else this.#toggleReadFileButton(true);
        }
    };
    /** --- PRIVATE ---
     * When a file is loaded from the local machine and has been validated the read file button
     * is enabled so the user can complete the file upload. */ #toggleReadFileButton = (toggle)=>{
        this.inspectorCardMaker.getField("readFileButton").disabled = toggle;
    };
    onCreation = ()=>{
        //this.addData('metadata', metadata);
        this.inspectorCardMaker.createCSVModuleInspectorCard(this.handleFiles.bind(this), this.getData("key"));
        this.inspectorCardMaker.addCSVObjectsFieldFunction(this.getData("key"));
    //this.inspectorCardMaker.addSearchFormFields(metadata)
    // --> Add Date Range Field Min Max = date picker? (too many dates can be chosen from, slider may not be very useful)
    // --> Add Object (Comet) text input
    };
}

},{"../index.js":"ddnCK","../../dataComponents/index.js":"1QZVj","../../sharedVariables/constants.js":"dxmqI","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1QZVj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "InputManager", ()=>(0, _inputManagerJs.InputManager));
parcelHelpers.export(exports, "OutputManager", ()=>(0, _outputManagerJs.OutputManager));
parcelHelpers.export(exports, "DataManager", ()=>(0, _dataManagerJs.DataManager));
parcelHelpers.export(exports, "DataTable", ()=>(0, _dataTableJs.DataTable));
parcelHelpers.export(exports, "CsvReader", ()=>(0, _csvReaderJs.CsvReader));
parcelHelpers.export(exports, "CsvWriter", ()=>(0, _csvWriterJs.CsvWriter));
parcelHelpers.export(exports, "ChartBuilder", ()=>(0, _chartBuilderJs.ChartBuilder));
parcelHelpers.export(exports, "OrbitBuilder", ()=>(0, _orbitBuilderJs.OrbitBuilder));
var _inputManagerJs = require("./inputManager.js");
var _outputManagerJs = require("./outputManager.js");
var _dataManagerJs = require("./dataManager.js");
var _dataTableJs = require("./tables/dataTable.js");
var _csvReaderJs = require("./csv/csvReader.js");
var _csvWriterJs = require("./csv/csvWriter.js");
var _chartBuilderJs = require("./charts/chartBuilder.js");
var _orbitBuilderJs = require("./charts/orbitBuilder.js");

},{"./inputManager.js":"iP7f7","./outputManager.js":"3hcyg","./dataManager.js":"dDp29","./tables/dataTable.js":"cjpTk","./csv/csvReader.js":"6oYwa","./csv/csvWriter.js":"cmgQJ","./charts/chartBuilder.js":"iLUoX","./charts/orbitBuilder.js":"1C1Mq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iP7f7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "InputManager", ()=>InputManager);
var _indexJs = require("../communication/index.js");
var _indexJs1 = require("./index.js");
var _errorHandlersJs = require("../errorHandling/errorHandlers.js");
var _indexJs2 = require("../sharedVariables/index.js");
class InputManager {
    publisher;
    #csvReader;
    #dataTable;
    constructor(){
        this.publisher = new (0, _indexJs.Publisher)();
        this.#csvReader = new (0, _indexJs1.CsvReader)();
        this.#dataTable = new Map();
    }
    // sets moduleData for CSV module
    readFile = (moduleKey, fileId, fileType, objectName)=>{
        var valid = this.#validateFileType(moduleKey, fileId, fileType);
        if (valid) // Set moduleData (columnHeaders)
        //this.#csvReader.getColumns(moduleKey, this.setModuleDataCB);
        // TODO: set columnHeaders as: [{ fieldName: 'name', dataType: 'value' }, ...] .. 
        //          or for nested data, [{ fieldName: 'name', data: [{ fieldName: 'name', dataType: 'category' }, ...] }, ...]
        this.#csvReader.getFileData(moduleKey, fileId, objectName, this.setModuleDataCB);
        else console.log("File type expected does not match. Expected file type:" + fileType);
    };
    // Gets table data to set its content ... not needed?
    getTableData = (moduleData)=>{
        if (moduleData.fileId) this.#csvReader.getData(moduleData, this.setTableCB);
    };
    // (deprecated) Gets chart data to set its content ... not needed?
    /*getChartData = (moduleData) => {
        if (moduleData.fileId) {
            this.#csvReader.getData(moduleData, this.setChartCB);
        }
    }*/ /**
     * 
     * */ #validateFileType = (moduleKey, fileId, fileType)=>{
        var file = document.getElementById(fileId).files[0];
        var valid = false;
        // check if extention matches the expected file type
        var extention = file.name.split(".");
        if (extention[1] == fileType) valid = true;
        return valid;
    };
    // deprecated
    /*#validateFile = (source, path) => {
        let valid = false;
        switch (source) {
            case 'html':
                if (document.getElementById(path).files.length > 0) valid = true;
                break;
        }
        return valid;
    }*/ /** Sets moduleData to the CSV module.
     * @param {moduleKey} moduleKey of this CSV module
     * @param {moduleData} moduleData to set to this CSV module with
     * */ setModuleDataCB = (moduleKey, moduleData, toggleModuleColor)=>{
        console.log(moduleData);
        const data = {
            moduleKey: moduleKey,
            moduleData: moduleData,
            toggleModuleColor: toggleModuleColor
        };
        const msg = new (0, _indexJs.Message)((0, _indexJs2.MODULE_MANAGER), (0, _indexJs2.INPUT_MANAGER), "Set Module Data Event", data);
        this.publisher.publishMessage(msg);
    };
    updateInspectorCardCB = (moduleKey, moduleData)=>{
        const msg = new (0, _indexJs.Message)((0, _indexJs2.MODULE_MANAGER), (0, _indexJs2.INPUT_MANAGER), "Update Inspector Card Event", {
            moduleKey: moduleKey,
            moduleData: moduleData
        });
        this.publisher.publishMessage(msg);
    };
    // called at the table module to get the content of the file
    setTableCB = (moduleData)=>{
        const msg = new (0, _indexJs.Message)((0, _indexJs2.OUTPUT_MANAGER), (0, _indexJs2.INPUT_MANAGER), "Set New Table Event", moduleData);
        this.publisher.publishMessage(msg);
    };
    // called at the chart module to get the content of the file
    setChartCB = (moduleData)=>{
        const msg = new (0, _indexJs.Message)((0, _indexJs2.OUTPUT_MANAGER), (0, _indexJs2.INPUT_MANAGER), "Set New Chart Event", moduleData);
        this.publisher.publishMessage(msg);
    };
    // called at the table module to view button and get table data 
    // set sourceData (deprecated)
    fileReaderCB = (table, processId)=>{
        if (table) {
            const data = {
                val: {
                    type: "table",
                    data: new (0, _indexJs1.DataTable)(table)
                },
                id: processId
            };
            const msg = new (0, _indexJs.Message)((0, _indexJs2.MODULE_MANAGER), (0, _indexJs2.INPUT_MANAGER), "Set Module Data Event", data);
            this.publisher.publishMessage(msg);
        }
    };
    // ----------------------------------------- Table Inspector Data Organization -----------------------------------------
    getColumnHeaders(sourceData) {
        var columnHeaders = [];
        var keys = Object.keys(sourceData[0]);
        // create columnHeader objects list
        columnHeaders = this.buildColumnHeaders(sourceData[0], keys, columnHeaders);
        //columnHeaders = [{ fieldName: 'test1', dataType: 'value'}, { fieldName: 'test1', dataType: 'value'}, { fieldName: 'test1', dataType: 'value'}];
        return columnHeaders;
    }
    buildColumnHeaders(rowData, keys, columnHeaders) {
        keys.forEach((key)=>{
            if (!this.excludeFieldMatched(key)) {
                const dataType = (0, _indexJs2.getDataType)(rowData[key]);
                //console.log(key, ": ", dataType);
                columnHeaders.push({
                    fieldName: key,
                    dataType: dataType
                });
            //-- nested column headers
            //columnVal = Number.isNaN(columnVal) ? dataRow[key] : columnVal;
            /*var dataType = typeof (columnVal);
                if (dataType !== 'object' || columnVal === null) {
                    columnHeaders.push({ fieldName: key, dataType: (dataType === 'number' || columnVal === null) ? 'value' : 'category' });
                }
                else {
                    var nestedDataRow = columnVal;
                    var nestedKeys = Object.keys(nestedDataRow);
                    var nestedColumnHeaders = [];
                    columnHeaders.push({ fieldName: key, data: nestedColumnHeaders });

                    this.buildColumnHeaders(nestedDataRow, nestedKeys, nestedColumnHeaders);
                }*/ }
        });
        return columnHeaders;
    }
    /** Gets the dataType of that column values
     *  @param {inputVal} string value of the first item in a column
     *  @returns {dataType} of the input value - value, category, or time
     * */ /*getDataType(inputVal) {
        let dataType = 'category';

        // Check if it's a numeric value
        if (/^[-+]?\d*\.?\d+$/.test(inputVal)) {
            dataType = 'value';
        }
        // Check if it's a date or time
        else if (Date.parse(inputVal)) {
            dataType = "time";
        }
        return dataType;
    }*/ /** Helper function to exclude all the fields with the string 'id' (just 'id') and '_id' (at the end)
     * @param {fieldName} fieldName to check whether to exclude as columnHeader or not
     */ excludeFieldMatched(fieldName) {
        var match = false;
        var excludeFields = [
            /_id$/i,
            /^id$/i
        ];
        for(let i = 0; i < excludeFields.length; i++){
            var field = excludeFields[i];
            match = field.test(fieldName);
            if (match) break;
        }
        return match;
    }
    // ----------------------------------------- Chart Inspector Data Organization -----------------------------------------
    // build Chart axis information from columnHeaders (to build Chart Module Inspector Card)
    // seriesData = {  name: 'series', fields: [{ fieldName: 'telescope', series: [{ name: '', displayName: '', dataType: '' }, ..] }, ..]}
    getChartData(remoteData, sourceData) {
        const columnHeaders = this.getColumnHeaders(sourceData);
        let chartData = [];
        let xAxisData = {
            name: "xaxis",
            axes: []
        };
        let yAxisData = {
            name: "yaxis",
            axes: []
        };
        let errorData = {
            name: "error",
            axes: []
        };
        let seriesData = {
            name: "series",
            fields: []
        };
        columnHeaders.forEach((columnHeader)=>{
            /*if (remoteData) {
                if (columnHeader.hasOwnProperty('data')) {
                    var columnHeaderY = columnHeader.data;
                    columnHeaderY.forEach(header => {
                        var fieldName = header.fieldName;
                        if (fieldName.includes('err') || fieldName.includes('error')) {
                            header['fieldGroup'] = columnHeader.fieldName;
                            errorData['fields'].push(header);
                        }
                        else {
                            header['fieldGroup'] = columnHeader.fieldName;
                            yAxisData['fields'].push(header);
                        }
                    });
                }
                // x-axis data
                else {
                    xAxisData['fields'].push(columnHeader);
                }
            }
            // local csv data
            else {*/ // change this to configuration data set in moduleData for chart data preparation
            if (columnHeader.fieldName.includes("error") || columnHeader.fieldName.includes("err")) errorData["axes"].push(columnHeader);
            else {
                let words = columnHeader.fieldName.split("_");
                // Capitalize the first letter of each word
                const displayName = words.map((word)=>word.charAt(0).toUpperCase() + word.slice(1));
                xAxisData["axes"].push({
                    name: columnHeader.fieldName,
                    displayName: displayName.join(" "),
                    dataType: columnHeader.dataType
                });
                yAxisData["axes"].push({
                    name: columnHeader.fieldName,
                    displayName: displayName.join(" "),
                    dataType: columnHeader.dataType
                });
            }
            // prepare seriesData
            // get fieldName (e.g. telescope) and series (e.g. [{ name: 'assasn', displayName: 'ASSASN', dataType: 'category' }, ..])
            if (columnHeader.dataType === "category") {
                const fieldName = columnHeader.fieldName;
                const series = [];
                //seriesData['fieldName'].push(columnHeader.fieldName);
                const uniqueColVals = Array.from(new Set(sourceData.map((sd)=>sd[columnHeader.fieldName])));
                uniqueColVals.forEach((val)=>{
                    const seriesName = val.replace(/\([^)]+\)/g, "").trim().replace("/", "_").replaceAll(" ", "-").toLowerCase();
                    series.push({
                        name: seriesName,
                        displayName: val,
                        dataType: "category"
                    });
                });
                seriesData["fields"].push({
                    fieldName: fieldName,
                    series: series
                });
            //console.log(columnVals);
            }
        });
        chartData.push(xAxisData);
        chartData.push(yAxisData);
        chartData.push(errorData);
        chartData.push(seriesData);
        //console.log(chartData);
        return chartData;
    }
    /**
     * Prepare Orbit Module Data to get object and planet names to render and set its moduleData
     * */ async prepOrbitModuleData(moduleKey, remote, objectName, sourceData, cometOrbit) {
        // Get objectNames & planetNames
        /*const objectFetchURL = 'http://coma.ifa.hawaii.edu:8000/api/v1/objects/' + objectID;

        const response = await fetch(objectFetchURL);
        const rjson = await response.json();
        console.log(rjson);
        const objectName = rjson.object.ui_name;*/ //console.log(objectName);
        const planetOrbits = JSON.parse(localStorage.getItem("Planet Orbits"));
        console.log(planetOrbits);
        let planetNames = Object.keys(planetOrbits[0]).filter((planet)=>!planet.includes("id")).map((planet)=>{
            let lastIndex = planet.lastIndexOf("_");
            return planet.slice(0, lastIndex);
        });
        planetNames = new Set(planetNames);
        console.log(planetNames);
        // setModuleData
        const orbitModuleData = {
            moduleKey: moduleKey,
            moduleData: {
                sourceData: sourceData,
                cometOrbit: cometOrbit,
                objectNames: [
                    objectName
                ],
                planetNames: planetNames
            },
            toggleModuleColor: false
        };
        const msg = new (0, _indexJs.Message)((0, _indexJs2.MODULE_MANAGER), (0, _indexJs2.INPUT_MANAGER), "Set Module Data Event", orbitModuleData);
        this.publisher.publishMessage(msg);
    //if (remote) {
    // set orbit module's moduleData
    // updateInspector card
    // callbacks? 
    //}
    //else {
    // get eliptical data
    //this.#csvReader.getElipticData(moduleKey, sourceData, this.setModuleDataCB, this.updateInspectorCardCB);
    //}
    }
    // just one object for now
    getObjectName(objectID) {
        const msg = new (0, _indexJs.Message)((0, _indexJs2.MODULE_MANAGER), (0, _indexJs2.INPUT_MANAGER), "Set Module Data Event", objectID);
        this.publisher.publishMessage(msg);
    }
    /*
    getObjectOrbits() {
        this.#csvReader.getObjectOrbits();
    }*/ prepObjectImagesModuleData(remote, moduleKey, fromKey) {
        //const dom = document.querySelector(`#Inspector-card-${fromKey} #search-form-${fromKey} #objects-${fromKey} input`);
        let dom = document.querySelector(`#Inspector-card-${fromKey} #search-form-${fromKey} #objects-${fromKey} input`);
        if (!remote) dom = document.getElementById(`csv-objects-input-${fromKey}`);
        const objectName = dom.value;
        const data = {
            moduleKey: moduleKey,
            moduleData: {
                objectName: objectName
            },
            toggleModuleColor: false
        };
        const msg = new (0, _indexJs.Message)((0, _indexJs2.MODULE_MANAGER), (0, _indexJs2.INPUT_MANAGER), "Set Module Data Event", data);
        this.publisher.publishMessage(msg);
    }
    addRoutes = (routes)=>this.#dataTable.set("routes", routes);
    addObjects = (objects)=>this.#dataTable.set("objects", objects);
    getObjects = ()=>this.#dataTable.get("objects");
}

},{"../communication/index.js":"eT70M","./index.js":"1QZVj","../errorHandling/errorHandlers.js":"dxjcu","../sharedVariables/index.js":"1uX14","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3hcyg":[function(require,module,exports) {
/*************************************************************
 * COPYRIGHT University of Hawaii - COMA Project / Lava Lab  *
 * Author: James Hutchison                                   *
 * Date: 5/5/2022                                            *
 *************************************************************/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
//import { directoryPath } from '../../../images/fits_demo/Object_Images/'
parcelHelpers.export(exports, "OutputManager", ()=>OutputManager);
var _indexJs = require("../communication/index.js");
var _indexJs1 = require("./index.js");
var _errorHandlersJs = require("../errorHandling/errorHandlers.js");
//import { getNumDigits } from '../sharedletiables/formatValues.js';
var _indexJs2 = require("../sharedVariables/index.js");
class OutputManager {
    publisher;
    #outputMap;
    #chartBuilder;
    #activeChartMap;
    #orbitBuilder;
    #activeOrbitMap;
    #csvWriter;
    #dataTable;
    constructor(){
        this.publisher = new (0, _indexJs.Publisher)();
        this.#outputMap = new Map();
        this.#chartBuilder = new (0, _indexJs1.ChartBuilder)();
        this.#activeChartMap = new Map();
        this.#activeOrbitMap = new Map();
        this.#orbitBuilder = new (0, _indexJs1.OrbitBuilder)();
        this.#csvWriter = new (0, _indexJs1.CsvWriter)();
        this.#dataTable = new Map();
    }
    /** --- PUBLIC ---
     * Stores the chart information and data into the outputmap hash table.
     * @param {number} key key identifying the location in the hash table. it is also the id of the module associated with this chart.
     * @param {object} data the data that is used for the chart (traceData)
     * @param {object} div the html div to inject the chart
     * @param {string} type the type of chart. ie. 'bar', 'scatter'
     * @param {string} xAxisLabel (Optional)
     * @param {string} yAxisLabel (Optional)
     * @returns true if successful, false if failure  */ storeChartData = (key, data, div, type, coordinateSystem)=>{
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(key, "key", "number"),
            (0, _errorHandlersJs.varTest)(data, "data", "object"),
            (0, _errorHandlersJs.varTest)(div, "div", "object"),
            (0, _errorHandlersJs.varTest)(type, "type", "string")
        ], "OutputManager", "storeChartData")) return false;
        this.#outputMap.set(key, {
            data: data,
            type: type,
            div: div,
            outputType: "chart",
            framework: this.#getFramework(type),
            theme: "dark",
            coordinateSystem: coordinateSystem
        });
        console.log(this.#outputMap);
        return true;
    };
    /** --- PUBLIC ---
     * Generates data for a chart and calls the chart builder.
     * @param {number} key the key to the chart data.
     * @param {HTML element} div the html element that we will place the chart
     * @param {number} width width of the div in pixels. (number only)
     * @param {number} height height of the div in pixels. (number only)
     * @param {string} framework 'echart' or 'plotly' */ drawChart = (key, div, width, height)=>{
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(key, "key", "number"),
            (0, _errorHandlersJs.varTest)(div, "div", "object"),
            (0, _errorHandlersJs.varTest)(width, "width", "number"),
            (0, _errorHandlersJs.varTest)(height, "height", "number")
        ], "OutputManager", "drawChart")) return;
        if (this.#outputMap.has(key)) {
            const cd = this.#outputMap.get(key);
            // if activeChartMap contains the key, updateChart
            let activeChart = this.#activeChartMap.get(key);
            if (this.popupHasActiveChart(key)) {
                // get the div of chartObject
                let activeChartDiv = activeChart.chartObject.getDom();
                // set activeChartMap with updated chartObject
                this.#activeChartMap.set(key, {
                    chartObject: this.#chartBuilder.updatePlotData(cd.data, cd.type, activeChartDiv, width, height, cd.framework, cd.coordinateSystem)
                });
            } else this.#activeChartMap.set(key, {
                chartObject: this.#chartBuilder.plotData(cd.data, cd.type, div, width, height, cd.framework, cd.theme, cd.coordinateSystem)
            });
        } else (0, _errorHandlersJs.printErrorMessage)(`Missing Data.`, `key: ${key} - OutputManager -> drawChart`);
    };
    /** --- PUBLIC ---
     * Removes a chart from the data table.
     * @param {number} key module key
     * @returns true if successful false if not */ removeChart = (key)=>{
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(key, "key", "number")
        ], "OutputManager", "removeChart")) return false;
        if (this.#activeChartMap.has(key)) {
            try {
                this.#activeChartMap.get(key).chartObject.dispose();
            } catch (error) {
                console.log(error);
            } finally{
                this.#activeChartMap.delete(key);
            }
            return true;
        } else return false;
    };
    /** --- PUBLIC ---
     * Checks to see if chart data exists for a specific module.
     * @param {number} key key into the hash table/
     * @returns true if there is a chart for this module, false if not. */ popupHasAChart = (key)=>{
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(key, "key", "number")
        ], "OutputManager", "popupHasAChart")) return false;
        if (this.#outputMap.has(key)) {
            if (this.#outputMap.get(key).outputType === "chart") return true;
        }
        return false;
    };
    /** --- PUBLIC ---
     * Checks to see if a popup has an active chart to resize.
     * @param {number} key module key
     * @returns true or false */ popupHasActiveChart = (key)=>{
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(key, "key", "number")
        ], "OutputManager", "popupHasActiveChart")) return false;
        if (this.#activeChartMap.has(key)) return true;
        else return false;
    };
    /** --- PUBLIC ---
     * @param {number} key 
     * @param {number} width 
     * @param {number} height 
     * @returns true if successful, false if not */ resizeChart = (key, width, height)=>{
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(key, "key", "number"),
            (0, _errorHandlersJs.varTest)(width, "width", "number"),
            (0, _errorHandlersJs.varTest)(height, "height", "number")
        ], "Output Mangaer", "resizeChart")) return false;
        if (this.popupHasActiveChart(key)) {
            if (this.#thisIsAnEchart(key)) this.#chartBuilder.resizeEchart(this.#activeChartMap.get(key).chartObject, width, height);
            else if (this.#thisIsAPlotlyChart(key)) {
                const chart = this.#outputMap.get(key);
                this.#chartBuilder.plotData(chart.data, chart.type, chart.div, width, height, chart.framework);
            }
        } else if (this.#outputMap.has(key)) {
            const outputObject = this.#outputMap.get(key);
            if (this.#thisIsAChart(outputObject)) this.drawChart(key, outputObject.div, width, height, outputObject.framework);
        } else return false;
        return true;
    };
    #thisIsAnEchart = (key)=>this.#getActiveChartFramework(key) === "echart";
    #thisIsAPlotlyChart = (key)=>this.#getActiveChartFramework(key) === "plotly";
    #thisIsAChart = (outputObject)=>outputObject.outputType === "chart";
    /**
     * Gets the correct framework string for the type of chart requested.
     * @param {string} type chart type 
     * @returns the chart type
     */ #getFramework = (type)=>{
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(type, "type", "string")
        ], "Output Manager", "getFramework")) return undefined;
        switch(type){
            case "line":
            case "bar":
            case "scatter":
                return "echart";
            case "table":
                return "tabulator";
        }
    };
    /** --- PRIVATE ---
     * Retrieves the framework of the chart (ie. 'echarts')
     * @param {number} key id of the module that created the chart.
     * @returns (string) the framework */ #getActiveChartFramework = (key)=>{
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(key, "key", "number")
        ], "OutputManager", "#getActiveChartFramework")) return undefined;
        if (this.#activeChartMap.has(key)) return this.#outputMap.get(key).framework;
        return undefined;
    };
    /** --- PUBLIC ---
     * Changes the theme of an echarts instance.
     * @param {number} key chart identifier
     * @param {string} theme the name of the theme  */ changeEchartTheme = (key, theme)=>{
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(theme, "theme", "string"),
            (0, _errorHandlersJs.varTest)(key, "key", "number")
        ], "OutputManager", "#changeChartTheme")) return false;
        if (this.#outputMap.has(key)) {
            if (this.#getActiveChartFramework(key) === "echart") {
                this.#outputMap.get(key).theme = theme;
                return true;
            }
        } else return false;
    };
    /** --- PUBLIC ---
     * @param {number} key module key associated with chart
     * @param {number} width width of the chart div
     * @param {number} height height of the chart div */ redrawEChart = (key, width, height)=>{
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(key, "key", "number"),
            (0, _errorHandlersJs.varTest)(width, "width", "number"),
            (0, _errorHandlersJs.varTest)(height, "height", "number")
        ], "Output Manager", "redrawEchart")) return;
        if (this.#activeChartMap.has(key)) {
            if (this.removeChart(key)) this.drawChart(key, this.#outputMap.get(key).div, width, height);
        }
    };
    /** --- PUBLIC --
     * Creates a new CSV file by calling the csvWriter instance.
     * @param {Object} data the datatable to create a chart from */ generateCsvFile = (data)=>{
        this.#csvWriter.createCsvFileFromData("comaCSVFile", data);
    };
    /** --- PUBLIC ---
     * Removes data from the outputMap
     * @param {Number} key key to the data table. */ removeOutputData(key) {
        if (this.#outputMap.has(key)) this.#outputMap.delete(key);
    }
    /** --- PUBLIC ---
     * Adds to the data table. If the specified key is in the table, it will be overwritten.
     * @param {number} key key into the data table. It is also the key to the module associated with this data.
     * @param {object} val the value linked to the key. This is the "data".
     * @param {boolean} local true if the data was generated locally (creates metadata)
     */ addData = (key, val, local)=>{
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(key, "key", "number"),
            (0, _errorHandlersJs.varTest)(val, "val", "object"),
            (0, _errorHandlersJs.varTest)(local, "local", "boolean")
        ], "OutputManager", "addData")) return false;
        if (this.#dataTable.has(key)) console.log(`Data Table already has key: ${key} in it. Will Overwrite. -- DataManager -> addData.`);
        this.#dataTable.set(key, {
            data: val
        });
        let metadata = undefined;
        if (local) metadata = val.data.setMetadata();
        return true;
    };
    // ----------------------------------------- Table Data Preparation -----------------------------------------
    /** Prepares the tableData needed to create Tabulator data for columns and data organization.
     * @param {sourceData object} sourceData of the sourceModule linked to the current table module
     * @returns {tableData object} tableData is array of objects that contains information about each field of the sourceData and the values for each field 
     *                              (e.g. tableData = [{ columns: [{ title: 'Date', field: 'date', hozAlign: 'center' }, ...],
     *                                                   tableData: [{ mjd: '5986.480892', dec_obj: '27.803', ... }, ...] }],
     * */ getTabulatorData(datasetType, columnsToRender, sourceData) {
        console.log(columnsToRender);
        console.log(sourceData);
        let resultColumns = [];
        let tableColumns = this.#buildTabulatorColumns(columnsToRender, resultColumns);
        let resultData = [];
        //let tableSourceData = this.#buildTabulatorSourceData(sourceData, columnsToRender, resultData);
        let tableSourceData = [];
        sourceData.forEach((dataRow)=>{
            let newDataRow = this.#buildTabulatorSourceData(columnsToRender, dataRow, {});
            tableSourceData.push(newDataRow);
        });
        let tabulatorData = {
            columns: tableColumns,
            tabledata: tableSourceData
        };
        console.log(tabulatorData);
        return tabulatorData;
    }
    #buildTabulatorColumns(columnsToRender, tableColumns) {
        columnsToRender.forEach((column)=>{
            if (column.hasOwnProperty("data")) {
                let nestedColumnsToRender = column.data;
                let nestedTableColumns = [];
                tableColumns.push({
                    title: column.fieldName,
                    columns: nestedTableColumns,
                    headerHozAlign: "left"
                });
                this.#buildTabulatorColumns(nestedColumnsToRender, nestedTableColumns);
            } else tableColumns.push({
                title: column.fieldName,
                field: column.fieldName,
                hozAlign: "right"
            });
        });
        return tableColumns;
    }
    #buildTabulatorSourceData(columnsToRender, dataRow, newDataRow) {
        columnsToRender.forEach((column)=>{
            let value = dataRow[column.fieldName];
            if (column.hasOwnProperty("data")) {
                // get the value (obj)
                let nestedColumnsToRender = column.data;
                let nestedDataRow = dataRow[column.fieldName];
                let nestedNewDataRow = newDataRow;
                // get the rest of columns to render
                this.#buildTabulatorSourceData(nestedColumnsToRender, nestedDataRow, nestedNewDataRow);
            } else if (column.dataType === "value") {
                if (value === null) newDataRow[column.fieldName] = "Null";
                else {
                    let numDigits = (0, _indexJs2.getNumDigits)(column.fieldName);
                    newDataRow[column.fieldName] = Number(value).toFixed(numDigits);
                }
            } else newDataRow[column.fieldName] = value;
        });
        return newDataRow;
    }
    // ----------------------------------------- Chart Data Preparation -----------------------------------------
    /*********************************************** Mai 7/13/23 *******************************************************/ /** --- PUBLIC ---
     * Stores additional data to chartData, which is passed to chartBuilder.
     * @param {number} moduleKey key of the module is also a key to the outputMap table. 
     * @param {object} chartData data from the chart's inspector card. 
     *                           (e.g { fieldName: "date", labelName: "Date", gridLines: true, ticks: false  })
     * @param {object} sourceData unfiltered source data from the previous module (list of key-value objects)
     * @returns {object} chartData { xAxis: [{ data: [], dataType: '', }], yAxis: [{ data: [], dataType: '', }], series: [{ data: [], dataType: '', }] }
     * */ // stores source data of the field and source data type of the field to chartData
    prepChartData(moduleKey, datasetType, chartTitle, chartData, sourceData) {
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(moduleKey, "moduleKey", "number"),
            (0, _errorHandlersJs.varTest)(sourceData, "sourceData", "object")
        ], "OutputManager", "prepEchartData")) return;
        /* dataset: {
                source: [
                    ['date', '2012-05-10', '2013-06-20', '2014-10-01', '2015-01-01'],
                    ['ATLAS-HKO', 41.1, null, 65.1, 53.3],
                    ['ATLAS-RIO', 86.5, null, null, null],
                    ['ATLAS-MLO', null, 67.2, null, 86.4]
                ]
        },*/ //-- Prep ECharts source data for dataset option (e.g. [['product', '2015', '2016', '2017'],
        //                                                      ['Matcha Latte', 43.3, 85.8, 93.7],
        //                                                      ['Milk Tea', 83.1, 73.4, 55.1],
        //                                                      ['Cheese Cocoa', 86.4, 65.2, 82.5]])
        // Build column header of dataset source
        const dataset = {
            source: []
        };
        const columnHeader = [];
        // for each xAxis
        chartData["xAxis"].forEach((xAxis)=>{
            const axisName = xAxis.axisName;
            columnHeader.push(axisName);
        });
        /*chartData['yAxis'].forEach(yAxis => {
            const axisName = yAxis.axisName;
            columnHeader.push(axisName);
        });*/ chartData["series"].forEach((series)=>{
            const fieldName = series.fieldName;
            const seriesName = series.seriesName;
            columnHeader.push(seriesName);
            // Get all sourcedata rows that has the series name
            const seriesSourceData = sourceData.filter((sd)=>sd[fieldName] === seriesName);
            console.log(seriesSourceData);
        });
        console.log(columnHeader);
        dataset["source"].push(columnHeader);
        console.log(sourceData);
        console.log(chartData["series"]);
        // filter source data
        //const seriesNames = chartData['series'].filter(series => series.seriesName);
        const numSeries = chartData["series"].length;
        const numXAxis = chartData["xAxis"].length;
        //console.log(numSeries);
        //console.log(numXAxis);
        const result = [];
        sourceData.forEach((sd, i)=>{
            const dataRow = new Array(numSeries + numXAxis).fill(null);
            const seriesIndices = [];
            if (chartData["series"].length > 0) chartData["series"].forEach((seriesData, seriesIndex)=>{
                seriesIndices.push(numXAxis + seriesIndex);
                const fieldName = seriesData.fieldName;
                const seriesName = seriesData.seriesName;
                if (sd[fieldName] === seriesName) {
                    // Store xAxis value to xAxisIndex of dataRow
                    const xAxisName = seriesData.xAxisName;
                    dataRow[seriesData.xAxisIndex] = sd[xAxisName];
                    // Store series value (corresponding yAxis value of that series) to seriesIndex
                    // Store at [numXAxis + seriesIndex] because series slot in the array comes after xAxis values
                    const yAxisName = seriesData.yAxisName;
                    if (sd[yAxisName] !== 99) {
                        const numDigits = (0, _indexJs2.getNumDigits)(yAxisName);
                        const value = Number(sd[yAxisName]).toFixed(numDigits);
                        dataRow[numXAxis + seriesIndex] = value;
                    }
                }
            });
            // When there is no series selected, just prepare xAxis and yAxis values
            /*else {
                // just build array of arrays that containst x and y axis values
                chartData['xAxis'].forEach(xa => {
                    console.log(xa);
                    console.log(sd[xa.axisName]);
                    dataRow.push(sd[xa.axisName]);
                });

            }*/ // Add dataRow to the dataset source only if all the values in a series indices of the dataRow is null
            //const allNull = dataRow.every(item => item === null); //-- remove
            const seriesNull = this.#hasNullAtIndex(dataRow, seriesIndices);
            if (!seriesNull) dataset["source"].push(dataRow);
        });
        console.log(result);
        // 1. Foreach columnHeader add a column value to the dataRow from sourceData
        /*sourceData.forEach((sd, i) => {
            const dataRow = [];
            columnHeader.forEach(columnHeader => {
                const seriesData = chartData['series'].filter(series => series.seriesName === columnHeader);
                // series column header
                if (i > 10 && i < 20) { // for testing
                    console.log(seriesData[0]);
                }
                const seriesNames = chartData['series'].map(series => series.seriesName);
                if (seriesData[0]) {
                    const series = seriesData[0];
                    const fieldName = series.fieldName;
                    if (i > 10 && i < 20) { // for testing
                        console.log(sd[fieldName]);
                        console.log(columnHeader);
                    }

                    if (sd[fieldName] === columnHeader) {
                        const yAxisName = series.yAxisName;
                        if (i > 10 && i < 20) { // for testing
                            console.log(sd[yAxisName]);
                        }
                        dataRow.push(sd[yAxisName]);
                    }
                    else {
                        dataRow.push(null);
                    }
                }
                // axis column header
                else {
                    dataRow.push(sd[columnHeader]);
                }
            });
            //find a way to not push dataRow if there is no value

            dataset['source'].push(dataRow);
        });*/ // Foreach data row in sourceData, get values of the corresponding axis/series field
        /*sourceData.forEach((sd, i) => {
            const dataRow = [];
            columnHeader.forEach(header => {
                // Check if current header is a series header or not
                const seriesData = chartData['series'].find(series => sd[series.fieldName] === header);

                console.log(seriesData);
                if (seriesData) {
                    const fieldName = seriesData.fieldName;
                    if (i < 20) {
                        console.log(sd);
                        console.log(header);
                    }
                    if (sd[fieldName] === header) {
                        const yAxisName = seriesData.yAxisName;
                        dataRow.push(sd[yAxisName]);
                        if (i < 20) {
                            console.log(yAxisName);
                        }
                    }

                }
                else {
                    dataRow.push(sd[header]);
                    dataset['source'].push(dataRow);
                }
*/ /*                const seriesNames = chartData['series'].map(series => series.seriesName);
                if (seriesNames.includes(sd[header])) {
                    const series = chartData['series'].find(series => series.seriesName === sd[header]);
                    if (i < 20) {
                        console.log(series);
                    } 
                    const fieldName = series.fieldName;
                    if (i < 20) {
                        console.log(sd[fieldName]);
                        console.log(series.seriesName);
                    }
                    if (sd[fieldName] === series.seriesName) {
                        const yAxisName = series.yAxisName;
                        dataRow.push(sd[yAxisName]);
                    }
                    else {
                        dataRow.push(null);
                    }
                }
                else {
                    // xAxis or yAxis values
                    dataRow.push(sd[header]);
                    dataset['source'].push(dataRow);
                }*/ /*

            });
        });*/ console.log(dataset);
        chartData["dataset"] = dataset;
        //-- Build seriesData
        /*chartData['series'].forEach(seriesData => {
            seriesData['dataType'] = seriesData.dataType;

            const seriesName = seriesData.fieldName;
            const xAxisName = seriesData.xAxisName;
            const yAxisName = seriesData.yAxisName;
            const errorName = seriesData.error;
            //let errorData = (seriesData.error !== 'none') ? this.#buildEChartsErrorData(seriesData.error, sourceData) : undefined;
            const result =
                this.#buildEChartsSeriesSourceData(seriesName, xAxisName, yAxisName, errorName, sourceData);
            seriesData['data'] = result;
        });*/ //-- Build axisData
        /*let axisNames = ['xAxis', 'yAxis'];
        axisNames.forEach(axis => {
            chartData[axis].forEach(axisData => {
                // Store sourceData type of the field to determine whether the field is categorical or value type
                //axisData['dataType'] = axisData.dataType;

                const result = this.#buildEChartsAxisSourceData(axisData.axisName, axisData.dataType, sourceData);
                axisData['data'] = result;
            });
        });*/ // Build series echartData
        /*chartData['series'].forEach(seriesData => {
            console.log(seriesData);
            seriesData['dataType'] = seriesData.dataType;

            let xi = seriesData.xAxisIndex;
            let yi = seriesData.yAxisIndex;
            let errorData = (seriesData.error !== 'none') ? this.#buildEChartsErrorData(seriesData.error, sourceData) : undefined;
            let result = this.#buildEChartsSeriesSourceData(chartData['xAxis'][xi].data, chartData['yAxis'][yi].data, errorData);
            seriesData['data'] = result;
        });*/ chartData["chartTitle"] = chartTitle;
        console.log(chartData);
        return chartData;
    }
    /** Checks if any specified indices of the array have null values
     * 
     * */ #hasNullAtIndex(array, indices) {
        for (const index of indices){
            if (index < 0 || index >= array.length || array[index] !== null) return false;
        }
        return true;
    }
    #buildEChartsAxisSourceData(axisName, dataType, sourceData) {
        //console.log(fieldName);
        //console.log(trace);
        const result = sourceData.map((sd, i)=>{
            let value = sd[axisName];
            if (dataType === "value") {
                const digits = (0, _indexJs2.getNumDigits)(axisName);
                value = Number(Number(value).toFixed(digits));
            }
            return value;
        // skip the rows with mag = 99
        /*if (Number(sd['mag']) !== 99) {
                if (fieldName == 'mag_err') {
                    console.log(value);
                }
                return value;
            }*/ });
        return result;
    }
    #buildEChartsSeriesSourceData(xData, yData, errorData) {}
    /*#buildEChartsSeriesData(xData, yData, errorData) {
        let result = undefined;
        if (xData && yData) {
            result = xData.map((xd, i) => {
                if (errorData) {
                    return [xd, yData[i], errorData[i]];
                }
                else {
                    return [xd, yData[i]];
                }
            });
        }
        return result;
    }*/ //--TODO: need to find out which errorName 
    #buildEChartsErrorData(errorName, sourceData) {
        console.log(sourceData);
        let errorArray = sourceData.map((sd, i)=>{
            let errorVal = sd[errorName];
            /*if (trace.fieldGroup !== 'undefined') {
                value = sd[trace.fieldGroup];
            }*/ let errorDigits = (0, _indexJs2.getNumDigits)(errorName);
            return errorVal.toFixed(errorDigits);
        });
        console.log(errorArray);
        return errorArray;
    }
    // ----------------------------------------- Orbit Data Preparation -----------------------------------------
    /** --- PUBLIC ---
    * Stores the orbit information and data into the outputmap hash table.
    * @param {number} key key identifying the location in the hash table. it is also the id of the module associated with this orbit chart.
    * @param {object} data the data that is used for the chart (traceData)
    * @param {object} div the html div to inject the chart
    * @returns true if successful, false if failure  */ storeOrbitData = (key, data, div)=>{
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(key, "key", "number"),
            (0, _errorHandlersJs.varTest)(data, "data", "object"),
            (0, _errorHandlersJs.varTest)(div, "div", "object")
        ], "OutputManager", "storeOrbitData")) return false;
        this.#outputMap.set(key, {
            data: data,
            div: div,
            outputType: "orbit"
        });
        console.log(this.#outputMap);
        return true;
    };
    // drawOrbit
    drawOrbit = (key, div, width, height)=>{
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(key, "key", "number"),
            (0, _errorHandlersJs.varTest)(div, "div", "object"),
            (0, _errorHandlersJs.varTest)(width, "width", "number"),
            (0, _errorHandlersJs.varTest)(height, "height", "number")
        ], "OutputManager", "drawOrbit")) return;
        if (this.#outputMap.has(key)) {
            const od = this.#outputMap.get(key);
            // if activeChartMap contains the key, updateChart
            let activeOrbit = this.#activeOrbitMap.get(key);
            if (activeOrbit) // get the div of orbitObject
            this.#activeOrbitMap.set(key, {
                orbitObject: this.#orbitBuilder.updatePlotData(activeOrbit.orbitObject, od.data, od.div)
            });
            else // orbitObject is a three renderer
            this.#activeOrbitMap.set(key, {
                orbitObject: this.#orbitBuilder.plotData(od.data, div, width, height)
            });
        } else (0, _errorHandlersJs.printErrorMessage)(`Missing Data.`, `key: ${key} - OutputManager -> drawChart`);
    };
    /** Get object datapoint vectors, object orbit vectors, and planetary orbiot vectors
     * 
     * 
     * */ prepOrbitData(objectsToRender, objectsData, orbitsToRender, objectOrbits) {
        let orbitData = {};
        console.log(objectsData);
        // Get object data points
        let objectVectors = this.#getObjectDataPoints(objectsToRender, objectsData);
        orbitData["object_datapoints"] = objectVectors;
        // Get object orbits
        let objectOrbitVectors = this.#getObjectOrbits(objectsToRender, objectOrbits);
        orbitData["object_orbits"] = objectOrbitVectors;
        console.log(objectOrbitVectors);
        // Get planet orbits
        //console.log(orbitsToRender);
        let planetOrbitVectors = this.#getPlanetOrbits(orbitsToRender);
        orbitData["planet_orbits"] = planetOrbitVectors;
        return orbitData;
    //console.log(orbitData);
    }
    #getObjectDataPoints(objectsToRender, objectsData) {
        let result = [];
        console.log(objectsData);
        objectsToRender.forEach((object)=>{
            let objectVectors = {
                name: object,
                color: "#5df941"
            };
            let xKey = Object.keys(objectsData[0]).filter((k)=>k.toLowerCase().includes("x[au]"));
            let yKey = Object.keys(objectsData[0]).filter((k)=>k.toLowerCase().includes("y[au]"));
            let zKey = Object.keys(objectsData[0]).filter((k)=>k.toLowerCase().includes("z[au]"));
            xKey = xKey.length > 0 ? xKey[0] : "sunvect_x";
            yKey = yKey.length > 0 ? yKey[0] : "sunvect_y";
            zKey = zKey.length > 0 ? zKey[0] : "sunvect_z";
            let vectors = objectsData.map((obj)=>{
                let xVal = obj[`${xKey}`] ? Number(obj[`${xKey}`]) : obj["Photometry"][`${xKey}`];
                let yVal = obj[`${yKey}`] ? Number(obj[`${yKey}`]) : obj["Photometry"][`${yKey}`];
                let zVal = obj[`${zKey}`] ? Number(obj[`${zKey}`]) : obj["Photometry"][`${zKey}`];
                //return { x: Number(obj[`${xKey}`]), y: Number(obj[`${yKey}`]), z: Number(obj[`${zKey}`]) };
                return {
                    x: xVal,
                    y: yVal,
                    z: zVal
                };
            });
            objectVectors.vectors = vectors;
            result.push(objectVectors);
        });
        return result;
    }
    #getObjectOrbits(objectName, cometOrbits) {
        // call 'get-object-orbits'
        //const objectOrbits = JSON.parse(localStorage.getItem('Object Orbits'));
        // get comet_orbit here
        /*objectsToRender.forEach(orbit => {
            const exists = Object.keys(objectOrbits[0]).some(name => name.includes(orbit));
            // if the object we are rendering exists in the localStorage data of Object Orbits, return vectors
            if (exists) {
                let color = "#C9C9C9";
                let orbitVectors = { name: orbit, color: color };
                let xKey = Object.keys(objectOrbits[0]).filter(k => k.includes(' X') && k.includes(orbit));
                let yKey = Object.keys(objectOrbits[0]).filter(k => k.includes(' Y') && k.includes(orbit));
                let zKey = Object.keys(objectOrbits[0]).filter(k => k.includes(' Z') && k.includes(orbit));

                let vectors = objectOrbits.map(obj => {
                    return { x: Number(obj[`${xKey[0]}`]), y: Number(obj[`${yKey[0]}`]), z: Number(obj[`${zKey[0]}`]) }
                });
                orbitVectors['vectors'] = vectors;
                result.push(orbitVectors);
            }
        });*/ let orbitVectors = {
            name: objectName,
            color: "#C9C9C9"
        };
        if (cometOrbits) {
            const objectOrbits = cometOrbits.comet_orbit.replace(/'/g, '"').replace("True", "true").replace("False", "false");
            const objectOrbitsJson = JSON.parse(objectOrbits);
            const xvec = objectOrbitsJson["X-VEC"];
            const yvec = objectOrbitsJson["Y-VEC"];
            const zvec = objectOrbitsJson["Z-VEC"];
            console.log(objectOrbitsJson);
            const vectors = objectOrbitsJson["MJD-VEC"].map((mjd, i)=>{
                return {
                    x: xvec[i],
                    y: yvec[i],
                    z: zvec[i]
                };
            });
            orbitVectors["vectors"] = vectors;
            console.log(orbitVectors);
        } else orbitVectors["vectors"] = [];
        return [
            orbitVectors
        ];
    }
    #getPlanetOrbits(orbitsToRender) {
        const planetOrbits = JSON.parse(localStorage.getItem("Planet Orbits"));
        console.log(planetOrbits);
        let result = [];
        orbitsToRender.forEach((orbit)=>{
            let color = (0, _indexJs2.orbitColors)[orbit] ? (0, _indexJs2.orbitColors)[orbit] : "#20A4F3";
            let orbitVectors = {
                name: orbit,
                color: color
            };
            let xKey = Object.keys(planetOrbits[0]).filter((k)=>k.toLowerCase().includes("_x") && k.includes(orbit));
            let yKey = Object.keys(planetOrbits[0]).filter((k)=>k.toLowerCase().includes("_y") && k.includes(orbit));
            let zKey = Object.keys(planetOrbits[0]).filter((k)=>k.toLowerCase().includes("_z") && k.includes(orbit));
            let vectors = planetOrbits.map((ed)=>{
                return {
                    x: Number(ed[`${xKey[0]}`]),
                    y: Number(ed[`${yKey[0]}`]),
                    z: Number(ed[`${zKey[0]}`])
                };
            });
            orbitVectors["vectors"] = vectors;
            result.push(orbitVectors);
        });
        return result;
    }
    popupHasOrbit = (key)=>{
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(key, "key", "number")
        ], "OutputManager", "popupHasOrbit")) return false;
        if (this.#outputMap.has(key)) {
            if (this.#outputMap.get(key).outputType === "orbit") return true;
        }
        return false;
    };
    resizeOrbit(key, width, height) {
        let activeOrbit = this.#activeOrbitMap.get(key);
        if (activeOrbit) this.#orbitBuilder.resizeOrbitChart(activeOrbit, width, height);
    }
    // ----------------------------------------- Object Images Data Preparation -----------------------------------------
    async getObjectImagePaths(objectName) {
        objectName = objectName.replace(/\([^)]*\)/g, "").trim();
        objectName = objectName.replace("/", "");
        objectName = objectName.replace(" ", "");
        // take out parenthesis in objectName
        //const directoryPath = path.join(__dirname, '..', '..', 'images', 'fits_demo', 'Object_Images');
        //const root = '/images/fits_demo/Object_Images/';
        const response = await fetch("/get-images-names");
        const rjson = await response.json();
        const names = rjson.names;
        //console.log(names)
        const imageDates = [];
        const imagesToRender = [];
        // Get object name from image name
        names.forEach((name)=>{
            //console.log(name);
            const objRegex = /(\w+)_/;
            const object = name.match(objRegex);
            //console.log(object);
            // check if the object name passed on is the same as the current object name
            if (objectName === object[1]) {
                const dateRegex = /(\d{4}-\d{2}-\d{2})/;
                const date = name.match(dateRegex);
                imageDates.push(date[1]);
                imagesToRender.push(name);
            }
        });
        //console.log(imageDates);
        //console.log(imagesToRender);
        return {
            objectName: objectName,
            imageDates: imageDates,
            imagesToRender: imagesToRender
        };
    }
}

},{"../communication/index.js":"eT70M","./index.js":"1QZVj","../errorHandling/errorHandlers.js":"dxjcu","../sharedVariables/index.js":"1uX14","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dDp29":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DataManager", ()=>DataManager);
var _indexJs = require("../communication/index.js");
var _errorHandlersJs = require("../errorHandling/errorHandlers.js");
var _dataTableJs = require("./tables/dataTable.js");
class DataManager {
    publisher;
    #dataTable;
    #conversionTable;
    constructor(){
        this.publisher = new (0, _indexJs.Publisher)();
        this.#dataTable = new Map();
        this.#conversionTable = new Map();
        this.#conversionTable.set("datenumber", this.#convertFromDateToNumber);
        this.#conversionTable.set("numberdate", this.#convertFromNumberToDate);
        this.#conversionTable.set("category", this.#convertToCategory);
    }
    /**
     * Sends a message to all subscribers. (should only be hub).
     * @param {Message} msg the Message 
     */ #sendMessage = (msg)=>{
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(msg, "msg", "object")
        ], "DataManager", "#sendMessage")) return false;
        else this.publisher.publishMessage(msg);
    };
    /** --- PRIVATE ---
     * Gets data associated with a key from the hash table if it exists.
     * @param {number} key the key to the data associated with a module
     * @returns the data associated with the key if found.
     */ getData = (key)=>{
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(key, "key", "number")
        ], "DataManager", "getData")) return undefined;
        if (this.#dataTable.has(key)) {
            const data = this.#dataTable.get(key).data;
            if (data.filtered) data.data.setFilteredData(this.#applyDataFilter(data));
            return data;
        } else console.log(`ERROR: No data found for key: ${key}. -- Data Manager -> getData`);
        return undefined;
    };
    /** --- PRIVATE ---
     * Applies filters to the data table
     * @param {DataTable object} data the data to filter
     * @returns the array of filtered data
     */ #applyDataFilter(data) {
        const filteredData = [];
        const filterArray = this.#buildFilterArray(data.getFilterDetails(), data.data.getHeaders());
        // Make sure the data that is returned is not already filtered
        data.data.getCleanData().forEach((row, index)=>{
            if (index > 0) {
                let match = true;
                for(let i = 0; i < row.length; i++){
                    const filter = filterArray.find((value)=>value.columnIndex === i);
                    let value = row[i];
                    if (filter) {
                        if (filter.dataType !== "string") {
                            if (filter.dataType === "date") value = this.convertDateStringToMilliseconds(value);
                            if (Number(value) < Number(filter.min) || Number(value) > Number(filter.max)) {
                                match = false;
                                break;
                            }
                        }
                    }
                }
                if (match) filteredData.push(row);
            } else filteredData.push(row);
        });
        return filteredData;
    }
    /** --- PRIVATE ---
     * Builds an array of the necessary data needed to apply the filter to the data.
     * @param {Object[]} details this array contains the data from the filter card for all of the data columns in the table.
     * @param {string[]} headers array of the column headers of the data table
     * @returns array of relevant data [min value, max value, column index, data type]
     */ #buildFilterArray(details, headers) {
        const array = [];
        details.forEach((columnFilter)=>{
            let min = columnFilter.get("lastValidLeft");
            let max = columnFilter.get("lastValidRight");
            const columnIndex = headers.indexOf(columnFilter.get("label"));
            const dataType = columnFilter.get("dataType");
            // If it is a date datatype, store min and max as numbers
            if (dataType === "date") {
                min = this.convertDateStringToMilliseconds(min);
                max = this.convertDateStringToMilliseconds(max);
            }
            array.push({
                min: min,
                max: max,
                columnIndex: columnIndex,
                dataType: dataType
            });
        });
        return array;
    }
    convertDateStringToMilliseconds = (string)=>new Date(string).getTime();
    convertMillisecondsToString(milliseconds) {
        const conversion = new Date(milliseconds);
        return `${conversion.getMonth() + 1}/${conversion.getDate()}/${conversion.getFullYear()}`;
    }
    /** --- PUBLIC ---
     * Adds to the data table. If the specified key is in the table, it will be overwritten.
     * @param {number} key key into the data table. It is also the key to the module associated with this data.
     * @param {object} val the value linked to the key. This is the "data".
     * @param {boolean} local true if the data was generated locally (creates metadata)
     */ addData = (key, val, local)=>{
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(key, "key", "number"),
            (0, _errorHandlersJs.varTest)(val, "val", "object"),
            (0, _errorHandlersJs.varTest)(local, "local", "boolean")
        ], "DataManager", "addData")) return false;
        if (this.#dataTable.has(key)) console.log(`Data Table already has key: ${key} in it. Will Overwrite. -- DataManager -> addData.`);
        this.#dataTable.set(key, {
            data: val
        });
        let metadata = undefined;
        if (local) metadata = val.data.setMetadata();
        return true;
    };
    /** --- PUBLIC ---
     * Adds a filter to the data when a filter module is linked to the pipeline
     * @param {function} getFilterFunction function that can be called to get all filter information from the filter module
     * @param {Number} dataKey the key to the dataset that will be filtered.
     */ addFilterToDataTable(getFilterFunction, dataKey) {
        if (this.getData(dataKey).filtered) console.log(`Data at key: ${dataKey} is already filtered.`);
        else {
            this.getData(dataKey).getFilterDetails = getFilterFunction;
            this.getData(dataKey).filtered = true;
        }
    }
    /** --- PUBLIC ---
     * Called When a filter is removed from the data table
     * 
     * ************* THIS NEEDS TO BE IMPLEMENTED ****************
     * 
     * @param {Number} dataKey the key to the data set
     */ removeFilter(dataKey) {
        const data = this.getData(dataKey);
        if (data?.filtered) data.filtered = false;
    }
    /**
     * Checks to see if any data exists for a specific module key.
     * @param {number} key 
     * @returns true if data exists, false if not.
     */ hasData = (key)=>{
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(key, "key", "number")
        ], "DataManager", "hasData")) return false;
        else return this.#dataTable.has(key);
    };
    /**
     * Deletes data from the datatable.
     * @param {number} key identifying  
     * @returns true if successful, false if not.
     */ deleteData = (key)=>{
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(key, "key", "number")
        ], "DataManager", "deleteData")) return false;
        return this.#dataTable.delete(key);
    };
    /**
     * Data requests come with a key and a callback. All Data is returned as a parameter to this callback function.
     * @param {number} key the key to find the data.
     * @param {function} callbackFunction the function to call and pass data as a parameter.
     */ processDataRequest = (key, callbackFunction)=>{
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(key, "key", "number"),
            (0, _errorHandlersJs.varTest)(callbackFunction, "callbackFunction", "function")
        ], "DataManager", "processDataRequest")) return;
        else callbackFunction(key, this.getData(key));
    };
    /**
     * When data is first loaded, its is stored with the key that loaded it. When a new data module is created, the key
     * for this new module replaces the original key.
     * @param {number} oldKey previous key associated with data
     * @param {number} newKey new key to associate with specific data
     * @returns true if successful, false if there was no data.
     */ swapDataKeys(oldKey, newKey) {
        const data = this.getData(oldKey);
        if (data) {
            this.deleteData(oldKey);
            this.addData(newKey, data, true);
            return true;
        } else (0, _errorHandlersJs.printErrorMessage)(`Undefined Varaible`, `No Data found for key: ${oldKey}--> Data Manager - swapDataKeys`);
        return false;
    }
    /**
     * Reduces a data object, getting only the data for specified columns. This is used to ploy specific 
     * columns in the data where there are more than 2.
     * @param {number} key The key for the data hash table.
     * @param {object {xAxisField: string, yAxisField: string}} fields 
     * @returns reduced data.
     */ getXYDataWithFields(key, fields) {
        console.log(fields);
        /* this.getData(key) returns and object with fields like type: 'table', data: DataTable 
        Then, the DataTable object has keys type: 'table' and data: ....
        To access the data, use getData() because the actual data is a private field. */ const data = this.getData(key).data.getData();
        const indicies = {}; // indicies will copy the keys from fields and replace the values with the proper index in the data table.
        Object.entries(fields).forEach((entry)=>{
            if (entry[0] === "yAxisField") {
                indicies[entry[0].toString()] = [];
                entry[1].forEach((field)=>{
                    indicies[entry[0].toString()].push(data[0].indexOf(field));
                });
            } else if (entry[0] === "yAxisErrorField") {
                indicies[entry[0].toString()] = [];
                entry[1].forEach((field)=>{
                    indicies[entry[0].toString()].push(data[0].indexOf(field));
                });
            } else indicies[entry[0].toString()] = data[0].indexOf(entry[1]); // Get Indices of the headers
        });
        const chartData = {
            type: data.type,
            data: {
                x: [],
                y: [],
                e: []
            }
        }; // Build the arrays to plot.
        for(let i = 0; i < indicies.yAxisField.length; i++)chartData.data.y.push([]);
        for(let i = 0; i < indicies.yAxisErrorField.length; i++)chartData.data.e.push([]);
        for(let i = 1; i < data.length; i++){
            chartData.data.x.push(data[i][indicies.xAxisField]);
            for(let j = 0; j < indicies.yAxisField.length; j++)chartData.data.y[j].push(data[i][indicies.yAxisField[j]]);
            for(let j = 0; j < indicies.yAxisErrorField.length; j++)if (indicies.yAxisErrorField[j] >= 0) chartData.data.e[j].push(data[i][indicies.yAxisErrorField[j]]);
        }
        return chartData;
    }
    /**
     * Reduces a data object, getting only the data for specified columns. Users can select a subset of the possible columns
     * when displaying a table or downloading a csv file.
     * @param {number} key The key for the data hash table.
     * @param {Field Information Object} fields 
     * @returns reduced data.
     */ getTableDataWithFields(key, fields) {
        /* this.getData(key) returns and object with fields like type: 'table', data: DataTable 
        Then, the DataTable object has keys type: 'table' and data: ....
        To access the data, use getData() because the actual data is a private field. */ const data = this.getData(key).data.getData();
        const indicies = {}; // indicies will copy the keys from fields and replace the values with the proper index in the data table.
        const chartData = {
            type: "table",
            data: {}
        }; // Build the arrays to plot.
        fields.headers.forEach((field)=>{
            if (field.include) {
                indicies[field.label.toString()] = data[0].indexOf(field.label);
                chartData.data[field.label] = [];
            }
        });
        for(let i = 1; i < data.length; i++)Object.entries(indicies).forEach((entry)=>{
            chartData.data[entry[0]].push(data[i][entry[1]]);
        });
        return chartData;
    }
    /** --- PUBLIC ---
     * Converts a column of data using a user supplied function
     * @param {string} input the field to convert
     * @param {string} output the name of the output field to add to the data table
     * @param {function} fn the function to map to the column of data
     * @param {Number} key the key to the dataset
     * @param {Number} moduleKey the key to the module that called the conversion
     * @returns the data
     */ convertData(input, output, fn, key, moduleKey) {
        const data = JSON.parse(JSON.stringify(this.getData(key).data.getData())); // Deep Copy the data
        const conversionIndex = data[0].indexOf(input);
        if (conversionIndex > 0) {
            const preConvertedData = [];
            for(let i = 1; i < data.length; i++)preConvertedData.push(data[i][conversionIndex]);
            const convertedData = fn(preConvertedData);
            data.forEach((row, index)=>{
                const val = index === 0 ? output : convertedData[index - 1];
                row.push(val);
            });
            const table = new (0, _dataTableJs.DataTable)(data);
            const wrapper = {};
            wrapper.data = table;
            return wrapper;
        } else return undefined;
    }
    /** --- PUBLIC ---
     * Changes the data type of a field in the data table
     * @param {metadata object} metadata metadata
     * @param {string} oldType type to change from
     * @param {string} newType type to change to
     * @param {string} dataField name of the field
     * @param {Number} datakey key to the dataset
     * @param {function} callbackFN Callback to the filter card that changed the data type
     * @param {function} updateMetadataFN Callback that will update the metadata for this dataset
     */ changeDataType(metadata, oldType, newType, dataField, datakey, callbackFN, updateMetadataFN) {
        let row = null;
        metadata.columnHeaders.forEach((element)=>{
            if (element.name === dataField) row = element;
        });
        let success = false;
        try {
            success = this.#conversionTable.get(oldType.toLowerCase() + newType.toLowerCase())(row);
        } catch (e) {
            console.log(e);
        }
        if (success) {
            row.dataType = newType;
            this.getData(datakey).data.replaceMetadata(metadata);
        }
        callbackFN({
            success: success,
            row: row
        });
        updateMetadataFN(metadata, success);
    }
    /** --- PRIVATE ---
     * Tries to convert a field from number to date
     * @param {{
     * name (string): the name of the data field,
     * dataType (string): current data type,
     * dataFormat (string): the format of the data,
     * min (any): the min value from the metadata,
     * max (any): the max value from the metadata}} row 
     * @returns true if successful, false if not
     */ #convertFromNumberToDate(row) {
        console.log(row);
        if (!row) return false;
        const conversion = new Date(row.min);
        if (!conversion) return false;
        return true;
    }
    /** --- PRIVATE ---
     * Tries to convert a data field from date to a number
     * @param {{
     * name (string): the name of the data field,
     * dataType (string): current data type,
     * dataFormat (string): the format of the data,
     * min (any): the min value from the metadata,
     * max (any): the max value from the metadata}} row 
     * @returns true if successful, false if not
     */ #convertFromDateToNumber(row) {
        if (!row) return false;
        if (Number(row.min)) return true;
        return false;
    }
    /** --- PRIVATE ---
     * NOT YET IMPLEMENTED
     * @param {{
     * name (string): the name of the data field,
     * dataType (string): current data type,
     * dataFormat (string): the format of the data,
     * min (any): the min value from the metadata,
     * max (any): the max value from the metadata}} row 
     * @returns 
     */ #convertToCategory(row) {
        return false;
    }
}

},{"../communication/index.js":"eT70M","../errorHandling/errorHandlers.js":"dxjcu","./tables/dataTable.js":"cjpTk","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cjpTk":[function(require,module,exports) {
/*************************************************************
 * COPYRIGHT University of Hawaii - COMA Project / Lava Lab  *
 * Author: James Hutchison                                   *
 * Date: 5/5/2022                                            *
 *************************************************************/ // So Far, all data has been stored as this type of object. Data is encapsulated here and accessed through functions
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DataTable", ()=>DataTable);
class DataTable {
    #data;
    #metadata;
    #filteredData;
    constructor(data){
        this.#data = data;
        this.#metadata = {};
        this.#filteredData = null;
    }
    /** --- PUBLIC ---
     * gets the number of rows
     * @returns the number of rows in the table */ getRows = ()=>{
        return this.#data.length;
    };
    /** --- PUBLIC ---
     * Gets the number of columns in the table
     * @returns the number of columns in the table */ getColumns = ()=>{
        return this.#data[0].length;
    };
    /** --- PUBLIC ---
     * Gets the dataset. Applies a filter is necessary. If you want guaranteed unfiltered data, call
     * getCleanData()
     * @returns the data set with any applied filters
     */ getData = ()=>{
        return this.#filteredData ? this.#filteredData : this.#data;
    };
    /** --- PUBLIC ---
     * Gets data that is guaranteed to not be filtered
     * @returns array of unfiltered data */ getCleanData = ()=>{
        return this.#data;
    };
    /** --- PUBLIC ---
     * Stores the filtered dataset
     * @param {2D data table} data  */ setFilteredData = (data)=>{
        this.#filteredData = data;
    };
    /** --- PUBLIC ---
     * @returns the total number of elements in the data set */ getNumElements = ()=>{
        let sum = 0;
        for(let i = 0; i < this.#data.length; i++)for(let j = 0; j < this.#data[i].length; j++)sum++;
        return sum;
    };
    /** --- PUBLIC ---
     * Sets the metadata of the dataset when it does not come with metadata from the server.
     */ setMetadata() {
        this.#metadata = {};
        const minMaxArray = [];
        this.#setDataTypes(minMaxArray);
        this.#setMinMaxValues(minMaxArray);
        this.#metadata.columnHeaders = [];
        this.#buildMetadataObject(minMaxArray);
    }
    /** --- PRIVATE ---
     * Adds the metadata for each column in the data table.
     * @param {{min (any), max (any), type (string)}[]} minMaxArray array of min, max, type for each column in the set
     */ #buildMetadataObject(minMaxArray) {
        const headers = this.getHeaders();
        for(let i = 0; i < minMaxArray.length; i++)this.#metadata.columnHeaders.push({
            name: headers[i],
            dataType: minMaxArray[i].type,
            dataFormat: minMaxArray[i].type,
            min: minMaxArray[i].min,
            max: minMaxArray[i].max
        });
    }
    /** --- PRIVATE ---
     * This function will try to set the correct datatype
     * @param {{min (any), max (any), type (string)}[]} minMaxArray 
     */ #setDataTypes(minMaxArray) {
        for(let i = 0; i < this.getColumns(); i++){
            // It is a date if it has a dash or a slash and can be parsed as a date (this will fail when the data is in milliseconds format or some other date format)
            if (Date.parse(this.#data[1][i]) < 0 && (this.#data[1][i].includes("-") || this.#data[1][i].includes("/"))) minMaxArray.push({
                min: Infinity,
                max: -Infinity,
                type: "date"
            });
            else if (parseFloat(this.#data[1][i])) minMaxArray.push({
                min: Infinity,
                max: -Infinity,
                type: "number"
            });
            else if (this.#data[1][0].toString()) minMaxArray.push({
                min: Infinity,
                max: -Infinity,
                type: "string"
            });
            else minMaxArray.push({
                min: Infinity,
                max: Infinity,
                type: "unknown"
            });
        }
    }
    /** --- PRIVATE ---
     * Sets the min and max of each column
     * @param {{min (any), max (any), type (string)}[]} minMaxArray 
     */ #setMinMaxValues(minMaxArray) {
        for(let i = 0; i < this.#data.length; i++)for(let j = 0; j < this.#data[i].length; j++){
            let val = this.#data[i][j];
            if (minMaxArray[j].type === "date") {
                const date = new Date(val);
                val = date.getTime();
            }
            if (minMaxArray[j].type === "number") val = parseFloat(val);
            if (minMaxArray[j].min > val) minMaxArray[j].min = val;
            if (minMaxArray[j].max < val) minMaxArray[j].max = val;
        }
        minMaxArray.forEach((element)=>{
            if (element.type === "date") {
                element.min = this.convertDateToString(element.min);
                element.max = this.convertDateToString(element.max);
            }
        });
    }
    replaceMetadata(metadata) {
        this.#metadata = metadata;
    }
    convertDateToString(milliseconds) {
        const conversion = new Date(milliseconds);
        return `${conversion.getMonth() + 1}/${conversion.getDate()}/${conversion.getFullYear()}`;
    }
    updateTable = ()=>{
        this.setMetadata();
    };
    getHeaders = ()=>this.#data[0];
    getMetadata = ()=>this.#metadata;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6oYwa":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CsvReader", ()=>CsvReader);
var _indexJs = require("../../sharedVariables/index.js");
class CsvReader {
    constructor(){}
    readFile = (file, cb, moduleKey)=>{
        new Response(file).text().then((content)=>{
            const dataTable = [];
            if (content) {
                const rows = content.split(/\r\n|\n/);
                rows.forEach((r)=>{
                    dataTable.push(r.split(","));
                });
            }
            cb(dataTable, moduleKey);
        });
    };
    // gets only the columns
    getColumns = (moduleKey, cb)=>{
        var inspectorWrapper = document.getElementById(`Inspector-card-${moduleKey}`);
        var datasetTypeDD = inspectorWrapper.querySelector(".dataset-type-dropdown");
        var selectedType = datasetTypeDD.options[datasetTypeDD.selectedIndex].text;
        var file = inspectorWrapper.querySelector(`#upload_csv-${moduleKey}`).files[0];
        var moduleData = undefined;
        var columnHeaders = [];
        new Response(file).text().then((content)=>{
            if (content) {
                const rows = content.split(/\r\n|\n/);
                var columns = rows[0].split(",");
                columns.forEach((e)=>{
                    e = e.replaceAll('"', "");
                    if (!e.includes("id")) columnHeaders.push(e);
                });
                moduleData = {
                    remoteData: false,
                    fileId: `upload_csv-${moduleKey}`,
                    datasetType: selectedType,
                    columnHeaders: columnHeaders
                };
            } else console.log("failed to read file data columns.");
            cb(moduleKey, moduleData);
        }).catch((error)=>{
            console.error(error);
        });
    };
    // gets only the values of the local file
    getData = (moduleData, cb)=>{
        // only get the data for columnsToRender?
        // only get the data for chartData fields?
        var file = document.getElementById(moduleData.fileId).files[0];
        var reader = new FileReader();
        reader.onload = function(e) {
            var content = e.target.result;
            const rows = content.split("\n");
            //moduleData.tableData = rows;
            var columns = rows[0].split(",");
            columns = columns.map((e)=>{
                return e.replaceAll('"', "");
            });
            var data = [];
            rows.forEach((row, i)=>{
                if (i > 0) {
                    var rowObj = {};
                    var values = row.split(",");
                    values.forEach((val, j)=>{
                        val = val.replaceAll('"', "");
                        var key = columns[j];
                        rowObj[key] = val;
                    });
                    data.push(rowObj);
                }
            });
            moduleData.sourceData = data;
            //moduleData.status = "success";
            cb(moduleData);
        };
        reader.readAsText(file);
    };
    /** This reader will delete all column headers with empty string, and deletes all values of that column index
     * 
     * 
     * */ // moduleData to pass.. { datasetType, columnHeaders, sourceData }
    getFileData = (moduleKey, fileId, objectName, setModuleCB)=>{
        var fileInput = document.getElementById(fileId);
        var file = fileInput.files[0];
        var datasetTypeDD = fileInput.closest(".csv-inspector-wrapper").querySelector(".dataset-type-dropdown");
        var datasetType = datasetTypeDD.options[datasetTypeDD.selectedIndex].text;
        //var columnHeaders = [];
        new Response(file).text().then((content)=>{
            return this.#parseCSV(content);
        }).then((sourceData)=>{
            var moduleData = {
                remoteData: false,
                datasetType: datasetType,
                objectName: objectName,
                sourceData: sourceData
            };
            var toggleModuleColor = moduleData.sourceData ? true : false;
            setModuleCB(moduleKey, moduleData, toggleModuleColor);
        }).catch((error)=>{
            console.error(error);
        });
    };
    // read csv planet orbit data
    getObjectOrbits() {
        fetch("/get-object-orbits").then((response)=>response.text()).then((content)=>{
            // get object orbits data
            var objectOrbitsData = this.#parseCSV(content);
            localStorage.setItem("Object Orbits", JSON.stringify(objectOrbitsData));
            return objectOrbitsData;
        }).catch((error)=>{
            console.error("Error fetching CSV:", error);
        });
    }
    /** Parses CSV input to return as a json data with correct dataTypes for each column values
     *  @param {string} content of the csv input
     *  @return {JSON} sourceData of the input read
     * */ #parseCSV(content) {
        var sourceData = [];
        if (content) {
            var rows = content.split(/\r\n|\n/);
            // delete all empty rows
            rows = rows.filter((str)=>!/^\s*(,|\s)*\s*$/.test(str));
            var columns = rows[0].split(",");
            // remove empty columns
            var emptyCols = [];
            columns.forEach((str, i)=>{
                columns[i] = str.trim();
                if (str === "") {
                    columns.splice(i, 1);
                    emptyCols.push(i);
                }
            });
            rows.forEach((row, i)=>{
                if (i > 0) {
                    var rowObj = {};
                    var values = row.split(",");
                    // remove empty column values
                    values.forEach((val, j)=>{
                        if (emptyCols.includes(j)) values.splice(j, 1);
                    });
                    values.forEach((val, j)=>{
                        val = val.replaceAll('"', "");
                        val = val.trim();
                        if (columns[j]) {
                            var key = columns[j].replaceAll('"', "");
                            //-- Determine data type of each value here and store it in rowObj accordingly
                            const dataType = (0, _indexJs.getDataType)(val); // returns time, value, or category dataTypes
                            switch(dataType){
                                /*case 'time':
                                    val = Date(val); // convert to iso date
                                    break;*/ case "value":
                                    let digits = (0, _indexJs.getNumDigits)(key);
                                    val = Number(Number(val).toFixed(digits));
                                    break;
                            }
                            rowObj[key] = val;
                        }
                    });
                    sourceData.push(rowObj);
                }
            });
            console.log(sourceData);
        } else // TODO: defer to error screen
        console.log("failed to read file data columns.");
        return sourceData;
    }
}

},{"../../sharedVariables/index.js":"1uX14","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cmgQJ":[function(require,module,exports) {
/*************************************************************
 * COPYRIGHT University of Hawaii - COMA Project / Lava Lab  *
 * Author: James Hutchison                                   *
 * Date: 5/5/2022                                            *
 *************************************************************/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CsvWriter", ()=>CsvWriter);
class CsvWriter {
    constructor(){
        this.delimiter = ",";
    }
    /** --- PUBLIC ---
     * Creates a csv file using a comma as delimiter.  
     * @param {string} fileName the name of the file (not including extension)
     * @param {{
     *  key (string): value (1D array of data)
     * }} data the data to write to file
     */ createCsvFileFromData(fileName, data) {
        console.log(data);
        let csvString = "";
        let maxArrayLength = 0;
        csvString += Object.keys(data.data).join(",") + "\n";
        Object.values(data.data).forEach((array)=>{
            if (array.length > maxArrayLength) maxArrayLength = array.length;
        });
        for(let i = 0; i < maxArrayLength; i++){
            const tempArray = [];
            Object.values(data.data).forEach((array)=>{
                if (array[i]) tempArray.push(array[i]);
                else tempArray.push("undefined");
            });
            csvString += tempArray.join(",") + "\n";
        }
        const csvUrl = URL.createObjectURL(new Blob([
            csvString
        ], {
            type: "text/csv"
        }));
        const hiddenElement = document.createElement("a");
        hiddenElement.href = csvUrl;
        hiddenElement.target = "_blank";
        hiddenElement.download = `${fileName}.csv`;
        hiddenElement.click();
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1C1Mq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "OrbitBuilder", ()=>OrbitBuilder);
var _htmlFactoryJs = require("../../htmlGeneration/htmlFactory.js");
var _three = require("three");
var _orbitControlsJs = require("./OrbitControls.js");
var _css2DrendererJs = require("./CSS2DRenderer.js");
var _lilGuiModuleMinJs = require("./lil-gui.module.min.js");
var _indexJs = require("../../htmlGeneration/index.js");
var _indexJs1 = require("../../sharedVariables/index.js");
class OrbitBuilder {
    #dataTable;
    #HF;
    #LayersIndex;
    #axisLines;
    constructor(){
        this.#dataTable = new Map();
        this.#HF = new (0, _htmlFactoryJs.HTMLFactory)();
        this.#LayersIndex = 0;
    }
    plotData(data, div, width, height) {
        console.log(this.#LayersIndex);
        const object_datapoints = data.object_datapoints;
        const object_orbits = data.object_orbits;
        const planet_orbits = data.planet_orbits;
        return this.#createThree(object_datapoints, object_orbits, planet_orbits, div, width, height);
    }
    // Update scene with renderer
    //updatePlotData(renderer, camera, scene, objects) {
    updatePlotData(activeOrbit, data, div, width, height) {
        return this.#updateThree(activeOrbit, data, div, width, height);
    }
    /*plotSphere(x, y, z, color, scene) {
        const geometry = new THREE.SphereGeometry(0.01, 5, 5);
        const material = new THREE.MeshBasicMaterial({ color });
        const sphere = new THREE.Mesh(geometry, material);
        cube.position.x = x;
        cube.position.y = y;
        cube.position.z = z;
        scene.add(sphere);
    }*/ // Plot the path of the object
    // Needs a better line rendreere because we can't set the line width currently
    #plotWholePath(points, color, group) {
        const datapoints = points.map((point)=>{
            return new _three.Vector3(point.x, point.y, point.z);
        });
        const curve = new _three.CatmullRomCurve3(datapoints);
        const curvePoints = curve.getPoints(points.length);
        const geometry = new _three.BufferGeometry().setFromPoints(curvePoints);
        const material = new _three.LineBasicMaterial({
            color,
            linewidth: 1
        });
        const curveLine = new _three.Line(geometry, material);
        curveLine.layers.set(this.#LayersIndex);
        group.add(curveLine);
        return curveLine;
    //line.curve = curve;
    //scene.add(curveObject);
    /*const group = new THREE.Group();
        scene.add(group);
        group.add(line);*/ // create label
    /*const label = this.#createLabel(name, curve);
        group.add(label);*/ }
    // Plot the data points of the object
    #plotDataPoints(points, color, group) {
        // Add small spheres for data points
        const sphereGeometry = new _three.SphereGeometry(0.03, 8, 8); // Adjust the radius and segments as needed
        const sphereMaterial = new _three.MeshStandardMaterial({
            color
        });
        for (const point of points){
            const sphereMesh = new _three.Mesh(sphereGeometry, sphereMaterial);
            sphereMesh.position.set(point.x, point.y, point.z);
            group.add(sphereMesh);
            sphereMesh.layers.set(this.#LayersIndex);
        }
        //group.layers.add(this.#LayerIndex);
        return group;
    }
    /*#createLegend(legendDiv, group) {
        console.log(legendDiv);

        // create CSS2DObject
        const label = new CSS2DObject(legendDiv);
        label.position.set(0, 1, 0);

        console.log(label);
        group.add(label);
    }*/ /*#addLegend(name, color, legendDiv) {
        // list? use span and set backgroundColor to create color lines?

        const legendItem = this.#HF.createNewDiv('', '', ['orbit-legend-item'], [], [], '');

        // get planet code here
        const planetCodeObject = PlanetCodes.filter(p => p.name === name);
        const planetCode = planetCodeObject.length > 0 ? planetCodeObject[0].code : name; 
        const itemName = this.#HF.createNewSpan('', '', ['orbit-legend-item-name'], [{ style: 'color', value: 'white' }], planetCode + ': ');
        const itemColor = this.#HF.createNewSpan('', '', ['orbit-legend-item-color'], [{style: 'font-size', value: '2px'},  { style: 'background-color', value: color },  { style: 'vertical-align', value: 'middle' }], '---------------------------------');
        legendItem.appendChild(itemName);
        legendItem.appendChild(itemColor);
        legendDiv.appendChild(legendItem);
    }*/ // make the light a child of a camera
    // offset the light
    // attach light to camera (orbit control)
    // offset the light from the camera
    // set params to 0, 0, 0
    // use point light?
    // Search for a good scrollable image viewer
    #createScene() {
        const scene = new _three.Scene();
        const ambientLight = new _three.AmbientLight(0x404040);
        const light = new _three.DirectionalLight(0xffffff, 3);
        light.position.set(100, 100, 100);
        scene.add(ambientLight);
        scene.add(light);
        const axesHelper = new _three.AxesHelper(10);
        axesHelper.rotation.x = Math.PI / 2; // Rotate around the X-axis
        axesHelper.layers.set(0);
        this.#LayersIndex++;
        //axesHelper.setColors(0xffffff, 0xff4da6, 0x4de7ff);
        scene.add(axesHelper);
        //this.#createAxisLines(scene);
        return scene;
    }
    /** Creates Orbit plot elements
   *
   *
   * */ #createThree(object_datapoints, object_orbits, planet_orbits, div, width, height) {
        // Create the scene, camera and renderer
        const scene = this.#createScene();
        const group = new _three.Group();
        scene.add(group);
        console.log(div.width);
        console.log(width);
        const camera = new _three.OrthographicCamera(width / -2, width / 2, height / 2, height / -2, 0.1, 10000000000); // near & far clipping plane
        scene.add(camera);
        camera.position.set(0, 3, 1);
        camera.up.set(0, 0, 1);
        camera.lookAt(0, 0, 0);
        camera.layers.enableAll();
        /*const camera = new THREE.PerspectiveCamera(
            75, // fov
            width / height,
            0.1, // near clipping plane
            1000 // far clipping plane
        );
        camera.position.set(0, 5, 1);
        camera.up.set(0, 0, 1);
        camera.lookAt(0, 0, 0);
        camera.layers.enableAll();*/ // create legendDOM
        /*const legendDiv = this.#HF.createNewDiv('', '', ['orbit-legend'],
            [{ style: 'position', value: 'absolute' }, { style: 'z-index', value: '2' }, { style: 'color', value: 'white' }, { style: 'top', value: '50px' }, { style: 'left', value: '50px' }, { style: 'margin', value: '2% 0' }], [], '');
        div.appendChild(legendDiv);
*/ let objectLayers = {
        };
        let objectGui = this.#initGui("Toggle Object", div, "toggle-object");
        let orbitLayers = {
        };
        let orbitGui = this.#initGui("Toggle Planet", div, "toggle-planet");
        //------------------- Plot the object datapoints provided in the objects array
        object_datapoints.forEach((el)=>{
            this.#plotDataPoints(el.vectors, el.color, group);
        //this.#addGuiElement(this.#LayersIndex, el.name, el.color, objectLayers, objectGui, camera);
        });
        console.log(object_datapoints);
        console.log(object_orbits);
        object_orbits.forEach((el)=>{
            this.#plotWholePath(el.vectors, el.color, group);
            this.#addGuiElement(this.#LayersIndex, el.name, el.color, objectLayers, objectGui, camera);
        // add legend item here
        //this.#addLegend(el.name, el.color, legendDiv);
        });
        //------------------- Plot the planet orbits provided in the orbits array
        planet_orbits.forEach((el)=>{
            this.#plotWholePath(el.vectors, el.color, group);
            this.#addGuiElement(this.#LayersIndex, el.name, el.color, orbitLayers, orbitGui, camera);
        // add legend item here
        //this.#addLegend(el.name, el.color, legendDiv);
        });
        /*orbitGui.add(orbitLayers, 'Enable All');
        orbitGui.add(orbitLayers, 'Disable All');*/ // create legend object here, and add it to the group
        //this.#createLegend(legendDiv, group);
        const renderer = new _three.WebGLRenderer();
        renderer.setSize(width, height);
        // Add the renderer to the div
        div.appendChild(renderer.domElement);
        /*let labelRenderer = new CSS2DRenderer();
        labelRenderer.setSize(width, height);
        labelRenderer.domElement.style.position = 'absolute';
        labelRenderer.domElement.style.zIndex = '1';
        labelRenderer.domElement.style.top = '0px';
        div.appendChild(labelRenderer.domElement);*/ // Add orbit controls
        const controls = new (0, _orbitControlsJs.OrbitControls)(camera, renderer.domElement);
        controls.minDistance = 0.1;
        function animate() {
            requestAnimationFrame(animate);
            camera.up.set(0, 0, 1);
            controls.update();
            camera.up.set(0, 0, 1);
            // Check the slider value
            // Remove old spheres
            // Add new spheres depending on the slider value
            // Do every frame,
            // Has the slider value changed?
            renderer.render(scene, camera);
        //labelRenderer.render(scene, camera);
        }
        animate();
        return {
            camera: camera,
            renderer: renderer,
            controls: controls
        };
    }
    #initGui(title, div, className) {
        let gui = new (0, _lilGuiModuleMinJs.GUI)();
        div.appendChild(gui.domElement);
        gui.domElement.classList.add(className);
        gui.title(title);
        /*gui.add(layers, 'Enable All');
        gui.add(layers, 'Disable All');*/ gui.open();
        return gui;
    }
    #addGuiElement(index, name, color, layers, gui, camera) {
        layers[name] = function() {
            let domList = gui.domElement.querySelector(".children").querySelectorAll(".name");
            // Loop through the div elements to find the one with text content 'earth'
            let dom = null;
            for(var i = 0; i < domList.length; i++)if (domList[i].textContent.includes(name)) {
                dom = domList[i];
                break; // Exit the loop once you've found the desired element
            }
            //console.log(dom)
            // Now, 'targetDiv' contains the specific div element with text content 'earth'
            if (dom) {
                let computedStyle = getComputedStyle(dom);
                let textColor = computedStyle.getPropertyValue("color");
                let backgroundColor = computedStyle.getPropertyValue("background-color");
                let id1 = dom.getAttribute("id");
                const match = id1.match(/\d+$/);
                // Check if a match was found
                if (match) {
                    // The match[0] contains the matched number as a string
                    // Use parseInt() to convert it to a number if needed
                    //const index = parseInt(match[0], 10);
                    //console.log(index);
                    dom.style.color = textColor === "rgb(255, 255, 255)" ? "black" : "white";
                    dom.style.backgroundColor = backgroundColor === "rgba(0, 0, 0, 0)" ? color : "unset";
                    camera.layers.toggle(index);
                }
            } else // The element was not found
            console.log("Element not found");
        };
        gui.add(layers, name);
        // get gui domElement after adding an item
        let domList = gui.domElement.querySelector(".children").querySelectorAll(".name");
        // Loop through the div elements to find the one with text content 'earth'
        let dom = null;
        for(var i = 0; i < domList.length; i++)if (domList[i].textContent.includes(name)) {
            dom = domList[i];
            break; // Exit the loop once you've found the desired element
        }
        dom.style.color = "black";
        dom.style.backgroundColor = color;
        this.#LayersIndex++;
    }
    #updateThree(activeOrbit, data, div) {
        console.log(activeOrbit);
        const scene = this.#createScene();
        //const scene = activeOrbit.scene;
        const camera = activeOrbit.camera;
        //camera.aspect = width / height;
        camera.updateProjectionMatrix();
        const objects = data.objects;
        const orbits = data.orbits;
        objects.forEach((el)=>{
            const points = el.vectors;
            //console.log(points);
            this.#plotDataPoints(points, el.color, scene);
        });
        orbits.forEach((el)=>{
            const points = el.vectors;
            //console.log(points);
            this.#plotWholePath(points, el.color, scene);
        });
        //camera.position.z = 1;
        // get renderer
        var renderer = activeOrbit.renderer;
        //renderer.setSize(width, height);
        //const labelRenderer = activeOrbit.labelRenderer;
        const controls = activeOrbit.controls;
        function animate() {
            requestAnimationFrame(animate);
            //console.log(`Camera Position: x=${camera.position.x}, y=${camera.position.y}, z=${camera.position.z}`);
            camera.up.set(0, 0, 1);
            controls.update();
            camera.up.set(0, 0, 1);
            // Check the slider value
            // Remove old spheres
            // Add new spheres depending on the slider value
            // Do every frame,
            // Has the slider value changed?
            renderer.render(scene, camera);
        //labelRenderer.render(scene, camera);
        }
        animate();
        return {
            camera: camera,
            renderer: renderer,
            controls: controls
        };
    }
    #createAxisLines(scene) {
        // Define the length of the axis lines
        const axisLength = 100;
        // X-axis
        const xAxisGeometry = new _three.BufferGeometry().setFromPoints([
            new _three.Vector3(-axisLength, 0, 0),
            new _three.Vector3(axisLength, 0, 0)
        ]);
        const xAxisMaterial = new _three.LineBasicMaterial({
            color: 0xfcffc7
        });
        const xAxis = new _three.Line(xAxisGeometry, xAxisMaterial);
        scene.add(xAxis);
        // Y-axis
        const yAxisGeometry = new _three.BufferGeometry().setFromPoints([
            new _three.Vector3(0, -axisLength, 0),
            new _three.Vector3(0, axisLength, 0)
        ]);
        const yAxisMaterial = new _three.LineBasicMaterial({
            color: 0xfcffc7
        });
        const yAxis = new _three.Line(yAxisGeometry, yAxisMaterial);
        scene.add(yAxis);
        // Z-axis
        const zAxisGeometry = new _three.BufferGeometry().setFromPoints([
            new _three.Vector3(0, 0, -axisLength),
            new _three.Vector3(0, 0, axisLength)
        ]);
        const zAxisMaterial = new _three.LineBasicMaterial({
            color: 0xfcffc7
        });
        const zAxis = new _three.Line(zAxisGeometry, zAxisMaterial);
        scene.add(zAxis);
    }
    #getGuiIndex(guiId) {
        const match = id.match(/\d+$/);
        // Check if a match was found
        if (match) {
            // The match[0] contains the matched number as a string
            // Use parseInt() to convert it to a number if needed
            const numberAtEnd = parseInt(match[0], 10);
            return numberAtEnd;
        } else // No number found at the end of the string
        return null;
    }
    resizeOrbitChart(activeOrbit, width, height) {
        var orbitObject = activeOrbit.orbitObject;
        var renderer = orbitObject.renderer;
        var camera = orbitObject.camera;
        renderer.setSize(width, height);
        camera.aspect = width / height;
        camera.updateProjectionMatrix();
    }
}

},{"../../htmlGeneration/htmlFactory.js":"9lYdL","three":"ktPTu","./OrbitControls.js":"fPULy","./CSS2DRenderer.js":"84P8x","./lil-gui.module.min.js":"bJ8ZI","../../htmlGeneration/index.js":"f3jdF","../../sharedVariables/index.js":"1uX14","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ktPTu":[function(require,module,exports) {
/**
 * @license
 * Copyright 2010-2023 Three.js Authors
 * SPDX-License-Identifier: MIT
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ACESFilmicToneMapping", ()=>ACESFilmicToneMapping);
parcelHelpers.export(exports, "AddEquation", ()=>AddEquation);
parcelHelpers.export(exports, "AddOperation", ()=>AddOperation);
parcelHelpers.export(exports, "AdditiveAnimationBlendMode", ()=>AdditiveAnimationBlendMode);
parcelHelpers.export(exports, "AdditiveBlending", ()=>AdditiveBlending);
parcelHelpers.export(exports, "AlphaFormat", ()=>AlphaFormat);
parcelHelpers.export(exports, "AlwaysCompare", ()=>AlwaysCompare);
parcelHelpers.export(exports, "AlwaysDepth", ()=>AlwaysDepth);
parcelHelpers.export(exports, "AlwaysStencilFunc", ()=>AlwaysStencilFunc);
parcelHelpers.export(exports, "AmbientLight", ()=>AmbientLight);
parcelHelpers.export(exports, "AmbientLightProbe", ()=>AmbientLightProbe);
parcelHelpers.export(exports, "AnimationAction", ()=>AnimationAction);
parcelHelpers.export(exports, "AnimationClip", ()=>AnimationClip);
parcelHelpers.export(exports, "AnimationLoader", ()=>AnimationLoader);
parcelHelpers.export(exports, "AnimationMixer", ()=>AnimationMixer);
parcelHelpers.export(exports, "AnimationObjectGroup", ()=>AnimationObjectGroup);
parcelHelpers.export(exports, "AnimationUtils", ()=>AnimationUtils);
parcelHelpers.export(exports, "ArcCurve", ()=>ArcCurve);
parcelHelpers.export(exports, "ArrayCamera", ()=>ArrayCamera);
parcelHelpers.export(exports, "ArrowHelper", ()=>ArrowHelper);
parcelHelpers.export(exports, "Audio", ()=>Audio);
parcelHelpers.export(exports, "AudioAnalyser", ()=>AudioAnalyser);
parcelHelpers.export(exports, "AudioContext", ()=>AudioContext);
parcelHelpers.export(exports, "AudioListener", ()=>AudioListener);
parcelHelpers.export(exports, "AudioLoader", ()=>AudioLoader);
parcelHelpers.export(exports, "AxesHelper", ()=>AxesHelper);
parcelHelpers.export(exports, "BackSide", ()=>BackSide);
parcelHelpers.export(exports, "BasicDepthPacking", ()=>BasicDepthPacking);
parcelHelpers.export(exports, "BasicShadowMap", ()=>BasicShadowMap);
parcelHelpers.export(exports, "Bone", ()=>Bone);
parcelHelpers.export(exports, "BooleanKeyframeTrack", ()=>BooleanKeyframeTrack);
parcelHelpers.export(exports, "Box2", ()=>Box2);
parcelHelpers.export(exports, "Box3", ()=>Box3);
parcelHelpers.export(exports, "Box3Helper", ()=>Box3Helper);
parcelHelpers.export(exports, "BoxGeometry", ()=>BoxGeometry);
parcelHelpers.export(exports, "BoxHelper", ()=>BoxHelper);
parcelHelpers.export(exports, "BufferAttribute", ()=>BufferAttribute);
parcelHelpers.export(exports, "BufferGeometry", ()=>BufferGeometry);
parcelHelpers.export(exports, "BufferGeometryLoader", ()=>BufferGeometryLoader);
parcelHelpers.export(exports, "ByteType", ()=>ByteType);
parcelHelpers.export(exports, "Cache", ()=>Cache);
parcelHelpers.export(exports, "Camera", ()=>Camera);
parcelHelpers.export(exports, "CameraHelper", ()=>CameraHelper);
parcelHelpers.export(exports, "CanvasTexture", ()=>CanvasTexture);
parcelHelpers.export(exports, "CapsuleGeometry", ()=>CapsuleGeometry);
parcelHelpers.export(exports, "CatmullRomCurve3", ()=>CatmullRomCurve3);
parcelHelpers.export(exports, "CineonToneMapping", ()=>CineonToneMapping);
parcelHelpers.export(exports, "CircleGeometry", ()=>CircleGeometry);
parcelHelpers.export(exports, "ClampToEdgeWrapping", ()=>ClampToEdgeWrapping);
parcelHelpers.export(exports, "Clock", ()=>Clock);
parcelHelpers.export(exports, "Color", ()=>Color);
parcelHelpers.export(exports, "ColorKeyframeTrack", ()=>ColorKeyframeTrack);
parcelHelpers.export(exports, "ColorManagement", ()=>ColorManagement);
parcelHelpers.export(exports, "CompressedArrayTexture", ()=>CompressedArrayTexture);
parcelHelpers.export(exports, "CompressedCubeTexture", ()=>CompressedCubeTexture);
parcelHelpers.export(exports, "CompressedTexture", ()=>CompressedTexture);
parcelHelpers.export(exports, "CompressedTextureLoader", ()=>CompressedTextureLoader);
parcelHelpers.export(exports, "ConeGeometry", ()=>ConeGeometry);
parcelHelpers.export(exports, "CubeCamera", ()=>CubeCamera);
parcelHelpers.export(exports, "CubeReflectionMapping", ()=>CubeReflectionMapping);
parcelHelpers.export(exports, "CubeRefractionMapping", ()=>CubeRefractionMapping);
parcelHelpers.export(exports, "CubeTexture", ()=>CubeTexture);
parcelHelpers.export(exports, "CubeTextureLoader", ()=>CubeTextureLoader);
parcelHelpers.export(exports, "CubeUVReflectionMapping", ()=>CubeUVReflectionMapping);
parcelHelpers.export(exports, "CubicBezierCurve", ()=>CubicBezierCurve);
parcelHelpers.export(exports, "CubicBezierCurve3", ()=>CubicBezierCurve3);
parcelHelpers.export(exports, "CubicInterpolant", ()=>CubicInterpolant);
parcelHelpers.export(exports, "CullFaceBack", ()=>CullFaceBack);
parcelHelpers.export(exports, "CullFaceFront", ()=>CullFaceFront);
parcelHelpers.export(exports, "CullFaceFrontBack", ()=>CullFaceFrontBack);
parcelHelpers.export(exports, "CullFaceNone", ()=>CullFaceNone);
parcelHelpers.export(exports, "Curve", ()=>Curve);
parcelHelpers.export(exports, "CurvePath", ()=>CurvePath);
parcelHelpers.export(exports, "CustomBlending", ()=>CustomBlending);
parcelHelpers.export(exports, "CustomToneMapping", ()=>CustomToneMapping);
parcelHelpers.export(exports, "CylinderGeometry", ()=>CylinderGeometry);
parcelHelpers.export(exports, "Cylindrical", ()=>Cylindrical);
parcelHelpers.export(exports, "Data3DTexture", ()=>Data3DTexture);
parcelHelpers.export(exports, "DataArrayTexture", ()=>DataArrayTexture);
parcelHelpers.export(exports, "DataTexture", ()=>DataTexture);
parcelHelpers.export(exports, "DataTextureLoader", ()=>DataTextureLoader);
parcelHelpers.export(exports, "DataUtils", ()=>DataUtils);
parcelHelpers.export(exports, "DecrementStencilOp", ()=>DecrementStencilOp);
parcelHelpers.export(exports, "DecrementWrapStencilOp", ()=>DecrementWrapStencilOp);
parcelHelpers.export(exports, "DefaultLoadingManager", ()=>DefaultLoadingManager);
parcelHelpers.export(exports, "DepthFormat", ()=>DepthFormat);
parcelHelpers.export(exports, "DepthStencilFormat", ()=>DepthStencilFormat);
parcelHelpers.export(exports, "DepthTexture", ()=>DepthTexture);
parcelHelpers.export(exports, "DirectionalLight", ()=>DirectionalLight);
parcelHelpers.export(exports, "DirectionalLightHelper", ()=>DirectionalLightHelper);
parcelHelpers.export(exports, "DiscreteInterpolant", ()=>DiscreteInterpolant);
parcelHelpers.export(exports, "DisplayP3ColorSpace", ()=>DisplayP3ColorSpace);
parcelHelpers.export(exports, "DodecahedronGeometry", ()=>DodecahedronGeometry);
parcelHelpers.export(exports, "DoubleSide", ()=>DoubleSide);
parcelHelpers.export(exports, "DstAlphaFactor", ()=>DstAlphaFactor);
parcelHelpers.export(exports, "DstColorFactor", ()=>DstColorFactor);
parcelHelpers.export(exports, "DynamicCopyUsage", ()=>DynamicCopyUsage);
parcelHelpers.export(exports, "DynamicDrawUsage", ()=>DynamicDrawUsage);
parcelHelpers.export(exports, "DynamicReadUsage", ()=>DynamicReadUsage);
parcelHelpers.export(exports, "EdgesGeometry", ()=>EdgesGeometry);
parcelHelpers.export(exports, "EllipseCurve", ()=>EllipseCurve);
parcelHelpers.export(exports, "EqualCompare", ()=>EqualCompare);
parcelHelpers.export(exports, "EqualDepth", ()=>EqualDepth);
parcelHelpers.export(exports, "EqualStencilFunc", ()=>EqualStencilFunc);
parcelHelpers.export(exports, "EquirectangularReflectionMapping", ()=>EquirectangularReflectionMapping);
parcelHelpers.export(exports, "EquirectangularRefractionMapping", ()=>EquirectangularRefractionMapping);
parcelHelpers.export(exports, "Euler", ()=>Euler);
parcelHelpers.export(exports, "EventDispatcher", ()=>EventDispatcher);
parcelHelpers.export(exports, "ExtrudeGeometry", ()=>ExtrudeGeometry);
parcelHelpers.export(exports, "FileLoader", ()=>FileLoader);
parcelHelpers.export(exports, "Float16BufferAttribute", ()=>Float16BufferAttribute);
parcelHelpers.export(exports, "Float32BufferAttribute", ()=>Float32BufferAttribute);
parcelHelpers.export(exports, "Float64BufferAttribute", ()=>Float64BufferAttribute);
parcelHelpers.export(exports, "FloatType", ()=>FloatType);
parcelHelpers.export(exports, "Fog", ()=>Fog);
parcelHelpers.export(exports, "FogExp2", ()=>FogExp2);
parcelHelpers.export(exports, "FramebufferTexture", ()=>FramebufferTexture);
parcelHelpers.export(exports, "FrontSide", ()=>FrontSide);
parcelHelpers.export(exports, "Frustum", ()=>Frustum);
parcelHelpers.export(exports, "GLBufferAttribute", ()=>GLBufferAttribute);
parcelHelpers.export(exports, "GLSL1", ()=>GLSL1);
parcelHelpers.export(exports, "GLSL3", ()=>GLSL3);
parcelHelpers.export(exports, "GreaterCompare", ()=>GreaterCompare);
parcelHelpers.export(exports, "GreaterDepth", ()=>GreaterDepth);
parcelHelpers.export(exports, "GreaterEqualCompare", ()=>GreaterEqualCompare);
parcelHelpers.export(exports, "GreaterEqualDepth", ()=>GreaterEqualDepth);
parcelHelpers.export(exports, "GreaterEqualStencilFunc", ()=>GreaterEqualStencilFunc);
parcelHelpers.export(exports, "GreaterStencilFunc", ()=>GreaterStencilFunc);
parcelHelpers.export(exports, "GridHelper", ()=>GridHelper);
parcelHelpers.export(exports, "Group", ()=>Group);
parcelHelpers.export(exports, "HalfFloatType", ()=>HalfFloatType);
parcelHelpers.export(exports, "HemisphereLight", ()=>HemisphereLight);
parcelHelpers.export(exports, "HemisphereLightHelper", ()=>HemisphereLightHelper);
parcelHelpers.export(exports, "HemisphereLightProbe", ()=>HemisphereLightProbe);
parcelHelpers.export(exports, "IcosahedronGeometry", ()=>IcosahedronGeometry);
parcelHelpers.export(exports, "ImageBitmapLoader", ()=>ImageBitmapLoader);
parcelHelpers.export(exports, "ImageLoader", ()=>ImageLoader);
parcelHelpers.export(exports, "ImageUtils", ()=>ImageUtils);
parcelHelpers.export(exports, "IncrementStencilOp", ()=>IncrementStencilOp);
parcelHelpers.export(exports, "IncrementWrapStencilOp", ()=>IncrementWrapStencilOp);
parcelHelpers.export(exports, "InstancedBufferAttribute", ()=>InstancedBufferAttribute);
parcelHelpers.export(exports, "InstancedBufferGeometry", ()=>InstancedBufferGeometry);
parcelHelpers.export(exports, "InstancedInterleavedBuffer", ()=>InstancedInterleavedBuffer);
parcelHelpers.export(exports, "InstancedMesh", ()=>InstancedMesh);
parcelHelpers.export(exports, "Int16BufferAttribute", ()=>Int16BufferAttribute);
parcelHelpers.export(exports, "Int32BufferAttribute", ()=>Int32BufferAttribute);
parcelHelpers.export(exports, "Int8BufferAttribute", ()=>Int8BufferAttribute);
parcelHelpers.export(exports, "IntType", ()=>IntType);
parcelHelpers.export(exports, "InterleavedBuffer", ()=>InterleavedBuffer);
parcelHelpers.export(exports, "InterleavedBufferAttribute", ()=>InterleavedBufferAttribute);
parcelHelpers.export(exports, "Interpolant", ()=>Interpolant);
parcelHelpers.export(exports, "InterpolateDiscrete", ()=>InterpolateDiscrete);
parcelHelpers.export(exports, "InterpolateLinear", ()=>InterpolateLinear);
parcelHelpers.export(exports, "InterpolateSmooth", ()=>InterpolateSmooth);
parcelHelpers.export(exports, "InvertStencilOp", ()=>InvertStencilOp);
parcelHelpers.export(exports, "KeepStencilOp", ()=>KeepStencilOp);
parcelHelpers.export(exports, "KeyframeTrack", ()=>KeyframeTrack);
parcelHelpers.export(exports, "LOD", ()=>LOD);
parcelHelpers.export(exports, "LatheGeometry", ()=>LatheGeometry);
parcelHelpers.export(exports, "Layers", ()=>Layers);
parcelHelpers.export(exports, "LessCompare", ()=>LessCompare);
parcelHelpers.export(exports, "LessDepth", ()=>LessDepth);
parcelHelpers.export(exports, "LessEqualCompare", ()=>LessEqualCompare);
parcelHelpers.export(exports, "LessEqualDepth", ()=>LessEqualDepth);
parcelHelpers.export(exports, "LessEqualStencilFunc", ()=>LessEqualStencilFunc);
parcelHelpers.export(exports, "LessStencilFunc", ()=>LessStencilFunc);
parcelHelpers.export(exports, "Light", ()=>Light);
parcelHelpers.export(exports, "LightProbe", ()=>LightProbe);
parcelHelpers.export(exports, "Line", ()=>Line);
parcelHelpers.export(exports, "Line3", ()=>Line3);
parcelHelpers.export(exports, "LineBasicMaterial", ()=>LineBasicMaterial);
parcelHelpers.export(exports, "LineCurve", ()=>LineCurve);
parcelHelpers.export(exports, "LineCurve3", ()=>LineCurve3);
parcelHelpers.export(exports, "LineDashedMaterial", ()=>LineDashedMaterial);
parcelHelpers.export(exports, "LineLoop", ()=>LineLoop);
parcelHelpers.export(exports, "LineSegments", ()=>LineSegments);
parcelHelpers.export(exports, "LinearDisplayP3ColorSpace", ()=>LinearDisplayP3ColorSpace);
parcelHelpers.export(exports, "LinearEncoding", ()=>LinearEncoding);
parcelHelpers.export(exports, "LinearFilter", ()=>LinearFilter);
parcelHelpers.export(exports, "LinearInterpolant", ()=>LinearInterpolant);
parcelHelpers.export(exports, "LinearMipMapLinearFilter", ()=>LinearMipMapLinearFilter);
parcelHelpers.export(exports, "LinearMipMapNearestFilter", ()=>LinearMipMapNearestFilter);
parcelHelpers.export(exports, "LinearMipmapLinearFilter", ()=>LinearMipmapLinearFilter);
parcelHelpers.export(exports, "LinearMipmapNearestFilter", ()=>LinearMipmapNearestFilter);
parcelHelpers.export(exports, "LinearSRGBColorSpace", ()=>LinearSRGBColorSpace);
parcelHelpers.export(exports, "LinearToneMapping", ()=>LinearToneMapping);
parcelHelpers.export(exports, "Loader", ()=>Loader);
parcelHelpers.export(exports, "LoaderUtils", ()=>LoaderUtils);
parcelHelpers.export(exports, "LoadingManager", ()=>LoadingManager);
parcelHelpers.export(exports, "LoopOnce", ()=>LoopOnce);
parcelHelpers.export(exports, "LoopPingPong", ()=>LoopPingPong);
parcelHelpers.export(exports, "LoopRepeat", ()=>LoopRepeat);
parcelHelpers.export(exports, "LuminanceAlphaFormat", ()=>LuminanceAlphaFormat);
parcelHelpers.export(exports, "LuminanceFormat", ()=>LuminanceFormat);
parcelHelpers.export(exports, "MOUSE", ()=>MOUSE);
parcelHelpers.export(exports, "Material", ()=>Material);
parcelHelpers.export(exports, "MaterialLoader", ()=>MaterialLoader);
parcelHelpers.export(exports, "MathUtils", ()=>MathUtils);
parcelHelpers.export(exports, "Matrix3", ()=>Matrix3);
parcelHelpers.export(exports, "Matrix4", ()=>Matrix4);
parcelHelpers.export(exports, "MaxEquation", ()=>MaxEquation);
parcelHelpers.export(exports, "Mesh", ()=>Mesh);
parcelHelpers.export(exports, "MeshBasicMaterial", ()=>MeshBasicMaterial);
parcelHelpers.export(exports, "MeshDepthMaterial", ()=>MeshDepthMaterial);
parcelHelpers.export(exports, "MeshDistanceMaterial", ()=>MeshDistanceMaterial);
parcelHelpers.export(exports, "MeshLambertMaterial", ()=>MeshLambertMaterial);
parcelHelpers.export(exports, "MeshMatcapMaterial", ()=>MeshMatcapMaterial);
parcelHelpers.export(exports, "MeshNormalMaterial", ()=>MeshNormalMaterial);
parcelHelpers.export(exports, "MeshPhongMaterial", ()=>MeshPhongMaterial);
parcelHelpers.export(exports, "MeshPhysicalMaterial", ()=>MeshPhysicalMaterial);
parcelHelpers.export(exports, "MeshStandardMaterial", ()=>MeshStandardMaterial);
parcelHelpers.export(exports, "MeshToonMaterial", ()=>MeshToonMaterial);
parcelHelpers.export(exports, "MinEquation", ()=>MinEquation);
parcelHelpers.export(exports, "MirroredRepeatWrapping", ()=>MirroredRepeatWrapping);
parcelHelpers.export(exports, "MixOperation", ()=>MixOperation);
parcelHelpers.export(exports, "MultiplyBlending", ()=>MultiplyBlending);
parcelHelpers.export(exports, "MultiplyOperation", ()=>MultiplyOperation);
parcelHelpers.export(exports, "NearestFilter", ()=>NearestFilter);
parcelHelpers.export(exports, "NearestMipMapLinearFilter", ()=>NearestMipMapLinearFilter);
parcelHelpers.export(exports, "NearestMipMapNearestFilter", ()=>NearestMipMapNearestFilter);
parcelHelpers.export(exports, "NearestMipmapLinearFilter", ()=>NearestMipmapLinearFilter);
parcelHelpers.export(exports, "NearestMipmapNearestFilter", ()=>NearestMipmapNearestFilter);
parcelHelpers.export(exports, "NeverCompare", ()=>NeverCompare);
parcelHelpers.export(exports, "NeverDepth", ()=>NeverDepth);
parcelHelpers.export(exports, "NeverStencilFunc", ()=>NeverStencilFunc);
parcelHelpers.export(exports, "NoBlending", ()=>NoBlending);
parcelHelpers.export(exports, "NoColorSpace", ()=>NoColorSpace);
parcelHelpers.export(exports, "NoToneMapping", ()=>NoToneMapping);
parcelHelpers.export(exports, "NormalAnimationBlendMode", ()=>NormalAnimationBlendMode);
parcelHelpers.export(exports, "NormalBlending", ()=>NormalBlending);
parcelHelpers.export(exports, "NotEqualCompare", ()=>NotEqualCompare);
parcelHelpers.export(exports, "NotEqualDepth", ()=>NotEqualDepth);
parcelHelpers.export(exports, "NotEqualStencilFunc", ()=>NotEqualStencilFunc);
parcelHelpers.export(exports, "NumberKeyframeTrack", ()=>NumberKeyframeTrack);
parcelHelpers.export(exports, "Object3D", ()=>Object3D);
parcelHelpers.export(exports, "ObjectLoader", ()=>ObjectLoader);
parcelHelpers.export(exports, "ObjectSpaceNormalMap", ()=>ObjectSpaceNormalMap);
parcelHelpers.export(exports, "OctahedronGeometry", ()=>OctahedronGeometry);
parcelHelpers.export(exports, "OneFactor", ()=>OneFactor);
parcelHelpers.export(exports, "OneMinusDstAlphaFactor", ()=>OneMinusDstAlphaFactor);
parcelHelpers.export(exports, "OneMinusDstColorFactor", ()=>OneMinusDstColorFactor);
parcelHelpers.export(exports, "OneMinusSrcAlphaFactor", ()=>OneMinusSrcAlphaFactor);
parcelHelpers.export(exports, "OneMinusSrcColorFactor", ()=>OneMinusSrcColorFactor);
parcelHelpers.export(exports, "OrthographicCamera", ()=>OrthographicCamera);
parcelHelpers.export(exports, "PCFShadowMap", ()=>PCFShadowMap);
parcelHelpers.export(exports, "PCFSoftShadowMap", ()=>PCFSoftShadowMap);
parcelHelpers.export(exports, "PMREMGenerator", ()=>PMREMGenerator);
parcelHelpers.export(exports, "Path", ()=>Path);
parcelHelpers.export(exports, "PerspectiveCamera", ()=>PerspectiveCamera);
parcelHelpers.export(exports, "Plane", ()=>Plane);
parcelHelpers.export(exports, "PlaneGeometry", ()=>PlaneGeometry);
parcelHelpers.export(exports, "PlaneHelper", ()=>PlaneHelper);
parcelHelpers.export(exports, "PointLight", ()=>PointLight);
parcelHelpers.export(exports, "PointLightHelper", ()=>PointLightHelper);
parcelHelpers.export(exports, "Points", ()=>Points);
parcelHelpers.export(exports, "PointsMaterial", ()=>PointsMaterial);
parcelHelpers.export(exports, "PolarGridHelper", ()=>PolarGridHelper);
parcelHelpers.export(exports, "PolyhedronGeometry", ()=>PolyhedronGeometry);
parcelHelpers.export(exports, "PositionalAudio", ()=>PositionalAudio);
parcelHelpers.export(exports, "PropertyBinding", ()=>PropertyBinding);
parcelHelpers.export(exports, "PropertyMixer", ()=>PropertyMixer);
parcelHelpers.export(exports, "QuadraticBezierCurve", ()=>QuadraticBezierCurve);
parcelHelpers.export(exports, "QuadraticBezierCurve3", ()=>QuadraticBezierCurve3);
parcelHelpers.export(exports, "Quaternion", ()=>Quaternion);
parcelHelpers.export(exports, "QuaternionKeyframeTrack", ()=>QuaternionKeyframeTrack);
parcelHelpers.export(exports, "QuaternionLinearInterpolant", ()=>QuaternionLinearInterpolant);
parcelHelpers.export(exports, "RED_GREEN_RGTC2_Format", ()=>RED_GREEN_RGTC2_Format);
parcelHelpers.export(exports, "RED_RGTC1_Format", ()=>RED_RGTC1_Format);
parcelHelpers.export(exports, "REVISION", ()=>REVISION);
parcelHelpers.export(exports, "RGBADepthPacking", ()=>RGBADepthPacking);
parcelHelpers.export(exports, "RGBAFormat", ()=>RGBAFormat);
parcelHelpers.export(exports, "RGBAIntegerFormat", ()=>RGBAIntegerFormat);
parcelHelpers.export(exports, "RGBA_ASTC_10x10_Format", ()=>RGBA_ASTC_10x10_Format);
parcelHelpers.export(exports, "RGBA_ASTC_10x5_Format", ()=>RGBA_ASTC_10x5_Format);
parcelHelpers.export(exports, "RGBA_ASTC_10x6_Format", ()=>RGBA_ASTC_10x6_Format);
parcelHelpers.export(exports, "RGBA_ASTC_10x8_Format", ()=>RGBA_ASTC_10x8_Format);
parcelHelpers.export(exports, "RGBA_ASTC_12x10_Format", ()=>RGBA_ASTC_12x10_Format);
parcelHelpers.export(exports, "RGBA_ASTC_12x12_Format", ()=>RGBA_ASTC_12x12_Format);
parcelHelpers.export(exports, "RGBA_ASTC_4x4_Format", ()=>RGBA_ASTC_4x4_Format);
parcelHelpers.export(exports, "RGBA_ASTC_5x4_Format", ()=>RGBA_ASTC_5x4_Format);
parcelHelpers.export(exports, "RGBA_ASTC_5x5_Format", ()=>RGBA_ASTC_5x5_Format);
parcelHelpers.export(exports, "RGBA_ASTC_6x5_Format", ()=>RGBA_ASTC_6x5_Format);
parcelHelpers.export(exports, "RGBA_ASTC_6x6_Format", ()=>RGBA_ASTC_6x6_Format);
parcelHelpers.export(exports, "RGBA_ASTC_8x5_Format", ()=>RGBA_ASTC_8x5_Format);
parcelHelpers.export(exports, "RGBA_ASTC_8x6_Format", ()=>RGBA_ASTC_8x6_Format);
parcelHelpers.export(exports, "RGBA_ASTC_8x8_Format", ()=>RGBA_ASTC_8x8_Format);
parcelHelpers.export(exports, "RGBA_BPTC_Format", ()=>RGBA_BPTC_Format);
parcelHelpers.export(exports, "RGBA_ETC2_EAC_Format", ()=>RGBA_ETC2_EAC_Format);
parcelHelpers.export(exports, "RGBA_PVRTC_2BPPV1_Format", ()=>RGBA_PVRTC_2BPPV1_Format);
parcelHelpers.export(exports, "RGBA_PVRTC_4BPPV1_Format", ()=>RGBA_PVRTC_4BPPV1_Format);
parcelHelpers.export(exports, "RGBA_S3TC_DXT1_Format", ()=>RGBA_S3TC_DXT1_Format);
parcelHelpers.export(exports, "RGBA_S3TC_DXT3_Format", ()=>RGBA_S3TC_DXT3_Format);
parcelHelpers.export(exports, "RGBA_S3TC_DXT5_Format", ()=>RGBA_S3TC_DXT5_Format);
parcelHelpers.export(exports, "RGB_BPTC_SIGNED_Format", ()=>RGB_BPTC_SIGNED_Format);
parcelHelpers.export(exports, "RGB_BPTC_UNSIGNED_Format", ()=>RGB_BPTC_UNSIGNED_Format);
parcelHelpers.export(exports, "RGB_ETC1_Format", ()=>RGB_ETC1_Format);
parcelHelpers.export(exports, "RGB_ETC2_Format", ()=>RGB_ETC2_Format);
parcelHelpers.export(exports, "RGB_PVRTC_2BPPV1_Format", ()=>RGB_PVRTC_2BPPV1_Format);
parcelHelpers.export(exports, "RGB_PVRTC_4BPPV1_Format", ()=>RGB_PVRTC_4BPPV1_Format);
parcelHelpers.export(exports, "RGB_S3TC_DXT1_Format", ()=>RGB_S3TC_DXT1_Format);
parcelHelpers.export(exports, "RGFormat", ()=>RGFormat);
parcelHelpers.export(exports, "RGIntegerFormat", ()=>RGIntegerFormat);
parcelHelpers.export(exports, "RawShaderMaterial", ()=>RawShaderMaterial);
parcelHelpers.export(exports, "Ray", ()=>Ray);
parcelHelpers.export(exports, "Raycaster", ()=>Raycaster);
parcelHelpers.export(exports, "RectAreaLight", ()=>RectAreaLight);
parcelHelpers.export(exports, "RedFormat", ()=>RedFormat);
parcelHelpers.export(exports, "RedIntegerFormat", ()=>RedIntegerFormat);
parcelHelpers.export(exports, "ReinhardToneMapping", ()=>ReinhardToneMapping);
parcelHelpers.export(exports, "RenderTarget", ()=>RenderTarget);
parcelHelpers.export(exports, "RepeatWrapping", ()=>RepeatWrapping);
parcelHelpers.export(exports, "ReplaceStencilOp", ()=>ReplaceStencilOp);
parcelHelpers.export(exports, "ReverseSubtractEquation", ()=>ReverseSubtractEquation);
parcelHelpers.export(exports, "RingGeometry", ()=>RingGeometry);
parcelHelpers.export(exports, "SIGNED_RED_GREEN_RGTC2_Format", ()=>SIGNED_RED_GREEN_RGTC2_Format);
parcelHelpers.export(exports, "SIGNED_RED_RGTC1_Format", ()=>SIGNED_RED_RGTC1_Format);
parcelHelpers.export(exports, "SRGBColorSpace", ()=>SRGBColorSpace);
parcelHelpers.export(exports, "Scene", ()=>Scene);
parcelHelpers.export(exports, "ShaderChunk", ()=>ShaderChunk);
parcelHelpers.export(exports, "ShaderLib", ()=>ShaderLib);
parcelHelpers.export(exports, "ShaderMaterial", ()=>ShaderMaterial);
parcelHelpers.export(exports, "ShadowMaterial", ()=>ShadowMaterial);
parcelHelpers.export(exports, "Shape", ()=>Shape);
parcelHelpers.export(exports, "ShapeGeometry", ()=>ShapeGeometry);
parcelHelpers.export(exports, "ShapePath", ()=>ShapePath);
parcelHelpers.export(exports, "ShapeUtils", ()=>ShapeUtils);
parcelHelpers.export(exports, "ShortType", ()=>ShortType);
parcelHelpers.export(exports, "Skeleton", ()=>Skeleton);
parcelHelpers.export(exports, "SkeletonHelper", ()=>SkeletonHelper);
parcelHelpers.export(exports, "SkinnedMesh", ()=>SkinnedMesh);
parcelHelpers.export(exports, "Source", ()=>Source);
parcelHelpers.export(exports, "Sphere", ()=>Sphere);
parcelHelpers.export(exports, "SphereGeometry", ()=>SphereGeometry);
parcelHelpers.export(exports, "Spherical", ()=>Spherical);
parcelHelpers.export(exports, "SphericalHarmonics3", ()=>SphericalHarmonics3);
parcelHelpers.export(exports, "SplineCurve", ()=>SplineCurve);
parcelHelpers.export(exports, "SpotLight", ()=>SpotLight);
parcelHelpers.export(exports, "SpotLightHelper", ()=>SpotLightHelper);
parcelHelpers.export(exports, "Sprite", ()=>Sprite);
parcelHelpers.export(exports, "SpriteMaterial", ()=>SpriteMaterial);
parcelHelpers.export(exports, "SrcAlphaFactor", ()=>SrcAlphaFactor);
parcelHelpers.export(exports, "SrcAlphaSaturateFactor", ()=>SrcAlphaSaturateFactor);
parcelHelpers.export(exports, "SrcColorFactor", ()=>SrcColorFactor);
parcelHelpers.export(exports, "StaticCopyUsage", ()=>StaticCopyUsage);
parcelHelpers.export(exports, "StaticDrawUsage", ()=>StaticDrawUsage);
parcelHelpers.export(exports, "StaticReadUsage", ()=>StaticReadUsage);
parcelHelpers.export(exports, "StereoCamera", ()=>StereoCamera);
parcelHelpers.export(exports, "StreamCopyUsage", ()=>StreamCopyUsage);
parcelHelpers.export(exports, "StreamDrawUsage", ()=>StreamDrawUsage);
parcelHelpers.export(exports, "StreamReadUsage", ()=>StreamReadUsage);
parcelHelpers.export(exports, "StringKeyframeTrack", ()=>StringKeyframeTrack);
parcelHelpers.export(exports, "SubtractEquation", ()=>SubtractEquation);
parcelHelpers.export(exports, "SubtractiveBlending", ()=>SubtractiveBlending);
parcelHelpers.export(exports, "TOUCH", ()=>TOUCH);
parcelHelpers.export(exports, "TangentSpaceNormalMap", ()=>TangentSpaceNormalMap);
parcelHelpers.export(exports, "TetrahedronGeometry", ()=>TetrahedronGeometry);
parcelHelpers.export(exports, "Texture", ()=>Texture);
parcelHelpers.export(exports, "TextureLoader", ()=>TextureLoader);
parcelHelpers.export(exports, "TorusGeometry", ()=>TorusGeometry);
parcelHelpers.export(exports, "TorusKnotGeometry", ()=>TorusKnotGeometry);
parcelHelpers.export(exports, "Triangle", ()=>Triangle);
parcelHelpers.export(exports, "TriangleFanDrawMode", ()=>TriangleFanDrawMode);
parcelHelpers.export(exports, "TriangleStripDrawMode", ()=>TriangleStripDrawMode);
parcelHelpers.export(exports, "TrianglesDrawMode", ()=>TrianglesDrawMode);
parcelHelpers.export(exports, "TubeGeometry", ()=>TubeGeometry);
parcelHelpers.export(exports, "TwoPassDoubleSide", ()=>TwoPassDoubleSide);
parcelHelpers.export(exports, "UVMapping", ()=>UVMapping);
parcelHelpers.export(exports, "Uint16BufferAttribute", ()=>Uint16BufferAttribute);
parcelHelpers.export(exports, "Uint32BufferAttribute", ()=>Uint32BufferAttribute);
parcelHelpers.export(exports, "Uint8BufferAttribute", ()=>Uint8BufferAttribute);
parcelHelpers.export(exports, "Uint8ClampedBufferAttribute", ()=>Uint8ClampedBufferAttribute);
parcelHelpers.export(exports, "Uniform", ()=>Uniform);
parcelHelpers.export(exports, "UniformsGroup", ()=>UniformsGroup);
parcelHelpers.export(exports, "UniformsLib", ()=>UniformsLib);
parcelHelpers.export(exports, "UniformsUtils", ()=>UniformsUtils);
parcelHelpers.export(exports, "UnsignedByteType", ()=>UnsignedByteType);
parcelHelpers.export(exports, "UnsignedInt248Type", ()=>UnsignedInt248Type);
parcelHelpers.export(exports, "UnsignedIntType", ()=>UnsignedIntType);
parcelHelpers.export(exports, "UnsignedShort4444Type", ()=>UnsignedShort4444Type);
parcelHelpers.export(exports, "UnsignedShort5551Type", ()=>UnsignedShort5551Type);
parcelHelpers.export(exports, "UnsignedShortType", ()=>UnsignedShortType);
parcelHelpers.export(exports, "VSMShadowMap", ()=>VSMShadowMap);
parcelHelpers.export(exports, "Vector2", ()=>Vector2);
parcelHelpers.export(exports, "Vector3", ()=>Vector3);
parcelHelpers.export(exports, "Vector4", ()=>Vector4);
parcelHelpers.export(exports, "VectorKeyframeTrack", ()=>VectorKeyframeTrack);
parcelHelpers.export(exports, "VideoTexture", ()=>VideoTexture);
parcelHelpers.export(exports, "WebGL1Renderer", ()=>WebGL1Renderer);
parcelHelpers.export(exports, "WebGL3DRenderTarget", ()=>WebGL3DRenderTarget);
parcelHelpers.export(exports, "WebGLArrayRenderTarget", ()=>WebGLArrayRenderTarget);
parcelHelpers.export(exports, "WebGLCoordinateSystem", ()=>WebGLCoordinateSystem);
parcelHelpers.export(exports, "WebGLCubeRenderTarget", ()=>WebGLCubeRenderTarget);
parcelHelpers.export(exports, "WebGLMultipleRenderTargets", ()=>WebGLMultipleRenderTargets);
parcelHelpers.export(exports, "WebGLRenderTarget", ()=>WebGLRenderTarget);
parcelHelpers.export(exports, "WebGLRenderer", ()=>WebGLRenderer);
parcelHelpers.export(exports, "WebGLUtils", ()=>WebGLUtils);
parcelHelpers.export(exports, "WebGPUCoordinateSystem", ()=>WebGPUCoordinateSystem);
parcelHelpers.export(exports, "WireframeGeometry", ()=>WireframeGeometry);
parcelHelpers.export(exports, "WrapAroundEnding", ()=>WrapAroundEnding);
parcelHelpers.export(exports, "ZeroCurvatureEnding", ()=>ZeroCurvatureEnding);
parcelHelpers.export(exports, "ZeroFactor", ()=>ZeroFactor);
parcelHelpers.export(exports, "ZeroSlopeEnding", ()=>ZeroSlopeEnding);
parcelHelpers.export(exports, "ZeroStencilOp", ()=>ZeroStencilOp);
parcelHelpers.export(exports, "_SRGBAFormat", ()=>_SRGBAFormat);
parcelHelpers.export(exports, "createCanvasElement", ()=>createCanvasElement);
parcelHelpers.export(exports, "sRGBEncoding", ()=>sRGBEncoding);
const REVISION = "156";
const MOUSE = {
    LEFT: 0,
    MIDDLE: 1,
    RIGHT: 2,
    ROTATE: 0,
    DOLLY: 1,
    PAN: 2
};
const TOUCH = {
    ROTATE: 0,
    PAN: 1,
    DOLLY_PAN: 2,
    DOLLY_ROTATE: 3
};
const CullFaceNone = 0;
const CullFaceBack = 1;
const CullFaceFront = 2;
const CullFaceFrontBack = 3;
const BasicShadowMap = 0;
const PCFShadowMap = 1;
const PCFSoftShadowMap = 2;
const VSMShadowMap = 3;
const FrontSide = 0;
const BackSide = 1;
const DoubleSide = 2;
const TwoPassDoubleSide = 2; // r149
const NoBlending = 0;
const NormalBlending = 1;
const AdditiveBlending = 2;
const SubtractiveBlending = 3;
const MultiplyBlending = 4;
const CustomBlending = 5;
const AddEquation = 100;
const SubtractEquation = 101;
const ReverseSubtractEquation = 102;
const MinEquation = 103;
const MaxEquation = 104;
const ZeroFactor = 200;
const OneFactor = 201;
const SrcColorFactor = 202;
const OneMinusSrcColorFactor = 203;
const SrcAlphaFactor = 204;
const OneMinusSrcAlphaFactor = 205;
const DstAlphaFactor = 206;
const OneMinusDstAlphaFactor = 207;
const DstColorFactor = 208;
const OneMinusDstColorFactor = 209;
const SrcAlphaSaturateFactor = 210;
const NeverDepth = 0;
const AlwaysDepth = 1;
const LessDepth = 2;
const LessEqualDepth = 3;
const EqualDepth = 4;
const GreaterEqualDepth = 5;
const GreaterDepth = 6;
const NotEqualDepth = 7;
const MultiplyOperation = 0;
const MixOperation = 1;
const AddOperation = 2;
const NoToneMapping = 0;
const LinearToneMapping = 1;
const ReinhardToneMapping = 2;
const CineonToneMapping = 3;
const ACESFilmicToneMapping = 4;
const CustomToneMapping = 5;
const UVMapping = 300;
const CubeReflectionMapping = 301;
const CubeRefractionMapping = 302;
const EquirectangularReflectionMapping = 303;
const EquirectangularRefractionMapping = 304;
const CubeUVReflectionMapping = 306;
const RepeatWrapping = 1000;
const ClampToEdgeWrapping = 1001;
const MirroredRepeatWrapping = 1002;
const NearestFilter = 1003;
const NearestMipmapNearestFilter = 1004;
const NearestMipMapNearestFilter = 1004;
const NearestMipmapLinearFilter = 1005;
const NearestMipMapLinearFilter = 1005;
const LinearFilter = 1006;
const LinearMipmapNearestFilter = 1007;
const LinearMipMapNearestFilter = 1007;
const LinearMipmapLinearFilter = 1008;
const LinearMipMapLinearFilter = 1008;
const UnsignedByteType = 1009;
const ByteType = 1010;
const ShortType = 1011;
const UnsignedShortType = 1012;
const IntType = 1013;
const UnsignedIntType = 1014;
const FloatType = 1015;
const HalfFloatType = 1016;
const UnsignedShort4444Type = 1017;
const UnsignedShort5551Type = 1018;
const UnsignedInt248Type = 1020;
const AlphaFormat = 1021;
const RGBAFormat = 1023;
const LuminanceFormat = 1024;
const LuminanceAlphaFormat = 1025;
const DepthFormat = 1026;
const DepthStencilFormat = 1027;
const RedFormat = 1028;
const RedIntegerFormat = 1029;
const RGFormat = 1030;
const RGIntegerFormat = 1031;
const RGBAIntegerFormat = 1033;
const RGB_S3TC_DXT1_Format = 33776;
const RGBA_S3TC_DXT1_Format = 33777;
const RGBA_S3TC_DXT3_Format = 33778;
const RGBA_S3TC_DXT5_Format = 33779;
const RGB_PVRTC_4BPPV1_Format = 35840;
const RGB_PVRTC_2BPPV1_Format = 35841;
const RGBA_PVRTC_4BPPV1_Format = 35842;
const RGBA_PVRTC_2BPPV1_Format = 35843;
const RGB_ETC1_Format = 36196;
const RGB_ETC2_Format = 37492;
const RGBA_ETC2_EAC_Format = 37496;
const RGBA_ASTC_4x4_Format = 37808;
const RGBA_ASTC_5x4_Format = 37809;
const RGBA_ASTC_5x5_Format = 37810;
const RGBA_ASTC_6x5_Format = 37811;
const RGBA_ASTC_6x6_Format = 37812;
const RGBA_ASTC_8x5_Format = 37813;
const RGBA_ASTC_8x6_Format = 37814;
const RGBA_ASTC_8x8_Format = 37815;
const RGBA_ASTC_10x5_Format = 37816;
const RGBA_ASTC_10x6_Format = 37817;
const RGBA_ASTC_10x8_Format = 37818;
const RGBA_ASTC_10x10_Format = 37819;
const RGBA_ASTC_12x10_Format = 37820;
const RGBA_ASTC_12x12_Format = 37821;
const RGBA_BPTC_Format = 36492;
const RGB_BPTC_SIGNED_Format = 36494;
const RGB_BPTC_UNSIGNED_Format = 36495;
const RED_RGTC1_Format = 36283;
const SIGNED_RED_RGTC1_Format = 36284;
const RED_GREEN_RGTC2_Format = 36285;
const SIGNED_RED_GREEN_RGTC2_Format = 36286;
const LoopOnce = 2200;
const LoopRepeat = 2201;
const LoopPingPong = 2202;
const InterpolateDiscrete = 2300;
const InterpolateLinear = 2301;
const InterpolateSmooth = 2302;
const ZeroCurvatureEnding = 2400;
const ZeroSlopeEnding = 2401;
const WrapAroundEnding = 2402;
const NormalAnimationBlendMode = 2500;
const AdditiveAnimationBlendMode = 2501;
const TrianglesDrawMode = 0;
const TriangleStripDrawMode = 1;
const TriangleFanDrawMode = 2;
/** @deprecated Use LinearSRGBColorSpace or NoColorSpace in three.js r152+. */ const LinearEncoding = 3000;
/** @deprecated Use SRGBColorSpace in three.js r152+. */ const sRGBEncoding = 3001;
const BasicDepthPacking = 3200;
const RGBADepthPacking = 3201;
const TangentSpaceNormalMap = 0;
const ObjectSpaceNormalMap = 1;
// Color space string identifiers, matching CSS Color Module Level 4 and WebGPU names where available.
const NoColorSpace = "";
const SRGBColorSpace = "srgb";
const LinearSRGBColorSpace = "srgb-linear";
const DisplayP3ColorSpace = "display-p3";
const LinearDisplayP3ColorSpace = "display-p3-linear";
const ZeroStencilOp = 0;
const KeepStencilOp = 7680;
const ReplaceStencilOp = 7681;
const IncrementStencilOp = 7682;
const DecrementStencilOp = 7683;
const IncrementWrapStencilOp = 34055;
const DecrementWrapStencilOp = 34056;
const InvertStencilOp = 5386;
const NeverStencilFunc = 512;
const LessStencilFunc = 513;
const EqualStencilFunc = 514;
const LessEqualStencilFunc = 515;
const GreaterStencilFunc = 516;
const NotEqualStencilFunc = 517;
const GreaterEqualStencilFunc = 518;
const AlwaysStencilFunc = 519;
const NeverCompare = 512;
const LessCompare = 513;
const EqualCompare = 514;
const LessEqualCompare = 515;
const GreaterCompare = 516;
const NotEqualCompare = 517;
const GreaterEqualCompare = 518;
const AlwaysCompare = 519;
const StaticDrawUsage = 35044;
const DynamicDrawUsage = 35048;
const StreamDrawUsage = 35040;
const StaticReadUsage = 35045;
const DynamicReadUsage = 35049;
const StreamReadUsage = 35041;
const StaticCopyUsage = 35046;
const DynamicCopyUsage = 35050;
const StreamCopyUsage = 35042;
const GLSL1 = "100";
const GLSL3 = "300 es";
const _SRGBAFormat = 1035; // fallback for WebGL 1
const WebGLCoordinateSystem = 2000;
const WebGPUCoordinateSystem = 2001;
/**
 * https://github.com/mrdoob/eventdispatcher.js/
 */ class EventDispatcher {
    addEventListener(type, listener) {
        if (this._listeners === undefined) this._listeners = {};
        const listeners = this._listeners;
        if (listeners[type] === undefined) listeners[type] = [];
        if (listeners[type].indexOf(listener) === -1) listeners[type].push(listener);
    }
    hasEventListener(type, listener) {
        if (this._listeners === undefined) return false;
        const listeners = this._listeners;
        return listeners[type] !== undefined && listeners[type].indexOf(listener) !== -1;
    }
    removeEventListener(type, listener) {
        if (this._listeners === undefined) return;
        const listeners = this._listeners;
        const listenerArray = listeners[type];
        if (listenerArray !== undefined) {
            const index = listenerArray.indexOf(listener);
            if (index !== -1) listenerArray.splice(index, 1);
        }
    }
    dispatchEvent(event) {
        if (this._listeners === undefined) return;
        const listeners = this._listeners;
        const listenerArray = listeners[event.type];
        if (listenerArray !== undefined) {
            event.target = this;
            // Make a copy, in case listeners are removed while iterating.
            const array = listenerArray.slice(0);
            for(let i = 0, l = array.length; i < l; i++)array[i].call(this, event);
            event.target = null;
        }
    }
}
const _lut = [
    "00",
    "01",
    "02",
    "03",
    "04",
    "05",
    "06",
    "07",
    "08",
    "09",
    "0a",
    "0b",
    "0c",
    "0d",
    "0e",
    "0f",
    "10",
    "11",
    "12",
    "13",
    "14",
    "15",
    "16",
    "17",
    "18",
    "19",
    "1a",
    "1b",
    "1c",
    "1d",
    "1e",
    "1f",
    "20",
    "21",
    "22",
    "23",
    "24",
    "25",
    "26",
    "27",
    "28",
    "29",
    "2a",
    "2b",
    "2c",
    "2d",
    "2e",
    "2f",
    "30",
    "31",
    "32",
    "33",
    "34",
    "35",
    "36",
    "37",
    "38",
    "39",
    "3a",
    "3b",
    "3c",
    "3d",
    "3e",
    "3f",
    "40",
    "41",
    "42",
    "43",
    "44",
    "45",
    "46",
    "47",
    "48",
    "49",
    "4a",
    "4b",
    "4c",
    "4d",
    "4e",
    "4f",
    "50",
    "51",
    "52",
    "53",
    "54",
    "55",
    "56",
    "57",
    "58",
    "59",
    "5a",
    "5b",
    "5c",
    "5d",
    "5e",
    "5f",
    "60",
    "61",
    "62",
    "63",
    "64",
    "65",
    "66",
    "67",
    "68",
    "69",
    "6a",
    "6b",
    "6c",
    "6d",
    "6e",
    "6f",
    "70",
    "71",
    "72",
    "73",
    "74",
    "75",
    "76",
    "77",
    "78",
    "79",
    "7a",
    "7b",
    "7c",
    "7d",
    "7e",
    "7f",
    "80",
    "81",
    "82",
    "83",
    "84",
    "85",
    "86",
    "87",
    "88",
    "89",
    "8a",
    "8b",
    "8c",
    "8d",
    "8e",
    "8f",
    "90",
    "91",
    "92",
    "93",
    "94",
    "95",
    "96",
    "97",
    "98",
    "99",
    "9a",
    "9b",
    "9c",
    "9d",
    "9e",
    "9f",
    "a0",
    "a1",
    "a2",
    "a3",
    "a4",
    "a5",
    "a6",
    "a7",
    "a8",
    "a9",
    "aa",
    "ab",
    "ac",
    "ad",
    "ae",
    "af",
    "b0",
    "b1",
    "b2",
    "b3",
    "b4",
    "b5",
    "b6",
    "b7",
    "b8",
    "b9",
    "ba",
    "bb",
    "bc",
    "bd",
    "be",
    "bf",
    "c0",
    "c1",
    "c2",
    "c3",
    "c4",
    "c5",
    "c6",
    "c7",
    "c8",
    "c9",
    "ca",
    "cb",
    "cc",
    "cd",
    "ce",
    "cf",
    "d0",
    "d1",
    "d2",
    "d3",
    "d4",
    "d5",
    "d6",
    "d7",
    "d8",
    "d9",
    "da",
    "db",
    "dc",
    "dd",
    "de",
    "df",
    "e0",
    "e1",
    "e2",
    "e3",
    "e4",
    "e5",
    "e6",
    "e7",
    "e8",
    "e9",
    "ea",
    "eb",
    "ec",
    "ed",
    "ee",
    "ef",
    "f0",
    "f1",
    "f2",
    "f3",
    "f4",
    "f5",
    "f6",
    "f7",
    "f8",
    "f9",
    "fa",
    "fb",
    "fc",
    "fd",
    "fe",
    "ff"
];
let _seed = 1234567;
const DEG2RAD = Math.PI / 180;
const RAD2DEG = 180 / Math.PI;
// http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136
function generateUUID() {
    const d0 = Math.random() * 0xffffffff | 0;
    const d1 = Math.random() * 0xffffffff | 0;
    const d2 = Math.random() * 0xffffffff | 0;
    const d3 = Math.random() * 0xffffffff | 0;
    const uuid = _lut[d0 & 0xff] + _lut[d0 >> 8 & 0xff] + _lut[d0 >> 16 & 0xff] + _lut[d0 >> 24 & 0xff] + "-" + _lut[d1 & 0xff] + _lut[d1 >> 8 & 0xff] + "-" + _lut[d1 >> 16 & 0x0f | 0x40] + _lut[d1 >> 24 & 0xff] + "-" + _lut[d2 & 0x3f | 0x80] + _lut[d2 >> 8 & 0xff] + "-" + _lut[d2 >> 16 & 0xff] + _lut[d2 >> 24 & 0xff] + _lut[d3 & 0xff] + _lut[d3 >> 8 & 0xff] + _lut[d3 >> 16 & 0xff] + _lut[d3 >> 24 & 0xff];
    // .toLowerCase() here flattens concatenated strings to save heap memory space.
    return uuid.toLowerCase();
}
function clamp(value, min, max) {
    return Math.max(min, Math.min(max, value));
}
// compute euclidean modulo of m % n
// https://en.wikipedia.org/wiki/Modulo_operation
function euclideanModulo(n, m) {
    return (n % m + m) % m;
}
// Linear mapping from range <a1, a2> to range <b1, b2>
function mapLinear(x, a1, a2, b1, b2) {
    return b1 + (x - a1) * (b2 - b1) / (a2 - a1);
}
// https://www.gamedev.net/tutorials/programming/general-and-gameplay-programming/inverse-lerp-a-super-useful-yet-often-overlooked-function-r5230/
function inverseLerp(x, y, value) {
    if (x !== y) return (value - x) / (y - x);
    else return 0;
}
// https://en.wikipedia.org/wiki/Linear_interpolation
function lerp(x, y, t) {
    return (1 - t) * x + t * y;
}
// http://www.rorydriscoll.com/2016/03/07/frame-rate-independent-damping-using-lerp/
function damp(x, y, lambda, dt) {
    return lerp(x, y, 1 - Math.exp(-lambda * dt));
}
// https://www.desmos.com/calculator/vcsjnyz7x4
function pingpong(x, length = 1) {
    return length - Math.abs(euclideanModulo(x, length * 2) - length);
}
// http://en.wikipedia.org/wiki/Smoothstep
function smoothstep(x, min, max) {
    if (x <= min) return 0;
    if (x >= max) return 1;
    x = (x - min) / (max - min);
    return x * x * (3 - 2 * x);
}
function smootherstep(x, min, max) {
    if (x <= min) return 0;
    if (x >= max) return 1;
    x = (x - min) / (max - min);
    return x * x * x * (x * (x * 6 - 15) + 10);
}
// Random integer from <low, high> interval
function randInt(low, high) {
    return low + Math.floor(Math.random() * (high - low + 1));
}
// Random float from <low, high> interval
function randFloat(low, high) {
    return low + Math.random() * (high - low);
}
// Random float from <-range/2, range/2> interval
function randFloatSpread(range) {
    return range * (0.5 - Math.random());
}
// Deterministic pseudo-random float in the interval [ 0, 1 ]
function seededRandom(s) {
    if (s !== undefined) _seed = s;
    // Mulberry32 generator
    let t = _seed += 0x6D2B79F5;
    t = Math.imul(t ^ t >>> 15, t | 1);
    t ^= t + Math.imul(t ^ t >>> 7, t | 61);
    return ((t ^ t >>> 14) >>> 0) / 4294967296;
}
function degToRad(degrees) {
    return degrees * DEG2RAD;
}
function radToDeg(radians) {
    return radians * RAD2DEG;
}
function isPowerOfTwo(value) {
    return (value & value - 1) === 0 && value !== 0;
}
function ceilPowerOfTwo(value) {
    return Math.pow(2, Math.ceil(Math.log(value) / Math.LN2));
}
function floorPowerOfTwo(value) {
    return Math.pow(2, Math.floor(Math.log(value) / Math.LN2));
}
function setQuaternionFromProperEuler(q, a, b, c, order) {
    // Intrinsic Proper Euler Angles - see https://en.wikipedia.org/wiki/Euler_angles
    // rotations are applied to the axes in the order specified by 'order'
    // rotation by angle 'a' is applied first, then by angle 'b', then by angle 'c'
    // angles are in radians
    const cos = Math.cos;
    const sin = Math.sin;
    const c2 = cos(b / 2);
    const s2 = sin(b / 2);
    const c13 = cos((a + c) / 2);
    const s13 = sin((a + c) / 2);
    const c1_3 = cos((a - c) / 2);
    const s1_3 = sin((a - c) / 2);
    const c3_1 = cos((c - a) / 2);
    const s3_1 = sin((c - a) / 2);
    switch(order){
        case "XYX":
            q.set(c2 * s13, s2 * c1_3, s2 * s1_3, c2 * c13);
            break;
        case "YZY":
            q.set(s2 * s1_3, c2 * s13, s2 * c1_3, c2 * c13);
            break;
        case "ZXZ":
            q.set(s2 * c1_3, s2 * s1_3, c2 * s13, c2 * c13);
            break;
        case "XZX":
            q.set(c2 * s13, s2 * s3_1, s2 * c3_1, c2 * c13);
            break;
        case "YXY":
            q.set(s2 * c3_1, c2 * s13, s2 * s3_1, c2 * c13);
            break;
        case "ZYZ":
            q.set(s2 * s3_1, s2 * c3_1, c2 * s13, c2 * c13);
            break;
        default:
            console.warn("THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: " + order);
    }
}
function denormalize(value, array) {
    switch(array.constructor){
        case Float32Array:
            return value;
        case Uint32Array:
            return value / 4294967295.0;
        case Uint16Array:
            return value / 65535.0;
        case Uint8Array:
            return value / 255.0;
        case Int32Array:
            return Math.max(value / 2147483647.0, -1);
        case Int16Array:
            return Math.max(value / 32767.0, -1);
        case Int8Array:
            return Math.max(value / 127.0, -1);
        default:
            throw new Error("Invalid component type.");
    }
}
function normalize(value, array) {
    switch(array.constructor){
        case Float32Array:
            return value;
        case Uint32Array:
            return Math.round(value * 4294967295.0);
        case Uint16Array:
            return Math.round(value * 65535.0);
        case Uint8Array:
            return Math.round(value * 255.0);
        case Int32Array:
            return Math.round(value * 2147483647.0);
        case Int16Array:
            return Math.round(value * 32767.0);
        case Int8Array:
            return Math.round(value * 127.0);
        default:
            throw new Error("Invalid component type.");
    }
}
const MathUtils = {
    DEG2RAD: DEG2RAD,
    RAD2DEG: RAD2DEG,
    generateUUID: generateUUID,
    clamp: clamp,
    euclideanModulo: euclideanModulo,
    mapLinear: mapLinear,
    inverseLerp: inverseLerp,
    lerp: lerp,
    damp: damp,
    pingpong: pingpong,
    smoothstep: smoothstep,
    smootherstep: smootherstep,
    randInt: randInt,
    randFloat: randFloat,
    randFloatSpread: randFloatSpread,
    seededRandom: seededRandom,
    degToRad: degToRad,
    radToDeg: radToDeg,
    isPowerOfTwo: isPowerOfTwo,
    ceilPowerOfTwo: ceilPowerOfTwo,
    floorPowerOfTwo: floorPowerOfTwo,
    setQuaternionFromProperEuler: setQuaternionFromProperEuler,
    normalize: normalize,
    denormalize: denormalize
};
class Vector2 {
    constructor(x = 0, y = 0){
        Vector2.prototype.isVector2 = true;
        this.x = x;
        this.y = y;
    }
    get width() {
        return this.x;
    }
    set width(value) {
        this.x = value;
    }
    get height() {
        return this.y;
    }
    set height(value) {
        this.y = value;
    }
    set(x, y) {
        this.x = x;
        this.y = y;
        return this;
    }
    setScalar(scalar) {
        this.x = scalar;
        this.y = scalar;
        return this;
    }
    setX(x) {
        this.x = x;
        return this;
    }
    setY(y) {
        this.y = y;
        return this;
    }
    setComponent(index, value) {
        switch(index){
            case 0:
                this.x = value;
                break;
            case 1:
                this.y = value;
                break;
            default:
                throw new Error("index is out of range: " + index);
        }
        return this;
    }
    getComponent(index) {
        switch(index){
            case 0:
                return this.x;
            case 1:
                return this.y;
            default:
                throw new Error("index is out of range: " + index);
        }
    }
    clone() {
        return new this.constructor(this.x, this.y);
    }
    copy(v) {
        this.x = v.x;
        this.y = v.y;
        return this;
    }
    add(v) {
        this.x += v.x;
        this.y += v.y;
        return this;
    }
    addScalar(s) {
        this.x += s;
        this.y += s;
        return this;
    }
    addVectors(a, b) {
        this.x = a.x + b.x;
        this.y = a.y + b.y;
        return this;
    }
    addScaledVector(v, s) {
        this.x += v.x * s;
        this.y += v.y * s;
        return this;
    }
    sub(v) {
        this.x -= v.x;
        this.y -= v.y;
        return this;
    }
    subScalar(s) {
        this.x -= s;
        this.y -= s;
        return this;
    }
    subVectors(a, b) {
        this.x = a.x - b.x;
        this.y = a.y - b.y;
        return this;
    }
    multiply(v) {
        this.x *= v.x;
        this.y *= v.y;
        return this;
    }
    multiplyScalar(scalar) {
        this.x *= scalar;
        this.y *= scalar;
        return this;
    }
    divide(v) {
        this.x /= v.x;
        this.y /= v.y;
        return this;
    }
    divideScalar(scalar) {
        return this.multiplyScalar(1 / scalar);
    }
    applyMatrix3(m) {
        const x = this.x, y = this.y;
        const e = m.elements;
        this.x = e[0] * x + e[3] * y + e[6];
        this.y = e[1] * x + e[4] * y + e[7];
        return this;
    }
    min(v) {
        this.x = Math.min(this.x, v.x);
        this.y = Math.min(this.y, v.y);
        return this;
    }
    max(v) {
        this.x = Math.max(this.x, v.x);
        this.y = Math.max(this.y, v.y);
        return this;
    }
    clamp(min, max) {
        // assumes min < max, componentwise
        this.x = Math.max(min.x, Math.min(max.x, this.x));
        this.y = Math.max(min.y, Math.min(max.y, this.y));
        return this;
    }
    clampScalar(minVal, maxVal) {
        this.x = Math.max(minVal, Math.min(maxVal, this.x));
        this.y = Math.max(minVal, Math.min(maxVal, this.y));
        return this;
    }
    clampLength(min, max) {
        const length = this.length();
        return this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));
    }
    floor() {
        this.x = Math.floor(this.x);
        this.y = Math.floor(this.y);
        return this;
    }
    ceil() {
        this.x = Math.ceil(this.x);
        this.y = Math.ceil(this.y);
        return this;
    }
    round() {
        this.x = Math.round(this.x);
        this.y = Math.round(this.y);
        return this;
    }
    roundToZero() {
        this.x = Math.trunc(this.x);
        this.y = Math.trunc(this.y);
        return this;
    }
    negate() {
        this.x = -this.x;
        this.y = -this.y;
        return this;
    }
    dot(v) {
        return this.x * v.x + this.y * v.y;
    }
    cross(v) {
        return this.x * v.y - this.y * v.x;
    }
    lengthSq() {
        return this.x * this.x + this.y * this.y;
    }
    length() {
        return Math.sqrt(this.x * this.x + this.y * this.y);
    }
    manhattanLength() {
        return Math.abs(this.x) + Math.abs(this.y);
    }
    normalize() {
        return this.divideScalar(this.length() || 1);
    }
    angle() {
        // computes the angle in radians with respect to the positive x-axis
        const angle = Math.atan2(-this.y, -this.x) + Math.PI;
        return angle;
    }
    angleTo(v) {
        const denominator = Math.sqrt(this.lengthSq() * v.lengthSq());
        if (denominator === 0) return Math.PI / 2;
        const theta = this.dot(v) / denominator;
        // clamp, to handle numerical problems
        return Math.acos(clamp(theta, -1, 1));
    }
    distanceTo(v) {
        return Math.sqrt(this.distanceToSquared(v));
    }
    distanceToSquared(v) {
        const dx = this.x - v.x, dy = this.y - v.y;
        return dx * dx + dy * dy;
    }
    manhattanDistanceTo(v) {
        return Math.abs(this.x - v.x) + Math.abs(this.y - v.y);
    }
    setLength(length) {
        return this.normalize().multiplyScalar(length);
    }
    lerp(v, alpha) {
        this.x += (v.x - this.x) * alpha;
        this.y += (v.y - this.y) * alpha;
        return this;
    }
    lerpVectors(v1, v2, alpha) {
        this.x = v1.x + (v2.x - v1.x) * alpha;
        this.y = v1.y + (v2.y - v1.y) * alpha;
        return this;
    }
    equals(v) {
        return v.x === this.x && v.y === this.y;
    }
    fromArray(array, offset = 0) {
        this.x = array[offset];
        this.y = array[offset + 1];
        return this;
    }
    toArray(array = [], offset = 0) {
        array[offset] = this.x;
        array[offset + 1] = this.y;
        return array;
    }
    fromBufferAttribute(attribute, index) {
        this.x = attribute.getX(index);
        this.y = attribute.getY(index);
        return this;
    }
    rotateAround(center, angle) {
        const c = Math.cos(angle), s = Math.sin(angle);
        const x = this.x - center.x;
        const y = this.y - center.y;
        this.x = x * c - y * s + center.x;
        this.y = x * s + y * c + center.y;
        return this;
    }
    random() {
        this.x = Math.random();
        this.y = Math.random();
        return this;
    }
    *[Symbol.iterator]() {
        yield this.x;
        yield this.y;
    }
}
class Matrix3 {
    constructor(n11, n12, n13, n21, n22, n23, n31, n32, n33){
        Matrix3.prototype.isMatrix3 = true;
        this.elements = [
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1
        ];
        if (n11 !== undefined) this.set(n11, n12, n13, n21, n22, n23, n31, n32, n33);
    }
    set(n11, n12, n13, n21, n22, n23, n31, n32, n33) {
        const te = this.elements;
        te[0] = n11;
        te[1] = n21;
        te[2] = n31;
        te[3] = n12;
        te[4] = n22;
        te[5] = n32;
        te[6] = n13;
        te[7] = n23;
        te[8] = n33;
        return this;
    }
    identity() {
        this.set(1, 0, 0, 0, 1, 0, 0, 0, 1);
        return this;
    }
    copy(m) {
        const te = this.elements;
        const me = m.elements;
        te[0] = me[0];
        te[1] = me[1];
        te[2] = me[2];
        te[3] = me[3];
        te[4] = me[4];
        te[5] = me[5];
        te[6] = me[6];
        te[7] = me[7];
        te[8] = me[8];
        return this;
    }
    extractBasis(xAxis, yAxis, zAxis) {
        xAxis.setFromMatrix3Column(this, 0);
        yAxis.setFromMatrix3Column(this, 1);
        zAxis.setFromMatrix3Column(this, 2);
        return this;
    }
    setFromMatrix4(m) {
        const me = m.elements;
        this.set(me[0], me[4], me[8], me[1], me[5], me[9], me[2], me[6], me[10]);
        return this;
    }
    multiply(m) {
        return this.multiplyMatrices(this, m);
    }
    premultiply(m) {
        return this.multiplyMatrices(m, this);
    }
    multiplyMatrices(a, b) {
        const ae = a.elements;
        const be = b.elements;
        const te = this.elements;
        const a11 = ae[0], a12 = ae[3], a13 = ae[6];
        const a21 = ae[1], a22 = ae[4], a23 = ae[7];
        const a31 = ae[2], a32 = ae[5], a33 = ae[8];
        const b11 = be[0], b12 = be[3], b13 = be[6];
        const b21 = be[1], b22 = be[4], b23 = be[7];
        const b31 = be[2], b32 = be[5], b33 = be[8];
        te[0] = a11 * b11 + a12 * b21 + a13 * b31;
        te[3] = a11 * b12 + a12 * b22 + a13 * b32;
        te[6] = a11 * b13 + a12 * b23 + a13 * b33;
        te[1] = a21 * b11 + a22 * b21 + a23 * b31;
        te[4] = a21 * b12 + a22 * b22 + a23 * b32;
        te[7] = a21 * b13 + a22 * b23 + a23 * b33;
        te[2] = a31 * b11 + a32 * b21 + a33 * b31;
        te[5] = a31 * b12 + a32 * b22 + a33 * b32;
        te[8] = a31 * b13 + a32 * b23 + a33 * b33;
        return this;
    }
    multiplyScalar(s) {
        const te = this.elements;
        te[0] *= s;
        te[3] *= s;
        te[6] *= s;
        te[1] *= s;
        te[4] *= s;
        te[7] *= s;
        te[2] *= s;
        te[5] *= s;
        te[8] *= s;
        return this;
    }
    determinant() {
        const te = this.elements;
        const a = te[0], b = te[1], c = te[2], d = te[3], e = te[4], f = te[5], g = te[6], h = te[7], i = te[8];
        return a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;
    }
    invert() {
        const te = this.elements, n11 = te[0], n21 = te[1], n31 = te[2], n12 = te[3], n22 = te[4], n32 = te[5], n13 = te[6], n23 = te[7], n33 = te[8], t11 = n33 * n22 - n32 * n23, t12 = n32 * n13 - n33 * n12, t13 = n23 * n12 - n22 * n13, det = n11 * t11 + n21 * t12 + n31 * t13;
        if (det === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0);
        const detInv = 1 / det;
        te[0] = t11 * detInv;
        te[1] = (n31 * n23 - n33 * n21) * detInv;
        te[2] = (n32 * n21 - n31 * n22) * detInv;
        te[3] = t12 * detInv;
        te[4] = (n33 * n11 - n31 * n13) * detInv;
        te[5] = (n31 * n12 - n32 * n11) * detInv;
        te[6] = t13 * detInv;
        te[7] = (n21 * n13 - n23 * n11) * detInv;
        te[8] = (n22 * n11 - n21 * n12) * detInv;
        return this;
    }
    transpose() {
        let tmp;
        const m = this.elements;
        tmp = m[1];
        m[1] = m[3];
        m[3] = tmp;
        tmp = m[2];
        m[2] = m[6];
        m[6] = tmp;
        tmp = m[5];
        m[5] = m[7];
        m[7] = tmp;
        return this;
    }
    getNormalMatrix(matrix4) {
        return this.setFromMatrix4(matrix4).invert().transpose();
    }
    transposeIntoArray(r) {
        const m = this.elements;
        r[0] = m[0];
        r[1] = m[3];
        r[2] = m[6];
        r[3] = m[1];
        r[4] = m[4];
        r[5] = m[7];
        r[6] = m[2];
        r[7] = m[5];
        r[8] = m[8];
        return this;
    }
    setUvTransform(tx, ty, sx, sy, rotation, cx, cy) {
        const c = Math.cos(rotation);
        const s = Math.sin(rotation);
        this.set(sx * c, sx * s, -sx * (c * cx + s * cy) + cx + tx, -sy * s, sy * c, -sy * (-s * cx + c * cy) + cy + ty, 0, 0, 1);
        return this;
    }
    //
    scale(sx, sy) {
        this.premultiply(_m3.makeScale(sx, sy));
        return this;
    }
    rotate(theta) {
        this.premultiply(_m3.makeRotation(-theta));
        return this;
    }
    translate(tx, ty) {
        this.premultiply(_m3.makeTranslation(tx, ty));
        return this;
    }
    // for 2D Transforms
    makeTranslation(x, y) {
        if (x.isVector2) this.set(1, 0, x.x, 0, 1, x.y, 0, 0, 1);
        else this.set(1, 0, x, 0, 1, y, 0, 0, 1);
        return this;
    }
    makeRotation(theta) {
        // counterclockwise
        const c = Math.cos(theta);
        const s = Math.sin(theta);
        this.set(c, -s, 0, s, c, 0, 0, 0, 1);
        return this;
    }
    makeScale(x, y) {
        this.set(x, 0, 0, 0, y, 0, 0, 0, 1);
        return this;
    }
    //
    equals(matrix) {
        const te = this.elements;
        const me = matrix.elements;
        for(let i = 0; i < 9; i++){
            if (te[i] !== me[i]) return false;
        }
        return true;
    }
    fromArray(array, offset = 0) {
        for(let i = 0; i < 9; i++)this.elements[i] = array[i + offset];
        return this;
    }
    toArray(array = [], offset = 0) {
        const te = this.elements;
        array[offset] = te[0];
        array[offset + 1] = te[1];
        array[offset + 2] = te[2];
        array[offset + 3] = te[3];
        array[offset + 4] = te[4];
        array[offset + 5] = te[5];
        array[offset + 6] = te[6];
        array[offset + 7] = te[7];
        array[offset + 8] = te[8];
        return array;
    }
    clone() {
        return new this.constructor().fromArray(this.elements);
    }
}
const _m3 = /*@__PURE__*/ new Matrix3();
function arrayNeedsUint32(array) {
    // assumes larger values usually on last
    for(let i = array.length - 1; i >= 0; --i){
        if (array[i] >= 65535) return true; // account for PRIMITIVE_RESTART_FIXED_INDEX, #24565
    }
    return false;
}
const TYPED_ARRAYS = {
    Int8Array: Int8Array,
    Uint8Array: Uint8Array,
    Uint8ClampedArray: Uint8ClampedArray,
    Int16Array: Int16Array,
    Uint16Array: Uint16Array,
    Int32Array: Int32Array,
    Uint32Array: Uint32Array,
    Float32Array: Float32Array,
    Float64Array: Float64Array
};
function getTypedArray(type, buffer) {
    return new TYPED_ARRAYS[type](buffer);
}
function createElementNS(name) {
    return document.createElementNS("http://www.w3.org/1999/xhtml", name);
}
function createCanvasElement() {
    const canvas = createElementNS("canvas");
    canvas.style.display = "block";
    return canvas;
}
const _cache = {};
function warnOnce(message) {
    if (message in _cache) return;
    _cache[message] = true;
    console.warn(message);
}
function SRGBToLinear(c) {
    return c < 0.04045 ? c * 0.0773993808 : Math.pow(c * 0.9478672986 + 0.0521327014, 2.4);
}
function LinearToSRGB(c) {
    return c < 0.0031308 ? c * 12.92 : 1.055 * Math.pow(c, 0.41666) - 0.055;
}
/**
 * Matrices converting P3 <-> Rec. 709 primaries, without gamut mapping
 * or clipping. Based on W3C specifications for sRGB and Display P3,
 * and ICC specifications for the D50 connection space. Values in/out
 * are _linear_ sRGB and _linear_ Display P3.
 *
 * Note that both sRGB and Display P3 use the sRGB transfer functions.
 *
 * Reference:
 * - http://www.russellcottrell.com/photo/matrixCalculator.htm
 */ const LINEAR_SRGB_TO_LINEAR_DISPLAY_P3 = /*@__PURE__*/ new Matrix3().fromArray([
    0.8224621,
    0.0331941,
    0.0170827,
    0.1775380,
    0.9668058,
    0.0723974,
    -0.0000001,
    0.0000001,
    0.9105199
]);
const LINEAR_DISPLAY_P3_TO_LINEAR_SRGB = /*@__PURE__*/ new Matrix3().fromArray([
    1.2249401,
    -0.0420569,
    -0.0196376,
    -0.2249404,
    1.0420571,
    -0.0786361,
    0.0000001,
    0.0000000,
    1.0982735
]);
function DisplayP3ToLinearSRGB(color) {
    // Display P3 uses the sRGB transfer functions
    return color.convertSRGBToLinear().applyMatrix3(LINEAR_DISPLAY_P3_TO_LINEAR_SRGB);
}
function LinearSRGBToDisplayP3(color) {
    // Display P3 uses the sRGB transfer functions
    return color.applyMatrix3(LINEAR_SRGB_TO_LINEAR_DISPLAY_P3).convertLinearToSRGB();
}
// Conversions from <source> to Linear-sRGB reference space.
const TO_LINEAR = {
    [LinearSRGBColorSpace]: (color)=>color,
    [SRGBColorSpace]: (color)=>color.convertSRGBToLinear(),
    [DisplayP3ColorSpace]: DisplayP3ToLinearSRGB
};
// Conversions to <target> from Linear-sRGB reference space.
const FROM_LINEAR = {
    [LinearSRGBColorSpace]: (color)=>color,
    [SRGBColorSpace]: (color)=>color.convertLinearToSRGB(),
    [DisplayP3ColorSpace]: LinearSRGBToDisplayP3
};
const ColorManagement = {
    enabled: true,
    get legacyMode () {
        console.warn("THREE.ColorManagement: .legacyMode=false renamed to .enabled=true in r150.");
        return !this.enabled;
    },
    set legacyMode (legacyMode){
        console.warn("THREE.ColorManagement: .legacyMode=false renamed to .enabled=true in r150.");
        this.enabled = !legacyMode;
    },
    get workingColorSpace () {
        return LinearSRGBColorSpace;
    },
    set workingColorSpace (colorSpace){
        console.warn("THREE.ColorManagement: .workingColorSpace is readonly.");
    },
    convert: function(color, sourceColorSpace, targetColorSpace) {
        if (this.enabled === false || sourceColorSpace === targetColorSpace || !sourceColorSpace || !targetColorSpace) return color;
        const sourceToLinear = TO_LINEAR[sourceColorSpace];
        const targetFromLinear = FROM_LINEAR[targetColorSpace];
        if (sourceToLinear === undefined || targetFromLinear === undefined) throw new Error(`Unsupported color space conversion, "${sourceColorSpace}" to "${targetColorSpace}".`);
        return targetFromLinear(sourceToLinear(color));
    },
    fromWorkingColorSpace: function(color, targetColorSpace) {
        return this.convert(color, this.workingColorSpace, targetColorSpace);
    },
    toWorkingColorSpace: function(color, sourceColorSpace) {
        return this.convert(color, sourceColorSpace, this.workingColorSpace);
    }
};
let _canvas;
class ImageUtils {
    static getDataURL(image) {
        if (/^data:/i.test(image.src)) return image.src;
        if (typeof HTMLCanvasElement === "undefined") return image.src;
        let canvas;
        if (image instanceof HTMLCanvasElement) canvas = image;
        else {
            if (_canvas === undefined) _canvas = createElementNS("canvas");
            _canvas.width = image.width;
            _canvas.height = image.height;
            const context = _canvas.getContext("2d");
            if (image instanceof ImageData) context.putImageData(image, 0, 0);
            else context.drawImage(image, 0, 0, image.width, image.height);
            canvas = _canvas;
        }
        if (canvas.width > 2048 || canvas.height > 2048) {
            console.warn("THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons", image);
            return canvas.toDataURL("image/jpeg", 0.6);
        } else return canvas.toDataURL("image/png");
    }
    static sRGBToLinear(image) {
        if (typeof HTMLImageElement !== "undefined" && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== "undefined" && image instanceof HTMLCanvasElement || typeof ImageBitmap !== "undefined" && image instanceof ImageBitmap) {
            const canvas = createElementNS("canvas");
            canvas.width = image.width;
            canvas.height = image.height;
            const context = canvas.getContext("2d");
            context.drawImage(image, 0, 0, image.width, image.height);
            const imageData = context.getImageData(0, 0, image.width, image.height);
            const data = imageData.data;
            for(let i = 0; i < data.length; i++)data[i] = SRGBToLinear(data[i] / 255) * 255;
            context.putImageData(imageData, 0, 0);
            return canvas;
        } else if (image.data) {
            const data = image.data.slice(0);
            for(let i = 0; i < data.length; i++)if (data instanceof Uint8Array || data instanceof Uint8ClampedArray) data[i] = Math.floor(SRGBToLinear(data[i] / 255) * 255);
            else // assuming float
            data[i] = SRGBToLinear(data[i]);
            return {
                data: data,
                width: image.width,
                height: image.height
            };
        } else {
            console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied.");
            return image;
        }
    }
}
let sourceId = 0;
class Source {
    constructor(data = null){
        this.isSource = true;
        Object.defineProperty(this, "id", {
            value: sourceId++
        });
        this.uuid = generateUUID();
        this.data = data;
        this.version = 0;
    }
    set needsUpdate(value) {
        if (value === true) this.version++;
    }
    toJSON(meta) {
        const isRootObject = meta === undefined || typeof meta === "string";
        if (!isRootObject && meta.images[this.uuid] !== undefined) return meta.images[this.uuid];
        const output = {
            uuid: this.uuid,
            url: ""
        };
        const data = this.data;
        if (data !== null) {
            let url;
            if (Array.isArray(data)) {
                // cube texture
                url = [];
                for(let i = 0, l = data.length; i < l; i++)if (data[i].isDataTexture) url.push(serializeImage(data[i].image));
                else url.push(serializeImage(data[i]));
            } else // texture
            url = serializeImage(data);
            output.url = url;
        }
        if (!isRootObject) meta.images[this.uuid] = output;
        return output;
    }
}
function serializeImage(image) {
    if (typeof HTMLImageElement !== "undefined" && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== "undefined" && image instanceof HTMLCanvasElement || typeof ImageBitmap !== "undefined" && image instanceof ImageBitmap) // default images
    return ImageUtils.getDataURL(image);
    else {
        if (image.data) // images of DataTexture
        return {
            data: Array.from(image.data),
            width: image.width,
            height: image.height,
            type: image.data.constructor.name
        };
        else {
            console.warn("THREE.Texture: Unable to serialize Texture.");
            return {};
        }
    }
}
let _textureId = 0;
class Texture extends EventDispatcher {
    constructor(image = Texture.DEFAULT_IMAGE, mapping = Texture.DEFAULT_MAPPING, wrapS = ClampToEdgeWrapping, wrapT = ClampToEdgeWrapping, magFilter = LinearFilter, minFilter = LinearMipmapLinearFilter, format = RGBAFormat, type = UnsignedByteType, anisotropy = Texture.DEFAULT_ANISOTROPY, colorSpace1 = NoColorSpace){
        super();
        this.isTexture = true;
        Object.defineProperty(this, "id", {
            value: _textureId++
        });
        this.uuid = generateUUID();
        this.name = "";
        this.source = new Source(image);
        this.mipmaps = [];
        this.mapping = mapping;
        this.channel = 0;
        this.wrapS = wrapS;
        this.wrapT = wrapT;
        this.magFilter = magFilter;
        this.minFilter = minFilter;
        this.anisotropy = anisotropy;
        this.format = format;
        this.internalFormat = null;
        this.type = type;
        this.offset = new Vector2(0, 0);
        this.repeat = new Vector2(1, 1);
        this.center = new Vector2(0, 0);
        this.rotation = 0;
        this.matrixAutoUpdate = true;
        this.matrix = new Matrix3();
        this.generateMipmaps = true;
        this.premultiplyAlpha = false;
        this.flipY = true;
        this.unpackAlignment = 4; // valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)
        if (typeof colorSpace1 === "string") this.colorSpace = colorSpace1;
        else {
            warnOnce("THREE.Texture: Property .encoding has been replaced by .colorSpace.");
            this.colorSpace = colorSpace1 === sRGBEncoding ? SRGBColorSpace : NoColorSpace;
        }
        this.userData = {};
        this.version = 0;
        this.onUpdate = null;
        this.isRenderTargetTexture = false; // indicates whether a texture belongs to a render target or not
        this.needsPMREMUpdate = false; // indicates whether this texture should be processed by PMREMGenerator or not (only relevant for render target textures)
    }
    get image() {
        return this.source.data;
    }
    set image(value = null) {
        this.source.data = value;
    }
    updateMatrix() {
        this.matrix.setUvTransform(this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y);
    }
    clone() {
        return new this.constructor().copy(this);
    }
    copy(source) {
        this.name = source.name;
        this.source = source.source;
        this.mipmaps = source.mipmaps.slice(0);
        this.mapping = source.mapping;
        this.channel = source.channel;
        this.wrapS = source.wrapS;
        this.wrapT = source.wrapT;
        this.magFilter = source.magFilter;
        this.minFilter = source.minFilter;
        this.anisotropy = source.anisotropy;
        this.format = source.format;
        this.internalFormat = source.internalFormat;
        this.type = source.type;
        this.offset.copy(source.offset);
        this.repeat.copy(source.repeat);
        this.center.copy(source.center);
        this.rotation = source.rotation;
        this.matrixAutoUpdate = source.matrixAutoUpdate;
        this.matrix.copy(source.matrix);
        this.generateMipmaps = source.generateMipmaps;
        this.premultiplyAlpha = source.premultiplyAlpha;
        this.flipY = source.flipY;
        this.unpackAlignment = source.unpackAlignment;
        this.colorSpace = source.colorSpace;
        this.userData = JSON.parse(JSON.stringify(source.userData));
        this.needsUpdate = true;
        return this;
    }
    toJSON(meta) {
        const isRootObject = meta === undefined || typeof meta === "string";
        if (!isRootObject && meta.textures[this.uuid] !== undefined) return meta.textures[this.uuid];
        const output = {
            metadata: {
                version: 4.6,
                type: "Texture",
                generator: "Texture.toJSON"
            },
            uuid: this.uuid,
            name: this.name,
            image: this.source.toJSON(meta).uuid,
            mapping: this.mapping,
            channel: this.channel,
            repeat: [
                this.repeat.x,
                this.repeat.y
            ],
            offset: [
                this.offset.x,
                this.offset.y
            ],
            center: [
                this.center.x,
                this.center.y
            ],
            rotation: this.rotation,
            wrap: [
                this.wrapS,
                this.wrapT
            ],
            format: this.format,
            internalFormat: this.internalFormat,
            type: this.type,
            colorSpace: this.colorSpace,
            minFilter: this.minFilter,
            magFilter: this.magFilter,
            anisotropy: this.anisotropy,
            flipY: this.flipY,
            generateMipmaps: this.generateMipmaps,
            premultiplyAlpha: this.premultiplyAlpha,
            unpackAlignment: this.unpackAlignment
        };
        if (Object.keys(this.userData).length > 0) output.userData = this.userData;
        if (!isRootObject) meta.textures[this.uuid] = output;
        return output;
    }
    dispose() {
        this.dispatchEvent({
            type: "dispose"
        });
    }
    transformUv(uv) {
        if (this.mapping !== UVMapping) return uv;
        uv.applyMatrix3(this.matrix);
        if (uv.x < 0 || uv.x > 1) switch(this.wrapS){
            case RepeatWrapping:
                uv.x = uv.x - Math.floor(uv.x);
                break;
            case ClampToEdgeWrapping:
                uv.x = uv.x < 0 ? 0 : 1;
                break;
            case MirroredRepeatWrapping:
                if (Math.abs(Math.floor(uv.x) % 2) === 1) uv.x = Math.ceil(uv.x) - uv.x;
                else uv.x = uv.x - Math.floor(uv.x);
                break;
        }
        if (uv.y < 0 || uv.y > 1) switch(this.wrapT){
            case RepeatWrapping:
                uv.y = uv.y - Math.floor(uv.y);
                break;
            case ClampToEdgeWrapping:
                uv.y = uv.y < 0 ? 0 : 1;
                break;
            case MirroredRepeatWrapping:
                if (Math.abs(Math.floor(uv.y) % 2) === 1) uv.y = Math.ceil(uv.y) - uv.y;
                else uv.y = uv.y - Math.floor(uv.y);
                break;
        }
        if (this.flipY) uv.y = 1 - uv.y;
        return uv;
    }
    set needsUpdate(value) {
        if (value === true) {
            this.version++;
            this.source.needsUpdate = true;
        }
    }
    get encoding() {
        warnOnce("THREE.Texture: Property .encoding has been replaced by .colorSpace.");
        return this.colorSpace === SRGBColorSpace ? sRGBEncoding : LinearEncoding;
    }
    set encoding(encoding) {
        warnOnce("THREE.Texture: Property .encoding has been replaced by .colorSpace.");
        this.colorSpace = encoding === sRGBEncoding ? SRGBColorSpace : NoColorSpace;
    }
}
Texture.DEFAULT_IMAGE = null;
Texture.DEFAULT_MAPPING = UVMapping;
Texture.DEFAULT_ANISOTROPY = 1;
class Vector4 {
    constructor(x = 0, y = 0, z = 0, w = 1){
        Vector4.prototype.isVector4 = true;
        this.x = x;
        this.y = y;
        this.z = z;
        this.w = w;
    }
    get width() {
        return this.z;
    }
    set width(value) {
        this.z = value;
    }
    get height() {
        return this.w;
    }
    set height(value) {
        this.w = value;
    }
    set(x, y, z, w) {
        this.x = x;
        this.y = y;
        this.z = z;
        this.w = w;
        return this;
    }
    setScalar(scalar) {
        this.x = scalar;
        this.y = scalar;
        this.z = scalar;
        this.w = scalar;
        return this;
    }
    setX(x) {
        this.x = x;
        return this;
    }
    setY(y) {
        this.y = y;
        return this;
    }
    setZ(z) {
        this.z = z;
        return this;
    }
    setW(w) {
        this.w = w;
        return this;
    }
    setComponent(index, value) {
        switch(index){
            case 0:
                this.x = value;
                break;
            case 1:
                this.y = value;
                break;
            case 2:
                this.z = value;
                break;
            case 3:
                this.w = value;
                break;
            default:
                throw new Error("index is out of range: " + index);
        }
        return this;
    }
    getComponent(index) {
        switch(index){
            case 0:
                return this.x;
            case 1:
                return this.y;
            case 2:
                return this.z;
            case 3:
                return this.w;
            default:
                throw new Error("index is out of range: " + index);
        }
    }
    clone() {
        return new this.constructor(this.x, this.y, this.z, this.w);
    }
    copy(v) {
        this.x = v.x;
        this.y = v.y;
        this.z = v.z;
        this.w = v.w !== undefined ? v.w : 1;
        return this;
    }
    add(v) {
        this.x += v.x;
        this.y += v.y;
        this.z += v.z;
        this.w += v.w;
        return this;
    }
    addScalar(s) {
        this.x += s;
        this.y += s;
        this.z += s;
        this.w += s;
        return this;
    }
    addVectors(a, b) {
        this.x = a.x + b.x;
        this.y = a.y + b.y;
        this.z = a.z + b.z;
        this.w = a.w + b.w;
        return this;
    }
    addScaledVector(v, s) {
        this.x += v.x * s;
        this.y += v.y * s;
        this.z += v.z * s;
        this.w += v.w * s;
        return this;
    }
    sub(v) {
        this.x -= v.x;
        this.y -= v.y;
        this.z -= v.z;
        this.w -= v.w;
        return this;
    }
    subScalar(s) {
        this.x -= s;
        this.y -= s;
        this.z -= s;
        this.w -= s;
        return this;
    }
    subVectors(a, b) {
        this.x = a.x - b.x;
        this.y = a.y - b.y;
        this.z = a.z - b.z;
        this.w = a.w - b.w;
        return this;
    }
    multiply(v) {
        this.x *= v.x;
        this.y *= v.y;
        this.z *= v.z;
        this.w *= v.w;
        return this;
    }
    multiplyScalar(scalar) {
        this.x *= scalar;
        this.y *= scalar;
        this.z *= scalar;
        this.w *= scalar;
        return this;
    }
    applyMatrix4(m) {
        const x = this.x, y = this.y, z = this.z, w = this.w;
        const e = m.elements;
        this.x = e[0] * x + e[4] * y + e[8] * z + e[12] * w;
        this.y = e[1] * x + e[5] * y + e[9] * z + e[13] * w;
        this.z = e[2] * x + e[6] * y + e[10] * z + e[14] * w;
        this.w = e[3] * x + e[7] * y + e[11] * z + e[15] * w;
        return this;
    }
    divideScalar(scalar) {
        return this.multiplyScalar(1 / scalar);
    }
    setAxisAngleFromQuaternion(q) {
        // http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm
        // q is assumed to be normalized
        this.w = 2 * Math.acos(q.w);
        const s = Math.sqrt(1 - q.w * q.w);
        if (s < 0.0001) {
            this.x = 1;
            this.y = 0;
            this.z = 0;
        } else {
            this.x = q.x / s;
            this.y = q.y / s;
            this.z = q.z / s;
        }
        return this;
    }
    setAxisAngleFromRotationMatrix(m) {
        // http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm
        // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
        let angle, x, y, z; // variables for result
        const epsilon = 0.01, epsilon2 = 0.1, te = m.elements, m11 = te[0], m12 = te[4], m13 = te[8], m21 = te[1], m22 = te[5], m23 = te[9], m31 = te[2], m32 = te[6], m33 = te[10];
        if (Math.abs(m12 - m21) < epsilon && Math.abs(m13 - m31) < epsilon && Math.abs(m23 - m32) < epsilon) {
            // singularity found
            // first check for identity matrix which must have +1 for all terms
            // in leading diagonal and zero in other terms
            if (Math.abs(m12 + m21) < epsilon2 && Math.abs(m13 + m31) < epsilon2 && Math.abs(m23 + m32) < epsilon2 && Math.abs(m11 + m22 + m33 - 3) < epsilon2) {
                // this singularity is identity matrix so angle = 0
                this.set(1, 0, 0, 0);
                return this; // zero angle, arbitrary axis
            }
            // otherwise this singularity is angle = 180
            angle = Math.PI;
            const xx = (m11 + 1) / 2;
            const yy = (m22 + 1) / 2;
            const zz = (m33 + 1) / 2;
            const xy = (m12 + m21) / 4;
            const xz = (m13 + m31) / 4;
            const yz = (m23 + m32) / 4;
            if (xx > yy && xx > zz) {
                // m11 is the largest diagonal term
                if (xx < epsilon) {
                    x = 0;
                    y = 0.707106781;
                    z = 0.707106781;
                } else {
                    x = Math.sqrt(xx);
                    y = xy / x;
                    z = xz / x;
                }
            } else if (yy > zz) {
                // m22 is the largest diagonal term
                if (yy < epsilon) {
                    x = 0.707106781;
                    y = 0;
                    z = 0.707106781;
                } else {
                    y = Math.sqrt(yy);
                    x = xy / y;
                    z = yz / y;
                }
            } else // m33 is the largest diagonal term so base result on this
            if (zz < epsilon) {
                x = 0.707106781;
                y = 0.707106781;
                z = 0;
            } else {
                z = Math.sqrt(zz);
                x = xz / z;
                y = yz / z;
            }
            this.set(x, y, z, angle);
            return this; // return 180 deg rotation
        }
        // as we have reached here there are no singularities so we can handle normally
        let s = Math.sqrt((m32 - m23) * (m32 - m23) + (m13 - m31) * (m13 - m31) + (m21 - m12) * (m21 - m12)); // used to normalize
        if (Math.abs(s) < 0.001) s = 1;
        // prevent divide by zero, should not happen if matrix is orthogonal and should be
        // caught by singularity test above, but I've left it in just in case
        this.x = (m32 - m23) / s;
        this.y = (m13 - m31) / s;
        this.z = (m21 - m12) / s;
        this.w = Math.acos((m11 + m22 + m33 - 1) / 2);
        return this;
    }
    min(v) {
        this.x = Math.min(this.x, v.x);
        this.y = Math.min(this.y, v.y);
        this.z = Math.min(this.z, v.z);
        this.w = Math.min(this.w, v.w);
        return this;
    }
    max(v) {
        this.x = Math.max(this.x, v.x);
        this.y = Math.max(this.y, v.y);
        this.z = Math.max(this.z, v.z);
        this.w = Math.max(this.w, v.w);
        return this;
    }
    clamp(min, max) {
        // assumes min < max, componentwise
        this.x = Math.max(min.x, Math.min(max.x, this.x));
        this.y = Math.max(min.y, Math.min(max.y, this.y));
        this.z = Math.max(min.z, Math.min(max.z, this.z));
        this.w = Math.max(min.w, Math.min(max.w, this.w));
        return this;
    }
    clampScalar(minVal, maxVal) {
        this.x = Math.max(minVal, Math.min(maxVal, this.x));
        this.y = Math.max(minVal, Math.min(maxVal, this.y));
        this.z = Math.max(minVal, Math.min(maxVal, this.z));
        this.w = Math.max(minVal, Math.min(maxVal, this.w));
        return this;
    }
    clampLength(min, max) {
        const length = this.length();
        return this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));
    }
    floor() {
        this.x = Math.floor(this.x);
        this.y = Math.floor(this.y);
        this.z = Math.floor(this.z);
        this.w = Math.floor(this.w);
        return this;
    }
    ceil() {
        this.x = Math.ceil(this.x);
        this.y = Math.ceil(this.y);
        this.z = Math.ceil(this.z);
        this.w = Math.ceil(this.w);
        return this;
    }
    round() {
        this.x = Math.round(this.x);
        this.y = Math.round(this.y);
        this.z = Math.round(this.z);
        this.w = Math.round(this.w);
        return this;
    }
    roundToZero() {
        this.x = Math.trunc(this.x);
        this.y = Math.trunc(this.y);
        this.z = Math.trunc(this.z);
        this.w = Math.trunc(this.w);
        return this;
    }
    negate() {
        this.x = -this.x;
        this.y = -this.y;
        this.z = -this.z;
        this.w = -this.w;
        return this;
    }
    dot(v) {
        return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;
    }
    lengthSq() {
        return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
    }
    length() {
        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
    }
    manhattanLength() {
        return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w);
    }
    normalize() {
        return this.divideScalar(this.length() || 1);
    }
    setLength(length) {
        return this.normalize().multiplyScalar(length);
    }
    lerp(v, alpha) {
        this.x += (v.x - this.x) * alpha;
        this.y += (v.y - this.y) * alpha;
        this.z += (v.z - this.z) * alpha;
        this.w += (v.w - this.w) * alpha;
        return this;
    }
    lerpVectors(v1, v2, alpha) {
        this.x = v1.x + (v2.x - v1.x) * alpha;
        this.y = v1.y + (v2.y - v1.y) * alpha;
        this.z = v1.z + (v2.z - v1.z) * alpha;
        this.w = v1.w + (v2.w - v1.w) * alpha;
        return this;
    }
    equals(v) {
        return v.x === this.x && v.y === this.y && v.z === this.z && v.w === this.w;
    }
    fromArray(array, offset = 0) {
        this.x = array[offset];
        this.y = array[offset + 1];
        this.z = array[offset + 2];
        this.w = array[offset + 3];
        return this;
    }
    toArray(array = [], offset = 0) {
        array[offset] = this.x;
        array[offset + 1] = this.y;
        array[offset + 2] = this.z;
        array[offset + 3] = this.w;
        return array;
    }
    fromBufferAttribute(attribute, index) {
        this.x = attribute.getX(index);
        this.y = attribute.getY(index);
        this.z = attribute.getZ(index);
        this.w = attribute.getW(index);
        return this;
    }
    random() {
        this.x = Math.random();
        this.y = Math.random();
        this.z = Math.random();
        this.w = Math.random();
        return this;
    }
    *[Symbol.iterator]() {
        yield this.x;
        yield this.y;
        yield this.z;
        yield this.w;
    }
}
/*
 In options, we can specify:
 * Texture parameters for an auto-generated target texture
 * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers
*/ class RenderTarget extends EventDispatcher {
    constructor(width = 1, height = 1, options = {}){
        super();
        this.isRenderTarget = true;
        this.width = width;
        this.height = height;
        this.depth = 1;
        this.scissor = new Vector4(0, 0, width, height);
        this.scissorTest = false;
        this.viewport = new Vector4(0, 0, width, height);
        const image = {
            width: width,
            height: height,
            depth: 1
        };
        if (options.encoding !== undefined) {
            // @deprecated, r152
            warnOnce("THREE.WebGLRenderTarget: option.encoding has been replaced by option.colorSpace.");
            options.colorSpace = options.encoding === sRGBEncoding ? SRGBColorSpace : NoColorSpace;
        }
        this.texture = new Texture(image, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.colorSpace);
        this.texture.isRenderTargetTexture = true;
        this.texture.flipY = false;
        this.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;
        this.texture.internalFormat = options.internalFormat !== undefined ? options.internalFormat : null;
        this.texture.minFilter = options.minFilter !== undefined ? options.minFilter : LinearFilter;
        this.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;
        this.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : false;
        this.depthTexture = options.depthTexture !== undefined ? options.depthTexture : null;
        this.samples = options.samples !== undefined ? options.samples : 0;
    }
    setSize(width, height, depth = 1) {
        if (this.width !== width || this.height !== height || this.depth !== depth) {
            this.width = width;
            this.height = height;
            this.depth = depth;
            this.texture.image.width = width;
            this.texture.image.height = height;
            this.texture.image.depth = depth;
            this.dispose();
        }
        this.viewport.set(0, 0, width, height);
        this.scissor.set(0, 0, width, height);
    }
    clone() {
        return new this.constructor().copy(this);
    }
    copy(source) {
        this.width = source.width;
        this.height = source.height;
        this.depth = source.depth;
        this.scissor.copy(source.scissor);
        this.scissorTest = source.scissorTest;
        this.viewport.copy(source.viewport);
        this.texture = source.texture.clone();
        this.texture.isRenderTargetTexture = true;
        // ensure image object is not shared, see #20328
        const image = Object.assign({}, source.texture.image);
        this.texture.source = new Source(image);
        this.depthBuffer = source.depthBuffer;
        this.stencilBuffer = source.stencilBuffer;
        if (source.depthTexture !== null) this.depthTexture = source.depthTexture.clone();
        this.samples = source.samples;
        return this;
    }
    dispose() {
        this.dispatchEvent({
            type: "dispose"
        });
    }
}
class WebGLRenderTarget extends RenderTarget {
    constructor(width = 1, height = 1, options = {}){
        super(width, height, options);
        this.isWebGLRenderTarget = true;
    }
}
class DataArrayTexture extends Texture {
    constructor(data = null, width = 1, height = 1, depth = 1){
        super(null);
        this.isDataArrayTexture = true;
        this.image = {
            data,
            width,
            height,
            depth
        };
        this.magFilter = NearestFilter;
        this.minFilter = NearestFilter;
        this.wrapR = ClampToEdgeWrapping;
        this.generateMipmaps = false;
        this.flipY = false;
        this.unpackAlignment = 1;
    }
}
class WebGLArrayRenderTarget extends WebGLRenderTarget {
    constructor(width = 1, height = 1, depth = 1){
        super(width, height);
        this.isWebGLArrayRenderTarget = true;
        this.depth = depth;
        this.texture = new DataArrayTexture(null, width, height, depth);
        this.texture.isRenderTargetTexture = true;
    }
}
class Data3DTexture extends Texture {
    constructor(data = null, width = 1, height = 1, depth = 1){
        // We're going to add .setXXX() methods for setting properties later.
        // Users can still set in DataTexture3D directly.
        //
        //	const texture = new THREE.DataTexture3D( data, width, height, depth );
        // 	texture.anisotropy = 16;
        //
        // See #14839
        super(null);
        this.isData3DTexture = true;
        this.image = {
            data,
            width,
            height,
            depth
        };
        this.magFilter = NearestFilter;
        this.minFilter = NearestFilter;
        this.wrapR = ClampToEdgeWrapping;
        this.generateMipmaps = false;
        this.flipY = false;
        this.unpackAlignment = 1;
    }
}
class WebGL3DRenderTarget extends WebGLRenderTarget {
    constructor(width = 1, height = 1, depth = 1){
        super(width, height);
        this.isWebGL3DRenderTarget = true;
        this.depth = depth;
        this.texture = new Data3DTexture(null, width, height, depth);
        this.texture.isRenderTargetTexture = true;
    }
}
class WebGLMultipleRenderTargets extends WebGLRenderTarget {
    constructor(width = 1, height = 1, count = 1, options = {}){
        super(width, height, options);
        this.isWebGLMultipleRenderTargets = true;
        const texture = this.texture;
        this.texture = [];
        for(let i = 0; i < count; i++){
            this.texture[i] = texture.clone();
            this.texture[i].isRenderTargetTexture = true;
        }
    }
    setSize(width, height, depth = 1) {
        if (this.width !== width || this.height !== height || this.depth !== depth) {
            this.width = width;
            this.height = height;
            this.depth = depth;
            for(let i = 0, il = this.texture.length; i < il; i++){
                this.texture[i].image.width = width;
                this.texture[i].image.height = height;
                this.texture[i].image.depth = depth;
            }
            this.dispose();
        }
        this.viewport.set(0, 0, width, height);
        this.scissor.set(0, 0, width, height);
    }
    copy(source) {
        this.dispose();
        this.width = source.width;
        this.height = source.height;
        this.depth = source.depth;
        this.scissor.copy(source.scissor);
        this.scissorTest = source.scissorTest;
        this.viewport.copy(source.viewport);
        this.depthBuffer = source.depthBuffer;
        this.stencilBuffer = source.stencilBuffer;
        if (source.depthTexture !== null) this.depthTexture = source.depthTexture.clone();
        this.texture.length = 0;
        for(let i = 0, il = source.texture.length; i < il; i++){
            this.texture[i] = source.texture[i].clone();
            this.texture[i].isRenderTargetTexture = true;
        }
        return this;
    }
}
class Quaternion {
    constructor(x = 0, y = 0, z = 0, w = 1){
        this.isQuaternion = true;
        this._x = x;
        this._y = y;
        this._z = z;
        this._w = w;
    }
    static slerpFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t) {
        // fuzz-free, array-based Quaternion SLERP operation
        let x0 = src0[srcOffset0 + 0], y0 = src0[srcOffset0 + 1], z0 = src0[srcOffset0 + 2], w0 = src0[srcOffset0 + 3];
        const x1 = src1[srcOffset1 + 0], y1 = src1[srcOffset1 + 1], z1 = src1[srcOffset1 + 2], w1 = src1[srcOffset1 + 3];
        if (t === 0) {
            dst[dstOffset + 0] = x0;
            dst[dstOffset + 1] = y0;
            dst[dstOffset + 2] = z0;
            dst[dstOffset + 3] = w0;
            return;
        }
        if (t === 1) {
            dst[dstOffset + 0] = x1;
            dst[dstOffset + 1] = y1;
            dst[dstOffset + 2] = z1;
            dst[dstOffset + 3] = w1;
            return;
        }
        if (w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1) {
            let s = 1 - t;
            const cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1, dir = cos >= 0 ? 1 : -1, sqrSin = 1 - cos * cos;
            // Skip the Slerp for tiny steps to avoid numeric problems:
            if (sqrSin > Number.EPSILON) {
                const sin = Math.sqrt(sqrSin), len = Math.atan2(sin, cos * dir);
                s = Math.sin(s * len) / sin;
                t = Math.sin(t * len) / sin;
            }
            const tDir = t * dir;
            x0 = x0 * s + x1 * tDir;
            y0 = y0 * s + y1 * tDir;
            z0 = z0 * s + z1 * tDir;
            w0 = w0 * s + w1 * tDir;
            // Normalize in case we just did a lerp:
            if (s === 1 - t) {
                const f = 1 / Math.sqrt(x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0);
                x0 *= f;
                y0 *= f;
                z0 *= f;
                w0 *= f;
            }
        }
        dst[dstOffset] = x0;
        dst[dstOffset + 1] = y0;
        dst[dstOffset + 2] = z0;
        dst[dstOffset + 3] = w0;
    }
    static multiplyQuaternionsFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1) {
        const x0 = src0[srcOffset0];
        const y0 = src0[srcOffset0 + 1];
        const z0 = src0[srcOffset0 + 2];
        const w0 = src0[srcOffset0 + 3];
        const x1 = src1[srcOffset1];
        const y1 = src1[srcOffset1 + 1];
        const z1 = src1[srcOffset1 + 2];
        const w1 = src1[srcOffset1 + 3];
        dst[dstOffset] = x0 * w1 + w0 * x1 + y0 * z1 - z0 * y1;
        dst[dstOffset + 1] = y0 * w1 + w0 * y1 + z0 * x1 - x0 * z1;
        dst[dstOffset + 2] = z0 * w1 + w0 * z1 + x0 * y1 - y0 * x1;
        dst[dstOffset + 3] = w0 * w1 - x0 * x1 - y0 * y1 - z0 * z1;
        return dst;
    }
    get x() {
        return this._x;
    }
    set x(value) {
        this._x = value;
        this._onChangeCallback();
    }
    get y() {
        return this._y;
    }
    set y(value) {
        this._y = value;
        this._onChangeCallback();
    }
    get z() {
        return this._z;
    }
    set z(value) {
        this._z = value;
        this._onChangeCallback();
    }
    get w() {
        return this._w;
    }
    set w(value) {
        this._w = value;
        this._onChangeCallback();
    }
    set(x, y, z, w) {
        this._x = x;
        this._y = y;
        this._z = z;
        this._w = w;
        this._onChangeCallback();
        return this;
    }
    clone() {
        return new this.constructor(this._x, this._y, this._z, this._w);
    }
    copy(quaternion) {
        this._x = quaternion.x;
        this._y = quaternion.y;
        this._z = quaternion.z;
        this._w = quaternion.w;
        this._onChangeCallback();
        return this;
    }
    setFromEuler(euler, update) {
        const x = euler._x, y = euler._y, z = euler._z, order = euler._order;
        // http://www.mathworks.com/matlabcentral/fileexchange/
        // 	20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/
        //	content/SpinCalc.m
        const cos = Math.cos;
        const sin = Math.sin;
        const c1 = cos(x / 2);
        const c2 = cos(y / 2);
        const c3 = cos(z / 2);
        const s1 = sin(x / 2);
        const s2 = sin(y / 2);
        const s3 = sin(z / 2);
        switch(order){
            case "XYZ":
                this._x = s1 * c2 * c3 + c1 * s2 * s3;
                this._y = c1 * s2 * c3 - s1 * c2 * s3;
                this._z = c1 * c2 * s3 + s1 * s2 * c3;
                this._w = c1 * c2 * c3 - s1 * s2 * s3;
                break;
            case "YXZ":
                this._x = s1 * c2 * c3 + c1 * s2 * s3;
                this._y = c1 * s2 * c3 - s1 * c2 * s3;
                this._z = c1 * c2 * s3 - s1 * s2 * c3;
                this._w = c1 * c2 * c3 + s1 * s2 * s3;
                break;
            case "ZXY":
                this._x = s1 * c2 * c3 - c1 * s2 * s3;
                this._y = c1 * s2 * c3 + s1 * c2 * s3;
                this._z = c1 * c2 * s3 + s1 * s2 * c3;
                this._w = c1 * c2 * c3 - s1 * s2 * s3;
                break;
            case "ZYX":
                this._x = s1 * c2 * c3 - c1 * s2 * s3;
                this._y = c1 * s2 * c3 + s1 * c2 * s3;
                this._z = c1 * c2 * s3 - s1 * s2 * c3;
                this._w = c1 * c2 * c3 + s1 * s2 * s3;
                break;
            case "YZX":
                this._x = s1 * c2 * c3 + c1 * s2 * s3;
                this._y = c1 * s2 * c3 + s1 * c2 * s3;
                this._z = c1 * c2 * s3 - s1 * s2 * c3;
                this._w = c1 * c2 * c3 - s1 * s2 * s3;
                break;
            case "XZY":
                this._x = s1 * c2 * c3 - c1 * s2 * s3;
                this._y = c1 * s2 * c3 - s1 * c2 * s3;
                this._z = c1 * c2 * s3 + s1 * s2 * c3;
                this._w = c1 * c2 * c3 + s1 * s2 * s3;
                break;
            default:
                console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: " + order);
        }
        if (update !== false) this._onChangeCallback();
        return this;
    }
    setFromAxisAngle(axis, angle) {
        // http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm
        // assumes axis is normalized
        const halfAngle = angle / 2, s = Math.sin(halfAngle);
        this._x = axis.x * s;
        this._y = axis.y * s;
        this._z = axis.z * s;
        this._w = Math.cos(halfAngle);
        this._onChangeCallback();
        return this;
    }
    setFromRotationMatrix(m) {
        // http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm
        // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
        const te = m.elements, m11 = te[0], m12 = te[4], m13 = te[8], m21 = te[1], m22 = te[5], m23 = te[9], m31 = te[2], m32 = te[6], m33 = te[10], trace = m11 + m22 + m33;
        if (trace > 0) {
            const s = 0.5 / Math.sqrt(trace + 1.0);
            this._w = 0.25 / s;
            this._x = (m32 - m23) * s;
            this._y = (m13 - m31) * s;
            this._z = (m21 - m12) * s;
        } else if (m11 > m22 && m11 > m33) {
            const s = 2.0 * Math.sqrt(1.0 + m11 - m22 - m33);
            this._w = (m32 - m23) / s;
            this._x = 0.25 * s;
            this._y = (m12 + m21) / s;
            this._z = (m13 + m31) / s;
        } else if (m22 > m33) {
            const s = 2.0 * Math.sqrt(1.0 + m22 - m11 - m33);
            this._w = (m13 - m31) / s;
            this._x = (m12 + m21) / s;
            this._y = 0.25 * s;
            this._z = (m23 + m32) / s;
        } else {
            const s = 2.0 * Math.sqrt(1.0 + m33 - m11 - m22);
            this._w = (m21 - m12) / s;
            this._x = (m13 + m31) / s;
            this._y = (m23 + m32) / s;
            this._z = 0.25 * s;
        }
        this._onChangeCallback();
        return this;
    }
    setFromUnitVectors(vFrom, vTo) {
        // assumes direction vectors vFrom and vTo are normalized
        let r = vFrom.dot(vTo) + 1;
        if (r < Number.EPSILON) {
            // vFrom and vTo point in opposite directions
            r = 0;
            if (Math.abs(vFrom.x) > Math.abs(vFrom.z)) {
                this._x = -vFrom.y;
                this._y = vFrom.x;
                this._z = 0;
                this._w = r;
            } else {
                this._x = 0;
                this._y = -vFrom.z;
                this._z = vFrom.y;
                this._w = r;
            }
        } else {
            // crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3
            this._x = vFrom.y * vTo.z - vFrom.z * vTo.y;
            this._y = vFrom.z * vTo.x - vFrom.x * vTo.z;
            this._z = vFrom.x * vTo.y - vFrom.y * vTo.x;
            this._w = r;
        }
        return this.normalize();
    }
    angleTo(q) {
        return 2 * Math.acos(Math.abs(clamp(this.dot(q), -1, 1)));
    }
    rotateTowards(q, step) {
        const angle = this.angleTo(q);
        if (angle === 0) return this;
        const t = Math.min(1, step / angle);
        this.slerp(q, t);
        return this;
    }
    identity() {
        return this.set(0, 0, 0, 1);
    }
    invert() {
        // quaternion is assumed to have unit length
        return this.conjugate();
    }
    conjugate() {
        this._x *= -1;
        this._y *= -1;
        this._z *= -1;
        this._onChangeCallback();
        return this;
    }
    dot(v) {
        return this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;
    }
    lengthSq() {
        return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;
    }
    length() {
        return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);
    }
    normalize() {
        let l = this.length();
        if (l === 0) {
            this._x = 0;
            this._y = 0;
            this._z = 0;
            this._w = 1;
        } else {
            l = 1 / l;
            this._x = this._x * l;
            this._y = this._y * l;
            this._z = this._z * l;
            this._w = this._w * l;
        }
        this._onChangeCallback();
        return this;
    }
    multiply(q) {
        return this.multiplyQuaternions(this, q);
    }
    premultiply(q) {
        return this.multiplyQuaternions(q, this);
    }
    multiplyQuaternions(a, b) {
        // from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm
        const qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;
        const qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;
        this._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
        this._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
        this._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
        this._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;
        this._onChangeCallback();
        return this;
    }
    slerp(qb, t) {
        if (t === 0) return this;
        if (t === 1) return this.copy(qb);
        const x = this._x, y = this._y, z = this._z, w = this._w;
        // http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/
        let cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;
        if (cosHalfTheta < 0) {
            this._w = -qb._w;
            this._x = -qb._x;
            this._y = -qb._y;
            this._z = -qb._z;
            cosHalfTheta = -cosHalfTheta;
        } else this.copy(qb);
        if (cosHalfTheta >= 1.0) {
            this._w = w;
            this._x = x;
            this._y = y;
            this._z = z;
            return this;
        }
        const sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;
        if (sqrSinHalfTheta <= Number.EPSILON) {
            const s = 1 - t;
            this._w = s * w + t * this._w;
            this._x = s * x + t * this._x;
            this._y = s * y + t * this._y;
            this._z = s * z + t * this._z;
            this.normalize();
            this._onChangeCallback();
            return this;
        }
        const sinHalfTheta = Math.sqrt(sqrSinHalfTheta);
        const halfTheta = Math.atan2(sinHalfTheta, cosHalfTheta);
        const ratioA = Math.sin((1 - t) * halfTheta) / sinHalfTheta, ratioB = Math.sin(t * halfTheta) / sinHalfTheta;
        this._w = w * ratioA + this._w * ratioB;
        this._x = x * ratioA + this._x * ratioB;
        this._y = y * ratioA + this._y * ratioB;
        this._z = z * ratioA + this._z * ratioB;
        this._onChangeCallback();
        return this;
    }
    slerpQuaternions(qa, qb, t) {
        return this.copy(qa).slerp(qb, t);
    }
    random() {
        // Derived from http://planning.cs.uiuc.edu/node198.html
        // Note, this source uses w, x, y, z ordering,
        // so we swap the order below.
        const u1 = Math.random();
        const sqrt1u1 = Math.sqrt(1 - u1);
        const sqrtu1 = Math.sqrt(u1);
        const u2 = 2 * Math.PI * Math.random();
        const u3 = 2 * Math.PI * Math.random();
        return this.set(sqrt1u1 * Math.cos(u2), sqrtu1 * Math.sin(u3), sqrtu1 * Math.cos(u3), sqrt1u1 * Math.sin(u2));
    }
    equals(quaternion) {
        return quaternion._x === this._x && quaternion._y === this._y && quaternion._z === this._z && quaternion._w === this._w;
    }
    fromArray(array, offset = 0) {
        this._x = array[offset];
        this._y = array[offset + 1];
        this._z = array[offset + 2];
        this._w = array[offset + 3];
        this._onChangeCallback();
        return this;
    }
    toArray(array = [], offset = 0) {
        array[offset] = this._x;
        array[offset + 1] = this._y;
        array[offset + 2] = this._z;
        array[offset + 3] = this._w;
        return array;
    }
    fromBufferAttribute(attribute, index) {
        this._x = attribute.getX(index);
        this._y = attribute.getY(index);
        this._z = attribute.getZ(index);
        this._w = attribute.getW(index);
        return this;
    }
    toJSON() {
        return this.toArray();
    }
    _onChange(callback) {
        this._onChangeCallback = callback;
        return this;
    }
    _onChangeCallback() {}
    *[Symbol.iterator]() {
        yield this._x;
        yield this._y;
        yield this._z;
        yield this._w;
    }
}
class Vector3 {
    constructor(x = 0, y = 0, z = 0){
        Vector3.prototype.isVector3 = true;
        this.x = x;
        this.y = y;
        this.z = z;
    }
    set(x, y, z) {
        if (z === undefined) z = this.z; // sprite.scale.set(x,y)
        this.x = x;
        this.y = y;
        this.z = z;
        return this;
    }
    setScalar(scalar) {
        this.x = scalar;
        this.y = scalar;
        this.z = scalar;
        return this;
    }
    setX(x) {
        this.x = x;
        return this;
    }
    setY(y) {
        this.y = y;
        return this;
    }
    setZ(z) {
        this.z = z;
        return this;
    }
    setComponent(index, value) {
        switch(index){
            case 0:
                this.x = value;
                break;
            case 1:
                this.y = value;
                break;
            case 2:
                this.z = value;
                break;
            default:
                throw new Error("index is out of range: " + index);
        }
        return this;
    }
    getComponent(index) {
        switch(index){
            case 0:
                return this.x;
            case 1:
                return this.y;
            case 2:
                return this.z;
            default:
                throw new Error("index is out of range: " + index);
        }
    }
    clone() {
        return new this.constructor(this.x, this.y, this.z);
    }
    copy(v) {
        this.x = v.x;
        this.y = v.y;
        this.z = v.z;
        return this;
    }
    add(v) {
        this.x += v.x;
        this.y += v.y;
        this.z += v.z;
        return this;
    }
    addScalar(s) {
        this.x += s;
        this.y += s;
        this.z += s;
        return this;
    }
    addVectors(a, b) {
        this.x = a.x + b.x;
        this.y = a.y + b.y;
        this.z = a.z + b.z;
        return this;
    }
    addScaledVector(v, s) {
        this.x += v.x * s;
        this.y += v.y * s;
        this.z += v.z * s;
        return this;
    }
    sub(v) {
        this.x -= v.x;
        this.y -= v.y;
        this.z -= v.z;
        return this;
    }
    subScalar(s) {
        this.x -= s;
        this.y -= s;
        this.z -= s;
        return this;
    }
    subVectors(a, b) {
        this.x = a.x - b.x;
        this.y = a.y - b.y;
        this.z = a.z - b.z;
        return this;
    }
    multiply(v) {
        this.x *= v.x;
        this.y *= v.y;
        this.z *= v.z;
        return this;
    }
    multiplyScalar(scalar) {
        this.x *= scalar;
        this.y *= scalar;
        this.z *= scalar;
        return this;
    }
    multiplyVectors(a, b) {
        this.x = a.x * b.x;
        this.y = a.y * b.y;
        this.z = a.z * b.z;
        return this;
    }
    applyEuler(euler) {
        return this.applyQuaternion(_quaternion$4.setFromEuler(euler));
    }
    applyAxisAngle(axis, angle) {
        return this.applyQuaternion(_quaternion$4.setFromAxisAngle(axis, angle));
    }
    applyMatrix3(m) {
        const x = this.x, y = this.y, z = this.z;
        const e = m.elements;
        this.x = e[0] * x + e[3] * y + e[6] * z;
        this.y = e[1] * x + e[4] * y + e[7] * z;
        this.z = e[2] * x + e[5] * y + e[8] * z;
        return this;
    }
    applyNormalMatrix(m) {
        return this.applyMatrix3(m).normalize();
    }
    applyMatrix4(m) {
        const x = this.x, y = this.y, z = this.z;
        const e = m.elements;
        const w = 1 / (e[3] * x + e[7] * y + e[11] * z + e[15]);
        this.x = (e[0] * x + e[4] * y + e[8] * z + e[12]) * w;
        this.y = (e[1] * x + e[5] * y + e[9] * z + e[13]) * w;
        this.z = (e[2] * x + e[6] * y + e[10] * z + e[14]) * w;
        return this;
    }
    applyQuaternion(q) {
        const x = this.x, y = this.y, z = this.z;
        const qx = q.x, qy = q.y, qz = q.z, qw = q.w;
        // calculate quat * vector
        const ix = qw * x + qy * z - qz * y;
        const iy = qw * y + qz * x - qx * z;
        const iz = qw * z + qx * y - qy * x;
        const iw = -qx * x - qy * y - qz * z;
        // calculate result * inverse quat
        this.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;
        this.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;
        this.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;
        return this;
    }
    project(camera) {
        return this.applyMatrix4(camera.matrixWorldInverse).applyMatrix4(camera.projectionMatrix);
    }
    unproject(camera) {
        return this.applyMatrix4(camera.projectionMatrixInverse).applyMatrix4(camera.matrixWorld);
    }
    transformDirection(m) {
        // input: THREE.Matrix4 affine matrix
        // vector interpreted as a direction
        const x = this.x, y = this.y, z = this.z;
        const e = m.elements;
        this.x = e[0] * x + e[4] * y + e[8] * z;
        this.y = e[1] * x + e[5] * y + e[9] * z;
        this.z = e[2] * x + e[6] * y + e[10] * z;
        return this.normalize();
    }
    divide(v) {
        this.x /= v.x;
        this.y /= v.y;
        this.z /= v.z;
        return this;
    }
    divideScalar(scalar) {
        return this.multiplyScalar(1 / scalar);
    }
    min(v) {
        this.x = Math.min(this.x, v.x);
        this.y = Math.min(this.y, v.y);
        this.z = Math.min(this.z, v.z);
        return this;
    }
    max(v) {
        this.x = Math.max(this.x, v.x);
        this.y = Math.max(this.y, v.y);
        this.z = Math.max(this.z, v.z);
        return this;
    }
    clamp(min, max) {
        // assumes min < max, componentwise
        this.x = Math.max(min.x, Math.min(max.x, this.x));
        this.y = Math.max(min.y, Math.min(max.y, this.y));
        this.z = Math.max(min.z, Math.min(max.z, this.z));
        return this;
    }
    clampScalar(minVal, maxVal) {
        this.x = Math.max(minVal, Math.min(maxVal, this.x));
        this.y = Math.max(minVal, Math.min(maxVal, this.y));
        this.z = Math.max(minVal, Math.min(maxVal, this.z));
        return this;
    }
    clampLength(min, max) {
        const length = this.length();
        return this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));
    }
    floor() {
        this.x = Math.floor(this.x);
        this.y = Math.floor(this.y);
        this.z = Math.floor(this.z);
        return this;
    }
    ceil() {
        this.x = Math.ceil(this.x);
        this.y = Math.ceil(this.y);
        this.z = Math.ceil(this.z);
        return this;
    }
    round() {
        this.x = Math.round(this.x);
        this.y = Math.round(this.y);
        this.z = Math.round(this.z);
        return this;
    }
    roundToZero() {
        this.x = Math.trunc(this.x);
        this.y = Math.trunc(this.y);
        this.z = Math.trunc(this.z);
        return this;
    }
    negate() {
        this.x = -this.x;
        this.y = -this.y;
        this.z = -this.z;
        return this;
    }
    dot(v) {
        return this.x * v.x + this.y * v.y + this.z * v.z;
    }
    // TODO lengthSquared?
    lengthSq() {
        return this.x * this.x + this.y * this.y + this.z * this.z;
    }
    length() {
        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
    }
    manhattanLength() {
        return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);
    }
    normalize() {
        return this.divideScalar(this.length() || 1);
    }
    setLength(length) {
        return this.normalize().multiplyScalar(length);
    }
    lerp(v, alpha) {
        this.x += (v.x - this.x) * alpha;
        this.y += (v.y - this.y) * alpha;
        this.z += (v.z - this.z) * alpha;
        return this;
    }
    lerpVectors(v1, v2, alpha) {
        this.x = v1.x + (v2.x - v1.x) * alpha;
        this.y = v1.y + (v2.y - v1.y) * alpha;
        this.z = v1.z + (v2.z - v1.z) * alpha;
        return this;
    }
    cross(v) {
        return this.crossVectors(this, v);
    }
    crossVectors(a, b) {
        const ax = a.x, ay = a.y, az = a.z;
        const bx = b.x, by = b.y, bz = b.z;
        this.x = ay * bz - az * by;
        this.y = az * bx - ax * bz;
        this.z = ax * by - ay * bx;
        return this;
    }
    projectOnVector(v) {
        const denominator = v.lengthSq();
        if (denominator === 0) return this.set(0, 0, 0);
        const scalar = v.dot(this) / denominator;
        return this.copy(v).multiplyScalar(scalar);
    }
    projectOnPlane(planeNormal) {
        _vector$b.copy(this).projectOnVector(planeNormal);
        return this.sub(_vector$b);
    }
    reflect(normal) {
        // reflect incident vector off plane orthogonal to normal
        // normal is assumed to have unit length
        return this.sub(_vector$b.copy(normal).multiplyScalar(2 * this.dot(normal)));
    }
    angleTo(v) {
        const denominator = Math.sqrt(this.lengthSq() * v.lengthSq());
        if (denominator === 0) return Math.PI / 2;
        const theta = this.dot(v) / denominator;
        // clamp, to handle numerical problems
        return Math.acos(clamp(theta, -1, 1));
    }
    distanceTo(v) {
        return Math.sqrt(this.distanceToSquared(v));
    }
    distanceToSquared(v) {
        const dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;
        return dx * dx + dy * dy + dz * dz;
    }
    manhattanDistanceTo(v) {
        return Math.abs(this.x - v.x) + Math.abs(this.y - v.y) + Math.abs(this.z - v.z);
    }
    setFromSpherical(s) {
        return this.setFromSphericalCoords(s.radius, s.phi, s.theta);
    }
    setFromSphericalCoords(radius, phi, theta) {
        const sinPhiRadius = Math.sin(phi) * radius;
        this.x = sinPhiRadius * Math.sin(theta);
        this.y = Math.cos(phi) * radius;
        this.z = sinPhiRadius * Math.cos(theta);
        return this;
    }
    setFromCylindrical(c) {
        return this.setFromCylindricalCoords(c.radius, c.theta, c.y);
    }
    setFromCylindricalCoords(radius, theta, y) {
        this.x = radius * Math.sin(theta);
        this.y = y;
        this.z = radius * Math.cos(theta);
        return this;
    }
    setFromMatrixPosition(m) {
        const e = m.elements;
        this.x = e[12];
        this.y = e[13];
        this.z = e[14];
        return this;
    }
    setFromMatrixScale(m) {
        const sx = this.setFromMatrixColumn(m, 0).length();
        const sy = this.setFromMatrixColumn(m, 1).length();
        const sz = this.setFromMatrixColumn(m, 2).length();
        this.x = sx;
        this.y = sy;
        this.z = sz;
        return this;
    }
    setFromMatrixColumn(m, index) {
        return this.fromArray(m.elements, index * 4);
    }
    setFromMatrix3Column(m, index) {
        return this.fromArray(m.elements, index * 3);
    }
    setFromEuler(e) {
        this.x = e._x;
        this.y = e._y;
        this.z = e._z;
        return this;
    }
    setFromColor(c) {
        this.x = c.r;
        this.y = c.g;
        this.z = c.b;
        return this;
    }
    equals(v) {
        return v.x === this.x && v.y === this.y && v.z === this.z;
    }
    fromArray(array, offset = 0) {
        this.x = array[offset];
        this.y = array[offset + 1];
        this.z = array[offset + 2];
        return this;
    }
    toArray(array = [], offset = 0) {
        array[offset] = this.x;
        array[offset + 1] = this.y;
        array[offset + 2] = this.z;
        return array;
    }
    fromBufferAttribute(attribute, index) {
        this.x = attribute.getX(index);
        this.y = attribute.getY(index);
        this.z = attribute.getZ(index);
        return this;
    }
    random() {
        this.x = Math.random();
        this.y = Math.random();
        this.z = Math.random();
        return this;
    }
    randomDirection() {
        // Derived from https://mathworld.wolfram.com/SpherePointPicking.html
        const u = (Math.random() - 0.5) * 2;
        const t = Math.random() * Math.PI * 2;
        const f = Math.sqrt(1 - u ** 2);
        this.x = f * Math.cos(t);
        this.y = f * Math.sin(t);
        this.z = u;
        return this;
    }
    *[Symbol.iterator]() {
        yield this.x;
        yield this.y;
        yield this.z;
    }
}
const _vector$b = /*@__PURE__*/ new Vector3();
const _quaternion$4 = /*@__PURE__*/ new Quaternion();
class Box3 {
    constructor(min = new Vector3(Infinity, Infinity, Infinity), max = new Vector3(-Infinity, -Infinity, -Infinity)){
        this.isBox3 = true;
        this.min = min;
        this.max = max;
    }
    set(min, max) {
        this.min.copy(min);
        this.max.copy(max);
        return this;
    }
    setFromArray(array) {
        this.makeEmpty();
        for(let i = 0, il = array.length; i < il; i += 3)this.expandByPoint(_vector$a.fromArray(array, i));
        return this;
    }
    setFromBufferAttribute(attribute) {
        this.makeEmpty();
        for(let i = 0, il = attribute.count; i < il; i++)this.expandByPoint(_vector$a.fromBufferAttribute(attribute, i));
        return this;
    }
    setFromPoints(points) {
        this.makeEmpty();
        for(let i = 0, il = points.length; i < il; i++)this.expandByPoint(points[i]);
        return this;
    }
    setFromCenterAndSize(center, size) {
        const halfSize = _vector$a.copy(size).multiplyScalar(0.5);
        this.min.copy(center).sub(halfSize);
        this.max.copy(center).add(halfSize);
        return this;
    }
    setFromObject(object, precise = false) {
        this.makeEmpty();
        return this.expandByObject(object, precise);
    }
    clone() {
        return new this.constructor().copy(this);
    }
    copy(box) {
        this.min.copy(box.min);
        this.max.copy(box.max);
        return this;
    }
    makeEmpty() {
        this.min.x = this.min.y = this.min.z = Infinity;
        this.max.x = this.max.y = this.max.z = -Infinity;
        return this;
    }
    isEmpty() {
        // this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes
        return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z;
    }
    getCenter(target) {
        return this.isEmpty() ? target.set(0, 0, 0) : target.addVectors(this.min, this.max).multiplyScalar(0.5);
    }
    getSize(target) {
        return this.isEmpty() ? target.set(0, 0, 0) : target.subVectors(this.max, this.min);
    }
    expandByPoint(point) {
        this.min.min(point);
        this.max.max(point);
        return this;
    }
    expandByVector(vector) {
        this.min.sub(vector);
        this.max.add(vector);
        return this;
    }
    expandByScalar(scalar) {
        this.min.addScalar(-scalar);
        this.max.addScalar(scalar);
        return this;
    }
    expandByObject(object, precise = false) {
        // Computes the world-axis-aligned bounding box of an object (including its children),
        // accounting for both the object's, and children's, world transforms
        object.updateWorldMatrix(false, false);
        if (object.boundingBox !== undefined) {
            if (object.boundingBox === null) object.computeBoundingBox();
            _box$3.copy(object.boundingBox);
            _box$3.applyMatrix4(object.matrixWorld);
            this.union(_box$3);
        } else {
            const geometry = object.geometry;
            if (geometry !== undefined) {
                if (precise && geometry.attributes !== undefined && geometry.attributes.position !== undefined) {
                    const position = geometry.attributes.position;
                    for(let i = 0, l = position.count; i < l; i++){
                        _vector$a.fromBufferAttribute(position, i).applyMatrix4(object.matrixWorld);
                        this.expandByPoint(_vector$a);
                    }
                } else {
                    if (geometry.boundingBox === null) geometry.computeBoundingBox();
                    _box$3.copy(geometry.boundingBox);
                    _box$3.applyMatrix4(object.matrixWorld);
                    this.union(_box$3);
                }
            }
        }
        const children = object.children;
        for(let i = 0, l = children.length; i < l; i++)this.expandByObject(children[i], precise);
        return this;
    }
    containsPoint(point) {
        return point.x < this.min.x || point.x > this.max.x || point.y < this.min.y || point.y > this.max.y || point.z < this.min.z || point.z > this.max.z ? false : true;
    }
    containsBox(box) {
        return this.min.x <= box.min.x && box.max.x <= this.max.x && this.min.y <= box.min.y && box.max.y <= this.max.y && this.min.z <= box.min.z && box.max.z <= this.max.z;
    }
    getParameter(point, target) {
        // This can potentially have a divide by zero if the box
        // has a size dimension of 0.
        return target.set((point.x - this.min.x) / (this.max.x - this.min.x), (point.y - this.min.y) / (this.max.y - this.min.y), (point.z - this.min.z) / (this.max.z - this.min.z));
    }
    intersectsBox(box) {
        // using 6 splitting planes to rule out intersections.
        return box.max.x < this.min.x || box.min.x > this.max.x || box.max.y < this.min.y || box.min.y > this.max.y || box.max.z < this.min.z || box.min.z > this.max.z ? false : true;
    }
    intersectsSphere(sphere) {
        // Find the point on the AABB closest to the sphere center.
        this.clampPoint(sphere.center, _vector$a);
        // If that point is inside the sphere, the AABB and sphere intersect.
        return _vector$a.distanceToSquared(sphere.center) <= sphere.radius * sphere.radius;
    }
    intersectsPlane(plane) {
        // We compute the minimum and maximum dot product values. If those values
        // are on the same side (back or front) of the plane, then there is no intersection.
        let min, max;
        if (plane.normal.x > 0) {
            min = plane.normal.x * this.min.x;
            max = plane.normal.x * this.max.x;
        } else {
            min = plane.normal.x * this.max.x;
            max = plane.normal.x * this.min.x;
        }
        if (plane.normal.y > 0) {
            min += plane.normal.y * this.min.y;
            max += plane.normal.y * this.max.y;
        } else {
            min += plane.normal.y * this.max.y;
            max += plane.normal.y * this.min.y;
        }
        if (plane.normal.z > 0) {
            min += plane.normal.z * this.min.z;
            max += plane.normal.z * this.max.z;
        } else {
            min += plane.normal.z * this.max.z;
            max += plane.normal.z * this.min.z;
        }
        return min <= -plane.constant && max >= -plane.constant;
    }
    intersectsTriangle(triangle) {
        if (this.isEmpty()) return false;
        // compute box center and extents
        this.getCenter(_center);
        _extents.subVectors(this.max, _center);
        // translate triangle to aabb origin
        _v0$2.subVectors(triangle.a, _center);
        _v1$7.subVectors(triangle.b, _center);
        _v2$4.subVectors(triangle.c, _center);
        // compute edge vectors for triangle
        _f0.subVectors(_v1$7, _v0$2);
        _f1.subVectors(_v2$4, _v1$7);
        _f2.subVectors(_v0$2, _v2$4);
        // test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb
        // make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation
        // axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)
        let axes = [
            0,
            -_f0.z,
            _f0.y,
            0,
            -_f1.z,
            _f1.y,
            0,
            -_f2.z,
            _f2.y,
            _f0.z,
            0,
            -_f0.x,
            _f1.z,
            0,
            -_f1.x,
            _f2.z,
            0,
            -_f2.x,
            -_f0.y,
            _f0.x,
            0,
            -_f1.y,
            _f1.x,
            0,
            -_f2.y,
            _f2.x,
            0
        ];
        if (!satForAxes(axes, _v0$2, _v1$7, _v2$4, _extents)) return false;
        // test 3 face normals from the aabb
        axes = [
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1
        ];
        if (!satForAxes(axes, _v0$2, _v1$7, _v2$4, _extents)) return false;
        // finally testing the face normal of the triangle
        // use already existing triangle edge vectors here
        _triangleNormal.crossVectors(_f0, _f1);
        axes = [
            _triangleNormal.x,
            _triangleNormal.y,
            _triangleNormal.z
        ];
        return satForAxes(axes, _v0$2, _v1$7, _v2$4, _extents);
    }
    clampPoint(point, target) {
        return target.copy(point).clamp(this.min, this.max);
    }
    distanceToPoint(point) {
        return this.clampPoint(point, _vector$a).distanceTo(point);
    }
    getBoundingSphere(target) {
        if (this.isEmpty()) target.makeEmpty();
        else {
            this.getCenter(target.center);
            target.radius = this.getSize(_vector$a).length() * 0.5;
        }
        return target;
    }
    intersect(box) {
        this.min.max(box.min);
        this.max.min(box.max);
        // ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.
        if (this.isEmpty()) this.makeEmpty();
        return this;
    }
    union(box) {
        this.min.min(box.min);
        this.max.max(box.max);
        return this;
    }
    applyMatrix4(matrix) {
        // transform of empty box is an empty box.
        if (this.isEmpty()) return this;
        // NOTE: I am using a binary pattern to specify all 2^3 combinations below
        _points[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(matrix); // 000
        _points[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(matrix); // 001
        _points[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(matrix); // 010
        _points[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(matrix); // 011
        _points[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(matrix); // 100
        _points[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(matrix); // 101
        _points[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(matrix); // 110
        _points[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(matrix); // 111
        this.setFromPoints(_points);
        return this;
    }
    translate(offset) {
        this.min.add(offset);
        this.max.add(offset);
        return this;
    }
    equals(box) {
        return box.min.equals(this.min) && box.max.equals(this.max);
    }
}
const _points = [
    /*@__PURE__*/ new Vector3(),
    /*@__PURE__*/ new Vector3(),
    /*@__PURE__*/ new Vector3(),
    /*@__PURE__*/ new Vector3(),
    /*@__PURE__*/ new Vector3(),
    /*@__PURE__*/ new Vector3(),
    /*@__PURE__*/ new Vector3(),
    /*@__PURE__*/ new Vector3()
];
const _vector$a = /*@__PURE__*/ new Vector3();
const _box$3 = /*@__PURE__*/ new Box3();
// triangle centered vertices
const _v0$2 = /*@__PURE__*/ new Vector3();
const _v1$7 = /*@__PURE__*/ new Vector3();
const _v2$4 = /*@__PURE__*/ new Vector3();
// triangle edge vectors
const _f0 = /*@__PURE__*/ new Vector3();
const _f1 = /*@__PURE__*/ new Vector3();
const _f2 = /*@__PURE__*/ new Vector3();
const _center = /*@__PURE__*/ new Vector3();
const _extents = /*@__PURE__*/ new Vector3();
const _triangleNormal = /*@__PURE__*/ new Vector3();
const _testAxis = /*@__PURE__*/ new Vector3();
function satForAxes(axes, v0, v1, v2, extents) {
    for(let i = 0, j = axes.length - 3; i <= j; i += 3){
        _testAxis.fromArray(axes, i);
        // project the aabb onto the separating axis
        const r = extents.x * Math.abs(_testAxis.x) + extents.y * Math.abs(_testAxis.y) + extents.z * Math.abs(_testAxis.z);
        // project all 3 vertices of the triangle onto the separating axis
        const p0 = v0.dot(_testAxis);
        const p1 = v1.dot(_testAxis);
        const p2 = v2.dot(_testAxis);
        // actual test, basically see if either of the most extreme of the triangle points intersects r
        if (Math.max(-Math.max(p0, p1, p2), Math.min(p0, p1, p2)) > r) // points of the projected triangle are outside the projected half-length of the aabb
        // the axis is separating and we can exit
        return false;
    }
    return true;
}
const _box$2 = /*@__PURE__*/ new Box3();
const _v1$6 = /*@__PURE__*/ new Vector3();
const _v2$3 = /*@__PURE__*/ new Vector3();
class Sphere {
    constructor(center = new Vector3(), radius = -1){
        this.center = center;
        this.radius = radius;
    }
    set(center, radius) {
        this.center.copy(center);
        this.radius = radius;
        return this;
    }
    setFromPoints(points, optionalCenter) {
        const center = this.center;
        if (optionalCenter !== undefined) center.copy(optionalCenter);
        else _box$2.setFromPoints(points).getCenter(center);
        let maxRadiusSq = 0;
        for(let i = 0, il = points.length; i < il; i++)maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(points[i]));
        this.radius = Math.sqrt(maxRadiusSq);
        return this;
    }
    copy(sphere) {
        this.center.copy(sphere.center);
        this.radius = sphere.radius;
        return this;
    }
    isEmpty() {
        return this.radius < 0;
    }
    makeEmpty() {
        this.center.set(0, 0, 0);
        this.radius = -1;
        return this;
    }
    containsPoint(point) {
        return point.distanceToSquared(this.center) <= this.radius * this.radius;
    }
    distanceToPoint(point) {
        return point.distanceTo(this.center) - this.radius;
    }
    intersectsSphere(sphere) {
        const radiusSum = this.radius + sphere.radius;
        return sphere.center.distanceToSquared(this.center) <= radiusSum * radiusSum;
    }
    intersectsBox(box) {
        return box.intersectsSphere(this);
    }
    intersectsPlane(plane) {
        return Math.abs(plane.distanceToPoint(this.center)) <= this.radius;
    }
    clampPoint(point, target) {
        const deltaLengthSq = this.center.distanceToSquared(point);
        target.copy(point);
        if (deltaLengthSq > this.radius * this.radius) {
            target.sub(this.center).normalize();
            target.multiplyScalar(this.radius).add(this.center);
        }
        return target;
    }
    getBoundingBox(target) {
        if (this.isEmpty()) {
            // Empty sphere produces empty bounding box
            target.makeEmpty();
            return target;
        }
        target.set(this.center, this.center);
        target.expandByScalar(this.radius);
        return target;
    }
    applyMatrix4(matrix) {
        this.center.applyMatrix4(matrix);
        this.radius = this.radius * matrix.getMaxScaleOnAxis();
        return this;
    }
    translate(offset) {
        this.center.add(offset);
        return this;
    }
    expandByPoint(point) {
        if (this.isEmpty()) {
            this.center.copy(point);
            this.radius = 0;
            return this;
        }
        _v1$6.subVectors(point, this.center);
        const lengthSq = _v1$6.lengthSq();
        if (lengthSq > this.radius * this.radius) {
            // calculate the minimal sphere
            const length = Math.sqrt(lengthSq);
            const delta = (length - this.radius) * 0.5;
            this.center.addScaledVector(_v1$6, delta / length);
            this.radius += delta;
        }
        return this;
    }
    union(sphere) {
        if (sphere.isEmpty()) return this;
        if (this.isEmpty()) {
            this.copy(sphere);
            return this;
        }
        if (this.center.equals(sphere.center) === true) this.radius = Math.max(this.radius, sphere.radius);
        else {
            _v2$3.subVectors(sphere.center, this.center).setLength(sphere.radius);
            this.expandByPoint(_v1$6.copy(sphere.center).add(_v2$3));
            this.expandByPoint(_v1$6.copy(sphere.center).sub(_v2$3));
        }
        return this;
    }
    equals(sphere) {
        return sphere.center.equals(this.center) && sphere.radius === this.radius;
    }
    clone() {
        return new this.constructor().copy(this);
    }
}
const _vector$9 = /*@__PURE__*/ new Vector3();
const _segCenter = /*@__PURE__*/ new Vector3();
const _segDir = /*@__PURE__*/ new Vector3();
const _diff = /*@__PURE__*/ new Vector3();
const _edge1 = /*@__PURE__*/ new Vector3();
const _edge2 = /*@__PURE__*/ new Vector3();
const _normal$1 = /*@__PURE__*/ new Vector3();
class Ray {
    constructor(origin = new Vector3(), direction = new Vector3(0, 0, -1)){
        this.origin = origin;
        this.direction = direction;
    }
    set(origin, direction) {
        this.origin.copy(origin);
        this.direction.copy(direction);
        return this;
    }
    copy(ray) {
        this.origin.copy(ray.origin);
        this.direction.copy(ray.direction);
        return this;
    }
    at(t, target) {
        return target.copy(this.origin).addScaledVector(this.direction, t);
    }
    lookAt(v) {
        this.direction.copy(v).sub(this.origin).normalize();
        return this;
    }
    recast(t) {
        this.origin.copy(this.at(t, _vector$9));
        return this;
    }
    closestPointToPoint(point, target) {
        target.subVectors(point, this.origin);
        const directionDistance = target.dot(this.direction);
        if (directionDistance < 0) return target.copy(this.origin);
        return target.copy(this.origin).addScaledVector(this.direction, directionDistance);
    }
    distanceToPoint(point) {
        return Math.sqrt(this.distanceSqToPoint(point));
    }
    distanceSqToPoint(point) {
        const directionDistance = _vector$9.subVectors(point, this.origin).dot(this.direction);
        // point behind the ray
        if (directionDistance < 0) return this.origin.distanceToSquared(point);
        _vector$9.copy(this.origin).addScaledVector(this.direction, directionDistance);
        return _vector$9.distanceToSquared(point);
    }
    distanceSqToSegment(v0, v1, optionalPointOnRay, optionalPointOnSegment) {
        // from https://github.com/pmjoniak/GeometricTools/blob/master/GTEngine/Include/Mathematics/GteDistRaySegment.h
        // It returns the min distance between the ray and the segment
        // defined by v0 and v1
        // It can also set two optional targets :
        // - The closest point on the ray
        // - The closest point on the segment
        _segCenter.copy(v0).add(v1).multiplyScalar(0.5);
        _segDir.copy(v1).sub(v0).normalize();
        _diff.copy(this.origin).sub(_segCenter);
        const segExtent = v0.distanceTo(v1) * 0.5;
        const a01 = -this.direction.dot(_segDir);
        const b0 = _diff.dot(this.direction);
        const b1 = -_diff.dot(_segDir);
        const c = _diff.lengthSq();
        const det = Math.abs(1 - a01 * a01);
        let s0, s1, sqrDist, extDet;
        if (det > 0) {
            // The ray and segment are not parallel.
            s0 = a01 * b1 - b0;
            s1 = a01 * b0 - b1;
            extDet = segExtent * det;
            if (s0 >= 0) {
                if (s1 >= -extDet) {
                    if (s1 <= extDet) {
                        // region 0
                        // Minimum at interior points of ray and segment.
                        const invDet = 1 / det;
                        s0 *= invDet;
                        s1 *= invDet;
                        sqrDist = s0 * (s0 + a01 * s1 + 2 * b0) + s1 * (a01 * s0 + s1 + 2 * b1) + c;
                    } else {
                        // region 1
                        s1 = segExtent;
                        s0 = Math.max(0, -(a01 * s1 + b0));
                        sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
                    }
                } else {
                    // region 5
                    s1 = -segExtent;
                    s0 = Math.max(0, -(a01 * s1 + b0));
                    sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
                }
            } else {
                if (s1 <= -extDet) {
                    // region 4
                    s0 = Math.max(0, -(-a01 * segExtent + b0));
                    s1 = s0 > 0 ? -segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);
                    sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
                } else if (s1 <= extDet) {
                    // region 3
                    s0 = 0;
                    s1 = Math.min(Math.max(-segExtent, -b1), segExtent);
                    sqrDist = s1 * (s1 + 2 * b1) + c;
                } else {
                    // region 2
                    s0 = Math.max(0, -(a01 * segExtent + b0));
                    s1 = s0 > 0 ? segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);
                    sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
                }
            }
        } else {
            // Ray and segment are parallel.
            s1 = a01 > 0 ? -segExtent : segExtent;
            s0 = Math.max(0, -(a01 * s1 + b0));
            sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
        }
        if (optionalPointOnRay) optionalPointOnRay.copy(this.origin).addScaledVector(this.direction, s0);
        if (optionalPointOnSegment) optionalPointOnSegment.copy(_segCenter).addScaledVector(_segDir, s1);
        return sqrDist;
    }
    intersectSphere(sphere, target) {
        _vector$9.subVectors(sphere.center, this.origin);
        const tca = _vector$9.dot(this.direction);
        const d2 = _vector$9.dot(_vector$9) - tca * tca;
        const radius2 = sphere.radius * sphere.radius;
        if (d2 > radius2) return null;
        const thc = Math.sqrt(radius2 - d2);
        // t0 = first intersect point - entrance on front of sphere
        const t0 = tca - thc;
        // t1 = second intersect point - exit point on back of sphere
        const t1 = tca + thc;
        // test to see if t1 is behind the ray - if so, return null
        if (t1 < 0) return null;
        // test to see if t0 is behind the ray:
        // if it is, the ray is inside the sphere, so return the second exit point scaled by t1,
        // in order to always return an intersect point that is in front of the ray.
        if (t0 < 0) return this.at(t1, target);
        // else t0 is in front of the ray, so return the first collision point scaled by t0
        return this.at(t0, target);
    }
    intersectsSphere(sphere) {
        return this.distanceSqToPoint(sphere.center) <= sphere.radius * sphere.radius;
    }
    distanceToPlane(plane) {
        const denominator = plane.normal.dot(this.direction);
        if (denominator === 0) {
            // line is coplanar, return origin
            if (plane.distanceToPoint(this.origin) === 0) return 0;
            // Null is preferable to undefined since undefined means.... it is undefined
            return null;
        }
        const t = -(this.origin.dot(plane.normal) + plane.constant) / denominator;
        // Return if the ray never intersects the plane
        return t >= 0 ? t : null;
    }
    intersectPlane(plane, target) {
        const t = this.distanceToPlane(plane);
        if (t === null) return null;
        return this.at(t, target);
    }
    intersectsPlane(plane) {
        // check if the ray lies on the plane first
        const distToPoint = plane.distanceToPoint(this.origin);
        if (distToPoint === 0) return true;
        const denominator = plane.normal.dot(this.direction);
        if (denominator * distToPoint < 0) return true;
        // ray origin is behind the plane (and is pointing behind it)
        return false;
    }
    intersectBox(box, target) {
        let tmin, tmax, tymin, tymax, tzmin, tzmax;
        const invdirx = 1 / this.direction.x, invdiry = 1 / this.direction.y, invdirz = 1 / this.direction.z;
        const origin = this.origin;
        if (invdirx >= 0) {
            tmin = (box.min.x - origin.x) * invdirx;
            tmax = (box.max.x - origin.x) * invdirx;
        } else {
            tmin = (box.max.x - origin.x) * invdirx;
            tmax = (box.min.x - origin.x) * invdirx;
        }
        if (invdiry >= 0) {
            tymin = (box.min.y - origin.y) * invdiry;
            tymax = (box.max.y - origin.y) * invdiry;
        } else {
            tymin = (box.max.y - origin.y) * invdiry;
            tymax = (box.min.y - origin.y) * invdiry;
        }
        if (tmin > tymax || tymin > tmax) return null;
        if (tymin > tmin || isNaN(tmin)) tmin = tymin;
        if (tymax < tmax || isNaN(tmax)) tmax = tymax;
        if (invdirz >= 0) {
            tzmin = (box.min.z - origin.z) * invdirz;
            tzmax = (box.max.z - origin.z) * invdirz;
        } else {
            tzmin = (box.max.z - origin.z) * invdirz;
            tzmax = (box.min.z - origin.z) * invdirz;
        }
        if (tmin > tzmax || tzmin > tmax) return null;
        if (tzmin > tmin || tmin !== tmin) tmin = tzmin;
        if (tzmax < tmax || tmax !== tmax) tmax = tzmax;
        //return point closest to the ray (positive side)
        if (tmax < 0) return null;
        return this.at(tmin >= 0 ? tmin : tmax, target);
    }
    intersectsBox(box) {
        return this.intersectBox(box, _vector$9) !== null;
    }
    intersectTriangle(a, b, c, backfaceCulling, target) {
        // Compute the offset origin, edges, and normal.
        // from https://github.com/pmjoniak/GeometricTools/blob/master/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h
        _edge1.subVectors(b, a);
        _edge2.subVectors(c, a);
        _normal$1.crossVectors(_edge1, _edge2);
        // Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,
        // E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by
        //   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))
        //   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))
        //   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)
        let DdN = this.direction.dot(_normal$1);
        let sign;
        if (DdN > 0) {
            if (backfaceCulling) return null;
            sign = 1;
        } else if (DdN < 0) {
            sign = -1;
            DdN = -DdN;
        } else return null;
        _diff.subVectors(this.origin, a);
        const DdQxE2 = sign * this.direction.dot(_edge2.crossVectors(_diff, _edge2));
        // b1 < 0, no intersection
        if (DdQxE2 < 0) return null;
        const DdE1xQ = sign * this.direction.dot(_edge1.cross(_diff));
        // b2 < 0, no intersection
        if (DdE1xQ < 0) return null;
        // b1+b2 > 1, no intersection
        if (DdQxE2 + DdE1xQ > DdN) return null;
        // Line intersects triangle, check if ray does.
        const QdN = -sign * _diff.dot(_normal$1);
        // t < 0, no intersection
        if (QdN < 0) return null;
        // Ray intersects triangle.
        return this.at(QdN / DdN, target);
    }
    applyMatrix4(matrix4) {
        this.origin.applyMatrix4(matrix4);
        this.direction.transformDirection(matrix4);
        return this;
    }
    equals(ray) {
        return ray.origin.equals(this.origin) && ray.direction.equals(this.direction);
    }
    clone() {
        return new this.constructor().copy(this);
    }
}
class Matrix4 {
    constructor(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44){
        Matrix4.prototype.isMatrix4 = true;
        this.elements = [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1
        ];
        if (n11 !== undefined) this.set(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44);
    }
    set(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44) {
        const te = this.elements;
        te[0] = n11;
        te[4] = n12;
        te[8] = n13;
        te[12] = n14;
        te[1] = n21;
        te[5] = n22;
        te[9] = n23;
        te[13] = n24;
        te[2] = n31;
        te[6] = n32;
        te[10] = n33;
        te[14] = n34;
        te[3] = n41;
        te[7] = n42;
        te[11] = n43;
        te[15] = n44;
        return this;
    }
    identity() {
        this.set(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        return this;
    }
    clone() {
        return new Matrix4().fromArray(this.elements);
    }
    copy(m) {
        const te = this.elements;
        const me = m.elements;
        te[0] = me[0];
        te[1] = me[1];
        te[2] = me[2];
        te[3] = me[3];
        te[4] = me[4];
        te[5] = me[5];
        te[6] = me[6];
        te[7] = me[7];
        te[8] = me[8];
        te[9] = me[9];
        te[10] = me[10];
        te[11] = me[11];
        te[12] = me[12];
        te[13] = me[13];
        te[14] = me[14];
        te[15] = me[15];
        return this;
    }
    copyPosition(m) {
        const te = this.elements, me = m.elements;
        te[12] = me[12];
        te[13] = me[13];
        te[14] = me[14];
        return this;
    }
    setFromMatrix3(m) {
        const me = m.elements;
        this.set(me[0], me[3], me[6], 0, me[1], me[4], me[7], 0, me[2], me[5], me[8], 0, 0, 0, 0, 1);
        return this;
    }
    extractBasis(xAxis, yAxis, zAxis) {
        xAxis.setFromMatrixColumn(this, 0);
        yAxis.setFromMatrixColumn(this, 1);
        zAxis.setFromMatrixColumn(this, 2);
        return this;
    }
    makeBasis(xAxis, yAxis, zAxis) {
        this.set(xAxis.x, yAxis.x, zAxis.x, 0, xAxis.y, yAxis.y, zAxis.y, 0, xAxis.z, yAxis.z, zAxis.z, 0, 0, 0, 0, 1);
        return this;
    }
    extractRotation(m) {
        // this method does not support reflection matrices
        const te = this.elements;
        const me = m.elements;
        const scaleX = 1 / _v1$5.setFromMatrixColumn(m, 0).length();
        const scaleY = 1 / _v1$5.setFromMatrixColumn(m, 1).length();
        const scaleZ = 1 / _v1$5.setFromMatrixColumn(m, 2).length();
        te[0] = me[0] * scaleX;
        te[1] = me[1] * scaleX;
        te[2] = me[2] * scaleX;
        te[3] = 0;
        te[4] = me[4] * scaleY;
        te[5] = me[5] * scaleY;
        te[6] = me[6] * scaleY;
        te[7] = 0;
        te[8] = me[8] * scaleZ;
        te[9] = me[9] * scaleZ;
        te[10] = me[10] * scaleZ;
        te[11] = 0;
        te[12] = 0;
        te[13] = 0;
        te[14] = 0;
        te[15] = 1;
        return this;
    }
    makeRotationFromEuler(euler) {
        const te = this.elements;
        const x = euler.x, y = euler.y, z = euler.z;
        const a = Math.cos(x), b = Math.sin(x);
        const c = Math.cos(y), d = Math.sin(y);
        const e = Math.cos(z), f = Math.sin(z);
        if (euler.order === "XYZ") {
            const ae = a * e, af = a * f, be = b * e, bf = b * f;
            te[0] = c * e;
            te[4] = -c * f;
            te[8] = d;
            te[1] = af + be * d;
            te[5] = ae - bf * d;
            te[9] = -b * c;
            te[2] = bf - ae * d;
            te[6] = be + af * d;
            te[10] = a * c;
        } else if (euler.order === "YXZ") {
            const ce = c * e, cf = c * f, de = d * e, df = d * f;
            te[0] = ce + df * b;
            te[4] = de * b - cf;
            te[8] = a * d;
            te[1] = a * f;
            te[5] = a * e;
            te[9] = -b;
            te[2] = cf * b - de;
            te[6] = df + ce * b;
            te[10] = a * c;
        } else if (euler.order === "ZXY") {
            const ce = c * e, cf = c * f, de = d * e, df = d * f;
            te[0] = ce - df * b;
            te[4] = -a * f;
            te[8] = de + cf * b;
            te[1] = cf + de * b;
            te[5] = a * e;
            te[9] = df - ce * b;
            te[2] = -a * d;
            te[6] = b;
            te[10] = a * c;
        } else if (euler.order === "ZYX") {
            const ae = a * e, af = a * f, be = b * e, bf = b * f;
            te[0] = c * e;
            te[4] = be * d - af;
            te[8] = ae * d + bf;
            te[1] = c * f;
            te[5] = bf * d + ae;
            te[9] = af * d - be;
            te[2] = -d;
            te[6] = b * c;
            te[10] = a * c;
        } else if (euler.order === "YZX") {
            const ac = a * c, ad = a * d, bc = b * c, bd = b * d;
            te[0] = c * e;
            te[4] = bd - ac * f;
            te[8] = bc * f + ad;
            te[1] = f;
            te[5] = a * e;
            te[9] = -b * e;
            te[2] = -d * e;
            te[6] = ad * f + bc;
            te[10] = ac - bd * f;
        } else if (euler.order === "XZY") {
            const ac = a * c, ad = a * d, bc = b * c, bd = b * d;
            te[0] = c * e;
            te[4] = -f;
            te[8] = d * e;
            te[1] = ac * f + bd;
            te[5] = a * e;
            te[9] = ad * f - bc;
            te[2] = bc * f - ad;
            te[6] = b * e;
            te[10] = bd * f + ac;
        }
        // bottom row
        te[3] = 0;
        te[7] = 0;
        te[11] = 0;
        // last column
        te[12] = 0;
        te[13] = 0;
        te[14] = 0;
        te[15] = 1;
        return this;
    }
    makeRotationFromQuaternion(q) {
        return this.compose(_zero, q, _one);
    }
    lookAt(eye, target, up) {
        const te = this.elements;
        _z.subVectors(eye, target);
        if (_z.lengthSq() === 0) // eye and target are in the same position
        _z.z = 1;
        _z.normalize();
        _x.crossVectors(up, _z);
        if (_x.lengthSq() === 0) {
            // up and z are parallel
            if (Math.abs(up.z) === 1) _z.x += 0.0001;
            else _z.z += 0.0001;
            _z.normalize();
            _x.crossVectors(up, _z);
        }
        _x.normalize();
        _y.crossVectors(_z, _x);
        te[0] = _x.x;
        te[4] = _y.x;
        te[8] = _z.x;
        te[1] = _x.y;
        te[5] = _y.y;
        te[9] = _z.y;
        te[2] = _x.z;
        te[6] = _y.z;
        te[10] = _z.z;
        return this;
    }
    multiply(m) {
        return this.multiplyMatrices(this, m);
    }
    premultiply(m) {
        return this.multiplyMatrices(m, this);
    }
    multiplyMatrices(a, b) {
        const ae = a.elements;
        const be = b.elements;
        const te = this.elements;
        const a11 = ae[0], a12 = ae[4], a13 = ae[8], a14 = ae[12];
        const a21 = ae[1], a22 = ae[5], a23 = ae[9], a24 = ae[13];
        const a31 = ae[2], a32 = ae[6], a33 = ae[10], a34 = ae[14];
        const a41 = ae[3], a42 = ae[7], a43 = ae[11], a44 = ae[15];
        const b11 = be[0], b12 = be[4], b13 = be[8], b14 = be[12];
        const b21 = be[1], b22 = be[5], b23 = be[9], b24 = be[13];
        const b31 = be[2], b32 = be[6], b33 = be[10], b34 = be[14];
        const b41 = be[3], b42 = be[7], b43 = be[11], b44 = be[15];
        te[0] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
        te[4] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
        te[8] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
        te[12] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;
        te[1] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
        te[5] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
        te[9] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
        te[13] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;
        te[2] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
        te[6] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
        te[10] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
        te[14] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;
        te[3] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
        te[7] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
        te[11] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
        te[15] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;
        return this;
    }
    multiplyScalar(s) {
        const te = this.elements;
        te[0] *= s;
        te[4] *= s;
        te[8] *= s;
        te[12] *= s;
        te[1] *= s;
        te[5] *= s;
        te[9] *= s;
        te[13] *= s;
        te[2] *= s;
        te[6] *= s;
        te[10] *= s;
        te[14] *= s;
        te[3] *= s;
        te[7] *= s;
        te[11] *= s;
        te[15] *= s;
        return this;
    }
    determinant() {
        const te = this.elements;
        const n11 = te[0], n12 = te[4], n13 = te[8], n14 = te[12];
        const n21 = te[1], n22 = te[5], n23 = te[9], n24 = te[13];
        const n31 = te[2], n32 = te[6], n33 = te[10], n34 = te[14];
        const n41 = te[3], n42 = te[7], n43 = te[11], n44 = te[15];
        //TODO: make this more efficient
        //( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )
        return n41 * (+n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34) + n42 * (+n11 * n23 * n34 - n11 * n24 * n33 + n14 * n21 * n33 - n13 * n21 * n34 + n13 * n24 * n31 - n14 * n23 * n31) + n43 * (+n11 * n24 * n32 - n11 * n22 * n34 - n14 * n21 * n32 + n12 * n21 * n34 + n14 * n22 * n31 - n12 * n24 * n31) + n44 * (-n13 * n22 * n31 - n11 * n23 * n32 + n11 * n22 * n33 + n13 * n21 * n32 - n12 * n21 * n33 + n12 * n23 * n31);
    }
    transpose() {
        const te = this.elements;
        let tmp;
        tmp = te[1];
        te[1] = te[4];
        te[4] = tmp;
        tmp = te[2];
        te[2] = te[8];
        te[8] = tmp;
        tmp = te[6];
        te[6] = te[9];
        te[9] = tmp;
        tmp = te[3];
        te[3] = te[12];
        te[12] = tmp;
        tmp = te[7];
        te[7] = te[13];
        te[13] = tmp;
        tmp = te[11];
        te[11] = te[14];
        te[14] = tmp;
        return this;
    }
    setPosition(x, y, z) {
        const te = this.elements;
        if (x.isVector3) {
            te[12] = x.x;
            te[13] = x.y;
            te[14] = x.z;
        } else {
            te[12] = x;
            te[13] = y;
            te[14] = z;
        }
        return this;
    }
    invert() {
        // based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm
        const te = this.elements, n11 = te[0], n21 = te[1], n31 = te[2], n41 = te[3], n12 = te[4], n22 = te[5], n32 = te[6], n42 = te[7], n13 = te[8], n23 = te[9], n33 = te[10], n43 = te[11], n14 = te[12], n24 = te[13], n34 = te[14], n44 = te[15], t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44, t12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44, t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44, t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;
        const det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;
        if (det === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        const detInv = 1 / det;
        te[0] = t11 * detInv;
        te[1] = (n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44) * detInv;
        te[2] = (n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44) * detInv;
        te[3] = (n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43) * detInv;
        te[4] = t12 * detInv;
        te[5] = (n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44) * detInv;
        te[6] = (n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44) * detInv;
        te[7] = (n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43) * detInv;
        te[8] = t13 * detInv;
        te[9] = (n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44) * detInv;
        te[10] = (n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44) * detInv;
        te[11] = (n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43) * detInv;
        te[12] = t14 * detInv;
        te[13] = (n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34) * detInv;
        te[14] = (n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34) * detInv;
        te[15] = (n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33) * detInv;
        return this;
    }
    scale(v) {
        const te = this.elements;
        const x = v.x, y = v.y, z = v.z;
        te[0] *= x;
        te[4] *= y;
        te[8] *= z;
        te[1] *= x;
        te[5] *= y;
        te[9] *= z;
        te[2] *= x;
        te[6] *= y;
        te[10] *= z;
        te[3] *= x;
        te[7] *= y;
        te[11] *= z;
        return this;
    }
    getMaxScaleOnAxis() {
        const te = this.elements;
        const scaleXSq = te[0] * te[0] + te[1] * te[1] + te[2] * te[2];
        const scaleYSq = te[4] * te[4] + te[5] * te[5] + te[6] * te[6];
        const scaleZSq = te[8] * te[8] + te[9] * te[9] + te[10] * te[10];
        return Math.sqrt(Math.max(scaleXSq, scaleYSq, scaleZSq));
    }
    makeTranslation(x, y, z) {
        if (x.isVector3) this.set(1, 0, 0, x.x, 0, 1, 0, x.y, 0, 0, 1, x.z, 0, 0, 0, 1);
        else this.set(1, 0, 0, x, 0, 1, 0, y, 0, 0, 1, z, 0, 0, 0, 1);
        return this;
    }
    makeRotationX(theta) {
        const c = Math.cos(theta), s = Math.sin(theta);
        this.set(1, 0, 0, 0, 0, c, -s, 0, 0, s, c, 0, 0, 0, 0, 1);
        return this;
    }
    makeRotationY(theta) {
        const c = Math.cos(theta), s = Math.sin(theta);
        this.set(c, 0, s, 0, 0, 1, 0, 0, -s, 0, c, 0, 0, 0, 0, 1);
        return this;
    }
    makeRotationZ(theta) {
        const c = Math.cos(theta), s = Math.sin(theta);
        this.set(c, -s, 0, 0, s, c, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        return this;
    }
    makeRotationAxis(axis, angle) {
        // Based on http://www.gamedev.net/reference/articles/article1199.asp
        const c = Math.cos(angle);
        const s = Math.sin(angle);
        const t = 1 - c;
        const x = axis.x, y = axis.y, z = axis.z;
        const tx = t * x, ty = t * y;
        this.set(tx * x + c, tx * y - s * z, tx * z + s * y, 0, tx * y + s * z, ty * y + c, ty * z - s * x, 0, tx * z - s * y, ty * z + s * x, t * z * z + c, 0, 0, 0, 0, 1);
        return this;
    }
    makeScale(x, y, z) {
        this.set(x, 0, 0, 0, 0, y, 0, 0, 0, 0, z, 0, 0, 0, 0, 1);
        return this;
    }
    makeShear(xy, xz, yx, yz, zx, zy) {
        this.set(1, yx, zx, 0, xy, 1, zy, 0, xz, yz, 1, 0, 0, 0, 0, 1);
        return this;
    }
    compose(position, quaternion, scale) {
        const te = this.elements;
        const x = quaternion._x, y = quaternion._y, z = quaternion._z, w = quaternion._w;
        const x2 = x + x, y2 = y + y, z2 = z + z;
        const xx = x * x2, xy = x * y2, xz = x * z2;
        const yy = y * y2, yz = y * z2, zz = z * z2;
        const wx = w * x2, wy = w * y2, wz = w * z2;
        const sx = scale.x, sy = scale.y, sz = scale.z;
        te[0] = (1 - (yy + zz)) * sx;
        te[1] = (xy + wz) * sx;
        te[2] = (xz - wy) * sx;
        te[3] = 0;
        te[4] = (xy - wz) * sy;
        te[5] = (1 - (xx + zz)) * sy;
        te[6] = (yz + wx) * sy;
        te[7] = 0;
        te[8] = (xz + wy) * sz;
        te[9] = (yz - wx) * sz;
        te[10] = (1 - (xx + yy)) * sz;
        te[11] = 0;
        te[12] = position.x;
        te[13] = position.y;
        te[14] = position.z;
        te[15] = 1;
        return this;
    }
    decompose(position, quaternion, scale) {
        const te = this.elements;
        let sx = _v1$5.set(te[0], te[1], te[2]).length();
        const sy = _v1$5.set(te[4], te[5], te[6]).length();
        const sz = _v1$5.set(te[8], te[9], te[10]).length();
        // if determine is negative, we need to invert one scale
        const det = this.determinant();
        if (det < 0) sx = -sx;
        position.x = te[12];
        position.y = te[13];
        position.z = te[14];
        // scale the rotation part
        _m1$2.copy(this);
        const invSX = 1 / sx;
        const invSY = 1 / sy;
        const invSZ = 1 / sz;
        _m1$2.elements[0] *= invSX;
        _m1$2.elements[1] *= invSX;
        _m1$2.elements[2] *= invSX;
        _m1$2.elements[4] *= invSY;
        _m1$2.elements[5] *= invSY;
        _m1$2.elements[6] *= invSY;
        _m1$2.elements[8] *= invSZ;
        _m1$2.elements[9] *= invSZ;
        _m1$2.elements[10] *= invSZ;
        quaternion.setFromRotationMatrix(_m1$2);
        scale.x = sx;
        scale.y = sy;
        scale.z = sz;
        return this;
    }
    makePerspective(left, right, top, bottom, near, far, coordinateSystem = WebGLCoordinateSystem) {
        const te = this.elements;
        const x = 2 * near / (right - left);
        const y = 2 * near / (top - bottom);
        const a = (right + left) / (right - left);
        const b = (top + bottom) / (top - bottom);
        let c, d;
        if (coordinateSystem === WebGLCoordinateSystem) {
            c = -(far + near) / (far - near);
            d = -2 * far * near / (far - near);
        } else if (coordinateSystem === WebGPUCoordinateSystem) {
            c = -far / (far - near);
            d = -far * near / (far - near);
        } else throw new Error("THREE.Matrix4.makePerspective(): Invalid coordinate system: " + coordinateSystem);
        te[0] = x;
        te[4] = 0;
        te[8] = a;
        te[12] = 0;
        te[1] = 0;
        te[5] = y;
        te[9] = b;
        te[13] = 0;
        te[2] = 0;
        te[6] = 0;
        te[10] = c;
        te[14] = d;
        te[3] = 0;
        te[7] = 0;
        te[11] = -1;
        te[15] = 0;
        return this;
    }
    makeOrthographic(left, right, top, bottom, near, far, coordinateSystem = WebGLCoordinateSystem) {
        const te = this.elements;
        const w = 1.0 / (right - left);
        const h = 1.0 / (top - bottom);
        const p = 1.0 / (far - near);
        const x = (right + left) * w;
        const y = (top + bottom) * h;
        let z, zInv;
        if (coordinateSystem === WebGLCoordinateSystem) {
            z = (far + near) * p;
            zInv = -2 * p;
        } else if (coordinateSystem === WebGPUCoordinateSystem) {
            z = near * p;
            zInv = -1 * p;
        } else throw new Error("THREE.Matrix4.makeOrthographic(): Invalid coordinate system: " + coordinateSystem);
        te[0] = 2 * w;
        te[4] = 0;
        te[8] = 0;
        te[12] = -x;
        te[1] = 0;
        te[5] = 2 * h;
        te[9] = 0;
        te[13] = -y;
        te[2] = 0;
        te[6] = 0;
        te[10] = zInv;
        te[14] = -z;
        te[3] = 0;
        te[7] = 0;
        te[11] = 0;
        te[15] = 1;
        return this;
    }
    equals(matrix) {
        const te = this.elements;
        const me = matrix.elements;
        for(let i = 0; i < 16; i++){
            if (te[i] !== me[i]) return false;
        }
        return true;
    }
    fromArray(array, offset = 0) {
        for(let i = 0; i < 16; i++)this.elements[i] = array[i + offset];
        return this;
    }
    toArray(array = [], offset = 0) {
        const te = this.elements;
        array[offset] = te[0];
        array[offset + 1] = te[1];
        array[offset + 2] = te[2];
        array[offset + 3] = te[3];
        array[offset + 4] = te[4];
        array[offset + 5] = te[5];
        array[offset + 6] = te[6];
        array[offset + 7] = te[7];
        array[offset + 8] = te[8];
        array[offset + 9] = te[9];
        array[offset + 10] = te[10];
        array[offset + 11] = te[11];
        array[offset + 12] = te[12];
        array[offset + 13] = te[13];
        array[offset + 14] = te[14];
        array[offset + 15] = te[15];
        return array;
    }
}
const _v1$5 = /*@__PURE__*/ new Vector3();
const _m1$2 = /*@__PURE__*/ new Matrix4();
const _zero = /*@__PURE__*/ new Vector3(0, 0, 0);
const _one = /*@__PURE__*/ new Vector3(1, 1, 1);
const _x = /*@__PURE__*/ new Vector3();
const _y = /*@__PURE__*/ new Vector3();
const _z = /*@__PURE__*/ new Vector3();
const _matrix = /*@__PURE__*/ new Matrix4();
const _quaternion$3 = /*@__PURE__*/ new Quaternion();
class Euler {
    constructor(x = 0, y = 0, z = 0, order = Euler.DEFAULT_ORDER){
        this.isEuler = true;
        this._x = x;
        this._y = y;
        this._z = z;
        this._order = order;
    }
    get x() {
        return this._x;
    }
    set x(value) {
        this._x = value;
        this._onChangeCallback();
    }
    get y() {
        return this._y;
    }
    set y(value) {
        this._y = value;
        this._onChangeCallback();
    }
    get z() {
        return this._z;
    }
    set z(value) {
        this._z = value;
        this._onChangeCallback();
    }
    get order() {
        return this._order;
    }
    set order(value) {
        this._order = value;
        this._onChangeCallback();
    }
    set(x, y, z, order = this._order) {
        this._x = x;
        this._y = y;
        this._z = z;
        this._order = order;
        this._onChangeCallback();
        return this;
    }
    clone() {
        return new this.constructor(this._x, this._y, this._z, this._order);
    }
    copy(euler) {
        this._x = euler._x;
        this._y = euler._y;
        this._z = euler._z;
        this._order = euler._order;
        this._onChangeCallback();
        return this;
    }
    setFromRotationMatrix(m, order = this._order, update = true) {
        // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
        const te = m.elements;
        const m11 = te[0], m12 = te[4], m13 = te[8];
        const m21 = te[1], m22 = te[5], m23 = te[9];
        const m31 = te[2], m32 = te[6], m33 = te[10];
        switch(order){
            case "XYZ":
                this._y = Math.asin(clamp(m13, -1, 1));
                if (Math.abs(m13) < 0.9999999) {
                    this._x = Math.atan2(-m23, m33);
                    this._z = Math.atan2(-m12, m11);
                } else {
                    this._x = Math.atan2(m32, m22);
                    this._z = 0;
                }
                break;
            case "YXZ":
                this._x = Math.asin(-clamp(m23, -1, 1));
                if (Math.abs(m23) < 0.9999999) {
                    this._y = Math.atan2(m13, m33);
                    this._z = Math.atan2(m21, m22);
                } else {
                    this._y = Math.atan2(-m31, m11);
                    this._z = 0;
                }
                break;
            case "ZXY":
                this._x = Math.asin(clamp(m32, -1, 1));
                if (Math.abs(m32) < 0.9999999) {
                    this._y = Math.atan2(-m31, m33);
                    this._z = Math.atan2(-m12, m22);
                } else {
                    this._y = 0;
                    this._z = Math.atan2(m21, m11);
                }
                break;
            case "ZYX":
                this._y = Math.asin(-clamp(m31, -1, 1));
                if (Math.abs(m31) < 0.9999999) {
                    this._x = Math.atan2(m32, m33);
                    this._z = Math.atan2(m21, m11);
                } else {
                    this._x = 0;
                    this._z = Math.atan2(-m12, m22);
                }
                break;
            case "YZX":
                this._z = Math.asin(clamp(m21, -1, 1));
                if (Math.abs(m21) < 0.9999999) {
                    this._x = Math.atan2(-m23, m22);
                    this._y = Math.atan2(-m31, m11);
                } else {
                    this._x = 0;
                    this._y = Math.atan2(m13, m33);
                }
                break;
            case "XZY":
                this._z = Math.asin(-clamp(m12, -1, 1));
                if (Math.abs(m12) < 0.9999999) {
                    this._x = Math.atan2(m32, m22);
                    this._y = Math.atan2(m13, m11);
                } else {
                    this._x = Math.atan2(-m23, m33);
                    this._y = 0;
                }
                break;
            default:
                console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: " + order);
        }
        this._order = order;
        if (update === true) this._onChangeCallback();
        return this;
    }
    setFromQuaternion(q, order, update) {
        _matrix.makeRotationFromQuaternion(q);
        return this.setFromRotationMatrix(_matrix, order, update);
    }
    setFromVector3(v, order = this._order) {
        return this.set(v.x, v.y, v.z, order);
    }
    reorder(newOrder) {
        // WARNING: this discards revolution information -bhouston
        _quaternion$3.setFromEuler(this);
        return this.setFromQuaternion(_quaternion$3, newOrder);
    }
    equals(euler) {
        return euler._x === this._x && euler._y === this._y && euler._z === this._z && euler._order === this._order;
    }
    fromArray(array) {
        this._x = array[0];
        this._y = array[1];
        this._z = array[2];
        if (array[3] !== undefined) this._order = array[3];
        this._onChangeCallback();
        return this;
    }
    toArray(array = [], offset = 0) {
        array[offset] = this._x;
        array[offset + 1] = this._y;
        array[offset + 2] = this._z;
        array[offset + 3] = this._order;
        return array;
    }
    _onChange(callback) {
        this._onChangeCallback = callback;
        return this;
    }
    _onChangeCallback() {}
    *[Symbol.iterator]() {
        yield this._x;
        yield this._y;
        yield this._z;
        yield this._order;
    }
}
Euler.DEFAULT_ORDER = "XYZ";
class Layers {
    constructor(){
        this.mask = 1;
    }
    set(channel) {
        this.mask = (1 << channel | 0) >>> 0;
    }
    enable(channel) {
        this.mask |= 1 << channel | 0;
    }
    enableAll() {
        this.mask = -1;
    }
    toggle(channel) {
        this.mask ^= 1 << channel | 0;
    }
    disable(channel) {
        this.mask &= ~(1 << channel | 0);
    }
    disableAll() {
        this.mask = 0;
    }
    test(layers) {
        return (this.mask & layers.mask) !== 0;
    }
    isEnabled(channel) {
        return (this.mask & (1 << channel | 0)) !== 0;
    }
}
let _object3DId = 0;
const _v1$4 = /*@__PURE__*/ new Vector3();
const _q1 = /*@__PURE__*/ new Quaternion();
const _m1$1 = /*@__PURE__*/ new Matrix4();
const _target = /*@__PURE__*/ new Vector3();
const _position$3 = /*@__PURE__*/ new Vector3();
const _scale$2 = /*@__PURE__*/ new Vector3();
const _quaternion$2 = /*@__PURE__*/ new Quaternion();
const _xAxis = /*@__PURE__*/ new Vector3(1, 0, 0);
const _yAxis = /*@__PURE__*/ new Vector3(0, 1, 0);
const _zAxis = /*@__PURE__*/ new Vector3(0, 0, 1);
const _addedEvent = {
    type: "added"
};
const _removedEvent = {
    type: "removed"
};
class Object3D extends EventDispatcher {
    constructor(){
        super();
        this.isObject3D = true;
        Object.defineProperty(this, "id", {
            value: _object3DId++
        });
        this.uuid = generateUUID();
        this.name = "";
        this.type = "Object3D";
        this.parent = null;
        this.children = [];
        this.up = Object3D.DEFAULT_UP.clone();
        const position = new Vector3();
        const rotation = new Euler();
        const quaternion = new Quaternion();
        const scale = new Vector3(1, 1, 1);
        function onRotationChange() {
            quaternion.setFromEuler(rotation, false);
        }
        function onQuaternionChange() {
            rotation.setFromQuaternion(quaternion, undefined, false);
        }
        rotation._onChange(onRotationChange);
        quaternion._onChange(onQuaternionChange);
        Object.defineProperties(this, {
            position: {
                configurable: true,
                enumerable: true,
                value: position
            },
            rotation: {
                configurable: true,
                enumerable: true,
                value: rotation
            },
            quaternion: {
                configurable: true,
                enumerable: true,
                value: quaternion
            },
            scale: {
                configurable: true,
                enumerable: true,
                value: scale
            },
            modelViewMatrix: {
                value: new Matrix4()
            },
            normalMatrix: {
                value: new Matrix3()
            }
        });
        this.matrix = new Matrix4();
        this.matrixWorld = new Matrix4();
        this.matrixAutoUpdate = Object3D.DEFAULT_MATRIX_AUTO_UPDATE;
        this.matrixWorldNeedsUpdate = false;
        this.matrixWorldAutoUpdate = Object3D.DEFAULT_MATRIX_WORLD_AUTO_UPDATE; // checked by the renderer
        this.layers = new Layers();
        this.visible = true;
        this.castShadow = false;
        this.receiveShadow = false;
        this.frustumCulled = true;
        this.renderOrder = 0;
        this.animations = [];
        this.userData = {};
    }
    onBeforeRender() {}
    onAfterRender() {}
    applyMatrix4(matrix) {
        if (this.matrixAutoUpdate) this.updateMatrix();
        this.matrix.premultiply(matrix);
        this.matrix.decompose(this.position, this.quaternion, this.scale);
    }
    applyQuaternion(q) {
        this.quaternion.premultiply(q);
        return this;
    }
    setRotationFromAxisAngle(axis, angle) {
        // assumes axis is normalized
        this.quaternion.setFromAxisAngle(axis, angle);
    }
    setRotationFromEuler(euler) {
        this.quaternion.setFromEuler(euler, true);
    }
    setRotationFromMatrix(m) {
        // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
        this.quaternion.setFromRotationMatrix(m);
    }
    setRotationFromQuaternion(q) {
        // assumes q is normalized
        this.quaternion.copy(q);
    }
    rotateOnAxis(axis, angle) {
        // rotate object on axis in object space
        // axis is assumed to be normalized
        _q1.setFromAxisAngle(axis, angle);
        this.quaternion.multiply(_q1);
        return this;
    }
    rotateOnWorldAxis(axis, angle) {
        // rotate object on axis in world space
        // axis is assumed to be normalized
        // method assumes no rotated parent
        _q1.setFromAxisAngle(axis, angle);
        this.quaternion.premultiply(_q1);
        return this;
    }
    rotateX(angle) {
        return this.rotateOnAxis(_xAxis, angle);
    }
    rotateY(angle) {
        return this.rotateOnAxis(_yAxis, angle);
    }
    rotateZ(angle) {
        return this.rotateOnAxis(_zAxis, angle);
    }
    translateOnAxis(axis, distance) {
        // translate object by distance along axis in object space
        // axis is assumed to be normalized
        _v1$4.copy(axis).applyQuaternion(this.quaternion);
        this.position.add(_v1$4.multiplyScalar(distance));
        return this;
    }
    translateX(distance) {
        return this.translateOnAxis(_xAxis, distance);
    }
    translateY(distance) {
        return this.translateOnAxis(_yAxis, distance);
    }
    translateZ(distance) {
        return this.translateOnAxis(_zAxis, distance);
    }
    localToWorld(vector) {
        this.updateWorldMatrix(true, false);
        return vector.applyMatrix4(this.matrixWorld);
    }
    worldToLocal(vector) {
        this.updateWorldMatrix(true, false);
        return vector.applyMatrix4(_m1$1.copy(this.matrixWorld).invert());
    }
    lookAt(x, y, z) {
        // This method does not support objects having non-uniformly-scaled parent(s)
        if (x.isVector3) _target.copy(x);
        else _target.set(x, y, z);
        const parent = this.parent;
        this.updateWorldMatrix(true, false);
        _position$3.setFromMatrixPosition(this.matrixWorld);
        if (this.isCamera || this.isLight) _m1$1.lookAt(_position$3, _target, this.up);
        else _m1$1.lookAt(_target, _position$3, this.up);
        this.quaternion.setFromRotationMatrix(_m1$1);
        if (parent) {
            _m1$1.extractRotation(parent.matrixWorld);
            _q1.setFromRotationMatrix(_m1$1);
            this.quaternion.premultiply(_q1.invert());
        }
    }
    add(object) {
        if (arguments.length > 1) {
            for(let i = 0; i < arguments.length; i++)this.add(arguments[i]);
            return this;
        }
        if (object === this) {
            console.error("THREE.Object3D.add: object can't be added as a child of itself.", object);
            return this;
        }
        if (object && object.isObject3D) {
            if (object.parent !== null) object.parent.remove(object);
            object.parent = this;
            this.children.push(object);
            object.dispatchEvent(_addedEvent);
        } else console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.", object);
        return this;
    }
    remove(object) {
        if (arguments.length > 1) {
            for(let i = 0; i < arguments.length; i++)this.remove(arguments[i]);
            return this;
        }
        const index = this.children.indexOf(object);
        if (index !== -1) {
            object.parent = null;
            this.children.splice(index, 1);
            object.dispatchEvent(_removedEvent);
        }
        return this;
    }
    removeFromParent() {
        const parent = this.parent;
        if (parent !== null) parent.remove(this);
        return this;
    }
    clear() {
        return this.remove(...this.children);
    }
    attach(object) {
        // adds object as a child of this, while maintaining the object's world transform
        // Note: This method does not support scene graphs having non-uniformly-scaled nodes(s)
        this.updateWorldMatrix(true, false);
        _m1$1.copy(this.matrixWorld).invert();
        if (object.parent !== null) {
            object.parent.updateWorldMatrix(true, false);
            _m1$1.multiply(object.parent.matrixWorld);
        }
        object.applyMatrix4(_m1$1);
        this.add(object);
        object.updateWorldMatrix(false, true);
        return this;
    }
    getObjectById(id) {
        return this.getObjectByProperty("id", id);
    }
    getObjectByName(name) {
        return this.getObjectByProperty("name", name);
    }
    getObjectByProperty(name, value) {
        if (this[name] === value) return this;
        for(let i = 0, l = this.children.length; i < l; i++){
            const child = this.children[i];
            const object = child.getObjectByProperty(name, value);
            if (object !== undefined) return object;
        }
        return undefined;
    }
    getObjectsByProperty(name, value) {
        let result = [];
        if (this[name] === value) result.push(this);
        for(let i = 0, l = this.children.length; i < l; i++){
            const childResult = this.children[i].getObjectsByProperty(name, value);
            if (childResult.length > 0) result = result.concat(childResult);
        }
        return result;
    }
    getWorldPosition(target) {
        this.updateWorldMatrix(true, false);
        return target.setFromMatrixPosition(this.matrixWorld);
    }
    getWorldQuaternion(target) {
        this.updateWorldMatrix(true, false);
        this.matrixWorld.decompose(_position$3, target, _scale$2);
        return target;
    }
    getWorldScale(target) {
        this.updateWorldMatrix(true, false);
        this.matrixWorld.decompose(_position$3, _quaternion$2, target);
        return target;
    }
    getWorldDirection(target) {
        this.updateWorldMatrix(true, false);
        const e = this.matrixWorld.elements;
        return target.set(e[8], e[9], e[10]).normalize();
    }
    raycast() {}
    traverse(callback) {
        callback(this);
        const children = this.children;
        for(let i = 0, l = children.length; i < l; i++)children[i].traverse(callback);
    }
    traverseVisible(callback) {
        if (this.visible === false) return;
        callback(this);
        const children = this.children;
        for(let i = 0, l = children.length; i < l; i++)children[i].traverseVisible(callback);
    }
    traverseAncestors(callback) {
        const parent = this.parent;
        if (parent !== null) {
            callback(parent);
            parent.traverseAncestors(callback);
        }
    }
    updateMatrix() {
        this.matrix.compose(this.position, this.quaternion, this.scale);
        this.matrixWorldNeedsUpdate = true;
    }
    updateMatrixWorld(force) {
        if (this.matrixAutoUpdate) this.updateMatrix();
        if (this.matrixWorldNeedsUpdate || force) {
            if (this.parent === null) this.matrixWorld.copy(this.matrix);
            else this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);
            this.matrixWorldNeedsUpdate = false;
            force = true;
        }
        // update children
        const children = this.children;
        for(let i = 0, l = children.length; i < l; i++){
            const child = children[i];
            if (child.matrixWorldAutoUpdate === true || force === true) child.updateMatrixWorld(force);
        }
    }
    updateWorldMatrix(updateParents, updateChildren) {
        const parent = this.parent;
        if (updateParents === true && parent !== null && parent.matrixWorldAutoUpdate === true) parent.updateWorldMatrix(true, false);
        if (this.matrixAutoUpdate) this.updateMatrix();
        if (this.parent === null) this.matrixWorld.copy(this.matrix);
        else this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);
        // update children
        if (updateChildren === true) {
            const children = this.children;
            for(let i = 0, l = children.length; i < l; i++){
                const child = children[i];
                if (child.matrixWorldAutoUpdate === true) child.updateWorldMatrix(false, true);
            }
        }
    }
    toJSON(meta) {
        // meta is a string when called from JSON.stringify
        const isRootObject = meta === undefined || typeof meta === "string";
        const output = {};
        // meta is a hash used to collect geometries, materials.
        // not providing it implies that this is the root object
        // being serialized.
        if (isRootObject) {
            // initialize meta obj
            meta = {
                geometries: {},
                materials: {},
                textures: {},
                images: {},
                shapes: {},
                skeletons: {},
                animations: {},
                nodes: {}
            };
            output.metadata = {
                version: 4.6,
                type: "Object",
                generator: "Object3D.toJSON"
            };
        }
        // standard Object3D serialization
        const object = {};
        object.uuid = this.uuid;
        object.type = this.type;
        if (this.name !== "") object.name = this.name;
        if (this.castShadow === true) object.castShadow = true;
        if (this.receiveShadow === true) object.receiveShadow = true;
        if (this.visible === false) object.visible = false;
        if (this.frustumCulled === false) object.frustumCulled = false;
        if (this.renderOrder !== 0) object.renderOrder = this.renderOrder;
        if (Object.keys(this.userData).length > 0) object.userData = this.userData;
        object.layers = this.layers.mask;
        object.matrix = this.matrix.toArray();
        object.up = this.up.toArray();
        if (this.matrixAutoUpdate === false) object.matrixAutoUpdate = false;
        // object specific properties
        if (this.isInstancedMesh) {
            object.type = "InstancedMesh";
            object.count = this.count;
            object.instanceMatrix = this.instanceMatrix.toJSON();
            if (this.instanceColor !== null) object.instanceColor = this.instanceColor.toJSON();
        }
        //
        function serialize(library, element) {
            if (library[element.uuid] === undefined) library[element.uuid] = element.toJSON(meta);
            return element.uuid;
        }
        if (this.isScene) {
            if (this.background) {
                if (this.background.isColor) object.background = this.background.toJSON();
                else if (this.background.isTexture) object.background = this.background.toJSON(meta).uuid;
            }
            if (this.environment && this.environment.isTexture && this.environment.isRenderTargetTexture !== true) object.environment = this.environment.toJSON(meta).uuid;
        } else if (this.isMesh || this.isLine || this.isPoints) {
            object.geometry = serialize(meta.geometries, this.geometry);
            const parameters = this.geometry.parameters;
            if (parameters !== undefined && parameters.shapes !== undefined) {
                const shapes = parameters.shapes;
                if (Array.isArray(shapes)) for(let i = 0, l = shapes.length; i < l; i++){
                    const shape = shapes[i];
                    serialize(meta.shapes, shape);
                }
                else serialize(meta.shapes, shapes);
            }
        }
        if (this.isSkinnedMesh) {
            object.bindMode = this.bindMode;
            object.bindMatrix = this.bindMatrix.toArray();
            if (this.skeleton !== undefined) {
                serialize(meta.skeletons, this.skeleton);
                object.skeleton = this.skeleton.uuid;
            }
        }
        if (this.material !== undefined) {
            if (Array.isArray(this.material)) {
                const uuids = [];
                for(let i = 0, l = this.material.length; i < l; i++)uuids.push(serialize(meta.materials, this.material[i]));
                object.material = uuids;
            } else object.material = serialize(meta.materials, this.material);
        }
        //
        if (this.children.length > 0) {
            object.children = [];
            for(let i = 0; i < this.children.length; i++)object.children.push(this.children[i].toJSON(meta).object);
        }
        //
        if (this.animations.length > 0) {
            object.animations = [];
            for(let i = 0; i < this.animations.length; i++){
                const animation = this.animations[i];
                object.animations.push(serialize(meta.animations, animation));
            }
        }
        if (isRootObject) {
            const geometries = extractFromCache(meta.geometries);
            const materials = extractFromCache(meta.materials);
            const textures = extractFromCache(meta.textures);
            const images = extractFromCache(meta.images);
            const shapes = extractFromCache(meta.shapes);
            const skeletons = extractFromCache(meta.skeletons);
            const animations = extractFromCache(meta.animations);
            const nodes = extractFromCache(meta.nodes);
            if (geometries.length > 0) output.geometries = geometries;
            if (materials.length > 0) output.materials = materials;
            if (textures.length > 0) output.textures = textures;
            if (images.length > 0) output.images = images;
            if (shapes.length > 0) output.shapes = shapes;
            if (skeletons.length > 0) output.skeletons = skeletons;
            if (animations.length > 0) output.animations = animations;
            if (nodes.length > 0) output.nodes = nodes;
        }
        output.object = object;
        return output;
        // extract data from the cache hash
        // remove metadata on each item
        // and return as array
        function extractFromCache(cache) {
            const values = [];
            for(const key in cache){
                const data = cache[key];
                delete data.metadata;
                values.push(data);
            }
            return values;
        }
    }
    clone(recursive) {
        return new this.constructor().copy(this, recursive);
    }
    copy(source, recursive = true) {
        this.name = source.name;
        this.up.copy(source.up);
        this.position.copy(source.position);
        this.rotation.order = source.rotation.order;
        this.quaternion.copy(source.quaternion);
        this.scale.copy(source.scale);
        this.matrix.copy(source.matrix);
        this.matrixWorld.copy(source.matrixWorld);
        this.matrixAutoUpdate = source.matrixAutoUpdate;
        this.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;
        this.matrixWorldAutoUpdate = source.matrixWorldAutoUpdate;
        this.layers.mask = source.layers.mask;
        this.visible = source.visible;
        this.castShadow = source.castShadow;
        this.receiveShadow = source.receiveShadow;
        this.frustumCulled = source.frustumCulled;
        this.renderOrder = source.renderOrder;
        this.animations = source.animations.slice();
        this.userData = JSON.parse(JSON.stringify(source.userData));
        if (recursive === true) for(let i = 0; i < source.children.length; i++){
            const child = source.children[i];
            this.add(child.clone());
        }
        return this;
    }
}
Object3D.DEFAULT_UP = /*@__PURE__*/ new Vector3(0, 1, 0);
Object3D.DEFAULT_MATRIX_AUTO_UPDATE = true;
Object3D.DEFAULT_MATRIX_WORLD_AUTO_UPDATE = true;
const _v0$1 = /*@__PURE__*/ new Vector3();
const _v1$3 = /*@__PURE__*/ new Vector3();
const _v2$2 = /*@__PURE__*/ new Vector3();
const _v3$1 = /*@__PURE__*/ new Vector3();
const _vab = /*@__PURE__*/ new Vector3();
const _vac = /*@__PURE__*/ new Vector3();
const _vbc = /*@__PURE__*/ new Vector3();
const _vap = /*@__PURE__*/ new Vector3();
const _vbp = /*@__PURE__*/ new Vector3();
const _vcp = /*@__PURE__*/ new Vector3();
let warnedGetUV = false;
class Triangle {
    constructor(a = new Vector3(), b = new Vector3(), c = new Vector3()){
        this.a = a;
        this.b = b;
        this.c = c;
    }
    static getNormal(a, b, c, target) {
        target.subVectors(c, b);
        _v0$1.subVectors(a, b);
        target.cross(_v0$1);
        const targetLengthSq = target.lengthSq();
        if (targetLengthSq > 0) return target.multiplyScalar(1 / Math.sqrt(targetLengthSq));
        return target.set(0, 0, 0);
    }
    // static/instance method to calculate barycentric coordinates
    // based on: http://www.blackpawn.com/texts/pointinpoly/default.html
    static getBarycoord(point, a, b, c, target) {
        _v0$1.subVectors(c, a);
        _v1$3.subVectors(b, a);
        _v2$2.subVectors(point, a);
        const dot00 = _v0$1.dot(_v0$1);
        const dot01 = _v0$1.dot(_v1$3);
        const dot02 = _v0$1.dot(_v2$2);
        const dot11 = _v1$3.dot(_v1$3);
        const dot12 = _v1$3.dot(_v2$2);
        const denom = dot00 * dot11 - dot01 * dot01;
        // collinear or singular triangle
        if (denom === 0) // arbitrary location outside of triangle?
        // not sure if this is the best idea, maybe should be returning undefined
        return target.set(-2, -1, -1);
        const invDenom = 1 / denom;
        const u = (dot11 * dot02 - dot01 * dot12) * invDenom;
        const v = (dot00 * dot12 - dot01 * dot02) * invDenom;
        // barycentric coordinates must always sum to 1
        return target.set(1 - u - v, v, u);
    }
    static containsPoint(point, a, b, c) {
        this.getBarycoord(point, a, b, c, _v3$1);
        return _v3$1.x >= 0 && _v3$1.y >= 0 && _v3$1.x + _v3$1.y <= 1;
    }
    static getUV(point, p1, p2, p3, uv1, uv2, uv3, target) {
        if (warnedGetUV === false) {
            console.warn("THREE.Triangle.getUV() has been renamed to THREE.Triangle.getInterpolation().");
            warnedGetUV = true;
        }
        return this.getInterpolation(point, p1, p2, p3, uv1, uv2, uv3, target);
    }
    static getInterpolation(point, p1, p2, p3, v1, v2, v3, target) {
        this.getBarycoord(point, p1, p2, p3, _v3$1);
        target.setScalar(0);
        target.addScaledVector(v1, _v3$1.x);
        target.addScaledVector(v2, _v3$1.y);
        target.addScaledVector(v3, _v3$1.z);
        return target;
    }
    static isFrontFacing(a, b, c, direction) {
        _v0$1.subVectors(c, b);
        _v1$3.subVectors(a, b);
        // strictly front facing
        return _v0$1.cross(_v1$3).dot(direction) < 0 ? true : false;
    }
    set(a, b, c) {
        this.a.copy(a);
        this.b.copy(b);
        this.c.copy(c);
        return this;
    }
    setFromPointsAndIndices(points, i0, i1, i2) {
        this.a.copy(points[i0]);
        this.b.copy(points[i1]);
        this.c.copy(points[i2]);
        return this;
    }
    setFromAttributeAndIndices(attribute, i0, i1, i2) {
        this.a.fromBufferAttribute(attribute, i0);
        this.b.fromBufferAttribute(attribute, i1);
        this.c.fromBufferAttribute(attribute, i2);
        return this;
    }
    clone() {
        return new this.constructor().copy(this);
    }
    copy(triangle) {
        this.a.copy(triangle.a);
        this.b.copy(triangle.b);
        this.c.copy(triangle.c);
        return this;
    }
    getArea() {
        _v0$1.subVectors(this.c, this.b);
        _v1$3.subVectors(this.a, this.b);
        return _v0$1.cross(_v1$3).length() * 0.5;
    }
    getMidpoint(target) {
        return target.addVectors(this.a, this.b).add(this.c).multiplyScalar(1 / 3);
    }
    getNormal(target) {
        return Triangle.getNormal(this.a, this.b, this.c, target);
    }
    getPlane(target) {
        return target.setFromCoplanarPoints(this.a, this.b, this.c);
    }
    getBarycoord(point, target) {
        return Triangle.getBarycoord(point, this.a, this.b, this.c, target);
    }
    getUV(point, uv1, uv2, uv3, target) {
        if (warnedGetUV === false) {
            console.warn("THREE.Triangle.getUV() has been renamed to THREE.Triangle.getInterpolation().");
            warnedGetUV = true;
        }
        return Triangle.getInterpolation(point, this.a, this.b, this.c, uv1, uv2, uv3, target);
    }
    getInterpolation(point, v1, v2, v3, target) {
        return Triangle.getInterpolation(point, this.a, this.b, this.c, v1, v2, v3, target);
    }
    containsPoint(point) {
        return Triangle.containsPoint(point, this.a, this.b, this.c);
    }
    isFrontFacing(direction) {
        return Triangle.isFrontFacing(this.a, this.b, this.c, direction);
    }
    intersectsBox(box) {
        return box.intersectsTriangle(this);
    }
    closestPointToPoint(p, target) {
        const a = this.a, b = this.b, c = this.c;
        let v, w;
        // algorithm thanks to Real-Time Collision Detection by Christer Ericson,
        // published by Morgan Kaufmann Publishers, (c) 2005 Elsevier Inc.,
        // under the accompanying license; see chapter 5.1.5 for detailed explanation.
        // basically, we're distinguishing which of the voronoi regions of the triangle
        // the point lies in with the minimum amount of redundant computation.
        _vab.subVectors(b, a);
        _vac.subVectors(c, a);
        _vap.subVectors(p, a);
        const d1 = _vab.dot(_vap);
        const d2 = _vac.dot(_vap);
        if (d1 <= 0 && d2 <= 0) // vertex region of A; barycentric coords (1, 0, 0)
        return target.copy(a);
        _vbp.subVectors(p, b);
        const d3 = _vab.dot(_vbp);
        const d4 = _vac.dot(_vbp);
        if (d3 >= 0 && d4 <= d3) // vertex region of B; barycentric coords (0, 1, 0)
        return target.copy(b);
        const vc = d1 * d4 - d3 * d2;
        if (vc <= 0 && d1 >= 0 && d3 <= 0) {
            v = d1 / (d1 - d3);
            // edge region of AB; barycentric coords (1-v, v, 0)
            return target.copy(a).addScaledVector(_vab, v);
        }
        _vcp.subVectors(p, c);
        const d5 = _vab.dot(_vcp);
        const d6 = _vac.dot(_vcp);
        if (d6 >= 0 && d5 <= d6) // vertex region of C; barycentric coords (0, 0, 1)
        return target.copy(c);
        const vb = d5 * d2 - d1 * d6;
        if (vb <= 0 && d2 >= 0 && d6 <= 0) {
            w = d2 / (d2 - d6);
            // edge region of AC; barycentric coords (1-w, 0, w)
            return target.copy(a).addScaledVector(_vac, w);
        }
        const va = d3 * d6 - d5 * d4;
        if (va <= 0 && d4 - d3 >= 0 && d5 - d6 >= 0) {
            _vbc.subVectors(c, b);
            w = (d4 - d3) / (d4 - d3 + (d5 - d6));
            // edge region of BC; barycentric coords (0, 1-w, w)
            return target.copy(b).addScaledVector(_vbc, w); // edge region of BC
        }
        // face region
        const denom = 1 / (va + vb + vc);
        // u = va * denom
        v = vb * denom;
        w = vc * denom;
        return target.copy(a).addScaledVector(_vab, v).addScaledVector(_vac, w);
    }
    equals(triangle) {
        return triangle.a.equals(this.a) && triangle.b.equals(this.b) && triangle.c.equals(this.c);
    }
}
let _materialId = 0;
class Material extends EventDispatcher {
    constructor(){
        super();
        this.isMaterial = true;
        Object.defineProperty(this, "id", {
            value: _materialId++
        });
        this.uuid = generateUUID();
        this.name = "";
        this.type = "Material";
        this.blending = NormalBlending;
        this.side = FrontSide;
        this.vertexColors = false;
        this.opacity = 1;
        this.transparent = false;
        this.alphaHash = false;
        this.blendSrc = SrcAlphaFactor;
        this.blendDst = OneMinusSrcAlphaFactor;
        this.blendEquation = AddEquation;
        this.blendSrcAlpha = null;
        this.blendDstAlpha = null;
        this.blendEquationAlpha = null;
        this.depthFunc = LessEqualDepth;
        this.depthTest = true;
        this.depthWrite = true;
        this.stencilWriteMask = 0xff;
        this.stencilFunc = AlwaysStencilFunc;
        this.stencilRef = 0;
        this.stencilFuncMask = 0xff;
        this.stencilFail = KeepStencilOp;
        this.stencilZFail = KeepStencilOp;
        this.stencilZPass = KeepStencilOp;
        this.stencilWrite = false;
        this.clippingPlanes = null;
        this.clipIntersection = false;
        this.clipShadows = false;
        this.shadowSide = null;
        this.colorWrite = true;
        this.precision = null; // override the renderer's default precision for this material
        this.polygonOffset = false;
        this.polygonOffsetFactor = 0;
        this.polygonOffsetUnits = 0;
        this.dithering = false;
        this.alphaToCoverage = false;
        this.premultipliedAlpha = false;
        this.forceSinglePass = false;
        this.visible = true;
        this.toneMapped = true;
        this.userData = {};
        this.version = 0;
        this._alphaTest = 0;
    }
    get alphaTest() {
        return this._alphaTest;
    }
    set alphaTest(value) {
        if (this._alphaTest > 0 !== value > 0) this.version++;
        this._alphaTest = value;
    }
    onBuild() {}
    onBeforeRender() {}
    onBeforeCompile() {}
    customProgramCacheKey() {
        return this.onBeforeCompile.toString();
    }
    setValues(values) {
        if (values === undefined) return;
        for(const key in values){
            const newValue = values[key];
            if (newValue === undefined) {
                console.warn(`THREE.Material: parameter '${key}' has value of undefined.`);
                continue;
            }
            const currentValue = this[key];
            if (currentValue === undefined) {
                console.warn(`THREE.Material: '${key}' is not a property of THREE.${this.type}.`);
                continue;
            }
            if (currentValue && currentValue.isColor) currentValue.set(newValue);
            else if (currentValue && currentValue.isVector3 && newValue && newValue.isVector3) currentValue.copy(newValue);
            else this[key] = newValue;
        }
    }
    toJSON(meta) {
        const isRootObject = meta === undefined || typeof meta === "string";
        if (isRootObject) meta = {
            textures: {},
            images: {}
        };
        const data = {
            metadata: {
                version: 4.6,
                type: "Material",
                generator: "Material.toJSON"
            }
        };
        // standard Material serialization
        data.uuid = this.uuid;
        data.type = this.type;
        if (this.name !== "") data.name = this.name;
        if (this.color && this.color.isColor) data.color = this.color.getHex();
        if (this.roughness !== undefined) data.roughness = this.roughness;
        if (this.metalness !== undefined) data.metalness = this.metalness;
        if (this.sheen !== undefined) data.sheen = this.sheen;
        if (this.sheenColor && this.sheenColor.isColor) data.sheenColor = this.sheenColor.getHex();
        if (this.sheenRoughness !== undefined) data.sheenRoughness = this.sheenRoughness;
        if (this.emissive && this.emissive.isColor) data.emissive = this.emissive.getHex();
        if (this.emissiveIntensity && this.emissiveIntensity !== 1) data.emissiveIntensity = this.emissiveIntensity;
        if (this.specular && this.specular.isColor) data.specular = this.specular.getHex();
        if (this.specularIntensity !== undefined) data.specularIntensity = this.specularIntensity;
        if (this.specularColor && this.specularColor.isColor) data.specularColor = this.specularColor.getHex();
        if (this.shininess !== undefined) data.shininess = this.shininess;
        if (this.clearcoat !== undefined) data.clearcoat = this.clearcoat;
        if (this.clearcoatRoughness !== undefined) data.clearcoatRoughness = this.clearcoatRoughness;
        if (this.clearcoatMap && this.clearcoatMap.isTexture) data.clearcoatMap = this.clearcoatMap.toJSON(meta).uuid;
        if (this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture) data.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON(meta).uuid;
        if (this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture) {
            data.clearcoatNormalMap = this.clearcoatNormalMap.toJSON(meta).uuid;
            data.clearcoatNormalScale = this.clearcoatNormalScale.toArray();
        }
        if (this.iridescence !== undefined) data.iridescence = this.iridescence;
        if (this.iridescenceIOR !== undefined) data.iridescenceIOR = this.iridescenceIOR;
        if (this.iridescenceThicknessRange !== undefined) data.iridescenceThicknessRange = this.iridescenceThicknessRange;
        if (this.iridescenceMap && this.iridescenceMap.isTexture) data.iridescenceMap = this.iridescenceMap.toJSON(meta).uuid;
        if (this.iridescenceThicknessMap && this.iridescenceThicknessMap.isTexture) data.iridescenceThicknessMap = this.iridescenceThicknessMap.toJSON(meta).uuid;
        if (this.anisotropy !== undefined) data.anisotropy = this.anisotropy;
        if (this.anisotropyRotation !== undefined) data.anisotropyRotation = this.anisotropyRotation;
        if (this.anisotropyMap && this.anisotropyMap.isTexture) data.anisotropyMap = this.anisotropyMap.toJSON(meta).uuid;
        if (this.map && this.map.isTexture) data.map = this.map.toJSON(meta).uuid;
        if (this.matcap && this.matcap.isTexture) data.matcap = this.matcap.toJSON(meta).uuid;
        if (this.alphaMap && this.alphaMap.isTexture) data.alphaMap = this.alphaMap.toJSON(meta).uuid;
        if (this.lightMap && this.lightMap.isTexture) {
            data.lightMap = this.lightMap.toJSON(meta).uuid;
            data.lightMapIntensity = this.lightMapIntensity;
        }
        if (this.aoMap && this.aoMap.isTexture) {
            data.aoMap = this.aoMap.toJSON(meta).uuid;
            data.aoMapIntensity = this.aoMapIntensity;
        }
        if (this.bumpMap && this.bumpMap.isTexture) {
            data.bumpMap = this.bumpMap.toJSON(meta).uuid;
            data.bumpScale = this.bumpScale;
        }
        if (this.normalMap && this.normalMap.isTexture) {
            data.normalMap = this.normalMap.toJSON(meta).uuid;
            data.normalMapType = this.normalMapType;
            data.normalScale = this.normalScale.toArray();
        }
        if (this.displacementMap && this.displacementMap.isTexture) {
            data.displacementMap = this.displacementMap.toJSON(meta).uuid;
            data.displacementScale = this.displacementScale;
            data.displacementBias = this.displacementBias;
        }
        if (this.roughnessMap && this.roughnessMap.isTexture) data.roughnessMap = this.roughnessMap.toJSON(meta).uuid;
        if (this.metalnessMap && this.metalnessMap.isTexture) data.metalnessMap = this.metalnessMap.toJSON(meta).uuid;
        if (this.emissiveMap && this.emissiveMap.isTexture) data.emissiveMap = this.emissiveMap.toJSON(meta).uuid;
        if (this.specularMap && this.specularMap.isTexture) data.specularMap = this.specularMap.toJSON(meta).uuid;
        if (this.specularIntensityMap && this.specularIntensityMap.isTexture) data.specularIntensityMap = this.specularIntensityMap.toJSON(meta).uuid;
        if (this.specularColorMap && this.specularColorMap.isTexture) data.specularColorMap = this.specularColorMap.toJSON(meta).uuid;
        if (this.envMap && this.envMap.isTexture) {
            data.envMap = this.envMap.toJSON(meta).uuid;
            if (this.combine !== undefined) data.combine = this.combine;
        }
        if (this.envMapIntensity !== undefined) data.envMapIntensity = this.envMapIntensity;
        if (this.reflectivity !== undefined) data.reflectivity = this.reflectivity;
        if (this.refractionRatio !== undefined) data.refractionRatio = this.refractionRatio;
        if (this.gradientMap && this.gradientMap.isTexture) data.gradientMap = this.gradientMap.toJSON(meta).uuid;
        if (this.transmission !== undefined) data.transmission = this.transmission;
        if (this.transmissionMap && this.transmissionMap.isTexture) data.transmissionMap = this.transmissionMap.toJSON(meta).uuid;
        if (this.thickness !== undefined) data.thickness = this.thickness;
        if (this.thicknessMap && this.thicknessMap.isTexture) data.thicknessMap = this.thicknessMap.toJSON(meta).uuid;
        if (this.attenuationDistance !== undefined && this.attenuationDistance !== Infinity) data.attenuationDistance = this.attenuationDistance;
        if (this.attenuationColor !== undefined) data.attenuationColor = this.attenuationColor.getHex();
        if (this.size !== undefined) data.size = this.size;
        if (this.shadowSide !== null) data.shadowSide = this.shadowSide;
        if (this.sizeAttenuation !== undefined) data.sizeAttenuation = this.sizeAttenuation;
        if (this.blending !== NormalBlending) data.blending = this.blending;
        if (this.side !== FrontSide) data.side = this.side;
        if (this.vertexColors) data.vertexColors = true;
        if (this.opacity < 1) data.opacity = this.opacity;
        if (this.transparent === true) data.transparent = this.transparent;
        data.depthFunc = this.depthFunc;
        data.depthTest = this.depthTest;
        data.depthWrite = this.depthWrite;
        data.colorWrite = this.colorWrite;
        data.stencilWrite = this.stencilWrite;
        data.stencilWriteMask = this.stencilWriteMask;
        data.stencilFunc = this.stencilFunc;
        data.stencilRef = this.stencilRef;
        data.stencilFuncMask = this.stencilFuncMask;
        data.stencilFail = this.stencilFail;
        data.stencilZFail = this.stencilZFail;
        data.stencilZPass = this.stencilZPass;
        // rotation (SpriteMaterial)
        if (this.rotation !== undefined && this.rotation !== 0) data.rotation = this.rotation;
        if (this.polygonOffset === true) data.polygonOffset = true;
        if (this.polygonOffsetFactor !== 0) data.polygonOffsetFactor = this.polygonOffsetFactor;
        if (this.polygonOffsetUnits !== 0) data.polygonOffsetUnits = this.polygonOffsetUnits;
        if (this.linewidth !== undefined && this.linewidth !== 1) data.linewidth = this.linewidth;
        if (this.dashSize !== undefined) data.dashSize = this.dashSize;
        if (this.gapSize !== undefined) data.gapSize = this.gapSize;
        if (this.scale !== undefined) data.scale = this.scale;
        if (this.dithering === true) data.dithering = true;
        if (this.alphaTest > 0) data.alphaTest = this.alphaTest;
        if (this.alphaHash === true) data.alphaHash = this.alphaHash;
        if (this.alphaToCoverage === true) data.alphaToCoverage = this.alphaToCoverage;
        if (this.premultipliedAlpha === true) data.premultipliedAlpha = this.premultipliedAlpha;
        if (this.forceSinglePass === true) data.forceSinglePass = this.forceSinglePass;
        if (this.wireframe === true) data.wireframe = this.wireframe;
        if (this.wireframeLinewidth > 1) data.wireframeLinewidth = this.wireframeLinewidth;
        if (this.wireframeLinecap !== "round") data.wireframeLinecap = this.wireframeLinecap;
        if (this.wireframeLinejoin !== "round") data.wireframeLinejoin = this.wireframeLinejoin;
        if (this.flatShading === true) data.flatShading = this.flatShading;
        if (this.visible === false) data.visible = false;
        if (this.toneMapped === false) data.toneMapped = false;
        if (this.fog === false) data.fog = false;
        if (Object.keys(this.userData).length > 0) data.userData = this.userData;
        // TODO: Copied from Object3D.toJSON
        function extractFromCache(cache) {
            const values = [];
            for(const key in cache){
                const data = cache[key];
                delete data.metadata;
                values.push(data);
            }
            return values;
        }
        if (isRootObject) {
            const textures = extractFromCache(meta.textures);
            const images = extractFromCache(meta.images);
            if (textures.length > 0) data.textures = textures;
            if (images.length > 0) data.images = images;
        }
        return data;
    }
    clone() {
        return new this.constructor().copy(this);
    }
    copy(source) {
        this.name = source.name;
        this.blending = source.blending;
        this.side = source.side;
        this.vertexColors = source.vertexColors;
        this.opacity = source.opacity;
        this.transparent = source.transparent;
        this.blendSrc = source.blendSrc;
        this.blendDst = source.blendDst;
        this.blendEquation = source.blendEquation;
        this.blendSrcAlpha = source.blendSrcAlpha;
        this.blendDstAlpha = source.blendDstAlpha;
        this.blendEquationAlpha = source.blendEquationAlpha;
        this.depthFunc = source.depthFunc;
        this.depthTest = source.depthTest;
        this.depthWrite = source.depthWrite;
        this.stencilWriteMask = source.stencilWriteMask;
        this.stencilFunc = source.stencilFunc;
        this.stencilRef = source.stencilRef;
        this.stencilFuncMask = source.stencilFuncMask;
        this.stencilFail = source.stencilFail;
        this.stencilZFail = source.stencilZFail;
        this.stencilZPass = source.stencilZPass;
        this.stencilWrite = source.stencilWrite;
        const srcPlanes = source.clippingPlanes;
        let dstPlanes = null;
        if (srcPlanes !== null) {
            const n = srcPlanes.length;
            dstPlanes = new Array(n);
            for(let i = 0; i !== n; ++i)dstPlanes[i] = srcPlanes[i].clone();
        }
        this.clippingPlanes = dstPlanes;
        this.clipIntersection = source.clipIntersection;
        this.clipShadows = source.clipShadows;
        this.shadowSide = source.shadowSide;
        this.colorWrite = source.colorWrite;
        this.precision = source.precision;
        this.polygonOffset = source.polygonOffset;
        this.polygonOffsetFactor = source.polygonOffsetFactor;
        this.polygonOffsetUnits = source.polygonOffsetUnits;
        this.dithering = source.dithering;
        this.alphaTest = source.alphaTest;
        this.alphaHash = source.alphaHash;
        this.alphaToCoverage = source.alphaToCoverage;
        this.premultipliedAlpha = source.premultipliedAlpha;
        this.forceSinglePass = source.forceSinglePass;
        this.visible = source.visible;
        this.toneMapped = source.toneMapped;
        this.userData = JSON.parse(JSON.stringify(source.userData));
        return this;
    }
    dispose() {
        this.dispatchEvent({
            type: "dispose"
        });
    }
    set needsUpdate(value) {
        if (value === true) this.version++;
    }
}
const _colorKeywords = {
    "aliceblue": 0xF0F8FF,
    "antiquewhite": 0xFAEBD7,
    "aqua": 0x00FFFF,
    "aquamarine": 0x7FFFD4,
    "azure": 0xF0FFFF,
    "beige": 0xF5F5DC,
    "bisque": 0xFFE4C4,
    "black": 0x000000,
    "blanchedalmond": 0xFFEBCD,
    "blue": 0x0000FF,
    "blueviolet": 0x8A2BE2,
    "brown": 0xA52A2A,
    "burlywood": 0xDEB887,
    "cadetblue": 0x5F9EA0,
    "chartreuse": 0x7FFF00,
    "chocolate": 0xD2691E,
    "coral": 0xFF7F50,
    "cornflowerblue": 0x6495ED,
    "cornsilk": 0xFFF8DC,
    "crimson": 0xDC143C,
    "cyan": 0x00FFFF,
    "darkblue": 0x00008B,
    "darkcyan": 0x008B8B,
    "darkgoldenrod": 0xB8860B,
    "darkgray": 0xA9A9A9,
    "darkgreen": 0x006400,
    "darkgrey": 0xA9A9A9,
    "darkkhaki": 0xBDB76B,
    "darkmagenta": 0x8B008B,
    "darkolivegreen": 0x556B2F,
    "darkorange": 0xFF8C00,
    "darkorchid": 0x9932CC,
    "darkred": 0x8B0000,
    "darksalmon": 0xE9967A,
    "darkseagreen": 0x8FBC8F,
    "darkslateblue": 0x483D8B,
    "darkslategray": 0x2F4F4F,
    "darkslategrey": 0x2F4F4F,
    "darkturquoise": 0x00CED1,
    "darkviolet": 0x9400D3,
    "deeppink": 0xFF1493,
    "deepskyblue": 0x00BFFF,
    "dimgray": 0x696969,
    "dimgrey": 0x696969,
    "dodgerblue": 0x1E90FF,
    "firebrick": 0xB22222,
    "floralwhite": 0xFFFAF0,
    "forestgreen": 0x228B22,
    "fuchsia": 0xFF00FF,
    "gainsboro": 0xDCDCDC,
    "ghostwhite": 0xF8F8FF,
    "gold": 0xFFD700,
    "goldenrod": 0xDAA520,
    "gray": 0x808080,
    "green": 0x008000,
    "greenyellow": 0xADFF2F,
    "grey": 0x808080,
    "honeydew": 0xF0FFF0,
    "hotpink": 0xFF69B4,
    "indianred": 0xCD5C5C,
    "indigo": 0x4B0082,
    "ivory": 0xFFFFF0,
    "khaki": 0xF0E68C,
    "lavender": 0xE6E6FA,
    "lavenderblush": 0xFFF0F5,
    "lawngreen": 0x7CFC00,
    "lemonchiffon": 0xFFFACD,
    "lightblue": 0xADD8E6,
    "lightcoral": 0xF08080,
    "lightcyan": 0xE0FFFF,
    "lightgoldenrodyellow": 0xFAFAD2,
    "lightgray": 0xD3D3D3,
    "lightgreen": 0x90EE90,
    "lightgrey": 0xD3D3D3,
    "lightpink": 0xFFB6C1,
    "lightsalmon": 0xFFA07A,
    "lightseagreen": 0x20B2AA,
    "lightskyblue": 0x87CEFA,
    "lightslategray": 0x778899,
    "lightslategrey": 0x778899,
    "lightsteelblue": 0xB0C4DE,
    "lightyellow": 0xFFFFE0,
    "lime": 0x00FF00,
    "limegreen": 0x32CD32,
    "linen": 0xFAF0E6,
    "magenta": 0xFF00FF,
    "maroon": 0x800000,
    "mediumaquamarine": 0x66CDAA,
    "mediumblue": 0x0000CD,
    "mediumorchid": 0xBA55D3,
    "mediumpurple": 0x9370DB,
    "mediumseagreen": 0x3CB371,
    "mediumslateblue": 0x7B68EE,
    "mediumspringgreen": 0x00FA9A,
    "mediumturquoise": 0x48D1CC,
    "mediumvioletred": 0xC71585,
    "midnightblue": 0x191970,
    "mintcream": 0xF5FFFA,
    "mistyrose": 0xFFE4E1,
    "moccasin": 0xFFE4B5,
    "navajowhite": 0xFFDEAD,
    "navy": 0x000080,
    "oldlace": 0xFDF5E6,
    "olive": 0x808000,
    "olivedrab": 0x6B8E23,
    "orange": 0xFFA500,
    "orangered": 0xFF4500,
    "orchid": 0xDA70D6,
    "palegoldenrod": 0xEEE8AA,
    "palegreen": 0x98FB98,
    "paleturquoise": 0xAFEEEE,
    "palevioletred": 0xDB7093,
    "papayawhip": 0xFFEFD5,
    "peachpuff": 0xFFDAB9,
    "peru": 0xCD853F,
    "pink": 0xFFC0CB,
    "plum": 0xDDA0DD,
    "powderblue": 0xB0E0E6,
    "purple": 0x800080,
    "rebeccapurple": 0x663399,
    "red": 0xFF0000,
    "rosybrown": 0xBC8F8F,
    "royalblue": 0x4169E1,
    "saddlebrown": 0x8B4513,
    "salmon": 0xFA8072,
    "sandybrown": 0xF4A460,
    "seagreen": 0x2E8B57,
    "seashell": 0xFFF5EE,
    "sienna": 0xA0522D,
    "silver": 0xC0C0C0,
    "skyblue": 0x87CEEB,
    "slateblue": 0x6A5ACD,
    "slategray": 0x708090,
    "slategrey": 0x708090,
    "snow": 0xFFFAFA,
    "springgreen": 0x00FF7F,
    "steelblue": 0x4682B4,
    "tan": 0xD2B48C,
    "teal": 0x008080,
    "thistle": 0xD8BFD8,
    "tomato": 0xFF6347,
    "turquoise": 0x40E0D0,
    "violet": 0xEE82EE,
    "wheat": 0xF5DEB3,
    "white": 0xFFFFFF,
    "whitesmoke": 0xF5F5F5,
    "yellow": 0xFFFF00,
    "yellowgreen": 0x9ACD32
};
const _hslA = {
    h: 0,
    s: 0,
    l: 0
};
const _hslB = {
    h: 0,
    s: 0,
    l: 0
};
function hue2rgb(p, q, t) {
    if (t < 0) t += 1;
    if (t > 1) t -= 1;
    if (t < 1 / 6) return p + (q - p) * 6 * t;
    if (t < 0.5) return q;
    if (t < 2 / 3) return p + (q - p) * 6 * (2 / 3 - t);
    return p;
}
class Color {
    constructor(r, g, b){
        this.isColor = true;
        this.r = 1;
        this.g = 1;
        this.b = 1;
        return this.set(r, g, b);
    }
    set(r, g, b) {
        if (g === undefined && b === undefined) {
            // r is THREE.Color, hex or string
            const value = r;
            if (value && value.isColor) this.copy(value);
            else if (typeof value === "number") this.setHex(value);
            else if (typeof value === "string") this.setStyle(value);
        } else this.setRGB(r, g, b);
        return this;
    }
    setScalar(scalar) {
        this.r = scalar;
        this.g = scalar;
        this.b = scalar;
        return this;
    }
    setHex(hex, colorSpace1 = SRGBColorSpace) {
        hex = Math.floor(hex);
        this.r = (hex >> 16 & 255) / 255;
        this.g = (hex >> 8 & 255) / 255;
        this.b = (hex & 255) / 255;
        ColorManagement.toWorkingColorSpace(this, colorSpace1);
        return this;
    }
    setRGB(r, g, b, colorSpace1 = ColorManagement.workingColorSpace) {
        this.r = r;
        this.g = g;
        this.b = b;
        ColorManagement.toWorkingColorSpace(this, colorSpace1);
        return this;
    }
    setHSL(h, s, l, colorSpace1 = ColorManagement.workingColorSpace) {
        // h,s,l ranges are in 0.0 - 1.0
        h = euclideanModulo(h, 1);
        s = clamp(s, 0, 1);
        l = clamp(l, 0, 1);
        if (s === 0) this.r = this.g = this.b = l;
        else {
            const p = l <= 0.5 ? l * (1 + s) : l + s - l * s;
            const q = 2 * l - p;
            this.r = hue2rgb(q, p, h + 1 / 3);
            this.g = hue2rgb(q, p, h);
            this.b = hue2rgb(q, p, h - 1 / 3);
        }
        ColorManagement.toWorkingColorSpace(this, colorSpace1);
        return this;
    }
    setStyle(style, colorSpace1 = SRGBColorSpace) {
        function handleAlpha(string) {
            if (string === undefined) return;
            if (parseFloat(string) < 1) console.warn("THREE.Color: Alpha component of " + style + " will be ignored.");
        }
        let m;
        if (m = /^(\w+)\(([^\)]*)\)/.exec(style)) {
            // rgb / hsl
            let color;
            const name = m[1];
            const components = m[2];
            switch(name){
                case "rgb":
                case "rgba":
                    if (color = /^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(components)) {
                        // rgb(255,0,0) rgba(255,0,0,0.5)
                        handleAlpha(color[4]);
                        return this.setRGB(Math.min(255, parseInt(color[1], 10)) / 255, Math.min(255, parseInt(color[2], 10)) / 255, Math.min(255, parseInt(color[3], 10)) / 255, colorSpace1);
                    }
                    if (color = /^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(components)) {
                        // rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)
                        handleAlpha(color[4]);
                        return this.setRGB(Math.min(100, parseInt(color[1], 10)) / 100, Math.min(100, parseInt(color[2], 10)) / 100, Math.min(100, parseInt(color[3], 10)) / 100, colorSpace1);
                    }
                    break;
                case "hsl":
                case "hsla":
                    if (color = /^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(components)) {
                        // hsl(120,50%,50%) hsla(120,50%,50%,0.5)
                        handleAlpha(color[4]);
                        return this.setHSL(parseFloat(color[1]) / 360, parseFloat(color[2]) / 100, parseFloat(color[3]) / 100, colorSpace1);
                    }
                    break;
                default:
                    console.warn("THREE.Color: Unknown color model " + style);
            }
        } else if (m = /^\#([A-Fa-f\d]+)$/.exec(style)) {
            // hex color
            const hex = m[1];
            const size = hex.length;
            if (size === 3) // #ff0
            return this.setRGB(parseInt(hex.charAt(0), 16) / 15, parseInt(hex.charAt(1), 16) / 15, parseInt(hex.charAt(2), 16) / 15, colorSpace1);
            else if (size === 6) // #ff0000
            return this.setHex(parseInt(hex, 16), colorSpace1);
            else console.warn("THREE.Color: Invalid hex color " + style);
        } else if (style && style.length > 0) return this.setColorName(style, colorSpace1);
        return this;
    }
    setColorName(style, colorSpace1 = SRGBColorSpace) {
        // color keywords
        const hex = _colorKeywords[style.toLowerCase()];
        if (hex !== undefined) // red
        this.setHex(hex, colorSpace1);
        else // unknown color
        console.warn("THREE.Color: Unknown color " + style);
        return this;
    }
    clone() {
        return new this.constructor(this.r, this.g, this.b);
    }
    copy(color) {
        this.r = color.r;
        this.g = color.g;
        this.b = color.b;
        return this;
    }
    copySRGBToLinear(color) {
        this.r = SRGBToLinear(color.r);
        this.g = SRGBToLinear(color.g);
        this.b = SRGBToLinear(color.b);
        return this;
    }
    copyLinearToSRGB(color) {
        this.r = LinearToSRGB(color.r);
        this.g = LinearToSRGB(color.g);
        this.b = LinearToSRGB(color.b);
        return this;
    }
    convertSRGBToLinear() {
        this.copySRGBToLinear(this);
        return this;
    }
    convertLinearToSRGB() {
        this.copyLinearToSRGB(this);
        return this;
    }
    getHex(colorSpace1 = SRGBColorSpace) {
        ColorManagement.fromWorkingColorSpace(_color.copy(this), colorSpace1);
        return Math.round(clamp(_color.r * 255, 0, 255)) * 65536 + Math.round(clamp(_color.g * 255, 0, 255)) * 256 + Math.round(clamp(_color.b * 255, 0, 255));
    }
    getHexString(colorSpace1 = SRGBColorSpace) {
        return ("000000" + this.getHex(colorSpace1).toString(16)).slice(-6);
    }
    getHSL(target, colorSpace1 = ColorManagement.workingColorSpace) {
        // h,s,l ranges are in 0.0 - 1.0
        ColorManagement.fromWorkingColorSpace(_color.copy(this), colorSpace1);
        const r = _color.r, g = _color.g, b = _color.b;
        const max = Math.max(r, g, b);
        const min = Math.min(r, g, b);
        let hue, saturation;
        const lightness = (min + max) / 2.0;
        if (min === max) {
            hue = 0;
            saturation = 0;
        } else {
            const delta = max - min;
            saturation = lightness <= 0.5 ? delta / (max + min) : delta / (2 - max - min);
            switch(max){
                case r:
                    hue = (g - b) / delta + (g < b ? 6 : 0);
                    break;
                case g:
                    hue = (b - r) / delta + 2;
                    break;
                case b:
                    hue = (r - g) / delta + 4;
                    break;
            }
            hue /= 6;
        }
        target.h = hue;
        target.s = saturation;
        target.l = lightness;
        return target;
    }
    getRGB(target, colorSpace1 = ColorManagement.workingColorSpace) {
        ColorManagement.fromWorkingColorSpace(_color.copy(this), colorSpace1);
        target.r = _color.r;
        target.g = _color.g;
        target.b = _color.b;
        return target;
    }
    getStyle(colorSpace1 = SRGBColorSpace) {
        ColorManagement.fromWorkingColorSpace(_color.copy(this), colorSpace1);
        const r = _color.r, g = _color.g, b = _color.b;
        if (colorSpace1 !== SRGBColorSpace) // Requires CSS Color Module Level 4 (https://www.w3.org/TR/css-color-4/).
        return `color(${colorSpace1} ${r.toFixed(3)} ${g.toFixed(3)} ${b.toFixed(3)})`;
        return `rgb(${Math.round(r * 255)},${Math.round(g * 255)},${Math.round(b * 255)})`;
    }
    offsetHSL(h, s, l) {
        this.getHSL(_hslA);
        _hslA.h += h;
        _hslA.s += s;
        _hslA.l += l;
        this.setHSL(_hslA.h, _hslA.s, _hslA.l);
        return this;
    }
    add(color) {
        this.r += color.r;
        this.g += color.g;
        this.b += color.b;
        return this;
    }
    addColors(color1, color2) {
        this.r = color1.r + color2.r;
        this.g = color1.g + color2.g;
        this.b = color1.b + color2.b;
        return this;
    }
    addScalar(s) {
        this.r += s;
        this.g += s;
        this.b += s;
        return this;
    }
    sub(color) {
        this.r = Math.max(0, this.r - color.r);
        this.g = Math.max(0, this.g - color.g);
        this.b = Math.max(0, this.b - color.b);
        return this;
    }
    multiply(color) {
        this.r *= color.r;
        this.g *= color.g;
        this.b *= color.b;
        return this;
    }
    multiplyScalar(s) {
        this.r *= s;
        this.g *= s;
        this.b *= s;
        return this;
    }
    lerp(color, alpha) {
        this.r += (color.r - this.r) * alpha;
        this.g += (color.g - this.g) * alpha;
        this.b += (color.b - this.b) * alpha;
        return this;
    }
    lerpColors(color1, color2, alpha) {
        this.r = color1.r + (color2.r - color1.r) * alpha;
        this.g = color1.g + (color2.g - color1.g) * alpha;
        this.b = color1.b + (color2.b - color1.b) * alpha;
        return this;
    }
    lerpHSL(color, alpha) {
        this.getHSL(_hslA);
        color.getHSL(_hslB);
        const h = lerp(_hslA.h, _hslB.h, alpha);
        const s = lerp(_hslA.s, _hslB.s, alpha);
        const l = lerp(_hslA.l, _hslB.l, alpha);
        this.setHSL(h, s, l);
        return this;
    }
    setFromVector3(v) {
        this.r = v.x;
        this.g = v.y;
        this.b = v.z;
        return this;
    }
    applyMatrix3(m) {
        const r = this.r, g = this.g, b = this.b;
        const e = m.elements;
        this.r = e[0] * r + e[3] * g + e[6] * b;
        this.g = e[1] * r + e[4] * g + e[7] * b;
        this.b = e[2] * r + e[5] * g + e[8] * b;
        return this;
    }
    equals(c) {
        return c.r === this.r && c.g === this.g && c.b === this.b;
    }
    fromArray(array, offset = 0) {
        this.r = array[offset];
        this.g = array[offset + 1];
        this.b = array[offset + 2];
        return this;
    }
    toArray(array = [], offset = 0) {
        array[offset] = this.r;
        array[offset + 1] = this.g;
        array[offset + 2] = this.b;
        return array;
    }
    fromBufferAttribute(attribute, index) {
        this.r = attribute.getX(index);
        this.g = attribute.getY(index);
        this.b = attribute.getZ(index);
        return this;
    }
    toJSON() {
        return this.getHex();
    }
    *[Symbol.iterator]() {
        yield this.r;
        yield this.g;
        yield this.b;
    }
}
const _color = /*@__PURE__*/ new Color();
Color.NAMES = _colorKeywords;
class MeshBasicMaterial extends Material {
    constructor(parameters){
        super();
        this.isMeshBasicMaterial = true;
        this.type = "MeshBasicMaterial";
        this.color = new Color(0xffffff); // emissive
        this.map = null;
        this.lightMap = null;
        this.lightMapIntensity = 1.0;
        this.aoMap = null;
        this.aoMapIntensity = 1.0;
        this.specularMap = null;
        this.alphaMap = null;
        this.envMap = null;
        this.combine = MultiplyOperation;
        this.reflectivity = 1;
        this.refractionRatio = 0.98;
        this.wireframe = false;
        this.wireframeLinewidth = 1;
        this.wireframeLinecap = "round";
        this.wireframeLinejoin = "round";
        this.fog = true;
        this.setValues(parameters);
    }
    copy(source) {
        super.copy(source);
        this.color.copy(source.color);
        this.map = source.map;
        this.lightMap = source.lightMap;
        this.lightMapIntensity = source.lightMapIntensity;
        this.aoMap = source.aoMap;
        this.aoMapIntensity = source.aoMapIntensity;
        this.specularMap = source.specularMap;
        this.alphaMap = source.alphaMap;
        this.envMap = source.envMap;
        this.combine = source.combine;
        this.reflectivity = source.reflectivity;
        this.refractionRatio = source.refractionRatio;
        this.wireframe = source.wireframe;
        this.wireframeLinewidth = source.wireframeLinewidth;
        this.wireframeLinecap = source.wireframeLinecap;
        this.wireframeLinejoin = source.wireframeLinejoin;
        this.fog = source.fog;
        return this;
    }
}
// Fast Half Float Conversions, http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf
const _tables = /*@__PURE__*/ _generateTables();
function _generateTables() {
    // float32 to float16 helpers
    const buffer = new ArrayBuffer(4);
    const floatView = new Float32Array(buffer);
    const uint32View = new Uint32Array(buffer);
    const baseTable = new Uint32Array(512);
    const shiftTable = new Uint32Array(512);
    for(let i = 0; i < 256; ++i){
        const e = i - 127;
        // very small number (0, -0)
        if (e < -27) {
            baseTable[i] = 0x0000;
            baseTable[i | 0x100] = 0x8000;
            shiftTable[i] = 24;
            shiftTable[i | 0x100] = 24;
        // small number (denorm)
        } else if (e < -14) {
            baseTable[i] = 0x0400 >> -e - 14;
            baseTable[i | 0x100] = 0x0400 >> -e - 14 | 0x8000;
            shiftTable[i] = -e - 1;
            shiftTable[i | 0x100] = -e - 1;
        // normal number
        } else if (e <= 15) {
            baseTable[i] = e + 15 << 10;
            baseTable[i | 0x100] = e + 15 << 10 | 0x8000;
            shiftTable[i] = 13;
            shiftTable[i | 0x100] = 13;
        // large number (Infinity, -Infinity)
        } else if (e < 128) {
            baseTable[i] = 0x7c00;
            baseTable[i | 0x100] = 0xfc00;
            shiftTable[i] = 24;
            shiftTable[i | 0x100] = 24;
        // stay (NaN, Infinity, -Infinity)
        } else {
            baseTable[i] = 0x7c00;
            baseTable[i | 0x100] = 0xfc00;
            shiftTable[i] = 13;
            shiftTable[i | 0x100] = 13;
        }
    }
    // float16 to float32 helpers
    const mantissaTable = new Uint32Array(2048);
    const exponentTable = new Uint32Array(64);
    const offsetTable = new Uint32Array(64);
    for(let i = 1; i < 1024; ++i){
        let m = i << 13; // zero pad mantissa bits
        let e = 0; // zero exponent
        // normalized
        while((m & 0x00800000) === 0){
            m <<= 1;
            e -= 0x00800000; // decrement exponent
        }
        m &= -8388609; // clear leading 1 bit
        e += 0x38800000; // adjust bias
        mantissaTable[i] = m | e;
    }
    for(let i = 1024; i < 2048; ++i)mantissaTable[i] = 0x38000000 + (i - 1024 << 13);
    for(let i = 1; i < 31; ++i)exponentTable[i] = i << 23;
    exponentTable[31] = 0x47800000;
    exponentTable[32] = 0x80000000;
    for(let i = 33; i < 63; ++i)exponentTable[i] = 0x80000000 + (i - 32 << 23);
    exponentTable[63] = 0xc7800000;
    for(let i = 1; i < 64; ++i)if (i !== 32) offsetTable[i] = 1024;
    return {
        floatView: floatView,
        uint32View: uint32View,
        baseTable: baseTable,
        shiftTable: shiftTable,
        mantissaTable: mantissaTable,
        exponentTable: exponentTable,
        offsetTable: offsetTable
    };
}
// float32 to float16
function toHalfFloat(val) {
    if (Math.abs(val) > 65504) console.warn("THREE.DataUtils.toHalfFloat(): Value out of range.");
    val = clamp(val, -65504, 65504);
    _tables.floatView[0] = val;
    const f = _tables.uint32View[0];
    const e = f >> 23 & 0x1ff;
    return _tables.baseTable[e] + ((f & 0x007fffff) >> _tables.shiftTable[e]);
}
// float16 to float32
function fromHalfFloat(val) {
    const m = val >> 10;
    _tables.uint32View[0] = _tables.mantissaTable[_tables.offsetTable[m] + (val & 0x3ff)] + _tables.exponentTable[m];
    return _tables.floatView[0];
}
const DataUtils = {
    toHalfFloat: toHalfFloat,
    fromHalfFloat: fromHalfFloat
};
const _vector$8 = /*@__PURE__*/ new Vector3();
const _vector2$1 = /*@__PURE__*/ new Vector2();
class BufferAttribute {
    constructor(array, itemSize, normalized = false){
        if (Array.isArray(array)) throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");
        this.isBufferAttribute = true;
        this.name = "";
        this.array = array;
        this.itemSize = itemSize;
        this.count = array !== undefined ? array.length / itemSize : 0;
        this.normalized = normalized;
        this.usage = StaticDrawUsage;
        this.updateRange = {
            offset: 0,
            count: -1
        };
        this.gpuType = FloatType;
        this.version = 0;
    }
    onUploadCallback() {}
    set needsUpdate(value) {
        if (value === true) this.version++;
    }
    setUsage(value) {
        this.usage = value;
        return this;
    }
    copy(source) {
        this.name = source.name;
        this.array = new source.array.constructor(source.array);
        this.itemSize = source.itemSize;
        this.count = source.count;
        this.normalized = source.normalized;
        this.usage = source.usage;
        this.gpuType = source.gpuType;
        return this;
    }
    copyAt(index1, attribute, index2) {
        index1 *= this.itemSize;
        index2 *= attribute.itemSize;
        for(let i = 0, l = this.itemSize; i < l; i++)this.array[index1 + i] = attribute.array[index2 + i];
        return this;
    }
    copyArray(array) {
        this.array.set(array);
        return this;
    }
    applyMatrix3(m) {
        if (this.itemSize === 2) for(let i = 0, l = this.count; i < l; i++){
            _vector2$1.fromBufferAttribute(this, i);
            _vector2$1.applyMatrix3(m);
            this.setXY(i, _vector2$1.x, _vector2$1.y);
        }
        else if (this.itemSize === 3) for(let i = 0, l = this.count; i < l; i++){
            _vector$8.fromBufferAttribute(this, i);
            _vector$8.applyMatrix3(m);
            this.setXYZ(i, _vector$8.x, _vector$8.y, _vector$8.z);
        }
        return this;
    }
    applyMatrix4(m) {
        for(let i = 0, l = this.count; i < l; i++){
            _vector$8.fromBufferAttribute(this, i);
            _vector$8.applyMatrix4(m);
            this.setXYZ(i, _vector$8.x, _vector$8.y, _vector$8.z);
        }
        return this;
    }
    applyNormalMatrix(m) {
        for(let i = 0, l = this.count; i < l; i++){
            _vector$8.fromBufferAttribute(this, i);
            _vector$8.applyNormalMatrix(m);
            this.setXYZ(i, _vector$8.x, _vector$8.y, _vector$8.z);
        }
        return this;
    }
    transformDirection(m) {
        for(let i = 0, l = this.count; i < l; i++){
            _vector$8.fromBufferAttribute(this, i);
            _vector$8.transformDirection(m);
            this.setXYZ(i, _vector$8.x, _vector$8.y, _vector$8.z);
        }
        return this;
    }
    set(value, offset = 0) {
        // Matching BufferAttribute constructor, do not normalize the array.
        this.array.set(value, offset);
        return this;
    }
    getComponent(index, component) {
        let value = this.array[index * this.itemSize + component];
        if (this.normalized) value = denormalize(value, this.array);
        return value;
    }
    setComponent(index, component, value) {
        if (this.normalized) value = normalize(value, this.array);
        this.array[index * this.itemSize + component] = value;
        return this;
    }
    getX(index) {
        let x = this.array[index * this.itemSize];
        if (this.normalized) x = denormalize(x, this.array);
        return x;
    }
    setX(index, x) {
        if (this.normalized) x = normalize(x, this.array);
        this.array[index * this.itemSize] = x;
        return this;
    }
    getY(index) {
        let y = this.array[index * this.itemSize + 1];
        if (this.normalized) y = denormalize(y, this.array);
        return y;
    }
    setY(index, y) {
        if (this.normalized) y = normalize(y, this.array);
        this.array[index * this.itemSize + 1] = y;
        return this;
    }
    getZ(index) {
        let z = this.array[index * this.itemSize + 2];
        if (this.normalized) z = denormalize(z, this.array);
        return z;
    }
    setZ(index, z) {
        if (this.normalized) z = normalize(z, this.array);
        this.array[index * this.itemSize + 2] = z;
        return this;
    }
    getW(index) {
        let w = this.array[index * this.itemSize + 3];
        if (this.normalized) w = denormalize(w, this.array);
        return w;
    }
    setW(index, w) {
        if (this.normalized) w = normalize(w, this.array);
        this.array[index * this.itemSize + 3] = w;
        return this;
    }
    setXY(index, x, y) {
        index *= this.itemSize;
        if (this.normalized) {
            x = normalize(x, this.array);
            y = normalize(y, this.array);
        }
        this.array[index + 0] = x;
        this.array[index + 1] = y;
        return this;
    }
    setXYZ(index, x, y, z) {
        index *= this.itemSize;
        if (this.normalized) {
            x = normalize(x, this.array);
            y = normalize(y, this.array);
            z = normalize(z, this.array);
        }
        this.array[index + 0] = x;
        this.array[index + 1] = y;
        this.array[index + 2] = z;
        return this;
    }
    setXYZW(index, x, y, z, w) {
        index *= this.itemSize;
        if (this.normalized) {
            x = normalize(x, this.array);
            y = normalize(y, this.array);
            z = normalize(z, this.array);
            w = normalize(w, this.array);
        }
        this.array[index + 0] = x;
        this.array[index + 1] = y;
        this.array[index + 2] = z;
        this.array[index + 3] = w;
        return this;
    }
    onUpload(callback) {
        this.onUploadCallback = callback;
        return this;
    }
    clone() {
        return new this.constructor(this.array, this.itemSize).copy(this);
    }
    toJSON() {
        const data = {
            itemSize: this.itemSize,
            type: this.array.constructor.name,
            array: Array.from(this.array),
            normalized: this.normalized
        };
        if (this.name !== "") data.name = this.name;
        if (this.usage !== StaticDrawUsage) data.usage = this.usage;
        if (this.updateRange.offset !== 0 || this.updateRange.count !== -1) data.updateRange = this.updateRange;
        return data;
    }
}
//
class Int8BufferAttribute extends BufferAttribute {
    constructor(array, itemSize, normalized){
        super(new Int8Array(array), itemSize, normalized);
    }
}
class Uint8BufferAttribute extends BufferAttribute {
    constructor(array, itemSize, normalized){
        super(new Uint8Array(array), itemSize, normalized);
    }
}
class Uint8ClampedBufferAttribute extends BufferAttribute {
    constructor(array, itemSize, normalized){
        super(new Uint8ClampedArray(array), itemSize, normalized);
    }
}
class Int16BufferAttribute extends BufferAttribute {
    constructor(array, itemSize, normalized){
        super(new Int16Array(array), itemSize, normalized);
    }
}
class Uint16BufferAttribute extends BufferAttribute {
    constructor(array, itemSize, normalized){
        super(new Uint16Array(array), itemSize, normalized);
    }
}
class Int32BufferAttribute extends BufferAttribute {
    constructor(array, itemSize, normalized){
        super(new Int32Array(array), itemSize, normalized);
    }
}
class Uint32BufferAttribute extends BufferAttribute {
    constructor(array, itemSize, normalized){
        super(new Uint32Array(array), itemSize, normalized);
    }
}
class Float16BufferAttribute extends BufferAttribute {
    constructor(array, itemSize, normalized){
        super(new Uint16Array(array), itemSize, normalized);
        this.isFloat16BufferAttribute = true;
    }
    getX(index) {
        let x = fromHalfFloat(this.array[index * this.itemSize]);
        if (this.normalized) x = denormalize(x, this.array);
        return x;
    }
    setX(index, x) {
        if (this.normalized) x = normalize(x, this.array);
        this.array[index * this.itemSize] = toHalfFloat(x);
        return this;
    }
    getY(index) {
        let y = fromHalfFloat(this.array[index * this.itemSize + 1]);
        if (this.normalized) y = denormalize(y, this.array);
        return y;
    }
    setY(index, y) {
        if (this.normalized) y = normalize(y, this.array);
        this.array[index * this.itemSize + 1] = toHalfFloat(y);
        return this;
    }
    getZ(index) {
        let z = fromHalfFloat(this.array[index * this.itemSize + 2]);
        if (this.normalized) z = denormalize(z, this.array);
        return z;
    }
    setZ(index, z) {
        if (this.normalized) z = normalize(z, this.array);
        this.array[index * this.itemSize + 2] = toHalfFloat(z);
        return this;
    }
    getW(index) {
        let w = fromHalfFloat(this.array[index * this.itemSize + 3]);
        if (this.normalized) w = denormalize(w, this.array);
        return w;
    }
    setW(index, w) {
        if (this.normalized) w = normalize(w, this.array);
        this.array[index * this.itemSize + 3] = toHalfFloat(w);
        return this;
    }
    setXY(index, x, y) {
        index *= this.itemSize;
        if (this.normalized) {
            x = normalize(x, this.array);
            y = normalize(y, this.array);
        }
        this.array[index + 0] = toHalfFloat(x);
        this.array[index + 1] = toHalfFloat(y);
        return this;
    }
    setXYZ(index, x, y, z) {
        index *= this.itemSize;
        if (this.normalized) {
            x = normalize(x, this.array);
            y = normalize(y, this.array);
            z = normalize(z, this.array);
        }
        this.array[index + 0] = toHalfFloat(x);
        this.array[index + 1] = toHalfFloat(y);
        this.array[index + 2] = toHalfFloat(z);
        return this;
    }
    setXYZW(index, x, y, z, w) {
        index *= this.itemSize;
        if (this.normalized) {
            x = normalize(x, this.array);
            y = normalize(y, this.array);
            z = normalize(z, this.array);
            w = normalize(w, this.array);
        }
        this.array[index + 0] = toHalfFloat(x);
        this.array[index + 1] = toHalfFloat(y);
        this.array[index + 2] = toHalfFloat(z);
        this.array[index + 3] = toHalfFloat(w);
        return this;
    }
}
class Float32BufferAttribute extends BufferAttribute {
    constructor(array, itemSize, normalized){
        super(new Float32Array(array), itemSize, normalized);
    }
}
class Float64BufferAttribute extends BufferAttribute {
    constructor(array, itemSize, normalized){
        super(new Float64Array(array), itemSize, normalized);
    }
}
let _id$2 = 0;
const _m1 = /*@__PURE__*/ new Matrix4();
const _obj = /*@__PURE__*/ new Object3D();
const _offset = /*@__PURE__*/ new Vector3();
const _box$1 = /*@__PURE__*/ new Box3();
const _boxMorphTargets = /*@__PURE__*/ new Box3();
const _vector$7 = /*@__PURE__*/ new Vector3();
class BufferGeometry extends EventDispatcher {
    constructor(){
        super();
        this.isBufferGeometry = true;
        Object.defineProperty(this, "id", {
            value: _id$2++
        });
        this.uuid = generateUUID();
        this.name = "";
        this.type = "BufferGeometry";
        this.index = null;
        this.attributes = {};
        this.morphAttributes = {};
        this.morphTargetsRelative = false;
        this.groups = [];
        this.boundingBox = null;
        this.boundingSphere = null;
        this.drawRange = {
            start: 0,
            count: Infinity
        };
        this.userData = {};
    }
    getIndex() {
        return this.index;
    }
    setIndex(index) {
        if (Array.isArray(index)) this.index = new (arrayNeedsUint32(index) ? Uint32BufferAttribute : Uint16BufferAttribute)(index, 1);
        else this.index = index;
        return this;
    }
    getAttribute(name) {
        return this.attributes[name];
    }
    setAttribute(name, attribute) {
        this.attributes[name] = attribute;
        return this;
    }
    deleteAttribute(name) {
        delete this.attributes[name];
        return this;
    }
    hasAttribute(name) {
        return this.attributes[name] !== undefined;
    }
    addGroup(start, count, materialIndex = 0) {
        this.groups.push({
            start: start,
            count: count,
            materialIndex: materialIndex
        });
    }
    clearGroups() {
        this.groups = [];
    }
    setDrawRange(start, count) {
        this.drawRange.start = start;
        this.drawRange.count = count;
    }
    applyMatrix4(matrix) {
        const position = this.attributes.position;
        if (position !== undefined) {
            position.applyMatrix4(matrix);
            position.needsUpdate = true;
        }
        const normal = this.attributes.normal;
        if (normal !== undefined) {
            const normalMatrix = new Matrix3().getNormalMatrix(matrix);
            normal.applyNormalMatrix(normalMatrix);
            normal.needsUpdate = true;
        }
        const tangent = this.attributes.tangent;
        if (tangent !== undefined) {
            tangent.transformDirection(matrix);
            tangent.needsUpdate = true;
        }
        if (this.boundingBox !== null) this.computeBoundingBox();
        if (this.boundingSphere !== null) this.computeBoundingSphere();
        return this;
    }
    applyQuaternion(q) {
        _m1.makeRotationFromQuaternion(q);
        this.applyMatrix4(_m1);
        return this;
    }
    rotateX(angle) {
        // rotate geometry around world x-axis
        _m1.makeRotationX(angle);
        this.applyMatrix4(_m1);
        return this;
    }
    rotateY(angle) {
        // rotate geometry around world y-axis
        _m1.makeRotationY(angle);
        this.applyMatrix4(_m1);
        return this;
    }
    rotateZ(angle) {
        // rotate geometry around world z-axis
        _m1.makeRotationZ(angle);
        this.applyMatrix4(_m1);
        return this;
    }
    translate(x, y, z) {
        // translate geometry
        _m1.makeTranslation(x, y, z);
        this.applyMatrix4(_m1);
        return this;
    }
    scale(x, y, z) {
        // scale geometry
        _m1.makeScale(x, y, z);
        this.applyMatrix4(_m1);
        return this;
    }
    lookAt(vector) {
        _obj.lookAt(vector);
        _obj.updateMatrix();
        this.applyMatrix4(_obj.matrix);
        return this;
    }
    center() {
        this.computeBoundingBox();
        this.boundingBox.getCenter(_offset).negate();
        this.translate(_offset.x, _offset.y, _offset.z);
        return this;
    }
    setFromPoints(points) {
        const position = [];
        for(let i = 0, l = points.length; i < l; i++){
            const point = points[i];
            position.push(point.x, point.y, point.z || 0);
        }
        this.setAttribute("position", new Float32BufferAttribute(position, 3));
        return this;
    }
    computeBoundingBox() {
        if (this.boundingBox === null) this.boundingBox = new Box3();
        const position = this.attributes.position;
        const morphAttributesPosition = this.morphAttributes.position;
        if (position && position.isGLBufferAttribute) {
            console.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set "mesh.frustumCulled" to "false".', this);
            this.boundingBox.set(new Vector3(-Infinity, -Infinity, -Infinity), new Vector3(Infinity, Infinity, Infinity));
            return;
        }
        if (position !== undefined) {
            this.boundingBox.setFromBufferAttribute(position);
            // process morph attributes if present
            if (morphAttributesPosition) for(let i = 0, il = morphAttributesPosition.length; i < il; i++){
                const morphAttribute = morphAttributesPosition[i];
                _box$1.setFromBufferAttribute(morphAttribute);
                if (this.morphTargetsRelative) {
                    _vector$7.addVectors(this.boundingBox.min, _box$1.min);
                    this.boundingBox.expandByPoint(_vector$7);
                    _vector$7.addVectors(this.boundingBox.max, _box$1.max);
                    this.boundingBox.expandByPoint(_vector$7);
                } else {
                    this.boundingBox.expandByPoint(_box$1.min);
                    this.boundingBox.expandByPoint(_box$1.max);
                }
            }
        } else this.boundingBox.makeEmpty();
        if (isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this);
    }
    computeBoundingSphere() {
        if (this.boundingSphere === null) this.boundingSphere = new Sphere();
        const position = this.attributes.position;
        const morphAttributesPosition = this.morphAttributes.position;
        if (position && position.isGLBufferAttribute) {
            console.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set "mesh.frustumCulled" to "false".', this);
            this.boundingSphere.set(new Vector3(), Infinity);
            return;
        }
        if (position) {
            // first, find the center of the bounding sphere
            const center = this.boundingSphere.center;
            _box$1.setFromBufferAttribute(position);
            // process morph attributes if present
            if (morphAttributesPosition) for(let i = 0, il = morphAttributesPosition.length; i < il; i++){
                const morphAttribute = morphAttributesPosition[i];
                _boxMorphTargets.setFromBufferAttribute(morphAttribute);
                if (this.morphTargetsRelative) {
                    _vector$7.addVectors(_box$1.min, _boxMorphTargets.min);
                    _box$1.expandByPoint(_vector$7);
                    _vector$7.addVectors(_box$1.max, _boxMorphTargets.max);
                    _box$1.expandByPoint(_vector$7);
                } else {
                    _box$1.expandByPoint(_boxMorphTargets.min);
                    _box$1.expandByPoint(_boxMorphTargets.max);
                }
            }
            _box$1.getCenter(center);
            // second, try to find a boundingSphere with a radius smaller than the
            // boundingSphere of the boundingBox: sqrt(3) smaller in the best case
            let maxRadiusSq = 0;
            for(let i = 0, il = position.count; i < il; i++){
                _vector$7.fromBufferAttribute(position, i);
                maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector$7));
            }
            // process morph attributes if present
            if (morphAttributesPosition) for(let i = 0, il = morphAttributesPosition.length; i < il; i++){
                const morphAttribute = morphAttributesPosition[i];
                const morphTargetsRelative = this.morphTargetsRelative;
                for(let j = 0, jl = morphAttribute.count; j < jl; j++){
                    _vector$7.fromBufferAttribute(morphAttribute, j);
                    if (morphTargetsRelative) {
                        _offset.fromBufferAttribute(position, j);
                        _vector$7.add(_offset);
                    }
                    maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector$7));
                }
            }
            this.boundingSphere.radius = Math.sqrt(maxRadiusSq);
            if (isNaN(this.boundingSphere.radius)) console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this);
        }
    }
    computeTangents() {
        const index = this.index;
        const attributes = this.attributes;
        // based on http://www.terathon.com/code/tangent.html
        // (per vertex tangents)
        if (index === null || attributes.position === undefined || attributes.normal === undefined || attributes.uv === undefined) {
            console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");
            return;
        }
        const indices = index.array;
        const positions = attributes.position.array;
        const normals = attributes.normal.array;
        const uvs = attributes.uv.array;
        const nVertices = positions.length / 3;
        if (this.hasAttribute("tangent") === false) this.setAttribute("tangent", new BufferAttribute(new Float32Array(4 * nVertices), 4));
        const tangents = this.getAttribute("tangent").array;
        const tan1 = [], tan2 = [];
        for(let i = 0; i < nVertices; i++){
            tan1[i] = new Vector3();
            tan2[i] = new Vector3();
        }
        const vA = new Vector3(), vB = new Vector3(), vC = new Vector3(), uvA = new Vector2(), uvB = new Vector2(), uvC = new Vector2(), sdir = new Vector3(), tdir = new Vector3();
        function handleTriangle(a, b, c) {
            vA.fromArray(positions, a * 3);
            vB.fromArray(positions, b * 3);
            vC.fromArray(positions, c * 3);
            uvA.fromArray(uvs, a * 2);
            uvB.fromArray(uvs, b * 2);
            uvC.fromArray(uvs, c * 2);
            vB.sub(vA);
            vC.sub(vA);
            uvB.sub(uvA);
            uvC.sub(uvA);
            const r = 1.0 / (uvB.x * uvC.y - uvC.x * uvB.y);
            // silently ignore degenerate uv triangles having coincident or colinear vertices
            if (!isFinite(r)) return;
            sdir.copy(vB).multiplyScalar(uvC.y).addScaledVector(vC, -uvB.y).multiplyScalar(r);
            tdir.copy(vC).multiplyScalar(uvB.x).addScaledVector(vB, -uvC.x).multiplyScalar(r);
            tan1[a].add(sdir);
            tan1[b].add(sdir);
            tan1[c].add(sdir);
            tan2[a].add(tdir);
            tan2[b].add(tdir);
            tan2[c].add(tdir);
        }
        let groups = this.groups;
        if (groups.length === 0) groups = [
            {
                start: 0,
                count: indices.length
            }
        ];
        for(let i = 0, il = groups.length; i < il; ++i){
            const group = groups[i];
            const start = group.start;
            const count = group.count;
            for(let j = start, jl = start + count; j < jl; j += 3)handleTriangle(indices[j + 0], indices[j + 1], indices[j + 2]);
        }
        const tmp = new Vector3(), tmp2 = new Vector3();
        const n = new Vector3(), n2 = new Vector3();
        function handleVertex(v) {
            n.fromArray(normals, v * 3);
            n2.copy(n);
            const t = tan1[v];
            // Gram-Schmidt orthogonalize
            tmp.copy(t);
            tmp.sub(n.multiplyScalar(n.dot(t))).normalize();
            // Calculate handedness
            tmp2.crossVectors(n2, t);
            const test = tmp2.dot(tan2[v]);
            const w = test < 0.0 ? -1 : 1.0;
            tangents[v * 4] = tmp.x;
            tangents[v * 4 + 1] = tmp.y;
            tangents[v * 4 + 2] = tmp.z;
            tangents[v * 4 + 3] = w;
        }
        for(let i = 0, il = groups.length; i < il; ++i){
            const group = groups[i];
            const start = group.start;
            const count = group.count;
            for(let j = start, jl = start + count; j < jl; j += 3){
                handleVertex(indices[j + 0]);
                handleVertex(indices[j + 1]);
                handleVertex(indices[j + 2]);
            }
        }
    }
    computeVertexNormals() {
        const index = this.index;
        const positionAttribute = this.getAttribute("position");
        if (positionAttribute !== undefined) {
            let normalAttribute = this.getAttribute("normal");
            if (normalAttribute === undefined) {
                normalAttribute = new BufferAttribute(new Float32Array(positionAttribute.count * 3), 3);
                this.setAttribute("normal", normalAttribute);
            } else // reset existing normals to zero
            for(let i = 0, il = normalAttribute.count; i < il; i++)normalAttribute.setXYZ(i, 0, 0, 0);
            const pA = new Vector3(), pB = new Vector3(), pC = new Vector3();
            const nA = new Vector3(), nB = new Vector3(), nC = new Vector3();
            const cb = new Vector3(), ab = new Vector3();
            // indexed elements
            if (index) for(let i = 0, il = index.count; i < il; i += 3){
                const vA = index.getX(i + 0);
                const vB = index.getX(i + 1);
                const vC = index.getX(i + 2);
                pA.fromBufferAttribute(positionAttribute, vA);
                pB.fromBufferAttribute(positionAttribute, vB);
                pC.fromBufferAttribute(positionAttribute, vC);
                cb.subVectors(pC, pB);
                ab.subVectors(pA, pB);
                cb.cross(ab);
                nA.fromBufferAttribute(normalAttribute, vA);
                nB.fromBufferAttribute(normalAttribute, vB);
                nC.fromBufferAttribute(normalAttribute, vC);
                nA.add(cb);
                nB.add(cb);
                nC.add(cb);
                normalAttribute.setXYZ(vA, nA.x, nA.y, nA.z);
                normalAttribute.setXYZ(vB, nB.x, nB.y, nB.z);
                normalAttribute.setXYZ(vC, nC.x, nC.y, nC.z);
            }
            else // non-indexed elements (unconnected triangle soup)
            for(let i = 0, il = positionAttribute.count; i < il; i += 3){
                pA.fromBufferAttribute(positionAttribute, i + 0);
                pB.fromBufferAttribute(positionAttribute, i + 1);
                pC.fromBufferAttribute(positionAttribute, i + 2);
                cb.subVectors(pC, pB);
                ab.subVectors(pA, pB);
                cb.cross(ab);
                normalAttribute.setXYZ(i + 0, cb.x, cb.y, cb.z);
                normalAttribute.setXYZ(i + 1, cb.x, cb.y, cb.z);
                normalAttribute.setXYZ(i + 2, cb.x, cb.y, cb.z);
            }
            this.normalizeNormals();
            normalAttribute.needsUpdate = true;
        }
    }
    normalizeNormals() {
        const normals = this.attributes.normal;
        for(let i = 0, il = normals.count; i < il; i++){
            _vector$7.fromBufferAttribute(normals, i);
            _vector$7.normalize();
            normals.setXYZ(i, _vector$7.x, _vector$7.y, _vector$7.z);
        }
    }
    toNonIndexed() {
        function convertBufferAttribute(attribute, indices) {
            const array = attribute.array;
            const itemSize = attribute.itemSize;
            const normalized = attribute.normalized;
            const array2 = new array.constructor(indices.length * itemSize);
            let index = 0, index2 = 0;
            for(let i = 0, l = indices.length; i < l; i++){
                if (attribute.isInterleavedBufferAttribute) index = indices[i] * attribute.data.stride + attribute.offset;
                else index = indices[i] * itemSize;
                for(let j = 0; j < itemSize; j++)array2[index2++] = array[index++];
            }
            return new BufferAttribute(array2, itemSize, normalized);
        }
        //
        if (this.index === null) {
            console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed.");
            return this;
        }
        const geometry2 = new BufferGeometry();
        const indices = this.index.array;
        const attributes = this.attributes;
        // attributes
        for(const name in attributes){
            const attribute = attributes[name];
            const newAttribute = convertBufferAttribute(attribute, indices);
            geometry2.setAttribute(name, newAttribute);
        }
        // morph attributes
        const morphAttributes = this.morphAttributes;
        for(const name in morphAttributes){
            const morphArray = [];
            const morphAttribute = morphAttributes[name]; // morphAttribute: array of Float32BufferAttributes
            for(let i = 0, il = morphAttribute.length; i < il; i++){
                const attribute = morphAttribute[i];
                const newAttribute = convertBufferAttribute(attribute, indices);
                morphArray.push(newAttribute);
            }
            geometry2.morphAttributes[name] = morphArray;
        }
        geometry2.morphTargetsRelative = this.morphTargetsRelative;
        // groups
        const groups = this.groups;
        for(let i = 0, l = groups.length; i < l; i++){
            const group = groups[i];
            geometry2.addGroup(group.start, group.count, group.materialIndex);
        }
        return geometry2;
    }
    toJSON() {
        const data = {
            metadata: {
                version: 4.6,
                type: "BufferGeometry",
                generator: "BufferGeometry.toJSON"
            }
        };
        // standard BufferGeometry serialization
        data.uuid = this.uuid;
        data.type = this.type;
        if (this.name !== "") data.name = this.name;
        if (Object.keys(this.userData).length > 0) data.userData = this.userData;
        if (this.parameters !== undefined) {
            const parameters = this.parameters;
            for(const key in parameters)if (parameters[key] !== undefined) data[key] = parameters[key];
            return data;
        }
        // for simplicity the code assumes attributes are not shared across geometries, see #15811
        data.data = {
            attributes: {}
        };
        const index = this.index;
        if (index !== null) data.data.index = {
            type: index.array.constructor.name,
            array: Array.prototype.slice.call(index.array)
        };
        const attributes = this.attributes;
        for(const key in attributes){
            const attribute = attributes[key];
            data.data.attributes[key] = attribute.toJSON(data.data);
        }
        const morphAttributes = {};
        let hasMorphAttributes = false;
        for(const key in this.morphAttributes){
            const attributeArray = this.morphAttributes[key];
            const array = [];
            for(let i = 0, il = attributeArray.length; i < il; i++){
                const attribute = attributeArray[i];
                array.push(attribute.toJSON(data.data));
            }
            if (array.length > 0) {
                morphAttributes[key] = array;
                hasMorphAttributes = true;
            }
        }
        if (hasMorphAttributes) {
            data.data.morphAttributes = morphAttributes;
            data.data.morphTargetsRelative = this.morphTargetsRelative;
        }
        const groups = this.groups;
        if (groups.length > 0) data.data.groups = JSON.parse(JSON.stringify(groups));
        const boundingSphere = this.boundingSphere;
        if (boundingSphere !== null) data.data.boundingSphere = {
            center: boundingSphere.center.toArray(),
            radius: boundingSphere.radius
        };
        return data;
    }
    clone() {
        return new this.constructor().copy(this);
    }
    copy(source) {
        // reset
        this.index = null;
        this.attributes = {};
        this.morphAttributes = {};
        this.groups = [];
        this.boundingBox = null;
        this.boundingSphere = null;
        // used for storing cloned, shared data
        const data = {};
        // name
        this.name = source.name;
        // index
        const index = source.index;
        if (index !== null) this.setIndex(index.clone(data));
        // attributes
        const attributes = source.attributes;
        for(const name in attributes){
            const attribute = attributes[name];
            this.setAttribute(name, attribute.clone(data));
        }
        // morph attributes
        const morphAttributes = source.morphAttributes;
        for(const name in morphAttributes){
            const array = [];
            const morphAttribute = morphAttributes[name]; // morphAttribute: array of Float32BufferAttributes
            for(let i = 0, l = morphAttribute.length; i < l; i++)array.push(morphAttribute[i].clone(data));
            this.morphAttributes[name] = array;
        }
        this.morphTargetsRelative = source.morphTargetsRelative;
        // groups
        const groups = source.groups;
        for(let i = 0, l = groups.length; i < l; i++){
            const group = groups[i];
            this.addGroup(group.start, group.count, group.materialIndex);
        }
        // bounding box
        const boundingBox = source.boundingBox;
        if (boundingBox !== null) this.boundingBox = boundingBox.clone();
        // bounding sphere
        const boundingSphere = source.boundingSphere;
        if (boundingSphere !== null) this.boundingSphere = boundingSphere.clone();
        // draw range
        this.drawRange.start = source.drawRange.start;
        this.drawRange.count = source.drawRange.count;
        // user data
        this.userData = source.userData;
        return this;
    }
    dispose() {
        this.dispatchEvent({
            type: "dispose"
        });
    }
}
const _inverseMatrix$3 = /*@__PURE__*/ new Matrix4();
const _ray$3 = /*@__PURE__*/ new Ray();
const _sphere$5 = /*@__PURE__*/ new Sphere();
const _sphereHitAt = /*@__PURE__*/ new Vector3();
const _vA$1 = /*@__PURE__*/ new Vector3();
const _vB$1 = /*@__PURE__*/ new Vector3();
const _vC$1 = /*@__PURE__*/ new Vector3();
const _tempA = /*@__PURE__*/ new Vector3();
const _morphA = /*@__PURE__*/ new Vector3();
const _uvA$1 = /*@__PURE__*/ new Vector2();
const _uvB$1 = /*@__PURE__*/ new Vector2();
const _uvC$1 = /*@__PURE__*/ new Vector2();
const _normalA = /*@__PURE__*/ new Vector3();
const _normalB = /*@__PURE__*/ new Vector3();
const _normalC = /*@__PURE__*/ new Vector3();
const _intersectionPoint = /*@__PURE__*/ new Vector3();
const _intersectionPointWorld = /*@__PURE__*/ new Vector3();
class Mesh extends Object3D {
    constructor(geometry = new BufferGeometry(), material = new MeshBasicMaterial()){
        super();
        this.isMesh = true;
        this.type = "Mesh";
        this.geometry = geometry;
        this.material = material;
        this.updateMorphTargets();
    }
    copy(source, recursive) {
        super.copy(source, recursive);
        if (source.morphTargetInfluences !== undefined) this.morphTargetInfluences = source.morphTargetInfluences.slice();
        if (source.morphTargetDictionary !== undefined) this.morphTargetDictionary = Object.assign({}, source.morphTargetDictionary);
        this.material = Array.isArray(source.material) ? source.material.slice() : source.material;
        this.geometry = source.geometry;
        return this;
    }
    updateMorphTargets() {
        const geometry = this.geometry;
        const morphAttributes = geometry.morphAttributes;
        const keys = Object.keys(morphAttributes);
        if (keys.length > 0) {
            const morphAttribute = morphAttributes[keys[0]];
            if (morphAttribute !== undefined) {
                this.morphTargetInfluences = [];
                this.morphTargetDictionary = {};
                for(let m = 0, ml = morphAttribute.length; m < ml; m++){
                    const name = morphAttribute[m].name || String(m);
                    this.morphTargetInfluences.push(0);
                    this.morphTargetDictionary[name] = m;
                }
            }
        }
    }
    getVertexPosition(index, target) {
        const geometry = this.geometry;
        const position = geometry.attributes.position;
        const morphPosition = geometry.morphAttributes.position;
        const morphTargetsRelative = geometry.morphTargetsRelative;
        target.fromBufferAttribute(position, index);
        const morphInfluences = this.morphTargetInfluences;
        if (morphPosition && morphInfluences) {
            _morphA.set(0, 0, 0);
            for(let i = 0, il = morphPosition.length; i < il; i++){
                const influence = morphInfluences[i];
                const morphAttribute = morphPosition[i];
                if (influence === 0) continue;
                _tempA.fromBufferAttribute(morphAttribute, index);
                if (morphTargetsRelative) _morphA.addScaledVector(_tempA, influence);
                else _morphA.addScaledVector(_tempA.sub(target), influence);
            }
            target.add(_morphA);
        }
        return target;
    }
    raycast(raycaster, intersects) {
        const geometry = this.geometry;
        const material = this.material;
        const matrixWorld = this.matrixWorld;
        if (material === undefined) return;
        // test with bounding sphere in world space
        if (geometry.boundingSphere === null) geometry.computeBoundingSphere();
        _sphere$5.copy(geometry.boundingSphere);
        _sphere$5.applyMatrix4(matrixWorld);
        // check distance from ray origin to bounding sphere
        _ray$3.copy(raycaster.ray).recast(raycaster.near);
        if (_sphere$5.containsPoint(_ray$3.origin) === false) {
            if (_ray$3.intersectSphere(_sphere$5, _sphereHitAt) === null) return;
            if (_ray$3.origin.distanceToSquared(_sphereHitAt) > (raycaster.far - raycaster.near) ** 2) return;
        }
        // convert ray to local space of mesh
        _inverseMatrix$3.copy(matrixWorld).invert();
        _ray$3.copy(raycaster.ray).applyMatrix4(_inverseMatrix$3);
        // test with bounding box in local space
        if (geometry.boundingBox !== null) {
            if (_ray$3.intersectsBox(geometry.boundingBox) === false) return;
        }
        // test for intersections with geometry
        this._computeIntersections(raycaster, intersects, _ray$3);
    }
    _computeIntersections(raycaster, intersects, rayLocalSpace) {
        let intersection;
        const geometry = this.geometry;
        const material = this.material;
        const index = geometry.index;
        const position = geometry.attributes.position;
        const uv = geometry.attributes.uv;
        const uv1 = geometry.attributes.uv1;
        const normal = geometry.attributes.normal;
        const groups = geometry.groups;
        const drawRange = geometry.drawRange;
        if (index !== null) {
            // indexed buffer geometry
            if (Array.isArray(material)) for(let i = 0, il = groups.length; i < il; i++){
                const group = groups[i];
                const groupMaterial = material[group.materialIndex];
                const start = Math.max(group.start, drawRange.start);
                const end = Math.min(index.count, Math.min(group.start + group.count, drawRange.start + drawRange.count));
                for(let j = start, jl = end; j < jl; j += 3){
                    const a = index.getX(j);
                    const b = index.getX(j + 1);
                    const c = index.getX(j + 2);
                    intersection = checkGeometryIntersection(this, groupMaterial, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c);
                    if (intersection) {
                        intersection.faceIndex = Math.floor(j / 3); // triangle number in indexed buffer semantics
                        intersection.face.materialIndex = group.materialIndex;
                        intersects.push(intersection);
                    }
                }
            }
            else {
                const start = Math.max(0, drawRange.start);
                const end = Math.min(index.count, drawRange.start + drawRange.count);
                for(let i = start, il = end; i < il; i += 3){
                    const a = index.getX(i);
                    const b = index.getX(i + 1);
                    const c = index.getX(i + 2);
                    intersection = checkGeometryIntersection(this, material, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c);
                    if (intersection) {
                        intersection.faceIndex = Math.floor(i / 3); // triangle number in indexed buffer semantics
                        intersects.push(intersection);
                    }
                }
            }
        } else if (position !== undefined) {
            // non-indexed buffer geometry
            if (Array.isArray(material)) for(let i = 0, il = groups.length; i < il; i++){
                const group = groups[i];
                const groupMaterial = material[group.materialIndex];
                const start = Math.max(group.start, drawRange.start);
                const end = Math.min(position.count, Math.min(group.start + group.count, drawRange.start + drawRange.count));
                for(let j = start, jl = end; j < jl; j += 3){
                    const a = j;
                    const b = j + 1;
                    const c = j + 2;
                    intersection = checkGeometryIntersection(this, groupMaterial, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c);
                    if (intersection) {
                        intersection.faceIndex = Math.floor(j / 3); // triangle number in non-indexed buffer semantics
                        intersection.face.materialIndex = group.materialIndex;
                        intersects.push(intersection);
                    }
                }
            }
            else {
                const start = Math.max(0, drawRange.start);
                const end = Math.min(position.count, drawRange.start + drawRange.count);
                for(let i = start, il = end; i < il; i += 3){
                    const a = i;
                    const b = i + 1;
                    const c = i + 2;
                    intersection = checkGeometryIntersection(this, material, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c);
                    if (intersection) {
                        intersection.faceIndex = Math.floor(i / 3); // triangle number in non-indexed buffer semantics
                        intersects.push(intersection);
                    }
                }
            }
        }
    }
}
function checkIntersection(object, material, raycaster, ray, pA, pB, pC, point) {
    let intersect;
    if (material.side === BackSide) intersect = ray.intersectTriangle(pC, pB, pA, true, point);
    else intersect = ray.intersectTriangle(pA, pB, pC, material.side === FrontSide, point);
    if (intersect === null) return null;
    _intersectionPointWorld.copy(point);
    _intersectionPointWorld.applyMatrix4(object.matrixWorld);
    const distance = raycaster.ray.origin.distanceTo(_intersectionPointWorld);
    if (distance < raycaster.near || distance > raycaster.far) return null;
    return {
        distance: distance,
        point: _intersectionPointWorld.clone(),
        object: object
    };
}
function checkGeometryIntersection(object, material, raycaster, ray, uv, uv1, normal, a, b, c) {
    object.getVertexPosition(a, _vA$1);
    object.getVertexPosition(b, _vB$1);
    object.getVertexPosition(c, _vC$1);
    const intersection = checkIntersection(object, material, raycaster, ray, _vA$1, _vB$1, _vC$1, _intersectionPoint);
    if (intersection) {
        if (uv) {
            _uvA$1.fromBufferAttribute(uv, a);
            _uvB$1.fromBufferAttribute(uv, b);
            _uvC$1.fromBufferAttribute(uv, c);
            intersection.uv = Triangle.getInterpolation(_intersectionPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2());
        }
        if (uv1) {
            _uvA$1.fromBufferAttribute(uv1, a);
            _uvB$1.fromBufferAttribute(uv1, b);
            _uvC$1.fromBufferAttribute(uv1, c);
            intersection.uv1 = Triangle.getInterpolation(_intersectionPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2());
            intersection.uv2 = intersection.uv1; // @deprecated, r152
        }
        if (normal) {
            _normalA.fromBufferAttribute(normal, a);
            _normalB.fromBufferAttribute(normal, b);
            _normalC.fromBufferAttribute(normal, c);
            intersection.normal = Triangle.getInterpolation(_intersectionPoint, _vA$1, _vB$1, _vC$1, _normalA, _normalB, _normalC, new Vector3());
            if (intersection.normal.dot(ray.direction) > 0) intersection.normal.multiplyScalar(-1);
        }
        const face = {
            a: a,
            b: b,
            c: c,
            normal: new Vector3(),
            materialIndex: 0
        };
        Triangle.getNormal(_vA$1, _vB$1, _vC$1, face.normal);
        intersection.face = face;
    }
    return intersection;
}
class BoxGeometry extends BufferGeometry {
    constructor(width = 1, height = 1, depth = 1, widthSegments = 1, heightSegments = 1, depthSegments = 1){
        super();
        this.type = "BoxGeometry";
        this.parameters = {
            width: width,
            height: height,
            depth: depth,
            widthSegments: widthSegments,
            heightSegments: heightSegments,
            depthSegments: depthSegments
        };
        const scope = this;
        // segments
        widthSegments = Math.floor(widthSegments);
        heightSegments = Math.floor(heightSegments);
        depthSegments = Math.floor(depthSegments);
        // buffers
        const indices = [];
        const vertices = [];
        const normals = [];
        const uvs = [];
        // helper variables
        let numberOfVertices = 0;
        let groupStart = 0;
        // build each side of the box geometry
        buildPlane("z", "y", "x", -1, -1, depth, height, width, depthSegments, heightSegments, 0); // px
        buildPlane("z", "y", "x", 1, -1, depth, height, -width, depthSegments, heightSegments, 1); // nx
        buildPlane("x", "z", "y", 1, 1, width, depth, height, widthSegments, depthSegments, 2); // py
        buildPlane("x", "z", "y", 1, -1, width, depth, -height, widthSegments, depthSegments, 3); // ny
        buildPlane("x", "y", "z", 1, -1, width, height, depth, widthSegments, heightSegments, 4); // pz
        buildPlane("x", "y", "z", -1, -1, width, height, -depth, widthSegments, heightSegments, 5); // nz
        // build geometry
        this.setIndex(indices);
        this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
        this.setAttribute("normal", new Float32BufferAttribute(normals, 3));
        this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
        function buildPlane(u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex) {
            const segmentWidth = width / gridX;
            const segmentHeight = height / gridY;
            const widthHalf = width / 2;
            const heightHalf = height / 2;
            const depthHalf = depth / 2;
            const gridX1 = gridX + 1;
            const gridY1 = gridY + 1;
            let vertexCounter = 0;
            let groupCount = 0;
            const vector = new Vector3();
            // generate vertices, normals and uvs
            for(let iy = 0; iy < gridY1; iy++){
                const y = iy * segmentHeight - heightHalf;
                for(let ix = 0; ix < gridX1; ix++){
                    const x = ix * segmentWidth - widthHalf;
                    // set values to correct vector component
                    vector[u] = x * udir;
                    vector[v] = y * vdir;
                    vector[w] = depthHalf;
                    // now apply vector to vertex buffer
                    vertices.push(vector.x, vector.y, vector.z);
                    // set values to correct vector component
                    vector[u] = 0;
                    vector[v] = 0;
                    vector[w] = depth > 0 ? 1 : -1;
                    // now apply vector to normal buffer
                    normals.push(vector.x, vector.y, vector.z);
                    // uvs
                    uvs.push(ix / gridX);
                    uvs.push(1 - iy / gridY);
                    // counters
                    vertexCounter += 1;
                }
            }
            // indices
            // 1. you need three indices to draw a single face
            // 2. a single segment consists of two faces
            // 3. so we need to generate six (2*3) indices per segment
            for(let iy = 0; iy < gridY; iy++)for(let ix = 0; ix < gridX; ix++){
                const a = numberOfVertices + ix + gridX1 * iy;
                const b = numberOfVertices + ix + gridX1 * (iy + 1);
                const c = numberOfVertices + (ix + 1) + gridX1 * (iy + 1);
                const d = numberOfVertices + (ix + 1) + gridX1 * iy;
                // faces
                indices.push(a, b, d);
                indices.push(b, c, d);
                // increase counter
                groupCount += 6;
            }
            // add a group to the geometry. this will ensure multi material support
            scope.addGroup(groupStart, groupCount, materialIndex);
            // calculate new start value for groups
            groupStart += groupCount;
            // update total number of vertices
            numberOfVertices += vertexCounter;
        }
    }
    copy(source) {
        super.copy(source);
        this.parameters = Object.assign({}, source.parameters);
        return this;
    }
    static fromJSON(data) {
        return new BoxGeometry(data.width, data.height, data.depth, data.widthSegments, data.heightSegments, data.depthSegments);
    }
}
/**
 * Uniform Utilities
 */ function cloneUniforms(src) {
    const dst = {};
    for(const u in src){
        dst[u] = {};
        for(const p in src[u]){
            const property = src[u][p];
            if (property && (property.isColor || property.isMatrix3 || property.isMatrix4 || property.isVector2 || property.isVector3 || property.isVector4 || property.isTexture || property.isQuaternion)) {
                if (property.isRenderTargetTexture) {
                    console.warn("UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms().");
                    dst[u][p] = null;
                } else dst[u][p] = property.clone();
            } else if (Array.isArray(property)) dst[u][p] = property.slice();
            else dst[u][p] = property;
        }
    }
    return dst;
}
function mergeUniforms(uniforms) {
    const merged = {};
    for(let u = 0; u < uniforms.length; u++){
        const tmp = cloneUniforms(uniforms[u]);
        for(const p in tmp)merged[p] = tmp[p];
    }
    return merged;
}
function cloneUniformsGroups(src) {
    const dst = [];
    for(let u = 0; u < src.length; u++)dst.push(src[u].clone());
    return dst;
}
function getUnlitUniformColorSpace(renderer) {
    if (renderer.getRenderTarget() === null) // https://github.com/mrdoob/three.js/pull/23937#issuecomment-1111067398
    return renderer.outputColorSpace;
    return LinearSRGBColorSpace;
}
// Legacy
const UniformsUtils = {
    clone: cloneUniforms,
    merge: mergeUniforms
};
var default_vertex = "void main() {\n	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}";
var default_fragment = "void main() {\n	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}";
class ShaderMaterial extends Material {
    constructor(parameters){
        super();
        this.isShaderMaterial = true;
        this.type = "ShaderMaterial";
        this.defines = {};
        this.uniforms = {};
        this.uniformsGroups = [];
        this.vertexShader = default_vertex;
        this.fragmentShader = default_fragment;
        this.linewidth = 1;
        this.wireframe = false;
        this.wireframeLinewidth = 1;
        this.fog = false; // set to use scene fog
        this.lights = false; // set to use scene lights
        this.clipping = false; // set to use user-defined clipping planes
        this.forceSinglePass = true;
        this.extensions = {
            derivatives: false,
            fragDepth: false,
            drawBuffers: false,
            shaderTextureLOD: false // set to use shader texture LOD
        };
        // When rendered geometry doesn't include these attributes but the material does,
        // use these default values in WebGL. This avoids errors when buffer data is missing.
        this.defaultAttributeValues = {
            "color": [
                1,
                1,
                1
            ],
            "uv": [
                0,
                0
            ],
            "uv1": [
                0,
                0
            ]
        };
        this.index0AttributeName = undefined;
        this.uniformsNeedUpdate = false;
        this.glslVersion = null;
        if (parameters !== undefined) this.setValues(parameters);
    }
    copy(source) {
        super.copy(source);
        this.fragmentShader = source.fragmentShader;
        this.vertexShader = source.vertexShader;
        this.uniforms = cloneUniforms(source.uniforms);
        this.uniformsGroups = cloneUniformsGroups(source.uniformsGroups);
        this.defines = Object.assign({}, source.defines);
        this.wireframe = source.wireframe;
        this.wireframeLinewidth = source.wireframeLinewidth;
        this.fog = source.fog;
        this.lights = source.lights;
        this.clipping = source.clipping;
        this.extensions = Object.assign({}, source.extensions);
        this.glslVersion = source.glslVersion;
        return this;
    }
    toJSON(meta) {
        const data = super.toJSON(meta);
        data.glslVersion = this.glslVersion;
        data.uniforms = {};
        for(const name in this.uniforms){
            const uniform = this.uniforms[name];
            const value = uniform.value;
            if (value && value.isTexture) data.uniforms[name] = {
                type: "t",
                value: value.toJSON(meta).uuid
            };
            else if (value && value.isColor) data.uniforms[name] = {
                type: "c",
                value: value.getHex()
            };
            else if (value && value.isVector2) data.uniforms[name] = {
                type: "v2",
                value: value.toArray()
            };
            else if (value && value.isVector3) data.uniforms[name] = {
                type: "v3",
                value: value.toArray()
            };
            else if (value && value.isVector4) data.uniforms[name] = {
                type: "v4",
                value: value.toArray()
            };
            else if (value && value.isMatrix3) data.uniforms[name] = {
                type: "m3",
                value: value.toArray()
            };
            else if (value && value.isMatrix4) data.uniforms[name] = {
                type: "m4",
                value: value.toArray()
            };
            else data.uniforms[name] = {
                value: value
            };
        }
        if (Object.keys(this.defines).length > 0) data.defines = this.defines;
        data.vertexShader = this.vertexShader;
        data.fragmentShader = this.fragmentShader;
        data.lights = this.lights;
        data.clipping = this.clipping;
        const extensions = {};
        for(const key in this.extensions)if (this.extensions[key] === true) extensions[key] = true;
        if (Object.keys(extensions).length > 0) data.extensions = extensions;
        return data;
    }
}
class Camera extends Object3D {
    constructor(){
        super();
        this.isCamera = true;
        this.type = "Camera";
        this.matrixWorldInverse = new Matrix4();
        this.projectionMatrix = new Matrix4();
        this.projectionMatrixInverse = new Matrix4();
        this.coordinateSystem = WebGLCoordinateSystem;
    }
    copy(source, recursive) {
        super.copy(source, recursive);
        this.matrixWorldInverse.copy(source.matrixWorldInverse);
        this.projectionMatrix.copy(source.projectionMatrix);
        this.projectionMatrixInverse.copy(source.projectionMatrixInverse);
        this.coordinateSystem = source.coordinateSystem;
        return this;
    }
    getWorldDirection(target) {
        this.updateWorldMatrix(true, false);
        const e = this.matrixWorld.elements;
        return target.set(-e[8], -e[9], -e[10]).normalize();
    }
    updateMatrixWorld(force) {
        super.updateMatrixWorld(force);
        this.matrixWorldInverse.copy(this.matrixWorld).invert();
    }
    updateWorldMatrix(updateParents, updateChildren) {
        super.updateWorldMatrix(updateParents, updateChildren);
        this.matrixWorldInverse.copy(this.matrixWorld).invert();
    }
    clone() {
        return new this.constructor().copy(this);
    }
}
class PerspectiveCamera extends Camera {
    constructor(fov = 50, aspect = 1, near = 0.1, far = 2000){
        super();
        this.isPerspectiveCamera = true;
        this.type = "PerspectiveCamera";
        this.fov = fov;
        this.zoom = 1;
        this.near = near;
        this.far = far;
        this.focus = 10;
        this.aspect = aspect;
        this.view = null;
        this.filmGauge = 35; // width of the film (default in millimeters)
        this.filmOffset = 0; // horizontal film offset (same unit as gauge)
        this.updateProjectionMatrix();
    }
    copy(source, recursive) {
        super.copy(source, recursive);
        this.fov = source.fov;
        this.zoom = source.zoom;
        this.near = source.near;
        this.far = source.far;
        this.focus = source.focus;
        this.aspect = source.aspect;
        this.view = source.view === null ? null : Object.assign({}, source.view);
        this.filmGauge = source.filmGauge;
        this.filmOffset = source.filmOffset;
        return this;
    }
    /**
	 * Sets the FOV by focal length in respect to the current .filmGauge.
	 *
	 * The default film gauge is 35, so that the focal length can be specified for
	 * a 35mm (full frame) camera.
	 *
	 * Values for focal length and film gauge must have the same unit.
	 */ setFocalLength(focalLength) {
        /** see {@link http://www.bobatkins.com/photography/technical/field_of_view.html} */ const vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;
        this.fov = RAD2DEG * 2 * Math.atan(vExtentSlope);
        this.updateProjectionMatrix();
    }
    /**
	 * Calculates the focal length from the current .fov and .filmGauge.
	 */ getFocalLength() {
        const vExtentSlope = Math.tan(DEG2RAD * 0.5 * this.fov);
        return 0.5 * this.getFilmHeight() / vExtentSlope;
    }
    getEffectiveFOV() {
        return RAD2DEG * 2 * Math.atan(Math.tan(DEG2RAD * 0.5 * this.fov) / this.zoom);
    }
    getFilmWidth() {
        // film not completely covered in portrait format (aspect < 1)
        return this.filmGauge * Math.min(this.aspect, 1);
    }
    getFilmHeight() {
        // film not completely covered in landscape format (aspect > 1)
        return this.filmGauge / Math.max(this.aspect, 1);
    }
    /**
	 * Sets an offset in a larger frustum. This is useful for multi-window or
	 * multi-monitor/multi-machine setups.
	 *
	 * For example, if you have 3x2 monitors and each monitor is 1920x1080 and
	 * the monitors are in grid like this
	 *
	 *   +---+---+---+
	 *   | A | B | C |
	 *   +---+---+---+
	 *   | D | E | F |
	 *   +---+---+---+
	 *
	 * then for each monitor you would call it like this
	 *
	 *   const w = 1920;
	 *   const h = 1080;
	 *   const fullWidth = w * 3;
	 *   const fullHeight = h * 2;
	 *
	 *   --A--
	 *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );
	 *   --B--
	 *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );
	 *   --C--
	 *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );
	 *   --D--
	 *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );
	 *   --E--
	 *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );
	 *   --F--
	 *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );
	 *
	 *   Note there is no reason monitors have to be the same size or in a grid.
	 */ setViewOffset(fullWidth, fullHeight, x, y, width, height) {
        this.aspect = fullWidth / fullHeight;
        if (this.view === null) this.view = {
            enabled: true,
            fullWidth: 1,
            fullHeight: 1,
            offsetX: 0,
            offsetY: 0,
            width: 1,
            height: 1
        };
        this.view.enabled = true;
        this.view.fullWidth = fullWidth;
        this.view.fullHeight = fullHeight;
        this.view.offsetX = x;
        this.view.offsetY = y;
        this.view.width = width;
        this.view.height = height;
        this.updateProjectionMatrix();
    }
    clearViewOffset() {
        if (this.view !== null) this.view.enabled = false;
        this.updateProjectionMatrix();
    }
    updateProjectionMatrix() {
        const near = this.near;
        let top = near * Math.tan(DEG2RAD * 0.5 * this.fov) / this.zoom;
        let height = 2 * top;
        let width = this.aspect * height;
        let left = -0.5 * width;
        const view = this.view;
        if (this.view !== null && this.view.enabled) {
            const fullWidth = view.fullWidth, fullHeight = view.fullHeight;
            left += view.offsetX * width / fullWidth;
            top -= view.offsetY * height / fullHeight;
            width *= view.width / fullWidth;
            height *= view.height / fullHeight;
        }
        const skew = this.filmOffset;
        if (skew !== 0) left += near * skew / this.getFilmWidth();
        this.projectionMatrix.makePerspective(left, left + width, top, top - height, near, this.far, this.coordinateSystem);
        this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
    }
    toJSON(meta) {
        const data = super.toJSON(meta);
        data.object.fov = this.fov;
        data.object.zoom = this.zoom;
        data.object.near = this.near;
        data.object.far = this.far;
        data.object.focus = this.focus;
        data.object.aspect = this.aspect;
        if (this.view !== null) data.object.view = Object.assign({}, this.view);
        data.object.filmGauge = this.filmGauge;
        data.object.filmOffset = this.filmOffset;
        return data;
    }
}
const fov = -90; // negative fov is not an error
const aspect = 1;
class CubeCamera extends Object3D {
    constructor(near, far, renderTarget){
        super();
        this.type = "CubeCamera";
        this.renderTarget = renderTarget;
        this.coordinateSystem = null;
        const cameraPX = new PerspectiveCamera(fov, aspect, near, far);
        cameraPX.layers = this.layers;
        this.add(cameraPX);
        const cameraNX = new PerspectiveCamera(fov, aspect, near, far);
        cameraNX.layers = this.layers;
        this.add(cameraNX);
        const cameraPY = new PerspectiveCamera(fov, aspect, near, far);
        cameraPY.layers = this.layers;
        this.add(cameraPY);
        const cameraNY = new PerspectiveCamera(fov, aspect, near, far);
        cameraNY.layers = this.layers;
        this.add(cameraNY);
        const cameraPZ = new PerspectiveCamera(fov, aspect, near, far);
        cameraPZ.layers = this.layers;
        this.add(cameraPZ);
        const cameraNZ = new PerspectiveCamera(fov, aspect, near, far);
        cameraNZ.layers = this.layers;
        this.add(cameraNZ);
    }
    updateCoordinateSystem() {
        const coordinateSystem = this.coordinateSystem;
        const cameras = this.children.concat();
        const [cameraPX, cameraNX, cameraPY, cameraNY, cameraPZ, cameraNZ] = cameras;
        for (const camera of cameras)this.remove(camera);
        if (coordinateSystem === WebGLCoordinateSystem) {
            cameraPX.up.set(0, 1, 0);
            cameraPX.lookAt(1, 0, 0);
            cameraNX.up.set(0, 1, 0);
            cameraNX.lookAt(-1, 0, 0);
            cameraPY.up.set(0, 0, -1);
            cameraPY.lookAt(0, 1, 0);
            cameraNY.up.set(0, 0, 1);
            cameraNY.lookAt(0, -1, 0);
            cameraPZ.up.set(0, 1, 0);
            cameraPZ.lookAt(0, 0, 1);
            cameraNZ.up.set(0, 1, 0);
            cameraNZ.lookAt(0, 0, -1);
        } else if (coordinateSystem === WebGPUCoordinateSystem) {
            cameraPX.up.set(0, -1, 0);
            cameraPX.lookAt(-1, 0, 0);
            cameraNX.up.set(0, -1, 0);
            cameraNX.lookAt(1, 0, 0);
            cameraPY.up.set(0, 0, 1);
            cameraPY.lookAt(0, 1, 0);
            cameraNY.up.set(0, 0, -1);
            cameraNY.lookAt(0, -1, 0);
            cameraPZ.up.set(0, -1, 0);
            cameraPZ.lookAt(0, 0, 1);
            cameraNZ.up.set(0, -1, 0);
            cameraNZ.lookAt(0, 0, -1);
        } else throw new Error("THREE.CubeCamera.updateCoordinateSystem(): Invalid coordinate system: " + coordinateSystem);
        for (const camera of cameras){
            this.add(camera);
            camera.updateMatrixWorld();
        }
    }
    update(renderer, scene) {
        if (this.parent === null) this.updateMatrixWorld();
        const renderTarget = this.renderTarget;
        if (this.coordinateSystem !== renderer.coordinateSystem) {
            this.coordinateSystem = renderer.coordinateSystem;
            this.updateCoordinateSystem();
        }
        const [cameraPX, cameraNX, cameraPY, cameraNY, cameraPZ, cameraNZ] = this.children;
        const currentRenderTarget = renderer.getRenderTarget();
        const currentXrEnabled = renderer.xr.enabled;
        renderer.xr.enabled = false;
        const generateMipmaps = renderTarget.texture.generateMipmaps;
        renderTarget.texture.generateMipmaps = false;
        renderer.setRenderTarget(renderTarget, 0);
        renderer.render(scene, cameraPX);
        renderer.setRenderTarget(renderTarget, 1);
        renderer.render(scene, cameraNX);
        renderer.setRenderTarget(renderTarget, 2);
        renderer.render(scene, cameraPY);
        renderer.setRenderTarget(renderTarget, 3);
        renderer.render(scene, cameraNY);
        renderer.setRenderTarget(renderTarget, 4);
        renderer.render(scene, cameraPZ);
        renderTarget.texture.generateMipmaps = generateMipmaps;
        renderer.setRenderTarget(renderTarget, 5);
        renderer.render(scene, cameraNZ);
        renderer.setRenderTarget(currentRenderTarget);
        renderer.xr.enabled = currentXrEnabled;
        renderTarget.texture.needsPMREMUpdate = true;
    }
}
class CubeTexture extends Texture {
    constructor(images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, colorSpace1){
        images = images !== undefined ? images : [];
        mapping = mapping !== undefined ? mapping : CubeReflectionMapping;
        super(images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, colorSpace1);
        this.isCubeTexture = true;
        this.flipY = false;
    }
    get images() {
        return this.image;
    }
    set images(value) {
        this.image = value;
    }
}
class WebGLCubeRenderTarget extends WebGLRenderTarget {
    constructor(size = 1, options = {}){
        super(size, size, options);
        this.isWebGLCubeRenderTarget = true;
        const image = {
            width: size,
            height: size,
            depth: 1
        };
        const images = [
            image,
            image,
            image,
            image,
            image,
            image
        ];
        if (options.encoding !== undefined) {
            // @deprecated, r152
            warnOnce("THREE.WebGLCubeRenderTarget: option.encoding has been replaced by option.colorSpace.");
            options.colorSpace = options.encoding === sRGBEncoding ? SRGBColorSpace : NoColorSpace;
        }
        this.texture = new CubeTexture(images, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.colorSpace);
        // By convention -- likely based on the RenderMan spec from the 1990's -- cube maps are specified by WebGL (and three.js)
        // in a coordinate system in which positive-x is to the right when looking up the positive-z axis -- in other words,
        // in a left-handed coordinate system. By continuing this convention, preexisting cube maps continued to render correctly.
        // three.js uses a right-handed coordinate system. So environment maps used in three.js appear to have px and nx swapped
        // and the flag isRenderTargetTexture controls this conversion. The flip is not required when using WebGLCubeRenderTarget.texture
        // as a cube texture (this is detected when isRenderTargetTexture is set to true for cube textures).
        this.texture.isRenderTargetTexture = true;
        this.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;
        this.texture.minFilter = options.minFilter !== undefined ? options.minFilter : LinearFilter;
    }
    fromEquirectangularTexture(renderer, texture) {
        this.texture.type = texture.type;
        this.texture.colorSpace = texture.colorSpace;
        this.texture.generateMipmaps = texture.generateMipmaps;
        this.texture.minFilter = texture.minFilter;
        this.texture.magFilter = texture.magFilter;
        const shader = {
            uniforms: {
                tEquirect: {
                    value: null
                }
            },
            vertexShader: /* glsl */ `

				varying vec3 vWorldDirection;

				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

				}

				void main() {

					vWorldDirection = transformDirection( position, modelMatrix );

					#include <begin_vertex>
					#include <project_vertex>

				}
			`,
            fragmentShader: /* glsl */ `

				uniform sampler2D tEquirect;

				varying vec3 vWorldDirection;

				#include <common>

				void main() {

					vec3 direction = normalize( vWorldDirection );

					vec2 sampleUV = equirectUv( direction );

					gl_FragColor = texture2D( tEquirect, sampleUV );

				}
			`
        };
        const geometry = new BoxGeometry(5, 5, 5);
        const material = new ShaderMaterial({
            name: "CubemapFromEquirect",
            uniforms: cloneUniforms(shader.uniforms),
            vertexShader: shader.vertexShader,
            fragmentShader: shader.fragmentShader,
            side: BackSide,
            blending: NoBlending
        });
        material.uniforms.tEquirect.value = texture;
        const mesh = new Mesh(geometry, material);
        const currentMinFilter = texture.minFilter;
        // Avoid blurred poles
        if (texture.minFilter === LinearMipmapLinearFilter) texture.minFilter = LinearFilter;
        const camera = new CubeCamera(1, 10, this);
        camera.update(renderer, mesh);
        texture.minFilter = currentMinFilter;
        mesh.geometry.dispose();
        mesh.material.dispose();
        return this;
    }
    clear(renderer, color, depth, stencil) {
        const currentRenderTarget = renderer.getRenderTarget();
        for(let i = 0; i < 6; i++){
            renderer.setRenderTarget(this, i);
            renderer.clear(color, depth, stencil);
        }
        renderer.setRenderTarget(currentRenderTarget);
    }
}
const _vector1 = /*@__PURE__*/ new Vector3();
const _vector2 = /*@__PURE__*/ new Vector3();
const _normalMatrix = /*@__PURE__*/ new Matrix3();
class Plane {
    constructor(normal = new Vector3(1, 0, 0), constant = 0){
        this.isPlane = true;
        // normal is assumed to be normalized
        this.normal = normal;
        this.constant = constant;
    }
    set(normal, constant) {
        this.normal.copy(normal);
        this.constant = constant;
        return this;
    }
    setComponents(x, y, z, w) {
        this.normal.set(x, y, z);
        this.constant = w;
        return this;
    }
    setFromNormalAndCoplanarPoint(normal, point) {
        this.normal.copy(normal);
        this.constant = -point.dot(this.normal);
        return this;
    }
    setFromCoplanarPoints(a, b, c) {
        const normal = _vector1.subVectors(c, b).cross(_vector2.subVectors(a, b)).normalize();
        // Q: should an error be thrown if normal is zero (e.g. degenerate plane)?
        this.setFromNormalAndCoplanarPoint(normal, a);
        return this;
    }
    copy(plane) {
        this.normal.copy(plane.normal);
        this.constant = plane.constant;
        return this;
    }
    normalize() {
        // Note: will lead to a divide by zero if the plane is invalid.
        const inverseNormalLength = 1.0 / this.normal.length();
        this.normal.multiplyScalar(inverseNormalLength);
        this.constant *= inverseNormalLength;
        return this;
    }
    negate() {
        this.constant *= -1;
        this.normal.negate();
        return this;
    }
    distanceToPoint(point) {
        return this.normal.dot(point) + this.constant;
    }
    distanceToSphere(sphere) {
        return this.distanceToPoint(sphere.center) - sphere.radius;
    }
    projectPoint(point, target) {
        return target.copy(point).addScaledVector(this.normal, -this.distanceToPoint(point));
    }
    intersectLine(line, target) {
        const direction = line.delta(_vector1);
        const denominator = this.normal.dot(direction);
        if (denominator === 0) {
            // line is coplanar, return origin
            if (this.distanceToPoint(line.start) === 0) return target.copy(line.start);
            // Unsure if this is the correct method to handle this case.
            return null;
        }
        const t = -(line.start.dot(this.normal) + this.constant) / denominator;
        if (t < 0 || t > 1) return null;
        return target.copy(line.start).addScaledVector(direction, t);
    }
    intersectsLine(line) {
        // Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.
        const startSign = this.distanceToPoint(line.start);
        const endSign = this.distanceToPoint(line.end);
        return startSign < 0 && endSign > 0 || endSign < 0 && startSign > 0;
    }
    intersectsBox(box) {
        return box.intersectsPlane(this);
    }
    intersectsSphere(sphere) {
        return sphere.intersectsPlane(this);
    }
    coplanarPoint(target) {
        return target.copy(this.normal).multiplyScalar(-this.constant);
    }
    applyMatrix4(matrix, optionalNormalMatrix) {
        const normalMatrix = optionalNormalMatrix || _normalMatrix.getNormalMatrix(matrix);
        const referencePoint = this.coplanarPoint(_vector1).applyMatrix4(matrix);
        const normal = this.normal.applyMatrix3(normalMatrix).normalize();
        this.constant = -referencePoint.dot(normal);
        return this;
    }
    translate(offset) {
        this.constant -= offset.dot(this.normal);
        return this;
    }
    equals(plane) {
        return plane.normal.equals(this.normal) && plane.constant === this.constant;
    }
    clone() {
        return new this.constructor().copy(this);
    }
}
const _sphere$4 = /*@__PURE__*/ new Sphere();
const _vector$6 = /*@__PURE__*/ new Vector3();
class Frustum {
    constructor(p0 = new Plane(), p1 = new Plane(), p2 = new Plane(), p3 = new Plane(), p4 = new Plane(), p5 = new Plane()){
        this.planes = [
            p0,
            p1,
            p2,
            p3,
            p4,
            p5
        ];
    }
    set(p0, p1, p2, p3, p4, p5) {
        const planes = this.planes;
        planes[0].copy(p0);
        planes[1].copy(p1);
        planes[2].copy(p2);
        planes[3].copy(p3);
        planes[4].copy(p4);
        planes[5].copy(p5);
        return this;
    }
    copy(frustum) {
        const planes = this.planes;
        for(let i = 0; i < 6; i++)planes[i].copy(frustum.planes[i]);
        return this;
    }
    setFromProjectionMatrix(m, coordinateSystem = WebGLCoordinateSystem) {
        const planes = this.planes;
        const me = m.elements;
        const me0 = me[0], me1 = me[1], me2 = me[2], me3 = me[3];
        const me4 = me[4], me5 = me[5], me6 = me[6], me7 = me[7];
        const me8 = me[8], me9 = me[9], me10 = me[10], me11 = me[11];
        const me12 = me[12], me13 = me[13], me14 = me[14], me15 = me[15];
        planes[0].setComponents(me3 - me0, me7 - me4, me11 - me8, me15 - me12).normalize();
        planes[1].setComponents(me3 + me0, me7 + me4, me11 + me8, me15 + me12).normalize();
        planes[2].setComponents(me3 + me1, me7 + me5, me11 + me9, me15 + me13).normalize();
        planes[3].setComponents(me3 - me1, me7 - me5, me11 - me9, me15 - me13).normalize();
        planes[4].setComponents(me3 - me2, me7 - me6, me11 - me10, me15 - me14).normalize();
        if (coordinateSystem === WebGLCoordinateSystem) planes[5].setComponents(me3 + me2, me7 + me6, me11 + me10, me15 + me14).normalize();
        else if (coordinateSystem === WebGPUCoordinateSystem) planes[5].setComponents(me2, me6, me10, me14).normalize();
        else throw new Error("THREE.Frustum.setFromProjectionMatrix(): Invalid coordinate system: " + coordinateSystem);
        return this;
    }
    intersectsObject(object) {
        if (object.boundingSphere !== undefined) {
            if (object.boundingSphere === null) object.computeBoundingSphere();
            _sphere$4.copy(object.boundingSphere).applyMatrix4(object.matrixWorld);
        } else {
            const geometry = object.geometry;
            if (geometry.boundingSphere === null) geometry.computeBoundingSphere();
            _sphere$4.copy(geometry.boundingSphere).applyMatrix4(object.matrixWorld);
        }
        return this.intersectsSphere(_sphere$4);
    }
    intersectsSprite(sprite) {
        _sphere$4.center.set(0, 0, 0);
        _sphere$4.radius = 0.7071067811865476;
        _sphere$4.applyMatrix4(sprite.matrixWorld);
        return this.intersectsSphere(_sphere$4);
    }
    intersectsSphere(sphere) {
        const planes = this.planes;
        const center = sphere.center;
        const negRadius = -sphere.radius;
        for(let i = 0; i < 6; i++){
            const distance = planes[i].distanceToPoint(center);
            if (distance < negRadius) return false;
        }
        return true;
    }
    intersectsBox(box) {
        const planes = this.planes;
        for(let i = 0; i < 6; i++){
            const plane = planes[i];
            // corner at max distance
            _vector$6.x = plane.normal.x > 0 ? box.max.x : box.min.x;
            _vector$6.y = plane.normal.y > 0 ? box.max.y : box.min.y;
            _vector$6.z = plane.normal.z > 0 ? box.max.z : box.min.z;
            if (plane.distanceToPoint(_vector$6) < 0) return false;
        }
        return true;
    }
    containsPoint(point) {
        const planes = this.planes;
        for(let i = 0; i < 6; i++){
            if (planes[i].distanceToPoint(point) < 0) return false;
        }
        return true;
    }
    clone() {
        return new this.constructor().copy(this);
    }
}
function WebGLAnimation() {
    let context = null;
    let isAnimating = false;
    let animationLoop = null;
    let requestId = null;
    function onAnimationFrame(time, frame) {
        animationLoop(time, frame);
        requestId = context.requestAnimationFrame(onAnimationFrame);
    }
    return {
        start: function() {
            if (isAnimating === true) return;
            if (animationLoop === null) return;
            requestId = context.requestAnimationFrame(onAnimationFrame);
            isAnimating = true;
        },
        stop: function() {
            context.cancelAnimationFrame(requestId);
            isAnimating = false;
        },
        setAnimationLoop: function(callback) {
            animationLoop = callback;
        },
        setContext: function(value) {
            context = value;
        }
    };
}
function WebGLAttributes(gl, capabilities) {
    const isWebGL2 = capabilities.isWebGL2;
    const buffers = new WeakMap();
    function createBuffer(attribute, bufferType) {
        const array = attribute.array;
        const usage = attribute.usage;
        const buffer = gl.createBuffer();
        gl.bindBuffer(bufferType, buffer);
        gl.bufferData(bufferType, array, usage);
        attribute.onUploadCallback();
        let type;
        if (array instanceof Float32Array) type = gl.FLOAT;
        else if (array instanceof Uint16Array) {
            if (attribute.isFloat16BufferAttribute) {
                if (isWebGL2) type = gl.HALF_FLOAT;
                else throw new Error("THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2.");
            } else type = gl.UNSIGNED_SHORT;
        } else if (array instanceof Int16Array) type = gl.SHORT;
        else if (array instanceof Uint32Array) type = gl.UNSIGNED_INT;
        else if (array instanceof Int32Array) type = gl.INT;
        else if (array instanceof Int8Array) type = gl.BYTE;
        else if (array instanceof Uint8Array) type = gl.UNSIGNED_BYTE;
        else if (array instanceof Uint8ClampedArray) type = gl.UNSIGNED_BYTE;
        else throw new Error("THREE.WebGLAttributes: Unsupported buffer data format: " + array);
        return {
            buffer: buffer,
            type: type,
            bytesPerElement: array.BYTES_PER_ELEMENT,
            version: attribute.version
        };
    }
    function updateBuffer(buffer, attribute, bufferType) {
        const array = attribute.array;
        const updateRange = attribute.updateRange;
        gl.bindBuffer(bufferType, buffer);
        if (updateRange.count === -1) // Not using update ranges
        gl.bufferSubData(bufferType, 0, array);
        else {
            if (isWebGL2) gl.bufferSubData(bufferType, updateRange.offset * array.BYTES_PER_ELEMENT, array, updateRange.offset, updateRange.count);
            else gl.bufferSubData(bufferType, updateRange.offset * array.BYTES_PER_ELEMENT, array.subarray(updateRange.offset, updateRange.offset + updateRange.count));
            updateRange.count = -1; // reset range
        }
        attribute.onUploadCallback();
    }
    //
    function get(attribute) {
        if (attribute.isInterleavedBufferAttribute) attribute = attribute.data;
        return buffers.get(attribute);
    }
    function remove(attribute) {
        if (attribute.isInterleavedBufferAttribute) attribute = attribute.data;
        const data = buffers.get(attribute);
        if (data) {
            gl.deleteBuffer(data.buffer);
            buffers.delete(attribute);
        }
    }
    function update(attribute, bufferType) {
        if (attribute.isGLBufferAttribute) {
            const cached = buffers.get(attribute);
            if (!cached || cached.version < attribute.version) buffers.set(attribute, {
                buffer: attribute.buffer,
                type: attribute.type,
                bytesPerElement: attribute.elementSize,
                version: attribute.version
            });
            return;
        }
        if (attribute.isInterleavedBufferAttribute) attribute = attribute.data;
        const data = buffers.get(attribute);
        if (data === undefined) buffers.set(attribute, createBuffer(attribute, bufferType));
        else if (data.version < attribute.version) {
            updateBuffer(data.buffer, attribute, bufferType);
            data.version = attribute.version;
        }
    }
    return {
        get: get,
        remove: remove,
        update: update
    };
}
class PlaneGeometry extends BufferGeometry {
    constructor(width = 1, height = 1, widthSegments = 1, heightSegments = 1){
        super();
        this.type = "PlaneGeometry";
        this.parameters = {
            width: width,
            height: height,
            widthSegments: widthSegments,
            heightSegments: heightSegments
        };
        const width_half = width / 2;
        const height_half = height / 2;
        const gridX = Math.floor(widthSegments);
        const gridY = Math.floor(heightSegments);
        const gridX1 = gridX + 1;
        const gridY1 = gridY + 1;
        const segment_width = width / gridX;
        const segment_height = height / gridY;
        //
        const indices = [];
        const vertices = [];
        const normals = [];
        const uvs = [];
        for(let iy = 0; iy < gridY1; iy++){
            const y = iy * segment_height - height_half;
            for(let ix = 0; ix < gridX1; ix++){
                const x = ix * segment_width - width_half;
                vertices.push(x, -y, 0);
                normals.push(0, 0, 1);
                uvs.push(ix / gridX);
                uvs.push(1 - iy / gridY);
            }
        }
        for(let iy = 0; iy < gridY; iy++)for(let ix = 0; ix < gridX; ix++){
            const a = ix + gridX1 * iy;
            const b = ix + gridX1 * (iy + 1);
            const c = ix + 1 + gridX1 * (iy + 1);
            const d = ix + 1 + gridX1 * iy;
            indices.push(a, b, d);
            indices.push(b, c, d);
        }
        this.setIndex(indices);
        this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
        this.setAttribute("normal", new Float32BufferAttribute(normals, 3));
        this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
    }
    copy(source) {
        super.copy(source);
        this.parameters = Object.assign({}, source.parameters);
        return this;
    }
    static fromJSON(data) {
        return new PlaneGeometry(data.width, data.height, data.widthSegments, data.heightSegments);
    }
}
var alphahash_fragment = "#ifdef USE_ALPHAHASH\n	if ( diffuseColor.a < getAlphaHashThreshold( vPosition ) ) discard;\n#endif";
var alphahash_pars_fragment = "#ifdef USE_ALPHAHASH\n	const float ALPHA_HASH_SCALE = 0.05;\n	float hash2D( vec2 value ) {\n		return fract( 1.0e4 * sin( 17.0 * value.x + 0.1 * value.y ) * ( 0.1 + abs( sin( 13.0 * value.y + value.x ) ) ) );\n	}\n	float hash3D( vec3 value ) {\n		return hash2D( vec2( hash2D( value.xy ), value.z ) );\n	}\n	float getAlphaHashThreshold( vec3 position ) {\n		float maxDeriv = max(\n			length( dFdx( position.xyz ) ),\n			length( dFdy( position.xyz ) )\n		);\n		float pixScale = 1.0 / ( ALPHA_HASH_SCALE * maxDeriv );\n		vec2 pixScales = vec2(\n			exp2( floor( log2( pixScale ) ) ),\n			exp2( ceil( log2( pixScale ) ) )\n		);\n		vec2 alpha = vec2(\n			hash3D( floor( pixScales.x * position.xyz ) ),\n			hash3D( floor( pixScales.y * position.xyz ) )\n		);\n		float lerpFactor = fract( log2( pixScale ) );\n		float x = ( 1.0 - lerpFactor ) * alpha.x + lerpFactor * alpha.y;\n		float a = min( lerpFactor, 1.0 - lerpFactor );\n		vec3 cases = vec3(\n			x * x / ( 2.0 * a * ( 1.0 - a ) ),\n			( x - 0.5 * a ) / ( 1.0 - a ),\n			1.0 - ( ( 1.0 - x ) * ( 1.0 - x ) / ( 2.0 * a * ( 1.0 - a ) ) )\n		);\n		float threshold = ( x < ( 1.0 - a ) )\n			? ( ( x < a ) ? cases.x : cases.y )\n			: cases.z;\n		return clamp( threshold , 1.0e-6, 1.0 );\n	}\n#endif";
var alphamap_fragment = "#ifdef USE_ALPHAMAP\n	diffuseColor.a *= texture2D( alphaMap, vAlphaMapUv ).g;\n#endif";
var alphamap_pars_fragment = "#ifdef USE_ALPHAMAP\n	uniform sampler2D alphaMap;\n#endif";
var alphatest_fragment = "#ifdef USE_ALPHATEST\n	if ( diffuseColor.a < alphaTest ) discard;\n#endif";
var alphatest_pars_fragment = "#ifdef USE_ALPHATEST\n	uniform float alphaTest;\n#endif";
var aomap_fragment = "#ifdef USE_AOMAP\n	float ambientOcclusion = ( texture2D( aoMap, vAoMapUv ).r - 1.0 ) * aoMapIntensity + 1.0;\n	reflectedLight.indirectDiffuse *= ambientOcclusion;\n	#if defined( USE_ENVMAP ) && defined( STANDARD )\n		float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n		reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );\n	#endif\n#endif";
var aomap_pars_fragment = "#ifdef USE_AOMAP\n	uniform sampler2D aoMap;\n	uniform float aoMapIntensity;\n#endif";
var begin_vertex = "vec3 transformed = vec3( position );\n#ifdef USE_ALPHAHASH\n	vPosition = vec3( position );\n#endif";
var beginnormal_vertex = "vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n	vec3 objectTangent = vec3( tangent.xyz );\n#endif";
var bsdfs = "float G_BlinnPhong_Implicit( ) {\n	return 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n	return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {\n	vec3 halfDir = normalize( lightDir + viewDir );\n	float dotNH = saturate( dot( normal, halfDir ) );\n	float dotVH = saturate( dot( viewDir, halfDir ) );\n	vec3 F = F_Schlick( specularColor, 1.0, dotVH );\n	float G = G_BlinnPhong_Implicit( );\n	float D = D_BlinnPhong( shininess, dotNH );\n	return F * ( G * D );\n} // validated";
var iridescence_fragment = "#ifdef USE_IRIDESCENCE\n	const mat3 XYZ_TO_REC709 = mat3(\n		 3.2404542, -0.9692660,  0.0556434,\n		-1.5371385,  1.8760108, -0.2040259,\n		-0.4985314,  0.0415560,  1.0572252\n	);\n	vec3 Fresnel0ToIor( vec3 fresnel0 ) {\n		vec3 sqrtF0 = sqrt( fresnel0 );\n		return ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );\n	}\n	vec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {\n		return pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );\n	}\n	float IorToFresnel0( float transmittedIor, float incidentIor ) {\n		return pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));\n	}\n	vec3 evalSensitivity( float OPD, vec3 shift ) {\n		float phase = 2.0 * PI * OPD * 1.0e-9;\n		vec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );\n		vec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );\n		vec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );\n		vec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );\n		xyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );\n		xyz /= 1.0685e-7;\n		vec3 rgb = XYZ_TO_REC709 * xyz;\n		return rgb;\n	}\n	vec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {\n		vec3 I;\n		float iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );\n		float sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );\n		float cosTheta2Sq = 1.0 - sinTheta2Sq;\n		if ( cosTheta2Sq < 0.0 ) {\n			return vec3( 1.0 );\n		}\n		float cosTheta2 = sqrt( cosTheta2Sq );\n		float R0 = IorToFresnel0( iridescenceIOR, outsideIOR );\n		float R12 = F_Schlick( R0, 1.0, cosTheta1 );\n		float T121 = 1.0 - R12;\n		float phi12 = 0.0;\n		if ( iridescenceIOR < outsideIOR ) phi12 = PI;\n		float phi21 = PI - phi12;\n		vec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );		vec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );\n		vec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );\n		vec3 phi23 = vec3( 0.0 );\n		if ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;\n		if ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;\n		if ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;\n		float OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;\n		vec3 phi = vec3( phi21 ) + phi23;\n		vec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );\n		vec3 r123 = sqrt( R123 );\n		vec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );\n		vec3 C0 = R12 + Rs;\n		I = C0;\n		vec3 Cm = Rs - T121;\n		for ( int m = 1; m <= 2; ++ m ) {\n			Cm *= r123;\n			vec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );\n			I += Cm * Sm;\n		}\n		return max( I, vec3( 0.0 ) );\n	}\n#endif";
var bumpmap_pars_fragment = "#ifdef USE_BUMPMAP\n	uniform sampler2D bumpMap;\n	uniform float bumpScale;\n	vec2 dHdxy_fwd() {\n		vec2 dSTdx = dFdx( vBumpMapUv );\n		vec2 dSTdy = dFdy( vBumpMapUv );\n		float Hll = bumpScale * texture2D( bumpMap, vBumpMapUv ).x;\n		float dBx = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdx ).x - Hll;\n		float dBy = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdy ).x - Hll;\n		return vec2( dBx, dBy );\n	}\n	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\n		vec3 vSigmaX = dFdx( surf_pos.xyz );\n		vec3 vSigmaY = dFdy( surf_pos.xyz );\n		vec3 vN = surf_norm;\n		vec3 R1 = cross( vSigmaY, vN );\n		vec3 R2 = cross( vN, vSigmaX );\n		float fDet = dot( vSigmaX, R1 ) * faceDirection;\n		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n		return normalize( abs( fDet ) * surf_norm - vGrad );\n	}\n#endif";
var clipping_planes_fragment = "#if NUM_CLIPPING_PLANES > 0\n	vec4 plane;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n		plane = clippingPlanes[ i ];\n		if ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\n	}\n	#pragma unroll_loop_end\n	#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n		bool clipped = true;\n		#pragma unroll_loop_start\n		for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n			plane = clippingPlanes[ i ];\n			clipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\n		}\n		#pragma unroll_loop_end\n		if ( clipped ) discard;\n	#endif\n#endif";
var clipping_planes_pars_fragment = "#if NUM_CLIPPING_PLANES > 0\n	varying vec3 vClipPosition;\n	uniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif";
var clipping_planes_pars_vertex = "#if NUM_CLIPPING_PLANES > 0\n	varying vec3 vClipPosition;\n#endif";
var clipping_planes_vertex = "#if NUM_CLIPPING_PLANES > 0\n	vClipPosition = - mvPosition.xyz;\n#endif";
var color_fragment = "#if defined( USE_COLOR_ALPHA )\n	diffuseColor *= vColor;\n#elif defined( USE_COLOR )\n	diffuseColor.rgb *= vColor;\n#endif";
var color_pars_fragment = "#if defined( USE_COLOR_ALPHA )\n	varying vec4 vColor;\n#elif defined( USE_COLOR )\n	varying vec3 vColor;\n#endif";
var color_pars_vertex = "#if defined( USE_COLOR_ALPHA )\n	varying vec4 vColor;\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n	varying vec3 vColor;\n#endif";
var color_vertex = "#if defined( USE_COLOR_ALPHA )\n	vColor = vec4( 1.0 );\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n	vColor = vec3( 1.0 );\n#endif\n#ifdef USE_COLOR\n	vColor *= color;\n#endif\n#ifdef USE_INSTANCING_COLOR\n	vColor.xyz *= instanceColor.xyz;\n#endif";
var common = "#define PI 3.141592653589793\n#define PI2 6.283185307179586\n#define PI_HALF 1.5707963267948966\n#define RECIPROCAL_PI 0.3183098861837907\n#define RECIPROCAL_PI2 0.15915494309189535\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement( a ) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nvec3 pow2( const in vec3 x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }\nfloat average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }\nhighp float rand( const in vec2 uv ) {\n	const highp float a = 12.9898, b = 78.233, c = 43758.5453;\n	highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n	return fract( sin( sn ) * c );\n}\n#ifdef HIGH_PRECISION\n	float precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n	float precisionSafeLength( vec3 v ) {\n		float maxComponent = max3( abs( v ) );\n		return length( v / maxComponent ) * maxComponent;\n	}\n#endif\nstruct IncidentLight {\n	vec3 color;\n	vec3 direction;\n	bool visible;\n};\nstruct ReflectedLight {\n	vec3 directDiffuse;\n	vec3 directSpecular;\n	vec3 indirectDiffuse;\n	vec3 indirectSpecular;\n};\nstruct GeometricContext {\n	vec3 position;\n	vec3 normal;\n	vec3 viewDir;\n#ifdef USE_CLEARCOAT\n	vec3 clearcoatNormal;\n#endif\n};\n#ifdef USE_ALPHAHASH\n	varying vec3 vPosition;\n#endif\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n	return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nmat3 transposeMat3( const in mat3 m ) {\n	mat3 tmp;\n	tmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n	tmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n	tmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n	return tmp;\n}\nfloat luminance( const in vec3 rgb ) {\n	const vec3 weights = vec3( 0.2126729, 0.7151522, 0.0721750 );\n	return dot( weights, rgb );\n}\nbool isPerspectiveMatrix( mat4 m ) {\n	return m[ 2 ][ 3 ] == - 1.0;\n}\nvec2 equirectUv( in vec3 dir ) {\n	float u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\n	float v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n	return vec2( u, v );\n}\nvec3 BRDF_Lambert( const in vec3 diffuseColor ) {\n	return RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {\n	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n}\nfloat F_Schlick( const in float f0, const in float f90, const in float dotVH ) {\n	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n} // validated";
var cube_uv_reflection_fragment = "#ifdef ENVMAP_TYPE_CUBE_UV\n	#define cubeUV_minMipLevel 4.0\n	#define cubeUV_minTileSize 16.0\n	float getFace( vec3 direction ) {\n		vec3 absDirection = abs( direction );\n		float face = - 1.0;\n		if ( absDirection.x > absDirection.z ) {\n			if ( absDirection.x > absDirection.y )\n				face = direction.x > 0.0 ? 0.0 : 3.0;\n			else\n				face = direction.y > 0.0 ? 1.0 : 4.0;\n		} else {\n			if ( absDirection.z > absDirection.y )\n				face = direction.z > 0.0 ? 2.0 : 5.0;\n			else\n				face = direction.y > 0.0 ? 1.0 : 4.0;\n		}\n		return face;\n	}\n	vec2 getUV( vec3 direction, float face ) {\n		vec2 uv;\n		if ( face == 0.0 ) {\n			uv = vec2( direction.z, direction.y ) / abs( direction.x );\n		} else if ( face == 1.0 ) {\n			uv = vec2( - direction.x, - direction.z ) / abs( direction.y );\n		} else if ( face == 2.0 ) {\n			uv = vec2( - direction.x, direction.y ) / abs( direction.z );\n		} else if ( face == 3.0 ) {\n			uv = vec2( - direction.z, direction.y ) / abs( direction.x );\n		} else if ( face == 4.0 ) {\n			uv = vec2( - direction.x, direction.z ) / abs( direction.y );\n		} else {\n			uv = vec2( direction.x, direction.y ) / abs( direction.z );\n		}\n		return 0.5 * ( uv + 1.0 );\n	}\n	vec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\n		float face = getFace( direction );\n		float filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\n		mipInt = max( mipInt, cubeUV_minMipLevel );\n		float faceSize = exp2( mipInt );\n		highp vec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;\n		if ( face > 2.0 ) {\n			uv.y += faceSize;\n			face -= 3.0;\n		}\n		uv.x += face * faceSize;\n		uv.x += filterInt * 3.0 * cubeUV_minTileSize;\n		uv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );\n		uv.x *= CUBEUV_TEXEL_WIDTH;\n		uv.y *= CUBEUV_TEXEL_HEIGHT;\n		#ifdef texture2DGradEXT\n			return texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;\n		#else\n			return texture2D( envMap, uv ).rgb;\n		#endif\n	}\n	#define cubeUV_r0 1.0\n	#define cubeUV_v0 0.339\n	#define cubeUV_m0 - 2.0\n	#define cubeUV_r1 0.8\n	#define cubeUV_v1 0.276\n	#define cubeUV_m1 - 1.0\n	#define cubeUV_r4 0.4\n	#define cubeUV_v4 0.046\n	#define cubeUV_m4 2.0\n	#define cubeUV_r5 0.305\n	#define cubeUV_v5 0.016\n	#define cubeUV_m5 3.0\n	#define cubeUV_r6 0.21\n	#define cubeUV_v6 0.0038\n	#define cubeUV_m6 4.0\n	float roughnessToMip( float roughness ) {\n		float mip = 0.0;\n		if ( roughness >= cubeUV_r1 ) {\n			mip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;\n		} else if ( roughness >= cubeUV_r4 ) {\n			mip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;\n		} else if ( roughness >= cubeUV_r5 ) {\n			mip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;\n		} else if ( roughness >= cubeUV_r6 ) {\n			mip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;\n		} else {\n			mip = - 2.0 * log2( 1.16 * roughness );		}\n		return mip;\n	}\n	vec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\n		float mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );\n		float mipF = fract( mip );\n		float mipInt = floor( mip );\n		vec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\n		if ( mipF == 0.0 ) {\n			return vec4( color0, 1.0 );\n		} else {\n			vec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\n			return vec4( mix( color0, color1, mipF ), 1.0 );\n		}\n	}\n#endif";
var defaultnormal_vertex = "vec3 transformedNormal = objectNormal;\n#ifdef USE_INSTANCING\n	mat3 m = mat3( instanceMatrix );\n	transformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\n	transformedNormal = m * transformedNormal;\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n	transformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n	vec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n	#ifdef FLIP_SIDED\n		transformedTangent = - transformedTangent;\n	#endif\n#endif";
var displacementmap_pars_vertex = "#ifdef USE_DISPLACEMENTMAP\n	uniform sampler2D displacementMap;\n	uniform float displacementScale;\n	uniform float displacementBias;\n#endif";
var displacementmap_vertex = "#ifdef USE_DISPLACEMENTMAP\n	transformed += normalize( objectNormal ) * ( texture2D( displacementMap, vDisplacementMapUv ).x * displacementScale + displacementBias );\n#endif";
var emissivemap_fragment = "#ifdef USE_EMISSIVEMAP\n	vec4 emissiveColor = texture2D( emissiveMap, vEmissiveMapUv );\n	totalEmissiveRadiance *= emissiveColor.rgb;\n#endif";
var emissivemap_pars_fragment = "#ifdef USE_EMISSIVEMAP\n	uniform sampler2D emissiveMap;\n#endif";
var colorspace_fragment = "gl_FragColor = linearToOutputTexel( gl_FragColor );";
var colorspace_pars_fragment = "vec4 LinearToLinear( in vec4 value ) {\n	return value;\n}\nvec4 LinearTosRGB( in vec4 value ) {\n	return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}";
var envmap_fragment = "#ifdef USE_ENVMAP\n	#ifdef ENV_WORLDPOS\n		vec3 cameraToFrag;\n		if ( isOrthographic ) {\n			cameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n		} else {\n			cameraToFrag = normalize( vWorldPosition - cameraPosition );\n		}\n		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n		#ifdef ENVMAP_MODE_REFLECTION\n			vec3 reflectVec = reflect( cameraToFrag, worldNormal );\n		#else\n			vec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n		#endif\n	#else\n		vec3 reflectVec = vReflect;\n	#endif\n	#ifdef ENVMAP_TYPE_CUBE\n		vec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n	#else\n		vec4 envColor = vec4( 0.0 );\n	#endif\n	#ifdef ENVMAP_BLENDING_MULTIPLY\n		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n	#elif defined( ENVMAP_BLENDING_MIX )\n		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n	#elif defined( ENVMAP_BLENDING_ADD )\n		outgoingLight += envColor.xyz * specularStrength * reflectivity;\n	#endif\n#endif";
var envmap_common_pars_fragment = "#ifdef USE_ENVMAP\n	uniform float envMapIntensity;\n	uniform float flipEnvMap;\n	#ifdef ENVMAP_TYPE_CUBE\n		uniform samplerCube envMap;\n	#else\n		uniform sampler2D envMap;\n	#endif\n	\n#endif";
var envmap_pars_fragment = "#ifdef USE_ENVMAP\n	uniform float reflectivity;\n	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\n		#define ENV_WORLDPOS\n	#endif\n	#ifdef ENV_WORLDPOS\n		varying vec3 vWorldPosition;\n		uniform float refractionRatio;\n	#else\n		varying vec3 vReflect;\n	#endif\n#endif";
var envmap_pars_vertex = "#ifdef USE_ENVMAP\n	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\n		#define ENV_WORLDPOS\n	#endif\n	#ifdef ENV_WORLDPOS\n		\n		varying vec3 vWorldPosition;\n	#else\n		varying vec3 vReflect;\n		uniform float refractionRatio;\n	#endif\n#endif";
var envmap_vertex = "#ifdef USE_ENVMAP\n	#ifdef ENV_WORLDPOS\n		vWorldPosition = worldPosition.xyz;\n	#else\n		vec3 cameraToVertex;\n		if ( isOrthographic ) {\n			cameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n		} else {\n			cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n		}\n		vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n		#ifdef ENVMAP_MODE_REFLECTION\n			vReflect = reflect( cameraToVertex, worldNormal );\n		#else\n			vReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n		#endif\n	#endif\n#endif";
var fog_vertex = "#ifdef USE_FOG\n	vFogDepth = - mvPosition.z;\n#endif";
var fog_pars_vertex = "#ifdef USE_FOG\n	varying float vFogDepth;\n#endif";
var fog_fragment = "#ifdef USE_FOG\n	#ifdef FOG_EXP2\n		float fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );\n	#else\n		float fogFactor = smoothstep( fogNear, fogFar, vFogDepth );\n	#endif\n	gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif";
var fog_pars_fragment = "#ifdef USE_FOG\n	uniform vec3 fogColor;\n	varying float vFogDepth;\n	#ifdef FOG_EXP2\n		uniform float fogDensity;\n	#else\n		uniform float fogNear;\n		uniform float fogFar;\n	#endif\n#endif";
var gradientmap_pars_fragment = "#ifdef USE_GRADIENTMAP\n	uniform sampler2D gradientMap;\n#endif\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n	float dotNL = dot( normal, lightDirection );\n	vec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n	#ifdef USE_GRADIENTMAP\n		return vec3( texture2D( gradientMap, coord ).r );\n	#else\n		vec2 fw = fwidth( coord ) * 0.5;\n		return mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );\n	#endif\n}";
var lightmap_fragment = "#ifdef USE_LIGHTMAP\n	vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n	vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n	reflectedLight.indirectDiffuse += lightMapIrradiance;\n#endif";
var lightmap_pars_fragment = "#ifdef USE_LIGHTMAP\n	uniform sampler2D lightMap;\n	uniform float lightMapIntensity;\n#endif";
var lights_lambert_fragment = "LambertMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularStrength = specularStrength;";
var lights_lambert_pars_fragment = "varying vec3 vViewPosition;\nstruct LambertMaterial {\n	vec3 diffuseColor;\n	float specularStrength;\n};\nvoid RE_Direct_Lambert( const in IncidentLight directLight, const in GeometricContext geometry, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\n	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n	vec3 irradiance = dotNL * directLight.color;\n	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in GeometricContext geometry, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct				RE_Direct_Lambert\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_Lambert";
var lights_pars_begin = "uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\nuniform vec3 lightProbe[ 9 ];\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n	float x = normal.x, y = normal.y, z = normal.z;\n	vec3 result = shCoefficients[ 0 ] * 0.886227;\n	result += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n	result += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n	result += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n	result += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n	result += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n	result += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n	result += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n	result += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n	return result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {\n	vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n	vec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n	return irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n	vec3 irradiance = ambientLightColor;\n	return irradiance;\n}\nfloat getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n	#if defined ( LEGACY_LIGHTS )\n		if ( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n			return pow( saturate( - lightDistance / cutoffDistance + 1.0 ), decayExponent );\n		}\n		return 1.0;\n	#else\n		float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n		if ( cutoffDistance > 0.0 ) {\n			distanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n		}\n		return distanceFalloff;\n	#endif\n}\nfloat getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {\n	return smoothstep( coneCosine, penumbraCosine, angleCosine );\n}\n#if NUM_DIR_LIGHTS > 0\n	struct DirectionalLight {\n		vec3 direction;\n		vec3 color;\n	};\n	uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n	void getDirectionalLightInfo( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight light ) {\n		light.color = directionalLight.color;\n		light.direction = directionalLight.direction;\n		light.visible = true;\n	}\n#endif\n#if NUM_POINT_LIGHTS > 0\n	struct PointLight {\n		vec3 position;\n		vec3 color;\n		float distance;\n		float decay;\n	};\n	uniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n	void getPointLightInfo( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight light ) {\n		vec3 lVector = pointLight.position - geometry.position;\n		light.direction = normalize( lVector );\n		float lightDistance = length( lVector );\n		light.color = pointLight.color;\n		light.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );\n		light.visible = ( light.color != vec3( 0.0 ) );\n	}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n	struct SpotLight {\n		vec3 position;\n		vec3 direction;\n		vec3 color;\n		float distance;\n		float decay;\n		float coneCos;\n		float penumbraCos;\n	};\n	uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n	void getSpotLightInfo( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight light ) {\n		vec3 lVector = spotLight.position - geometry.position;\n		light.direction = normalize( lVector );\n		float angleCos = dot( light.direction, spotLight.direction );\n		float spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n		if ( spotAttenuation > 0.0 ) {\n			float lightDistance = length( lVector );\n			light.color = spotLight.color * spotAttenuation;\n			light.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );\n			light.visible = ( light.color != vec3( 0.0 ) );\n		} else {\n			light.color = vec3( 0.0 );\n			light.visible = false;\n		}\n	}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n	struct RectAreaLight {\n		vec3 color;\n		vec3 position;\n		vec3 halfWidth;\n		vec3 halfHeight;\n	};\n	uniform sampler2D ltc_1;	uniform sampler2D ltc_2;\n	uniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n	struct HemisphereLight {\n		vec3 direction;\n		vec3 skyColor;\n		vec3 groundColor;\n	};\n	uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n	vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {\n		float dotNL = dot( normal, hemiLight.direction );\n		float hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n		vec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n		return irradiance;\n	}\n#endif";
var envmap_physical_pars_fragment = "#ifdef USE_ENVMAP\n	vec3 getIBLIrradiance( const in vec3 normal ) {\n		#ifdef ENVMAP_TYPE_CUBE_UV\n			vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n			vec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\n			return PI * envMapColor.rgb * envMapIntensity;\n		#else\n			return vec3( 0.0 );\n		#endif\n	}\n	vec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {\n		#ifdef ENVMAP_TYPE_CUBE_UV\n			vec3 reflectVec = reflect( - viewDir, normal );\n			reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n			reflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n			vec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\n			return envMapColor.rgb * envMapIntensity;\n		#else\n			return vec3( 0.0 );\n		#endif\n	}\n	#ifdef USE_ANISOTROPY\n		vec3 getIBLAnisotropyRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in vec3 bitangent, const in float anisotropy ) {\n			#ifdef ENVMAP_TYPE_CUBE_UV\n				vec3 bentNormal = cross( bitangent, viewDir );\n				bentNormal = normalize( cross( bentNormal, bitangent ) );\n				bentNormal = normalize( mix( bentNormal, normal, pow2( pow2( 1.0 - anisotropy * ( 1.0 - roughness ) ) ) ) );\n				return getIBLRadiance( viewDir, bentNormal, roughness );\n			#else\n				return vec3( 0.0 );\n			#endif\n		}\n	#endif\n#endif";
var lights_toon_fragment = "ToonMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;";
var lights_toon_pars_fragment = "varying vec3 vViewPosition;\nstruct ToonMaterial {\n	vec3 diffuseColor;\n};\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n	vec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct				RE_Direct_Toon\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_Toon";
var lights_phong_fragment = "BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;";
var lights_phong_pars_fragment = "varying vec3 vViewPosition;\nstruct BlinnPhongMaterial {\n	vec3 diffuseColor;\n	vec3 specularColor;\n	float specularShininess;\n	float specularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n	vec3 irradiance = dotNL * directLight.color;\n	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n	reflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct				RE_Direct_BlinnPhong\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_BlinnPhong";
var lights_physical_fragment = "PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nvec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\nmaterial.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;\nmaterial.roughness = min( material.roughness, 1.0 );\n#ifdef IOR\n	material.ior = ior;\n	#ifdef USE_SPECULAR\n		float specularIntensityFactor = specularIntensity;\n		vec3 specularColorFactor = specularColor;\n		#ifdef USE_SPECULAR_COLORMAP\n			specularColorFactor *= texture2D( specularColorMap, vSpecularColorMapUv ).rgb;\n		#endif\n		#ifdef USE_SPECULAR_INTENSITYMAP\n			specularIntensityFactor *= texture2D( specularIntensityMap, vSpecularIntensityMapUv ).a;\n		#endif\n		material.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );\n	#else\n		float specularIntensityFactor = 1.0;\n		vec3 specularColorFactor = vec3( 1.0 );\n		material.specularF90 = 1.0;\n	#endif\n	material.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );\n#else\n	material.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\n	material.specularF90 = 1.0;\n#endif\n#ifdef USE_CLEARCOAT\n	material.clearcoat = clearcoat;\n	material.clearcoatRoughness = clearcoatRoughness;\n	material.clearcoatF0 = vec3( 0.04 );\n	material.clearcoatF90 = 1.0;\n	#ifdef USE_CLEARCOATMAP\n		material.clearcoat *= texture2D( clearcoatMap, vClearcoatMapUv ).x;\n	#endif\n	#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n		material.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vClearcoatRoughnessMapUv ).y;\n	#endif\n	material.clearcoat = saturate( material.clearcoat );	material.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\n	material.clearcoatRoughness += geometryRoughness;\n	material.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\n#endif\n#ifdef USE_IRIDESCENCE\n	material.iridescence = iridescence;\n	material.iridescenceIOR = iridescenceIOR;\n	#ifdef USE_IRIDESCENCEMAP\n		material.iridescence *= texture2D( iridescenceMap, vIridescenceMapUv ).r;\n	#endif\n	#ifdef USE_IRIDESCENCE_THICKNESSMAP\n		material.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vIridescenceThicknessMapUv ).g + iridescenceThicknessMinimum;\n	#else\n		material.iridescenceThickness = iridescenceThicknessMaximum;\n	#endif\n#endif\n#ifdef USE_SHEEN\n	material.sheenColor = sheenColor;\n	#ifdef USE_SHEEN_COLORMAP\n		material.sheenColor *= texture2D( sheenColorMap, vSheenColorMapUv ).rgb;\n	#endif\n	material.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );\n	#ifdef USE_SHEEN_ROUGHNESSMAP\n		material.sheenRoughness *= texture2D( sheenRoughnessMap, vSheenRoughnessMapUv ).a;\n	#endif\n#endif\n#ifdef USE_ANISOTROPY\n	#ifdef USE_ANISOTROPYMAP\n		mat2 anisotropyMat = mat2( anisotropyVector.x, anisotropyVector.y, - anisotropyVector.y, anisotropyVector.x );\n		vec3 anisotropyPolar = texture2D( anisotropyMap, vAnisotropyMapUv ).rgb;\n		vec2 anisotropyV = anisotropyMat * normalize( 2.0 * anisotropyPolar.rg - vec2( 1.0 ) ) * anisotropyPolar.b;\n	#else\n		vec2 anisotropyV = anisotropyVector;\n	#endif\n	material.anisotropy = length( anisotropyV );\n	anisotropyV /= material.anisotropy;\n	material.anisotropy = saturate( material.anisotropy );\n	material.alphaT = mix( pow2( material.roughness ), 1.0, pow2( material.anisotropy ) );\n	material.anisotropyT = tbn[ 0 ] * anisotropyV.x - tbn[ 1 ] * anisotropyV.y;\n	material.anisotropyB = tbn[ 1 ] * anisotropyV.x + tbn[ 0 ] * anisotropyV.y;\n#endif";
var lights_physical_pars_fragment = "struct PhysicalMaterial {\n	vec3 diffuseColor;\n	float roughness;\n	vec3 specularColor;\n	float specularF90;\n	#ifdef USE_CLEARCOAT\n		float clearcoat;\n		float clearcoatRoughness;\n		vec3 clearcoatF0;\n		float clearcoatF90;\n	#endif\n	#ifdef USE_IRIDESCENCE\n		float iridescence;\n		float iridescenceIOR;\n		float iridescenceThickness;\n		vec3 iridescenceFresnel;\n		vec3 iridescenceF0;\n	#endif\n	#ifdef USE_SHEEN\n		vec3 sheenColor;\n		float sheenRoughness;\n	#endif\n	#ifdef IOR\n		float ior;\n	#endif\n	#ifdef USE_TRANSMISSION\n		float transmission;\n		float transmissionAlpha;\n		float thickness;\n		float attenuationDistance;\n		vec3 attenuationColor;\n	#endif\n	#ifdef USE_ANISOTROPY\n		float anisotropy;\n		float alphaT;\n		vec3 anisotropyT;\n		vec3 anisotropyB;\n	#endif\n};\nvec3 clearcoatSpecular = vec3( 0.0 );\nvec3 sheenSpecular = vec3( 0.0 );\nvec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {\n    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );\n    float x2 = x * x;\n    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );\n    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );\n}\nfloat V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n	float a2 = pow2( alpha );\n	float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n	float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n	return 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n	float a2 = pow2( alpha );\n	float denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n	return RECIPROCAL_PI * a2 / pow2( denom );\n}\n#ifdef USE_ANISOTROPY\n	float V_GGX_SmithCorrelated_Anisotropic( const in float alphaT, const in float alphaB, const in float dotTV, const in float dotBV, const in float dotTL, const in float dotBL, const in float dotNV, const in float dotNL ) {\n		float gv = dotNL * length( vec3( alphaT * dotTV, alphaB * dotBV, dotNV ) );\n		float gl = dotNV * length( vec3( alphaT * dotTL, alphaB * dotBL, dotNL ) );\n		float v = 0.5 / ( gv + gl );\n		return saturate(v);\n	}\n	float D_GGX_Anisotropic( const in float alphaT, const in float alphaB, const in float dotNH, const in float dotTH, const in float dotBH ) {\n		float a2 = alphaT * alphaB;\n		highp vec3 v = vec3( alphaB * dotTH, alphaT * dotBH, a2 * dotNH );\n		highp float v2 = dot( v, v );\n		float w2 = a2 / v2;\n		return RECIPROCAL_PI * a2 * pow2 ( w2 );\n	}\n#endif\n#ifdef USE_CLEARCOAT\n	vec3 BRDF_GGX_Clearcoat( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material) {\n		vec3 f0 = material.clearcoatF0;\n		float f90 = material.clearcoatF90;\n		float roughness = material.clearcoatRoughness;\n		float alpha = pow2( roughness );\n		vec3 halfDir = normalize( lightDir + viewDir );\n		float dotNL = saturate( dot( normal, lightDir ) );\n		float dotNV = saturate( dot( normal, viewDir ) );\n		float dotNH = saturate( dot( normal, halfDir ) );\n		float dotVH = saturate( dot( viewDir, halfDir ) );\n		vec3 F = F_Schlick( f0, f90, dotVH );\n		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n		float D = D_GGX( alpha, dotNH );\n		return F * ( V * D );\n	}\n#endif\nvec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material ) {\n	vec3 f0 = material.specularColor;\n	float f90 = material.specularF90;\n	float roughness = material.roughness;\n	float alpha = pow2( roughness );\n	vec3 halfDir = normalize( lightDir + viewDir );\n	float dotNL = saturate( dot( normal, lightDir ) );\n	float dotNV = saturate( dot( normal, viewDir ) );\n	float dotNH = saturate( dot( normal, halfDir ) );\n	float dotVH = saturate( dot( viewDir, halfDir ) );\n	vec3 F = F_Schlick( f0, f90, dotVH );\n	#ifdef USE_IRIDESCENCE\n		F = mix( F, material.iridescenceFresnel, material.iridescence );\n	#endif\n	#ifdef USE_ANISOTROPY\n		float dotTL = dot( material.anisotropyT, lightDir );\n		float dotTV = dot( material.anisotropyT, viewDir );\n		float dotTH = dot( material.anisotropyT, halfDir );\n		float dotBL = dot( material.anisotropyB, lightDir );\n		float dotBV = dot( material.anisotropyB, viewDir );\n		float dotBH = dot( material.anisotropyB, halfDir );\n		float V = V_GGX_SmithCorrelated_Anisotropic( material.alphaT, alpha, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL );\n		float D = D_GGX_Anisotropic( material.alphaT, alpha, dotNH, dotTH, dotBH );\n	#else\n		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n		float D = D_GGX( alpha, dotNH );\n	#endif\n	return F * ( V * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n	const float LUT_SIZE = 64.0;\n	const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n	const float LUT_BIAS = 0.5 / LUT_SIZE;\n	float dotNV = saturate( dot( N, V ) );\n	vec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n	uv = uv * LUT_SCALE + LUT_BIAS;\n	return uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n	float l = length( f );\n	return max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n	float x = dot( v1, v2 );\n	float y = abs( x );\n	float a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n	float b = 3.4175940 + ( 4.1616724 + y ) * y;\n	float v = a / b;\n	float theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n	return cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n	vec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n	vec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n	vec3 lightNormal = cross( v1, v2 );\n	if( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n	vec3 T1, T2;\n	T1 = normalize( V - N * dot( V, N ) );\n	T2 = - cross( N, T1 );\n	mat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n	vec3 coords[ 4 ];\n	coords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n	coords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n	coords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n	coords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n	coords[ 0 ] = normalize( coords[ 0 ] );\n	coords[ 1 ] = normalize( coords[ 1 ] );\n	coords[ 2 ] = normalize( coords[ 2 ] );\n	coords[ 3 ] = normalize( coords[ 3 ] );\n	vec3 vectorFormFactor = vec3( 0.0 );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n	float result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n	return vec3( result );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie( float roughness, float dotNH ) {\n	float alpha = pow2( roughness );\n	float invAlpha = 1.0 / alpha;\n	float cos2h = dotNH * dotNH;\n	float sin2h = max( 1.0 - cos2h, 0.0078125 );\n	return ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );\n}\nfloat V_Neubelt( float dotNV, float dotNL ) {\n	return saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );\n}\nvec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {\n	vec3 halfDir = normalize( lightDir + viewDir );\n	float dotNL = saturate( dot( normal, lightDir ) );\n	float dotNV = saturate( dot( normal, viewDir ) );\n	float dotNH = saturate( dot( normal, halfDir ) );\n	float D = D_Charlie( sheenRoughness, dotNH );\n	float V = V_Neubelt( dotNV, dotNL );\n	return sheenColor * ( D * V );\n}\n#endif\nfloat IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n	float dotNV = saturate( dot( normal, viewDir ) );\n	float r2 = roughness * roughness;\n	float a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;\n	float b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;\n	float DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );\n	return saturate( DG * RECIPROCAL_PI );\n}\nvec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n	float dotNV = saturate( dot( normal, viewDir ) );\n	const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n	const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n	vec4 r = roughness * c0 + c1;\n	float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n	vec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;\n	return fab;\n}\nvec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {\n	vec2 fab = DFGApprox( normal, viewDir, roughness );\n	return specularColor * fab.x + specularF90 * fab.y;\n}\n#ifdef USE_IRIDESCENCE\nvoid computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#else\nvoid computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#endif\n	vec2 fab = DFGApprox( normal, viewDir, roughness );\n	#ifdef USE_IRIDESCENCE\n		vec3 Fr = mix( specularColor, iridescenceF0, iridescence );\n	#else\n		vec3 Fr = specularColor;\n	#endif\n	vec3 FssEss = Fr * fab.x + specularF90 * fab.y;\n	float Ess = fab.x + fab.y;\n	float Ems = 1.0 - Ess;\n	vec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;	vec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n	singleScatter += FssEss;\n	multiScatter += Fms * Ems;\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n	void RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n		vec3 normal = geometry.normal;\n		vec3 viewDir = geometry.viewDir;\n		vec3 position = geometry.position;\n		vec3 lightPos = rectAreaLight.position;\n		vec3 halfWidth = rectAreaLight.halfWidth;\n		vec3 halfHeight = rectAreaLight.halfHeight;\n		vec3 lightColor = rectAreaLight.color;\n		float roughness = material.roughness;\n		vec3 rectCoords[ 4 ];\n		rectCoords[ 0 ] = lightPos + halfWidth - halfHeight;		rectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n		rectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n		rectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n		vec2 uv = LTC_Uv( normal, viewDir, roughness );\n		vec4 t1 = texture2D( ltc_1, uv );\n		vec4 t2 = texture2D( ltc_2, uv );\n		mat3 mInv = mat3(\n			vec3( t1.x, 0, t1.y ),\n			vec3(    0, 1,    0 ),\n			vec3( t1.z, 0, t1.w )\n		);\n		vec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n		reflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n		reflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n	}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n	vec3 irradiance = dotNL * directLight.color;\n	#ifdef USE_CLEARCOAT\n		float dotNLcc = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\n		vec3 ccIrradiance = dotNLcc * directLight.color;\n		clearcoatSpecular += ccIrradiance * BRDF_GGX_Clearcoat( directLight.direction, geometry.viewDir, geometry.clearcoatNormal, material );\n	#endif\n	#ifdef USE_SHEEN\n		sheenSpecular += irradiance * BRDF_Sheen( directLight.direction, geometry.viewDir, geometry.normal, material.sheenColor, material.sheenRoughness );\n	#endif\n	reflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.normal, material );\n	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n	#ifdef USE_CLEARCOAT\n		clearcoatSpecular += clearcoatRadiance * EnvironmentBRDF( geometry.clearcoatNormal, geometry.viewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n	#endif\n	#ifdef USE_SHEEN\n		sheenSpecular += irradiance * material.sheenColor * IBLSheenBRDF( geometry.normal, geometry.viewDir, material.sheenRoughness );\n	#endif\n	vec3 singleScattering = vec3( 0.0 );\n	vec3 multiScattering = vec3( 0.0 );\n	vec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n	#ifdef USE_IRIDESCENCE\n		computeMultiscatteringIridescence( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );\n	#else\n		computeMultiscattering( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );\n	#endif\n	vec3 totalScattering = singleScattering + multiScattering;\n	vec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );\n	reflectedLight.indirectSpecular += radiance * singleScattering;\n	reflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n	reflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct				RE_Direct_Physical\n#define RE_Direct_RectArea		RE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular		RE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n	return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}";
var lights_fragment_begin = "\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\n#ifdef USE_CLEARCOAT\n	geometry.clearcoatNormal = clearcoatNormal;\n#endif\n#ifdef USE_IRIDESCENCE\n	float dotNVi = saturate( dot( normal, geometry.viewDir ) );\n	if ( material.iridescenceThickness == 0.0 ) {\n		material.iridescence = 0.0;\n	} else {\n		material.iridescence = saturate( material.iridescence );\n	}\n	if ( material.iridescence > 0.0 ) {\n		material.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );\n		material.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );\n	}\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n	PointLight pointLight;\n	#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n	PointLightShadow pointLightShadow;\n	#endif\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n		pointLight = pointLights[ i ];\n		getPointLightInfo( pointLight, geometry, directLight );\n		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n		pointLightShadow = pointLightShadows[ i ];\n		directLight.color *= ( directLight.visible && receiveShadow ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometry, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n	SpotLight spotLight;\n	vec4 spotColor;\n	vec3 spotLightCoord;\n	bool inSpotLightMap;\n	#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n	SpotLightShadow spotLightShadow;\n	#endif\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n		spotLight = spotLights[ i ];\n		getSpotLightInfo( spotLight, geometry, directLight );\n		#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\n		#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX\n		#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n		#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS\n		#else\n		#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\n		#endif\n		#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )\n			spotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;\n			inSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );\n			spotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );\n			directLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;\n		#endif\n		#undef SPOT_LIGHT_MAP_INDEX\n		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n		spotLightShadow = spotLightShadows[ i ];\n		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometry, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n	DirectionalLight directionalLight;\n	#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n	DirectionalLightShadow directionalLightShadow;\n	#endif\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n		directionalLight = directionalLights[ i ];\n		getDirectionalLightInfo( directionalLight, geometry, directLight );\n		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n		directionalLightShadow = directionalLightShadows[ i ];\n		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometry, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n	RectAreaLight rectAreaLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n		rectAreaLight = rectAreaLights[ i ];\n		RE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if defined( RE_IndirectDiffuse )\n	vec3 iblIrradiance = vec3( 0.0 );\n	vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n	irradiance += getLightProbeIrradiance( lightProbe, geometry.normal );\n	#if ( NUM_HEMI_LIGHTS > 0 )\n		#pragma unroll_loop_start\n		for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n			irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );\n		}\n		#pragma unroll_loop_end\n	#endif\n#endif\n#if defined( RE_IndirectSpecular )\n	vec3 radiance = vec3( 0.0 );\n	vec3 clearcoatRadiance = vec3( 0.0 );\n#endif";
var lights_fragment_maps = "#if defined( RE_IndirectDiffuse )\n	#ifdef USE_LIGHTMAP\n		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n		vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n		irradiance += lightMapIrradiance;\n	#endif\n	#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n		iblIrradiance += getIBLIrradiance( geometry.normal );\n	#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n	#ifdef USE_ANISOTROPY\n		radiance += getIBLAnisotropyRadiance( geometry.viewDir, geometry.normal, material.roughness, material.anisotropyB, material.anisotropy );\n	#else\n		radiance += getIBLRadiance( geometry.viewDir, geometry.normal, material.roughness );\n	#endif\n	#ifdef USE_CLEARCOAT\n		clearcoatRadiance += getIBLRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness );\n	#endif\n#endif";
var lights_fragment_end = "#if defined( RE_IndirectDiffuse )\n	RE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n	RE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\n#endif";
var logdepthbuf_fragment = "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n	gl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif";
var logdepthbuf_pars_fragment = "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n	uniform float logDepthBufFC;\n	varying float vFragDepth;\n	varying float vIsPerspective;\n#endif";
var logdepthbuf_pars_vertex = "#ifdef USE_LOGDEPTHBUF\n	#ifdef USE_LOGDEPTHBUF_EXT\n		varying float vFragDepth;\n		varying float vIsPerspective;\n	#else\n		uniform float logDepthBufFC;\n	#endif\n#endif";
var logdepthbuf_vertex = "#ifdef USE_LOGDEPTHBUF\n	#ifdef USE_LOGDEPTHBUF_EXT\n		vFragDepth = 1.0 + gl_Position.w;\n		vIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n	#else\n		if ( isPerspectiveMatrix( projectionMatrix ) ) {\n			gl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n			gl_Position.z *= gl_Position.w;\n		}\n	#endif\n#endif";
var map_fragment = "#ifdef USE_MAP\n	vec4 sampledDiffuseColor = texture2D( map, vMapUv );\n	#ifdef DECODE_VIDEO_TEXTURE\n		sampledDiffuseColor = vec4( mix( pow( sampledDiffuseColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), sampledDiffuseColor.rgb * 0.0773993808, vec3( lessThanEqual( sampledDiffuseColor.rgb, vec3( 0.04045 ) ) ) ), sampledDiffuseColor.w );\n	\n	#endif\n	diffuseColor *= sampledDiffuseColor;\n#endif";
var map_pars_fragment = "#ifdef USE_MAP\n	uniform sampler2D map;\n#endif";
var map_particle_fragment = "#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n	#if defined( USE_POINTS_UV )\n		vec2 uv = vUv;\n	#else\n		vec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n	#endif\n#endif\n#ifdef USE_MAP\n	diffuseColor *= texture2D( map, uv );\n#endif\n#ifdef USE_ALPHAMAP\n	diffuseColor.a *= texture2D( alphaMap, uv ).g;\n#endif";
var map_particle_pars_fragment = "#if defined( USE_POINTS_UV )\n	varying vec2 vUv;\n#else\n	#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n		uniform mat3 uvTransform;\n	#endif\n#endif\n#ifdef USE_MAP\n	uniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n	uniform sampler2D alphaMap;\n#endif";
var metalnessmap_fragment = "float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n	vec4 texelMetalness = texture2D( metalnessMap, vMetalnessMapUv );\n	metalnessFactor *= texelMetalness.b;\n#endif";
var metalnessmap_pars_fragment = "#ifdef USE_METALNESSMAP\n	uniform sampler2D metalnessMap;\n#endif";
var morphcolor_vertex = "#if defined( USE_MORPHCOLORS ) && defined( MORPHTARGETS_TEXTURE )\n	vColor *= morphTargetBaseInfluence;\n	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n		#if defined( USE_COLOR_ALPHA )\n			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];\n		#elif defined( USE_COLOR )\n			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];\n		#endif\n	}\n#endif";
var morphnormal_vertex = "#ifdef USE_MORPHNORMALS\n	objectNormal *= morphTargetBaseInfluence;\n	#ifdef MORPHTARGETS_TEXTURE\n		for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n			if ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];\n		}\n	#else\n		objectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\n		objectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\n		objectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\n		objectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\n	#endif\n#endif";
var morphtarget_pars_vertex = "#ifdef USE_MORPHTARGETS\n	uniform float morphTargetBaseInfluence;\n	#ifdef MORPHTARGETS_TEXTURE\n		uniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];\n		uniform sampler2DArray morphTargetsTexture;\n		uniform ivec2 morphTargetsTextureSize;\n		vec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {\n			int texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;\n			int y = texelIndex / morphTargetsTextureSize.x;\n			int x = texelIndex - y * morphTargetsTextureSize.x;\n			ivec3 morphUV = ivec3( x, y, morphTargetIndex );\n			return texelFetch( morphTargetsTexture, morphUV, 0 );\n		}\n	#else\n		#ifndef USE_MORPHNORMALS\n			uniform float morphTargetInfluences[ 8 ];\n		#else\n			uniform float morphTargetInfluences[ 4 ];\n		#endif\n	#endif\n#endif";
var morphtarget_vertex = "#ifdef USE_MORPHTARGETS\n	transformed *= morphTargetBaseInfluence;\n	#ifdef MORPHTARGETS_TEXTURE\n		for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n			if ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];\n		}\n	#else\n		transformed += morphTarget0 * morphTargetInfluences[ 0 ];\n		transformed += morphTarget1 * morphTargetInfluences[ 1 ];\n		transformed += morphTarget2 * morphTargetInfluences[ 2 ];\n		transformed += morphTarget3 * morphTargetInfluences[ 3 ];\n		#ifndef USE_MORPHNORMALS\n			transformed += morphTarget4 * morphTargetInfluences[ 4 ];\n			transformed += morphTarget5 * morphTargetInfluences[ 5 ];\n			transformed += morphTarget6 * morphTargetInfluences[ 6 ];\n			transformed += morphTarget7 * morphTargetInfluences[ 7 ];\n		#endif\n	#endif\n#endif";
var normal_fragment_begin = "float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\n#ifdef FLAT_SHADED\n	vec3 fdx = dFdx( vViewPosition );\n	vec3 fdy = dFdy( vViewPosition );\n	vec3 normal = normalize( cross( fdx, fdy ) );\n#else\n	vec3 normal = normalize( vNormal );\n	#ifdef DOUBLE_SIDED\n		normal *= faceDirection;\n	#endif\n#endif\n#if defined( USE_NORMALMAP_TANGENTSPACE ) || defined( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY )\n	#ifdef USE_TANGENT\n		mat3 tbn = mat3( normalize( vTangent ), normalize( vBitangent ), normal );\n	#else\n		mat3 tbn = getTangentFrame( - vViewPosition, normal,\n		#if defined( USE_NORMALMAP )\n			vNormalMapUv\n		#elif defined( USE_CLEARCOAT_NORMALMAP )\n			vClearcoatNormalMapUv\n		#else\n			vUv\n		#endif\n		);\n	#endif\n	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )\n		tbn[0] *= faceDirection;\n		tbn[1] *= faceDirection;\n	#endif\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n	#ifdef USE_TANGENT\n		mat3 tbn2 = mat3( normalize( vTangent ), normalize( vBitangent ), normal );\n	#else\n		mat3 tbn2 = getTangentFrame( - vViewPosition, normal, vClearcoatNormalMapUv );\n	#endif\n	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )\n		tbn2[0] *= faceDirection;\n		tbn2[1] *= faceDirection;\n	#endif\n#endif\nvec3 geometryNormal = normal;";
var normal_fragment_maps = "#ifdef USE_NORMALMAP_OBJECTSPACE\n	normal = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;\n	#ifdef FLIP_SIDED\n		normal = - normal;\n	#endif\n	#ifdef DOUBLE_SIDED\n		normal = normal * faceDirection;\n	#endif\n	normal = normalize( normalMatrix * normal );\n#elif defined( USE_NORMALMAP_TANGENTSPACE )\n	vec3 mapN = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;\n	mapN.xy *= normalScale;\n	normal = normalize( tbn * mapN );\n#elif defined( USE_BUMPMAP )\n	normal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );\n#endif";
var normal_pars_fragment = "#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n	#ifdef USE_TANGENT\n		varying vec3 vTangent;\n		varying vec3 vBitangent;\n	#endif\n#endif";
var normal_pars_vertex = "#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n	#ifdef USE_TANGENT\n		varying vec3 vTangent;\n		varying vec3 vBitangent;\n	#endif\n#endif";
var normal_vertex = "#ifndef FLAT_SHADED\n	vNormal = normalize( transformedNormal );\n	#ifdef USE_TANGENT\n		vTangent = normalize( transformedTangent );\n		vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n	#endif\n#endif";
var normalmap_pars_fragment = "#ifdef USE_NORMALMAP\n	uniform sampler2D normalMap;\n	uniform vec2 normalScale;\n#endif\n#ifdef USE_NORMALMAP_OBJECTSPACE\n	uniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( USE_NORMALMAP_TANGENTSPACE ) || defined ( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY ) )\n	mat3 getTangentFrame( vec3 eye_pos, vec3 surf_norm, vec2 uv ) {\n		vec3 q0 = dFdx( eye_pos.xyz );\n		vec3 q1 = dFdy( eye_pos.xyz );\n		vec2 st0 = dFdx( uv.st );\n		vec2 st1 = dFdy( uv.st );\n		vec3 N = surf_norm;\n		vec3 q1perp = cross( q1, N );\n		vec3 q0perp = cross( N, q0 );\n		vec3 T = q1perp * st0.x + q0perp * st1.x;\n		vec3 B = q1perp * st0.y + q0perp * st1.y;\n		float det = max( dot( T, T ), dot( B, B ) );\n		float scale = ( det == 0.0 ) ? 0.0 : inversesqrt( det );\n		return mat3( T * scale, B * scale, N );\n	}\n#endif";
var clearcoat_normal_fragment_begin = "#ifdef USE_CLEARCOAT\n	vec3 clearcoatNormal = geometryNormal;\n#endif";
var clearcoat_normal_fragment_maps = "#ifdef USE_CLEARCOAT_NORMALMAP\n	vec3 clearcoatMapN = texture2D( clearcoatNormalMap, vClearcoatNormalMapUv ).xyz * 2.0 - 1.0;\n	clearcoatMapN.xy *= clearcoatNormalScale;\n	clearcoatNormal = normalize( tbn2 * clearcoatMapN );\n#endif";
var clearcoat_pars_fragment = "#ifdef USE_CLEARCOATMAP\n	uniform sampler2D clearcoatMap;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n	uniform sampler2D clearcoatNormalMap;\n	uniform vec2 clearcoatNormalScale;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n	uniform sampler2D clearcoatRoughnessMap;\n#endif";
var iridescence_pars_fragment = "#ifdef USE_IRIDESCENCEMAP\n	uniform sampler2D iridescenceMap;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n	uniform sampler2D iridescenceThicknessMap;\n#endif";
var opaque_fragment = "#ifdef OPAQUE\ndiffuseColor.a = 1.0;\n#endif\n#ifdef USE_TRANSMISSION\ndiffuseColor.a *= material.transmissionAlpha;\n#endif\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );";
var packing = "vec3 packNormalToRGB( const in vec3 normal ) {\n	return normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n	return 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n	vec4 r = vec4( fract( v * PackFactors ), v );\n	r.yzw -= r.xyz * ShiftRight8;	return r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n	return dot( v, UnpackFactors );\n}\nvec2 packDepthToRG( in highp float v ) {\n	return packDepthToRGBA( v ).yx;\n}\nfloat unpackRGToDepth( const in highp vec2 v ) {\n	return unpackRGBAToDepth( vec4( v.xy, 0.0, 0.0 ) );\n}\nvec4 pack2HalfToRGBA( vec2 v ) {\n	vec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );\n	return vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );\n}\nvec2 unpackRGBATo2Half( vec4 v ) {\n	return vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n	return ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float depth, const in float near, const in float far ) {\n	return depth * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n	return ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float depth, const in float near, const in float far ) {\n	return ( near * far ) / ( ( far - near ) * depth - far );\n}";
var premultiplied_alpha_fragment = "#ifdef PREMULTIPLIED_ALPHA\n	gl_FragColor.rgb *= gl_FragColor.a;\n#endif";
var project_vertex = "vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_INSTANCING\n	mvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;";
var dithering_fragment = "#ifdef DITHERING\n	gl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif";
var dithering_pars_fragment = "#ifdef DITHERING\n	vec3 dithering( vec3 color ) {\n		float grid_position = rand( gl_FragCoord.xy );\n		vec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n		dither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n		return color + dither_shift_RGB;\n	}\n#endif";
var roughnessmap_fragment = "float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n	vec4 texelRoughness = texture2D( roughnessMap, vRoughnessMapUv );\n	roughnessFactor *= texelRoughness.g;\n#endif";
var roughnessmap_pars_fragment = "#ifdef USE_ROUGHNESSMAP\n	uniform sampler2D roughnessMap;\n#endif";
var shadowmap_pars_fragment = "#if NUM_SPOT_LIGHT_COORDS > 0\n	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\n#endif\n#if NUM_SPOT_LIGHT_MAPS > 0\n	uniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];\n#endif\n#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n		uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n		struct DirectionalLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_SPOT_LIGHT_SHADOWS > 0\n		uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n		struct SpotLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n		uniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n		struct PointLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n			float shadowCameraNear;\n			float shadowCameraFar;\n		};\n		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n	#endif\n	float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n		return step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n	}\n	vec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n		return unpackRGBATo2Half( texture2D( shadow, uv ) );\n	}\n	float VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n		float occlusion = 1.0;\n		vec2 distribution = texture2DDistribution( shadow, uv );\n		float hard_shadow = step( compare , distribution.x );\n		if (hard_shadow != 1.0 ) {\n			float distance = compare - distribution.x ;\n			float variance = max( 0.00000, distribution.y * distribution.y );\n			float softness_probability = variance / (variance + distance * distance );			softness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );			occlusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n		}\n		return occlusion;\n	}\n	float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n		float shadow = 1.0;\n		shadowCoord.xyz /= shadowCoord.w;\n		shadowCoord.z += shadowBias;\n		bool inFrustum = shadowCoord.x >= 0.0 && shadowCoord.x <= 1.0 && shadowCoord.y >= 0.0 && shadowCoord.y <= 1.0;\n		bool frustumTest = inFrustum && shadowCoord.z <= 1.0;\n		if ( frustumTest ) {\n		#if defined( SHADOWMAP_TYPE_PCF )\n			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n			float dx0 = - texelSize.x * shadowRadius;\n			float dy0 = - texelSize.y * shadowRadius;\n			float dx1 = + texelSize.x * shadowRadius;\n			float dy1 = + texelSize.y * shadowRadius;\n			float dx2 = dx0 / 2.0;\n			float dy2 = dy0 / 2.0;\n			float dx3 = dx1 / 2.0;\n			float dy3 = dy1 / 2.0;\n			shadow = (\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n			) * ( 1.0 / 17.0 );\n		#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n			float dx = texelSize.x;\n			float dy = texelSize.y;\n			vec2 uv = shadowCoord.xy;\n			vec2 f = fract( uv * shadowMapSize + 0.5 );\n			uv -= f * texelSize;\n			shadow = (\n				texture2DCompare( shadowMap, uv, shadowCoord.z ) +\n				texture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),\n					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\n					 f.x ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),\n					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\n					 f.x ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),\n					 texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\n					 f.y ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),\n					 texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\n					 f.y ) +\n				mix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),\n						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\n						  f.x ),\n					 mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),\n						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\n						  f.x ),\n					 f.y )\n			) * ( 1.0 / 9.0 );\n		#elif defined( SHADOWMAP_TYPE_VSM )\n			shadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n		#else\n			shadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n		#endif\n		}\n		return shadow;\n	}\n	vec2 cubeToUV( vec3 v, float texelSizeY ) {\n		vec3 absV = abs( v );\n		float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n		absV *= scaleToCube;\n		v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n		vec2 planar = v.xy;\n		float almostATexel = 1.5 * texelSizeY;\n		float almostOne = 1.0 - almostATexel;\n		if ( absV.z >= almostOne ) {\n			if ( v.z > 0.0 )\n				planar.x = 4.0 - v.x;\n		} else if ( absV.x >= almostOne ) {\n			float signX = sign( v.x );\n			planar.x = v.z * signX + 2.0 * signX;\n		} else if ( absV.y >= almostOne ) {\n			float signY = sign( v.y );\n			planar.x = v.x + 2.0 * signY + 2.0;\n			planar.y = v.z * signY - 2.0;\n		}\n		return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n	}\n	float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n		vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n		vec3 lightToPosition = shadowCoord.xyz;\n		float dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );		dp += shadowBias;\n		vec3 bd3D = normalize( lightToPosition );\n		#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n			vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n			return (\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n			) * ( 1.0 / 9.0 );\n		#else\n			return texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n		#endif\n	}\n#endif";
var shadowmap_pars_vertex = "#if NUM_SPOT_LIGHT_COORDS > 0\n	uniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];\n	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\n#endif\n#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n		uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n		struct DirectionalLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_SPOT_LIGHT_SHADOWS > 0\n		struct SpotLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n		uniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n		struct PointLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n			float shadowCameraNear;\n			float shadowCameraFar;\n		};\n		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n	#endif\n#endif";
var shadowmap_vertex = "#if ( defined( USE_SHADOWMAP ) && ( NUM_DIR_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0 ) ) || ( NUM_SPOT_LIGHT_COORDS > 0 )\n	vec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n	vec4 shadowWorldPosition;\n#endif\n#if defined( USE_SHADOWMAP )\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n		#pragma unroll_loop_start\n		for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\n			vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\n		}\n		#pragma unroll_loop_end\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n		#pragma unroll_loop_start\n		for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\n			vPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\n		}\n		#pragma unroll_loop_end\n	#endif\n#endif\n#if NUM_SPOT_LIGHT_COORDS > 0\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {\n		shadowWorldPosition = worldPosition;\n		#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n			shadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;\n		#endif\n		vSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;\n	}\n	#pragma unroll_loop_end\n#endif";
var shadowmask_pars_fragment = "float getShadowMask() {\n	float shadow = 1.0;\n	#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n	DirectionalLightShadow directionalLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n		directionalLight = directionalLightShadows[ i ];\n		shadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n	}\n	#pragma unroll_loop_end\n	#endif\n	#if NUM_SPOT_LIGHT_SHADOWS > 0\n	SpotLightShadow spotLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n		spotLight = spotLightShadows[ i ];\n		shadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\n	}\n	#pragma unroll_loop_end\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n	PointLightShadow pointLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n		pointLight = pointLightShadows[ i ];\n		shadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n	}\n	#pragma unroll_loop_end\n	#endif\n	#endif\n	return shadow;\n}";
var skinbase_vertex = "#ifdef USE_SKINNING\n	mat4 boneMatX = getBoneMatrix( skinIndex.x );\n	mat4 boneMatY = getBoneMatrix( skinIndex.y );\n	mat4 boneMatZ = getBoneMatrix( skinIndex.z );\n	mat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif";
var skinning_pars_vertex = "#ifdef USE_SKINNING\n	uniform mat4 bindMatrix;\n	uniform mat4 bindMatrixInverse;\n	uniform highp sampler2D boneTexture;\n	uniform int boneTextureSize;\n	mat4 getBoneMatrix( const in float i ) {\n		float j = i * 4.0;\n		float x = mod( j, float( boneTextureSize ) );\n		float y = floor( j / float( boneTextureSize ) );\n		float dx = 1.0 / float( boneTextureSize );\n		float dy = 1.0 / float( boneTextureSize );\n		y = dy * ( y + 0.5 );\n		vec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n		vec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n		vec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n		vec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n		mat4 bone = mat4( v1, v2, v3, v4 );\n		return bone;\n	}\n#endif";
var skinning_vertex = "#ifdef USE_SKINNING\n	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n	vec4 skinned = vec4( 0.0 );\n	skinned += boneMatX * skinVertex * skinWeight.x;\n	skinned += boneMatY * skinVertex * skinWeight.y;\n	skinned += boneMatZ * skinVertex * skinWeight.z;\n	skinned += boneMatW * skinVertex * skinWeight.w;\n	transformed = ( bindMatrixInverse * skinned ).xyz;\n#endif";
var skinnormal_vertex = "#ifdef USE_SKINNING\n	mat4 skinMatrix = mat4( 0.0 );\n	skinMatrix += skinWeight.x * boneMatX;\n	skinMatrix += skinWeight.y * boneMatY;\n	skinMatrix += skinWeight.z * boneMatZ;\n	skinMatrix += skinWeight.w * boneMatW;\n	skinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\n	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n	#ifdef USE_TANGENT\n		objectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n	#endif\n#endif";
var specularmap_fragment = "float specularStrength;\n#ifdef USE_SPECULARMAP\n	vec4 texelSpecular = texture2D( specularMap, vSpecularMapUv );\n	specularStrength = texelSpecular.r;\n#else\n	specularStrength = 1.0;\n#endif";
var specularmap_pars_fragment = "#ifdef USE_SPECULARMAP\n	uniform sampler2D specularMap;\n#endif";
var tonemapping_fragment = "#if defined( TONE_MAPPING )\n	gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif";
var tonemapping_pars_fragment = "#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nvec3 LinearToneMapping( vec3 color ) {\n	return saturate( toneMappingExposure * color );\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n	color *= toneMappingExposure;\n	return saturate( color / ( vec3( 1.0 ) + color ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n	color *= toneMappingExposure;\n	color = max( vec3( 0.0 ), color - 0.004 );\n	return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 RRTAndODTFit( vec3 v ) {\n	vec3 a = v * ( v + 0.0245786 ) - 0.000090537;\n	vec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\n	return a / b;\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n	const mat3 ACESInputMat = mat3(\n		vec3( 0.59719, 0.07600, 0.02840 ),		vec3( 0.35458, 0.90834, 0.13383 ),\n		vec3( 0.04823, 0.01566, 0.83777 )\n	);\n	const mat3 ACESOutputMat = mat3(\n		vec3(  1.60475, -0.10208, -0.00327 ),		vec3( -0.53108,  1.10813, -0.07276 ),\n		vec3( -0.07367, -0.00605,  1.07602 )\n	);\n	color *= toneMappingExposure / 0.6;\n	color = ACESInputMat * color;\n	color = RRTAndODTFit( color );\n	color = ACESOutputMat * color;\n	return saturate( color );\n}\nvec3 CustomToneMapping( vec3 color ) { return color; }";
var transmission_fragment = "#ifdef USE_TRANSMISSION\n	material.transmission = transmission;\n	material.transmissionAlpha = 1.0;\n	material.thickness = thickness;\n	material.attenuationDistance = attenuationDistance;\n	material.attenuationColor = attenuationColor;\n	#ifdef USE_TRANSMISSIONMAP\n		material.transmission *= texture2D( transmissionMap, vTransmissionMapUv ).r;\n	#endif\n	#ifdef USE_THICKNESSMAP\n		material.thickness *= texture2D( thicknessMap, vThicknessMapUv ).g;\n	#endif\n	vec3 pos = vWorldPosition;\n	vec3 v = normalize( cameraPosition - pos );\n	vec3 n = inverseTransformDirection( normal, viewMatrix );\n	vec4 transmitted = getIBLVolumeRefraction(\n		n, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,\n		pos, modelMatrix, viewMatrix, projectionMatrix, material.ior, material.thickness,\n		material.attenuationColor, material.attenuationDistance );\n	material.transmissionAlpha = mix( material.transmissionAlpha, transmitted.a, material.transmission );\n	totalDiffuse = mix( totalDiffuse, transmitted.rgb, material.transmission );\n#endif";
var transmission_pars_fragment = "#ifdef USE_TRANSMISSION\n	uniform float transmission;\n	uniform float thickness;\n	uniform float attenuationDistance;\n	uniform vec3 attenuationColor;\n	#ifdef USE_TRANSMISSIONMAP\n		uniform sampler2D transmissionMap;\n	#endif\n	#ifdef USE_THICKNESSMAP\n		uniform sampler2D thicknessMap;\n	#endif\n	uniform vec2 transmissionSamplerSize;\n	uniform sampler2D transmissionSamplerMap;\n	uniform mat4 modelMatrix;\n	uniform mat4 projectionMatrix;\n	varying vec3 vWorldPosition;\n	float w0( float a ) {\n		return ( 1.0 / 6.0 ) * ( a * ( a * ( - a + 3.0 ) - 3.0 ) + 1.0 );\n	}\n	float w1( float a ) {\n		return ( 1.0 / 6.0 ) * ( a *  a * ( 3.0 * a - 6.0 ) + 4.0 );\n	}\n	float w2( float a ){\n		return ( 1.0 / 6.0 ) * ( a * ( a * ( - 3.0 * a + 3.0 ) + 3.0 ) + 1.0 );\n	}\n	float w3( float a ) {\n		return ( 1.0 / 6.0 ) * ( a * a * a );\n	}\n	float g0( float a ) {\n		return w0( a ) + w1( a );\n	}\n	float g1( float a ) {\n		return w2( a ) + w3( a );\n	}\n	float h0( float a ) {\n		return - 1.0 + w1( a ) / ( w0( a ) + w1( a ) );\n	}\n	float h1( float a ) {\n		return 1.0 + w3( a ) / ( w2( a ) + w3( a ) );\n	}\n	vec4 bicubic( sampler2D tex, vec2 uv, vec4 texelSize, float lod ) {\n		uv = uv * texelSize.zw + 0.5;\n		vec2 iuv = floor( uv );\n		vec2 fuv = fract( uv );\n		float g0x = g0( fuv.x );\n		float g1x = g1( fuv.x );\n		float h0x = h0( fuv.x );\n		float h1x = h1( fuv.x );\n		float h0y = h0( fuv.y );\n		float h1y = h1( fuv.y );\n		vec2 p0 = ( vec2( iuv.x + h0x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;\n		vec2 p1 = ( vec2( iuv.x + h1x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;\n		vec2 p2 = ( vec2( iuv.x + h0x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;\n		vec2 p3 = ( vec2( iuv.x + h1x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;\n		return g0( fuv.y ) * ( g0x * textureLod( tex, p0, lod ) + g1x * textureLod( tex, p1, lod ) ) +\n			g1( fuv.y ) * ( g0x * textureLod( tex, p2, lod ) + g1x * textureLod( tex, p3, lod ) );\n	}\n	vec4 textureBicubic( sampler2D sampler, vec2 uv, float lod ) {\n		vec2 fLodSize = vec2( textureSize( sampler, int( lod ) ) );\n		vec2 cLodSize = vec2( textureSize( sampler, int( lod + 1.0 ) ) );\n		vec2 fLodSizeInv = 1.0 / fLodSize;\n		vec2 cLodSizeInv = 1.0 / cLodSize;\n		vec4 fSample = bicubic( sampler, uv, vec4( fLodSizeInv, fLodSize ), floor( lod ) );\n		vec4 cSample = bicubic( sampler, uv, vec4( cLodSizeInv, cLodSize ), ceil( lod ) );\n		return mix( fSample, cSample, fract( lod ) );\n	}\n	vec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {\n		vec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );\n		vec3 modelScale;\n		modelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );\n		modelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );\n		modelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );\n		return normalize( refractionVector ) * thickness * modelScale;\n	}\n	float applyIorToRoughness( const in float roughness, const in float ior ) {\n		return roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );\n	}\n	vec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {\n		float lod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );\n		return textureBicubic( transmissionSamplerMap, fragCoord.xy, lod );\n	}\n	vec3 volumeAttenuation( const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {\n		if ( isinf( attenuationDistance ) ) {\n			return vec3( 1.0 );\n		} else {\n			vec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;\n			vec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );			return transmittance;\n		}\n	}\n	vec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,\n		const in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,\n		const in mat4 viewMatrix, const in mat4 projMatrix, const in float ior, const in float thickness,\n		const in vec3 attenuationColor, const in float attenuationDistance ) {\n		vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\n		vec3 refractedRayExit = position + transmissionRay;\n		vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\n		vec2 refractionCoords = ndcPos.xy / ndcPos.w;\n		refractionCoords += 1.0;\n		refractionCoords /= 2.0;\n		vec4 transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );\n		vec3 transmittance = diffuseColor * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance );\n		vec3 attenuatedColor = transmittance * transmittedLight.rgb;\n		vec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );\n		float transmittanceFactor = ( transmittance.r + transmittance.g + transmittance.b ) / 3.0;\n		return vec4( ( 1.0 - F ) * attenuatedColor, 1.0 - ( 1.0 - transmittedLight.a ) * transmittanceFactor );\n	}\n#endif";
var uv_pars_fragment = "#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n	varying vec2 vUv;\n#endif\n#ifdef USE_MAP\n	varying vec2 vMapUv;\n#endif\n#ifdef USE_ALPHAMAP\n	varying vec2 vAlphaMapUv;\n#endif\n#ifdef USE_LIGHTMAP\n	varying vec2 vLightMapUv;\n#endif\n#ifdef USE_AOMAP\n	varying vec2 vAoMapUv;\n#endif\n#ifdef USE_BUMPMAP\n	varying vec2 vBumpMapUv;\n#endif\n#ifdef USE_NORMALMAP\n	varying vec2 vNormalMapUv;\n#endif\n#ifdef USE_EMISSIVEMAP\n	varying vec2 vEmissiveMapUv;\n#endif\n#ifdef USE_METALNESSMAP\n	varying vec2 vMetalnessMapUv;\n#endif\n#ifdef USE_ROUGHNESSMAP\n	varying vec2 vRoughnessMapUv;\n#endif\n#ifdef USE_ANISOTROPYMAP\n	varying vec2 vAnisotropyMapUv;\n#endif\n#ifdef USE_CLEARCOATMAP\n	varying vec2 vClearcoatMapUv;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n	varying vec2 vClearcoatNormalMapUv;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n	varying vec2 vClearcoatRoughnessMapUv;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n	varying vec2 vIridescenceMapUv;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n	varying vec2 vIridescenceThicknessMapUv;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n	varying vec2 vSheenColorMapUv;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n	varying vec2 vSheenRoughnessMapUv;\n#endif\n#ifdef USE_SPECULARMAP\n	varying vec2 vSpecularMapUv;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n	varying vec2 vSpecularColorMapUv;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n	varying vec2 vSpecularIntensityMapUv;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n	uniform mat3 transmissionMapTransform;\n	varying vec2 vTransmissionMapUv;\n#endif\n#ifdef USE_THICKNESSMAP\n	uniform mat3 thicknessMapTransform;\n	varying vec2 vThicknessMapUv;\n#endif";
var uv_pars_vertex = "#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n	varying vec2 vUv;\n#endif\n#ifdef USE_MAP\n	uniform mat3 mapTransform;\n	varying vec2 vMapUv;\n#endif\n#ifdef USE_ALPHAMAP\n	uniform mat3 alphaMapTransform;\n	varying vec2 vAlphaMapUv;\n#endif\n#ifdef USE_LIGHTMAP\n	uniform mat3 lightMapTransform;\n	varying vec2 vLightMapUv;\n#endif\n#ifdef USE_AOMAP\n	uniform mat3 aoMapTransform;\n	varying vec2 vAoMapUv;\n#endif\n#ifdef USE_BUMPMAP\n	uniform mat3 bumpMapTransform;\n	varying vec2 vBumpMapUv;\n#endif\n#ifdef USE_NORMALMAP\n	uniform mat3 normalMapTransform;\n	varying vec2 vNormalMapUv;\n#endif\n#ifdef USE_DISPLACEMENTMAP\n	uniform mat3 displacementMapTransform;\n	varying vec2 vDisplacementMapUv;\n#endif\n#ifdef USE_EMISSIVEMAP\n	uniform mat3 emissiveMapTransform;\n	varying vec2 vEmissiveMapUv;\n#endif\n#ifdef USE_METALNESSMAP\n	uniform mat3 metalnessMapTransform;\n	varying vec2 vMetalnessMapUv;\n#endif\n#ifdef USE_ROUGHNESSMAP\n	uniform mat3 roughnessMapTransform;\n	varying vec2 vRoughnessMapUv;\n#endif\n#ifdef USE_ANISOTROPYMAP\n	uniform mat3 anisotropyMapTransform;\n	varying vec2 vAnisotropyMapUv;\n#endif\n#ifdef USE_CLEARCOATMAP\n	uniform mat3 clearcoatMapTransform;\n	varying vec2 vClearcoatMapUv;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n	uniform mat3 clearcoatNormalMapTransform;\n	varying vec2 vClearcoatNormalMapUv;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n	uniform mat3 clearcoatRoughnessMapTransform;\n	varying vec2 vClearcoatRoughnessMapUv;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n	uniform mat3 sheenColorMapTransform;\n	varying vec2 vSheenColorMapUv;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n	uniform mat3 sheenRoughnessMapTransform;\n	varying vec2 vSheenRoughnessMapUv;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n	uniform mat3 iridescenceMapTransform;\n	varying vec2 vIridescenceMapUv;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n	uniform mat3 iridescenceThicknessMapTransform;\n	varying vec2 vIridescenceThicknessMapUv;\n#endif\n#ifdef USE_SPECULARMAP\n	uniform mat3 specularMapTransform;\n	varying vec2 vSpecularMapUv;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n	uniform mat3 specularColorMapTransform;\n	varying vec2 vSpecularColorMapUv;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n	uniform mat3 specularIntensityMapTransform;\n	varying vec2 vSpecularIntensityMapUv;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n	uniform mat3 transmissionMapTransform;\n	varying vec2 vTransmissionMapUv;\n#endif\n#ifdef USE_THICKNESSMAP\n	uniform mat3 thicknessMapTransform;\n	varying vec2 vThicknessMapUv;\n#endif";
var uv_vertex = "#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n	vUv = vec3( uv, 1 ).xy;\n#endif\n#ifdef USE_MAP\n	vMapUv = ( mapTransform * vec3( MAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ALPHAMAP\n	vAlphaMapUv = ( alphaMapTransform * vec3( ALPHAMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_LIGHTMAP\n	vLightMapUv = ( lightMapTransform * vec3( LIGHTMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_AOMAP\n	vAoMapUv = ( aoMapTransform * vec3( AOMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_BUMPMAP\n	vBumpMapUv = ( bumpMapTransform * vec3( BUMPMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_NORMALMAP\n	vNormalMapUv = ( normalMapTransform * vec3( NORMALMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_DISPLACEMENTMAP\n	vDisplacementMapUv = ( displacementMapTransform * vec3( DISPLACEMENTMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_EMISSIVEMAP\n	vEmissiveMapUv = ( emissiveMapTransform * vec3( EMISSIVEMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_METALNESSMAP\n	vMetalnessMapUv = ( metalnessMapTransform * vec3( METALNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ROUGHNESSMAP\n	vRoughnessMapUv = ( roughnessMapTransform * vec3( ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ANISOTROPYMAP\n	vAnisotropyMapUv = ( anisotropyMapTransform * vec3( ANISOTROPYMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOATMAP\n	vClearcoatMapUv = ( clearcoatMapTransform * vec3( CLEARCOATMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n	vClearcoatNormalMapUv = ( clearcoatNormalMapTransform * vec3( CLEARCOAT_NORMALMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n	vClearcoatRoughnessMapUv = ( clearcoatRoughnessMapTransform * vec3( CLEARCOAT_ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n	vIridescenceMapUv = ( iridescenceMapTransform * vec3( IRIDESCENCEMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n	vIridescenceThicknessMapUv = ( iridescenceThicknessMapTransform * vec3( IRIDESCENCE_THICKNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n	vSheenColorMapUv = ( sheenColorMapTransform * vec3( SHEEN_COLORMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n	vSheenRoughnessMapUv = ( sheenRoughnessMapTransform * vec3( SHEEN_ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULARMAP\n	vSpecularMapUv = ( specularMapTransform * vec3( SPECULARMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n	vSpecularColorMapUv = ( specularColorMapTransform * vec3( SPECULAR_COLORMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n	vSpecularIntensityMapUv = ( specularIntensityMapTransform * vec3( SPECULAR_INTENSITYMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n	vTransmissionMapUv = ( transmissionMapTransform * vec3( TRANSMISSIONMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_THICKNESSMAP\n	vThicknessMapUv = ( thicknessMapTransform * vec3( THICKNESSMAP_UV, 1 ) ).xy;\n#endif";
var worldpos_vertex = "#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0\n	vec4 worldPosition = vec4( transformed, 1.0 );\n	#ifdef USE_INSTANCING\n		worldPosition = instanceMatrix * worldPosition;\n	#endif\n	worldPosition = modelMatrix * worldPosition;\n#endif";
const vertex$h = "varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n	gl_Position = vec4( position.xy, 1.0, 1.0 );\n}";
const fragment$h = "uniform sampler2D t2D;\nuniform float backgroundIntensity;\nvarying vec2 vUv;\nvoid main() {\n	vec4 texColor = texture2D( t2D, vUv );\n	#ifdef DECODE_VIDEO_TEXTURE\n		texColor = vec4( mix( pow( texColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), texColor.rgb * 0.0773993808, vec3( lessThanEqual( texColor.rgb, vec3( 0.04045 ) ) ) ), texColor.w );\n	#endif\n	texColor.rgb *= backgroundIntensity;\n	gl_FragColor = texColor;\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n}";
const vertex$g = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n	vWorldDirection = transformDirection( position, modelMatrix );\n	#include <begin_vertex>\n	#include <project_vertex>\n	gl_Position.z = gl_Position.w;\n}";
const fragment$g = "#ifdef ENVMAP_TYPE_CUBE\n	uniform samplerCube envMap;\n#elif defined( ENVMAP_TYPE_CUBE_UV )\n	uniform sampler2D envMap;\n#endif\nuniform float flipEnvMap;\nuniform float backgroundBlurriness;\nuniform float backgroundIntensity;\nvarying vec3 vWorldDirection;\n#include <cube_uv_reflection_fragment>\nvoid main() {\n	#ifdef ENVMAP_TYPE_CUBE\n		vec4 texColor = textureCube( envMap, vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );\n	#elif defined( ENVMAP_TYPE_CUBE_UV )\n		vec4 texColor = textureCubeUV( envMap, vWorldDirection, backgroundBlurriness );\n	#else\n		vec4 texColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n	#endif\n	texColor.rgb *= backgroundIntensity;\n	gl_FragColor = texColor;\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n}";
const vertex$f = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n	vWorldDirection = transformDirection( position, modelMatrix );\n	#include <begin_vertex>\n	#include <project_vertex>\n	gl_Position.z = gl_Position.w;\n}";
const fragment$f = "uniform samplerCube tCube;\nuniform float tFlip;\nuniform float opacity;\nvarying vec3 vWorldDirection;\nvoid main() {\n	vec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );\n	gl_FragColor = texColor;\n	gl_FragColor.a *= opacity;\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n}";
const vertex$e = "#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n	#include <uv_vertex>\n	#include <skinbase_vertex>\n	#ifdef USE_DISPLACEMENTMAP\n		#include <beginnormal_vertex>\n		#include <morphnormal_vertex>\n		#include <skinnormal_vertex>\n	#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vHighPrecisionZW = gl_Position.zw;\n}";
const fragment$e = "#if DEPTH_PACKING == 3200\n	uniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( 1.0 );\n	#if DEPTH_PACKING == 3200\n		diffuseColor.a = opacity;\n	#endif\n	#include <map_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <logdepthbuf_fragment>\n	float fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n	#if DEPTH_PACKING == 3200\n		gl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\n	#elif DEPTH_PACKING == 3201\n		gl_FragColor = packDepthToRGBA( fragCoordZ );\n	#endif\n}";
const vertex$d = "#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <skinbase_vertex>\n	#ifdef USE_DISPLACEMENTMAP\n		#include <beginnormal_vertex>\n		#include <morphnormal_vertex>\n		#include <skinnormal_vertex>\n	#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <worldpos_vertex>\n	#include <clipping_planes_vertex>\n	vWorldPosition = worldPosition.xyz;\n}";
const fragment$d = "#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( 1.0 );\n	#include <map_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	float dist = length( vWorldPosition - referencePosition );\n	dist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n	dist = saturate( dist );\n	gl_FragColor = packDepthToRGBA( dist );\n}";
const vertex$c = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n	vWorldDirection = transformDirection( position, modelMatrix );\n	#include <begin_vertex>\n	#include <project_vertex>\n}";
const fragment$c = "uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n	vec3 direction = normalize( vWorldDirection );\n	vec2 sampleUV = equirectUv( direction );\n	gl_FragColor = texture2D( tEquirect, sampleUV );\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n}";
const vertex$b = "uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	vLineDistance = scale * lineDistance;\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphcolor_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <fog_vertex>\n}";
const fragment$b = "uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	if ( mod( vLineDistance, totalSize ) > dashSize ) {\n		discard;\n	}\n	vec3 outgoingLight = vec3( 0.0 );\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	outgoingLight = diffuseColor.rgb;\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n}";
const vertex$a = "#include <common>\n#include <uv_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphcolor_vertex>\n	#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )\n		#include <beginnormal_vertex>\n		#include <morphnormal_vertex>\n		#include <skinbase_vertex>\n		#include <skinnormal_vertex>\n		#include <defaultnormal_vertex>\n	#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <worldpos_vertex>\n	#include <envmap_vertex>\n	#include <fog_vertex>\n}";
const fragment$a = "uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <specularmap_fragment>\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	#ifdef USE_LIGHTMAP\n		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n		reflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;\n	#else\n		reflectedLight.indirectDiffuse += vec3( 1.0 );\n	#endif\n	#include <aomap_fragment>\n	reflectedLight.indirectDiffuse *= diffuseColor.rgb;\n	vec3 outgoingLight = reflectedLight.indirectDiffuse;\n	#include <envmap_fragment>\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
const vertex$9 = "#define LAMBERT\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphcolor_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <envmap_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}";
const fragment$9 = "#define LAMBERT\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_lambert_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <specularmap_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <lights_lambert_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n	#include <envmap_fragment>\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
const vertex$8 = "#define MATCAP\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphcolor_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <fog_vertex>\n	vViewPosition = - mvPosition.xyz;\n}";
const fragment$8 = "#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	vec3 viewDir = normalize( vViewPosition );\n	vec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n	vec3 y = cross( viewDir, x );\n	vec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n	#ifdef USE_MATCAP\n		vec4 matcapColor = texture2D( matcap, uv );\n	#else\n		vec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );\n	#endif\n	vec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
const vertex$7 = "#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n	varying vec3 vViewPosition;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n	vViewPosition = - mvPosition.xyz;\n#endif\n}";
const fragment$7 = "#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n	varying vec3 vViewPosition;\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	#include <logdepthbuf_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	gl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n	#ifdef OPAQUE\n		gl_FragColor.a = 1.0;\n	#endif\n}";
const vertex$6 = "#define PHONG\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphcolor_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <envmap_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}";
const fragment$6 = "#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <specularmap_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <lights_phong_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n	#include <envmap_fragment>\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
const vertex$5 = "#define STANDARD\nvarying vec3 vViewPosition;\n#ifdef USE_TRANSMISSION\n	varying vec3 vWorldPosition;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphcolor_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n#ifdef USE_TRANSMISSION\n	vWorldPosition = worldPosition.xyz;\n#endif\n}";
const fragment$5 = "#define STANDARD\n#ifdef PHYSICAL\n	#define IOR\n	#define USE_SPECULAR\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef IOR\n	uniform float ior;\n#endif\n#ifdef USE_SPECULAR\n	uniform float specularIntensity;\n	uniform vec3 specularColor;\n	#ifdef USE_SPECULAR_COLORMAP\n		uniform sampler2D specularColorMap;\n	#endif\n	#ifdef USE_SPECULAR_INTENSITYMAP\n		uniform sampler2D specularIntensityMap;\n	#endif\n#endif\n#ifdef USE_CLEARCOAT\n	uniform float clearcoat;\n	uniform float clearcoatRoughness;\n#endif\n#ifdef USE_IRIDESCENCE\n	uniform float iridescence;\n	uniform float iridescenceIOR;\n	uniform float iridescenceThicknessMinimum;\n	uniform float iridescenceThicknessMaximum;\n#endif\n#ifdef USE_SHEEN\n	uniform vec3 sheenColor;\n	uniform float sheenRoughness;\n	#ifdef USE_SHEEN_COLORMAP\n		uniform sampler2D sheenColorMap;\n	#endif\n	#ifdef USE_SHEEN_ROUGHNESSMAP\n		uniform sampler2D sheenRoughnessMap;\n	#endif\n#endif\n#ifdef USE_ANISOTROPY\n	uniform vec2 anisotropyVector;\n	#ifdef USE_ANISOTROPYMAP\n		uniform sampler2D anisotropyMap;\n	#endif\n#endif\nvarying vec3 vViewPosition;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <iridescence_fragment>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_physical_pars_fragment>\n#include <transmission_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <iridescence_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <roughnessmap_fragment>\n	#include <metalnessmap_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <clearcoat_normal_fragment_begin>\n	#include <clearcoat_normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <lights_physical_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;\n	vec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;\n	#include <transmission_fragment>\n	vec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;\n	#ifdef USE_SHEEN\n		float sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );\n		outgoingLight = outgoingLight * sheenEnergyComp + sheenSpecular;\n	#endif\n	#ifdef USE_CLEARCOAT\n		float dotNVcc = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\n		vec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );\n		outgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + clearcoatSpecular * material.clearcoat;\n	#endif\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
const vertex$4 = "#define TOON\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphcolor_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}";
const fragment$4 = "#define TOON\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_toon_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <lights_toon_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
const vertex$3 = "uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n#ifdef USE_POINTS_UV\n	varying vec2 vUv;\n	uniform mat3 uvTransform;\n#endif\nvoid main() {\n	#ifdef USE_POINTS_UV\n		vUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n	#endif\n	#include <color_vertex>\n	#include <morphcolor_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <project_vertex>\n	gl_PointSize = size;\n	#ifdef USE_SIZEATTENUATION\n		bool isPerspective = isPerspectiveMatrix( projectionMatrix );\n		if ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n	#endif\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <worldpos_vertex>\n	#include <fog_vertex>\n}";
const fragment$3 = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec3 outgoingLight = vec3( 0.0 );\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <map_particle_fragment>\n	#include <color_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	outgoingLight = diffuseColor.rgb;\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n}";
const vertex$2 = "#include <common>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <worldpos_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}";
const fragment$2 = "uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <logdepthbuf_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n	#include <logdepthbuf_fragment>\n	gl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n}";
const vertex$1 = "uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	vec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n	vec2 scale;\n	scale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n	scale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n	#ifndef USE_SIZEATTENUATION\n		bool isPerspective = isPerspectiveMatrix( projectionMatrix );\n		if ( isPerspective ) scale *= - mvPosition.z;\n	#endif\n	vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n	vec2 rotatedPosition;\n	rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n	rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n	mvPosition.xy += rotatedPosition;\n	gl_Position = projectionMatrix * mvPosition;\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <fog_vertex>\n}";
const fragment$1 = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec3 outgoingLight = vec3( 0.0 );\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	outgoingLight = diffuseColor.rgb;\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n}";
const ShaderChunk = {
    alphahash_fragment: alphahash_fragment,
    alphahash_pars_fragment: alphahash_pars_fragment,
    alphamap_fragment: alphamap_fragment,
    alphamap_pars_fragment: alphamap_pars_fragment,
    alphatest_fragment: alphatest_fragment,
    alphatest_pars_fragment: alphatest_pars_fragment,
    aomap_fragment: aomap_fragment,
    aomap_pars_fragment: aomap_pars_fragment,
    begin_vertex: begin_vertex,
    beginnormal_vertex: beginnormal_vertex,
    bsdfs: bsdfs,
    iridescence_fragment: iridescence_fragment,
    bumpmap_pars_fragment: bumpmap_pars_fragment,
    clipping_planes_fragment: clipping_planes_fragment,
    clipping_planes_pars_fragment: clipping_planes_pars_fragment,
    clipping_planes_pars_vertex: clipping_planes_pars_vertex,
    clipping_planes_vertex: clipping_planes_vertex,
    color_fragment: color_fragment,
    color_pars_fragment: color_pars_fragment,
    color_pars_vertex: color_pars_vertex,
    color_vertex: color_vertex,
    common: common,
    cube_uv_reflection_fragment: cube_uv_reflection_fragment,
    defaultnormal_vertex: defaultnormal_vertex,
    displacementmap_pars_vertex: displacementmap_pars_vertex,
    displacementmap_vertex: displacementmap_vertex,
    emissivemap_fragment: emissivemap_fragment,
    emissivemap_pars_fragment: emissivemap_pars_fragment,
    colorspace_fragment: colorspace_fragment,
    colorspace_pars_fragment: colorspace_pars_fragment,
    envmap_fragment: envmap_fragment,
    envmap_common_pars_fragment: envmap_common_pars_fragment,
    envmap_pars_fragment: envmap_pars_fragment,
    envmap_pars_vertex: envmap_pars_vertex,
    envmap_physical_pars_fragment: envmap_physical_pars_fragment,
    envmap_vertex: envmap_vertex,
    fog_vertex: fog_vertex,
    fog_pars_vertex: fog_pars_vertex,
    fog_fragment: fog_fragment,
    fog_pars_fragment: fog_pars_fragment,
    gradientmap_pars_fragment: gradientmap_pars_fragment,
    lightmap_fragment: lightmap_fragment,
    lightmap_pars_fragment: lightmap_pars_fragment,
    lights_lambert_fragment: lights_lambert_fragment,
    lights_lambert_pars_fragment: lights_lambert_pars_fragment,
    lights_pars_begin: lights_pars_begin,
    lights_toon_fragment: lights_toon_fragment,
    lights_toon_pars_fragment: lights_toon_pars_fragment,
    lights_phong_fragment: lights_phong_fragment,
    lights_phong_pars_fragment: lights_phong_pars_fragment,
    lights_physical_fragment: lights_physical_fragment,
    lights_physical_pars_fragment: lights_physical_pars_fragment,
    lights_fragment_begin: lights_fragment_begin,
    lights_fragment_maps: lights_fragment_maps,
    lights_fragment_end: lights_fragment_end,
    logdepthbuf_fragment: logdepthbuf_fragment,
    logdepthbuf_pars_fragment: logdepthbuf_pars_fragment,
    logdepthbuf_pars_vertex: logdepthbuf_pars_vertex,
    logdepthbuf_vertex: logdepthbuf_vertex,
    map_fragment: map_fragment,
    map_pars_fragment: map_pars_fragment,
    map_particle_fragment: map_particle_fragment,
    map_particle_pars_fragment: map_particle_pars_fragment,
    metalnessmap_fragment: metalnessmap_fragment,
    metalnessmap_pars_fragment: metalnessmap_pars_fragment,
    morphcolor_vertex: morphcolor_vertex,
    morphnormal_vertex: morphnormal_vertex,
    morphtarget_pars_vertex: morphtarget_pars_vertex,
    morphtarget_vertex: morphtarget_vertex,
    normal_fragment_begin: normal_fragment_begin,
    normal_fragment_maps: normal_fragment_maps,
    normal_pars_fragment: normal_pars_fragment,
    normal_pars_vertex: normal_pars_vertex,
    normal_vertex: normal_vertex,
    normalmap_pars_fragment: normalmap_pars_fragment,
    clearcoat_normal_fragment_begin: clearcoat_normal_fragment_begin,
    clearcoat_normal_fragment_maps: clearcoat_normal_fragment_maps,
    clearcoat_pars_fragment: clearcoat_pars_fragment,
    iridescence_pars_fragment: iridescence_pars_fragment,
    opaque_fragment: opaque_fragment,
    packing: packing,
    premultiplied_alpha_fragment: premultiplied_alpha_fragment,
    project_vertex: project_vertex,
    dithering_fragment: dithering_fragment,
    dithering_pars_fragment: dithering_pars_fragment,
    roughnessmap_fragment: roughnessmap_fragment,
    roughnessmap_pars_fragment: roughnessmap_pars_fragment,
    shadowmap_pars_fragment: shadowmap_pars_fragment,
    shadowmap_pars_vertex: shadowmap_pars_vertex,
    shadowmap_vertex: shadowmap_vertex,
    shadowmask_pars_fragment: shadowmask_pars_fragment,
    skinbase_vertex: skinbase_vertex,
    skinning_pars_vertex: skinning_pars_vertex,
    skinning_vertex: skinning_vertex,
    skinnormal_vertex: skinnormal_vertex,
    specularmap_fragment: specularmap_fragment,
    specularmap_pars_fragment: specularmap_pars_fragment,
    tonemapping_fragment: tonemapping_fragment,
    tonemapping_pars_fragment: tonemapping_pars_fragment,
    transmission_fragment: transmission_fragment,
    transmission_pars_fragment: transmission_pars_fragment,
    uv_pars_fragment: uv_pars_fragment,
    uv_pars_vertex: uv_pars_vertex,
    uv_vertex: uv_vertex,
    worldpos_vertex: worldpos_vertex,
    background_vert: vertex$h,
    background_frag: fragment$h,
    backgroundCube_vert: vertex$g,
    backgroundCube_frag: fragment$g,
    cube_vert: vertex$f,
    cube_frag: fragment$f,
    depth_vert: vertex$e,
    depth_frag: fragment$e,
    distanceRGBA_vert: vertex$d,
    distanceRGBA_frag: fragment$d,
    equirect_vert: vertex$c,
    equirect_frag: fragment$c,
    linedashed_vert: vertex$b,
    linedashed_frag: fragment$b,
    meshbasic_vert: vertex$a,
    meshbasic_frag: fragment$a,
    meshlambert_vert: vertex$9,
    meshlambert_frag: fragment$9,
    meshmatcap_vert: vertex$8,
    meshmatcap_frag: fragment$8,
    meshnormal_vert: vertex$7,
    meshnormal_frag: fragment$7,
    meshphong_vert: vertex$6,
    meshphong_frag: fragment$6,
    meshphysical_vert: vertex$5,
    meshphysical_frag: fragment$5,
    meshtoon_vert: vertex$4,
    meshtoon_frag: fragment$4,
    points_vert: vertex$3,
    points_frag: fragment$3,
    shadow_vert: vertex$2,
    shadow_frag: fragment$2,
    sprite_vert: vertex$1,
    sprite_frag: fragment$1
};
/**
 * Uniforms library for shared webgl shaders
 */ const UniformsLib = {
    common: {
        diffuse: {
            value: /*@__PURE__*/ new Color(0xffffff)
        },
        opacity: {
            value: 1.0
        },
        map: {
            value: null
        },
        mapTransform: {
            value: /*@__PURE__*/ new Matrix3()
        },
        alphaMap: {
            value: null
        },
        alphaMapTransform: {
            value: /*@__PURE__*/ new Matrix3()
        },
        alphaTest: {
            value: 0
        }
    },
    specularmap: {
        specularMap: {
            value: null
        },
        specularMapTransform: {
            value: /*@__PURE__*/ new Matrix3()
        }
    },
    envmap: {
        envMap: {
            value: null
        },
        flipEnvMap: {
            value: -1
        },
        reflectivity: {
            value: 1.0
        },
        ior: {
            value: 1.5
        },
        refractionRatio: {
            value: 0.98
        }
    },
    aomap: {
        aoMap: {
            value: null
        },
        aoMapIntensity: {
            value: 1
        },
        aoMapTransform: {
            value: /*@__PURE__*/ new Matrix3()
        }
    },
    lightmap: {
        lightMap: {
            value: null
        },
        lightMapIntensity: {
            value: 1
        },
        lightMapTransform: {
            value: /*@__PURE__*/ new Matrix3()
        }
    },
    bumpmap: {
        bumpMap: {
            value: null
        },
        bumpMapTransform: {
            value: /*@__PURE__*/ new Matrix3()
        },
        bumpScale: {
            value: 1
        }
    },
    normalmap: {
        normalMap: {
            value: null
        },
        normalMapTransform: {
            value: /*@__PURE__*/ new Matrix3()
        },
        normalScale: {
            value: /*@__PURE__*/ new Vector2(1, 1)
        }
    },
    displacementmap: {
        displacementMap: {
            value: null
        },
        displacementMapTransform: {
            value: /*@__PURE__*/ new Matrix3()
        },
        displacementScale: {
            value: 1
        },
        displacementBias: {
            value: 0
        }
    },
    emissivemap: {
        emissiveMap: {
            value: null
        },
        emissiveMapTransform: {
            value: /*@__PURE__*/ new Matrix3()
        }
    },
    metalnessmap: {
        metalnessMap: {
            value: null
        },
        metalnessMapTransform: {
            value: /*@__PURE__*/ new Matrix3()
        }
    },
    roughnessmap: {
        roughnessMap: {
            value: null
        },
        roughnessMapTransform: {
            value: /*@__PURE__*/ new Matrix3()
        }
    },
    gradientmap: {
        gradientMap: {
            value: null
        }
    },
    fog: {
        fogDensity: {
            value: 0.00025
        },
        fogNear: {
            value: 1
        },
        fogFar: {
            value: 2000
        },
        fogColor: {
            value: /*@__PURE__*/ new Color(0xffffff)
        }
    },
    lights: {
        ambientLightColor: {
            value: []
        },
        lightProbe: {
            value: []
        },
        directionalLights: {
            value: [],
            properties: {
                direction: {},
                color: {}
            }
        },
        directionalLightShadows: {
            value: [],
            properties: {
                shadowBias: {},
                shadowNormalBias: {},
                shadowRadius: {},
                shadowMapSize: {}
            }
        },
        directionalShadowMap: {
            value: []
        },
        directionalShadowMatrix: {
            value: []
        },
        spotLights: {
            value: [],
            properties: {
                color: {},
                position: {},
                direction: {},
                distance: {},
                coneCos: {},
                penumbraCos: {},
                decay: {}
            }
        },
        spotLightShadows: {
            value: [],
            properties: {
                shadowBias: {},
                shadowNormalBias: {},
                shadowRadius: {},
                shadowMapSize: {}
            }
        },
        spotLightMap: {
            value: []
        },
        spotShadowMap: {
            value: []
        },
        spotLightMatrix: {
            value: []
        },
        pointLights: {
            value: [],
            properties: {
                color: {},
                position: {},
                decay: {},
                distance: {}
            }
        },
        pointLightShadows: {
            value: [],
            properties: {
                shadowBias: {},
                shadowNormalBias: {},
                shadowRadius: {},
                shadowMapSize: {},
                shadowCameraNear: {},
                shadowCameraFar: {}
            }
        },
        pointShadowMap: {
            value: []
        },
        pointShadowMatrix: {
            value: []
        },
        hemisphereLights: {
            value: [],
            properties: {
                direction: {},
                skyColor: {},
                groundColor: {}
            }
        },
        // TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src
        rectAreaLights: {
            value: [],
            properties: {
                color: {},
                position: {},
                width: {},
                height: {}
            }
        },
        ltc_1: {
            value: null
        },
        ltc_2: {
            value: null
        }
    },
    points: {
        diffuse: {
            value: /*@__PURE__*/ new Color(0xffffff)
        },
        opacity: {
            value: 1.0
        },
        size: {
            value: 1.0
        },
        scale: {
            value: 1.0
        },
        map: {
            value: null
        },
        alphaMap: {
            value: null
        },
        alphaMapTransform: {
            value: /*@__PURE__*/ new Matrix3()
        },
        alphaTest: {
            value: 0
        },
        uvTransform: {
            value: /*@__PURE__*/ new Matrix3()
        }
    },
    sprite: {
        diffuse: {
            value: /*@__PURE__*/ new Color(0xffffff)
        },
        opacity: {
            value: 1.0
        },
        center: {
            value: /*@__PURE__*/ new Vector2(0.5, 0.5)
        },
        rotation: {
            value: 0.0
        },
        map: {
            value: null
        },
        mapTransform: {
            value: /*@__PURE__*/ new Matrix3()
        },
        alphaMap: {
            value: null
        },
        alphaMapTransform: {
            value: /*@__PURE__*/ new Matrix3()
        },
        alphaTest: {
            value: 0
        }
    }
};
const ShaderLib = {
    basic: {
        uniforms: /*@__PURE__*/ mergeUniforms([
            UniformsLib.common,
            UniformsLib.specularmap,
            UniformsLib.envmap,
            UniformsLib.aomap,
            UniformsLib.lightmap,
            UniformsLib.fog
        ]),
        vertexShader: ShaderChunk.meshbasic_vert,
        fragmentShader: ShaderChunk.meshbasic_frag
    },
    lambert: {
        uniforms: /*@__PURE__*/ mergeUniforms([
            UniformsLib.common,
            UniformsLib.specularmap,
            UniformsLib.envmap,
            UniformsLib.aomap,
            UniformsLib.lightmap,
            UniformsLib.emissivemap,
            UniformsLib.bumpmap,
            UniformsLib.normalmap,
            UniformsLib.displacementmap,
            UniformsLib.fog,
            UniformsLib.lights,
            {
                emissive: {
                    value: /*@__PURE__*/ new Color(0x000000)
                }
            }
        ]),
        vertexShader: ShaderChunk.meshlambert_vert,
        fragmentShader: ShaderChunk.meshlambert_frag
    },
    phong: {
        uniforms: /*@__PURE__*/ mergeUniforms([
            UniformsLib.common,
            UniformsLib.specularmap,
            UniformsLib.envmap,
            UniformsLib.aomap,
            UniformsLib.lightmap,
            UniformsLib.emissivemap,
            UniformsLib.bumpmap,
            UniformsLib.normalmap,
            UniformsLib.displacementmap,
            UniformsLib.fog,
            UniformsLib.lights,
            {
                emissive: {
                    value: /*@__PURE__*/ new Color(0x000000)
                },
                specular: {
                    value: /*@__PURE__*/ new Color(0x111111)
                },
                shininess: {
                    value: 30
                }
            }
        ]),
        vertexShader: ShaderChunk.meshphong_vert,
        fragmentShader: ShaderChunk.meshphong_frag
    },
    standard: {
        uniforms: /*@__PURE__*/ mergeUniforms([
            UniformsLib.common,
            UniformsLib.envmap,
            UniformsLib.aomap,
            UniformsLib.lightmap,
            UniformsLib.emissivemap,
            UniformsLib.bumpmap,
            UniformsLib.normalmap,
            UniformsLib.displacementmap,
            UniformsLib.roughnessmap,
            UniformsLib.metalnessmap,
            UniformsLib.fog,
            UniformsLib.lights,
            {
                emissive: {
                    value: /*@__PURE__*/ new Color(0x000000)
                },
                roughness: {
                    value: 1.0
                },
                metalness: {
                    value: 0.0
                },
                envMapIntensity: {
                    value: 1
                } // temporary
            }
        ]),
        vertexShader: ShaderChunk.meshphysical_vert,
        fragmentShader: ShaderChunk.meshphysical_frag
    },
    toon: {
        uniforms: /*@__PURE__*/ mergeUniforms([
            UniformsLib.common,
            UniformsLib.aomap,
            UniformsLib.lightmap,
            UniformsLib.emissivemap,
            UniformsLib.bumpmap,
            UniformsLib.normalmap,
            UniformsLib.displacementmap,
            UniformsLib.gradientmap,
            UniformsLib.fog,
            UniformsLib.lights,
            {
                emissive: {
                    value: /*@__PURE__*/ new Color(0x000000)
                }
            }
        ]),
        vertexShader: ShaderChunk.meshtoon_vert,
        fragmentShader: ShaderChunk.meshtoon_frag
    },
    matcap: {
        uniforms: /*@__PURE__*/ mergeUniforms([
            UniformsLib.common,
            UniformsLib.bumpmap,
            UniformsLib.normalmap,
            UniformsLib.displacementmap,
            UniformsLib.fog,
            {
                matcap: {
                    value: null
                }
            }
        ]),
        vertexShader: ShaderChunk.meshmatcap_vert,
        fragmentShader: ShaderChunk.meshmatcap_frag
    },
    points: {
        uniforms: /*@__PURE__*/ mergeUniforms([
            UniformsLib.points,
            UniformsLib.fog
        ]),
        vertexShader: ShaderChunk.points_vert,
        fragmentShader: ShaderChunk.points_frag
    },
    dashed: {
        uniforms: /*@__PURE__*/ mergeUniforms([
            UniformsLib.common,
            UniformsLib.fog,
            {
                scale: {
                    value: 1
                },
                dashSize: {
                    value: 1
                },
                totalSize: {
                    value: 2
                }
            }
        ]),
        vertexShader: ShaderChunk.linedashed_vert,
        fragmentShader: ShaderChunk.linedashed_frag
    },
    depth: {
        uniforms: /*@__PURE__*/ mergeUniforms([
            UniformsLib.common,
            UniformsLib.displacementmap
        ]),
        vertexShader: ShaderChunk.depth_vert,
        fragmentShader: ShaderChunk.depth_frag
    },
    normal: {
        uniforms: /*@__PURE__*/ mergeUniforms([
            UniformsLib.common,
            UniformsLib.bumpmap,
            UniformsLib.normalmap,
            UniformsLib.displacementmap,
            {
                opacity: {
                    value: 1.0
                }
            }
        ]),
        vertexShader: ShaderChunk.meshnormal_vert,
        fragmentShader: ShaderChunk.meshnormal_frag
    },
    sprite: {
        uniforms: /*@__PURE__*/ mergeUniforms([
            UniformsLib.sprite,
            UniformsLib.fog
        ]),
        vertexShader: ShaderChunk.sprite_vert,
        fragmentShader: ShaderChunk.sprite_frag
    },
    background: {
        uniforms: {
            uvTransform: {
                value: /*@__PURE__*/ new Matrix3()
            },
            t2D: {
                value: null
            },
            backgroundIntensity: {
                value: 1
            }
        },
        vertexShader: ShaderChunk.background_vert,
        fragmentShader: ShaderChunk.background_frag
    },
    backgroundCube: {
        uniforms: {
            envMap: {
                value: null
            },
            flipEnvMap: {
                value: -1
            },
            backgroundBlurriness: {
                value: 0
            },
            backgroundIntensity: {
                value: 1
            }
        },
        vertexShader: ShaderChunk.backgroundCube_vert,
        fragmentShader: ShaderChunk.backgroundCube_frag
    },
    cube: {
        uniforms: {
            tCube: {
                value: null
            },
            tFlip: {
                value: -1
            },
            opacity: {
                value: 1.0
            }
        },
        vertexShader: ShaderChunk.cube_vert,
        fragmentShader: ShaderChunk.cube_frag
    },
    equirect: {
        uniforms: {
            tEquirect: {
                value: null
            }
        },
        vertexShader: ShaderChunk.equirect_vert,
        fragmentShader: ShaderChunk.equirect_frag
    },
    distanceRGBA: {
        uniforms: /*@__PURE__*/ mergeUniforms([
            UniformsLib.common,
            UniformsLib.displacementmap,
            {
                referencePosition: {
                    value: /*@__PURE__*/ new Vector3()
                },
                nearDistance: {
                    value: 1
                },
                farDistance: {
                    value: 1000
                }
            }
        ]),
        vertexShader: ShaderChunk.distanceRGBA_vert,
        fragmentShader: ShaderChunk.distanceRGBA_frag
    },
    shadow: {
        uniforms: /*@__PURE__*/ mergeUniforms([
            UniformsLib.lights,
            UniformsLib.fog,
            {
                color: {
                    value: /*@__PURE__*/ new Color(0x00000)
                },
                opacity: {
                    value: 1.0
                }
            }
        ]),
        vertexShader: ShaderChunk.shadow_vert,
        fragmentShader: ShaderChunk.shadow_frag
    }
};
ShaderLib.physical = {
    uniforms: /*@__PURE__*/ mergeUniforms([
        ShaderLib.standard.uniforms,
        {
            clearcoat: {
                value: 0
            },
            clearcoatMap: {
                value: null
            },
            clearcoatMapTransform: {
                value: /*@__PURE__*/ new Matrix3()
            },
            clearcoatNormalMap: {
                value: null
            },
            clearcoatNormalMapTransform: {
                value: /*@__PURE__*/ new Matrix3()
            },
            clearcoatNormalScale: {
                value: /*@__PURE__*/ new Vector2(1, 1)
            },
            clearcoatRoughness: {
                value: 0
            },
            clearcoatRoughnessMap: {
                value: null
            },
            clearcoatRoughnessMapTransform: {
                value: /*@__PURE__*/ new Matrix3()
            },
            iridescence: {
                value: 0
            },
            iridescenceMap: {
                value: null
            },
            iridescenceMapTransform: {
                value: /*@__PURE__*/ new Matrix3()
            },
            iridescenceIOR: {
                value: 1.3
            },
            iridescenceThicknessMinimum: {
                value: 100
            },
            iridescenceThicknessMaximum: {
                value: 400
            },
            iridescenceThicknessMap: {
                value: null
            },
            iridescenceThicknessMapTransform: {
                value: /*@__PURE__*/ new Matrix3()
            },
            sheen: {
                value: 0
            },
            sheenColor: {
                value: /*@__PURE__*/ new Color(0x000000)
            },
            sheenColorMap: {
                value: null
            },
            sheenColorMapTransform: {
                value: /*@__PURE__*/ new Matrix3()
            },
            sheenRoughness: {
                value: 1
            },
            sheenRoughnessMap: {
                value: null
            },
            sheenRoughnessMapTransform: {
                value: /*@__PURE__*/ new Matrix3()
            },
            transmission: {
                value: 0
            },
            transmissionMap: {
                value: null
            },
            transmissionMapTransform: {
                value: /*@__PURE__*/ new Matrix3()
            },
            transmissionSamplerSize: {
                value: /*@__PURE__*/ new Vector2()
            },
            transmissionSamplerMap: {
                value: null
            },
            thickness: {
                value: 0
            },
            thicknessMap: {
                value: null
            },
            thicknessMapTransform: {
                value: /*@__PURE__*/ new Matrix3()
            },
            attenuationDistance: {
                value: 0
            },
            attenuationColor: {
                value: /*@__PURE__*/ new Color(0x000000)
            },
            specularColor: {
                value: /*@__PURE__*/ new Color(1, 1, 1)
            },
            specularColorMap: {
                value: null
            },
            specularColorMapTransform: {
                value: /*@__PURE__*/ new Matrix3()
            },
            specularIntensity: {
                value: 1
            },
            specularIntensityMap: {
                value: null
            },
            specularIntensityMapTransform: {
                value: /*@__PURE__*/ new Matrix3()
            },
            anisotropyVector: {
                value: /*@__PURE__*/ new Vector2()
            },
            anisotropyMap: {
                value: null
            },
            anisotropyMapTransform: {
                value: /*@__PURE__*/ new Matrix3()
            }
        }
    ]),
    vertexShader: ShaderChunk.meshphysical_vert,
    fragmentShader: ShaderChunk.meshphysical_frag
};
const _rgb = {
    r: 0,
    b: 0,
    g: 0
};
function WebGLBackground(renderer, cubemaps, cubeuvmaps, state, objects, alpha, premultipliedAlpha) {
    const clearColor = new Color(0x000000);
    let clearAlpha = alpha === true ? 0 : 1;
    let planeMesh;
    let boxMesh;
    let currentBackground = null;
    let currentBackgroundVersion = 0;
    let currentTonemapping = null;
    function render(renderList, scene) {
        let forceClear = false;
        let background = scene.isScene === true ? scene.background : null;
        if (background && background.isTexture) {
            const usePMREM = scene.backgroundBlurriness > 0; // use PMREM if the user wants to blur the background
            background = (usePMREM ? cubeuvmaps : cubemaps).get(background);
        }
        if (background === null) setClear(clearColor, clearAlpha);
        else if (background && background.isColor) {
            setClear(background, 1);
            forceClear = true;
        }
        const environmentBlendMode = renderer.xr.getEnvironmentBlendMode();
        if (environmentBlendMode === "additive") state.buffers.color.setClear(0, 0, 0, 1, premultipliedAlpha);
        else if (environmentBlendMode === "alpha-blend") state.buffers.color.setClear(0, 0, 0, 0, premultipliedAlpha);
        if (renderer.autoClear || forceClear) renderer.clear(renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil);
        if (background && (background.isCubeTexture || background.mapping === CubeUVReflectionMapping)) {
            if (boxMesh === undefined) {
                boxMesh = new Mesh(new BoxGeometry(1, 1, 1), new ShaderMaterial({
                    name: "BackgroundCubeMaterial",
                    uniforms: cloneUniforms(ShaderLib.backgroundCube.uniforms),
                    vertexShader: ShaderLib.backgroundCube.vertexShader,
                    fragmentShader: ShaderLib.backgroundCube.fragmentShader,
                    side: BackSide,
                    depthTest: false,
                    depthWrite: false,
                    fog: false
                }));
                boxMesh.geometry.deleteAttribute("normal");
                boxMesh.geometry.deleteAttribute("uv");
                boxMesh.onBeforeRender = function(renderer, scene, camera) {
                    this.matrixWorld.copyPosition(camera.matrixWorld);
                };
                // add "envMap" material property so the renderer can evaluate it like for built-in materials
                Object.defineProperty(boxMesh.material, "envMap", {
                    get: function() {
                        return this.uniforms.envMap.value;
                    }
                });
                objects.update(boxMesh);
            }
            boxMesh.material.uniforms.envMap.value = background;
            boxMesh.material.uniforms.flipEnvMap.value = background.isCubeTexture && background.isRenderTargetTexture === false ? -1 : 1;
            boxMesh.material.uniforms.backgroundBlurriness.value = scene.backgroundBlurriness;
            boxMesh.material.uniforms.backgroundIntensity.value = scene.backgroundIntensity;
            boxMesh.material.toneMapped = background.colorSpace === SRGBColorSpace ? false : true;
            if (currentBackground !== background || currentBackgroundVersion !== background.version || currentTonemapping !== renderer.toneMapping) {
                boxMesh.material.needsUpdate = true;
                currentBackground = background;
                currentBackgroundVersion = background.version;
                currentTonemapping = renderer.toneMapping;
            }
            boxMesh.layers.enableAll();
            // push to the pre-sorted opaque render list
            renderList.unshift(boxMesh, boxMesh.geometry, boxMesh.material, 0, 0, null);
        } else if (background && background.isTexture) {
            if (planeMesh === undefined) {
                planeMesh = new Mesh(new PlaneGeometry(2, 2), new ShaderMaterial({
                    name: "BackgroundMaterial",
                    uniforms: cloneUniforms(ShaderLib.background.uniforms),
                    vertexShader: ShaderLib.background.vertexShader,
                    fragmentShader: ShaderLib.background.fragmentShader,
                    side: FrontSide,
                    depthTest: false,
                    depthWrite: false,
                    fog: false
                }));
                planeMesh.geometry.deleteAttribute("normal");
                // add "map" material property so the renderer can evaluate it like for built-in materials
                Object.defineProperty(planeMesh.material, "map", {
                    get: function() {
                        return this.uniforms.t2D.value;
                    }
                });
                objects.update(planeMesh);
            }
            planeMesh.material.uniforms.t2D.value = background;
            planeMesh.material.uniforms.backgroundIntensity.value = scene.backgroundIntensity;
            planeMesh.material.toneMapped = background.colorSpace === SRGBColorSpace ? false : true;
            if (background.matrixAutoUpdate === true) background.updateMatrix();
            planeMesh.material.uniforms.uvTransform.value.copy(background.matrix);
            if (currentBackground !== background || currentBackgroundVersion !== background.version || currentTonemapping !== renderer.toneMapping) {
                planeMesh.material.needsUpdate = true;
                currentBackground = background;
                currentBackgroundVersion = background.version;
                currentTonemapping = renderer.toneMapping;
            }
            planeMesh.layers.enableAll();
            // push to the pre-sorted opaque render list
            renderList.unshift(planeMesh, planeMesh.geometry, planeMesh.material, 0, 0, null);
        }
    }
    function setClear(color, alpha) {
        color.getRGB(_rgb, getUnlitUniformColorSpace(renderer));
        state.buffers.color.setClear(_rgb.r, _rgb.g, _rgb.b, alpha, premultipliedAlpha);
    }
    return {
        getClearColor: function() {
            return clearColor;
        },
        setClearColor: function(color, alpha = 1) {
            clearColor.set(color);
            clearAlpha = alpha;
            setClear(clearColor, clearAlpha);
        },
        getClearAlpha: function() {
            return clearAlpha;
        },
        setClearAlpha: function(alpha) {
            clearAlpha = alpha;
            setClear(clearColor, clearAlpha);
        },
        render: render
    };
}
function WebGLBindingStates(gl, extensions, attributes, capabilities) {
    const maxVertexAttributes = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);
    const extension = capabilities.isWebGL2 ? null : extensions.get("OES_vertex_array_object");
    const vaoAvailable = capabilities.isWebGL2 || extension !== null;
    const bindingStates = {};
    const defaultState = createBindingState(null);
    let currentState = defaultState;
    let forceUpdate = false;
    function setup(object, material, program, geometry, index) {
        let updateBuffers = false;
        if (vaoAvailable) {
            const state = getBindingState(geometry, program, material);
            if (currentState !== state) {
                currentState = state;
                bindVertexArrayObject(currentState.object);
            }
            updateBuffers = needsUpdate(object, geometry, program, index);
            if (updateBuffers) saveCache(object, geometry, program, index);
        } else {
            const wireframe = material.wireframe === true;
            if (currentState.geometry !== geometry.id || currentState.program !== program.id || currentState.wireframe !== wireframe) {
                currentState.geometry = geometry.id;
                currentState.program = program.id;
                currentState.wireframe = wireframe;
                updateBuffers = true;
            }
        }
        if (index !== null) attributes.update(index, gl.ELEMENT_ARRAY_BUFFER);
        if (updateBuffers || forceUpdate) {
            forceUpdate = false;
            setupVertexAttributes(object, material, program, geometry);
            if (index !== null) gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, attributes.get(index).buffer);
        }
    }
    function createVertexArrayObject() {
        if (capabilities.isWebGL2) return gl.createVertexArray();
        return extension.createVertexArrayOES();
    }
    function bindVertexArrayObject(vao) {
        if (capabilities.isWebGL2) return gl.bindVertexArray(vao);
        return extension.bindVertexArrayOES(vao);
    }
    function deleteVertexArrayObject(vao) {
        if (capabilities.isWebGL2) return gl.deleteVertexArray(vao);
        return extension.deleteVertexArrayOES(vao);
    }
    function getBindingState(geometry, program, material) {
        const wireframe = material.wireframe === true;
        let programMap = bindingStates[geometry.id];
        if (programMap === undefined) {
            programMap = {};
            bindingStates[geometry.id] = programMap;
        }
        let stateMap = programMap[program.id];
        if (stateMap === undefined) {
            stateMap = {};
            programMap[program.id] = stateMap;
        }
        let state = stateMap[wireframe];
        if (state === undefined) {
            state = createBindingState(createVertexArrayObject());
            stateMap[wireframe] = state;
        }
        return state;
    }
    function createBindingState(vao) {
        const newAttributes = [];
        const enabledAttributes = [];
        const attributeDivisors = [];
        for(let i = 0; i < maxVertexAttributes; i++){
            newAttributes[i] = 0;
            enabledAttributes[i] = 0;
            attributeDivisors[i] = 0;
        }
        return {
            // for backward compatibility on non-VAO support browser
            geometry: null,
            program: null,
            wireframe: false,
            newAttributes: newAttributes,
            enabledAttributes: enabledAttributes,
            attributeDivisors: attributeDivisors,
            object: vao,
            attributes: {},
            index: null
        };
    }
    function needsUpdate(object, geometry, program, index) {
        const cachedAttributes = currentState.attributes;
        const geometryAttributes = geometry.attributes;
        let attributesNum = 0;
        const programAttributes = program.getAttributes();
        for(const name in programAttributes){
            const programAttribute = programAttributes[name];
            if (programAttribute.location >= 0) {
                const cachedAttribute = cachedAttributes[name];
                let geometryAttribute = geometryAttributes[name];
                if (geometryAttribute === undefined) {
                    if (name === "instanceMatrix" && object.instanceMatrix) geometryAttribute = object.instanceMatrix;
                    if (name === "instanceColor" && object.instanceColor) geometryAttribute = object.instanceColor;
                }
                if (cachedAttribute === undefined) return true;
                if (cachedAttribute.attribute !== geometryAttribute) return true;
                if (geometryAttribute && cachedAttribute.data !== geometryAttribute.data) return true;
                attributesNum++;
            }
        }
        if (currentState.attributesNum !== attributesNum) return true;
        if (currentState.index !== index) return true;
        return false;
    }
    function saveCache(object, geometry, program, index) {
        const cache = {};
        const attributes = geometry.attributes;
        let attributesNum = 0;
        const programAttributes = program.getAttributes();
        for(const name in programAttributes){
            const programAttribute = programAttributes[name];
            if (programAttribute.location >= 0) {
                let attribute = attributes[name];
                if (attribute === undefined) {
                    if (name === "instanceMatrix" && object.instanceMatrix) attribute = object.instanceMatrix;
                    if (name === "instanceColor" && object.instanceColor) attribute = object.instanceColor;
                }
                const data = {};
                data.attribute = attribute;
                if (attribute && attribute.data) data.data = attribute.data;
                cache[name] = data;
                attributesNum++;
            }
        }
        currentState.attributes = cache;
        currentState.attributesNum = attributesNum;
        currentState.index = index;
    }
    function initAttributes() {
        const newAttributes = currentState.newAttributes;
        for(let i = 0, il = newAttributes.length; i < il; i++)newAttributes[i] = 0;
    }
    function enableAttribute(attribute) {
        enableAttributeAndDivisor(attribute, 0);
    }
    function enableAttributeAndDivisor(attribute, meshPerAttribute) {
        const newAttributes = currentState.newAttributes;
        const enabledAttributes = currentState.enabledAttributes;
        const attributeDivisors = currentState.attributeDivisors;
        newAttributes[attribute] = 1;
        if (enabledAttributes[attribute] === 0) {
            gl.enableVertexAttribArray(attribute);
            enabledAttributes[attribute] = 1;
        }
        if (attributeDivisors[attribute] !== meshPerAttribute) {
            const extension = capabilities.isWebGL2 ? gl : extensions.get("ANGLE_instanced_arrays");
            extension[capabilities.isWebGL2 ? "vertexAttribDivisor" : "vertexAttribDivisorANGLE"](attribute, meshPerAttribute);
            attributeDivisors[attribute] = meshPerAttribute;
        }
    }
    function disableUnusedAttributes() {
        const newAttributes = currentState.newAttributes;
        const enabledAttributes = currentState.enabledAttributes;
        for(let i = 0, il = enabledAttributes.length; i < il; i++)if (enabledAttributes[i] !== newAttributes[i]) {
            gl.disableVertexAttribArray(i);
            enabledAttributes[i] = 0;
        }
    }
    function vertexAttribPointer(index, size, type, normalized, stride, offset, integer) {
        if (integer === true) gl.vertexAttribIPointer(index, size, type, stride, offset);
        else gl.vertexAttribPointer(index, size, type, normalized, stride, offset);
    }
    function setupVertexAttributes(object, material, program, geometry) {
        if (capabilities.isWebGL2 === false && (object.isInstancedMesh || geometry.isInstancedBufferGeometry)) {
            if (extensions.get("ANGLE_instanced_arrays") === null) return;
        }
        initAttributes();
        const geometryAttributes = geometry.attributes;
        const programAttributes = program.getAttributes();
        const materialDefaultAttributeValues = material.defaultAttributeValues;
        for(const name in programAttributes){
            const programAttribute = programAttributes[name];
            if (programAttribute.location >= 0) {
                let geometryAttribute = geometryAttributes[name];
                if (geometryAttribute === undefined) {
                    if (name === "instanceMatrix" && object.instanceMatrix) geometryAttribute = object.instanceMatrix;
                    if (name === "instanceColor" && object.instanceColor) geometryAttribute = object.instanceColor;
                }
                if (geometryAttribute !== undefined) {
                    const normalized = geometryAttribute.normalized;
                    const size = geometryAttribute.itemSize;
                    const attribute = attributes.get(geometryAttribute);
                    // TODO Attribute may not be available on context restore
                    if (attribute === undefined) continue;
                    const buffer = attribute.buffer;
                    const type = attribute.type;
                    const bytesPerElement = attribute.bytesPerElement;
                    // check for integer attributes (WebGL 2 only)
                    const integer = capabilities.isWebGL2 === true && (type === gl.INT || type === gl.UNSIGNED_INT || geometryAttribute.gpuType === IntType);
                    if (geometryAttribute.isInterleavedBufferAttribute) {
                        const data = geometryAttribute.data;
                        const stride = data.stride;
                        const offset = geometryAttribute.offset;
                        if (data.isInstancedInterleavedBuffer) {
                            for(let i = 0; i < programAttribute.locationSize; i++)enableAttributeAndDivisor(programAttribute.location + i, data.meshPerAttribute);
                            if (object.isInstancedMesh !== true && geometry._maxInstanceCount === undefined) geometry._maxInstanceCount = data.meshPerAttribute * data.count;
                        } else for(let i = 0; i < programAttribute.locationSize; i++)enableAttribute(programAttribute.location + i);
                        gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
                        for(let i = 0; i < programAttribute.locationSize; i++)vertexAttribPointer(programAttribute.location + i, size / programAttribute.locationSize, type, normalized, stride * bytesPerElement, (offset + size / programAttribute.locationSize * i) * bytesPerElement, integer);
                    } else {
                        if (geometryAttribute.isInstancedBufferAttribute) {
                            for(let i = 0; i < programAttribute.locationSize; i++)enableAttributeAndDivisor(programAttribute.location + i, geometryAttribute.meshPerAttribute);
                            if (object.isInstancedMesh !== true && geometry._maxInstanceCount === undefined) geometry._maxInstanceCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;
                        } else for(let i = 0; i < programAttribute.locationSize; i++)enableAttribute(programAttribute.location + i);
                        gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
                        for(let i = 0; i < programAttribute.locationSize; i++)vertexAttribPointer(programAttribute.location + i, size / programAttribute.locationSize, type, normalized, size * bytesPerElement, size / programAttribute.locationSize * i * bytesPerElement, integer);
                    }
                } else if (materialDefaultAttributeValues !== undefined) {
                    const value = materialDefaultAttributeValues[name];
                    if (value !== undefined) switch(value.length){
                        case 2:
                            gl.vertexAttrib2fv(programAttribute.location, value);
                            break;
                        case 3:
                            gl.vertexAttrib3fv(programAttribute.location, value);
                            break;
                        case 4:
                            gl.vertexAttrib4fv(programAttribute.location, value);
                            break;
                        default:
                            gl.vertexAttrib1fv(programAttribute.location, value);
                    }
                }
            }
        }
        disableUnusedAttributes();
    }
    function dispose() {
        reset();
        for(const geometryId in bindingStates){
            const programMap = bindingStates[geometryId];
            for(const programId in programMap){
                const stateMap = programMap[programId];
                for(const wireframe in stateMap){
                    deleteVertexArrayObject(stateMap[wireframe].object);
                    delete stateMap[wireframe];
                }
                delete programMap[programId];
            }
            delete bindingStates[geometryId];
        }
    }
    function releaseStatesOfGeometry(geometry) {
        if (bindingStates[geometry.id] === undefined) return;
        const programMap = bindingStates[geometry.id];
        for(const programId in programMap){
            const stateMap = programMap[programId];
            for(const wireframe in stateMap){
                deleteVertexArrayObject(stateMap[wireframe].object);
                delete stateMap[wireframe];
            }
            delete programMap[programId];
        }
        delete bindingStates[geometry.id];
    }
    function releaseStatesOfProgram(program) {
        for(const geometryId in bindingStates){
            const programMap = bindingStates[geometryId];
            if (programMap[program.id] === undefined) continue;
            const stateMap = programMap[program.id];
            for(const wireframe in stateMap){
                deleteVertexArrayObject(stateMap[wireframe].object);
                delete stateMap[wireframe];
            }
            delete programMap[program.id];
        }
    }
    function reset() {
        resetDefaultState();
        forceUpdate = true;
        if (currentState === defaultState) return;
        currentState = defaultState;
        bindVertexArrayObject(currentState.object);
    }
    // for backward-compatibility
    function resetDefaultState() {
        defaultState.geometry = null;
        defaultState.program = null;
        defaultState.wireframe = false;
    }
    return {
        setup: setup,
        reset: reset,
        resetDefaultState: resetDefaultState,
        dispose: dispose,
        releaseStatesOfGeometry: releaseStatesOfGeometry,
        releaseStatesOfProgram: releaseStatesOfProgram,
        initAttributes: initAttributes,
        enableAttribute: enableAttribute,
        disableUnusedAttributes: disableUnusedAttributes
    };
}
function WebGLBufferRenderer(gl, extensions, info, capabilities) {
    const isWebGL2 = capabilities.isWebGL2;
    let mode;
    function setMode(value) {
        mode = value;
    }
    function render(start, count) {
        gl.drawArrays(mode, start, count);
        info.update(count, mode, 1);
    }
    function renderInstances(start, count, primcount) {
        if (primcount === 0) return;
        let extension, methodName;
        if (isWebGL2) {
            extension = gl;
            methodName = "drawArraysInstanced";
        } else {
            extension = extensions.get("ANGLE_instanced_arrays");
            methodName = "drawArraysInstancedANGLE";
            if (extension === null) {
                console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");
                return;
            }
        }
        extension[methodName](mode, start, count, primcount);
        info.update(count, mode, primcount);
    }
    //
    this.setMode = setMode;
    this.render = render;
    this.renderInstances = renderInstances;
}
function WebGLCapabilities(gl, extensions, parameters) {
    let maxAnisotropy;
    function getMaxAnisotropy() {
        if (maxAnisotropy !== undefined) return maxAnisotropy;
        if (extensions.has("EXT_texture_filter_anisotropic") === true) {
            const extension = extensions.get("EXT_texture_filter_anisotropic");
            maxAnisotropy = gl.getParameter(extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT);
        } else maxAnisotropy = 0;
        return maxAnisotropy;
    }
    function getMaxPrecision(precision) {
        if (precision === "highp") {
            if (gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.HIGH_FLOAT).precision > 0 && gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT).precision > 0) return "highp";
            precision = "mediump";
        }
        if (precision === "mediump") {
            if (gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.MEDIUM_FLOAT).precision > 0 && gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT).precision > 0) return "mediump";
        }
        return "lowp";
    }
    const isWebGL2 = typeof WebGL2RenderingContext !== "undefined" && gl.constructor.name === "WebGL2RenderingContext";
    let precision = parameters.precision !== undefined ? parameters.precision : "highp";
    const maxPrecision = getMaxPrecision(precision);
    if (maxPrecision !== precision) {
        console.warn("THREE.WebGLRenderer:", precision, "not supported, using", maxPrecision, "instead.");
        precision = maxPrecision;
    }
    const drawBuffers = isWebGL2 || extensions.has("WEBGL_draw_buffers");
    const logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;
    const maxTextures = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);
    const maxVertexTextures = gl.getParameter(gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS);
    const maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);
    const maxCubemapSize = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);
    const maxAttributes = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);
    const maxVertexUniforms = gl.getParameter(gl.MAX_VERTEX_UNIFORM_VECTORS);
    const maxVaryings = gl.getParameter(gl.MAX_VARYING_VECTORS);
    const maxFragmentUniforms = gl.getParameter(gl.MAX_FRAGMENT_UNIFORM_VECTORS);
    const vertexTextures = maxVertexTextures > 0;
    const floatFragmentTextures = isWebGL2 || extensions.has("OES_texture_float");
    const floatVertexTextures = vertexTextures && floatFragmentTextures;
    const maxSamples = isWebGL2 ? gl.getParameter(gl.MAX_SAMPLES) : 0;
    return {
        isWebGL2: isWebGL2,
        drawBuffers: drawBuffers,
        getMaxAnisotropy: getMaxAnisotropy,
        getMaxPrecision: getMaxPrecision,
        precision: precision,
        logarithmicDepthBuffer: logarithmicDepthBuffer,
        maxTextures: maxTextures,
        maxVertexTextures: maxVertexTextures,
        maxTextureSize: maxTextureSize,
        maxCubemapSize: maxCubemapSize,
        maxAttributes: maxAttributes,
        maxVertexUniforms: maxVertexUniforms,
        maxVaryings: maxVaryings,
        maxFragmentUniforms: maxFragmentUniforms,
        vertexTextures: vertexTextures,
        floatFragmentTextures: floatFragmentTextures,
        floatVertexTextures: floatVertexTextures,
        maxSamples: maxSamples
    };
}
function WebGLClipping(properties) {
    const scope = this;
    let globalState = null, numGlobalPlanes = 0, localClippingEnabled = false, renderingShadows = false;
    const plane = new Plane(), viewNormalMatrix = new Matrix3(), uniform = {
        value: null,
        needsUpdate: false
    };
    this.uniform = uniform;
    this.numPlanes = 0;
    this.numIntersection = 0;
    this.init = function(planes, enableLocalClipping) {
        const enabled = planes.length !== 0 || enableLocalClipping || // enable state of previous frame - the clipping code has to
        // run another frame in order to reset the state:
        numGlobalPlanes !== 0 || localClippingEnabled;
        localClippingEnabled = enableLocalClipping;
        numGlobalPlanes = planes.length;
        return enabled;
    };
    this.beginShadows = function() {
        renderingShadows = true;
        projectPlanes(null);
    };
    this.endShadows = function() {
        renderingShadows = false;
    };
    this.setGlobalState = function(planes, camera) {
        globalState = projectPlanes(planes, camera, 0);
    };
    this.setState = function(material, camera, useCache) {
        const planes = material.clippingPlanes, clipIntersection = material.clipIntersection, clipShadows = material.clipShadows;
        const materialProperties = properties.get(material);
        if (!localClippingEnabled || planes === null || planes.length === 0 || renderingShadows && !clipShadows) {
            // there's no local clipping
            if (renderingShadows) // there's no global clipping
            projectPlanes(null);
            else resetGlobalState();
        } else {
            const nGlobal = renderingShadows ? 0 : numGlobalPlanes, lGlobal = nGlobal * 4;
            let dstArray = materialProperties.clippingState || null;
            uniform.value = dstArray; // ensure unique state
            dstArray = projectPlanes(planes, camera, lGlobal, useCache);
            for(let i = 0; i !== lGlobal; ++i)dstArray[i] = globalState[i];
            materialProperties.clippingState = dstArray;
            this.numIntersection = clipIntersection ? this.numPlanes : 0;
            this.numPlanes += nGlobal;
        }
    };
    function resetGlobalState() {
        if (uniform.value !== globalState) {
            uniform.value = globalState;
            uniform.needsUpdate = numGlobalPlanes > 0;
        }
        scope.numPlanes = numGlobalPlanes;
        scope.numIntersection = 0;
    }
    function projectPlanes(planes, camera, dstOffset, skipTransform) {
        const nPlanes = planes !== null ? planes.length : 0;
        let dstArray = null;
        if (nPlanes !== 0) {
            dstArray = uniform.value;
            if (skipTransform !== true || dstArray === null) {
                const flatSize = dstOffset + nPlanes * 4, viewMatrix = camera.matrixWorldInverse;
                viewNormalMatrix.getNormalMatrix(viewMatrix);
                if (dstArray === null || dstArray.length < flatSize) dstArray = new Float32Array(flatSize);
                for(let i = 0, i4 = dstOffset; i !== nPlanes; ++i, i4 += 4){
                    plane.copy(planes[i]).applyMatrix4(viewMatrix, viewNormalMatrix);
                    plane.normal.toArray(dstArray, i4);
                    dstArray[i4 + 3] = plane.constant;
                }
            }
            uniform.value = dstArray;
            uniform.needsUpdate = true;
        }
        scope.numPlanes = nPlanes;
        scope.numIntersection = 0;
        return dstArray;
    }
}
function WebGLCubeMaps(renderer) {
    let cubemaps = new WeakMap();
    function mapTextureMapping(texture, mapping) {
        if (mapping === EquirectangularReflectionMapping) texture.mapping = CubeReflectionMapping;
        else if (mapping === EquirectangularRefractionMapping) texture.mapping = CubeRefractionMapping;
        return texture;
    }
    function get(texture) {
        if (texture && texture.isTexture && texture.isRenderTargetTexture === false) {
            const mapping = texture.mapping;
            if (mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping) {
                if (cubemaps.has(texture)) {
                    const cubemap = cubemaps.get(texture).texture;
                    return mapTextureMapping(cubemap, texture.mapping);
                } else {
                    const image = texture.image;
                    if (image && image.height > 0) {
                        const renderTarget = new WebGLCubeRenderTarget(image.height / 2);
                        renderTarget.fromEquirectangularTexture(renderer, texture);
                        cubemaps.set(texture, renderTarget);
                        texture.addEventListener("dispose", onTextureDispose);
                        return mapTextureMapping(renderTarget.texture, texture.mapping);
                    } else // image not yet ready. try the conversion next frame
                    return null;
                }
            }
        }
        return texture;
    }
    function onTextureDispose(event) {
        const texture = event.target;
        texture.removeEventListener("dispose", onTextureDispose);
        const cubemap = cubemaps.get(texture);
        if (cubemap !== undefined) {
            cubemaps.delete(texture);
            cubemap.dispose();
        }
    }
    function dispose() {
        cubemaps = new WeakMap();
    }
    return {
        get: get,
        dispose: dispose
    };
}
class OrthographicCamera extends Camera {
    constructor(left = -1, right = 1, top = 1, bottom = -1, near = 0.1, far = 2000){
        super();
        this.isOrthographicCamera = true;
        this.type = "OrthographicCamera";
        this.zoom = 1;
        this.view = null;
        this.left = left;
        this.right = right;
        this.top = top;
        this.bottom = bottom;
        this.near = near;
        this.far = far;
        this.updateProjectionMatrix();
    }
    copy(source, recursive) {
        super.copy(source, recursive);
        this.left = source.left;
        this.right = source.right;
        this.top = source.top;
        this.bottom = source.bottom;
        this.near = source.near;
        this.far = source.far;
        this.zoom = source.zoom;
        this.view = source.view === null ? null : Object.assign({}, source.view);
        return this;
    }
    setViewOffset(fullWidth, fullHeight, x, y, width, height) {
        if (this.view === null) this.view = {
            enabled: true,
            fullWidth: 1,
            fullHeight: 1,
            offsetX: 0,
            offsetY: 0,
            width: 1,
            height: 1
        };
        this.view.enabled = true;
        this.view.fullWidth = fullWidth;
        this.view.fullHeight = fullHeight;
        this.view.offsetX = x;
        this.view.offsetY = y;
        this.view.width = width;
        this.view.height = height;
        this.updateProjectionMatrix();
    }
    clearViewOffset() {
        if (this.view !== null) this.view.enabled = false;
        this.updateProjectionMatrix();
    }
    updateProjectionMatrix() {
        const dx = (this.right - this.left) / (2 * this.zoom);
        const dy = (this.top - this.bottom) / (2 * this.zoom);
        const cx = (this.right + this.left) / 2;
        const cy = (this.top + this.bottom) / 2;
        let left = cx - dx;
        let right = cx + dx;
        let top = cy + dy;
        let bottom = cy - dy;
        if (this.view !== null && this.view.enabled) {
            const scaleW = (this.right - this.left) / this.view.fullWidth / this.zoom;
            const scaleH = (this.top - this.bottom) / this.view.fullHeight / this.zoom;
            left += scaleW * this.view.offsetX;
            right = left + scaleW * this.view.width;
            top -= scaleH * this.view.offsetY;
            bottom = top - scaleH * this.view.height;
        }
        this.projectionMatrix.makeOrthographic(left, right, top, bottom, this.near, this.far, this.coordinateSystem);
        this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
    }
    toJSON(meta) {
        const data = super.toJSON(meta);
        data.object.zoom = this.zoom;
        data.object.left = this.left;
        data.object.right = this.right;
        data.object.top = this.top;
        data.object.bottom = this.bottom;
        data.object.near = this.near;
        data.object.far = this.far;
        if (this.view !== null) data.object.view = Object.assign({}, this.view);
        return data;
    }
}
const LOD_MIN = 4;
// The standard deviations (radians) associated with the extra mips. These are
// chosen to approximate a Trowbridge-Reitz distribution function times the
// geometric shadowing function. These sigma values squared must match the
// variance #defines in cube_uv_reflection_fragment.glsl.js.
const EXTRA_LOD_SIGMA = [
    0.125,
    0.215,
    0.35,
    0.446,
    0.526,
    0.582
];
// The maximum length of the blur for loop. Smaller sigmas will use fewer
// samples and exit early, but not recompile the shader.
const MAX_SAMPLES = 20;
const _flatCamera = /*@__PURE__*/ new OrthographicCamera();
const _clearColor = /*@__PURE__*/ new Color();
let _oldTarget = null;
// Golden Ratio
const PHI = (1 + Math.sqrt(5)) / 2;
const INV_PHI = 1 / PHI;
// Vertices of a dodecahedron (except the opposites, which represent the
// same axis), used as axis directions evenly spread on a sphere.
const _axisDirections = [
    /*@__PURE__*/ new Vector3(1, 1, 1),
    /*@__PURE__*/ new Vector3(-1, 1, 1),
    /*@__PURE__*/ new Vector3(1, 1, -1),
    /*@__PURE__*/ new Vector3(-1, 1, -1),
    /*@__PURE__*/ new Vector3(0, PHI, INV_PHI),
    /*@__PURE__*/ new Vector3(0, PHI, -INV_PHI),
    /*@__PURE__*/ new Vector3(INV_PHI, 0, PHI),
    /*@__PURE__*/ new Vector3(-INV_PHI, 0, PHI),
    /*@__PURE__*/ new Vector3(PHI, INV_PHI, 0),
    /*@__PURE__*/ new Vector3(-PHI, INV_PHI, 0)
];
/**
 * This class generates a Prefiltered, Mipmapped Radiance Environment Map
 * (PMREM) from a cubeMap environment texture. This allows different levels of
 * blur to be quickly accessed based on material roughness. It is packed into a
 * special CubeUV format that allows us to perform custom interpolation so that
 * we can support nonlinear formats such as RGBE. Unlike a traditional mipmap
 * chain, it only goes down to the LOD_MIN level (above), and then creates extra
 * even more filtered 'mips' at the same LOD_MIN resolution, associated with
 * higher roughness levels. In this way we maintain resolution to smoothly
 * interpolate diffuse lighting while limiting sampling computation.
 *
 * Paper: Fast, Accurate Image-Based Lighting
 * https://drive.google.com/file/d/15y8r_UpKlU9SvV4ILb0C3qCPecS8pvLz/view
*/ class PMREMGenerator {
    constructor(renderer){
        this._renderer = renderer;
        this._pingPongRenderTarget = null;
        this._lodMax = 0;
        this._cubeSize = 0;
        this._lodPlanes = [];
        this._sizeLods = [];
        this._sigmas = [];
        this._blurMaterial = null;
        this._cubemapMaterial = null;
        this._equirectMaterial = null;
        this._compileMaterial(this._blurMaterial);
    }
    /**
	 * Generates a PMREM from a supplied Scene, which can be faster than using an
	 * image if networking bandwidth is low. Optional sigma specifies a blur radius
	 * in radians to be applied to the scene before PMREM generation. Optional near
	 * and far planes ensure the scene is rendered in its entirety (the cubeCamera
	 * is placed at the origin).
	 */ fromScene(scene, sigma = 0, near = 0.1, far = 100) {
        _oldTarget = this._renderer.getRenderTarget();
        this._setSize(256);
        const cubeUVRenderTarget = this._allocateTargets();
        cubeUVRenderTarget.depthBuffer = true;
        this._sceneToCubeUV(scene, near, far, cubeUVRenderTarget);
        if (sigma > 0) this._blur(cubeUVRenderTarget, 0, 0, sigma);
        this._applyPMREM(cubeUVRenderTarget);
        this._cleanup(cubeUVRenderTarget);
        return cubeUVRenderTarget;
    }
    /**
	 * Generates a PMREM from an equirectangular texture, which can be either LDR
	 * or HDR. The ideal input image size is 1k (1024 x 512),
	 * as this matches best with the 256 x 256 cubemap output.
	 */ fromEquirectangular(equirectangular, renderTarget = null) {
        return this._fromTexture(equirectangular, renderTarget);
    }
    /**
	 * Generates a PMREM from an cubemap texture, which can be either LDR
	 * or HDR. The ideal input cube size is 256 x 256,
	 * as this matches best with the 256 x 256 cubemap output.
	 */ fromCubemap(cubemap, renderTarget = null) {
        return this._fromTexture(cubemap, renderTarget);
    }
    /**
	 * Pre-compiles the cubemap shader. You can get faster start-up by invoking this method during
	 * your texture's network fetch for increased concurrency.
	 */ compileCubemapShader() {
        if (this._cubemapMaterial === null) {
            this._cubemapMaterial = _getCubemapMaterial();
            this._compileMaterial(this._cubemapMaterial);
        }
    }
    /**
	 * Pre-compiles the equirectangular shader. You can get faster start-up by invoking this method during
	 * your texture's network fetch for increased concurrency.
	 */ compileEquirectangularShader() {
        if (this._equirectMaterial === null) {
            this._equirectMaterial = _getEquirectMaterial();
            this._compileMaterial(this._equirectMaterial);
        }
    }
    /**
	 * Disposes of the PMREMGenerator's internal memory. Note that PMREMGenerator is a static class,
	 * so you should not need more than one PMREMGenerator object. If you do, calling dispose() on
	 * one of them will cause any others to also become unusable.
	 */ dispose() {
        this._dispose();
        if (this._cubemapMaterial !== null) this._cubemapMaterial.dispose();
        if (this._equirectMaterial !== null) this._equirectMaterial.dispose();
    }
    // private interface
    _setSize(cubeSize) {
        this._lodMax = Math.floor(Math.log2(cubeSize));
        this._cubeSize = Math.pow(2, this._lodMax);
    }
    _dispose() {
        if (this._blurMaterial !== null) this._blurMaterial.dispose();
        if (this._pingPongRenderTarget !== null) this._pingPongRenderTarget.dispose();
        for(let i = 0; i < this._lodPlanes.length; i++)this._lodPlanes[i].dispose();
    }
    _cleanup(outputTarget) {
        this._renderer.setRenderTarget(_oldTarget);
        outputTarget.scissorTest = false;
        _setViewport(outputTarget, 0, 0, outputTarget.width, outputTarget.height);
    }
    _fromTexture(texture, renderTarget) {
        if (texture.mapping === CubeReflectionMapping || texture.mapping === CubeRefractionMapping) this._setSize(texture.image.length === 0 ? 16 : texture.image[0].width || texture.image[0].image.width);
        else this._setSize(texture.image.width / 4);
        _oldTarget = this._renderer.getRenderTarget();
        const cubeUVRenderTarget = renderTarget || this._allocateTargets();
        this._textureToCubeUV(texture, cubeUVRenderTarget);
        this._applyPMREM(cubeUVRenderTarget);
        this._cleanup(cubeUVRenderTarget);
        return cubeUVRenderTarget;
    }
    _allocateTargets() {
        const width = 3 * Math.max(this._cubeSize, 112);
        const height = 4 * this._cubeSize;
        const params = {
            magFilter: LinearFilter,
            minFilter: LinearFilter,
            generateMipmaps: false,
            type: HalfFloatType,
            format: RGBAFormat,
            colorSpace: LinearSRGBColorSpace,
            depthBuffer: false
        };
        const cubeUVRenderTarget = _createRenderTarget(width, height, params);
        if (this._pingPongRenderTarget === null || this._pingPongRenderTarget.width !== width || this._pingPongRenderTarget.height !== height) {
            if (this._pingPongRenderTarget !== null) this._dispose();
            this._pingPongRenderTarget = _createRenderTarget(width, height, params);
            const { _lodMax } = this;
            ({ sizeLods: this._sizeLods, lodPlanes: this._lodPlanes, sigmas: this._sigmas } = _createPlanes(_lodMax));
            this._blurMaterial = _getBlurShader(_lodMax, width, height);
        }
        return cubeUVRenderTarget;
    }
    _compileMaterial(material) {
        const tmpMesh = new Mesh(this._lodPlanes[0], material);
        this._renderer.compile(tmpMesh, _flatCamera);
    }
    _sceneToCubeUV(scene, near, far, cubeUVRenderTarget) {
        const fov = 90;
        const aspect = 1;
        const cubeCamera = new PerspectiveCamera(fov, aspect, near, far);
        const upSign = [
            1,
            -1,
            1,
            1,
            1,
            1
        ];
        const forwardSign = [
            1,
            1,
            1,
            -1,
            -1,
            -1
        ];
        const renderer = this._renderer;
        const originalAutoClear = renderer.autoClear;
        const toneMapping = renderer.toneMapping;
        renderer.getClearColor(_clearColor);
        renderer.toneMapping = NoToneMapping;
        renderer.autoClear = false;
        const backgroundMaterial = new MeshBasicMaterial({
            name: "PMREM.Background",
            side: BackSide,
            depthWrite: false,
            depthTest: false
        });
        const backgroundBox = new Mesh(new BoxGeometry(), backgroundMaterial);
        let useSolidColor = false;
        const background = scene.background;
        if (background) {
            if (background.isColor) {
                backgroundMaterial.color.copy(background);
                scene.background = null;
                useSolidColor = true;
            }
        } else {
            backgroundMaterial.color.copy(_clearColor);
            useSolidColor = true;
        }
        for(let i = 0; i < 6; i++){
            const col = i % 3;
            if (col === 0) {
                cubeCamera.up.set(0, upSign[i], 0);
                cubeCamera.lookAt(forwardSign[i], 0, 0);
            } else if (col === 1) {
                cubeCamera.up.set(0, 0, upSign[i]);
                cubeCamera.lookAt(0, forwardSign[i], 0);
            } else {
                cubeCamera.up.set(0, upSign[i], 0);
                cubeCamera.lookAt(0, 0, forwardSign[i]);
            }
            const size = this._cubeSize;
            _setViewport(cubeUVRenderTarget, col * size, i > 2 ? size : 0, size, size);
            renderer.setRenderTarget(cubeUVRenderTarget);
            if (useSolidColor) renderer.render(backgroundBox, cubeCamera);
            renderer.render(scene, cubeCamera);
        }
        backgroundBox.geometry.dispose();
        backgroundBox.material.dispose();
        renderer.toneMapping = toneMapping;
        renderer.autoClear = originalAutoClear;
        scene.background = background;
    }
    _textureToCubeUV(texture, cubeUVRenderTarget) {
        const renderer = this._renderer;
        const isCubeTexture = texture.mapping === CubeReflectionMapping || texture.mapping === CubeRefractionMapping;
        if (isCubeTexture) {
            if (this._cubemapMaterial === null) this._cubemapMaterial = _getCubemapMaterial();
            this._cubemapMaterial.uniforms.flipEnvMap.value = texture.isRenderTargetTexture === false ? -1 : 1;
        } else if (this._equirectMaterial === null) this._equirectMaterial = _getEquirectMaterial();
        const material = isCubeTexture ? this._cubemapMaterial : this._equirectMaterial;
        const mesh = new Mesh(this._lodPlanes[0], material);
        const uniforms = material.uniforms;
        uniforms["envMap"].value = texture;
        const size = this._cubeSize;
        _setViewport(cubeUVRenderTarget, 0, 0, 3 * size, 2 * size);
        renderer.setRenderTarget(cubeUVRenderTarget);
        renderer.render(mesh, _flatCamera);
    }
    _applyPMREM(cubeUVRenderTarget) {
        const renderer = this._renderer;
        const autoClear = renderer.autoClear;
        renderer.autoClear = false;
        for(let i = 1; i < this._lodPlanes.length; i++){
            const sigma = Math.sqrt(this._sigmas[i] * this._sigmas[i] - this._sigmas[i - 1] * this._sigmas[i - 1]);
            const poleAxis = _axisDirections[(i - 1) % _axisDirections.length];
            this._blur(cubeUVRenderTarget, i - 1, i, sigma, poleAxis);
        }
        renderer.autoClear = autoClear;
    }
    /**
	 * This is a two-pass Gaussian blur for a cubemap. Normally this is done
	 * vertically and horizontally, but this breaks down on a cube. Here we apply
	 * the blur latitudinally (around the poles), and then longitudinally (towards
	 * the poles) to approximate the orthogonally-separable blur. It is least
	 * accurate at the poles, but still does a decent job.
	 */ _blur(cubeUVRenderTarget, lodIn, lodOut, sigma, poleAxis) {
        const pingPongRenderTarget = this._pingPongRenderTarget;
        this._halfBlur(cubeUVRenderTarget, pingPongRenderTarget, lodIn, lodOut, sigma, "latitudinal", poleAxis);
        this._halfBlur(pingPongRenderTarget, cubeUVRenderTarget, lodOut, lodOut, sigma, "longitudinal", poleAxis);
    }
    _halfBlur(targetIn, targetOut, lodIn, lodOut, sigmaRadians, direction, poleAxis) {
        const renderer = this._renderer;
        const blurMaterial = this._blurMaterial;
        if (direction !== "latitudinal" && direction !== "longitudinal") console.error("blur direction must be either latitudinal or longitudinal!");
        // Number of standard deviations at which to cut off the discrete approximation.
        const STANDARD_DEVIATIONS = 3;
        const blurMesh = new Mesh(this._lodPlanes[lodOut], blurMaterial);
        const blurUniforms = blurMaterial.uniforms;
        const pixels = this._sizeLods[lodIn] - 1;
        const radiansPerPixel = isFinite(sigmaRadians) ? Math.PI / (2 * pixels) : 2 * Math.PI / (2 * MAX_SAMPLES - 1);
        const sigmaPixels = sigmaRadians / radiansPerPixel;
        const samples = isFinite(sigmaRadians) ? 1 + Math.floor(STANDARD_DEVIATIONS * sigmaPixels) : MAX_SAMPLES;
        if (samples > MAX_SAMPLES) console.warn(`sigmaRadians, ${sigmaRadians}, is too large and will clip, as it requested ${samples} samples when the maximum is set to ${MAX_SAMPLES}`);
        const weights = [];
        let sum = 0;
        for(let i = 0; i < MAX_SAMPLES; ++i){
            const x = i / sigmaPixels;
            const weight = Math.exp(-x * x / 2);
            weights.push(weight);
            if (i === 0) sum += weight;
            else if (i < samples) sum += 2 * weight;
        }
        for(let i = 0; i < weights.length; i++)weights[i] = weights[i] / sum;
        blurUniforms["envMap"].value = targetIn.texture;
        blurUniforms["samples"].value = samples;
        blurUniforms["weights"].value = weights;
        blurUniforms["latitudinal"].value = direction === "latitudinal";
        if (poleAxis) blurUniforms["poleAxis"].value = poleAxis;
        const { _lodMax } = this;
        blurUniforms["dTheta"].value = radiansPerPixel;
        blurUniforms["mipInt"].value = _lodMax - lodIn;
        const outputSize = this._sizeLods[lodOut];
        const x = 3 * outputSize * (lodOut > _lodMax - LOD_MIN ? lodOut - _lodMax + LOD_MIN : 0);
        const y = 4 * (this._cubeSize - outputSize);
        _setViewport(targetOut, x, y, 3 * outputSize, 2 * outputSize);
        renderer.setRenderTarget(targetOut);
        renderer.render(blurMesh, _flatCamera);
    }
}
function _createPlanes(lodMax) {
    const lodPlanes = [];
    const sizeLods = [];
    const sigmas = [];
    let lod = lodMax;
    const totalLods = lodMax - LOD_MIN + 1 + EXTRA_LOD_SIGMA.length;
    for(let i = 0; i < totalLods; i++){
        const sizeLod = Math.pow(2, lod);
        sizeLods.push(sizeLod);
        let sigma = 1.0 / sizeLod;
        if (i > lodMax - LOD_MIN) sigma = EXTRA_LOD_SIGMA[i - lodMax + LOD_MIN - 1];
        else if (i === 0) sigma = 0;
        sigmas.push(sigma);
        const texelSize = 1.0 / (sizeLod - 2);
        const min = -texelSize;
        const max = 1 + texelSize;
        const uv1 = [
            min,
            min,
            max,
            min,
            max,
            max,
            min,
            min,
            max,
            max,
            min,
            max
        ];
        const cubeFaces = 6;
        const vertices = 6;
        const positionSize = 3;
        const uvSize = 2;
        const faceIndexSize = 1;
        const position = new Float32Array(positionSize * vertices * cubeFaces);
        const uv = new Float32Array(uvSize * vertices * cubeFaces);
        const faceIndex = new Float32Array(faceIndexSize * vertices * cubeFaces);
        for(let face = 0; face < cubeFaces; face++){
            const x = face % 3 * 2 / 3 - 1;
            const y = face > 2 ? 0 : -1;
            const coordinates = [
                x,
                y,
                0,
                x + 2 / 3,
                y,
                0,
                x + 2 / 3,
                y + 1,
                0,
                x,
                y,
                0,
                x + 2 / 3,
                y + 1,
                0,
                x,
                y + 1,
                0
            ];
            position.set(coordinates, positionSize * vertices * face);
            uv.set(uv1, uvSize * vertices * face);
            const fill = [
                face,
                face,
                face,
                face,
                face,
                face
            ];
            faceIndex.set(fill, faceIndexSize * vertices * face);
        }
        const planes = new BufferGeometry();
        planes.setAttribute("position", new BufferAttribute(position, positionSize));
        planes.setAttribute("uv", new BufferAttribute(uv, uvSize));
        planes.setAttribute("faceIndex", new BufferAttribute(faceIndex, faceIndexSize));
        lodPlanes.push(planes);
        if (lod > LOD_MIN) lod--;
    }
    return {
        lodPlanes,
        sizeLods,
        sigmas
    };
}
function _createRenderTarget(width, height, params) {
    const cubeUVRenderTarget = new WebGLRenderTarget(width, height, params);
    cubeUVRenderTarget.texture.mapping = CubeUVReflectionMapping;
    cubeUVRenderTarget.texture.name = "PMREM.cubeUv";
    cubeUVRenderTarget.scissorTest = true;
    return cubeUVRenderTarget;
}
function _setViewport(target, x, y, width, height) {
    target.viewport.set(x, y, width, height);
    target.scissor.set(x, y, width, height);
}
function _getBlurShader(lodMax, width, height) {
    const weights = new Float32Array(MAX_SAMPLES);
    const poleAxis = new Vector3(0, 1, 0);
    const shaderMaterial = new ShaderMaterial({
        name: "SphericalGaussianBlur",
        defines: {
            "n": MAX_SAMPLES,
            "CUBEUV_TEXEL_WIDTH": 1.0 / width,
            "CUBEUV_TEXEL_HEIGHT": 1.0 / height,
            "CUBEUV_MAX_MIP": `${lodMax}.0`
        },
        uniforms: {
            "envMap": {
                value: null
            },
            "samples": {
                value: 1
            },
            "weights": {
                value: weights
            },
            "latitudinal": {
                value: false
            },
            "dTheta": {
                value: 0
            },
            "mipInt": {
                value: 0
            },
            "poleAxis": {
                value: poleAxis
            }
        },
        vertexShader: _getCommonVertexShader(),
        fragmentShader: /* glsl */ `

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform int samples;
			uniform float weights[ n ];
			uniform bool latitudinal;
			uniform float dTheta;
			uniform float mipInt;
			uniform vec3 poleAxis;

			#define ENVMAP_TYPE_CUBE_UV
			#include <cube_uv_reflection_fragment>

			vec3 getSample( float theta, vec3 axis ) {

				float cosTheta = cos( theta );
				// Rodrigues' axis-angle rotation
				vec3 sampleDirection = vOutputDirection * cosTheta
					+ cross( axis, vOutputDirection ) * sin( theta )
					+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );

				return bilinearCubeUV( envMap, sampleDirection, mipInt );

			}

			void main() {

				vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );

				if ( all( equal( axis, vec3( 0.0 ) ) ) ) {

					axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );

				}

				axis = normalize( axis );

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );

				for ( int i = 1; i < n; i++ ) {

					if ( i >= samples ) {

						break;

					}

					float theta = dTheta * float( i );
					gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );
					gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );

				}

			}
		`,
        blending: NoBlending,
        depthTest: false,
        depthWrite: false
    });
    return shaderMaterial;
}
function _getEquirectMaterial() {
    return new ShaderMaterial({
        name: "EquirectangularToCubeUV",
        uniforms: {
            "envMap": {
                value: null
            }
        },
        vertexShader: _getCommonVertexShader(),
        fragmentShader: /* glsl */ `

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;

			#include <common>

			void main() {

				vec3 outputDirection = normalize( vOutputDirection );
				vec2 uv = equirectUv( outputDirection );

				gl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );

			}
		`,
        blending: NoBlending,
        depthTest: false,
        depthWrite: false
    });
}
function _getCubemapMaterial() {
    return new ShaderMaterial({
        name: "CubemapToCubeUV",
        uniforms: {
            "envMap": {
                value: null
            },
            "flipEnvMap": {
                value: -1
            }
        },
        vertexShader: _getCommonVertexShader(),
        fragmentShader: /* glsl */ `

			precision mediump float;
			precision mediump int;

			uniform float flipEnvMap;

			varying vec3 vOutputDirection;

			uniform samplerCube envMap;

			void main() {

				gl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );

			}
		`,
        blending: NoBlending,
        depthTest: false,
        depthWrite: false
    });
}
function _getCommonVertexShader() {
    return /* glsl */ `

		precision mediump float;
		precision mediump int;

		attribute float faceIndex;

		varying vec3 vOutputDirection;

		// RH coordinate system; PMREM face-indexing convention
		vec3 getDirection( vec2 uv, float face ) {

			uv = 2.0 * uv - 1.0;

			vec3 direction = vec3( uv, 1.0 );

			if ( face == 0.0 ) {

				direction = direction.zyx; // ( 1, v, u ) pos x

			} else if ( face == 1.0 ) {

				direction = direction.xzy;
				direction.xz *= -1.0; // ( -u, 1, -v ) pos y

			} else if ( face == 2.0 ) {

				direction.x *= -1.0; // ( -u, v, 1 ) pos z

			} else if ( face == 3.0 ) {

				direction = direction.zyx;
				direction.xz *= -1.0; // ( -1, v, -u ) neg x

			} else if ( face == 4.0 ) {

				direction = direction.xzy;
				direction.xy *= -1.0; // ( -u, -1, v ) neg y

			} else if ( face == 5.0 ) {

				direction.z *= -1.0; // ( u, v, -1 ) neg z

			}

			return direction;

		}

		void main() {

			vOutputDirection = getDirection( uv, faceIndex );
			gl_Position = vec4( position, 1.0 );

		}
	`;
}
function WebGLCubeUVMaps(renderer) {
    let cubeUVmaps = new WeakMap();
    let pmremGenerator = null;
    function get(texture) {
        if (texture && texture.isTexture) {
            const mapping = texture.mapping;
            const isEquirectMap = mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping;
            const isCubeMap = mapping === CubeReflectionMapping || mapping === CubeRefractionMapping;
            // equirect/cube map to cubeUV conversion
            if (isEquirectMap || isCubeMap) {
                if (texture.isRenderTargetTexture && texture.needsPMREMUpdate === true) {
                    texture.needsPMREMUpdate = false;
                    let renderTarget = cubeUVmaps.get(texture);
                    if (pmremGenerator === null) pmremGenerator = new PMREMGenerator(renderer);
                    renderTarget = isEquirectMap ? pmremGenerator.fromEquirectangular(texture, renderTarget) : pmremGenerator.fromCubemap(texture, renderTarget);
                    cubeUVmaps.set(texture, renderTarget);
                    return renderTarget.texture;
                } else {
                    if (cubeUVmaps.has(texture)) return cubeUVmaps.get(texture).texture;
                    else {
                        const image = texture.image;
                        if (isEquirectMap && image && image.height > 0 || isCubeMap && image && isCubeTextureComplete(image)) {
                            if (pmremGenerator === null) pmremGenerator = new PMREMGenerator(renderer);
                            const renderTarget = isEquirectMap ? pmremGenerator.fromEquirectangular(texture) : pmremGenerator.fromCubemap(texture);
                            cubeUVmaps.set(texture, renderTarget);
                            texture.addEventListener("dispose", onTextureDispose);
                            return renderTarget.texture;
                        } else // image not yet ready. try the conversion next frame
                        return null;
                    }
                }
            }
        }
        return texture;
    }
    function isCubeTextureComplete(image) {
        let count = 0;
        const length = 6;
        for(let i = 0; i < length; i++)if (image[i] !== undefined) count++;
        return count === length;
    }
    function onTextureDispose(event) {
        const texture = event.target;
        texture.removeEventListener("dispose", onTextureDispose);
        const cubemapUV = cubeUVmaps.get(texture);
        if (cubemapUV !== undefined) {
            cubeUVmaps.delete(texture);
            cubemapUV.dispose();
        }
    }
    function dispose() {
        cubeUVmaps = new WeakMap();
        if (pmremGenerator !== null) {
            pmremGenerator.dispose();
            pmremGenerator = null;
        }
    }
    return {
        get: get,
        dispose: dispose
    };
}
function WebGLExtensions(gl) {
    const extensions = {};
    function getExtension(name) {
        if (extensions[name] !== undefined) return extensions[name];
        let extension;
        switch(name){
            case "WEBGL_depth_texture":
                extension = gl.getExtension("WEBGL_depth_texture") || gl.getExtension("MOZ_WEBGL_depth_texture") || gl.getExtension("WEBKIT_WEBGL_depth_texture");
                break;
            case "EXT_texture_filter_anisotropic":
                extension = gl.getExtension("EXT_texture_filter_anisotropic") || gl.getExtension("MOZ_EXT_texture_filter_anisotropic") || gl.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
                break;
            case "WEBGL_compressed_texture_s3tc":
                extension = gl.getExtension("WEBGL_compressed_texture_s3tc") || gl.getExtension("MOZ_WEBGL_compressed_texture_s3tc") || gl.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");
                break;
            case "WEBGL_compressed_texture_pvrtc":
                extension = gl.getExtension("WEBGL_compressed_texture_pvrtc") || gl.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");
                break;
            default:
                extension = gl.getExtension(name);
        }
        extensions[name] = extension;
        return extension;
    }
    return {
        has: function(name) {
            return getExtension(name) !== null;
        },
        init: function(capabilities) {
            if (capabilities.isWebGL2) getExtension("EXT_color_buffer_float");
            else {
                getExtension("WEBGL_depth_texture");
                getExtension("OES_texture_float");
                getExtension("OES_texture_half_float");
                getExtension("OES_texture_half_float_linear");
                getExtension("OES_standard_derivatives");
                getExtension("OES_element_index_uint");
                getExtension("OES_vertex_array_object");
                getExtension("ANGLE_instanced_arrays");
            }
            getExtension("OES_texture_float_linear");
            getExtension("EXT_color_buffer_half_float");
            getExtension("WEBGL_multisampled_render_to_texture");
        },
        get: function(name) {
            const extension = getExtension(name);
            if (extension === null) console.warn("THREE.WebGLRenderer: " + name + " extension not supported.");
            return extension;
        }
    };
}
function WebGLGeometries(gl, attributes, info, bindingStates) {
    const geometries = {};
    const wireframeAttributes = new WeakMap();
    function onGeometryDispose(event) {
        const geometry = event.target;
        if (geometry.index !== null) attributes.remove(geometry.index);
        for(const name in geometry.attributes)attributes.remove(geometry.attributes[name]);
        for(const name in geometry.morphAttributes){
            const array = geometry.morphAttributes[name];
            for(let i = 0, l = array.length; i < l; i++)attributes.remove(array[i]);
        }
        geometry.removeEventListener("dispose", onGeometryDispose);
        delete geometries[geometry.id];
        const attribute = wireframeAttributes.get(geometry);
        if (attribute) {
            attributes.remove(attribute);
            wireframeAttributes.delete(geometry);
        }
        bindingStates.releaseStatesOfGeometry(geometry);
        if (geometry.isInstancedBufferGeometry === true) delete geometry._maxInstanceCount;
        //
        info.memory.geometries--;
    }
    function get(object, geometry) {
        if (geometries[geometry.id] === true) return geometry;
        geometry.addEventListener("dispose", onGeometryDispose);
        geometries[geometry.id] = true;
        info.memory.geometries++;
        return geometry;
    }
    function update(geometry) {
        const geometryAttributes = geometry.attributes;
        // Updating index buffer in VAO now. See WebGLBindingStates.
        for(const name in geometryAttributes)attributes.update(geometryAttributes[name], gl.ARRAY_BUFFER);
        // morph targets
        const morphAttributes = geometry.morphAttributes;
        for(const name in morphAttributes){
            const array = morphAttributes[name];
            for(let i = 0, l = array.length; i < l; i++)attributes.update(array[i], gl.ARRAY_BUFFER);
        }
    }
    function updateWireframeAttribute(geometry) {
        const indices = [];
        const geometryIndex = geometry.index;
        const geometryPosition = geometry.attributes.position;
        let version = 0;
        if (geometryIndex !== null) {
            const array = geometryIndex.array;
            version = geometryIndex.version;
            for(let i = 0, l = array.length; i < l; i += 3){
                const a = array[i + 0];
                const b = array[i + 1];
                const c = array[i + 2];
                indices.push(a, b, b, c, c, a);
            }
        } else if (geometryPosition !== undefined) {
            const array = geometryPosition.array;
            version = geometryPosition.version;
            for(let i = 0, l = array.length / 3 - 1; i < l; i += 3){
                const a = i + 0;
                const b = i + 1;
                const c = i + 2;
                indices.push(a, b, b, c, c, a);
            }
        } else return;
        const attribute = new (arrayNeedsUint32(indices) ? Uint32BufferAttribute : Uint16BufferAttribute)(indices, 1);
        attribute.version = version;
        // Updating index buffer in VAO now. See WebGLBindingStates
        //
        const previousAttribute = wireframeAttributes.get(geometry);
        if (previousAttribute) attributes.remove(previousAttribute);
        //
        wireframeAttributes.set(geometry, attribute);
    }
    function getWireframeAttribute(geometry) {
        const currentAttribute = wireframeAttributes.get(geometry);
        if (currentAttribute) {
            const geometryIndex = geometry.index;
            if (geometryIndex !== null) // if the attribute is obsolete, create a new one
            {
                if (currentAttribute.version < geometryIndex.version) updateWireframeAttribute(geometry);
            }
        } else updateWireframeAttribute(geometry);
        return wireframeAttributes.get(geometry);
    }
    return {
        get: get,
        update: update,
        getWireframeAttribute: getWireframeAttribute
    };
}
function WebGLIndexedBufferRenderer(gl, extensions, info, capabilities) {
    const isWebGL2 = capabilities.isWebGL2;
    let mode;
    function setMode(value) {
        mode = value;
    }
    let type, bytesPerElement;
    function setIndex(value) {
        type = value.type;
        bytesPerElement = value.bytesPerElement;
    }
    function render(start, count) {
        gl.drawElements(mode, count, type, start * bytesPerElement);
        info.update(count, mode, 1);
    }
    function renderInstances(start, count, primcount) {
        if (primcount === 0) return;
        let extension, methodName;
        if (isWebGL2) {
            extension = gl;
            methodName = "drawElementsInstanced";
        } else {
            extension = extensions.get("ANGLE_instanced_arrays");
            methodName = "drawElementsInstancedANGLE";
            if (extension === null) {
                console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");
                return;
            }
        }
        extension[methodName](mode, count, type, start * bytesPerElement, primcount);
        info.update(count, mode, primcount);
    }
    //
    this.setMode = setMode;
    this.setIndex = setIndex;
    this.render = render;
    this.renderInstances = renderInstances;
}
function WebGLInfo(gl) {
    const memory = {
        geometries: 0,
        textures: 0
    };
    const render = {
        frame: 0,
        calls: 0,
        triangles: 0,
        points: 0,
        lines: 0
    };
    function update(count, mode, instanceCount) {
        render.calls++;
        switch(mode){
            case gl.TRIANGLES:
                render.triangles += instanceCount * (count / 3);
                break;
            case gl.LINES:
                render.lines += instanceCount * (count / 2);
                break;
            case gl.LINE_STRIP:
                render.lines += instanceCount * (count - 1);
                break;
            case gl.LINE_LOOP:
                render.lines += instanceCount * count;
                break;
            case gl.POINTS:
                render.points += instanceCount * count;
                break;
            default:
                console.error("THREE.WebGLInfo: Unknown draw mode:", mode);
                break;
        }
    }
    function reset() {
        render.calls = 0;
        render.triangles = 0;
        render.points = 0;
        render.lines = 0;
    }
    return {
        memory: memory,
        render: render,
        programs: null,
        autoReset: true,
        reset: reset,
        update: update
    };
}
function numericalSort(a, b) {
    return a[0] - b[0];
}
function absNumericalSort(a, b) {
    return Math.abs(b[1]) - Math.abs(a[1]);
}
function WebGLMorphtargets(gl, capabilities, textures) {
    const influencesList = {};
    const morphInfluences = new Float32Array(8);
    const morphTextures = new WeakMap();
    const morph = new Vector4();
    const workInfluences = [];
    for(let i = 0; i < 8; i++)workInfluences[i] = [
        i,
        0
    ];
    function update(object, geometry, program) {
        const objectInfluences = object.morphTargetInfluences;
        if (capabilities.isWebGL2 === true) {
            // instead of using attributes, the WebGL 2 code path encodes morph targets
            // into an array of data textures. Each layer represents a single morph target.
            const morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;
            const morphTargetsCount = morphAttribute !== undefined ? morphAttribute.length : 0;
            let entry = morphTextures.get(geometry);
            if (entry === undefined || entry.count !== morphTargetsCount) {
                if (entry !== undefined) entry.texture.dispose();
                const hasMorphPosition = geometry.morphAttributes.position !== undefined;
                const hasMorphNormals = geometry.morphAttributes.normal !== undefined;
                const hasMorphColors = geometry.morphAttributes.color !== undefined;
                const morphTargets = geometry.morphAttributes.position || [];
                const morphNormals = geometry.morphAttributes.normal || [];
                const morphColors = geometry.morphAttributes.color || [];
                let vertexDataCount = 0;
                if (hasMorphPosition === true) vertexDataCount = 1;
                if (hasMorphNormals === true) vertexDataCount = 2;
                if (hasMorphColors === true) vertexDataCount = 3;
                let width = geometry.attributes.position.count * vertexDataCount;
                let height = 1;
                if (width > capabilities.maxTextureSize) {
                    height = Math.ceil(width / capabilities.maxTextureSize);
                    width = capabilities.maxTextureSize;
                }
                const buffer = new Float32Array(width * height * 4 * morphTargetsCount);
                const texture = new DataArrayTexture(buffer, width, height, morphTargetsCount);
                texture.type = FloatType;
                texture.needsUpdate = true;
                // fill buffer
                const vertexDataStride = vertexDataCount * 4;
                for(let i = 0; i < morphTargetsCount; i++){
                    const morphTarget = morphTargets[i];
                    const morphNormal = morphNormals[i];
                    const morphColor = morphColors[i];
                    const offset = width * height * 4 * i;
                    for(let j = 0; j < morphTarget.count; j++){
                        const stride = j * vertexDataStride;
                        if (hasMorphPosition === true) {
                            morph.fromBufferAttribute(morphTarget, j);
                            buffer[offset + stride + 0] = morph.x;
                            buffer[offset + stride + 1] = morph.y;
                            buffer[offset + stride + 2] = morph.z;
                            buffer[offset + stride + 3] = 0;
                        }
                        if (hasMorphNormals === true) {
                            morph.fromBufferAttribute(morphNormal, j);
                            buffer[offset + stride + 4] = morph.x;
                            buffer[offset + stride + 5] = morph.y;
                            buffer[offset + stride + 6] = morph.z;
                            buffer[offset + stride + 7] = 0;
                        }
                        if (hasMorphColors === true) {
                            morph.fromBufferAttribute(morphColor, j);
                            buffer[offset + stride + 8] = morph.x;
                            buffer[offset + stride + 9] = morph.y;
                            buffer[offset + stride + 10] = morph.z;
                            buffer[offset + stride + 11] = morphColor.itemSize === 4 ? morph.w : 1;
                        }
                    }
                }
                entry = {
                    count: morphTargetsCount,
                    texture: texture,
                    size: new Vector2(width, height)
                };
                morphTextures.set(geometry, entry);
                function disposeTexture() {
                    texture.dispose();
                    morphTextures.delete(geometry);
                    geometry.removeEventListener("dispose", disposeTexture);
                }
                geometry.addEventListener("dispose", disposeTexture);
            }
            //
            let morphInfluencesSum = 0;
            for(let i = 0; i < objectInfluences.length; i++)morphInfluencesSum += objectInfluences[i];
            const morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;
            program.getUniforms().setValue(gl, "morphTargetBaseInfluence", morphBaseInfluence);
            program.getUniforms().setValue(gl, "morphTargetInfluences", objectInfluences);
            program.getUniforms().setValue(gl, "morphTargetsTexture", entry.texture, textures);
            program.getUniforms().setValue(gl, "morphTargetsTextureSize", entry.size);
        } else {
            // When object doesn't have morph target influences defined, we treat it as a 0-length array
            // This is important to make sure we set up morphTargetBaseInfluence / morphTargetInfluences
            const length = objectInfluences === undefined ? 0 : objectInfluences.length;
            let influences = influencesList[geometry.id];
            if (influences === undefined || influences.length !== length) {
                // initialise list
                influences = [];
                for(let i = 0; i < length; i++)influences[i] = [
                    i,
                    0
                ];
                influencesList[geometry.id] = influences;
            }
            // Collect influences
            for(let i = 0; i < length; i++){
                const influence = influences[i];
                influence[0] = i;
                influence[1] = objectInfluences[i];
            }
            influences.sort(absNumericalSort);
            for(let i = 0; i < 8; i++)if (i < length && influences[i][1]) {
                workInfluences[i][0] = influences[i][0];
                workInfluences[i][1] = influences[i][1];
            } else {
                workInfluences[i][0] = Number.MAX_SAFE_INTEGER;
                workInfluences[i][1] = 0;
            }
            workInfluences.sort(numericalSort);
            const morphTargets = geometry.morphAttributes.position;
            const morphNormals = geometry.morphAttributes.normal;
            let morphInfluencesSum = 0;
            for(let i = 0; i < 8; i++){
                const influence = workInfluences[i];
                const index = influence[0];
                const value = influence[1];
                if (index !== Number.MAX_SAFE_INTEGER && value) {
                    if (morphTargets && geometry.getAttribute("morphTarget" + i) !== morphTargets[index]) geometry.setAttribute("morphTarget" + i, morphTargets[index]);
                    if (morphNormals && geometry.getAttribute("morphNormal" + i) !== morphNormals[index]) geometry.setAttribute("morphNormal" + i, morphNormals[index]);
                    morphInfluences[i] = value;
                    morphInfluencesSum += value;
                } else {
                    if (morphTargets && geometry.hasAttribute("morphTarget" + i) === true) geometry.deleteAttribute("morphTarget" + i);
                    if (morphNormals && geometry.hasAttribute("morphNormal" + i) === true) geometry.deleteAttribute("morphNormal" + i);
                    morphInfluences[i] = 0;
                }
            }
            // GLSL shader uses formula baseinfluence * base + sum(target * influence)
            // This allows us to switch between absolute morphs and relative morphs without changing shader code
            // When baseinfluence = 1 - sum(influence), the above is equivalent to sum((target - base) * influence)
            const morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;
            program.getUniforms().setValue(gl, "morphTargetBaseInfluence", morphBaseInfluence);
            program.getUniforms().setValue(gl, "morphTargetInfluences", morphInfluences);
        }
    }
    return {
        update: update
    };
}
function WebGLObjects(gl, geometries, attributes, info) {
    let updateMap = new WeakMap();
    function update(object) {
        const frame = info.render.frame;
        const geometry = object.geometry;
        const buffergeometry = geometries.get(object, geometry);
        // Update once per frame
        if (updateMap.get(buffergeometry) !== frame) {
            geometries.update(buffergeometry);
            updateMap.set(buffergeometry, frame);
        }
        if (object.isInstancedMesh) {
            if (object.hasEventListener("dispose", onInstancedMeshDispose) === false) object.addEventListener("dispose", onInstancedMeshDispose);
            if (updateMap.get(object) !== frame) {
                attributes.update(object.instanceMatrix, gl.ARRAY_BUFFER);
                if (object.instanceColor !== null) attributes.update(object.instanceColor, gl.ARRAY_BUFFER);
                updateMap.set(object, frame);
            }
        }
        if (object.isSkinnedMesh) {
            const skeleton = object.skeleton;
            if (updateMap.get(skeleton) !== frame) {
                skeleton.update();
                updateMap.set(skeleton, frame);
            }
        }
        return buffergeometry;
    }
    function dispose() {
        updateMap = new WeakMap();
    }
    function onInstancedMeshDispose(event) {
        const instancedMesh = event.target;
        instancedMesh.removeEventListener("dispose", onInstancedMeshDispose);
        attributes.remove(instancedMesh.instanceMatrix);
        if (instancedMesh.instanceColor !== null) attributes.remove(instancedMesh.instanceColor);
    }
    return {
        update: update,
        dispose: dispose
    };
}
/**
 * Uniforms of a program.
 * Those form a tree structure with a special top-level container for the root,
 * which you get by calling 'new WebGLUniforms( gl, program )'.
 *
 *
 * Properties of inner nodes including the top-level container:
 *
 * .seq - array of nested uniforms
 * .map - nested uniforms by name
 *
 *
 * Methods of all nodes except the top-level container:
 *
 * .setValue( gl, value, [textures] )
 *
 * 		uploads a uniform value(s)
 *  	the 'textures' parameter is needed for sampler uniforms
 *
 *
 * Static methods of the top-level container (textures factorizations):
 *
 * .upload( gl, seq, values, textures )
 *
 * 		sets uniforms in 'seq' to 'values[id].value'
 *
 * .seqWithValue( seq, values ) : filteredSeq
 *
 * 		filters 'seq' entries with corresponding entry in values
 *
 *
 * Methods of the top-level container (textures factorizations):
 *
 * .setValue( gl, name, value, textures )
 *
 * 		sets uniform with  name 'name' to 'value'
 *
 * .setOptional( gl, obj, prop )
 *
 * 		like .set for an optional property of the object
 *
 */ const emptyTexture = /*@__PURE__*/ new Texture();
const emptyArrayTexture = /*@__PURE__*/ new DataArrayTexture();
const empty3dTexture = /*@__PURE__*/ new Data3DTexture();
const emptyCubeTexture = /*@__PURE__*/ new CubeTexture();
// --- Utilities ---
// Array Caches (provide typed arrays for temporary by size)
const arrayCacheF32 = [];
const arrayCacheI32 = [];
// Float32Array caches used for uploading Matrix uniforms
const mat4array = new Float32Array(16);
const mat3array = new Float32Array(9);
const mat2array = new Float32Array(4);
// Flattening for arrays of vectors and matrices
function flatten(array, nBlocks, blockSize) {
    const firstElem = array[0];
    if (firstElem <= 0 || firstElem > 0) return array;
    // unoptimized: ! isNaN( firstElem )
    // see http://jacksondunstan.com/articles/983
    const n = nBlocks * blockSize;
    let r = arrayCacheF32[n];
    if (r === undefined) {
        r = new Float32Array(n);
        arrayCacheF32[n] = r;
    }
    if (nBlocks !== 0) {
        firstElem.toArray(r, 0);
        for(let i = 1, offset = 0; i !== nBlocks; ++i){
            offset += blockSize;
            array[i].toArray(r, offset);
        }
    }
    return r;
}
function arraysEqual(a, b) {
    if (a.length !== b.length) return false;
    for(let i = 0, l = a.length; i < l; i++){
        if (a[i] !== b[i]) return false;
    }
    return true;
}
function copyArray(a, b) {
    for(let i = 0, l = b.length; i < l; i++)a[i] = b[i];
}
// Texture unit allocation
function allocTexUnits(textures, n) {
    let r = arrayCacheI32[n];
    if (r === undefined) {
        r = new Int32Array(n);
        arrayCacheI32[n] = r;
    }
    for(let i = 0; i !== n; ++i)r[i] = textures.allocateTextureUnit();
    return r;
}
// --- Setters ---
// Note: Defining these methods externally, because they come in a bunch
// and this way their names minify.
// Single scalar
function setValueV1f(gl, v) {
    const cache = this.cache;
    if (cache[0] === v) return;
    gl.uniform1f(this.addr, v);
    cache[0] = v;
}
// Single float vector (from flat array or THREE.VectorN)
function setValueV2f(gl, v) {
    const cache = this.cache;
    if (v.x !== undefined) {
        if (cache[0] !== v.x || cache[1] !== v.y) {
            gl.uniform2f(this.addr, v.x, v.y);
            cache[0] = v.x;
            cache[1] = v.y;
        }
    } else {
        if (arraysEqual(cache, v)) return;
        gl.uniform2fv(this.addr, v);
        copyArray(cache, v);
    }
}
function setValueV3f(gl, v) {
    const cache = this.cache;
    if (v.x !== undefined) {
        if (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z) {
            gl.uniform3f(this.addr, v.x, v.y, v.z);
            cache[0] = v.x;
            cache[1] = v.y;
            cache[2] = v.z;
        }
    } else if (v.r !== undefined) {
        if (cache[0] !== v.r || cache[1] !== v.g || cache[2] !== v.b) {
            gl.uniform3f(this.addr, v.r, v.g, v.b);
            cache[0] = v.r;
            cache[1] = v.g;
            cache[2] = v.b;
        }
    } else {
        if (arraysEqual(cache, v)) return;
        gl.uniform3fv(this.addr, v);
        copyArray(cache, v);
    }
}
function setValueV4f(gl, v) {
    const cache = this.cache;
    if (v.x !== undefined) {
        if (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z || cache[3] !== v.w) {
            gl.uniform4f(this.addr, v.x, v.y, v.z, v.w);
            cache[0] = v.x;
            cache[1] = v.y;
            cache[2] = v.z;
            cache[3] = v.w;
        }
    } else {
        if (arraysEqual(cache, v)) return;
        gl.uniform4fv(this.addr, v);
        copyArray(cache, v);
    }
}
// Single matrix (from flat array or THREE.MatrixN)
function setValueM2(gl, v) {
    const cache = this.cache;
    const elements = v.elements;
    if (elements === undefined) {
        if (arraysEqual(cache, v)) return;
        gl.uniformMatrix2fv(this.addr, false, v);
        copyArray(cache, v);
    } else {
        if (arraysEqual(cache, elements)) return;
        mat2array.set(elements);
        gl.uniformMatrix2fv(this.addr, false, mat2array);
        copyArray(cache, elements);
    }
}
function setValueM3(gl, v) {
    const cache = this.cache;
    const elements = v.elements;
    if (elements === undefined) {
        if (arraysEqual(cache, v)) return;
        gl.uniformMatrix3fv(this.addr, false, v);
        copyArray(cache, v);
    } else {
        if (arraysEqual(cache, elements)) return;
        mat3array.set(elements);
        gl.uniformMatrix3fv(this.addr, false, mat3array);
        copyArray(cache, elements);
    }
}
function setValueM4(gl, v) {
    const cache = this.cache;
    const elements = v.elements;
    if (elements === undefined) {
        if (arraysEqual(cache, v)) return;
        gl.uniformMatrix4fv(this.addr, false, v);
        copyArray(cache, v);
    } else {
        if (arraysEqual(cache, elements)) return;
        mat4array.set(elements);
        gl.uniformMatrix4fv(this.addr, false, mat4array);
        copyArray(cache, elements);
    }
}
// Single integer / boolean
function setValueV1i(gl, v) {
    const cache = this.cache;
    if (cache[0] === v) return;
    gl.uniform1i(this.addr, v);
    cache[0] = v;
}
// Single integer / boolean vector (from flat array or THREE.VectorN)
function setValueV2i(gl, v) {
    const cache = this.cache;
    if (v.x !== undefined) {
        if (cache[0] !== v.x || cache[1] !== v.y) {
            gl.uniform2i(this.addr, v.x, v.y);
            cache[0] = v.x;
            cache[1] = v.y;
        }
    } else {
        if (arraysEqual(cache, v)) return;
        gl.uniform2iv(this.addr, v);
        copyArray(cache, v);
    }
}
function setValueV3i(gl, v) {
    const cache = this.cache;
    if (v.x !== undefined) {
        if (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z) {
            gl.uniform3i(this.addr, v.x, v.y, v.z);
            cache[0] = v.x;
            cache[1] = v.y;
            cache[2] = v.z;
        }
    } else {
        if (arraysEqual(cache, v)) return;
        gl.uniform3iv(this.addr, v);
        copyArray(cache, v);
    }
}
function setValueV4i(gl, v) {
    const cache = this.cache;
    if (v.x !== undefined) {
        if (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z || cache[3] !== v.w) {
            gl.uniform4i(this.addr, v.x, v.y, v.z, v.w);
            cache[0] = v.x;
            cache[1] = v.y;
            cache[2] = v.z;
            cache[3] = v.w;
        }
    } else {
        if (arraysEqual(cache, v)) return;
        gl.uniform4iv(this.addr, v);
        copyArray(cache, v);
    }
}
// Single unsigned integer
function setValueV1ui(gl, v) {
    const cache = this.cache;
    if (cache[0] === v) return;
    gl.uniform1ui(this.addr, v);
    cache[0] = v;
}
// Single unsigned integer vector (from flat array or THREE.VectorN)
function setValueV2ui(gl, v) {
    const cache = this.cache;
    if (v.x !== undefined) {
        if (cache[0] !== v.x || cache[1] !== v.y) {
            gl.uniform2ui(this.addr, v.x, v.y);
            cache[0] = v.x;
            cache[1] = v.y;
        }
    } else {
        if (arraysEqual(cache, v)) return;
        gl.uniform2uiv(this.addr, v);
        copyArray(cache, v);
    }
}
function setValueV3ui(gl, v) {
    const cache = this.cache;
    if (v.x !== undefined) {
        if (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z) {
            gl.uniform3ui(this.addr, v.x, v.y, v.z);
            cache[0] = v.x;
            cache[1] = v.y;
            cache[2] = v.z;
        }
    } else {
        if (arraysEqual(cache, v)) return;
        gl.uniform3uiv(this.addr, v);
        copyArray(cache, v);
    }
}
function setValueV4ui(gl, v) {
    const cache = this.cache;
    if (v.x !== undefined) {
        if (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z || cache[3] !== v.w) {
            gl.uniform4ui(this.addr, v.x, v.y, v.z, v.w);
            cache[0] = v.x;
            cache[1] = v.y;
            cache[2] = v.z;
            cache[3] = v.w;
        }
    } else {
        if (arraysEqual(cache, v)) return;
        gl.uniform4uiv(this.addr, v);
        copyArray(cache, v);
    }
}
// Single texture (2D / Cube)
function setValueT1(gl, v, textures) {
    const cache = this.cache;
    const unit = textures.allocateTextureUnit();
    if (cache[0] !== unit) {
        gl.uniform1i(this.addr, unit);
        cache[0] = unit;
    }
    textures.setTexture2D(v || emptyTexture, unit);
}
function setValueT3D1(gl, v, textures) {
    const cache = this.cache;
    const unit = textures.allocateTextureUnit();
    if (cache[0] !== unit) {
        gl.uniform1i(this.addr, unit);
        cache[0] = unit;
    }
    textures.setTexture3D(v || empty3dTexture, unit);
}
function setValueT6(gl, v, textures) {
    const cache = this.cache;
    const unit = textures.allocateTextureUnit();
    if (cache[0] !== unit) {
        gl.uniform1i(this.addr, unit);
        cache[0] = unit;
    }
    textures.setTextureCube(v || emptyCubeTexture, unit);
}
function setValueT2DArray1(gl, v, textures) {
    const cache = this.cache;
    const unit = textures.allocateTextureUnit();
    if (cache[0] !== unit) {
        gl.uniform1i(this.addr, unit);
        cache[0] = unit;
    }
    textures.setTexture2DArray(v || emptyArrayTexture, unit);
}
// Helper to pick the right setter for the singular case
function getSingularSetter(type) {
    switch(type){
        case 0x1406:
            return setValueV1f; // FLOAT
        case 0x8b50:
            return setValueV2f; // _VEC2
        case 0x8b51:
            return setValueV3f; // _VEC3
        case 0x8b52:
            return setValueV4f; // _VEC4
        case 0x8b5a:
            return setValueM2; // _MAT2
        case 0x8b5b:
            return setValueM3; // _MAT3
        case 0x8b5c:
            return setValueM4; // _MAT4
        case 0x1404:
        case 0x8b56:
            return setValueV1i; // INT, BOOL
        case 0x8b53:
        case 0x8b57:
            return setValueV2i; // _VEC2
        case 0x8b54:
        case 0x8b58:
            return setValueV3i; // _VEC3
        case 0x8b55:
        case 0x8b59:
            return setValueV4i; // _VEC4
        case 0x1405:
            return setValueV1ui; // UINT
        case 0x8dc6:
            return setValueV2ui; // _VEC2
        case 0x8dc7:
            return setValueV3ui; // _VEC3
        case 0x8dc8:
            return setValueV4ui; // _VEC4
        case 0x8b5e:
        case 0x8d66:
        case 0x8dca:
        case 0x8dd2:
        case 0x8b62:
            return setValueT1;
        case 0x8b5f:
        case 0x8dcb:
        case 0x8dd3:
            return setValueT3D1;
        case 0x8b60:
        case 0x8dcc:
        case 0x8dd4:
        case 0x8dc5:
            return setValueT6;
        case 0x8dc1:
        case 0x8dcf:
        case 0x8dd7:
        case 0x8dc4:
            return setValueT2DArray1;
    }
}
// Array of scalars
function setValueV1fArray(gl, v) {
    gl.uniform1fv(this.addr, v);
}
// Array of vectors (from flat array or array of THREE.VectorN)
function setValueV2fArray(gl, v) {
    const data = flatten(v, this.size, 2);
    gl.uniform2fv(this.addr, data);
}
function setValueV3fArray(gl, v) {
    const data = flatten(v, this.size, 3);
    gl.uniform3fv(this.addr, data);
}
function setValueV4fArray(gl, v) {
    const data = flatten(v, this.size, 4);
    gl.uniform4fv(this.addr, data);
}
// Array of matrices (from flat array or array of THREE.MatrixN)
function setValueM2Array(gl, v) {
    const data = flatten(v, this.size, 4);
    gl.uniformMatrix2fv(this.addr, false, data);
}
function setValueM3Array(gl, v) {
    const data = flatten(v, this.size, 9);
    gl.uniformMatrix3fv(this.addr, false, data);
}
function setValueM4Array(gl, v) {
    const data = flatten(v, this.size, 16);
    gl.uniformMatrix4fv(this.addr, false, data);
}
// Array of integer / boolean
function setValueV1iArray(gl, v) {
    gl.uniform1iv(this.addr, v);
}
// Array of integer / boolean vectors (from flat array)
function setValueV2iArray(gl, v) {
    gl.uniform2iv(this.addr, v);
}
function setValueV3iArray(gl, v) {
    gl.uniform3iv(this.addr, v);
}
function setValueV4iArray(gl, v) {
    gl.uniform4iv(this.addr, v);
}
// Array of unsigned integer
function setValueV1uiArray(gl, v) {
    gl.uniform1uiv(this.addr, v);
}
// Array of unsigned integer vectors (from flat array)
function setValueV2uiArray(gl, v) {
    gl.uniform2uiv(this.addr, v);
}
function setValueV3uiArray(gl, v) {
    gl.uniform3uiv(this.addr, v);
}
function setValueV4uiArray(gl, v) {
    gl.uniform4uiv(this.addr, v);
}
// Array of textures (2D / 3D / Cube / 2DArray)
function setValueT1Array(gl, v, textures) {
    const cache = this.cache;
    const n = v.length;
    const units = allocTexUnits(textures, n);
    if (!arraysEqual(cache, units)) {
        gl.uniform1iv(this.addr, units);
        copyArray(cache, units);
    }
    for(let i = 0; i !== n; ++i)textures.setTexture2D(v[i] || emptyTexture, units[i]);
}
function setValueT3DArray(gl, v, textures) {
    const cache = this.cache;
    const n = v.length;
    const units = allocTexUnits(textures, n);
    if (!arraysEqual(cache, units)) {
        gl.uniform1iv(this.addr, units);
        copyArray(cache, units);
    }
    for(let i = 0; i !== n; ++i)textures.setTexture3D(v[i] || empty3dTexture, units[i]);
}
function setValueT6Array(gl, v, textures) {
    const cache = this.cache;
    const n = v.length;
    const units = allocTexUnits(textures, n);
    if (!arraysEqual(cache, units)) {
        gl.uniform1iv(this.addr, units);
        copyArray(cache, units);
    }
    for(let i = 0; i !== n; ++i)textures.setTextureCube(v[i] || emptyCubeTexture, units[i]);
}
function setValueT2DArrayArray(gl, v, textures) {
    const cache = this.cache;
    const n = v.length;
    const units = allocTexUnits(textures, n);
    if (!arraysEqual(cache, units)) {
        gl.uniform1iv(this.addr, units);
        copyArray(cache, units);
    }
    for(let i = 0; i !== n; ++i)textures.setTexture2DArray(v[i] || emptyArrayTexture, units[i]);
}
// Helper to pick the right setter for a pure (bottom-level) array
function getPureArraySetter(type) {
    switch(type){
        case 0x1406:
            return setValueV1fArray; // FLOAT
        case 0x8b50:
            return setValueV2fArray; // _VEC2
        case 0x8b51:
            return setValueV3fArray; // _VEC3
        case 0x8b52:
            return setValueV4fArray; // _VEC4
        case 0x8b5a:
            return setValueM2Array; // _MAT2
        case 0x8b5b:
            return setValueM3Array; // _MAT3
        case 0x8b5c:
            return setValueM4Array; // _MAT4
        case 0x1404:
        case 0x8b56:
            return setValueV1iArray; // INT, BOOL
        case 0x8b53:
        case 0x8b57:
            return setValueV2iArray; // _VEC2
        case 0x8b54:
        case 0x8b58:
            return setValueV3iArray; // _VEC3
        case 0x8b55:
        case 0x8b59:
            return setValueV4iArray; // _VEC4
        case 0x1405:
            return setValueV1uiArray; // UINT
        case 0x8dc6:
            return setValueV2uiArray; // _VEC2
        case 0x8dc7:
            return setValueV3uiArray; // _VEC3
        case 0x8dc8:
            return setValueV4uiArray; // _VEC4
        case 0x8b5e:
        case 0x8d66:
        case 0x8dca:
        case 0x8dd2:
        case 0x8b62:
            return setValueT1Array;
        case 0x8b5f:
        case 0x8dcb:
        case 0x8dd3:
            return setValueT3DArray;
        case 0x8b60:
        case 0x8dcc:
        case 0x8dd4:
        case 0x8dc5:
            return setValueT6Array;
        case 0x8dc1:
        case 0x8dcf:
        case 0x8dd7:
        case 0x8dc4:
            return setValueT2DArrayArray;
    }
}
// --- Uniform Classes ---
class SingleUniform {
    constructor(id, activeInfo, addr){
        this.id = id;
        this.addr = addr;
        this.cache = [];
        this.setValue = getSingularSetter(activeInfo.type);
    // this.path = activeInfo.name; // DEBUG
    }
}
class PureArrayUniform {
    constructor(id, activeInfo, addr){
        this.id = id;
        this.addr = addr;
        this.cache = [];
        this.size = activeInfo.size;
        this.setValue = getPureArraySetter(activeInfo.type);
    // this.path = activeInfo.name; // DEBUG
    }
}
class StructuredUniform {
    constructor(id){
        this.id = id;
        this.seq = [];
        this.map = {};
    }
    setValue(gl, value, textures) {
        const seq = this.seq;
        for(let i = 0, n = seq.length; i !== n; ++i){
            const u = seq[i];
            u.setValue(gl, value[u.id], textures);
        }
    }
}
// --- Top-level ---
// Parser - builds up the property tree from the path strings
const RePathPart = /(\w+)(\])?(\[|\.)?/g;
// extracts
// 	- the identifier (member name or array index)
//  - followed by an optional right bracket (found when array index)
//  - followed by an optional left bracket or dot (type of subscript)
//
// Note: These portions can be read in a non-overlapping fashion and
// allow straightforward parsing of the hierarchy that WebGL encodes
// in the uniform names.
function addUniform(container, uniformObject) {
    container.seq.push(uniformObject);
    container.map[uniformObject.id] = uniformObject;
}
function parseUniform(activeInfo, addr, container) {
    const path = activeInfo.name, pathLength = path.length;
    // reset RegExp object, because of the early exit of a previous run
    RePathPart.lastIndex = 0;
    while(true){
        const match = RePathPart.exec(path), matchEnd = RePathPart.lastIndex;
        let id = match[1];
        const idIsIndex = match[2] === "]", subscript = match[3];
        if (idIsIndex) id = id | 0; // convert to integer
        if (subscript === undefined || subscript === "[" && matchEnd + 2 === pathLength) {
            // bare name or "pure" bottom-level array "[0]" suffix
            addUniform(container, subscript === undefined ? new SingleUniform(id, activeInfo, addr) : new PureArrayUniform(id, activeInfo, addr));
            break;
        } else {
            // step into inner node / create it in case it doesn't exist
            const map = container.map;
            let next = map[id];
            if (next === undefined) {
                next = new StructuredUniform(id);
                addUniform(container, next);
            }
            container = next;
        }
    }
}
// Root Container
class WebGLUniforms {
    constructor(gl, program){
        this.seq = [];
        this.map = {};
        const n = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);
        for(let i = 0; i < n; ++i){
            const info = gl.getActiveUniform(program, i), addr = gl.getUniformLocation(program, info.name);
            parseUniform(info, addr, this);
        }
    }
    setValue(gl, name, value, textures) {
        const u = this.map[name];
        if (u !== undefined) u.setValue(gl, value, textures);
    }
    setOptional(gl, object, name) {
        const v = object[name];
        if (v !== undefined) this.setValue(gl, name, v);
    }
    static upload(gl, seq, values, textures) {
        for(let i = 0, n = seq.length; i !== n; ++i){
            const u = seq[i], v = values[u.id];
            if (v.needsUpdate !== false) // note: always updating when .needsUpdate is undefined
            u.setValue(gl, v.value, textures);
        }
    }
    static seqWithValue(seq, values) {
        const r = [];
        for(let i = 0, n = seq.length; i !== n; ++i){
            const u = seq[i];
            if (u.id in values) r.push(u);
        }
        return r;
    }
}
function WebGLShader(gl, type, string) {
    const shader = gl.createShader(type);
    gl.shaderSource(shader, string);
    gl.compileShader(shader);
    return shader;
}
let programIdCount = 0;
function handleSource(string, errorLine) {
    const lines = string.split("\n");
    const lines2 = [];
    const from = Math.max(errorLine - 6, 0);
    const to = Math.min(errorLine + 6, lines.length);
    for(let i = from; i < to; i++){
        const line = i + 1;
        lines2.push(`${line === errorLine ? ">" : " "} ${line}: ${lines[i]}`);
    }
    return lines2.join("\n");
}
function getEncodingComponents(colorSpace1) {
    switch(colorSpace1){
        case LinearSRGBColorSpace:
            return [
                "Linear",
                "( value )"
            ];
        case SRGBColorSpace:
            return [
                "sRGB",
                "( value )"
            ];
        default:
            console.warn("THREE.WebGLProgram: Unsupported color space:", colorSpace1);
            return [
                "Linear",
                "( value )"
            ];
    }
}
function getShaderErrors(gl, shader, type) {
    const status = gl.getShaderParameter(shader, gl.COMPILE_STATUS);
    const errors = gl.getShaderInfoLog(shader).trim();
    if (status && errors === "") return "";
    const errorMatches = /ERROR: 0:(\d+)/.exec(errors);
    if (errorMatches) {
        // --enable-privileged-webgl-extension
        // console.log( '**' + type + '**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );
        const errorLine = parseInt(errorMatches[1]);
        return type.toUpperCase() + "\n\n" + errors + "\n\n" + handleSource(gl.getShaderSource(shader), errorLine);
    } else return errors;
}
function getTexelEncodingFunction(functionName, colorSpace1) {
    const components = getEncodingComponents(colorSpace1);
    return "vec4 " + functionName + "( vec4 value ) { return LinearTo" + components[0] + components[1] + "; }";
}
function getToneMappingFunction(functionName, toneMapping) {
    let toneMappingName;
    switch(toneMapping){
        case LinearToneMapping:
            toneMappingName = "Linear";
            break;
        case ReinhardToneMapping:
            toneMappingName = "Reinhard";
            break;
        case CineonToneMapping:
            toneMappingName = "OptimizedCineon";
            break;
        case ACESFilmicToneMapping:
            toneMappingName = "ACESFilmic";
            break;
        case CustomToneMapping:
            toneMappingName = "Custom";
            break;
        default:
            console.warn("THREE.WebGLProgram: Unsupported toneMapping:", toneMapping);
            toneMappingName = "Linear";
    }
    return "vec3 " + functionName + "( vec3 color ) { return " + toneMappingName + "ToneMapping( color ); }";
}
function generateExtensions(parameters) {
    const chunks = [
        parameters.extensionDerivatives || !!parameters.envMapCubeUVHeight || parameters.bumpMap || parameters.normalMapTangentSpace || parameters.clearcoatNormalMap || parameters.flatShading || parameters.shaderID === "physical" ? "#extension GL_OES_standard_derivatives : enable" : "",
        (parameters.extensionFragDepth || parameters.logarithmicDepthBuffer) && parameters.rendererExtensionFragDepth ? "#extension GL_EXT_frag_depth : enable" : "",
        parameters.extensionDrawBuffers && parameters.rendererExtensionDrawBuffers ? "#extension GL_EXT_draw_buffers : require" : "",
        (parameters.extensionShaderTextureLOD || parameters.envMap || parameters.transmission) && parameters.rendererExtensionShaderTextureLod ? "#extension GL_EXT_shader_texture_lod : enable" : ""
    ];
    return chunks.filter(filterEmptyLine).join("\n");
}
function generateDefines(defines) {
    const chunks = [];
    for(const name in defines){
        const value = defines[name];
        if (value === false) continue;
        chunks.push("#define " + name + " " + value);
    }
    return chunks.join("\n");
}
function fetchAttributeLocations(gl, program) {
    const attributes = {};
    const n = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);
    for(let i = 0; i < n; i++){
        const info = gl.getActiveAttrib(program, i);
        const name = info.name;
        let locationSize = 1;
        if (info.type === gl.FLOAT_MAT2) locationSize = 2;
        if (info.type === gl.FLOAT_MAT3) locationSize = 3;
        if (info.type === gl.FLOAT_MAT4) locationSize = 4;
        // console.log( 'THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:', name, i );
        attributes[name] = {
            type: info.type,
            location: gl.getAttribLocation(program, name),
            locationSize: locationSize
        };
    }
    return attributes;
}
function filterEmptyLine(string) {
    return string !== "";
}
function replaceLightNums(string, parameters) {
    const numSpotLightCoords = parameters.numSpotLightShadows + parameters.numSpotLightMaps - parameters.numSpotLightShadowsWithMaps;
    return string.replace(/NUM_DIR_LIGHTS/g, parameters.numDirLights).replace(/NUM_SPOT_LIGHTS/g, parameters.numSpotLights).replace(/NUM_SPOT_LIGHT_MAPS/g, parameters.numSpotLightMaps).replace(/NUM_SPOT_LIGHT_COORDS/g, numSpotLightCoords).replace(/NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g, parameters.numPointLights).replace(/NUM_HEMI_LIGHTS/g, parameters.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g, parameters.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g, parameters.numSpotLightShadowsWithMaps).replace(/NUM_SPOT_LIGHT_SHADOWS/g, parameters.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g, parameters.numPointLightShadows);
}
function replaceClippingPlaneNums(string, parameters) {
    return string.replace(/NUM_CLIPPING_PLANES/g, parameters.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g, parameters.numClippingPlanes - parameters.numClipIntersection);
}
// Resolve Includes
const includePattern = /^[ \t]*#include +<([\w\d./]+)>/gm;
function resolveIncludes(string) {
    return string.replace(includePattern, includeReplacer);
}
const shaderChunkMap = new Map([
    [
        "encodings_fragment",
        "colorspace_fragment"
    ],
    [
        "encodings_pars_fragment",
        "colorspace_pars_fragment"
    ],
    [
        "output_fragment",
        "opaque_fragment"
    ]
]);
function includeReplacer(match, include) {
    let string = ShaderChunk[include];
    if (string === undefined) {
        const newInclude = shaderChunkMap.get(include);
        if (newInclude !== undefined) {
            string = ShaderChunk[newInclude];
            console.warn('THREE.WebGLRenderer: Shader chunk "%s" has been deprecated. Use "%s" instead.', include, newInclude);
        } else throw new Error("Can not resolve #include <" + include + ">");
    }
    return resolveIncludes(string);
}
// Unroll Loops
const unrollLoopPattern = /#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;
function unrollLoops(string) {
    return string.replace(unrollLoopPattern, loopReplacer);
}
function loopReplacer(match, start, end, snippet) {
    let string = "";
    for(let i = parseInt(start); i < parseInt(end); i++)string += snippet.replace(/\[\s*i\s*\]/g, "[ " + i + " ]").replace(/UNROLLED_LOOP_INDEX/g, i);
    return string;
}
//
function generatePrecision(parameters) {
    let precisionstring = "precision " + parameters.precision + " float;\nprecision " + parameters.precision + " int;";
    if (parameters.precision === "highp") precisionstring += "\n#define HIGH_PRECISION";
    else if (parameters.precision === "mediump") precisionstring += "\n#define MEDIUM_PRECISION";
    else if (parameters.precision === "lowp") precisionstring += "\n#define LOW_PRECISION";
    return precisionstring;
}
function generateShadowMapTypeDefine(parameters) {
    let shadowMapTypeDefine = "SHADOWMAP_TYPE_BASIC";
    if (parameters.shadowMapType === PCFShadowMap) shadowMapTypeDefine = "SHADOWMAP_TYPE_PCF";
    else if (parameters.shadowMapType === PCFSoftShadowMap) shadowMapTypeDefine = "SHADOWMAP_TYPE_PCF_SOFT";
    else if (parameters.shadowMapType === VSMShadowMap) shadowMapTypeDefine = "SHADOWMAP_TYPE_VSM";
    return shadowMapTypeDefine;
}
function generateEnvMapTypeDefine(parameters) {
    let envMapTypeDefine = "ENVMAP_TYPE_CUBE";
    if (parameters.envMap) switch(parameters.envMapMode){
        case CubeReflectionMapping:
        case CubeRefractionMapping:
            envMapTypeDefine = "ENVMAP_TYPE_CUBE";
            break;
        case CubeUVReflectionMapping:
            envMapTypeDefine = "ENVMAP_TYPE_CUBE_UV";
            break;
    }
    return envMapTypeDefine;
}
function generateEnvMapModeDefine(parameters) {
    let envMapModeDefine = "ENVMAP_MODE_REFLECTION";
    if (parameters.envMap) switch(parameters.envMapMode){
        case CubeRefractionMapping:
            envMapModeDefine = "ENVMAP_MODE_REFRACTION";
            break;
    }
    return envMapModeDefine;
}
function generateEnvMapBlendingDefine(parameters) {
    let envMapBlendingDefine = "ENVMAP_BLENDING_NONE";
    if (parameters.envMap) switch(parameters.combine){
        case MultiplyOperation:
            envMapBlendingDefine = "ENVMAP_BLENDING_MULTIPLY";
            break;
        case MixOperation:
            envMapBlendingDefine = "ENVMAP_BLENDING_MIX";
            break;
        case AddOperation:
            envMapBlendingDefine = "ENVMAP_BLENDING_ADD";
            break;
    }
    return envMapBlendingDefine;
}
function generateCubeUVSize(parameters) {
    const imageHeight = parameters.envMapCubeUVHeight;
    if (imageHeight === null) return null;
    const maxMip = Math.log2(imageHeight) - 2;
    const texelHeight = 1.0 / imageHeight;
    const texelWidth = 1.0 / (3 * Math.max(Math.pow(2, maxMip), 112));
    return {
        texelWidth,
        texelHeight,
        maxMip
    };
}
function WebGLProgram(renderer, cacheKey, parameters, bindingStates) {
    // TODO Send this event to Three.js DevTools
    // console.log( 'WebGLProgram', cacheKey );
    const gl = renderer.getContext();
    const defines = parameters.defines;
    let vertexShader = parameters.vertexShader;
    let fragmentShader = parameters.fragmentShader;
    const shadowMapTypeDefine = generateShadowMapTypeDefine(parameters);
    const envMapTypeDefine = generateEnvMapTypeDefine(parameters);
    const envMapModeDefine = generateEnvMapModeDefine(parameters);
    const envMapBlendingDefine = generateEnvMapBlendingDefine(parameters);
    const envMapCubeUVSize = generateCubeUVSize(parameters);
    const customExtensions = parameters.isWebGL2 ? "" : generateExtensions(parameters);
    const customDefines = generateDefines(defines);
    const program = gl.createProgram();
    let prefixVertex, prefixFragment;
    let versionString = parameters.glslVersion ? "#version " + parameters.glslVersion + "\n" : "";
    if (parameters.isRawShaderMaterial) {
        prefixVertex = [
            "#define SHADER_TYPE " + parameters.shaderType,
            "#define SHADER_NAME " + parameters.shaderName,
            customDefines
        ].filter(filterEmptyLine).join("\n");
        if (prefixVertex.length > 0) prefixVertex += "\n";
        prefixFragment = [
            customExtensions,
            "#define SHADER_TYPE " + parameters.shaderType,
            "#define SHADER_NAME " + parameters.shaderName,
            customDefines
        ].filter(filterEmptyLine).join("\n");
        if (prefixFragment.length > 0) prefixFragment += "\n";
    } else {
        prefixVertex = [
            generatePrecision(parameters),
            "#define SHADER_TYPE " + parameters.shaderType,
            "#define SHADER_NAME " + parameters.shaderName,
            customDefines,
            parameters.instancing ? "#define USE_INSTANCING" : "",
            parameters.instancingColor ? "#define USE_INSTANCING_COLOR" : "",
            parameters.useFog && parameters.fog ? "#define USE_FOG" : "",
            parameters.useFog && parameters.fogExp2 ? "#define FOG_EXP2" : "",
            parameters.map ? "#define USE_MAP" : "",
            parameters.envMap ? "#define USE_ENVMAP" : "",
            parameters.envMap ? "#define " + envMapModeDefine : "",
            parameters.lightMap ? "#define USE_LIGHTMAP" : "",
            parameters.aoMap ? "#define USE_AOMAP" : "",
            parameters.bumpMap ? "#define USE_BUMPMAP" : "",
            parameters.normalMap ? "#define USE_NORMALMAP" : "",
            parameters.normalMapObjectSpace ? "#define USE_NORMALMAP_OBJECTSPACE" : "",
            parameters.normalMapTangentSpace ? "#define USE_NORMALMAP_TANGENTSPACE" : "",
            parameters.displacementMap ? "#define USE_DISPLACEMENTMAP" : "",
            parameters.emissiveMap ? "#define USE_EMISSIVEMAP" : "",
            parameters.anisotropyMap ? "#define USE_ANISOTROPYMAP" : "",
            parameters.clearcoatMap ? "#define USE_CLEARCOATMAP" : "",
            parameters.clearcoatRoughnessMap ? "#define USE_CLEARCOAT_ROUGHNESSMAP" : "",
            parameters.clearcoatNormalMap ? "#define USE_CLEARCOAT_NORMALMAP" : "",
            parameters.iridescenceMap ? "#define USE_IRIDESCENCEMAP" : "",
            parameters.iridescenceThicknessMap ? "#define USE_IRIDESCENCE_THICKNESSMAP" : "",
            parameters.specularMap ? "#define USE_SPECULARMAP" : "",
            parameters.specularColorMap ? "#define USE_SPECULAR_COLORMAP" : "",
            parameters.specularIntensityMap ? "#define USE_SPECULAR_INTENSITYMAP" : "",
            parameters.roughnessMap ? "#define USE_ROUGHNESSMAP" : "",
            parameters.metalnessMap ? "#define USE_METALNESSMAP" : "",
            parameters.alphaMap ? "#define USE_ALPHAMAP" : "",
            parameters.alphaHash ? "#define USE_ALPHAHASH" : "",
            parameters.transmission ? "#define USE_TRANSMISSION" : "",
            parameters.transmissionMap ? "#define USE_TRANSMISSIONMAP" : "",
            parameters.thicknessMap ? "#define USE_THICKNESSMAP" : "",
            parameters.sheenColorMap ? "#define USE_SHEEN_COLORMAP" : "",
            parameters.sheenRoughnessMap ? "#define USE_SHEEN_ROUGHNESSMAP" : "",
            //
            parameters.mapUv ? "#define MAP_UV " + parameters.mapUv : "",
            parameters.alphaMapUv ? "#define ALPHAMAP_UV " + parameters.alphaMapUv : "",
            parameters.lightMapUv ? "#define LIGHTMAP_UV " + parameters.lightMapUv : "",
            parameters.aoMapUv ? "#define AOMAP_UV " + parameters.aoMapUv : "",
            parameters.emissiveMapUv ? "#define EMISSIVEMAP_UV " + parameters.emissiveMapUv : "",
            parameters.bumpMapUv ? "#define BUMPMAP_UV " + parameters.bumpMapUv : "",
            parameters.normalMapUv ? "#define NORMALMAP_UV " + parameters.normalMapUv : "",
            parameters.displacementMapUv ? "#define DISPLACEMENTMAP_UV " + parameters.displacementMapUv : "",
            parameters.metalnessMapUv ? "#define METALNESSMAP_UV " + parameters.metalnessMapUv : "",
            parameters.roughnessMapUv ? "#define ROUGHNESSMAP_UV " + parameters.roughnessMapUv : "",
            parameters.anisotropyMapUv ? "#define ANISOTROPYMAP_UV " + parameters.anisotropyMapUv : "",
            parameters.clearcoatMapUv ? "#define CLEARCOATMAP_UV " + parameters.clearcoatMapUv : "",
            parameters.clearcoatNormalMapUv ? "#define CLEARCOAT_NORMALMAP_UV " + parameters.clearcoatNormalMapUv : "",
            parameters.clearcoatRoughnessMapUv ? "#define CLEARCOAT_ROUGHNESSMAP_UV " + parameters.clearcoatRoughnessMapUv : "",
            parameters.iridescenceMapUv ? "#define IRIDESCENCEMAP_UV " + parameters.iridescenceMapUv : "",
            parameters.iridescenceThicknessMapUv ? "#define IRIDESCENCE_THICKNESSMAP_UV " + parameters.iridescenceThicknessMapUv : "",
            parameters.sheenColorMapUv ? "#define SHEEN_COLORMAP_UV " + parameters.sheenColorMapUv : "",
            parameters.sheenRoughnessMapUv ? "#define SHEEN_ROUGHNESSMAP_UV " + parameters.sheenRoughnessMapUv : "",
            parameters.specularMapUv ? "#define SPECULARMAP_UV " + parameters.specularMapUv : "",
            parameters.specularColorMapUv ? "#define SPECULAR_COLORMAP_UV " + parameters.specularColorMapUv : "",
            parameters.specularIntensityMapUv ? "#define SPECULAR_INTENSITYMAP_UV " + parameters.specularIntensityMapUv : "",
            parameters.transmissionMapUv ? "#define TRANSMISSIONMAP_UV " + parameters.transmissionMapUv : "",
            parameters.thicknessMapUv ? "#define THICKNESSMAP_UV " + parameters.thicknessMapUv : "",
            //
            parameters.vertexTangents && parameters.flatShading === false ? "#define USE_TANGENT" : "",
            parameters.vertexColors ? "#define USE_COLOR" : "",
            parameters.vertexAlphas ? "#define USE_COLOR_ALPHA" : "",
            parameters.vertexUv1s ? "#define USE_UV1" : "",
            parameters.vertexUv2s ? "#define USE_UV2" : "",
            parameters.vertexUv3s ? "#define USE_UV3" : "",
            parameters.pointsUvs ? "#define USE_POINTS_UV" : "",
            parameters.flatShading ? "#define FLAT_SHADED" : "",
            parameters.skinning ? "#define USE_SKINNING" : "",
            parameters.morphTargets ? "#define USE_MORPHTARGETS" : "",
            parameters.morphNormals && parameters.flatShading === false ? "#define USE_MORPHNORMALS" : "",
            parameters.morphColors && parameters.isWebGL2 ? "#define USE_MORPHCOLORS" : "",
            parameters.morphTargetsCount > 0 && parameters.isWebGL2 ? "#define MORPHTARGETS_TEXTURE" : "",
            parameters.morphTargetsCount > 0 && parameters.isWebGL2 ? "#define MORPHTARGETS_TEXTURE_STRIDE " + parameters.morphTextureStride : "",
            parameters.morphTargetsCount > 0 && parameters.isWebGL2 ? "#define MORPHTARGETS_COUNT " + parameters.morphTargetsCount : "",
            parameters.doubleSided ? "#define DOUBLE_SIDED" : "",
            parameters.flipSided ? "#define FLIP_SIDED" : "",
            parameters.shadowMapEnabled ? "#define USE_SHADOWMAP" : "",
            parameters.shadowMapEnabled ? "#define " + shadowMapTypeDefine : "",
            parameters.sizeAttenuation ? "#define USE_SIZEATTENUATION" : "",
            parameters.useLegacyLights ? "#define LEGACY_LIGHTS" : "",
            parameters.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "",
            parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ? "#define USE_LOGDEPTHBUF_EXT" : "",
            "uniform mat4 modelMatrix;",
            "uniform mat4 modelViewMatrix;",
            "uniform mat4 projectionMatrix;",
            "uniform mat4 viewMatrix;",
            "uniform mat3 normalMatrix;",
            "uniform vec3 cameraPosition;",
            "uniform bool isOrthographic;",
            "#ifdef USE_INSTANCING",
            "	attribute mat4 instanceMatrix;",
            "#endif",
            "#ifdef USE_INSTANCING_COLOR",
            "	attribute vec3 instanceColor;",
            "#endif",
            "attribute vec3 position;",
            "attribute vec3 normal;",
            "attribute vec2 uv;",
            "#ifdef USE_UV1",
            "	attribute vec2 uv1;",
            "#endif",
            "#ifdef USE_UV2",
            "	attribute vec2 uv2;",
            "#endif",
            "#ifdef USE_UV3",
            "	attribute vec2 uv3;",
            "#endif",
            "#ifdef USE_TANGENT",
            "	attribute vec4 tangent;",
            "#endif",
            "#if defined( USE_COLOR_ALPHA )",
            "	attribute vec4 color;",
            "#elif defined( USE_COLOR )",
            "	attribute vec3 color;",
            "#endif",
            "#if ( defined( USE_MORPHTARGETS ) && ! defined( MORPHTARGETS_TEXTURE ) )",
            "	attribute vec3 morphTarget0;",
            "	attribute vec3 morphTarget1;",
            "	attribute vec3 morphTarget2;",
            "	attribute vec3 morphTarget3;",
            "	#ifdef USE_MORPHNORMALS",
            "		attribute vec3 morphNormal0;",
            "		attribute vec3 morphNormal1;",
            "		attribute vec3 morphNormal2;",
            "		attribute vec3 morphNormal3;",
            "	#else",
            "		attribute vec3 morphTarget4;",
            "		attribute vec3 morphTarget5;",
            "		attribute vec3 morphTarget6;",
            "		attribute vec3 morphTarget7;",
            "	#endif",
            "#endif",
            "#ifdef USE_SKINNING",
            "	attribute vec4 skinIndex;",
            "	attribute vec4 skinWeight;",
            "#endif",
            "\n"
        ].filter(filterEmptyLine).join("\n");
        prefixFragment = [
            customExtensions,
            generatePrecision(parameters),
            "#define SHADER_TYPE " + parameters.shaderType,
            "#define SHADER_NAME " + parameters.shaderName,
            customDefines,
            parameters.useFog && parameters.fog ? "#define USE_FOG" : "",
            parameters.useFog && parameters.fogExp2 ? "#define FOG_EXP2" : "",
            parameters.map ? "#define USE_MAP" : "",
            parameters.matcap ? "#define USE_MATCAP" : "",
            parameters.envMap ? "#define USE_ENVMAP" : "",
            parameters.envMap ? "#define " + envMapTypeDefine : "",
            parameters.envMap ? "#define " + envMapModeDefine : "",
            parameters.envMap ? "#define " + envMapBlendingDefine : "",
            envMapCubeUVSize ? "#define CUBEUV_TEXEL_WIDTH " + envMapCubeUVSize.texelWidth : "",
            envMapCubeUVSize ? "#define CUBEUV_TEXEL_HEIGHT " + envMapCubeUVSize.texelHeight : "",
            envMapCubeUVSize ? "#define CUBEUV_MAX_MIP " + envMapCubeUVSize.maxMip + ".0" : "",
            parameters.lightMap ? "#define USE_LIGHTMAP" : "",
            parameters.aoMap ? "#define USE_AOMAP" : "",
            parameters.bumpMap ? "#define USE_BUMPMAP" : "",
            parameters.normalMap ? "#define USE_NORMALMAP" : "",
            parameters.normalMapObjectSpace ? "#define USE_NORMALMAP_OBJECTSPACE" : "",
            parameters.normalMapTangentSpace ? "#define USE_NORMALMAP_TANGENTSPACE" : "",
            parameters.emissiveMap ? "#define USE_EMISSIVEMAP" : "",
            parameters.anisotropy ? "#define USE_ANISOTROPY" : "",
            parameters.anisotropyMap ? "#define USE_ANISOTROPYMAP" : "",
            parameters.clearcoat ? "#define USE_CLEARCOAT" : "",
            parameters.clearcoatMap ? "#define USE_CLEARCOATMAP" : "",
            parameters.clearcoatRoughnessMap ? "#define USE_CLEARCOAT_ROUGHNESSMAP" : "",
            parameters.clearcoatNormalMap ? "#define USE_CLEARCOAT_NORMALMAP" : "",
            parameters.iridescence ? "#define USE_IRIDESCENCE" : "",
            parameters.iridescenceMap ? "#define USE_IRIDESCENCEMAP" : "",
            parameters.iridescenceThicknessMap ? "#define USE_IRIDESCENCE_THICKNESSMAP" : "",
            parameters.specularMap ? "#define USE_SPECULARMAP" : "",
            parameters.specularColorMap ? "#define USE_SPECULAR_COLORMAP" : "",
            parameters.specularIntensityMap ? "#define USE_SPECULAR_INTENSITYMAP" : "",
            parameters.roughnessMap ? "#define USE_ROUGHNESSMAP" : "",
            parameters.metalnessMap ? "#define USE_METALNESSMAP" : "",
            parameters.alphaMap ? "#define USE_ALPHAMAP" : "",
            parameters.alphaTest ? "#define USE_ALPHATEST" : "",
            parameters.alphaHash ? "#define USE_ALPHAHASH" : "",
            parameters.sheen ? "#define USE_SHEEN" : "",
            parameters.sheenColorMap ? "#define USE_SHEEN_COLORMAP" : "",
            parameters.sheenRoughnessMap ? "#define USE_SHEEN_ROUGHNESSMAP" : "",
            parameters.transmission ? "#define USE_TRANSMISSION" : "",
            parameters.transmissionMap ? "#define USE_TRANSMISSIONMAP" : "",
            parameters.thicknessMap ? "#define USE_THICKNESSMAP" : "",
            parameters.vertexTangents && parameters.flatShading === false ? "#define USE_TANGENT" : "",
            parameters.vertexColors || parameters.instancingColor ? "#define USE_COLOR" : "",
            parameters.vertexAlphas ? "#define USE_COLOR_ALPHA" : "",
            parameters.vertexUv1s ? "#define USE_UV1" : "",
            parameters.vertexUv2s ? "#define USE_UV2" : "",
            parameters.vertexUv3s ? "#define USE_UV3" : "",
            parameters.pointsUvs ? "#define USE_POINTS_UV" : "",
            parameters.gradientMap ? "#define USE_GRADIENTMAP" : "",
            parameters.flatShading ? "#define FLAT_SHADED" : "",
            parameters.doubleSided ? "#define DOUBLE_SIDED" : "",
            parameters.flipSided ? "#define FLIP_SIDED" : "",
            parameters.shadowMapEnabled ? "#define USE_SHADOWMAP" : "",
            parameters.shadowMapEnabled ? "#define " + shadowMapTypeDefine : "",
            parameters.premultipliedAlpha ? "#define PREMULTIPLIED_ALPHA" : "",
            parameters.useLegacyLights ? "#define LEGACY_LIGHTS" : "",
            parameters.decodeVideoTexture ? "#define DECODE_VIDEO_TEXTURE" : "",
            parameters.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "",
            parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ? "#define USE_LOGDEPTHBUF_EXT" : "",
            "uniform mat4 viewMatrix;",
            "uniform vec3 cameraPosition;",
            "uniform bool isOrthographic;",
            parameters.toneMapping !== NoToneMapping ? "#define TONE_MAPPING" : "",
            parameters.toneMapping !== NoToneMapping ? ShaderChunk["tonemapping_pars_fragment"] : "",
            parameters.toneMapping !== NoToneMapping ? getToneMappingFunction("toneMapping", parameters.toneMapping) : "",
            parameters.dithering ? "#define DITHERING" : "",
            parameters.opaque ? "#define OPAQUE" : "",
            ShaderChunk["colorspace_pars_fragment"],
            getTexelEncodingFunction("linearToOutputTexel", parameters.outputColorSpace),
            parameters.useDepthPacking ? "#define DEPTH_PACKING " + parameters.depthPacking : "",
            "\n"
        ].filter(filterEmptyLine).join("\n");
    }
    vertexShader = resolveIncludes(vertexShader);
    vertexShader = replaceLightNums(vertexShader, parameters);
    vertexShader = replaceClippingPlaneNums(vertexShader, parameters);
    fragmentShader = resolveIncludes(fragmentShader);
    fragmentShader = replaceLightNums(fragmentShader, parameters);
    fragmentShader = replaceClippingPlaneNums(fragmentShader, parameters);
    vertexShader = unrollLoops(vertexShader);
    fragmentShader = unrollLoops(fragmentShader);
    if (parameters.isWebGL2 && parameters.isRawShaderMaterial !== true) {
        // GLSL 3.0 conversion for built-in materials and ShaderMaterial
        versionString = "#version 300 es\n";
        prefixVertex = [
            "precision mediump sampler2DArray;",
            "#define attribute in",
            "#define varying out",
            "#define texture2D texture"
        ].join("\n") + "\n" + prefixVertex;
        prefixFragment = [
            "#define varying in",
            parameters.glslVersion === GLSL3 ? "" : "layout(location = 0) out highp vec4 pc_fragColor;",
            parameters.glslVersion === GLSL3 ? "" : "#define gl_FragColor pc_fragColor",
            "#define gl_FragDepthEXT gl_FragDepth",
            "#define texture2D texture",
            "#define textureCube texture",
            "#define texture2DProj textureProj",
            "#define texture2DLodEXT textureLod",
            "#define texture2DProjLodEXT textureProjLod",
            "#define textureCubeLodEXT textureLod",
            "#define texture2DGradEXT textureGrad",
            "#define texture2DProjGradEXT textureProjGrad",
            "#define textureCubeGradEXT textureGrad"
        ].join("\n") + "\n" + prefixFragment;
    }
    const vertexGlsl = versionString + prefixVertex + vertexShader;
    const fragmentGlsl = versionString + prefixFragment + fragmentShader;
    // console.log( '*VERTEX*', vertexGlsl );
    // console.log( '*FRAGMENT*', fragmentGlsl );
    const glVertexShader = WebGLShader(gl, gl.VERTEX_SHADER, vertexGlsl);
    const glFragmentShader = WebGLShader(gl, gl.FRAGMENT_SHADER, fragmentGlsl);
    gl.attachShader(program, glVertexShader);
    gl.attachShader(program, glFragmentShader);
    // Force a particular attribute to index 0.
    if (parameters.index0AttributeName !== undefined) gl.bindAttribLocation(program, 0, parameters.index0AttributeName);
    else if (parameters.morphTargets === true) // programs with morphTargets displace position out of attribute 0
    gl.bindAttribLocation(program, 0, "position");
    gl.linkProgram(program);
    // check for link errors
    if (renderer.debug.checkShaderErrors) {
        const programLog = gl.getProgramInfoLog(program).trim();
        const vertexLog = gl.getShaderInfoLog(glVertexShader).trim();
        const fragmentLog = gl.getShaderInfoLog(glFragmentShader).trim();
        let runnable = true;
        let haveDiagnostics = true;
        if (gl.getProgramParameter(program, gl.LINK_STATUS) === false) {
            runnable = false;
            if (typeof renderer.debug.onShaderError === "function") renderer.debug.onShaderError(gl, program, glVertexShader, glFragmentShader);
            else {
                // default error reporting
                const vertexErrors = getShaderErrors(gl, glVertexShader, "vertex");
                const fragmentErrors = getShaderErrors(gl, glFragmentShader, "fragment");
                console.error("THREE.WebGLProgram: Shader Error " + gl.getError() + " - " + "VALIDATE_STATUS " + gl.getProgramParameter(program, gl.VALIDATE_STATUS) + "\n\n" + "Program Info Log: " + programLog + "\n" + vertexErrors + "\n" + fragmentErrors);
            }
        } else if (programLog !== "") console.warn("THREE.WebGLProgram: Program Info Log:", programLog);
        else if (vertexLog === "" || fragmentLog === "") haveDiagnostics = false;
        if (haveDiagnostics) this.diagnostics = {
            runnable: runnable,
            programLog: programLog,
            vertexShader: {
                log: vertexLog,
                prefix: prefixVertex
            },
            fragmentShader: {
                log: fragmentLog,
                prefix: prefixFragment
            }
        };
    }
    // Clean up
    // Crashes in iOS9 and iOS10. #18402
    // gl.detachShader( program, glVertexShader );
    // gl.detachShader( program, glFragmentShader );
    gl.deleteShader(glVertexShader);
    gl.deleteShader(glFragmentShader);
    // set up caching for uniform locations
    let cachedUniforms;
    this.getUniforms = function() {
        if (cachedUniforms === undefined) cachedUniforms = new WebGLUniforms(gl, program);
        return cachedUniforms;
    };
    // set up caching for attribute locations
    let cachedAttributes;
    this.getAttributes = function() {
        if (cachedAttributes === undefined) cachedAttributes = fetchAttributeLocations(gl, program);
        return cachedAttributes;
    };
    // free resource
    this.destroy = function() {
        bindingStates.releaseStatesOfProgram(this);
        gl.deleteProgram(program);
        this.program = undefined;
    };
    //
    this.type = parameters.shaderType;
    this.name = parameters.shaderName;
    this.id = programIdCount++;
    this.cacheKey = cacheKey;
    this.usedTimes = 1;
    this.program = program;
    this.vertexShader = glVertexShader;
    this.fragmentShader = glFragmentShader;
    return this;
}
let _id$1 = 0;
class WebGLShaderCache {
    constructor(){
        this.shaderCache = new Map();
        this.materialCache = new Map();
    }
    update(material) {
        const vertexShader = material.vertexShader;
        const fragmentShader = material.fragmentShader;
        const vertexShaderStage = this._getShaderStage(vertexShader);
        const fragmentShaderStage = this._getShaderStage(fragmentShader);
        const materialShaders = this._getShaderCacheForMaterial(material);
        if (materialShaders.has(vertexShaderStage) === false) {
            materialShaders.add(vertexShaderStage);
            vertexShaderStage.usedTimes++;
        }
        if (materialShaders.has(fragmentShaderStage) === false) {
            materialShaders.add(fragmentShaderStage);
            fragmentShaderStage.usedTimes++;
        }
        return this;
    }
    remove(material) {
        const materialShaders = this.materialCache.get(material);
        for (const shaderStage of materialShaders){
            shaderStage.usedTimes--;
            if (shaderStage.usedTimes === 0) this.shaderCache.delete(shaderStage.code);
        }
        this.materialCache.delete(material);
        return this;
    }
    getVertexShaderID(material) {
        return this._getShaderStage(material.vertexShader).id;
    }
    getFragmentShaderID(material) {
        return this._getShaderStage(material.fragmentShader).id;
    }
    dispose() {
        this.shaderCache.clear();
        this.materialCache.clear();
    }
    _getShaderCacheForMaterial(material) {
        const cache = this.materialCache;
        let set = cache.get(material);
        if (set === undefined) {
            set = new Set();
            cache.set(material, set);
        }
        return set;
    }
    _getShaderStage(code) {
        const cache = this.shaderCache;
        let stage = cache.get(code);
        if (stage === undefined) {
            stage = new WebGLShaderStage(code);
            cache.set(code, stage);
        }
        return stage;
    }
}
class WebGLShaderStage {
    constructor(code){
        this.id = _id$1++;
        this.code = code;
        this.usedTimes = 0;
    }
}
function WebGLPrograms(renderer, cubemaps, cubeuvmaps, extensions, capabilities, bindingStates, clipping) {
    const _programLayers = new Layers();
    const _customShaders = new WebGLShaderCache();
    const programs = [];
    const IS_WEBGL2 = capabilities.isWebGL2;
    const logarithmicDepthBuffer = capabilities.logarithmicDepthBuffer;
    const SUPPORTS_VERTEX_TEXTURES = capabilities.vertexTextures;
    let precision = capabilities.precision;
    const shaderIDs = {
        MeshDepthMaterial: "depth",
        MeshDistanceMaterial: "distanceRGBA",
        MeshNormalMaterial: "normal",
        MeshBasicMaterial: "basic",
        MeshLambertMaterial: "lambert",
        MeshPhongMaterial: "phong",
        MeshToonMaterial: "toon",
        MeshStandardMaterial: "physical",
        MeshPhysicalMaterial: "physical",
        MeshMatcapMaterial: "matcap",
        LineBasicMaterial: "basic",
        LineDashedMaterial: "dashed",
        PointsMaterial: "points",
        ShadowMaterial: "shadow",
        SpriteMaterial: "sprite"
    };
    function getChannel(value) {
        if (value === 0) return "uv";
        return `uv${value}`;
    }
    function getParameters(material, lights, shadows, scene, object) {
        const fog = scene.fog;
        const geometry = object.geometry;
        const environment = material.isMeshStandardMaterial ? scene.environment : null;
        const envMap = (material.isMeshStandardMaterial ? cubeuvmaps : cubemaps).get(material.envMap || environment);
        const envMapCubeUVHeight = !!envMap && envMap.mapping === CubeUVReflectionMapping ? envMap.image.height : null;
        const shaderID = shaderIDs[material.type];
        // heuristics to create shader parameters according to lights in the scene
        // (not to blow over maxLights budget)
        if (material.precision !== null) {
            precision = capabilities.getMaxPrecision(material.precision);
            if (precision !== material.precision) console.warn("THREE.WebGLProgram.getParameters:", material.precision, "not supported, using", precision, "instead.");
        }
        //
        const morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;
        const morphTargetsCount = morphAttribute !== undefined ? morphAttribute.length : 0;
        let morphTextureStride = 0;
        if (geometry.morphAttributes.position !== undefined) morphTextureStride = 1;
        if (geometry.morphAttributes.normal !== undefined) morphTextureStride = 2;
        if (geometry.morphAttributes.color !== undefined) morphTextureStride = 3;
        //
        let vertexShader, fragmentShader;
        let customVertexShaderID, customFragmentShaderID;
        if (shaderID) {
            const shader = ShaderLib[shaderID];
            vertexShader = shader.vertexShader;
            fragmentShader = shader.fragmentShader;
        } else {
            vertexShader = material.vertexShader;
            fragmentShader = material.fragmentShader;
            _customShaders.update(material);
            customVertexShaderID = _customShaders.getVertexShaderID(material);
            customFragmentShaderID = _customShaders.getFragmentShaderID(material);
        }
        const currentRenderTarget = renderer.getRenderTarget();
        const IS_INSTANCEDMESH = object.isInstancedMesh === true;
        const HAS_MAP = !!material.map;
        const HAS_MATCAP = !!material.matcap;
        const HAS_ENVMAP = !!envMap;
        const HAS_AOMAP = !!material.aoMap;
        const HAS_LIGHTMAP = !!material.lightMap;
        const HAS_BUMPMAP = !!material.bumpMap;
        const HAS_NORMALMAP = !!material.normalMap;
        const HAS_DISPLACEMENTMAP = !!material.displacementMap;
        const HAS_EMISSIVEMAP = !!material.emissiveMap;
        const HAS_METALNESSMAP = !!material.metalnessMap;
        const HAS_ROUGHNESSMAP = !!material.roughnessMap;
        const HAS_ANISOTROPY = material.anisotropy > 0;
        const HAS_CLEARCOAT = material.clearcoat > 0;
        const HAS_IRIDESCENCE = material.iridescence > 0;
        const HAS_SHEEN = material.sheen > 0;
        const HAS_TRANSMISSION = material.transmission > 0;
        const HAS_ANISOTROPYMAP = HAS_ANISOTROPY && !!material.anisotropyMap;
        const HAS_CLEARCOATMAP = HAS_CLEARCOAT && !!material.clearcoatMap;
        const HAS_CLEARCOAT_NORMALMAP = HAS_CLEARCOAT && !!material.clearcoatNormalMap;
        const HAS_CLEARCOAT_ROUGHNESSMAP = HAS_CLEARCOAT && !!material.clearcoatRoughnessMap;
        const HAS_IRIDESCENCEMAP = HAS_IRIDESCENCE && !!material.iridescenceMap;
        const HAS_IRIDESCENCE_THICKNESSMAP = HAS_IRIDESCENCE && !!material.iridescenceThicknessMap;
        const HAS_SHEEN_COLORMAP = HAS_SHEEN && !!material.sheenColorMap;
        const HAS_SHEEN_ROUGHNESSMAP = HAS_SHEEN && !!material.sheenRoughnessMap;
        const HAS_SPECULARMAP = !!material.specularMap;
        const HAS_SPECULAR_COLORMAP = !!material.specularColorMap;
        const HAS_SPECULAR_INTENSITYMAP = !!material.specularIntensityMap;
        const HAS_TRANSMISSIONMAP = HAS_TRANSMISSION && !!material.transmissionMap;
        const HAS_THICKNESSMAP = HAS_TRANSMISSION && !!material.thicknessMap;
        const HAS_GRADIENTMAP = !!material.gradientMap;
        const HAS_ALPHAMAP = !!material.alphaMap;
        const HAS_ALPHATEST = material.alphaTest > 0;
        const HAS_ALPHAHASH = !!material.alphaHash;
        const HAS_EXTENSIONS = !!material.extensions;
        const HAS_ATTRIBUTE_UV1 = !!geometry.attributes.uv1;
        const HAS_ATTRIBUTE_UV2 = !!geometry.attributes.uv2;
        const HAS_ATTRIBUTE_UV3 = !!geometry.attributes.uv3;
        let toneMapping = NoToneMapping;
        if (material.toneMapped) {
            if (currentRenderTarget === null || currentRenderTarget.isXRRenderTarget === true) toneMapping = renderer.toneMapping;
        }
        const parameters = {
            isWebGL2: IS_WEBGL2,
            shaderID: shaderID,
            shaderType: material.type,
            shaderName: material.name,
            vertexShader: vertexShader,
            fragmentShader: fragmentShader,
            defines: material.defines,
            customVertexShaderID: customVertexShaderID,
            customFragmentShaderID: customFragmentShaderID,
            isRawShaderMaterial: material.isRawShaderMaterial === true,
            glslVersion: material.glslVersion,
            precision: precision,
            instancing: IS_INSTANCEDMESH,
            instancingColor: IS_INSTANCEDMESH && object.instanceColor !== null,
            supportsVertexTextures: SUPPORTS_VERTEX_TEXTURES,
            outputColorSpace: currentRenderTarget === null ? renderer.outputColorSpace : currentRenderTarget.isXRRenderTarget === true ? currentRenderTarget.texture.colorSpace : LinearSRGBColorSpace,
            map: HAS_MAP,
            matcap: HAS_MATCAP,
            envMap: HAS_ENVMAP,
            envMapMode: HAS_ENVMAP && envMap.mapping,
            envMapCubeUVHeight: envMapCubeUVHeight,
            aoMap: HAS_AOMAP,
            lightMap: HAS_LIGHTMAP,
            bumpMap: HAS_BUMPMAP,
            normalMap: HAS_NORMALMAP,
            displacementMap: SUPPORTS_VERTEX_TEXTURES && HAS_DISPLACEMENTMAP,
            emissiveMap: HAS_EMISSIVEMAP,
            normalMapObjectSpace: HAS_NORMALMAP && material.normalMapType === ObjectSpaceNormalMap,
            normalMapTangentSpace: HAS_NORMALMAP && material.normalMapType === TangentSpaceNormalMap,
            metalnessMap: HAS_METALNESSMAP,
            roughnessMap: HAS_ROUGHNESSMAP,
            anisotropy: HAS_ANISOTROPY,
            anisotropyMap: HAS_ANISOTROPYMAP,
            clearcoat: HAS_CLEARCOAT,
            clearcoatMap: HAS_CLEARCOATMAP,
            clearcoatNormalMap: HAS_CLEARCOAT_NORMALMAP,
            clearcoatRoughnessMap: HAS_CLEARCOAT_ROUGHNESSMAP,
            iridescence: HAS_IRIDESCENCE,
            iridescenceMap: HAS_IRIDESCENCEMAP,
            iridescenceThicknessMap: HAS_IRIDESCENCE_THICKNESSMAP,
            sheen: HAS_SHEEN,
            sheenColorMap: HAS_SHEEN_COLORMAP,
            sheenRoughnessMap: HAS_SHEEN_ROUGHNESSMAP,
            specularMap: HAS_SPECULARMAP,
            specularColorMap: HAS_SPECULAR_COLORMAP,
            specularIntensityMap: HAS_SPECULAR_INTENSITYMAP,
            transmission: HAS_TRANSMISSION,
            transmissionMap: HAS_TRANSMISSIONMAP,
            thicknessMap: HAS_THICKNESSMAP,
            gradientMap: HAS_GRADIENTMAP,
            opaque: material.transparent === false && material.blending === NormalBlending,
            alphaMap: HAS_ALPHAMAP,
            alphaTest: HAS_ALPHATEST,
            alphaHash: HAS_ALPHAHASH,
            combine: material.combine,
            //
            mapUv: HAS_MAP && getChannel(material.map.channel),
            aoMapUv: HAS_AOMAP && getChannel(material.aoMap.channel),
            lightMapUv: HAS_LIGHTMAP && getChannel(material.lightMap.channel),
            bumpMapUv: HAS_BUMPMAP && getChannel(material.bumpMap.channel),
            normalMapUv: HAS_NORMALMAP && getChannel(material.normalMap.channel),
            displacementMapUv: HAS_DISPLACEMENTMAP && getChannel(material.displacementMap.channel),
            emissiveMapUv: HAS_EMISSIVEMAP && getChannel(material.emissiveMap.channel),
            metalnessMapUv: HAS_METALNESSMAP && getChannel(material.metalnessMap.channel),
            roughnessMapUv: HAS_ROUGHNESSMAP && getChannel(material.roughnessMap.channel),
            anisotropyMapUv: HAS_ANISOTROPYMAP && getChannel(material.anisotropyMap.channel),
            clearcoatMapUv: HAS_CLEARCOATMAP && getChannel(material.clearcoatMap.channel),
            clearcoatNormalMapUv: HAS_CLEARCOAT_NORMALMAP && getChannel(material.clearcoatNormalMap.channel),
            clearcoatRoughnessMapUv: HAS_CLEARCOAT_ROUGHNESSMAP && getChannel(material.clearcoatRoughnessMap.channel),
            iridescenceMapUv: HAS_IRIDESCENCEMAP && getChannel(material.iridescenceMap.channel),
            iridescenceThicknessMapUv: HAS_IRIDESCENCE_THICKNESSMAP && getChannel(material.iridescenceThicknessMap.channel),
            sheenColorMapUv: HAS_SHEEN_COLORMAP && getChannel(material.sheenColorMap.channel),
            sheenRoughnessMapUv: HAS_SHEEN_ROUGHNESSMAP && getChannel(material.sheenRoughnessMap.channel),
            specularMapUv: HAS_SPECULARMAP && getChannel(material.specularMap.channel),
            specularColorMapUv: HAS_SPECULAR_COLORMAP && getChannel(material.specularColorMap.channel),
            specularIntensityMapUv: HAS_SPECULAR_INTENSITYMAP && getChannel(material.specularIntensityMap.channel),
            transmissionMapUv: HAS_TRANSMISSIONMAP && getChannel(material.transmissionMap.channel),
            thicknessMapUv: HAS_THICKNESSMAP && getChannel(material.thicknessMap.channel),
            alphaMapUv: HAS_ALPHAMAP && getChannel(material.alphaMap.channel),
            //
            vertexTangents: !!geometry.attributes.tangent && (HAS_NORMALMAP || HAS_ANISOTROPY),
            vertexColors: material.vertexColors,
            vertexAlphas: material.vertexColors === true && !!geometry.attributes.color && geometry.attributes.color.itemSize === 4,
            vertexUv1s: HAS_ATTRIBUTE_UV1,
            vertexUv2s: HAS_ATTRIBUTE_UV2,
            vertexUv3s: HAS_ATTRIBUTE_UV3,
            pointsUvs: object.isPoints === true && !!geometry.attributes.uv && (HAS_MAP || HAS_ALPHAMAP),
            fog: !!fog,
            useFog: material.fog === true,
            fogExp2: fog && fog.isFogExp2,
            flatShading: material.flatShading === true,
            sizeAttenuation: material.sizeAttenuation === true,
            logarithmicDepthBuffer: logarithmicDepthBuffer,
            skinning: object.isSkinnedMesh === true,
            morphTargets: geometry.morphAttributes.position !== undefined,
            morphNormals: geometry.morphAttributes.normal !== undefined,
            morphColors: geometry.morphAttributes.color !== undefined,
            morphTargetsCount: morphTargetsCount,
            morphTextureStride: morphTextureStride,
            numDirLights: lights.directional.length,
            numPointLights: lights.point.length,
            numSpotLights: lights.spot.length,
            numSpotLightMaps: lights.spotLightMap.length,
            numRectAreaLights: lights.rectArea.length,
            numHemiLights: lights.hemi.length,
            numDirLightShadows: lights.directionalShadowMap.length,
            numPointLightShadows: lights.pointShadowMap.length,
            numSpotLightShadows: lights.spotShadowMap.length,
            numSpotLightShadowsWithMaps: lights.numSpotLightShadowsWithMaps,
            numClippingPlanes: clipping.numPlanes,
            numClipIntersection: clipping.numIntersection,
            dithering: material.dithering,
            shadowMapEnabled: renderer.shadowMap.enabled && shadows.length > 0,
            shadowMapType: renderer.shadowMap.type,
            toneMapping: toneMapping,
            useLegacyLights: renderer._useLegacyLights,
            decodeVideoTexture: HAS_MAP && material.map.isVideoTexture === true && material.map.colorSpace === SRGBColorSpace,
            premultipliedAlpha: material.premultipliedAlpha,
            doubleSided: material.side === DoubleSide,
            flipSided: material.side === BackSide,
            useDepthPacking: material.depthPacking >= 0,
            depthPacking: material.depthPacking || 0,
            index0AttributeName: material.index0AttributeName,
            extensionDerivatives: HAS_EXTENSIONS && material.extensions.derivatives === true,
            extensionFragDepth: HAS_EXTENSIONS && material.extensions.fragDepth === true,
            extensionDrawBuffers: HAS_EXTENSIONS && material.extensions.drawBuffers === true,
            extensionShaderTextureLOD: HAS_EXTENSIONS && material.extensions.shaderTextureLOD === true,
            rendererExtensionFragDepth: IS_WEBGL2 || extensions.has("EXT_frag_depth"),
            rendererExtensionDrawBuffers: IS_WEBGL2 || extensions.has("WEBGL_draw_buffers"),
            rendererExtensionShaderTextureLod: IS_WEBGL2 || extensions.has("EXT_shader_texture_lod"),
            customProgramCacheKey: material.customProgramCacheKey()
        };
        return parameters;
    }
    function getProgramCacheKey(parameters) {
        const array = [];
        if (parameters.shaderID) array.push(parameters.shaderID);
        else {
            array.push(parameters.customVertexShaderID);
            array.push(parameters.customFragmentShaderID);
        }
        if (parameters.defines !== undefined) for(const name in parameters.defines){
            array.push(name);
            array.push(parameters.defines[name]);
        }
        if (parameters.isRawShaderMaterial === false) {
            getProgramCacheKeyParameters(array, parameters);
            getProgramCacheKeyBooleans(array, parameters);
            array.push(renderer.outputColorSpace);
        }
        array.push(parameters.customProgramCacheKey);
        return array.join();
    }
    function getProgramCacheKeyParameters(array, parameters) {
        array.push(parameters.precision);
        array.push(parameters.outputColorSpace);
        array.push(parameters.envMapMode);
        array.push(parameters.envMapCubeUVHeight);
        array.push(parameters.mapUv);
        array.push(parameters.alphaMapUv);
        array.push(parameters.lightMapUv);
        array.push(parameters.aoMapUv);
        array.push(parameters.bumpMapUv);
        array.push(parameters.normalMapUv);
        array.push(parameters.displacementMapUv);
        array.push(parameters.emissiveMapUv);
        array.push(parameters.metalnessMapUv);
        array.push(parameters.roughnessMapUv);
        array.push(parameters.anisotropyMapUv);
        array.push(parameters.clearcoatMapUv);
        array.push(parameters.clearcoatNormalMapUv);
        array.push(parameters.clearcoatRoughnessMapUv);
        array.push(parameters.iridescenceMapUv);
        array.push(parameters.iridescenceThicknessMapUv);
        array.push(parameters.sheenColorMapUv);
        array.push(parameters.sheenRoughnessMapUv);
        array.push(parameters.specularMapUv);
        array.push(parameters.specularColorMapUv);
        array.push(parameters.specularIntensityMapUv);
        array.push(parameters.transmissionMapUv);
        array.push(parameters.thicknessMapUv);
        array.push(parameters.combine);
        array.push(parameters.fogExp2);
        array.push(parameters.sizeAttenuation);
        array.push(parameters.morphTargetsCount);
        array.push(parameters.morphAttributeCount);
        array.push(parameters.numDirLights);
        array.push(parameters.numPointLights);
        array.push(parameters.numSpotLights);
        array.push(parameters.numSpotLightMaps);
        array.push(parameters.numHemiLights);
        array.push(parameters.numRectAreaLights);
        array.push(parameters.numDirLightShadows);
        array.push(parameters.numPointLightShadows);
        array.push(parameters.numSpotLightShadows);
        array.push(parameters.numSpotLightShadowsWithMaps);
        array.push(parameters.shadowMapType);
        array.push(parameters.toneMapping);
        array.push(parameters.numClippingPlanes);
        array.push(parameters.numClipIntersection);
        array.push(parameters.depthPacking);
    }
    function getProgramCacheKeyBooleans(array, parameters) {
        _programLayers.disableAll();
        if (parameters.isWebGL2) _programLayers.enable(0);
        if (parameters.supportsVertexTextures) _programLayers.enable(1);
        if (parameters.instancing) _programLayers.enable(2);
        if (parameters.instancingColor) _programLayers.enable(3);
        if (parameters.matcap) _programLayers.enable(4);
        if (parameters.envMap) _programLayers.enable(5);
        if (parameters.normalMapObjectSpace) _programLayers.enable(6);
        if (parameters.normalMapTangentSpace) _programLayers.enable(7);
        if (parameters.clearcoat) _programLayers.enable(8);
        if (parameters.iridescence) _programLayers.enable(9);
        if (parameters.alphaTest) _programLayers.enable(10);
        if (parameters.vertexColors) _programLayers.enable(11);
        if (parameters.vertexAlphas) _programLayers.enable(12);
        if (parameters.vertexUv1s) _programLayers.enable(13);
        if (parameters.vertexUv2s) _programLayers.enable(14);
        if (parameters.vertexUv3s) _programLayers.enable(15);
        if (parameters.vertexTangents) _programLayers.enable(16);
        if (parameters.anisotropy) _programLayers.enable(17);
        array.push(_programLayers.mask);
        _programLayers.disableAll();
        if (parameters.fog) _programLayers.enable(0);
        if (parameters.useFog) _programLayers.enable(1);
        if (parameters.flatShading) _programLayers.enable(2);
        if (parameters.logarithmicDepthBuffer) _programLayers.enable(3);
        if (parameters.skinning) _programLayers.enable(4);
        if (parameters.morphTargets) _programLayers.enable(5);
        if (parameters.morphNormals) _programLayers.enable(6);
        if (parameters.morphColors) _programLayers.enable(7);
        if (parameters.premultipliedAlpha) _programLayers.enable(8);
        if (parameters.shadowMapEnabled) _programLayers.enable(9);
        if (parameters.useLegacyLights) _programLayers.enable(10);
        if (parameters.doubleSided) _programLayers.enable(11);
        if (parameters.flipSided) _programLayers.enable(12);
        if (parameters.useDepthPacking) _programLayers.enable(13);
        if (parameters.dithering) _programLayers.enable(14);
        if (parameters.transmission) _programLayers.enable(15);
        if (parameters.sheen) _programLayers.enable(16);
        if (parameters.opaque) _programLayers.enable(17);
        if (parameters.pointsUvs) _programLayers.enable(18);
        if (parameters.decodeVideoTexture) _programLayers.enable(19);
        array.push(_programLayers.mask);
    }
    function getUniforms(material) {
        const shaderID = shaderIDs[material.type];
        let uniforms;
        if (shaderID) {
            const shader = ShaderLib[shaderID];
            uniforms = UniformsUtils.clone(shader.uniforms);
        } else uniforms = material.uniforms;
        return uniforms;
    }
    function acquireProgram(parameters, cacheKey) {
        let program;
        // Check if code has been already compiled
        for(let p = 0, pl = programs.length; p < pl; p++){
            const preexistingProgram = programs[p];
            if (preexistingProgram.cacheKey === cacheKey) {
                program = preexistingProgram;
                ++program.usedTimes;
                break;
            }
        }
        if (program === undefined) {
            program = new WebGLProgram(renderer, cacheKey, parameters, bindingStates);
            programs.push(program);
        }
        return program;
    }
    function releaseProgram(program) {
        if (--program.usedTimes === 0) {
            // Remove from unordered set
            const i = programs.indexOf(program);
            programs[i] = programs[programs.length - 1];
            programs.pop();
            // Free WebGL resources
            program.destroy();
        }
    }
    function releaseShaderCache(material) {
        _customShaders.remove(material);
    }
    function dispose() {
        _customShaders.dispose();
    }
    return {
        getParameters: getParameters,
        getProgramCacheKey: getProgramCacheKey,
        getUniforms: getUniforms,
        acquireProgram: acquireProgram,
        releaseProgram: releaseProgram,
        releaseShaderCache: releaseShaderCache,
        // Exposed for resource monitoring & error feedback via renderer.info:
        programs: programs,
        dispose: dispose
    };
}
function WebGLProperties() {
    let properties = new WeakMap();
    function get(object) {
        let map = properties.get(object);
        if (map === undefined) {
            map = {};
            properties.set(object, map);
        }
        return map;
    }
    function remove(object) {
        properties.delete(object);
    }
    function update(object, key, value) {
        properties.get(object)[key] = value;
    }
    function dispose() {
        properties = new WeakMap();
    }
    return {
        get: get,
        remove: remove,
        update: update,
        dispose: dispose
    };
}
function painterSortStable(a, b) {
    if (a.groupOrder !== b.groupOrder) return a.groupOrder - b.groupOrder;
    else if (a.renderOrder !== b.renderOrder) return a.renderOrder - b.renderOrder;
    else if (a.material.id !== b.material.id) return a.material.id - b.material.id;
    else if (a.z !== b.z) return a.z - b.z;
    else return a.id - b.id;
}
function reversePainterSortStable(a, b) {
    if (a.groupOrder !== b.groupOrder) return a.groupOrder - b.groupOrder;
    else if (a.renderOrder !== b.renderOrder) return a.renderOrder - b.renderOrder;
    else if (a.z !== b.z) return b.z - a.z;
    else return a.id - b.id;
}
function WebGLRenderList() {
    const renderItems = [];
    let renderItemsIndex = 0;
    const opaque = [];
    const transmissive = [];
    const transparent = [];
    function init() {
        renderItemsIndex = 0;
        opaque.length = 0;
        transmissive.length = 0;
        transparent.length = 0;
    }
    function getNextRenderItem(object, geometry, material, groupOrder, z, group) {
        let renderItem = renderItems[renderItemsIndex];
        if (renderItem === undefined) {
            renderItem = {
                id: object.id,
                object: object,
                geometry: geometry,
                material: material,
                groupOrder: groupOrder,
                renderOrder: object.renderOrder,
                z: z,
                group: group
            };
            renderItems[renderItemsIndex] = renderItem;
        } else {
            renderItem.id = object.id;
            renderItem.object = object;
            renderItem.geometry = geometry;
            renderItem.material = material;
            renderItem.groupOrder = groupOrder;
            renderItem.renderOrder = object.renderOrder;
            renderItem.z = z;
            renderItem.group = group;
        }
        renderItemsIndex++;
        return renderItem;
    }
    function push(object, geometry, material, groupOrder, z, group) {
        const renderItem = getNextRenderItem(object, geometry, material, groupOrder, z, group);
        if (material.transmission > 0.0) transmissive.push(renderItem);
        else if (material.transparent === true) transparent.push(renderItem);
        else opaque.push(renderItem);
    }
    function unshift(object, geometry, material, groupOrder, z, group) {
        const renderItem = getNextRenderItem(object, geometry, material, groupOrder, z, group);
        if (material.transmission > 0.0) transmissive.unshift(renderItem);
        else if (material.transparent === true) transparent.unshift(renderItem);
        else opaque.unshift(renderItem);
    }
    function sort(customOpaqueSort, customTransparentSort) {
        if (opaque.length > 1) opaque.sort(customOpaqueSort || painterSortStable);
        if (transmissive.length > 1) transmissive.sort(customTransparentSort || reversePainterSortStable);
        if (transparent.length > 1) transparent.sort(customTransparentSort || reversePainterSortStable);
    }
    function finish() {
        // Clear references from inactive renderItems in the list
        for(let i = renderItemsIndex, il = renderItems.length; i < il; i++){
            const renderItem = renderItems[i];
            if (renderItem.id === null) break;
            renderItem.id = null;
            renderItem.object = null;
            renderItem.geometry = null;
            renderItem.material = null;
            renderItem.group = null;
        }
    }
    return {
        opaque: opaque,
        transmissive: transmissive,
        transparent: transparent,
        init: init,
        push: push,
        unshift: unshift,
        finish: finish,
        sort: sort
    };
}
function WebGLRenderLists() {
    let lists = new WeakMap();
    function get(scene, renderCallDepth) {
        const listArray = lists.get(scene);
        let list;
        if (listArray === undefined) {
            list = new WebGLRenderList();
            lists.set(scene, [
                list
            ]);
        } else if (renderCallDepth >= listArray.length) {
            list = new WebGLRenderList();
            listArray.push(list);
        } else list = listArray[renderCallDepth];
        return list;
    }
    function dispose() {
        lists = new WeakMap();
    }
    return {
        get: get,
        dispose: dispose
    };
}
function UniformsCache() {
    const lights = {};
    return {
        get: function(light) {
            if (lights[light.id] !== undefined) return lights[light.id];
            let uniforms;
            switch(light.type){
                case "DirectionalLight":
                    uniforms = {
                        direction: new Vector3(),
                        color: new Color()
                    };
                    break;
                case "SpotLight":
                    uniforms = {
                        position: new Vector3(),
                        direction: new Vector3(),
                        color: new Color(),
                        distance: 0,
                        coneCos: 0,
                        penumbraCos: 0,
                        decay: 0
                    };
                    break;
                case "PointLight":
                    uniforms = {
                        position: new Vector3(),
                        color: new Color(),
                        distance: 0,
                        decay: 0
                    };
                    break;
                case "HemisphereLight":
                    uniforms = {
                        direction: new Vector3(),
                        skyColor: new Color(),
                        groundColor: new Color()
                    };
                    break;
                case "RectAreaLight":
                    uniforms = {
                        color: new Color(),
                        position: new Vector3(),
                        halfWidth: new Vector3(),
                        halfHeight: new Vector3()
                    };
                    break;
            }
            lights[light.id] = uniforms;
            return uniforms;
        }
    };
}
function ShadowUniformsCache() {
    const lights = {};
    return {
        get: function(light) {
            if (lights[light.id] !== undefined) return lights[light.id];
            let uniforms;
            switch(light.type){
                case "DirectionalLight":
                    uniforms = {
                        shadowBias: 0,
                        shadowNormalBias: 0,
                        shadowRadius: 1,
                        shadowMapSize: new Vector2()
                    };
                    break;
                case "SpotLight":
                    uniforms = {
                        shadowBias: 0,
                        shadowNormalBias: 0,
                        shadowRadius: 1,
                        shadowMapSize: new Vector2()
                    };
                    break;
                case "PointLight":
                    uniforms = {
                        shadowBias: 0,
                        shadowNormalBias: 0,
                        shadowRadius: 1,
                        shadowMapSize: new Vector2(),
                        shadowCameraNear: 1,
                        shadowCameraFar: 1000
                    };
                    break;
            }
            lights[light.id] = uniforms;
            return uniforms;
        }
    };
}
let nextVersion = 0;
function shadowCastingAndTexturingLightsFirst(lightA, lightB) {
    return (lightB.castShadow ? 2 : 0) - (lightA.castShadow ? 2 : 0) + (lightB.map ? 1 : 0) - (lightA.map ? 1 : 0);
}
function WebGLLights(extensions, capabilities) {
    const cache = new UniformsCache();
    const shadowCache = ShadowUniformsCache();
    const state = {
        version: 0,
        hash: {
            directionalLength: -1,
            pointLength: -1,
            spotLength: -1,
            rectAreaLength: -1,
            hemiLength: -1,
            numDirectionalShadows: -1,
            numPointShadows: -1,
            numSpotShadows: -1,
            numSpotMaps: -1
        },
        ambient: [
            0,
            0,
            0
        ],
        probe: [],
        directional: [],
        directionalShadow: [],
        directionalShadowMap: [],
        directionalShadowMatrix: [],
        spot: [],
        spotLightMap: [],
        spotShadow: [],
        spotShadowMap: [],
        spotLightMatrix: [],
        rectArea: [],
        rectAreaLTC1: null,
        rectAreaLTC2: null,
        point: [],
        pointShadow: [],
        pointShadowMap: [],
        pointShadowMatrix: [],
        hemi: [],
        numSpotLightShadowsWithMaps: 0
    };
    for(let i = 0; i < 9; i++)state.probe.push(new Vector3());
    const vector3 = new Vector3();
    const matrix4 = new Matrix4();
    const matrix42 = new Matrix4();
    function setup(lights, useLegacyLights) {
        let r = 0, g = 0, b = 0;
        for(let i = 0; i < 9; i++)state.probe[i].set(0, 0, 0);
        let directionalLength = 0;
        let pointLength = 0;
        let spotLength = 0;
        let rectAreaLength = 0;
        let hemiLength = 0;
        let numDirectionalShadows = 0;
        let numPointShadows = 0;
        let numSpotShadows = 0;
        let numSpotMaps = 0;
        let numSpotShadowsWithMaps = 0;
        // ordering : [shadow casting + map texturing, map texturing, shadow casting, none ]
        lights.sort(shadowCastingAndTexturingLightsFirst);
        // artist-friendly light intensity scaling factor
        const scaleFactor = useLegacyLights === true ? Math.PI : 1;
        for(let i = 0, l = lights.length; i < l; i++){
            const light = lights[i];
            const color = light.color;
            const intensity = light.intensity;
            const distance = light.distance;
            const shadowMap = light.shadow && light.shadow.map ? light.shadow.map.texture : null;
            if (light.isAmbientLight) {
                r += color.r * intensity * scaleFactor;
                g += color.g * intensity * scaleFactor;
                b += color.b * intensity * scaleFactor;
            } else if (light.isLightProbe) for(let j = 0; j < 9; j++)state.probe[j].addScaledVector(light.sh.coefficients[j], intensity);
            else if (light.isDirectionalLight) {
                const uniforms = cache.get(light);
                uniforms.color.copy(light.color).multiplyScalar(light.intensity * scaleFactor);
                if (light.castShadow) {
                    const shadow = light.shadow;
                    const shadowUniforms = shadowCache.get(light);
                    shadowUniforms.shadowBias = shadow.bias;
                    shadowUniforms.shadowNormalBias = shadow.normalBias;
                    shadowUniforms.shadowRadius = shadow.radius;
                    shadowUniforms.shadowMapSize = shadow.mapSize;
                    state.directionalShadow[directionalLength] = shadowUniforms;
                    state.directionalShadowMap[directionalLength] = shadowMap;
                    state.directionalShadowMatrix[directionalLength] = light.shadow.matrix;
                    numDirectionalShadows++;
                }
                state.directional[directionalLength] = uniforms;
                directionalLength++;
            } else if (light.isSpotLight) {
                const uniforms = cache.get(light);
                uniforms.position.setFromMatrixPosition(light.matrixWorld);
                uniforms.color.copy(color).multiplyScalar(intensity * scaleFactor);
                uniforms.distance = distance;
                uniforms.coneCos = Math.cos(light.angle);
                uniforms.penumbraCos = Math.cos(light.angle * (1 - light.penumbra));
                uniforms.decay = light.decay;
                state.spot[spotLength] = uniforms;
                const shadow = light.shadow;
                if (light.map) {
                    state.spotLightMap[numSpotMaps] = light.map;
                    numSpotMaps++;
                    // make sure the lightMatrix is up to date
                    // TODO : do it if required only
                    shadow.updateMatrices(light);
                    if (light.castShadow) numSpotShadowsWithMaps++;
                }
                state.spotLightMatrix[spotLength] = shadow.matrix;
                if (light.castShadow) {
                    const shadowUniforms = shadowCache.get(light);
                    shadowUniforms.shadowBias = shadow.bias;
                    shadowUniforms.shadowNormalBias = shadow.normalBias;
                    shadowUniforms.shadowRadius = shadow.radius;
                    shadowUniforms.shadowMapSize = shadow.mapSize;
                    state.spotShadow[spotLength] = shadowUniforms;
                    state.spotShadowMap[spotLength] = shadowMap;
                    numSpotShadows++;
                }
                spotLength++;
            } else if (light.isRectAreaLight) {
                const uniforms = cache.get(light);
                uniforms.color.copy(color).multiplyScalar(intensity);
                uniforms.halfWidth.set(light.width * 0.5, 0.0, 0.0);
                uniforms.halfHeight.set(0.0, light.height * 0.5, 0.0);
                state.rectArea[rectAreaLength] = uniforms;
                rectAreaLength++;
            } else if (light.isPointLight) {
                const uniforms = cache.get(light);
                uniforms.color.copy(light.color).multiplyScalar(light.intensity * scaleFactor);
                uniforms.distance = light.distance;
                uniforms.decay = light.decay;
                if (light.castShadow) {
                    const shadow = light.shadow;
                    const shadowUniforms = shadowCache.get(light);
                    shadowUniforms.shadowBias = shadow.bias;
                    shadowUniforms.shadowNormalBias = shadow.normalBias;
                    shadowUniforms.shadowRadius = shadow.radius;
                    shadowUniforms.shadowMapSize = shadow.mapSize;
                    shadowUniforms.shadowCameraNear = shadow.camera.near;
                    shadowUniforms.shadowCameraFar = shadow.camera.far;
                    state.pointShadow[pointLength] = shadowUniforms;
                    state.pointShadowMap[pointLength] = shadowMap;
                    state.pointShadowMatrix[pointLength] = light.shadow.matrix;
                    numPointShadows++;
                }
                state.point[pointLength] = uniforms;
                pointLength++;
            } else if (light.isHemisphereLight) {
                const uniforms = cache.get(light);
                uniforms.skyColor.copy(light.color).multiplyScalar(intensity * scaleFactor);
                uniforms.groundColor.copy(light.groundColor).multiplyScalar(intensity * scaleFactor);
                state.hemi[hemiLength] = uniforms;
                hemiLength++;
            }
        }
        if (rectAreaLength > 0) {
            if (capabilities.isWebGL2) {
                // WebGL 2
                state.rectAreaLTC1 = UniformsLib.LTC_FLOAT_1;
                state.rectAreaLTC2 = UniformsLib.LTC_FLOAT_2;
            } else {
                // WebGL 1
                if (extensions.has("OES_texture_float_linear") === true) {
                    state.rectAreaLTC1 = UniformsLib.LTC_FLOAT_1;
                    state.rectAreaLTC2 = UniformsLib.LTC_FLOAT_2;
                } else if (extensions.has("OES_texture_half_float_linear") === true) {
                    state.rectAreaLTC1 = UniformsLib.LTC_HALF_1;
                    state.rectAreaLTC2 = UniformsLib.LTC_HALF_2;
                } else console.error("THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.");
            }
        }
        state.ambient[0] = r;
        state.ambient[1] = g;
        state.ambient[2] = b;
        const hash = state.hash;
        if (hash.directionalLength !== directionalLength || hash.pointLength !== pointLength || hash.spotLength !== spotLength || hash.rectAreaLength !== rectAreaLength || hash.hemiLength !== hemiLength || hash.numDirectionalShadows !== numDirectionalShadows || hash.numPointShadows !== numPointShadows || hash.numSpotShadows !== numSpotShadows || hash.numSpotMaps !== numSpotMaps) {
            state.directional.length = directionalLength;
            state.spot.length = spotLength;
            state.rectArea.length = rectAreaLength;
            state.point.length = pointLength;
            state.hemi.length = hemiLength;
            state.directionalShadow.length = numDirectionalShadows;
            state.directionalShadowMap.length = numDirectionalShadows;
            state.pointShadow.length = numPointShadows;
            state.pointShadowMap.length = numPointShadows;
            state.spotShadow.length = numSpotShadows;
            state.spotShadowMap.length = numSpotShadows;
            state.directionalShadowMatrix.length = numDirectionalShadows;
            state.pointShadowMatrix.length = numPointShadows;
            state.spotLightMatrix.length = numSpotShadows + numSpotMaps - numSpotShadowsWithMaps;
            state.spotLightMap.length = numSpotMaps;
            state.numSpotLightShadowsWithMaps = numSpotShadowsWithMaps;
            hash.directionalLength = directionalLength;
            hash.pointLength = pointLength;
            hash.spotLength = spotLength;
            hash.rectAreaLength = rectAreaLength;
            hash.hemiLength = hemiLength;
            hash.numDirectionalShadows = numDirectionalShadows;
            hash.numPointShadows = numPointShadows;
            hash.numSpotShadows = numSpotShadows;
            hash.numSpotMaps = numSpotMaps;
            state.version = nextVersion++;
        }
    }
    function setupView(lights, camera) {
        let directionalLength = 0;
        let pointLength = 0;
        let spotLength = 0;
        let rectAreaLength = 0;
        let hemiLength = 0;
        const viewMatrix = camera.matrixWorldInverse;
        for(let i = 0, l = lights.length; i < l; i++){
            const light = lights[i];
            if (light.isDirectionalLight) {
                const uniforms = state.directional[directionalLength];
                uniforms.direction.setFromMatrixPosition(light.matrixWorld);
                vector3.setFromMatrixPosition(light.target.matrixWorld);
                uniforms.direction.sub(vector3);
                uniforms.direction.transformDirection(viewMatrix);
                directionalLength++;
            } else if (light.isSpotLight) {
                const uniforms = state.spot[spotLength];
                uniforms.position.setFromMatrixPosition(light.matrixWorld);
                uniforms.position.applyMatrix4(viewMatrix);
                uniforms.direction.setFromMatrixPosition(light.matrixWorld);
                vector3.setFromMatrixPosition(light.target.matrixWorld);
                uniforms.direction.sub(vector3);
                uniforms.direction.transformDirection(viewMatrix);
                spotLength++;
            } else if (light.isRectAreaLight) {
                const uniforms = state.rectArea[rectAreaLength];
                uniforms.position.setFromMatrixPosition(light.matrixWorld);
                uniforms.position.applyMatrix4(viewMatrix);
                // extract local rotation of light to derive width/height half vectors
                matrix42.identity();
                matrix4.copy(light.matrixWorld);
                matrix4.premultiply(viewMatrix);
                matrix42.extractRotation(matrix4);
                uniforms.halfWidth.set(light.width * 0.5, 0.0, 0.0);
                uniforms.halfHeight.set(0.0, light.height * 0.5, 0.0);
                uniforms.halfWidth.applyMatrix4(matrix42);
                uniforms.halfHeight.applyMatrix4(matrix42);
                rectAreaLength++;
            } else if (light.isPointLight) {
                const uniforms = state.point[pointLength];
                uniforms.position.setFromMatrixPosition(light.matrixWorld);
                uniforms.position.applyMatrix4(viewMatrix);
                pointLength++;
            } else if (light.isHemisphereLight) {
                const uniforms = state.hemi[hemiLength];
                uniforms.direction.setFromMatrixPosition(light.matrixWorld);
                uniforms.direction.transformDirection(viewMatrix);
                hemiLength++;
            }
        }
    }
    return {
        setup: setup,
        setupView: setupView,
        state: state
    };
}
function WebGLRenderState(extensions, capabilities) {
    const lights = new WebGLLights(extensions, capabilities);
    const lightsArray = [];
    const shadowsArray = [];
    function init() {
        lightsArray.length = 0;
        shadowsArray.length = 0;
    }
    function pushLight(light) {
        lightsArray.push(light);
    }
    function pushShadow(shadowLight) {
        shadowsArray.push(shadowLight);
    }
    function setupLights(useLegacyLights) {
        lights.setup(lightsArray, useLegacyLights);
    }
    function setupLightsView(camera) {
        lights.setupView(lightsArray, camera);
    }
    const state = {
        lightsArray: lightsArray,
        shadowsArray: shadowsArray,
        lights: lights
    };
    return {
        init: init,
        state: state,
        setupLights: setupLights,
        setupLightsView: setupLightsView,
        pushLight: pushLight,
        pushShadow: pushShadow
    };
}
function WebGLRenderStates(extensions, capabilities) {
    let renderStates = new WeakMap();
    function get(scene, renderCallDepth = 0) {
        const renderStateArray = renderStates.get(scene);
        let renderState;
        if (renderStateArray === undefined) {
            renderState = new WebGLRenderState(extensions, capabilities);
            renderStates.set(scene, [
                renderState
            ]);
        } else if (renderCallDepth >= renderStateArray.length) {
            renderState = new WebGLRenderState(extensions, capabilities);
            renderStateArray.push(renderState);
        } else renderState = renderStateArray[renderCallDepth];
        return renderState;
    }
    function dispose() {
        renderStates = new WeakMap();
    }
    return {
        get: get,
        dispose: dispose
    };
}
class MeshDepthMaterial extends Material {
    constructor(parameters){
        super();
        this.isMeshDepthMaterial = true;
        this.type = "MeshDepthMaterial";
        this.depthPacking = BasicDepthPacking;
        this.map = null;
        this.alphaMap = null;
        this.displacementMap = null;
        this.displacementScale = 1;
        this.displacementBias = 0;
        this.wireframe = false;
        this.wireframeLinewidth = 1;
        this.setValues(parameters);
    }
    copy(source) {
        super.copy(source);
        this.depthPacking = source.depthPacking;
        this.map = source.map;
        this.alphaMap = source.alphaMap;
        this.displacementMap = source.displacementMap;
        this.displacementScale = source.displacementScale;
        this.displacementBias = source.displacementBias;
        this.wireframe = source.wireframe;
        this.wireframeLinewidth = source.wireframeLinewidth;
        return this;
    }
}
class MeshDistanceMaterial extends Material {
    constructor(parameters){
        super();
        this.isMeshDistanceMaterial = true;
        this.type = "MeshDistanceMaterial";
        this.map = null;
        this.alphaMap = null;
        this.displacementMap = null;
        this.displacementScale = 1;
        this.displacementBias = 0;
        this.setValues(parameters);
    }
    copy(source) {
        super.copy(source);
        this.map = source.map;
        this.alphaMap = source.alphaMap;
        this.displacementMap = source.displacementMap;
        this.displacementScale = source.displacementScale;
        this.displacementBias = source.displacementBias;
        return this;
    }
}
const vertex = "void main() {\n	gl_Position = vec4( position, 1.0 );\n}";
const fragment = "uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include <packing>\nvoid main() {\n	const float samples = float( VSM_SAMPLES );\n	float mean = 0.0;\n	float squared_mean = 0.0;\n	float uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );\n	float uvStart = samples <= 1.0 ? 0.0 : - 1.0;\n	for ( float i = 0.0; i < samples; i ++ ) {\n		float uvOffset = uvStart + i * uvStride;\n		#ifdef HORIZONTAL_PASS\n			vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );\n			mean += distribution.x;\n			squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n		#else\n			float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );\n			mean += depth;\n			squared_mean += depth * depth;\n		#endif\n	}\n	mean = mean / samples;\n	squared_mean = squared_mean / samples;\n	float std_dev = sqrt( squared_mean - mean * mean );\n	gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\n}";
function WebGLShadowMap(_renderer, _objects, _capabilities) {
    let _frustum = new Frustum();
    const _shadowMapSize = new Vector2(), _viewportSize = new Vector2(), _viewport = new Vector4(), _depthMaterial = new MeshDepthMaterial({
        depthPacking: RGBADepthPacking
    }), _distanceMaterial = new MeshDistanceMaterial(), _materialCache = {}, _maxTextureSize = _capabilities.maxTextureSize;
    const shadowSide = {
        [FrontSide]: BackSide,
        [BackSide]: FrontSide,
        [DoubleSide]: DoubleSide
    };
    const shadowMaterialVertical = new ShaderMaterial({
        defines: {
            VSM_SAMPLES: 8
        },
        uniforms: {
            shadow_pass: {
                value: null
            },
            resolution: {
                value: new Vector2()
            },
            radius: {
                value: 4.0
            }
        },
        vertexShader: vertex,
        fragmentShader: fragment
    });
    const shadowMaterialHorizontal = shadowMaterialVertical.clone();
    shadowMaterialHorizontal.defines.HORIZONTAL_PASS = 1;
    const fullScreenTri = new BufferGeometry();
    fullScreenTri.setAttribute("position", new BufferAttribute(new Float32Array([
        -1,
        -1,
        0.5,
        3,
        -1,
        0.5,
        -1,
        3,
        0.5
    ]), 3));
    const fullScreenMesh = new Mesh(fullScreenTri, shadowMaterialVertical);
    const scope = this;
    this.enabled = false;
    this.autoUpdate = true;
    this.needsUpdate = false;
    this.type = PCFShadowMap;
    let _previousType = this.type;
    this.render = function(lights, scene, camera) {
        if (scope.enabled === false) return;
        if (scope.autoUpdate === false && scope.needsUpdate === false) return;
        if (lights.length === 0) return;
        const currentRenderTarget = _renderer.getRenderTarget();
        const activeCubeFace = _renderer.getActiveCubeFace();
        const activeMipmapLevel = _renderer.getActiveMipmapLevel();
        const _state = _renderer.state;
        // Set GL state for depth map.
        _state.setBlending(NoBlending);
        _state.buffers.color.setClear(1, 1, 1, 1);
        _state.buffers.depth.setTest(true);
        _state.setScissorTest(false);
        // check for shadow map type changes
        const toVSM = _previousType !== VSMShadowMap && this.type === VSMShadowMap;
        const fromVSM = _previousType === VSMShadowMap && this.type !== VSMShadowMap;
        // render depth map
        for(let i = 0, il = lights.length; i < il; i++){
            const light = lights[i];
            const shadow = light.shadow;
            if (shadow === undefined) {
                console.warn("THREE.WebGLShadowMap:", light, "has no shadow.");
                continue;
            }
            if (shadow.autoUpdate === false && shadow.needsUpdate === false) continue;
            _shadowMapSize.copy(shadow.mapSize);
            const shadowFrameExtents = shadow.getFrameExtents();
            _shadowMapSize.multiply(shadowFrameExtents);
            _viewportSize.copy(shadow.mapSize);
            if (_shadowMapSize.x > _maxTextureSize || _shadowMapSize.y > _maxTextureSize) {
                if (_shadowMapSize.x > _maxTextureSize) {
                    _viewportSize.x = Math.floor(_maxTextureSize / shadowFrameExtents.x);
                    _shadowMapSize.x = _viewportSize.x * shadowFrameExtents.x;
                    shadow.mapSize.x = _viewportSize.x;
                }
                if (_shadowMapSize.y > _maxTextureSize) {
                    _viewportSize.y = Math.floor(_maxTextureSize / shadowFrameExtents.y);
                    _shadowMapSize.y = _viewportSize.y * shadowFrameExtents.y;
                    shadow.mapSize.y = _viewportSize.y;
                }
            }
            if (shadow.map === null || toVSM === true || fromVSM === true) {
                const pars = this.type !== VSMShadowMap ? {
                    minFilter: NearestFilter,
                    magFilter: NearestFilter
                } : {};
                if (shadow.map !== null) shadow.map.dispose();
                shadow.map = new WebGLRenderTarget(_shadowMapSize.x, _shadowMapSize.y, pars);
                shadow.map.texture.name = light.name + ".shadowMap";
                shadow.camera.updateProjectionMatrix();
            }
            _renderer.setRenderTarget(shadow.map);
            _renderer.clear();
            const viewportCount = shadow.getViewportCount();
            for(let vp = 0; vp < viewportCount; vp++){
                const viewport = shadow.getViewport(vp);
                _viewport.set(_viewportSize.x * viewport.x, _viewportSize.y * viewport.y, _viewportSize.x * viewport.z, _viewportSize.y * viewport.w);
                _state.viewport(_viewport);
                shadow.updateMatrices(light, vp);
                _frustum = shadow.getFrustum();
                renderObject(scene, camera, shadow.camera, light, this.type);
            }
            // do blur pass for VSM
            if (shadow.isPointLightShadow !== true && this.type === VSMShadowMap) VSMPass(shadow, camera);
            shadow.needsUpdate = false;
        }
        _previousType = this.type;
        scope.needsUpdate = false;
        _renderer.setRenderTarget(currentRenderTarget, activeCubeFace, activeMipmapLevel);
    };
    function VSMPass(shadow, camera) {
        const geometry = _objects.update(fullScreenMesh);
        if (shadowMaterialVertical.defines.VSM_SAMPLES !== shadow.blurSamples) {
            shadowMaterialVertical.defines.VSM_SAMPLES = shadow.blurSamples;
            shadowMaterialHorizontal.defines.VSM_SAMPLES = shadow.blurSamples;
            shadowMaterialVertical.needsUpdate = true;
            shadowMaterialHorizontal.needsUpdate = true;
        }
        if (shadow.mapPass === null) shadow.mapPass = new WebGLRenderTarget(_shadowMapSize.x, _shadowMapSize.y);
        // vertical pass
        shadowMaterialVertical.uniforms.shadow_pass.value = shadow.map.texture;
        shadowMaterialVertical.uniforms.resolution.value = shadow.mapSize;
        shadowMaterialVertical.uniforms.radius.value = shadow.radius;
        _renderer.setRenderTarget(shadow.mapPass);
        _renderer.clear();
        _renderer.renderBufferDirect(camera, null, geometry, shadowMaterialVertical, fullScreenMesh, null);
        // horizontal pass
        shadowMaterialHorizontal.uniforms.shadow_pass.value = shadow.mapPass.texture;
        shadowMaterialHorizontal.uniforms.resolution.value = shadow.mapSize;
        shadowMaterialHorizontal.uniforms.radius.value = shadow.radius;
        _renderer.setRenderTarget(shadow.map);
        _renderer.clear();
        _renderer.renderBufferDirect(camera, null, geometry, shadowMaterialHorizontal, fullScreenMesh, null);
    }
    function getDepthMaterial(object, material, light, type) {
        let result = null;
        const customMaterial = light.isPointLight === true ? object.customDistanceMaterial : object.customDepthMaterial;
        if (customMaterial !== undefined) result = customMaterial;
        else {
            result = light.isPointLight === true ? _distanceMaterial : _depthMaterial;
            if (_renderer.localClippingEnabled && material.clipShadows === true && Array.isArray(material.clippingPlanes) && material.clippingPlanes.length !== 0 || material.displacementMap && material.displacementScale !== 0 || material.alphaMap && material.alphaTest > 0 || material.map && material.alphaTest > 0) {
                // in this case we need a unique material instance reflecting the
                // appropriate state
                const keyA = result.uuid, keyB = material.uuid;
                let materialsForVariant = _materialCache[keyA];
                if (materialsForVariant === undefined) {
                    materialsForVariant = {};
                    _materialCache[keyA] = materialsForVariant;
                }
                let cachedMaterial = materialsForVariant[keyB];
                if (cachedMaterial === undefined) {
                    cachedMaterial = result.clone();
                    materialsForVariant[keyB] = cachedMaterial;
                }
                result = cachedMaterial;
            }
        }
        result.visible = material.visible;
        result.wireframe = material.wireframe;
        if (type === VSMShadowMap) result.side = material.shadowSide !== null ? material.shadowSide : material.side;
        else result.side = material.shadowSide !== null ? material.shadowSide : shadowSide[material.side];
        result.alphaMap = material.alphaMap;
        result.alphaTest = material.alphaTest;
        result.map = material.map;
        result.clipShadows = material.clipShadows;
        result.clippingPlanes = material.clippingPlanes;
        result.clipIntersection = material.clipIntersection;
        result.displacementMap = material.displacementMap;
        result.displacementScale = material.displacementScale;
        result.displacementBias = material.displacementBias;
        result.wireframeLinewidth = material.wireframeLinewidth;
        result.linewidth = material.linewidth;
        if (light.isPointLight === true && result.isMeshDistanceMaterial === true) {
            const materialProperties = _renderer.properties.get(result);
            materialProperties.light = light;
        }
        return result;
    }
    function renderObject(object, camera, shadowCamera, light, type) {
        if (object.visible === false) return;
        const visible = object.layers.test(camera.layers);
        if (visible && (object.isMesh || object.isLine || object.isPoints)) {
            if ((object.castShadow || object.receiveShadow && type === VSMShadowMap) && (!object.frustumCulled || _frustum.intersectsObject(object))) {
                object.modelViewMatrix.multiplyMatrices(shadowCamera.matrixWorldInverse, object.matrixWorld);
                const geometry = _objects.update(object);
                const material = object.material;
                if (Array.isArray(material)) {
                    const groups = geometry.groups;
                    for(let k = 0, kl = groups.length; k < kl; k++){
                        const group = groups[k];
                        const groupMaterial = material[group.materialIndex];
                        if (groupMaterial && groupMaterial.visible) {
                            const depthMaterial = getDepthMaterial(object, groupMaterial, light, type);
                            _renderer.renderBufferDirect(shadowCamera, null, geometry, depthMaterial, object, group);
                        }
                    }
                } else if (material.visible) {
                    const depthMaterial = getDepthMaterial(object, material, light, type);
                    _renderer.renderBufferDirect(shadowCamera, null, geometry, depthMaterial, object, null);
                }
            }
        }
        const children = object.children;
        for(let i = 0, l = children.length; i < l; i++)renderObject(children[i], camera, shadowCamera, light, type);
    }
}
function WebGLState(gl, extensions, capabilities) {
    const isWebGL2 = capabilities.isWebGL2;
    function ColorBuffer() {
        let locked = false;
        const color = new Vector4();
        let currentColorMask = null;
        const currentColorClear = new Vector4(0, 0, 0, 0);
        return {
            setMask: function(colorMask) {
                if (currentColorMask !== colorMask && !locked) {
                    gl.colorMask(colorMask, colorMask, colorMask, colorMask);
                    currentColorMask = colorMask;
                }
            },
            setLocked: function(lock) {
                locked = lock;
            },
            setClear: function(r, g, b, a, premultipliedAlpha) {
                if (premultipliedAlpha === true) {
                    r *= a;
                    g *= a;
                    b *= a;
                }
                color.set(r, g, b, a);
                if (currentColorClear.equals(color) === false) {
                    gl.clearColor(r, g, b, a);
                    currentColorClear.copy(color);
                }
            },
            reset: function() {
                locked = false;
                currentColorMask = null;
                currentColorClear.set(-1, 0, 0, 0); // set to invalid state
            }
        };
    }
    function DepthBuffer() {
        let locked = false;
        let currentDepthMask = null;
        let currentDepthFunc = null;
        let currentDepthClear = null;
        return {
            setTest: function(depthTest) {
                if (depthTest) enable(gl.DEPTH_TEST);
                else disable(gl.DEPTH_TEST);
            },
            setMask: function(depthMask) {
                if (currentDepthMask !== depthMask && !locked) {
                    gl.depthMask(depthMask);
                    currentDepthMask = depthMask;
                }
            },
            setFunc: function(depthFunc) {
                if (currentDepthFunc !== depthFunc) {
                    switch(depthFunc){
                        case NeverDepth:
                            gl.depthFunc(gl.NEVER);
                            break;
                        case AlwaysDepth:
                            gl.depthFunc(gl.ALWAYS);
                            break;
                        case LessDepth:
                            gl.depthFunc(gl.LESS);
                            break;
                        case LessEqualDepth:
                            gl.depthFunc(gl.LEQUAL);
                            break;
                        case EqualDepth:
                            gl.depthFunc(gl.EQUAL);
                            break;
                        case GreaterEqualDepth:
                            gl.depthFunc(gl.GEQUAL);
                            break;
                        case GreaterDepth:
                            gl.depthFunc(gl.GREATER);
                            break;
                        case NotEqualDepth:
                            gl.depthFunc(gl.NOTEQUAL);
                            break;
                        default:
                            gl.depthFunc(gl.LEQUAL);
                    }
                    currentDepthFunc = depthFunc;
                }
            },
            setLocked: function(lock) {
                locked = lock;
            },
            setClear: function(depth) {
                if (currentDepthClear !== depth) {
                    gl.clearDepth(depth);
                    currentDepthClear = depth;
                }
            },
            reset: function() {
                locked = false;
                currentDepthMask = null;
                currentDepthFunc = null;
                currentDepthClear = null;
            }
        };
    }
    function StencilBuffer() {
        let locked = false;
        let currentStencilMask = null;
        let currentStencilFunc = null;
        let currentStencilRef = null;
        let currentStencilFuncMask = null;
        let currentStencilFail = null;
        let currentStencilZFail = null;
        let currentStencilZPass = null;
        let currentStencilClear = null;
        return {
            setTest: function(stencilTest) {
                if (!locked) {
                    if (stencilTest) enable(gl.STENCIL_TEST);
                    else disable(gl.STENCIL_TEST);
                }
            },
            setMask: function(stencilMask) {
                if (currentStencilMask !== stencilMask && !locked) {
                    gl.stencilMask(stencilMask);
                    currentStencilMask = stencilMask;
                }
            },
            setFunc: function(stencilFunc, stencilRef, stencilMask) {
                if (currentStencilFunc !== stencilFunc || currentStencilRef !== stencilRef || currentStencilFuncMask !== stencilMask) {
                    gl.stencilFunc(stencilFunc, stencilRef, stencilMask);
                    currentStencilFunc = stencilFunc;
                    currentStencilRef = stencilRef;
                    currentStencilFuncMask = stencilMask;
                }
            },
            setOp: function(stencilFail, stencilZFail, stencilZPass) {
                if (currentStencilFail !== stencilFail || currentStencilZFail !== stencilZFail || currentStencilZPass !== stencilZPass) {
                    gl.stencilOp(stencilFail, stencilZFail, stencilZPass);
                    currentStencilFail = stencilFail;
                    currentStencilZFail = stencilZFail;
                    currentStencilZPass = stencilZPass;
                }
            },
            setLocked: function(lock) {
                locked = lock;
            },
            setClear: function(stencil) {
                if (currentStencilClear !== stencil) {
                    gl.clearStencil(stencil);
                    currentStencilClear = stencil;
                }
            },
            reset: function() {
                locked = false;
                currentStencilMask = null;
                currentStencilFunc = null;
                currentStencilRef = null;
                currentStencilFuncMask = null;
                currentStencilFail = null;
                currentStencilZFail = null;
                currentStencilZPass = null;
                currentStencilClear = null;
            }
        };
    }
    //
    const colorBuffer = new ColorBuffer();
    const depthBuffer = new DepthBuffer();
    const stencilBuffer = new StencilBuffer();
    const uboBindings = new WeakMap();
    const uboProgramMap = new WeakMap();
    let enabledCapabilities = {};
    let currentBoundFramebuffers = {};
    let currentDrawbuffers = new WeakMap();
    let defaultDrawbuffers = [];
    let currentProgram = null;
    let currentBlendingEnabled = false;
    let currentBlending = null;
    let currentBlendEquation = null;
    let currentBlendSrc = null;
    let currentBlendDst = null;
    let currentBlendEquationAlpha = null;
    let currentBlendSrcAlpha = null;
    let currentBlendDstAlpha = null;
    let currentPremultipledAlpha = false;
    let currentFlipSided = null;
    let currentCullFace = null;
    let currentLineWidth = null;
    let currentPolygonOffsetFactor = null;
    let currentPolygonOffsetUnits = null;
    const maxTextures = gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);
    let lineWidthAvailable = false;
    let version = 0;
    const glVersion = gl.getParameter(gl.VERSION);
    if (glVersion.indexOf("WebGL") !== -1) {
        version = parseFloat(/^WebGL (\d)/.exec(glVersion)[1]);
        lineWidthAvailable = version >= 1.0;
    } else if (glVersion.indexOf("OpenGL ES") !== -1) {
        version = parseFloat(/^OpenGL ES (\d)/.exec(glVersion)[1]);
        lineWidthAvailable = version >= 2.0;
    }
    let currentTextureSlot = null;
    let currentBoundTextures = {};
    const scissorParam = gl.getParameter(gl.SCISSOR_BOX);
    const viewportParam = gl.getParameter(gl.VIEWPORT);
    const currentScissor = new Vector4().fromArray(scissorParam);
    const currentViewport = new Vector4().fromArray(viewportParam);
    function createTexture(type, target, count, dimensions) {
        const data = new Uint8Array(4); // 4 is required to match default unpack alignment of 4.
        const texture = gl.createTexture();
        gl.bindTexture(type, texture);
        gl.texParameteri(type, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
        gl.texParameteri(type, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
        for(let i = 0; i < count; i++)if (isWebGL2 && (type === gl.TEXTURE_3D || type === gl.TEXTURE_2D_ARRAY)) gl.texImage3D(target, 0, gl.RGBA, 1, 1, dimensions, 0, gl.RGBA, gl.UNSIGNED_BYTE, data);
        else gl.texImage2D(target + i, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, data);
        return texture;
    }
    const emptyTextures = {};
    emptyTextures[gl.TEXTURE_2D] = createTexture(gl.TEXTURE_2D, gl.TEXTURE_2D, 1);
    emptyTextures[gl.TEXTURE_CUBE_MAP] = createTexture(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_CUBE_MAP_POSITIVE_X, 6);
    if (isWebGL2) {
        emptyTextures[gl.TEXTURE_2D_ARRAY] = createTexture(gl.TEXTURE_2D_ARRAY, gl.TEXTURE_2D_ARRAY, 1, 1);
        emptyTextures[gl.TEXTURE_3D] = createTexture(gl.TEXTURE_3D, gl.TEXTURE_3D, 1, 1);
    }
    // init
    colorBuffer.setClear(0, 0, 0, 1);
    depthBuffer.setClear(1);
    stencilBuffer.setClear(0);
    enable(gl.DEPTH_TEST);
    depthBuffer.setFunc(LessEqualDepth);
    setFlipSided(false);
    setCullFace(CullFaceBack);
    enable(gl.CULL_FACE);
    setBlending(NoBlending);
    //
    function enable(id) {
        if (enabledCapabilities[id] !== true) {
            gl.enable(id);
            enabledCapabilities[id] = true;
        }
    }
    function disable(id) {
        if (enabledCapabilities[id] !== false) {
            gl.disable(id);
            enabledCapabilities[id] = false;
        }
    }
    function bindFramebuffer(target, framebuffer) {
        if (currentBoundFramebuffers[target] !== framebuffer) {
            gl.bindFramebuffer(target, framebuffer);
            currentBoundFramebuffers[target] = framebuffer;
            if (isWebGL2) {
                // gl.DRAW_FRAMEBUFFER is equivalent to gl.FRAMEBUFFER
                if (target === gl.DRAW_FRAMEBUFFER) currentBoundFramebuffers[gl.FRAMEBUFFER] = framebuffer;
                if (target === gl.FRAMEBUFFER) currentBoundFramebuffers[gl.DRAW_FRAMEBUFFER] = framebuffer;
            }
            return true;
        }
        return false;
    }
    function drawBuffers(renderTarget, framebuffer) {
        let drawBuffers = defaultDrawbuffers;
        let needsUpdate = false;
        if (renderTarget) {
            drawBuffers = currentDrawbuffers.get(framebuffer);
            if (drawBuffers === undefined) {
                drawBuffers = [];
                currentDrawbuffers.set(framebuffer, drawBuffers);
            }
            if (renderTarget.isWebGLMultipleRenderTargets) {
                const textures = renderTarget.texture;
                if (drawBuffers.length !== textures.length || drawBuffers[0] !== gl.COLOR_ATTACHMENT0) {
                    for(let i = 0, il = textures.length; i < il; i++)drawBuffers[i] = gl.COLOR_ATTACHMENT0 + i;
                    drawBuffers.length = textures.length;
                    needsUpdate = true;
                }
            } else if (drawBuffers[0] !== gl.COLOR_ATTACHMENT0) {
                drawBuffers[0] = gl.COLOR_ATTACHMENT0;
                needsUpdate = true;
            }
        } else if (drawBuffers[0] !== gl.BACK) {
            drawBuffers[0] = gl.BACK;
            needsUpdate = true;
        }
        if (needsUpdate) {
            if (capabilities.isWebGL2) gl.drawBuffers(drawBuffers);
            else extensions.get("WEBGL_draw_buffers").drawBuffersWEBGL(drawBuffers);
        }
    }
    function useProgram(program) {
        if (currentProgram !== program) {
            gl.useProgram(program);
            currentProgram = program;
            return true;
        }
        return false;
    }
    const equationToGL = {
        [AddEquation]: gl.FUNC_ADD,
        [SubtractEquation]: gl.FUNC_SUBTRACT,
        [ReverseSubtractEquation]: gl.FUNC_REVERSE_SUBTRACT
    };
    if (isWebGL2) {
        equationToGL[MinEquation] = gl.MIN;
        equationToGL[MaxEquation] = gl.MAX;
    } else {
        const extension = extensions.get("EXT_blend_minmax");
        if (extension !== null) {
            equationToGL[MinEquation] = extension.MIN_EXT;
            equationToGL[MaxEquation] = extension.MAX_EXT;
        }
    }
    const factorToGL = {
        [ZeroFactor]: gl.ZERO,
        [OneFactor]: gl.ONE,
        [SrcColorFactor]: gl.SRC_COLOR,
        [SrcAlphaFactor]: gl.SRC_ALPHA,
        [SrcAlphaSaturateFactor]: gl.SRC_ALPHA_SATURATE,
        [DstColorFactor]: gl.DST_COLOR,
        [DstAlphaFactor]: gl.DST_ALPHA,
        [OneMinusSrcColorFactor]: gl.ONE_MINUS_SRC_COLOR,
        [OneMinusSrcAlphaFactor]: gl.ONE_MINUS_SRC_ALPHA,
        [OneMinusDstColorFactor]: gl.ONE_MINUS_DST_COLOR,
        [OneMinusDstAlphaFactor]: gl.ONE_MINUS_DST_ALPHA
    };
    function setBlending(blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha) {
        if (blending === NoBlending) {
            if (currentBlendingEnabled === true) {
                disable(gl.BLEND);
                currentBlendingEnabled = false;
            }
            return;
        }
        if (currentBlendingEnabled === false) {
            enable(gl.BLEND);
            currentBlendingEnabled = true;
        }
        if (blending !== CustomBlending) {
            if (blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha) {
                if (currentBlendEquation !== AddEquation || currentBlendEquationAlpha !== AddEquation) {
                    gl.blendEquation(gl.FUNC_ADD);
                    currentBlendEquation = AddEquation;
                    currentBlendEquationAlpha = AddEquation;
                }
                if (premultipliedAlpha) switch(blending){
                    case NormalBlending:
                        gl.blendFuncSeparate(gl.ONE, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);
                        break;
                    case AdditiveBlending:
                        gl.blendFunc(gl.ONE, gl.ONE);
                        break;
                    case SubtractiveBlending:
                        gl.blendFuncSeparate(gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ZERO, gl.ONE);
                        break;
                    case MultiplyBlending:
                        gl.blendFuncSeparate(gl.ZERO, gl.SRC_COLOR, gl.ZERO, gl.SRC_ALPHA);
                        break;
                    default:
                        console.error("THREE.WebGLState: Invalid blending: ", blending);
                        break;
                }
                else switch(blending){
                    case NormalBlending:
                        gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);
                        break;
                    case AdditiveBlending:
                        gl.blendFunc(gl.SRC_ALPHA, gl.ONE);
                        break;
                    case SubtractiveBlending:
                        gl.blendFuncSeparate(gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ZERO, gl.ONE);
                        break;
                    case MultiplyBlending:
                        gl.blendFunc(gl.ZERO, gl.SRC_COLOR);
                        break;
                    default:
                        console.error("THREE.WebGLState: Invalid blending: ", blending);
                        break;
                }
                currentBlendSrc = null;
                currentBlendDst = null;
                currentBlendSrcAlpha = null;
                currentBlendDstAlpha = null;
                currentBlending = blending;
                currentPremultipledAlpha = premultipliedAlpha;
            }
            return;
        }
        // custom blending
        blendEquationAlpha = blendEquationAlpha || blendEquation;
        blendSrcAlpha = blendSrcAlpha || blendSrc;
        blendDstAlpha = blendDstAlpha || blendDst;
        if (blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha) {
            gl.blendEquationSeparate(equationToGL[blendEquation], equationToGL[blendEquationAlpha]);
            currentBlendEquation = blendEquation;
            currentBlendEquationAlpha = blendEquationAlpha;
        }
        if (blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha) {
            gl.blendFuncSeparate(factorToGL[blendSrc], factorToGL[blendDst], factorToGL[blendSrcAlpha], factorToGL[blendDstAlpha]);
            currentBlendSrc = blendSrc;
            currentBlendDst = blendDst;
            currentBlendSrcAlpha = blendSrcAlpha;
            currentBlendDstAlpha = blendDstAlpha;
        }
        currentBlending = blending;
        currentPremultipledAlpha = false;
    }
    function setMaterial(material, frontFaceCW) {
        material.side === DoubleSide ? disable(gl.CULL_FACE) : enable(gl.CULL_FACE);
        let flipSided = material.side === BackSide;
        if (frontFaceCW) flipSided = !flipSided;
        setFlipSided(flipSided);
        material.blending === NormalBlending && material.transparent === false ? setBlending(NoBlending) : setBlending(material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha);
        depthBuffer.setFunc(material.depthFunc);
        depthBuffer.setTest(material.depthTest);
        depthBuffer.setMask(material.depthWrite);
        colorBuffer.setMask(material.colorWrite);
        const stencilWrite = material.stencilWrite;
        stencilBuffer.setTest(stencilWrite);
        if (stencilWrite) {
            stencilBuffer.setMask(material.stencilWriteMask);
            stencilBuffer.setFunc(material.stencilFunc, material.stencilRef, material.stencilFuncMask);
            stencilBuffer.setOp(material.stencilFail, material.stencilZFail, material.stencilZPass);
        }
        setPolygonOffset(material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits);
        material.alphaToCoverage === true ? enable(gl.SAMPLE_ALPHA_TO_COVERAGE) : disable(gl.SAMPLE_ALPHA_TO_COVERAGE);
    }
    //
    function setFlipSided(flipSided) {
        if (currentFlipSided !== flipSided) {
            if (flipSided) gl.frontFace(gl.CW);
            else gl.frontFace(gl.CCW);
            currentFlipSided = flipSided;
        }
    }
    function setCullFace(cullFace) {
        if (cullFace !== CullFaceNone) {
            enable(gl.CULL_FACE);
            if (cullFace !== currentCullFace) {
                if (cullFace === CullFaceBack) gl.cullFace(gl.BACK);
                else if (cullFace === CullFaceFront) gl.cullFace(gl.FRONT);
                else gl.cullFace(gl.FRONT_AND_BACK);
            }
        } else disable(gl.CULL_FACE);
        currentCullFace = cullFace;
    }
    function setLineWidth(width) {
        if (width !== currentLineWidth) {
            if (lineWidthAvailable) gl.lineWidth(width);
            currentLineWidth = width;
        }
    }
    function setPolygonOffset(polygonOffset, factor, units) {
        if (polygonOffset) {
            enable(gl.POLYGON_OFFSET_FILL);
            if (currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units) {
                gl.polygonOffset(factor, units);
                currentPolygonOffsetFactor = factor;
                currentPolygonOffsetUnits = units;
            }
        } else disable(gl.POLYGON_OFFSET_FILL);
    }
    function setScissorTest(scissorTest) {
        if (scissorTest) enable(gl.SCISSOR_TEST);
        else disable(gl.SCISSOR_TEST);
    }
    // texture
    function activeTexture(webglSlot) {
        if (webglSlot === undefined) webglSlot = gl.TEXTURE0 + maxTextures - 1;
        if (currentTextureSlot !== webglSlot) {
            gl.activeTexture(webglSlot);
            currentTextureSlot = webglSlot;
        }
    }
    function bindTexture(webglType, webglTexture, webglSlot) {
        if (webglSlot === undefined) {
            if (currentTextureSlot === null) webglSlot = gl.TEXTURE0 + maxTextures - 1;
            else webglSlot = currentTextureSlot;
        }
        let boundTexture = currentBoundTextures[webglSlot];
        if (boundTexture === undefined) {
            boundTexture = {
                type: undefined,
                texture: undefined
            };
            currentBoundTextures[webglSlot] = boundTexture;
        }
        if (boundTexture.type !== webglType || boundTexture.texture !== webglTexture) {
            if (currentTextureSlot !== webglSlot) {
                gl.activeTexture(webglSlot);
                currentTextureSlot = webglSlot;
            }
            gl.bindTexture(webglType, webglTexture || emptyTextures[webglType]);
            boundTexture.type = webglType;
            boundTexture.texture = webglTexture;
        }
    }
    function unbindTexture() {
        const boundTexture = currentBoundTextures[currentTextureSlot];
        if (boundTexture !== undefined && boundTexture.type !== undefined) {
            gl.bindTexture(boundTexture.type, null);
            boundTexture.type = undefined;
            boundTexture.texture = undefined;
        }
    }
    function compressedTexImage2D() {
        try {
            gl.compressedTexImage2D.apply(gl, arguments);
        } catch (error) {
            console.error("THREE.WebGLState:", error);
        }
    }
    function compressedTexImage3D() {
        try {
            gl.compressedTexImage3D.apply(gl, arguments);
        } catch (error) {
            console.error("THREE.WebGLState:", error);
        }
    }
    function texSubImage2D() {
        try {
            gl.texSubImage2D.apply(gl, arguments);
        } catch (error) {
            console.error("THREE.WebGLState:", error);
        }
    }
    function texSubImage3D() {
        try {
            gl.texSubImage3D.apply(gl, arguments);
        } catch (error) {
            console.error("THREE.WebGLState:", error);
        }
    }
    function compressedTexSubImage2D() {
        try {
            gl.compressedTexSubImage2D.apply(gl, arguments);
        } catch (error) {
            console.error("THREE.WebGLState:", error);
        }
    }
    function compressedTexSubImage3D() {
        try {
            gl.compressedTexSubImage3D.apply(gl, arguments);
        } catch (error) {
            console.error("THREE.WebGLState:", error);
        }
    }
    function texStorage2D() {
        try {
            gl.texStorage2D.apply(gl, arguments);
        } catch (error) {
            console.error("THREE.WebGLState:", error);
        }
    }
    function texStorage3D() {
        try {
            gl.texStorage3D.apply(gl, arguments);
        } catch (error) {
            console.error("THREE.WebGLState:", error);
        }
    }
    function texImage2D() {
        try {
            gl.texImage2D.apply(gl, arguments);
        } catch (error) {
            console.error("THREE.WebGLState:", error);
        }
    }
    function texImage3D() {
        try {
            gl.texImage3D.apply(gl, arguments);
        } catch (error) {
            console.error("THREE.WebGLState:", error);
        }
    }
    //
    function scissor(scissor) {
        if (currentScissor.equals(scissor) === false) {
            gl.scissor(scissor.x, scissor.y, scissor.z, scissor.w);
            currentScissor.copy(scissor);
        }
    }
    function viewport(viewport) {
        if (currentViewport.equals(viewport) === false) {
            gl.viewport(viewport.x, viewport.y, viewport.z, viewport.w);
            currentViewport.copy(viewport);
        }
    }
    function updateUBOMapping(uniformsGroup, program) {
        let mapping = uboProgramMap.get(program);
        if (mapping === undefined) {
            mapping = new WeakMap();
            uboProgramMap.set(program, mapping);
        }
        let blockIndex = mapping.get(uniformsGroup);
        if (blockIndex === undefined) {
            blockIndex = gl.getUniformBlockIndex(program, uniformsGroup.name);
            mapping.set(uniformsGroup, blockIndex);
        }
    }
    function uniformBlockBinding(uniformsGroup, program) {
        const mapping = uboProgramMap.get(program);
        const blockIndex = mapping.get(uniformsGroup);
        if (uboBindings.get(program) !== blockIndex) {
            // bind shader specific block index to global block point
            gl.uniformBlockBinding(program, blockIndex, uniformsGroup.__bindingPointIndex);
            uboBindings.set(program, blockIndex);
        }
    }
    //
    function reset() {
        // reset state
        gl.disable(gl.BLEND);
        gl.disable(gl.CULL_FACE);
        gl.disable(gl.DEPTH_TEST);
        gl.disable(gl.POLYGON_OFFSET_FILL);
        gl.disable(gl.SCISSOR_TEST);
        gl.disable(gl.STENCIL_TEST);
        gl.disable(gl.SAMPLE_ALPHA_TO_COVERAGE);
        gl.blendEquation(gl.FUNC_ADD);
        gl.blendFunc(gl.ONE, gl.ZERO);
        gl.blendFuncSeparate(gl.ONE, gl.ZERO, gl.ONE, gl.ZERO);
        gl.colorMask(true, true, true, true);
        gl.clearColor(0, 0, 0, 0);
        gl.depthMask(true);
        gl.depthFunc(gl.LESS);
        gl.clearDepth(1);
        gl.stencilMask(0xffffffff);
        gl.stencilFunc(gl.ALWAYS, 0, 0xffffffff);
        gl.stencilOp(gl.KEEP, gl.KEEP, gl.KEEP);
        gl.clearStencil(0);
        gl.cullFace(gl.BACK);
        gl.frontFace(gl.CCW);
        gl.polygonOffset(0, 0);
        gl.activeTexture(gl.TEXTURE0);
        gl.bindFramebuffer(gl.FRAMEBUFFER, null);
        if (isWebGL2 === true) {
            gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, null);
            gl.bindFramebuffer(gl.READ_FRAMEBUFFER, null);
        }
        gl.useProgram(null);
        gl.lineWidth(1);
        gl.scissor(0, 0, gl.canvas.width, gl.canvas.height);
        gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);
        // reset internals
        enabledCapabilities = {};
        currentTextureSlot = null;
        currentBoundTextures = {};
        currentBoundFramebuffers = {};
        currentDrawbuffers = new WeakMap();
        defaultDrawbuffers = [];
        currentProgram = null;
        currentBlendingEnabled = false;
        currentBlending = null;
        currentBlendEquation = null;
        currentBlendSrc = null;
        currentBlendDst = null;
        currentBlendEquationAlpha = null;
        currentBlendSrcAlpha = null;
        currentBlendDstAlpha = null;
        currentPremultipledAlpha = false;
        currentFlipSided = null;
        currentCullFace = null;
        currentLineWidth = null;
        currentPolygonOffsetFactor = null;
        currentPolygonOffsetUnits = null;
        currentScissor.set(0, 0, gl.canvas.width, gl.canvas.height);
        currentViewport.set(0, 0, gl.canvas.width, gl.canvas.height);
        colorBuffer.reset();
        depthBuffer.reset();
        stencilBuffer.reset();
    }
    return {
        buffers: {
            color: colorBuffer,
            depth: depthBuffer,
            stencil: stencilBuffer
        },
        enable: enable,
        disable: disable,
        bindFramebuffer: bindFramebuffer,
        drawBuffers: drawBuffers,
        useProgram: useProgram,
        setBlending: setBlending,
        setMaterial: setMaterial,
        setFlipSided: setFlipSided,
        setCullFace: setCullFace,
        setLineWidth: setLineWidth,
        setPolygonOffset: setPolygonOffset,
        setScissorTest: setScissorTest,
        activeTexture: activeTexture,
        bindTexture: bindTexture,
        unbindTexture: unbindTexture,
        compressedTexImage2D: compressedTexImage2D,
        compressedTexImage3D: compressedTexImage3D,
        texImage2D: texImage2D,
        texImage3D: texImage3D,
        updateUBOMapping: updateUBOMapping,
        uniformBlockBinding: uniformBlockBinding,
        texStorage2D: texStorage2D,
        texStorage3D: texStorage3D,
        texSubImage2D: texSubImage2D,
        texSubImage3D: texSubImage3D,
        compressedTexSubImage2D: compressedTexSubImage2D,
        compressedTexSubImage3D: compressedTexSubImage3D,
        scissor: scissor,
        viewport: viewport,
        reset: reset
    };
}
function WebGLTextures(_gl, extensions, state, properties, capabilities, utils, info) {
    const isWebGL2 = capabilities.isWebGL2;
    const maxTextures = capabilities.maxTextures;
    const maxCubemapSize = capabilities.maxCubemapSize;
    const maxTextureSize = capabilities.maxTextureSize;
    const maxSamples = capabilities.maxSamples;
    const multisampledRTTExt = extensions.has("WEBGL_multisampled_render_to_texture") ? extensions.get("WEBGL_multisampled_render_to_texture") : null;
    const supportsInvalidateFramebuffer = typeof navigator === "undefined" ? false : /OculusBrowser/g.test(navigator.userAgent);
    const _videoTextures = new WeakMap();
    let _canvas;
    const _sources = new WeakMap(); // maps WebglTexture objects to instances of Source
    // cordova iOS (as of 5.0) still uses UIWebView, which provides OffscreenCanvas,
    // also OffscreenCanvas.getContext("webgl"), but not OffscreenCanvas.getContext("2d")!
    // Some implementations may only implement OffscreenCanvas partially (e.g. lacking 2d).
    let useOffscreenCanvas = false;
    try {
        useOffscreenCanvas = typeof OffscreenCanvas !== "undefined" && new OffscreenCanvas(1, 1).getContext("2d") !== null;
    } catch (err) {
    // Ignore any errors
    }
    function createCanvas(width, height) {
        // Use OffscreenCanvas when available. Specially needed in web workers
        return useOffscreenCanvas ? // eslint-disable-next-line compat/compat
        new OffscreenCanvas(width, height) : createElementNS("canvas");
    }
    function resizeImage(image, needsPowerOfTwo, needsNewCanvas, maxSize) {
        let scale = 1;
        // handle case if texture exceeds max size
        if (image.width > maxSize || image.height > maxSize) scale = maxSize / Math.max(image.width, image.height);
        // only perform resize if necessary
        if (scale < 1 || needsPowerOfTwo === true) {
            // only perform resize for certain image types
            if (typeof HTMLImageElement !== "undefined" && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== "undefined" && image instanceof HTMLCanvasElement || typeof ImageBitmap !== "undefined" && image instanceof ImageBitmap) {
                const floor = needsPowerOfTwo ? floorPowerOfTwo : Math.floor;
                const width = floor(scale * image.width);
                const height = floor(scale * image.height);
                if (_canvas === undefined) _canvas = createCanvas(width, height);
                // cube textures can't reuse the same canvas
                const canvas = needsNewCanvas ? createCanvas(width, height) : _canvas;
                canvas.width = width;
                canvas.height = height;
                const context = canvas.getContext("2d");
                context.drawImage(image, 0, 0, width, height);
                console.warn("THREE.WebGLRenderer: Texture has been resized from (" + image.width + "x" + image.height + ") to (" + width + "x" + height + ").");
                return canvas;
            } else {
                if ("data" in image) console.warn("THREE.WebGLRenderer: Image in DataTexture is too big (" + image.width + "x" + image.height + ").");
                return image;
            }
        }
        return image;
    }
    function isPowerOfTwo$1(image) {
        return isPowerOfTwo(image.width) && isPowerOfTwo(image.height);
    }
    function textureNeedsPowerOfTwo(texture) {
        if (isWebGL2) return false;
        return texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping || texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;
    }
    function textureNeedsGenerateMipmaps(texture, supportsMips) {
        return texture.generateMipmaps && supportsMips && texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;
    }
    function generateMipmap(target) {
        _gl.generateMipmap(target);
    }
    function getInternalFormat(internalFormatName, glFormat, glType, colorSpace1, forceLinearTransfer = false) {
        if (isWebGL2 === false) return glFormat;
        if (internalFormatName !== null) {
            if (_gl[internalFormatName] !== undefined) return _gl[internalFormatName];
            console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '" + internalFormatName + "'");
        }
        let internalFormat = glFormat;
        if (glFormat === _gl.RED) {
            if (glType === _gl.FLOAT) internalFormat = _gl.R32F;
            if (glType === _gl.HALF_FLOAT) internalFormat = _gl.R16F;
            if (glType === _gl.UNSIGNED_BYTE) internalFormat = _gl.R8;
        }
        if (glFormat === _gl.RED_INTEGER) {
            if (glType === _gl.UNSIGNED_BYTE) internalFormat = _gl.R8UI;
            if (glType === _gl.UNSIGNED_SHORT) internalFormat = _gl.R16UI;
            if (glType === _gl.UNSIGNED_INT) internalFormat = _gl.R32UI;
            if (glType === _gl.BYTE) internalFormat = _gl.R8I;
            if (glType === _gl.SHORT) internalFormat = _gl.R16I;
            if (glType === _gl.INT) internalFormat = _gl.R32I;
        }
        if (glFormat === _gl.RG) {
            if (glType === _gl.FLOAT) internalFormat = _gl.RG32F;
            if (glType === _gl.HALF_FLOAT) internalFormat = _gl.RG16F;
            if (glType === _gl.UNSIGNED_BYTE) internalFormat = _gl.RG8;
        }
        if (glFormat === _gl.RGBA) {
            if (glType === _gl.FLOAT) internalFormat = _gl.RGBA32F;
            if (glType === _gl.HALF_FLOAT) internalFormat = _gl.RGBA16F;
            if (glType === _gl.UNSIGNED_BYTE) internalFormat = colorSpace1 === SRGBColorSpace && forceLinearTransfer === false ? _gl.SRGB8_ALPHA8 : _gl.RGBA8;
            if (glType === _gl.UNSIGNED_SHORT_4_4_4_4) internalFormat = _gl.RGBA4;
            if (glType === _gl.UNSIGNED_SHORT_5_5_5_1) internalFormat = _gl.RGB5_A1;
        }
        if (internalFormat === _gl.R16F || internalFormat === _gl.R32F || internalFormat === _gl.RG16F || internalFormat === _gl.RG32F || internalFormat === _gl.RGBA16F || internalFormat === _gl.RGBA32F) extensions.get("EXT_color_buffer_float");
        return internalFormat;
    }
    function getMipLevels(texture, image, supportsMips) {
        if (textureNeedsGenerateMipmaps(texture, supportsMips) === true || texture.isFramebufferTexture && texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter) return Math.log2(Math.max(image.width, image.height)) + 1;
        else if (texture.mipmaps !== undefined && texture.mipmaps.length > 0) // user-defined mipmaps
        return texture.mipmaps.length;
        else if (texture.isCompressedTexture && Array.isArray(texture.image)) return image.mipmaps.length;
        else // texture without mipmaps (only base level)
        return 1;
    }
    // Fallback filters for non-power-of-2 textures
    function filterFallback(f) {
        if (f === NearestFilter || f === NearestMipmapNearestFilter || f === NearestMipmapLinearFilter) return _gl.NEAREST;
        return _gl.LINEAR;
    }
    //
    function onTextureDispose(event) {
        const texture = event.target;
        texture.removeEventListener("dispose", onTextureDispose);
        deallocateTexture(texture);
        if (texture.isVideoTexture) _videoTextures.delete(texture);
    }
    function onRenderTargetDispose(event) {
        const renderTarget = event.target;
        renderTarget.removeEventListener("dispose", onRenderTargetDispose);
        deallocateRenderTarget(renderTarget);
    }
    //
    function deallocateTexture(texture) {
        const textureProperties = properties.get(texture);
        if (textureProperties.__webglInit === undefined) return;
        // check if it's necessary to remove the WebGLTexture object
        const source = texture.source;
        const webglTextures = _sources.get(source);
        if (webglTextures) {
            const webglTexture = webglTextures[textureProperties.__cacheKey];
            webglTexture.usedTimes--;
            // the WebGLTexture object is not used anymore, remove it
            if (webglTexture.usedTimes === 0) deleteTexture(texture);
            // remove the weak map entry if no WebGLTexture uses the source anymore
            if (Object.keys(webglTextures).length === 0) _sources.delete(source);
        }
        properties.remove(texture);
    }
    function deleteTexture(texture) {
        const textureProperties = properties.get(texture);
        _gl.deleteTexture(textureProperties.__webglTexture);
        const source = texture.source;
        const webglTextures = _sources.get(source);
        delete webglTextures[textureProperties.__cacheKey];
        info.memory.textures--;
    }
    function deallocateRenderTarget(renderTarget) {
        const texture = renderTarget.texture;
        const renderTargetProperties = properties.get(renderTarget);
        const textureProperties = properties.get(texture);
        if (textureProperties.__webglTexture !== undefined) {
            _gl.deleteTexture(textureProperties.__webglTexture);
            info.memory.textures--;
        }
        if (renderTarget.depthTexture) renderTarget.depthTexture.dispose();
        if (renderTarget.isWebGLCubeRenderTarget) for(let i = 0; i < 6; i++){
            if (Array.isArray(renderTargetProperties.__webglFramebuffer[i])) for(let level = 0; level < renderTargetProperties.__webglFramebuffer[i].length; level++)_gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer[i][level]);
            else _gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer[i]);
            if (renderTargetProperties.__webglDepthbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer[i]);
        }
        else {
            if (Array.isArray(renderTargetProperties.__webglFramebuffer)) for(let level = 0; level < renderTargetProperties.__webglFramebuffer.length; level++)_gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer[level]);
            else _gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer);
            if (renderTargetProperties.__webglDepthbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer);
            if (renderTargetProperties.__webglMultisampledFramebuffer) _gl.deleteFramebuffer(renderTargetProperties.__webglMultisampledFramebuffer);
            if (renderTargetProperties.__webglColorRenderbuffer) {
                for(let i = 0; i < renderTargetProperties.__webglColorRenderbuffer.length; i++)if (renderTargetProperties.__webglColorRenderbuffer[i]) _gl.deleteRenderbuffer(renderTargetProperties.__webglColorRenderbuffer[i]);
            }
            if (renderTargetProperties.__webglDepthRenderbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthRenderbuffer);
        }
        if (renderTarget.isWebGLMultipleRenderTargets) for(let i = 0, il = texture.length; i < il; i++){
            const attachmentProperties = properties.get(texture[i]);
            if (attachmentProperties.__webglTexture) {
                _gl.deleteTexture(attachmentProperties.__webglTexture);
                info.memory.textures--;
            }
            properties.remove(texture[i]);
        }
        properties.remove(texture);
        properties.remove(renderTarget);
    }
    //
    let textureUnits = 0;
    function resetTextureUnits() {
        textureUnits = 0;
    }
    function allocateTextureUnit() {
        const textureUnit = textureUnits;
        if (textureUnit >= maxTextures) console.warn("THREE.WebGLTextures: Trying to use " + textureUnit + " texture units while this GPU supports only " + maxTextures);
        textureUnits += 1;
        return textureUnit;
    }
    function getTextureCacheKey(texture) {
        const array = [];
        array.push(texture.wrapS);
        array.push(texture.wrapT);
        array.push(texture.wrapR || 0);
        array.push(texture.magFilter);
        array.push(texture.minFilter);
        array.push(texture.anisotropy);
        array.push(texture.internalFormat);
        array.push(texture.format);
        array.push(texture.type);
        array.push(texture.generateMipmaps);
        array.push(texture.premultiplyAlpha);
        array.push(texture.flipY);
        array.push(texture.unpackAlignment);
        array.push(texture.colorSpace);
        return array.join();
    }
    //
    function setTexture2D(texture, slot) {
        const textureProperties = properties.get(texture);
        if (texture.isVideoTexture) updateVideoTexture(texture);
        if (texture.isRenderTargetTexture === false && texture.version > 0 && textureProperties.__version !== texture.version) {
            const image = texture.image;
            if (image === null) console.warn("THREE.WebGLRenderer: Texture marked for update but no image data found.");
            else if (image.complete === false) console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete");
            else {
                uploadTexture(textureProperties, texture, slot);
                return;
            }
        }
        state.bindTexture(_gl.TEXTURE_2D, textureProperties.__webglTexture, _gl.TEXTURE0 + slot);
    }
    function setTexture2DArray(texture, slot) {
        const textureProperties = properties.get(texture);
        if (texture.version > 0 && textureProperties.__version !== texture.version) {
            uploadTexture(textureProperties, texture, slot);
            return;
        }
        state.bindTexture(_gl.TEXTURE_2D_ARRAY, textureProperties.__webglTexture, _gl.TEXTURE0 + slot);
    }
    function setTexture3D(texture, slot) {
        const textureProperties = properties.get(texture);
        if (texture.version > 0 && textureProperties.__version !== texture.version) {
            uploadTexture(textureProperties, texture, slot);
            return;
        }
        state.bindTexture(_gl.TEXTURE_3D, textureProperties.__webglTexture, _gl.TEXTURE0 + slot);
    }
    function setTextureCube(texture, slot) {
        const textureProperties = properties.get(texture);
        if (texture.version > 0 && textureProperties.__version !== texture.version) {
            uploadCubeTexture(textureProperties, texture, slot);
            return;
        }
        state.bindTexture(_gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture, _gl.TEXTURE0 + slot);
    }
    const wrappingToGL = {
        [RepeatWrapping]: _gl.REPEAT,
        [ClampToEdgeWrapping]: _gl.CLAMP_TO_EDGE,
        [MirroredRepeatWrapping]: _gl.MIRRORED_REPEAT
    };
    const filterToGL = {
        [NearestFilter]: _gl.NEAREST,
        [NearestMipmapNearestFilter]: _gl.NEAREST_MIPMAP_NEAREST,
        [NearestMipmapLinearFilter]: _gl.NEAREST_MIPMAP_LINEAR,
        [LinearFilter]: _gl.LINEAR,
        [LinearMipmapNearestFilter]: _gl.LINEAR_MIPMAP_NEAREST,
        [LinearMipmapLinearFilter]: _gl.LINEAR_MIPMAP_LINEAR
    };
    const compareToGL = {
        [NeverCompare]: _gl.NEVER,
        [AlwaysCompare]: _gl.ALWAYS,
        [LessCompare]: _gl.LESS,
        [LessEqualCompare]: _gl.LEQUAL,
        [EqualCompare]: _gl.EQUAL,
        [GreaterEqualCompare]: _gl.GEQUAL,
        [GreaterCompare]: _gl.GREATER,
        [NotEqualCompare]: _gl.NOTEQUAL
    };
    function setTextureParameters(textureType, texture, supportsMips) {
        if (supportsMips) {
            _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_S, wrappingToGL[texture.wrapS]);
            _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_T, wrappingToGL[texture.wrapT]);
            if (textureType === _gl.TEXTURE_3D || textureType === _gl.TEXTURE_2D_ARRAY) _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_R, wrappingToGL[texture.wrapR]);
            _gl.texParameteri(textureType, _gl.TEXTURE_MAG_FILTER, filterToGL[texture.magFilter]);
            _gl.texParameteri(textureType, _gl.TEXTURE_MIN_FILTER, filterToGL[texture.minFilter]);
        } else {
            _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE);
            _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE);
            if (textureType === _gl.TEXTURE_3D || textureType === _gl.TEXTURE_2D_ARRAY) _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_R, _gl.CLAMP_TO_EDGE);
            if (texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping) console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.");
            _gl.texParameteri(textureType, _gl.TEXTURE_MAG_FILTER, filterFallback(texture.magFilter));
            _gl.texParameteri(textureType, _gl.TEXTURE_MIN_FILTER, filterFallback(texture.minFilter));
            if (texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter) console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.");
        }
        if (texture.compareFunction) {
            _gl.texParameteri(textureType, _gl.TEXTURE_COMPARE_MODE, _gl.COMPARE_REF_TO_TEXTURE);
            _gl.texParameteri(textureType, _gl.TEXTURE_COMPARE_FUNC, compareToGL[texture.compareFunction]);
        }
        if (extensions.has("EXT_texture_filter_anisotropic") === true) {
            const extension = extensions.get("EXT_texture_filter_anisotropic");
            if (texture.magFilter === NearestFilter) return;
            if (texture.minFilter !== NearestMipmapLinearFilter && texture.minFilter !== LinearMipmapLinearFilter) return;
            if (texture.type === FloatType && extensions.has("OES_texture_float_linear") === false) return; // verify extension for WebGL 1 and WebGL 2
            if (isWebGL2 === false && texture.type === HalfFloatType && extensions.has("OES_texture_half_float_linear") === false) return; // verify extension for WebGL 1 only
            if (texture.anisotropy > 1 || properties.get(texture).__currentAnisotropy) {
                _gl.texParameterf(textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(texture.anisotropy, capabilities.getMaxAnisotropy()));
                properties.get(texture).__currentAnisotropy = texture.anisotropy;
            }
        }
    }
    function initTexture(textureProperties, texture) {
        let forceUpload = false;
        if (textureProperties.__webglInit === undefined) {
            textureProperties.__webglInit = true;
            texture.addEventListener("dispose", onTextureDispose);
        }
        // create Source <-> WebGLTextures mapping if necessary
        const source = texture.source;
        let webglTextures = _sources.get(source);
        if (webglTextures === undefined) {
            webglTextures = {};
            _sources.set(source, webglTextures);
        }
        // check if there is already a WebGLTexture object for the given texture parameters
        const textureCacheKey = getTextureCacheKey(texture);
        if (textureCacheKey !== textureProperties.__cacheKey) {
            // if not, create a new instance of WebGLTexture
            if (webglTextures[textureCacheKey] === undefined) {
                // create new entry
                webglTextures[textureCacheKey] = {
                    texture: _gl.createTexture(),
                    usedTimes: 0
                };
                info.memory.textures++;
                // when a new instance of WebGLTexture was created, a texture upload is required
                // even if the image contents are identical
                forceUpload = true;
            }
            webglTextures[textureCacheKey].usedTimes++;
            // every time the texture cache key changes, it's necessary to check if an instance of
            // WebGLTexture can be deleted in order to avoid a memory leak.
            const webglTexture = webglTextures[textureProperties.__cacheKey];
            if (webglTexture !== undefined) {
                webglTextures[textureProperties.__cacheKey].usedTimes--;
                if (webglTexture.usedTimes === 0) deleteTexture(texture);
            }
            // store references to cache key and WebGLTexture object
            textureProperties.__cacheKey = textureCacheKey;
            textureProperties.__webglTexture = webglTextures[textureCacheKey].texture;
        }
        return forceUpload;
    }
    function uploadTexture(textureProperties, texture, slot) {
        let textureType = _gl.TEXTURE_2D;
        if (texture.isDataArrayTexture || texture.isCompressedArrayTexture) textureType = _gl.TEXTURE_2D_ARRAY;
        if (texture.isData3DTexture) textureType = _gl.TEXTURE_3D;
        const forceUpload = initTexture(textureProperties, texture);
        const source = texture.source;
        state.bindTexture(textureType, textureProperties.__webglTexture, _gl.TEXTURE0 + slot);
        const sourceProperties = properties.get(source);
        if (source.version !== sourceProperties.__version || forceUpload === true) {
            state.activeTexture(_gl.TEXTURE0 + slot);
            _gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, texture.flipY);
            _gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha);
            _gl.pixelStorei(_gl.UNPACK_ALIGNMENT, texture.unpackAlignment);
            _gl.pixelStorei(_gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, _gl.NONE);
            const needsPowerOfTwo = textureNeedsPowerOfTwo(texture) && isPowerOfTwo$1(texture.image) === false;
            let image = resizeImage(texture.image, needsPowerOfTwo, false, maxTextureSize);
            image = verifyColorSpace(texture, image);
            const supportsMips = isPowerOfTwo$1(image) || isWebGL2, glFormat = utils.convert(texture.format, texture.colorSpace);
            let glType = utils.convert(texture.type), glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.colorSpace, texture.isVideoTexture);
            setTextureParameters(textureType, texture, supportsMips);
            let mipmap;
            const mipmaps = texture.mipmaps;
            const useTexStorage = isWebGL2 && texture.isVideoTexture !== true;
            const allocateMemory = sourceProperties.__version === undefined || forceUpload === true;
            const levels = getMipLevels(texture, image, supportsMips);
            if (texture.isDepthTexture) {
                // populate depth texture with dummy data
                glInternalFormat = _gl.DEPTH_COMPONENT;
                if (isWebGL2) {
                    if (texture.type === FloatType) glInternalFormat = _gl.DEPTH_COMPONENT32F;
                    else if (texture.type === UnsignedIntType) glInternalFormat = _gl.DEPTH_COMPONENT24;
                    else if (texture.type === UnsignedInt248Type) glInternalFormat = _gl.DEPTH24_STENCIL8;
                    else glInternalFormat = _gl.DEPTH_COMPONENT16; // WebGL2 requires sized internalformat for glTexImage2D
                } else if (texture.type === FloatType) console.error("WebGLRenderer: Floating point depth texture requires WebGL2.");
                // validation checks for WebGL 1
                if (texture.format === DepthFormat && glInternalFormat === _gl.DEPTH_COMPONENT) // The error INVALID_OPERATION is generated by texImage2D if format and internalformat are
                // DEPTH_COMPONENT and type is not UNSIGNED_SHORT or UNSIGNED_INT
                // (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
                {
                    if (texture.type !== UnsignedShortType && texture.type !== UnsignedIntType) {
                        console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.");
                        texture.type = UnsignedIntType;
                        glType = utils.convert(texture.type);
                    }
                }
                if (texture.format === DepthStencilFormat && glInternalFormat === _gl.DEPTH_COMPONENT) {
                    // Depth stencil textures need the DEPTH_STENCIL internal format
                    // (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
                    glInternalFormat = _gl.DEPTH_STENCIL;
                    // The error INVALID_OPERATION is generated by texImage2D if format and internalformat are
                    // DEPTH_STENCIL and type is not UNSIGNED_INT_24_8_WEBGL.
                    // (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
                    if (texture.type !== UnsignedInt248Type) {
                        console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.");
                        texture.type = UnsignedInt248Type;
                        glType = utils.convert(texture.type);
                    }
                }
                //
                if (allocateMemory) {
                    if (useTexStorage) state.texStorage2D(_gl.TEXTURE_2D, 1, glInternalFormat, image.width, image.height);
                    else state.texImage2D(_gl.TEXTURE_2D, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null);
                }
            } else if (texture.isDataTexture) {
                // use manually created mipmaps if available
                // if there are no manual mipmaps
                // set 0 level mipmap and then use GL to generate other mipmap levels
                if (mipmaps.length > 0 && supportsMips) {
                    if (useTexStorage && allocateMemory) state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, mipmaps[0].width, mipmaps[0].height);
                    for(let i = 0, il = mipmaps.length; i < il; i++){
                        mipmap = mipmaps[i];
                        if (useTexStorage) state.texSubImage2D(_gl.TEXTURE_2D, i, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data);
                        else state.texImage2D(_gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);
                    }
                    texture.generateMipmaps = false;
                } else if (useTexStorage) {
                    if (allocateMemory) state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, image.width, image.height);
                    state.texSubImage2D(_gl.TEXTURE_2D, 0, 0, 0, image.width, image.height, glFormat, glType, image.data);
                } else state.texImage2D(_gl.TEXTURE_2D, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, image.data);
            } else if (texture.isCompressedTexture) {
                if (texture.isCompressedArrayTexture) {
                    if (useTexStorage && allocateMemory) state.texStorage3D(_gl.TEXTURE_2D_ARRAY, levels, glInternalFormat, mipmaps[0].width, mipmaps[0].height, image.depth);
                    for(let i = 0, il = mipmaps.length; i < il; i++){
                        mipmap = mipmaps[i];
                        if (texture.format !== RGBAFormat) {
                            if (glFormat !== null) {
                                if (useTexStorage) state.compressedTexSubImage3D(_gl.TEXTURE_2D_ARRAY, i, 0, 0, 0, mipmap.width, mipmap.height, image.depth, glFormat, mipmap.data, 0, 0);
                                else state.compressedTexImage3D(_gl.TEXTURE_2D_ARRAY, i, glInternalFormat, mipmap.width, mipmap.height, image.depth, 0, mipmap.data, 0, 0);
                            } else console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()");
                        } else if (useTexStorage) state.texSubImage3D(_gl.TEXTURE_2D_ARRAY, i, 0, 0, 0, mipmap.width, mipmap.height, image.depth, glFormat, glType, mipmap.data);
                        else state.texImage3D(_gl.TEXTURE_2D_ARRAY, i, glInternalFormat, mipmap.width, mipmap.height, image.depth, 0, glFormat, glType, mipmap.data);
                    }
                } else {
                    if (useTexStorage && allocateMemory) state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, mipmaps[0].width, mipmaps[0].height);
                    for(let i = 0, il = mipmaps.length; i < il; i++){
                        mipmap = mipmaps[i];
                        if (texture.format !== RGBAFormat) {
                            if (glFormat !== null) {
                                if (useTexStorage) state.compressedTexSubImage2D(_gl.TEXTURE_2D, i, 0, 0, mipmap.width, mipmap.height, glFormat, mipmap.data);
                                else state.compressedTexImage2D(_gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data);
                            } else console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()");
                        } else if (useTexStorage) state.texSubImage2D(_gl.TEXTURE_2D, i, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data);
                        else state.texImage2D(_gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);
                    }
                }
            } else if (texture.isDataArrayTexture) {
                if (useTexStorage) {
                    if (allocateMemory) state.texStorage3D(_gl.TEXTURE_2D_ARRAY, levels, glInternalFormat, image.width, image.height, image.depth);
                    state.texSubImage3D(_gl.TEXTURE_2D_ARRAY, 0, 0, 0, 0, image.width, image.height, image.depth, glFormat, glType, image.data);
                } else state.texImage3D(_gl.TEXTURE_2D_ARRAY, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data);
            } else if (texture.isData3DTexture) {
                if (useTexStorage) {
                    if (allocateMemory) state.texStorage3D(_gl.TEXTURE_3D, levels, glInternalFormat, image.width, image.height, image.depth);
                    state.texSubImage3D(_gl.TEXTURE_3D, 0, 0, 0, 0, image.width, image.height, image.depth, glFormat, glType, image.data);
                } else state.texImage3D(_gl.TEXTURE_3D, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data);
            } else if (texture.isFramebufferTexture) {
                if (allocateMemory) {
                    if (useTexStorage) state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, image.width, image.height);
                    else {
                        let width = image.width, height = image.height;
                        for(let i = 0; i < levels; i++){
                            state.texImage2D(_gl.TEXTURE_2D, i, glInternalFormat, width, height, 0, glFormat, glType, null);
                            width >>= 1;
                            height >>= 1;
                        }
                    }
                }
            } else {
                // regular Texture (image, video, canvas)
                // use manually created mipmaps if available
                // if there are no manual mipmaps
                // set 0 level mipmap and then use GL to generate other mipmap levels
                if (mipmaps.length > 0 && supportsMips) {
                    if (useTexStorage && allocateMemory) state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, mipmaps[0].width, mipmaps[0].height);
                    for(let i = 0, il = mipmaps.length; i < il; i++){
                        mipmap = mipmaps[i];
                        if (useTexStorage) state.texSubImage2D(_gl.TEXTURE_2D, i, 0, 0, glFormat, glType, mipmap);
                        else state.texImage2D(_gl.TEXTURE_2D, i, glInternalFormat, glFormat, glType, mipmap);
                    }
                    texture.generateMipmaps = false;
                } else if (useTexStorage) {
                    if (allocateMemory) state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, image.width, image.height);
                    state.texSubImage2D(_gl.TEXTURE_2D, 0, 0, 0, glFormat, glType, image);
                } else state.texImage2D(_gl.TEXTURE_2D, 0, glInternalFormat, glFormat, glType, image);
            }
            if (textureNeedsGenerateMipmaps(texture, supportsMips)) generateMipmap(textureType);
            sourceProperties.__version = source.version;
            if (texture.onUpdate) texture.onUpdate(texture);
        }
        textureProperties.__version = texture.version;
    }
    function uploadCubeTexture(textureProperties, texture, slot) {
        if (texture.image.length !== 6) return;
        const forceUpload = initTexture(textureProperties, texture);
        const source = texture.source;
        state.bindTexture(_gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture, _gl.TEXTURE0 + slot);
        const sourceProperties = properties.get(source);
        if (source.version !== sourceProperties.__version || forceUpload === true) {
            state.activeTexture(_gl.TEXTURE0 + slot);
            _gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, texture.flipY);
            _gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha);
            _gl.pixelStorei(_gl.UNPACK_ALIGNMENT, texture.unpackAlignment);
            _gl.pixelStorei(_gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, _gl.NONE);
            const isCompressed = texture.isCompressedTexture || texture.image[0].isCompressedTexture;
            const isDataTexture = texture.image[0] && texture.image[0].isDataTexture;
            const cubeImage = [];
            for(let i = 0; i < 6; i++){
                if (!isCompressed && !isDataTexture) cubeImage[i] = resizeImage(texture.image[i], false, true, maxCubemapSize);
                else cubeImage[i] = isDataTexture ? texture.image[i].image : texture.image[i];
                cubeImage[i] = verifyColorSpace(texture, cubeImage[i]);
            }
            const image = cubeImage[0], supportsMips = isPowerOfTwo$1(image) || isWebGL2, glFormat = utils.convert(texture.format, texture.colorSpace), glType = utils.convert(texture.type), glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.colorSpace);
            const useTexStorage = isWebGL2 && texture.isVideoTexture !== true;
            const allocateMemory = sourceProperties.__version === undefined || forceUpload === true;
            let levels = getMipLevels(texture, image, supportsMips);
            setTextureParameters(_gl.TEXTURE_CUBE_MAP, texture, supportsMips);
            let mipmaps;
            if (isCompressed) {
                if (useTexStorage && allocateMemory) state.texStorage2D(_gl.TEXTURE_CUBE_MAP, levels, glInternalFormat, image.width, image.height);
                for(let i = 0; i < 6; i++){
                    mipmaps = cubeImage[i].mipmaps;
                    for(let j = 0; j < mipmaps.length; j++){
                        const mipmap = mipmaps[j];
                        if (texture.format !== RGBAFormat) {
                            if (glFormat !== null) {
                                if (useTexStorage) state.compressedTexSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, 0, 0, mipmap.width, mipmap.height, glFormat, mipmap.data);
                                else state.compressedTexImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data);
                            } else console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()");
                        } else if (useTexStorage) state.texSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data);
                        else state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);
                    }
                }
            } else {
                mipmaps = texture.mipmaps;
                if (useTexStorage && allocateMemory) {
                    // TODO: Uniformly handle mipmap definitions
                    // Normal textures and compressed cube textures define base level + mips with their mipmap array
                    // Uncompressed cube textures use their mipmap array only for mips (no base level)
                    if (mipmaps.length > 0) levels++;
                    state.texStorage2D(_gl.TEXTURE_CUBE_MAP, levels, glInternalFormat, cubeImage[0].width, cubeImage[0].height);
                }
                for(let i = 0; i < 6; i++)if (isDataTexture) {
                    if (useTexStorage) state.texSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, 0, 0, cubeImage[i].width, cubeImage[i].height, glFormat, glType, cubeImage[i].data);
                    else state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glInternalFormat, cubeImage[i].width, cubeImage[i].height, 0, glFormat, glType, cubeImage[i].data);
                    for(let j = 0; j < mipmaps.length; j++){
                        const mipmap = mipmaps[j];
                        const mipmapImage = mipmap.image[i].image;
                        if (useTexStorage) state.texSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, 0, 0, mipmapImage.width, mipmapImage.height, glFormat, glType, mipmapImage.data);
                        else state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, glInternalFormat, mipmapImage.width, mipmapImage.height, 0, glFormat, glType, mipmapImage.data);
                    }
                } else {
                    if (useTexStorage) state.texSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, 0, 0, glFormat, glType, cubeImage[i]);
                    else state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glInternalFormat, glFormat, glType, cubeImage[i]);
                    for(let j = 0; j < mipmaps.length; j++){
                        const mipmap = mipmaps[j];
                        if (useTexStorage) state.texSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, 0, 0, glFormat, glType, mipmap.image[i]);
                        else state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, glInternalFormat, glFormat, glType, mipmap.image[i]);
                    }
                }
            }
            if (textureNeedsGenerateMipmaps(texture, supportsMips)) // We assume images for cube map have the same size.
            generateMipmap(_gl.TEXTURE_CUBE_MAP);
            sourceProperties.__version = source.version;
            if (texture.onUpdate) texture.onUpdate(texture);
        }
        textureProperties.__version = texture.version;
    }
    // Render targets
    // Setup storage for target texture and bind it to correct framebuffer
    function setupFrameBufferTexture(framebuffer, renderTarget, texture, attachment, textureTarget, level) {
        const glFormat = utils.convert(texture.format, texture.colorSpace);
        const glType = utils.convert(texture.type);
        const glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.colorSpace);
        const renderTargetProperties = properties.get(renderTarget);
        if (!renderTargetProperties.__hasExternalTextures) {
            const width = Math.max(1, renderTarget.width >> level);
            const height = Math.max(1, renderTarget.height >> level);
            if (textureTarget === _gl.TEXTURE_3D || textureTarget === _gl.TEXTURE_2D_ARRAY) state.texImage3D(textureTarget, level, glInternalFormat, width, height, renderTarget.depth, 0, glFormat, glType, null);
            else state.texImage2D(textureTarget, level, glInternalFormat, width, height, 0, glFormat, glType, null);
        }
        state.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);
        if (useMultisampledRTT(renderTarget)) multisampledRTTExt.framebufferTexture2DMultisampleEXT(_gl.FRAMEBUFFER, attachment, textureTarget, properties.get(texture).__webglTexture, 0, getRenderTargetSamples(renderTarget));
        else if (textureTarget === _gl.TEXTURE_2D || textureTarget >= _gl.TEXTURE_CUBE_MAP_POSITIVE_X && textureTarget <= _gl.TEXTURE_CUBE_MAP_NEGATIVE_Z) _gl.framebufferTexture2D(_gl.FRAMEBUFFER, attachment, textureTarget, properties.get(texture).__webglTexture, level);
        state.bindFramebuffer(_gl.FRAMEBUFFER, null);
    }
    // Setup storage for internal depth/stencil buffers and bind to correct framebuffer
    function setupRenderBufferStorage(renderbuffer, renderTarget, isMultisample) {
        _gl.bindRenderbuffer(_gl.RENDERBUFFER, renderbuffer);
        if (renderTarget.depthBuffer && !renderTarget.stencilBuffer) {
            let glInternalFormat = _gl.DEPTH_COMPONENT16;
            if (isMultisample || useMultisampledRTT(renderTarget)) {
                const depthTexture = renderTarget.depthTexture;
                if (depthTexture && depthTexture.isDepthTexture) {
                    if (depthTexture.type === FloatType) glInternalFormat = _gl.DEPTH_COMPONENT32F;
                    else if (depthTexture.type === UnsignedIntType) glInternalFormat = _gl.DEPTH_COMPONENT24;
                }
                const samples = getRenderTargetSamples(renderTarget);
                if (useMultisampledRTT(renderTarget)) multisampledRTTExt.renderbufferStorageMultisampleEXT(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);
                else _gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);
            } else _gl.renderbufferStorage(_gl.RENDERBUFFER, glInternalFormat, renderTarget.width, renderTarget.height);
            _gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer);
        } else if (renderTarget.depthBuffer && renderTarget.stencilBuffer) {
            const samples = getRenderTargetSamples(renderTarget);
            if (isMultisample && useMultisampledRTT(renderTarget) === false) _gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, samples, _gl.DEPTH24_STENCIL8, renderTarget.width, renderTarget.height);
            else if (useMultisampledRTT(renderTarget)) multisampledRTTExt.renderbufferStorageMultisampleEXT(_gl.RENDERBUFFER, samples, _gl.DEPTH24_STENCIL8, renderTarget.width, renderTarget.height);
            else _gl.renderbufferStorage(_gl.RENDERBUFFER, _gl.DEPTH_STENCIL, renderTarget.width, renderTarget.height);
            _gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer);
        } else {
            const textures = renderTarget.isWebGLMultipleRenderTargets === true ? renderTarget.texture : [
                renderTarget.texture
            ];
            for(let i = 0; i < textures.length; i++){
                const texture = textures[i];
                const glFormat = utils.convert(texture.format, texture.colorSpace);
                const glType = utils.convert(texture.type);
                const glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.colorSpace);
                const samples = getRenderTargetSamples(renderTarget);
                if (isMultisample && useMultisampledRTT(renderTarget) === false) _gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);
                else if (useMultisampledRTT(renderTarget)) multisampledRTTExt.renderbufferStorageMultisampleEXT(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);
                else _gl.renderbufferStorage(_gl.RENDERBUFFER, glInternalFormat, renderTarget.width, renderTarget.height);
            }
        }
        _gl.bindRenderbuffer(_gl.RENDERBUFFER, null);
    }
    // Setup resources for a Depth Texture for a FBO (needs an extension)
    function setupDepthTexture(framebuffer, renderTarget) {
        const isCube = renderTarget && renderTarget.isWebGLCubeRenderTarget;
        if (isCube) throw new Error("Depth Texture with cube render targets is not supported");
        state.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);
        if (!(renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture)) throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");
        // upload an empty depth texture with framebuffer size
        if (!properties.get(renderTarget.depthTexture).__webglTexture || renderTarget.depthTexture.image.width !== renderTarget.width || renderTarget.depthTexture.image.height !== renderTarget.height) {
            renderTarget.depthTexture.image.width = renderTarget.width;
            renderTarget.depthTexture.image.height = renderTarget.height;
            renderTarget.depthTexture.needsUpdate = true;
        }
        setTexture2D(renderTarget.depthTexture, 0);
        const webglDepthTexture = properties.get(renderTarget.depthTexture).__webglTexture;
        const samples = getRenderTargetSamples(renderTarget);
        if (renderTarget.depthTexture.format === DepthFormat) {
            if (useMultisampledRTT(renderTarget)) multisampledRTTExt.framebufferTexture2DMultisampleEXT(_gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0, samples);
            else _gl.framebufferTexture2D(_gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0);
        } else if (renderTarget.depthTexture.format === DepthStencilFormat) {
            if (useMultisampledRTT(renderTarget)) multisampledRTTExt.framebufferTexture2DMultisampleEXT(_gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0, samples);
            else _gl.framebufferTexture2D(_gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0);
        } else throw new Error("Unknown depthTexture format");
    }
    // Setup GL resources for a non-texture depth buffer
    function setupDepthRenderbuffer(renderTarget) {
        const renderTargetProperties = properties.get(renderTarget);
        const isCube = renderTarget.isWebGLCubeRenderTarget === true;
        if (renderTarget.depthTexture && !renderTargetProperties.__autoAllocateDepthBuffer) {
            if (isCube) throw new Error("target.depthTexture not supported in Cube render targets");
            setupDepthTexture(renderTargetProperties.__webglFramebuffer, renderTarget);
        } else if (isCube) {
            renderTargetProperties.__webglDepthbuffer = [];
            for(let i = 0; i < 6; i++){
                state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[i]);
                renderTargetProperties.__webglDepthbuffer[i] = _gl.createRenderbuffer();
                setupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer[i], renderTarget, false);
            }
        } else {
            state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer);
            renderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();
            setupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer, renderTarget, false);
        }
        state.bindFramebuffer(_gl.FRAMEBUFFER, null);
    }
    // rebind framebuffer with external textures
    function rebindTextures(renderTarget, colorTexture, depthTexture) {
        const renderTargetProperties = properties.get(renderTarget);
        if (colorTexture !== undefined) setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, renderTarget.texture, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D, 0);
        if (depthTexture !== undefined) setupDepthRenderbuffer(renderTarget);
    }
    // Set up GL resources for the render target
    function setupRenderTarget(renderTarget) {
        const texture = renderTarget.texture;
        const renderTargetProperties = properties.get(renderTarget);
        const textureProperties = properties.get(texture);
        renderTarget.addEventListener("dispose", onRenderTargetDispose);
        if (renderTarget.isWebGLMultipleRenderTargets !== true) {
            if (textureProperties.__webglTexture === undefined) textureProperties.__webglTexture = _gl.createTexture();
            textureProperties.__version = texture.version;
            info.memory.textures++;
        }
        const isCube = renderTarget.isWebGLCubeRenderTarget === true;
        const isMultipleRenderTargets = renderTarget.isWebGLMultipleRenderTargets === true;
        const supportsMips = isPowerOfTwo$1(renderTarget) || isWebGL2;
        // Setup framebuffer
        if (isCube) {
            renderTargetProperties.__webglFramebuffer = [];
            for(let i = 0; i < 6; i++)if (isWebGL2 && texture.mipmaps && texture.mipmaps.length > 0) {
                renderTargetProperties.__webglFramebuffer[i] = [];
                for(let level = 0; level < texture.mipmaps.length; level++)renderTargetProperties.__webglFramebuffer[i][level] = _gl.createFramebuffer();
            } else renderTargetProperties.__webglFramebuffer[i] = _gl.createFramebuffer();
        } else {
            if (isWebGL2 && texture.mipmaps && texture.mipmaps.length > 0) {
                renderTargetProperties.__webglFramebuffer = [];
                for(let level = 0; level < texture.mipmaps.length; level++)renderTargetProperties.__webglFramebuffer[level] = _gl.createFramebuffer();
            } else renderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();
            if (isMultipleRenderTargets) {
                if (capabilities.drawBuffers) {
                    const textures = renderTarget.texture;
                    for(let i = 0, il = textures.length; i < il; i++){
                        const attachmentProperties = properties.get(textures[i]);
                        if (attachmentProperties.__webglTexture === undefined) {
                            attachmentProperties.__webglTexture = _gl.createTexture();
                            info.memory.textures++;
                        }
                    }
                } else console.warn("THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.");
            }
            if (isWebGL2 && renderTarget.samples > 0 && useMultisampledRTT(renderTarget) === false) {
                const textures = isMultipleRenderTargets ? texture : [
                    texture
                ];
                renderTargetProperties.__webglMultisampledFramebuffer = _gl.createFramebuffer();
                renderTargetProperties.__webglColorRenderbuffer = [];
                state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);
                for(let i = 0; i < textures.length; i++){
                    const texture = textures[i];
                    renderTargetProperties.__webglColorRenderbuffer[i] = _gl.createRenderbuffer();
                    _gl.bindRenderbuffer(_gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer[i]);
                    const glFormat = utils.convert(texture.format, texture.colorSpace);
                    const glType = utils.convert(texture.type);
                    const glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.colorSpace, renderTarget.isXRRenderTarget === true);
                    const samples = getRenderTargetSamples(renderTarget);
                    _gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);
                    _gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer[i]);
                }
                _gl.bindRenderbuffer(_gl.RENDERBUFFER, null);
                if (renderTarget.depthBuffer) {
                    renderTargetProperties.__webglDepthRenderbuffer = _gl.createRenderbuffer();
                    setupRenderBufferStorage(renderTargetProperties.__webglDepthRenderbuffer, renderTarget, true);
                }
                state.bindFramebuffer(_gl.FRAMEBUFFER, null);
            }
        }
        // Setup color buffer
        if (isCube) {
            state.bindTexture(_gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture);
            setTextureParameters(_gl.TEXTURE_CUBE_MAP, texture, supportsMips);
            for(let i = 0; i < 6; i++){
                if (isWebGL2 && texture.mipmaps && texture.mipmaps.length > 0) for(let level = 0; level < texture.mipmaps.length; level++)setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer[i][level], renderTarget, texture, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, level);
                else setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer[i], renderTarget, texture, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0);
            }
            if (textureNeedsGenerateMipmaps(texture, supportsMips)) generateMipmap(_gl.TEXTURE_CUBE_MAP);
            state.unbindTexture();
        } else if (isMultipleRenderTargets) {
            const textures = renderTarget.texture;
            for(let i = 0, il = textures.length; i < il; i++){
                const attachment = textures[i];
                const attachmentProperties = properties.get(attachment);
                state.bindTexture(_gl.TEXTURE_2D, attachmentProperties.__webglTexture);
                setTextureParameters(_gl.TEXTURE_2D, attachment, supportsMips);
                setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, attachment, _gl.COLOR_ATTACHMENT0 + i, _gl.TEXTURE_2D, 0);
                if (textureNeedsGenerateMipmaps(attachment, supportsMips)) generateMipmap(_gl.TEXTURE_2D);
            }
            state.unbindTexture();
        } else {
            let glTextureType = _gl.TEXTURE_2D;
            if (renderTarget.isWebGL3DRenderTarget || renderTarget.isWebGLArrayRenderTarget) {
                if (isWebGL2) glTextureType = renderTarget.isWebGL3DRenderTarget ? _gl.TEXTURE_3D : _gl.TEXTURE_2D_ARRAY;
                else console.error("THREE.WebGLTextures: THREE.Data3DTexture and THREE.DataArrayTexture only supported with WebGL2.");
            }
            state.bindTexture(glTextureType, textureProperties.__webglTexture);
            setTextureParameters(glTextureType, texture, supportsMips);
            if (isWebGL2 && texture.mipmaps && texture.mipmaps.length > 0) for(let level = 0; level < texture.mipmaps.length; level++)setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer[level], renderTarget, texture, _gl.COLOR_ATTACHMENT0, glTextureType, level);
            else setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, texture, _gl.COLOR_ATTACHMENT0, glTextureType, 0);
            if (textureNeedsGenerateMipmaps(texture, supportsMips)) generateMipmap(glTextureType);
            state.unbindTexture();
        }
        // Setup depth and stencil buffers
        if (renderTarget.depthBuffer) setupDepthRenderbuffer(renderTarget);
    }
    function updateRenderTargetMipmap(renderTarget) {
        const supportsMips = isPowerOfTwo$1(renderTarget) || isWebGL2;
        const textures = renderTarget.isWebGLMultipleRenderTargets === true ? renderTarget.texture : [
            renderTarget.texture
        ];
        for(let i = 0, il = textures.length; i < il; i++){
            const texture = textures[i];
            if (textureNeedsGenerateMipmaps(texture, supportsMips)) {
                const target = renderTarget.isWebGLCubeRenderTarget ? _gl.TEXTURE_CUBE_MAP : _gl.TEXTURE_2D;
                const webglTexture = properties.get(texture).__webglTexture;
                state.bindTexture(target, webglTexture);
                generateMipmap(target);
                state.unbindTexture();
            }
        }
    }
    function updateMultisampleRenderTarget(renderTarget) {
        if (isWebGL2 && renderTarget.samples > 0 && useMultisampledRTT(renderTarget) === false) {
            const textures = renderTarget.isWebGLMultipleRenderTargets ? renderTarget.texture : [
                renderTarget.texture
            ];
            const width = renderTarget.width;
            const height = renderTarget.height;
            let mask = _gl.COLOR_BUFFER_BIT;
            const invalidationArray = [];
            const depthStyle = renderTarget.stencilBuffer ? _gl.DEPTH_STENCIL_ATTACHMENT : _gl.DEPTH_ATTACHMENT;
            const renderTargetProperties = properties.get(renderTarget);
            const isMultipleRenderTargets = renderTarget.isWebGLMultipleRenderTargets === true;
            // If MRT we need to remove FBO attachments
            if (isMultipleRenderTargets) for(let i = 0; i < textures.length; i++){
                state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);
                _gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.RENDERBUFFER, null);
                state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer);
                _gl.framebufferTexture2D(_gl.DRAW_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.TEXTURE_2D, null, 0);
            }
            state.bindFramebuffer(_gl.READ_FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);
            state.bindFramebuffer(_gl.DRAW_FRAMEBUFFER, renderTargetProperties.__webglFramebuffer);
            for(let i = 0; i < textures.length; i++){
                invalidationArray.push(_gl.COLOR_ATTACHMENT0 + i);
                if (renderTarget.depthBuffer) invalidationArray.push(depthStyle);
                const ignoreDepthValues = renderTargetProperties.__ignoreDepthValues !== undefined ? renderTargetProperties.__ignoreDepthValues : false;
                if (ignoreDepthValues === false) {
                    if (renderTarget.depthBuffer) mask |= _gl.DEPTH_BUFFER_BIT;
                    if (renderTarget.stencilBuffer) mask |= _gl.STENCIL_BUFFER_BIT;
                }
                if (isMultipleRenderTargets) _gl.framebufferRenderbuffer(_gl.READ_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer[i]);
                if (ignoreDepthValues === true) {
                    _gl.invalidateFramebuffer(_gl.READ_FRAMEBUFFER, [
                        depthStyle
                    ]);
                    _gl.invalidateFramebuffer(_gl.DRAW_FRAMEBUFFER, [
                        depthStyle
                    ]);
                }
                if (isMultipleRenderTargets) {
                    const webglTexture = properties.get(textures[i]).__webglTexture;
                    _gl.framebufferTexture2D(_gl.DRAW_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D, webglTexture, 0);
                }
                _gl.blitFramebuffer(0, 0, width, height, 0, 0, width, height, mask, _gl.NEAREST);
                if (supportsInvalidateFramebuffer) _gl.invalidateFramebuffer(_gl.READ_FRAMEBUFFER, invalidationArray);
            }
            state.bindFramebuffer(_gl.READ_FRAMEBUFFER, null);
            state.bindFramebuffer(_gl.DRAW_FRAMEBUFFER, null);
            // If MRT since pre-blit we removed the FBO we need to reconstruct the attachments
            if (isMultipleRenderTargets) for(let i = 0; i < textures.length; i++){
                state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);
                _gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer[i]);
                const webglTexture = properties.get(textures[i]).__webglTexture;
                state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer);
                _gl.framebufferTexture2D(_gl.DRAW_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.TEXTURE_2D, webglTexture, 0);
            }
            state.bindFramebuffer(_gl.DRAW_FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);
        }
    }
    function getRenderTargetSamples(renderTarget) {
        return Math.min(maxSamples, renderTarget.samples);
    }
    function useMultisampledRTT(renderTarget) {
        const renderTargetProperties = properties.get(renderTarget);
        return isWebGL2 && renderTarget.samples > 0 && extensions.has("WEBGL_multisampled_render_to_texture") === true && renderTargetProperties.__useRenderToTexture !== false;
    }
    function updateVideoTexture(texture) {
        const frame = info.render.frame;
        // Check the last frame we updated the VideoTexture
        if (_videoTextures.get(texture) !== frame) {
            _videoTextures.set(texture, frame);
            texture.update();
        }
    }
    function verifyColorSpace(texture, image) {
        const colorSpace1 = texture.colorSpace;
        const format = texture.format;
        const type = texture.type;
        if (texture.isCompressedTexture === true || texture.isVideoTexture === true || texture.format === _SRGBAFormat) return image;
        if (colorSpace1 !== LinearSRGBColorSpace && colorSpace1 !== NoColorSpace) {
            // sRGB
            if (colorSpace1 === SRGBColorSpace || colorSpace1 === DisplayP3ColorSpace) {
                if (isWebGL2 === false) {
                    // in WebGL 1, try to use EXT_sRGB extension and unsized formats
                    if (extensions.has("EXT_sRGB") === true && format === RGBAFormat) {
                        texture.format = _SRGBAFormat;
                        // it's not possible to generate mips in WebGL 1 with this extension
                        texture.minFilter = LinearFilter;
                        texture.generateMipmaps = false;
                    } else // slow fallback (CPU decode)
                    image = ImageUtils.sRGBToLinear(image);
                } else // in WebGL 2 uncompressed textures can only be sRGB encoded if they have the RGBA8 format
                if (format !== RGBAFormat || type !== UnsignedByteType) console.warn("THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType.");
            } else console.error("THREE.WebGLTextures: Unsupported texture color space:", colorSpace1);
        }
        return image;
    }
    //
    this.allocateTextureUnit = allocateTextureUnit;
    this.resetTextureUnits = resetTextureUnits;
    this.setTexture2D = setTexture2D;
    this.setTexture2DArray = setTexture2DArray;
    this.setTexture3D = setTexture3D;
    this.setTextureCube = setTextureCube;
    this.rebindTextures = rebindTextures;
    this.setupRenderTarget = setupRenderTarget;
    this.updateRenderTargetMipmap = updateRenderTargetMipmap;
    this.updateMultisampleRenderTarget = updateMultisampleRenderTarget;
    this.setupDepthRenderbuffer = setupDepthRenderbuffer;
    this.setupFrameBufferTexture = setupFrameBufferTexture;
    this.useMultisampledRTT = useMultisampledRTT;
}
const LinearTransferFunction = 0;
const SRGBTransferFunction = 1;
function WebGLUtils(gl, extensions, capabilities) {
    const isWebGL2 = capabilities.isWebGL2;
    function convert(p, colorSpace1 = NoColorSpace) {
        let extension;
        const transferFunction = colorSpace1 === SRGBColorSpace || colorSpace1 === DisplayP3ColorSpace ? SRGBTransferFunction : LinearTransferFunction;
        if (p === UnsignedByteType) return gl.UNSIGNED_BYTE;
        if (p === UnsignedShort4444Type) return gl.UNSIGNED_SHORT_4_4_4_4;
        if (p === UnsignedShort5551Type) return gl.UNSIGNED_SHORT_5_5_5_1;
        if (p === ByteType) return gl.BYTE;
        if (p === ShortType) return gl.SHORT;
        if (p === UnsignedShortType) return gl.UNSIGNED_SHORT;
        if (p === IntType) return gl.INT;
        if (p === UnsignedIntType) return gl.UNSIGNED_INT;
        if (p === FloatType) return gl.FLOAT;
        if (p === HalfFloatType) {
            if (isWebGL2) return gl.HALF_FLOAT;
            extension = extensions.get("OES_texture_half_float");
            if (extension !== null) return extension.HALF_FLOAT_OES;
            else return null;
        }
        if (p === AlphaFormat) return gl.ALPHA;
        if (p === RGBAFormat) return gl.RGBA;
        if (p === LuminanceFormat) return gl.LUMINANCE;
        if (p === LuminanceAlphaFormat) return gl.LUMINANCE_ALPHA;
        if (p === DepthFormat) return gl.DEPTH_COMPONENT;
        if (p === DepthStencilFormat) return gl.DEPTH_STENCIL;
        // WebGL 1 sRGB fallback
        if (p === _SRGBAFormat) {
            extension = extensions.get("EXT_sRGB");
            if (extension !== null) return extension.SRGB_ALPHA_EXT;
            else return null;
        }
        // WebGL2 formats.
        if (p === RedFormat) return gl.RED;
        if (p === RedIntegerFormat) return gl.RED_INTEGER;
        if (p === RGFormat) return gl.RG;
        if (p === RGIntegerFormat) return gl.RG_INTEGER;
        if (p === RGBAIntegerFormat) return gl.RGBA_INTEGER;
        // S3TC
        if (p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format || p === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format) {
            if (transferFunction === SRGBTransferFunction) {
                extension = extensions.get("WEBGL_compressed_texture_s3tc_srgb");
                if (extension !== null) {
                    if (p === RGB_S3TC_DXT1_Format) return extension.COMPRESSED_SRGB_S3TC_DXT1_EXT;
                    if (p === RGBA_S3TC_DXT1_Format) return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;
                    if (p === RGBA_S3TC_DXT3_Format) return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;
                    if (p === RGBA_S3TC_DXT5_Format) return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT;
                } else return null;
            } else {
                extension = extensions.get("WEBGL_compressed_texture_s3tc");
                if (extension !== null) {
                    if (p === RGB_S3TC_DXT1_Format) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;
                    if (p === RGBA_S3TC_DXT1_Format) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;
                    if (p === RGBA_S3TC_DXT3_Format) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;
                    if (p === RGBA_S3TC_DXT5_Format) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;
                } else return null;
            }
        }
        // PVRTC
        if (p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format || p === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format) {
            extension = extensions.get("WEBGL_compressed_texture_pvrtc");
            if (extension !== null) {
                if (p === RGB_PVRTC_4BPPV1_Format) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
                if (p === RGB_PVRTC_2BPPV1_Format) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
                if (p === RGBA_PVRTC_4BPPV1_Format) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
                if (p === RGBA_PVRTC_2BPPV1_Format) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;
            } else return null;
        }
        // ETC1
        if (p === RGB_ETC1_Format) {
            extension = extensions.get("WEBGL_compressed_texture_etc1");
            if (extension !== null) return extension.COMPRESSED_RGB_ETC1_WEBGL;
            else return null;
        }
        // ETC2
        if (p === RGB_ETC2_Format || p === RGBA_ETC2_EAC_Format) {
            extension = extensions.get("WEBGL_compressed_texture_etc");
            if (extension !== null) {
                if (p === RGB_ETC2_Format) return transferFunction === SRGBTransferFunction ? extension.COMPRESSED_SRGB8_ETC2 : extension.COMPRESSED_RGB8_ETC2;
                if (p === RGBA_ETC2_EAC_Format) return transferFunction === SRGBTransferFunction ? extension.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC : extension.COMPRESSED_RGBA8_ETC2_EAC;
            } else return null;
        }
        // ASTC
        if (p === RGBA_ASTC_4x4_Format || p === RGBA_ASTC_5x4_Format || p === RGBA_ASTC_5x5_Format || p === RGBA_ASTC_6x5_Format || p === RGBA_ASTC_6x6_Format || p === RGBA_ASTC_8x5_Format || p === RGBA_ASTC_8x6_Format || p === RGBA_ASTC_8x8_Format || p === RGBA_ASTC_10x5_Format || p === RGBA_ASTC_10x6_Format || p === RGBA_ASTC_10x8_Format || p === RGBA_ASTC_10x10_Format || p === RGBA_ASTC_12x10_Format || p === RGBA_ASTC_12x12_Format) {
            extension = extensions.get("WEBGL_compressed_texture_astc");
            if (extension !== null) {
                if (p === RGBA_ASTC_4x4_Format) return transferFunction === SRGBTransferFunction ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR : extension.COMPRESSED_RGBA_ASTC_4x4_KHR;
                if (p === RGBA_ASTC_5x4_Format) return transferFunction === SRGBTransferFunction ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR : extension.COMPRESSED_RGBA_ASTC_5x4_KHR;
                if (p === RGBA_ASTC_5x5_Format) return transferFunction === SRGBTransferFunction ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR : extension.COMPRESSED_RGBA_ASTC_5x5_KHR;
                if (p === RGBA_ASTC_6x5_Format) return transferFunction === SRGBTransferFunction ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR : extension.COMPRESSED_RGBA_ASTC_6x5_KHR;
                if (p === RGBA_ASTC_6x6_Format) return transferFunction === SRGBTransferFunction ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR : extension.COMPRESSED_RGBA_ASTC_6x6_KHR;
                if (p === RGBA_ASTC_8x5_Format) return transferFunction === SRGBTransferFunction ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR : extension.COMPRESSED_RGBA_ASTC_8x5_KHR;
                if (p === RGBA_ASTC_8x6_Format) return transferFunction === SRGBTransferFunction ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR : extension.COMPRESSED_RGBA_ASTC_8x6_KHR;
                if (p === RGBA_ASTC_8x8_Format) return transferFunction === SRGBTransferFunction ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR : extension.COMPRESSED_RGBA_ASTC_8x8_KHR;
                if (p === RGBA_ASTC_10x5_Format) return transferFunction === SRGBTransferFunction ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR : extension.COMPRESSED_RGBA_ASTC_10x5_KHR;
                if (p === RGBA_ASTC_10x6_Format) return transferFunction === SRGBTransferFunction ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR : extension.COMPRESSED_RGBA_ASTC_10x6_KHR;
                if (p === RGBA_ASTC_10x8_Format) return transferFunction === SRGBTransferFunction ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR : extension.COMPRESSED_RGBA_ASTC_10x8_KHR;
                if (p === RGBA_ASTC_10x10_Format) return transferFunction === SRGBTransferFunction ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR : extension.COMPRESSED_RGBA_ASTC_10x10_KHR;
                if (p === RGBA_ASTC_12x10_Format) return transferFunction === SRGBTransferFunction ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR : extension.COMPRESSED_RGBA_ASTC_12x10_KHR;
                if (p === RGBA_ASTC_12x12_Format) return transferFunction === SRGBTransferFunction ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR : extension.COMPRESSED_RGBA_ASTC_12x12_KHR;
            } else return null;
        }
        // BPTC
        if (p === RGBA_BPTC_Format || p === RGB_BPTC_SIGNED_Format || p === RGB_BPTC_UNSIGNED_Format) {
            extension = extensions.get("EXT_texture_compression_bptc");
            if (extension !== null) {
                if (p === RGBA_BPTC_Format) return transferFunction === SRGBTransferFunction ? extension.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT : extension.COMPRESSED_RGBA_BPTC_UNORM_EXT;
                if (p === RGB_BPTC_SIGNED_Format) return extension.COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT;
                if (p === RGB_BPTC_UNSIGNED_Format) return extension.COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT;
            } else return null;
        }
        // RGTC
        if (p === RED_RGTC1_Format || p === SIGNED_RED_RGTC1_Format || p === RED_GREEN_RGTC2_Format || p === SIGNED_RED_GREEN_RGTC2_Format) {
            extension = extensions.get("EXT_texture_compression_rgtc");
            if (extension !== null) {
                if (p === RGBA_BPTC_Format) return extension.COMPRESSED_RED_RGTC1_EXT;
                if (p === SIGNED_RED_RGTC1_Format) return extension.COMPRESSED_SIGNED_RED_RGTC1_EXT;
                if (p === RED_GREEN_RGTC2_Format) return extension.COMPRESSED_RED_GREEN_RGTC2_EXT;
                if (p === SIGNED_RED_GREEN_RGTC2_Format) return extension.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT;
            } else return null;
        }
        //
        if (p === UnsignedInt248Type) {
            if (isWebGL2) return gl.UNSIGNED_INT_24_8;
            extension = extensions.get("WEBGL_depth_texture");
            if (extension !== null) return extension.UNSIGNED_INT_24_8_WEBGL;
            else return null;
        }
        // if "p" can't be resolved, assume the user defines a WebGL constant as a string (fallback/workaround for packed RGB formats)
        return gl[p] !== undefined ? gl[p] : null;
    }
    return {
        convert: convert
    };
}
class ArrayCamera extends PerspectiveCamera {
    constructor(array = []){
        super();
        this.isArrayCamera = true;
        this.cameras = array;
    }
}
class Group extends Object3D {
    constructor(){
        super();
        this.isGroup = true;
        this.type = "Group";
    }
}
const _moveEvent = {
    type: "move"
};
class WebXRController {
    constructor(){
        this._targetRay = null;
        this._grip = null;
        this._hand = null;
    }
    getHandSpace() {
        if (this._hand === null) {
            this._hand = new Group();
            this._hand.matrixAutoUpdate = false;
            this._hand.visible = false;
            this._hand.joints = {};
            this._hand.inputState = {
                pinching: false
            };
        }
        return this._hand;
    }
    getTargetRaySpace() {
        if (this._targetRay === null) {
            this._targetRay = new Group();
            this._targetRay.matrixAutoUpdate = false;
            this._targetRay.visible = false;
            this._targetRay.hasLinearVelocity = false;
            this._targetRay.linearVelocity = new Vector3();
            this._targetRay.hasAngularVelocity = false;
            this._targetRay.angularVelocity = new Vector3();
        }
        return this._targetRay;
    }
    getGripSpace() {
        if (this._grip === null) {
            this._grip = new Group();
            this._grip.matrixAutoUpdate = false;
            this._grip.visible = false;
            this._grip.hasLinearVelocity = false;
            this._grip.linearVelocity = new Vector3();
            this._grip.hasAngularVelocity = false;
            this._grip.angularVelocity = new Vector3();
        }
        return this._grip;
    }
    dispatchEvent(event) {
        if (this._targetRay !== null) this._targetRay.dispatchEvent(event);
        if (this._grip !== null) this._grip.dispatchEvent(event);
        if (this._hand !== null) this._hand.dispatchEvent(event);
        return this;
    }
    connect(inputSource) {
        if (inputSource && inputSource.hand) {
            const hand = this._hand;
            if (hand) for (const inputjoint of inputSource.hand.values())// Initialize hand with joints when connected
            this._getHandJoint(hand, inputjoint);
        }
        this.dispatchEvent({
            type: "connected",
            data: inputSource
        });
        return this;
    }
    disconnect(inputSource) {
        this.dispatchEvent({
            type: "disconnected",
            data: inputSource
        });
        if (this._targetRay !== null) this._targetRay.visible = false;
        if (this._grip !== null) this._grip.visible = false;
        if (this._hand !== null) this._hand.visible = false;
        return this;
    }
    update(inputSource, frame, referenceSpace) {
        let inputPose = null;
        let gripPose = null;
        let handPose = null;
        const targetRay = this._targetRay;
        const grip = this._grip;
        const hand = this._hand;
        if (inputSource && frame.session.visibilityState !== "visible-blurred") {
            if (hand && inputSource.hand) {
                handPose = true;
                for (const inputjoint of inputSource.hand.values()){
                    // Update the joints groups with the XRJoint poses
                    const jointPose = frame.getJointPose(inputjoint, referenceSpace);
                    // The transform of this joint will be updated with the joint pose on each frame
                    const joint = this._getHandJoint(hand, inputjoint);
                    if (jointPose !== null) {
                        joint.matrix.fromArray(jointPose.transform.matrix);
                        joint.matrix.decompose(joint.position, joint.rotation, joint.scale);
                        joint.matrixWorldNeedsUpdate = true;
                        joint.jointRadius = jointPose.radius;
                    }
                    joint.visible = jointPose !== null;
                }
                // Custom events
                // Check pinchz
                const indexTip = hand.joints["index-finger-tip"];
                const thumbTip = hand.joints["thumb-tip"];
                const distance = indexTip.position.distanceTo(thumbTip.position);
                const distanceToPinch = 0.02;
                const threshold = 0.005;
                if (hand.inputState.pinching && distance > distanceToPinch + threshold) {
                    hand.inputState.pinching = false;
                    this.dispatchEvent({
                        type: "pinchend",
                        handedness: inputSource.handedness,
                        target: this
                    });
                } else if (!hand.inputState.pinching && distance <= distanceToPinch - threshold) {
                    hand.inputState.pinching = true;
                    this.dispatchEvent({
                        type: "pinchstart",
                        handedness: inputSource.handedness,
                        target: this
                    });
                }
            } else if (grip !== null && inputSource.gripSpace) {
                gripPose = frame.getPose(inputSource.gripSpace, referenceSpace);
                if (gripPose !== null) {
                    grip.matrix.fromArray(gripPose.transform.matrix);
                    grip.matrix.decompose(grip.position, grip.rotation, grip.scale);
                    grip.matrixWorldNeedsUpdate = true;
                    if (gripPose.linearVelocity) {
                        grip.hasLinearVelocity = true;
                        grip.linearVelocity.copy(gripPose.linearVelocity);
                    } else grip.hasLinearVelocity = false;
                    if (gripPose.angularVelocity) {
                        grip.hasAngularVelocity = true;
                        grip.angularVelocity.copy(gripPose.angularVelocity);
                    } else grip.hasAngularVelocity = false;
                }
            }
            if (targetRay !== null) {
                inputPose = frame.getPose(inputSource.targetRaySpace, referenceSpace);
                // Some runtimes (namely Vive Cosmos with Vive OpenXR Runtime) have only grip space and ray space is equal to it
                if (inputPose === null && gripPose !== null) inputPose = gripPose;
                if (inputPose !== null) {
                    targetRay.matrix.fromArray(inputPose.transform.matrix);
                    targetRay.matrix.decompose(targetRay.position, targetRay.rotation, targetRay.scale);
                    targetRay.matrixWorldNeedsUpdate = true;
                    if (inputPose.linearVelocity) {
                        targetRay.hasLinearVelocity = true;
                        targetRay.linearVelocity.copy(inputPose.linearVelocity);
                    } else targetRay.hasLinearVelocity = false;
                    if (inputPose.angularVelocity) {
                        targetRay.hasAngularVelocity = true;
                        targetRay.angularVelocity.copy(inputPose.angularVelocity);
                    } else targetRay.hasAngularVelocity = false;
                    this.dispatchEvent(_moveEvent);
                }
            }
        }
        if (targetRay !== null) targetRay.visible = inputPose !== null;
        if (grip !== null) grip.visible = gripPose !== null;
        if (hand !== null) hand.visible = handPose !== null;
        return this;
    }
    // private method
    _getHandJoint(hand, inputjoint) {
        if (hand.joints[inputjoint.jointName] === undefined) {
            const joint = new Group();
            joint.matrixAutoUpdate = false;
            joint.visible = false;
            hand.joints[inputjoint.jointName] = joint;
            hand.add(joint);
        }
        return hand.joints[inputjoint.jointName];
    }
}
class DepthTexture extends Texture {
    constructor(width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format){
        format = format !== undefined ? format : DepthFormat;
        if (format !== DepthFormat && format !== DepthStencilFormat) throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");
        if (type === undefined && format === DepthFormat) type = UnsignedIntType;
        if (type === undefined && format === DepthStencilFormat) type = UnsignedInt248Type;
        super(null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);
        this.isDepthTexture = true;
        this.image = {
            width: width,
            height: height
        };
        this.magFilter = magFilter !== undefined ? magFilter : NearestFilter;
        this.minFilter = minFilter !== undefined ? minFilter : NearestFilter;
        this.flipY = false;
        this.generateMipmaps = false;
        this.compareFunction = null;
    }
    copy(source) {
        super.copy(source);
        this.compareFunction = source.compareFunction;
        return this;
    }
    toJSON(meta) {
        const data = super.toJSON(meta);
        if (this.compareFunction !== null) data.compareFunction = this.compareFunction;
        return data;
    }
}
class WebXRManager extends EventDispatcher {
    constructor(renderer, gl){
        super();
        const scope = this;
        let session = null;
        let framebufferScaleFactor = 1.0;
        let referenceSpace = null;
        let referenceSpaceType = "local-floor";
        // Set default foveation to maximum.
        let foveation = 1.0;
        let customReferenceSpace = null;
        let pose = null;
        let glBinding = null;
        let glProjLayer = null;
        let glBaseLayer = null;
        let xrFrame = null;
        const attributes = gl.getContextAttributes();
        let initialRenderTarget = null;
        let newRenderTarget = null;
        const controllers = [];
        const controllerInputSources = [];
        //
        const cameraL = new PerspectiveCamera();
        cameraL.layers.enable(1);
        cameraL.viewport = new Vector4();
        const cameraR = new PerspectiveCamera();
        cameraR.layers.enable(2);
        cameraR.viewport = new Vector4();
        const cameras = [
            cameraL,
            cameraR
        ];
        const cameraXR = new ArrayCamera();
        cameraXR.layers.enable(1);
        cameraXR.layers.enable(2);
        let _currentDepthNear = null;
        let _currentDepthFar = null;
        //
        this.cameraAutoUpdate = true;
        this.enabled = false;
        this.isPresenting = false;
        this.getController = function(index) {
            let controller = controllers[index];
            if (controller === undefined) {
                controller = new WebXRController();
                controllers[index] = controller;
            }
            return controller.getTargetRaySpace();
        };
        this.getControllerGrip = function(index) {
            let controller = controllers[index];
            if (controller === undefined) {
                controller = new WebXRController();
                controllers[index] = controller;
            }
            return controller.getGripSpace();
        };
        this.getHand = function(index) {
            let controller = controllers[index];
            if (controller === undefined) {
                controller = new WebXRController();
                controllers[index] = controller;
            }
            return controller.getHandSpace();
        };
        //
        function onSessionEvent(event) {
            const controllerIndex = controllerInputSources.indexOf(event.inputSource);
            if (controllerIndex === -1) return;
            const controller = controllers[controllerIndex];
            if (controller !== undefined) {
                controller.update(event.inputSource, event.frame, customReferenceSpace || referenceSpace);
                controller.dispatchEvent({
                    type: event.type,
                    data: event.inputSource
                });
            }
        }
        function onSessionEnd() {
            session.removeEventListener("select", onSessionEvent);
            session.removeEventListener("selectstart", onSessionEvent);
            session.removeEventListener("selectend", onSessionEvent);
            session.removeEventListener("squeeze", onSessionEvent);
            session.removeEventListener("squeezestart", onSessionEvent);
            session.removeEventListener("squeezeend", onSessionEvent);
            session.removeEventListener("end", onSessionEnd);
            session.removeEventListener("inputsourceschange", onInputSourcesChange);
            for(let i = 0; i < controllers.length; i++){
                const inputSource = controllerInputSources[i];
                if (inputSource === null) continue;
                controllerInputSources[i] = null;
                controllers[i].disconnect(inputSource);
            }
            _currentDepthNear = null;
            _currentDepthFar = null;
            // restore framebuffer/rendering state
            renderer.setRenderTarget(initialRenderTarget);
            glBaseLayer = null;
            glProjLayer = null;
            glBinding = null;
            session = null;
            newRenderTarget = null;
            //
            animation.stop();
            scope.isPresenting = false;
            scope.dispatchEvent({
                type: "sessionend"
            });
        }
        this.setFramebufferScaleFactor = function(value) {
            framebufferScaleFactor = value;
            if (scope.isPresenting === true) console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.");
        };
        this.setReferenceSpaceType = function(value) {
            referenceSpaceType = value;
            if (scope.isPresenting === true) console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.");
        };
        this.getReferenceSpace = function() {
            return customReferenceSpace || referenceSpace;
        };
        this.setReferenceSpace = function(space) {
            customReferenceSpace = space;
        };
        this.getBaseLayer = function() {
            return glProjLayer !== null ? glProjLayer : glBaseLayer;
        };
        this.getBinding = function() {
            return glBinding;
        };
        this.getFrame = function() {
            return xrFrame;
        };
        this.getSession = function() {
            return session;
        };
        this.setSession = async function(value) {
            session = value;
            if (session !== null) {
                initialRenderTarget = renderer.getRenderTarget();
                session.addEventListener("select", onSessionEvent);
                session.addEventListener("selectstart", onSessionEvent);
                session.addEventListener("selectend", onSessionEvent);
                session.addEventListener("squeeze", onSessionEvent);
                session.addEventListener("squeezestart", onSessionEvent);
                session.addEventListener("squeezeend", onSessionEvent);
                session.addEventListener("end", onSessionEnd);
                session.addEventListener("inputsourceschange", onInputSourcesChange);
                if (attributes.xrCompatible !== true) await gl.makeXRCompatible();
                if (session.renderState.layers === undefined || renderer.capabilities.isWebGL2 === false) {
                    const layerInit = {
                        antialias: session.renderState.layers === undefined ? attributes.antialias : true,
                        alpha: true,
                        depth: attributes.depth,
                        stencil: attributes.stencil,
                        framebufferScaleFactor: framebufferScaleFactor
                    };
                    glBaseLayer = new XRWebGLLayer(session, gl, layerInit);
                    session.updateRenderState({
                        baseLayer: glBaseLayer
                    });
                    newRenderTarget = new WebGLRenderTarget(glBaseLayer.framebufferWidth, glBaseLayer.framebufferHeight, {
                        format: RGBAFormat,
                        type: UnsignedByteType,
                        colorSpace: renderer.outputColorSpace,
                        stencilBuffer: attributes.stencil
                    });
                } else {
                    let depthFormat = null;
                    let depthType = null;
                    let glDepthFormat = null;
                    if (attributes.depth) {
                        glDepthFormat = attributes.stencil ? gl.DEPTH24_STENCIL8 : gl.DEPTH_COMPONENT24;
                        depthFormat = attributes.stencil ? DepthStencilFormat : DepthFormat;
                        depthType = attributes.stencil ? UnsignedInt248Type : UnsignedIntType;
                    }
                    const projectionlayerInit = {
                        colorFormat: gl.RGBA8,
                        depthFormat: glDepthFormat,
                        scaleFactor: framebufferScaleFactor
                    };
                    glBinding = new XRWebGLBinding(session, gl);
                    glProjLayer = glBinding.createProjectionLayer(projectionlayerInit);
                    session.updateRenderState({
                        layers: [
                            glProjLayer
                        ]
                    });
                    newRenderTarget = new WebGLRenderTarget(glProjLayer.textureWidth, glProjLayer.textureHeight, {
                        format: RGBAFormat,
                        type: UnsignedByteType,
                        depthTexture: new DepthTexture(glProjLayer.textureWidth, glProjLayer.textureHeight, depthType, undefined, undefined, undefined, undefined, undefined, undefined, depthFormat),
                        stencilBuffer: attributes.stencil,
                        colorSpace: renderer.outputColorSpace,
                        samples: attributes.antialias ? 4 : 0
                    });
                    const renderTargetProperties = renderer.properties.get(newRenderTarget);
                    renderTargetProperties.__ignoreDepthValues = glProjLayer.ignoreDepthValues;
                }
                newRenderTarget.isXRRenderTarget = true; // TODO Remove this when possible, see #23278
                this.setFoveation(foveation);
                customReferenceSpace = null;
                referenceSpace = await session.requestReferenceSpace(referenceSpaceType);
                animation.setContext(session);
                animation.start();
                scope.isPresenting = true;
                scope.dispatchEvent({
                    type: "sessionstart"
                });
            }
        };
        this.getEnvironmentBlendMode = function() {
            if (session !== null) return session.environmentBlendMode;
        };
        function onInputSourcesChange(event) {
            // Notify disconnected
            for(let i = 0; i < event.removed.length; i++){
                const inputSource = event.removed[i];
                const index = controllerInputSources.indexOf(inputSource);
                if (index >= 0) {
                    controllerInputSources[index] = null;
                    controllers[index].disconnect(inputSource);
                }
            }
            // Notify connected
            for(let i = 0; i < event.added.length; i++){
                const inputSource = event.added[i];
                let controllerIndex = controllerInputSources.indexOf(inputSource);
                if (controllerIndex === -1) {
                    // Assign input source a controller that currently has no input source
                    for(let i = 0; i < controllers.length; i++){
                        if (i >= controllerInputSources.length) {
                            controllerInputSources.push(inputSource);
                            controllerIndex = i;
                            break;
                        } else if (controllerInputSources[i] === null) {
                            controllerInputSources[i] = inputSource;
                            controllerIndex = i;
                            break;
                        }
                    }
                    // If all controllers do currently receive input we ignore new ones
                    if (controllerIndex === -1) break;
                }
                const controller = controllers[controllerIndex];
                if (controller) controller.connect(inputSource);
            }
        }
        //
        const cameraLPos = new Vector3();
        const cameraRPos = new Vector3();
        /**
		 * Assumes 2 cameras that are parallel and share an X-axis, and that
		 * the cameras' projection and world matrices have already been set.
		 * And that near and far planes are identical for both cameras.
		 * Visualization of this technique: https://computergraphics.stackexchange.com/a/4765
		 */ function setProjectionFromUnion(camera, cameraL, cameraR) {
            cameraLPos.setFromMatrixPosition(cameraL.matrixWorld);
            cameraRPos.setFromMatrixPosition(cameraR.matrixWorld);
            const ipd = cameraLPos.distanceTo(cameraRPos);
            const projL = cameraL.projectionMatrix.elements;
            const projR = cameraR.projectionMatrix.elements;
            // VR systems will have identical far and near planes, and
            // most likely identical top and bottom frustum extents.
            // Use the left camera for these values.
            const near = projL[14] / (projL[10] - 1);
            const far = projL[14] / (projL[10] + 1);
            const topFov = (projL[9] + 1) / projL[5];
            const bottomFov = (projL[9] - 1) / projL[5];
            const leftFov = (projL[8] - 1) / projL[0];
            const rightFov = (projR[8] + 1) / projR[0];
            const left = near * leftFov;
            const right = near * rightFov;
            // Calculate the new camera's position offset from the
            // left camera. xOffset should be roughly half `ipd`.
            const zOffset = ipd / (-leftFov + rightFov);
            const xOffset = zOffset * -leftFov;
            // TODO: Better way to apply this offset?
            cameraL.matrixWorld.decompose(camera.position, camera.quaternion, camera.scale);
            camera.translateX(xOffset);
            camera.translateZ(zOffset);
            camera.matrixWorld.compose(camera.position, camera.quaternion, camera.scale);
            camera.matrixWorldInverse.copy(camera.matrixWorld).invert();
            // Find the union of the frustum values of the cameras and scale
            // the values so that the near plane's position does not change in world space,
            // although must now be relative to the new union camera.
            const near2 = near + zOffset;
            const far2 = far + zOffset;
            const left2 = left - xOffset;
            const right2 = right + (ipd - xOffset);
            const top2 = topFov * far / far2 * near2;
            const bottom2 = bottomFov * far / far2 * near2;
            camera.projectionMatrix.makePerspective(left2, right2, top2, bottom2, near2, far2);
            camera.projectionMatrixInverse.copy(camera.projectionMatrix).invert();
        }
        function updateCamera(camera, parent) {
            if (parent === null) camera.matrixWorld.copy(camera.matrix);
            else camera.matrixWorld.multiplyMatrices(parent.matrixWorld, camera.matrix);
            camera.matrixWorldInverse.copy(camera.matrixWorld).invert();
        }
        this.updateCamera = function(camera) {
            if (session === null) return;
            cameraXR.near = cameraR.near = cameraL.near = camera.near;
            cameraXR.far = cameraR.far = cameraL.far = camera.far;
            if (_currentDepthNear !== cameraXR.near || _currentDepthFar !== cameraXR.far) {
                // Note that the new renderState won't apply until the next frame. See #18320
                session.updateRenderState({
                    depthNear: cameraXR.near,
                    depthFar: cameraXR.far
                });
                _currentDepthNear = cameraXR.near;
                _currentDepthFar = cameraXR.far;
            }
            const parent = camera.parent;
            const cameras = cameraXR.cameras;
            updateCamera(cameraXR, parent);
            for(let i = 0; i < cameras.length; i++)updateCamera(cameras[i], parent);
            // update projection matrix for proper view frustum culling
            if (cameras.length === 2) setProjectionFromUnion(cameraXR, cameraL, cameraR);
            else // assume single camera setup (AR)
            cameraXR.projectionMatrix.copy(cameraL.projectionMatrix);
            // update user camera and its children
            updateUserCamera(camera, cameraXR, parent);
        };
        function updateUserCamera(camera, cameraXR, parent) {
            if (parent === null) camera.matrix.copy(cameraXR.matrixWorld);
            else {
                camera.matrix.copy(parent.matrixWorld);
                camera.matrix.invert();
                camera.matrix.multiply(cameraXR.matrixWorld);
            }
            camera.matrix.decompose(camera.position, camera.quaternion, camera.scale);
            camera.updateMatrixWorld(true);
            camera.projectionMatrix.copy(cameraXR.projectionMatrix);
            camera.projectionMatrixInverse.copy(cameraXR.projectionMatrixInverse);
            if (camera.isPerspectiveCamera) {
                camera.fov = RAD2DEG * 2 * Math.atan(1 / camera.projectionMatrix.elements[5]);
                camera.zoom = 1;
            }
        }
        this.getCamera = function() {
            return cameraXR;
        };
        this.getFoveation = function() {
            if (glProjLayer === null && glBaseLayer === null) return undefined;
            return foveation;
        };
        this.setFoveation = function(value) {
            // 0 = no foveation = full resolution
            // 1 = maximum foveation = the edges render at lower resolution
            foveation = value;
            if (glProjLayer !== null) glProjLayer.fixedFoveation = value;
            if (glBaseLayer !== null && glBaseLayer.fixedFoveation !== undefined) glBaseLayer.fixedFoveation = value;
        };
        // Animation Loop
        let onAnimationFrameCallback = null;
        function onAnimationFrame(time, frame) {
            pose = frame.getViewerPose(customReferenceSpace || referenceSpace);
            xrFrame = frame;
            if (pose !== null) {
                const views = pose.views;
                if (glBaseLayer !== null) {
                    renderer.setRenderTargetFramebuffer(newRenderTarget, glBaseLayer.framebuffer);
                    renderer.setRenderTarget(newRenderTarget);
                }
                let cameraXRNeedsUpdate = false;
                // check if it's necessary to rebuild cameraXR's camera list
                if (views.length !== cameraXR.cameras.length) {
                    cameraXR.cameras.length = 0;
                    cameraXRNeedsUpdate = true;
                }
                for(let i = 0; i < views.length; i++){
                    const view = views[i];
                    let viewport = null;
                    if (glBaseLayer !== null) viewport = glBaseLayer.getViewport(view);
                    else {
                        const glSubImage = glBinding.getViewSubImage(glProjLayer, view);
                        viewport = glSubImage.viewport;
                        // For side-by-side projection, we only produce a single texture for both eyes.
                        if (i === 0) {
                            renderer.setRenderTargetTextures(newRenderTarget, glSubImage.colorTexture, glProjLayer.ignoreDepthValues ? undefined : glSubImage.depthStencilTexture);
                            renderer.setRenderTarget(newRenderTarget);
                        }
                    }
                    let camera = cameras[i];
                    if (camera === undefined) {
                        camera = new PerspectiveCamera();
                        camera.layers.enable(i);
                        camera.viewport = new Vector4();
                        cameras[i] = camera;
                    }
                    camera.matrix.fromArray(view.transform.matrix);
                    camera.matrix.decompose(camera.position, camera.quaternion, camera.scale);
                    camera.projectionMatrix.fromArray(view.projectionMatrix);
                    camera.projectionMatrixInverse.copy(camera.projectionMatrix).invert();
                    camera.viewport.set(viewport.x, viewport.y, viewport.width, viewport.height);
                    if (i === 0) {
                        cameraXR.matrix.copy(camera.matrix);
                        cameraXR.matrix.decompose(cameraXR.position, cameraXR.quaternion, cameraXR.scale);
                    }
                    if (cameraXRNeedsUpdate === true) cameraXR.cameras.push(camera);
                }
            }
            //
            for(let i = 0; i < controllers.length; i++){
                const inputSource = controllerInputSources[i];
                const controller = controllers[i];
                if (inputSource !== null && controller !== undefined) controller.update(inputSource, frame, customReferenceSpace || referenceSpace);
            }
            if (onAnimationFrameCallback) onAnimationFrameCallback(time, frame);
            if (frame.detectedPlanes) scope.dispatchEvent({
                type: "planesdetected",
                data: frame
            });
            xrFrame = null;
        }
        const animation = new WebGLAnimation();
        animation.setAnimationLoop(onAnimationFrame);
        this.setAnimationLoop = function(callback) {
            onAnimationFrameCallback = callback;
        };
        this.dispose = function() {};
    }
}
function WebGLMaterials(renderer, properties) {
    function refreshTransformUniform(map, uniform) {
        if (map.matrixAutoUpdate === true) map.updateMatrix();
        uniform.value.copy(map.matrix);
    }
    function refreshFogUniforms(uniforms, fog) {
        fog.color.getRGB(uniforms.fogColor.value, getUnlitUniformColorSpace(renderer));
        if (fog.isFog) {
            uniforms.fogNear.value = fog.near;
            uniforms.fogFar.value = fog.far;
        } else if (fog.isFogExp2) uniforms.fogDensity.value = fog.density;
    }
    function refreshMaterialUniforms(uniforms, material, pixelRatio, height, transmissionRenderTarget) {
        if (material.isMeshBasicMaterial) refreshUniformsCommon(uniforms, material);
        else if (material.isMeshLambertMaterial) refreshUniformsCommon(uniforms, material);
        else if (material.isMeshToonMaterial) {
            refreshUniformsCommon(uniforms, material);
            refreshUniformsToon(uniforms, material);
        } else if (material.isMeshPhongMaterial) {
            refreshUniformsCommon(uniforms, material);
            refreshUniformsPhong(uniforms, material);
        } else if (material.isMeshStandardMaterial) {
            refreshUniformsCommon(uniforms, material);
            refreshUniformsStandard(uniforms, material);
            if (material.isMeshPhysicalMaterial) refreshUniformsPhysical(uniforms, material, transmissionRenderTarget);
        } else if (material.isMeshMatcapMaterial) {
            refreshUniformsCommon(uniforms, material);
            refreshUniformsMatcap(uniforms, material);
        } else if (material.isMeshDepthMaterial) refreshUniformsCommon(uniforms, material);
        else if (material.isMeshDistanceMaterial) {
            refreshUniformsCommon(uniforms, material);
            refreshUniformsDistance(uniforms, material);
        } else if (material.isMeshNormalMaterial) refreshUniformsCommon(uniforms, material);
        else if (material.isLineBasicMaterial) {
            refreshUniformsLine(uniforms, material);
            if (material.isLineDashedMaterial) refreshUniformsDash(uniforms, material);
        } else if (material.isPointsMaterial) refreshUniformsPoints(uniforms, material, pixelRatio, height);
        else if (material.isSpriteMaterial) refreshUniformsSprites(uniforms, material);
        else if (material.isShadowMaterial) {
            uniforms.color.value.copy(material.color);
            uniforms.opacity.value = material.opacity;
        } else if (material.isShaderMaterial) material.uniformsNeedUpdate = false; // #15581
    }
    function refreshUniformsCommon(uniforms, material) {
        uniforms.opacity.value = material.opacity;
        if (material.color) uniforms.diffuse.value.copy(material.color);
        if (material.emissive) uniforms.emissive.value.copy(material.emissive).multiplyScalar(material.emissiveIntensity);
        if (material.map) {
            uniforms.map.value = material.map;
            refreshTransformUniform(material.map, uniforms.mapTransform);
        }
        if (material.alphaMap) {
            uniforms.alphaMap.value = material.alphaMap;
            refreshTransformUniform(material.alphaMap, uniforms.alphaMapTransform);
        }
        if (material.bumpMap) {
            uniforms.bumpMap.value = material.bumpMap;
            refreshTransformUniform(material.bumpMap, uniforms.bumpMapTransform);
            uniforms.bumpScale.value = material.bumpScale;
            if (material.side === BackSide) uniforms.bumpScale.value *= -1;
        }
        if (material.normalMap) {
            uniforms.normalMap.value = material.normalMap;
            refreshTransformUniform(material.normalMap, uniforms.normalMapTransform);
            uniforms.normalScale.value.copy(material.normalScale);
            if (material.side === BackSide) uniforms.normalScale.value.negate();
        }
        if (material.displacementMap) {
            uniforms.displacementMap.value = material.displacementMap;
            refreshTransformUniform(material.displacementMap, uniforms.displacementMapTransform);
            uniforms.displacementScale.value = material.displacementScale;
            uniforms.displacementBias.value = material.displacementBias;
        }
        if (material.emissiveMap) {
            uniforms.emissiveMap.value = material.emissiveMap;
            refreshTransformUniform(material.emissiveMap, uniforms.emissiveMapTransform);
        }
        if (material.specularMap) {
            uniforms.specularMap.value = material.specularMap;
            refreshTransformUniform(material.specularMap, uniforms.specularMapTransform);
        }
        if (material.alphaTest > 0) uniforms.alphaTest.value = material.alphaTest;
        const envMap = properties.get(material).envMap;
        if (envMap) {
            uniforms.envMap.value = envMap;
            uniforms.flipEnvMap.value = envMap.isCubeTexture && envMap.isRenderTargetTexture === false ? -1 : 1;
            uniforms.reflectivity.value = material.reflectivity;
            uniforms.ior.value = material.ior;
            uniforms.refractionRatio.value = material.refractionRatio;
        }
        if (material.lightMap) {
            uniforms.lightMap.value = material.lightMap;
            // artist-friendly light intensity scaling factor
            const scaleFactor = renderer._useLegacyLights === true ? Math.PI : 1;
            uniforms.lightMapIntensity.value = material.lightMapIntensity * scaleFactor;
            refreshTransformUniform(material.lightMap, uniforms.lightMapTransform);
        }
        if (material.aoMap) {
            uniforms.aoMap.value = material.aoMap;
            uniforms.aoMapIntensity.value = material.aoMapIntensity;
            refreshTransformUniform(material.aoMap, uniforms.aoMapTransform);
        }
    }
    function refreshUniformsLine(uniforms, material) {
        uniforms.diffuse.value.copy(material.color);
        uniforms.opacity.value = material.opacity;
        if (material.map) {
            uniforms.map.value = material.map;
            refreshTransformUniform(material.map, uniforms.mapTransform);
        }
    }
    function refreshUniformsDash(uniforms, material) {
        uniforms.dashSize.value = material.dashSize;
        uniforms.totalSize.value = material.dashSize + material.gapSize;
        uniforms.scale.value = material.scale;
    }
    function refreshUniformsPoints(uniforms, material, pixelRatio, height) {
        uniforms.diffuse.value.copy(material.color);
        uniforms.opacity.value = material.opacity;
        uniforms.size.value = material.size * pixelRatio;
        uniforms.scale.value = height * 0.5;
        if (material.map) {
            uniforms.map.value = material.map;
            refreshTransformUniform(material.map, uniforms.uvTransform);
        }
        if (material.alphaMap) {
            uniforms.alphaMap.value = material.alphaMap;
            refreshTransformUniform(material.alphaMap, uniforms.alphaMapTransform);
        }
        if (material.alphaTest > 0) uniforms.alphaTest.value = material.alphaTest;
    }
    function refreshUniformsSprites(uniforms, material) {
        uniforms.diffuse.value.copy(material.color);
        uniforms.opacity.value = material.opacity;
        uniforms.rotation.value = material.rotation;
        if (material.map) {
            uniforms.map.value = material.map;
            refreshTransformUniform(material.map, uniforms.mapTransform);
        }
        if (material.alphaMap) {
            uniforms.alphaMap.value = material.alphaMap;
            refreshTransformUniform(material.alphaMap, uniforms.alphaMapTransform);
        }
        if (material.alphaTest > 0) uniforms.alphaTest.value = material.alphaTest;
    }
    function refreshUniformsPhong(uniforms, material) {
        uniforms.specular.value.copy(material.specular);
        uniforms.shininess.value = Math.max(material.shininess, 1e-4); // to prevent pow( 0.0, 0.0 )
    }
    function refreshUniformsToon(uniforms, material) {
        if (material.gradientMap) uniforms.gradientMap.value = material.gradientMap;
    }
    function refreshUniformsStandard(uniforms, material) {
        uniforms.metalness.value = material.metalness;
        if (material.metalnessMap) {
            uniforms.metalnessMap.value = material.metalnessMap;
            refreshTransformUniform(material.metalnessMap, uniforms.metalnessMapTransform);
        }
        uniforms.roughness.value = material.roughness;
        if (material.roughnessMap) {
            uniforms.roughnessMap.value = material.roughnessMap;
            refreshTransformUniform(material.roughnessMap, uniforms.roughnessMapTransform);
        }
        const envMap = properties.get(material).envMap;
        if (envMap) //uniforms.envMap.value = material.envMap; // part of uniforms common
        uniforms.envMapIntensity.value = material.envMapIntensity;
    }
    function refreshUniformsPhysical(uniforms, material, transmissionRenderTarget) {
        uniforms.ior.value = material.ior; // also part of uniforms common
        if (material.sheen > 0) {
            uniforms.sheenColor.value.copy(material.sheenColor).multiplyScalar(material.sheen);
            uniforms.sheenRoughness.value = material.sheenRoughness;
            if (material.sheenColorMap) {
                uniforms.sheenColorMap.value = material.sheenColorMap;
                refreshTransformUniform(material.sheenColorMap, uniforms.sheenColorMapTransform);
            }
            if (material.sheenRoughnessMap) {
                uniforms.sheenRoughnessMap.value = material.sheenRoughnessMap;
                refreshTransformUniform(material.sheenRoughnessMap, uniforms.sheenRoughnessMapTransform);
            }
        }
        if (material.clearcoat > 0) {
            uniforms.clearcoat.value = material.clearcoat;
            uniforms.clearcoatRoughness.value = material.clearcoatRoughness;
            if (material.clearcoatMap) {
                uniforms.clearcoatMap.value = material.clearcoatMap;
                refreshTransformUniform(material.clearcoatMap, uniforms.clearcoatMapTransform);
            }
            if (material.clearcoatRoughnessMap) {
                uniforms.clearcoatRoughnessMap.value = material.clearcoatRoughnessMap;
                refreshTransformUniform(material.clearcoatRoughnessMap, uniforms.clearcoatRoughnessMapTransform);
            }
            if (material.clearcoatNormalMap) {
                uniforms.clearcoatNormalMap.value = material.clearcoatNormalMap;
                refreshTransformUniform(material.clearcoatNormalMap, uniforms.clearcoatNormalMapTransform);
                uniforms.clearcoatNormalScale.value.copy(material.clearcoatNormalScale);
                if (material.side === BackSide) uniforms.clearcoatNormalScale.value.negate();
            }
        }
        if (material.iridescence > 0) {
            uniforms.iridescence.value = material.iridescence;
            uniforms.iridescenceIOR.value = material.iridescenceIOR;
            uniforms.iridescenceThicknessMinimum.value = material.iridescenceThicknessRange[0];
            uniforms.iridescenceThicknessMaximum.value = material.iridescenceThicknessRange[1];
            if (material.iridescenceMap) {
                uniforms.iridescenceMap.value = material.iridescenceMap;
                refreshTransformUniform(material.iridescenceMap, uniforms.iridescenceMapTransform);
            }
            if (material.iridescenceThicknessMap) {
                uniforms.iridescenceThicknessMap.value = material.iridescenceThicknessMap;
                refreshTransformUniform(material.iridescenceThicknessMap, uniforms.iridescenceThicknessMapTransform);
            }
        }
        if (material.transmission > 0) {
            uniforms.transmission.value = material.transmission;
            uniforms.transmissionSamplerMap.value = transmissionRenderTarget.texture;
            uniforms.transmissionSamplerSize.value.set(transmissionRenderTarget.width, transmissionRenderTarget.height);
            if (material.transmissionMap) {
                uniforms.transmissionMap.value = material.transmissionMap;
                refreshTransformUniform(material.transmissionMap, uniforms.transmissionMapTransform);
            }
            uniforms.thickness.value = material.thickness;
            if (material.thicknessMap) {
                uniforms.thicknessMap.value = material.thicknessMap;
                refreshTransformUniform(material.thicknessMap, uniforms.thicknessMapTransform);
            }
            uniforms.attenuationDistance.value = material.attenuationDistance;
            uniforms.attenuationColor.value.copy(material.attenuationColor);
        }
        if (material.anisotropy > 0) {
            uniforms.anisotropyVector.value.set(material.anisotropy * Math.cos(material.anisotropyRotation), material.anisotropy * Math.sin(material.anisotropyRotation));
            if (material.anisotropyMap) {
                uniforms.anisotropyMap.value = material.anisotropyMap;
                refreshTransformUniform(material.anisotropyMap, uniforms.anisotropyMapTransform);
            }
        }
        uniforms.specularIntensity.value = material.specularIntensity;
        uniforms.specularColor.value.copy(material.specularColor);
        if (material.specularColorMap) {
            uniforms.specularColorMap.value = material.specularColorMap;
            refreshTransformUniform(material.specularColorMap, uniforms.specularColorMapTransform);
        }
        if (material.specularIntensityMap) {
            uniforms.specularIntensityMap.value = material.specularIntensityMap;
            refreshTransformUniform(material.specularIntensityMap, uniforms.specularIntensityMapTransform);
        }
    }
    function refreshUniformsMatcap(uniforms, material) {
        if (material.matcap) uniforms.matcap.value = material.matcap;
    }
    function refreshUniformsDistance(uniforms, material) {
        const light = properties.get(material).light;
        uniforms.referencePosition.value.setFromMatrixPosition(light.matrixWorld);
        uniforms.nearDistance.value = light.shadow.camera.near;
        uniforms.farDistance.value = light.shadow.camera.far;
    }
    return {
        refreshFogUniforms: refreshFogUniforms,
        refreshMaterialUniforms: refreshMaterialUniforms
    };
}
function WebGLUniformsGroups(gl, info, capabilities, state) {
    let buffers = {};
    let updateList = {};
    let allocatedBindingPoints = [];
    const maxBindingPoints = capabilities.isWebGL2 ? gl.getParameter(gl.MAX_UNIFORM_BUFFER_BINDINGS) : 0; // binding points are global whereas block indices are per shader program
    function bind(uniformsGroup, program) {
        const webglProgram = program.program;
        state.uniformBlockBinding(uniformsGroup, webglProgram);
    }
    function update(uniformsGroup, program) {
        let buffer = buffers[uniformsGroup.id];
        if (buffer === undefined) {
            prepareUniformsGroup(uniformsGroup);
            buffer = createBuffer(uniformsGroup);
            buffers[uniformsGroup.id] = buffer;
            uniformsGroup.addEventListener("dispose", onUniformsGroupsDispose);
        }
        // ensure to update the binding points/block indices mapping for this program
        const webglProgram = program.program;
        state.updateUBOMapping(uniformsGroup, webglProgram);
        // update UBO once per frame
        const frame = info.render.frame;
        if (updateList[uniformsGroup.id] !== frame) {
            updateBufferData(uniformsGroup);
            updateList[uniformsGroup.id] = frame;
        }
    }
    function createBuffer(uniformsGroup) {
        // the setup of an UBO is independent of a particular shader program but global
        const bindingPointIndex = allocateBindingPointIndex();
        uniformsGroup.__bindingPointIndex = bindingPointIndex;
        const buffer = gl.createBuffer();
        const size = uniformsGroup.__size;
        const usage = uniformsGroup.usage;
        gl.bindBuffer(gl.UNIFORM_BUFFER, buffer);
        gl.bufferData(gl.UNIFORM_BUFFER, size, usage);
        gl.bindBuffer(gl.UNIFORM_BUFFER, null);
        gl.bindBufferBase(gl.UNIFORM_BUFFER, bindingPointIndex, buffer);
        return buffer;
    }
    function allocateBindingPointIndex() {
        for(let i = 0; i < maxBindingPoints; i++)if (allocatedBindingPoints.indexOf(i) === -1) {
            allocatedBindingPoints.push(i);
            return i;
        }
        console.error("THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached.");
        return 0;
    }
    function updateBufferData(uniformsGroup) {
        const buffer = buffers[uniformsGroup.id];
        const uniforms = uniformsGroup.uniforms;
        const cache = uniformsGroup.__cache;
        gl.bindBuffer(gl.UNIFORM_BUFFER, buffer);
        for(let i = 0, il = uniforms.length; i < il; i++){
            const uniform = uniforms[i];
            // partly update the buffer if necessary
            if (hasUniformChanged(uniform, i, cache) === true) {
                const offset = uniform.__offset;
                const values = Array.isArray(uniform.value) ? uniform.value : [
                    uniform.value
                ];
                let arrayOffset = 0;
                for(let i = 0; i < values.length; i++){
                    const value = values[i];
                    const info = getUniformSize(value);
                    if (typeof value === "number") {
                        uniform.__data[0] = value;
                        gl.bufferSubData(gl.UNIFORM_BUFFER, offset + arrayOffset, uniform.__data);
                    } else if (value.isMatrix3) {
                        // manually converting 3x3 to 3x4
                        uniform.__data[0] = value.elements[0];
                        uniform.__data[1] = value.elements[1];
                        uniform.__data[2] = value.elements[2];
                        uniform.__data[3] = value.elements[0];
                        uniform.__data[4] = value.elements[3];
                        uniform.__data[5] = value.elements[4];
                        uniform.__data[6] = value.elements[5];
                        uniform.__data[7] = value.elements[0];
                        uniform.__data[8] = value.elements[6];
                        uniform.__data[9] = value.elements[7];
                        uniform.__data[10] = value.elements[8];
                        uniform.__data[11] = value.elements[0];
                    } else {
                        value.toArray(uniform.__data, arrayOffset);
                        arrayOffset += info.storage / Float32Array.BYTES_PER_ELEMENT;
                    }
                }
                gl.bufferSubData(gl.UNIFORM_BUFFER, offset, uniform.__data);
            }
        }
        gl.bindBuffer(gl.UNIFORM_BUFFER, null);
    }
    function hasUniformChanged(uniform, index, cache) {
        const value = uniform.value;
        if (cache[index] === undefined) {
            // cache entry does not exist so far
            if (typeof value === "number") cache[index] = value;
            else {
                const values = Array.isArray(value) ? value : [
                    value
                ];
                const tempValues = [];
                for(let i = 0; i < values.length; i++)tempValues.push(values[i].clone());
                cache[index] = tempValues;
            }
            return true;
        } else {
            // compare current value with cached entry
            if (typeof value === "number") {
                if (cache[index] !== value) {
                    cache[index] = value;
                    return true;
                }
            } else {
                const cachedObjects = Array.isArray(cache[index]) ? cache[index] : [
                    cache[index]
                ];
                const values = Array.isArray(value) ? value : [
                    value
                ];
                for(let i = 0; i < cachedObjects.length; i++){
                    const cachedObject = cachedObjects[i];
                    if (cachedObject.equals(values[i]) === false) {
                        cachedObject.copy(values[i]);
                        return true;
                    }
                }
            }
        }
        return false;
    }
    function prepareUniformsGroup(uniformsGroup) {
        // determine total buffer size according to the STD140 layout
        // Hint: STD140 is the only supported layout in WebGL 2
        const uniforms = uniformsGroup.uniforms;
        let offset = 0; // global buffer offset in bytes
        const chunkSize = 16; // size of a chunk in bytes
        let chunkOffset = 0; // offset within a single chunk in bytes
        for(let i = 0, l = uniforms.length; i < l; i++){
            const uniform = uniforms[i];
            const infos = {
                boundary: 0,
                storage: 0 // bytes
            };
            const values = Array.isArray(uniform.value) ? uniform.value : [
                uniform.value
            ];
            for(let j = 0, jl = values.length; j < jl; j++){
                const value = values[j];
                const info = getUniformSize(value);
                infos.boundary += info.boundary;
                infos.storage += info.storage;
            }
            // the following two properties will be used for partial buffer updates
            uniform.__data = new Float32Array(infos.storage / Float32Array.BYTES_PER_ELEMENT);
            uniform.__offset = offset;
            //
            if (i > 0) {
                chunkOffset = offset % chunkSize;
                const remainingSizeInChunk = chunkSize - chunkOffset;
                // check for chunk overflow
                if (chunkOffset !== 0 && remainingSizeInChunk - infos.boundary < 0) {
                    // add padding and adjust offset
                    offset += chunkSize - chunkOffset;
                    uniform.__offset = offset;
                }
            }
            offset += infos.storage;
        }
        // ensure correct final padding
        chunkOffset = offset % chunkSize;
        if (chunkOffset > 0) offset += chunkSize - chunkOffset;
        //
        uniformsGroup.__size = offset;
        uniformsGroup.__cache = {};
        return this;
    }
    function getUniformSize(value) {
        const info = {
            boundary: 0,
            storage: 0 // bytes
        };
        // determine sizes according to STD140
        if (typeof value === "number") {
            // float/int
            info.boundary = 4;
            info.storage = 4;
        } else if (value.isVector2) {
            // vec2
            info.boundary = 8;
            info.storage = 8;
        } else if (value.isVector3 || value.isColor) {
            // vec3
            info.boundary = 16;
            info.storage = 12; // evil: vec3 must start on a 16-byte boundary but it only consumes 12 bytes
        } else if (value.isVector4) {
            // vec4
            info.boundary = 16;
            info.storage = 16;
        } else if (value.isMatrix3) {
            // mat3 (in STD140 a 3x3 matrix is represented as 3x4)
            info.boundary = 48;
            info.storage = 48;
        } else if (value.isMatrix4) {
            // mat4
            info.boundary = 64;
            info.storage = 64;
        } else if (value.isTexture) console.warn("THREE.WebGLRenderer: Texture samplers can not be part of an uniforms group.");
        else console.warn("THREE.WebGLRenderer: Unsupported uniform value type.", value);
        return info;
    }
    function onUniformsGroupsDispose(event) {
        const uniformsGroup = event.target;
        uniformsGroup.removeEventListener("dispose", onUniformsGroupsDispose);
        const index = allocatedBindingPoints.indexOf(uniformsGroup.__bindingPointIndex);
        allocatedBindingPoints.splice(index, 1);
        gl.deleteBuffer(buffers[uniformsGroup.id]);
        delete buffers[uniformsGroup.id];
        delete updateList[uniformsGroup.id];
    }
    function dispose() {
        for(const id in buffers)gl.deleteBuffer(buffers[id]);
        allocatedBindingPoints = [];
        buffers = {};
        updateList = {};
    }
    return {
        bind: bind,
        update: update,
        dispose: dispose
    };
}
class WebGLRenderer {
    constructor(parameters = {}){
        const { canvas = createCanvasElement(), context = null, depth = true, stencil = true, alpha = false, antialias = false, premultipliedAlpha = true, preserveDrawingBuffer = false, powerPreference = "default", failIfMajorPerformanceCaveat = false } = parameters;
        this.isWebGLRenderer = true;
        let _alpha;
        if (context !== null) _alpha = context.getContextAttributes().alpha;
        else _alpha = alpha;
        const uintClearColor = new Uint32Array(4);
        const intClearColor = new Int32Array(4);
        let currentRenderList = null;
        let currentRenderState = null;
        // render() can be called from within a callback triggered by another render.
        // We track this so that the nested render call gets its list and state isolated from the parent render call.
        const renderListStack = [];
        const renderStateStack = [];
        // public properties
        this.domElement = canvas;
        // Debug configuration container
        this.debug = {
            /**
			 * Enables error checking and reporting when shader programs are being compiled
			 * @type {boolean}
			 */ checkShaderErrors: true,
            /**
			 * Callback for custom error reporting.
			 * @type {?Function}
			 */ onShaderError: null
        };
        // clearing
        this.autoClear = true;
        this.autoClearColor = true;
        this.autoClearDepth = true;
        this.autoClearStencil = true;
        // scene graph
        this.sortObjects = true;
        // user-defined clipping
        this.clippingPlanes = [];
        this.localClippingEnabled = false;
        // physically based shading
        this.outputColorSpace = SRGBColorSpace;
        // physical lights
        this._useLegacyLights = false;
        // tone mapping
        this.toneMapping = NoToneMapping;
        this.toneMappingExposure = 1.0;
        // internal properties
        const _this = this;
        let _isContextLost = false;
        // internal state cache
        let _currentActiveCubeFace = 0;
        let _currentActiveMipmapLevel = 0;
        let _currentRenderTarget = null;
        let _currentMaterialId = -1;
        let _currentCamera = null;
        const _currentViewport = new Vector4();
        const _currentScissor = new Vector4();
        let _currentScissorTest = null;
        const _currentClearColor = new Color(0x000000);
        let _currentClearAlpha = 0;
        //
        let _width = canvas.width;
        let _height = canvas.height;
        let _pixelRatio = 1;
        let _opaqueSort = null;
        let _transparentSort = null;
        const _viewport = new Vector4(0, 0, _width, _height);
        const _scissor = new Vector4(0, 0, _width, _height);
        let _scissorTest = false;
        // frustum
        const _frustum = new Frustum();
        // clipping
        let _clippingEnabled = false;
        let _localClippingEnabled = false;
        // transmission
        let _transmissionRenderTarget = null;
        // camera matrices cache
        const _projScreenMatrix = new Matrix4();
        const _vector2 = new Vector2();
        const _vector3 = new Vector3();
        const _emptyScene = {
            background: null,
            fog: null,
            environment: null,
            overrideMaterial: null,
            isScene: true
        };
        function getTargetPixelRatio() {
            return _currentRenderTarget === null ? _pixelRatio : 1;
        }
        // initialize
        let _gl = context;
        function getContext(contextNames, contextAttributes) {
            for(let i = 0; i < contextNames.length; i++){
                const contextName = contextNames[i];
                const context = canvas.getContext(contextName, contextAttributes);
                if (context !== null) return context;
            }
            return null;
        }
        try {
            const contextAttributes = {
                alpha: true,
                depth,
                stencil,
                antialias,
                premultipliedAlpha,
                preserveDrawingBuffer,
                powerPreference,
                failIfMajorPerformanceCaveat
            };
            // OffscreenCanvas does not have setAttribute, see #22811
            if ("setAttribute" in canvas) canvas.setAttribute("data-engine", `three.js r${REVISION}`);
            // event listeners must be registered before WebGL context is created, see #12753
            canvas.addEventListener("webglcontextlost", onContextLost, false);
            canvas.addEventListener("webglcontextrestored", onContextRestore, false);
            canvas.addEventListener("webglcontextcreationerror", onContextCreationError, false);
            if (_gl === null) {
                const contextNames = [
                    "webgl2",
                    "webgl",
                    "experimental-webgl"
                ];
                if (_this.isWebGL1Renderer === true) contextNames.shift();
                _gl = getContext(contextNames, contextAttributes);
                if (_gl === null) {
                    if (getContext(contextNames)) throw new Error("Error creating WebGL context with your selected attributes.");
                    else throw new Error("Error creating WebGL context.");
                }
            }
            if (typeof WebGLRenderingContext !== "undefined" && _gl instanceof WebGLRenderingContext) console.warn("THREE.WebGLRenderer: WebGL 1 support was deprecated in r153 and will be removed in r163.");
            // Some experimental-webgl implementations do not have getShaderPrecisionFormat
            if (_gl.getShaderPrecisionFormat === undefined) _gl.getShaderPrecisionFormat = function() {
                return {
                    "rangeMin": 1,
                    "rangeMax": 1,
                    "precision": 1
                };
            };
        } catch (error) {
            console.error("THREE.WebGLRenderer: " + error.message);
            throw error;
        }
        let extensions, capabilities, state, info;
        let properties, textures, cubemaps, cubeuvmaps, attributes, geometries, objects;
        let programCache, materials, renderLists, renderStates, clipping, shadowMap;
        let background, morphtargets, bufferRenderer, indexedBufferRenderer;
        let utils, bindingStates, uniformsGroups;
        function initGLContext() {
            extensions = new WebGLExtensions(_gl);
            capabilities = new WebGLCapabilities(_gl, extensions, parameters);
            extensions.init(capabilities);
            utils = new WebGLUtils(_gl, extensions, capabilities);
            state = new WebGLState(_gl, extensions, capabilities);
            info = new WebGLInfo(_gl);
            properties = new WebGLProperties();
            textures = new WebGLTextures(_gl, extensions, state, properties, capabilities, utils, info);
            cubemaps = new WebGLCubeMaps(_this);
            cubeuvmaps = new WebGLCubeUVMaps(_this);
            attributes = new WebGLAttributes(_gl, capabilities);
            bindingStates = new WebGLBindingStates(_gl, extensions, attributes, capabilities);
            geometries = new WebGLGeometries(_gl, attributes, info, bindingStates);
            objects = new WebGLObjects(_gl, geometries, attributes, info);
            morphtargets = new WebGLMorphtargets(_gl, capabilities, textures);
            clipping = new WebGLClipping(properties);
            programCache = new WebGLPrograms(_this, cubemaps, cubeuvmaps, extensions, capabilities, bindingStates, clipping);
            materials = new WebGLMaterials(_this, properties);
            renderLists = new WebGLRenderLists();
            renderStates = new WebGLRenderStates(extensions, capabilities);
            background = new WebGLBackground(_this, cubemaps, cubeuvmaps, state, objects, _alpha, premultipliedAlpha);
            shadowMap = new WebGLShadowMap(_this, objects, capabilities);
            uniformsGroups = new WebGLUniformsGroups(_gl, info, capabilities, state);
            bufferRenderer = new WebGLBufferRenderer(_gl, extensions, info, capabilities);
            indexedBufferRenderer = new WebGLIndexedBufferRenderer(_gl, extensions, info, capabilities);
            info.programs = programCache.programs;
            _this.capabilities = capabilities;
            _this.extensions = extensions;
            _this.properties = properties;
            _this.renderLists = renderLists;
            _this.shadowMap = shadowMap;
            _this.state = state;
            _this.info = info;
        }
        initGLContext();
        // xr
        const xr = new WebXRManager(_this, _gl);
        this.xr = xr;
        // API
        this.getContext = function() {
            return _gl;
        };
        this.getContextAttributes = function() {
            return _gl.getContextAttributes();
        };
        this.forceContextLoss = function() {
            const extension = extensions.get("WEBGL_lose_context");
            if (extension) extension.loseContext();
        };
        this.forceContextRestore = function() {
            const extension = extensions.get("WEBGL_lose_context");
            if (extension) extension.restoreContext();
        };
        this.getPixelRatio = function() {
            return _pixelRatio;
        };
        this.setPixelRatio = function(value) {
            if (value === undefined) return;
            _pixelRatio = value;
            this.setSize(_width, _height, false);
        };
        this.getSize = function(target) {
            return target.set(_width, _height);
        };
        this.setSize = function(width, height, updateStyle = true) {
            if (xr.isPresenting) {
                console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.");
                return;
            }
            _width = width;
            _height = height;
            canvas.width = Math.floor(width * _pixelRatio);
            canvas.height = Math.floor(height * _pixelRatio);
            if (updateStyle === true) {
                canvas.style.width = width + "px";
                canvas.style.height = height + "px";
            }
            this.setViewport(0, 0, width, height);
        };
        this.getDrawingBufferSize = function(target) {
            return target.set(_width * _pixelRatio, _height * _pixelRatio).floor();
        };
        this.setDrawingBufferSize = function(width, height, pixelRatio) {
            _width = width;
            _height = height;
            _pixelRatio = pixelRatio;
            canvas.width = Math.floor(width * pixelRatio);
            canvas.height = Math.floor(height * pixelRatio);
            this.setViewport(0, 0, width, height);
        };
        this.getCurrentViewport = function(target) {
            return target.copy(_currentViewport);
        };
        this.getViewport = function(target) {
            return target.copy(_viewport);
        };
        this.setViewport = function(x, y, width, height) {
            if (x.isVector4) _viewport.set(x.x, x.y, x.z, x.w);
            else _viewport.set(x, y, width, height);
            state.viewport(_currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).floor());
        };
        this.getScissor = function(target) {
            return target.copy(_scissor);
        };
        this.setScissor = function(x, y, width, height) {
            if (x.isVector4) _scissor.set(x.x, x.y, x.z, x.w);
            else _scissor.set(x, y, width, height);
            state.scissor(_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor());
        };
        this.getScissorTest = function() {
            return _scissorTest;
        };
        this.setScissorTest = function(boolean) {
            state.setScissorTest(_scissorTest = boolean);
        };
        this.setOpaqueSort = function(method) {
            _opaqueSort = method;
        };
        this.setTransparentSort = function(method) {
            _transparentSort = method;
        };
        // Clearing
        this.getClearColor = function(target) {
            return target.copy(background.getClearColor());
        };
        this.setClearColor = function() {
            background.setClearColor.apply(background, arguments);
        };
        this.getClearAlpha = function() {
            return background.getClearAlpha();
        };
        this.setClearAlpha = function() {
            background.setClearAlpha.apply(background, arguments);
        };
        this.clear = function(color = true, depth = true, stencil = true) {
            let bits = 0;
            if (color) {
                // check if we're trying to clear an integer target
                let isIntegerFormat = false;
                if (_currentRenderTarget !== null) {
                    const targetFormat = _currentRenderTarget.texture.format;
                    isIntegerFormat = targetFormat === RGBAIntegerFormat || targetFormat === RGIntegerFormat || targetFormat === RedIntegerFormat;
                }
                // use the appropriate clear functions to clear the target if it's a signed
                // or unsigned integer target
                if (isIntegerFormat) {
                    const targetType = _currentRenderTarget.texture.type;
                    const isUnsignedType = targetType === UnsignedByteType || targetType === UnsignedIntType || targetType === UnsignedShortType || targetType === UnsignedInt248Type || targetType === UnsignedShort4444Type || targetType === UnsignedShort5551Type;
                    const clearColor = background.getClearColor();
                    const a = background.getClearAlpha();
                    const r = clearColor.r;
                    const g = clearColor.g;
                    const b = clearColor.b;
                    if (isUnsignedType) {
                        uintClearColor[0] = r;
                        uintClearColor[1] = g;
                        uintClearColor[2] = b;
                        uintClearColor[3] = a;
                        _gl.clearBufferuiv(_gl.COLOR, 0, uintClearColor);
                    } else {
                        intClearColor[0] = r;
                        intClearColor[1] = g;
                        intClearColor[2] = b;
                        intClearColor[3] = a;
                        _gl.clearBufferiv(_gl.COLOR, 0, intClearColor);
                    }
                } else bits |= _gl.COLOR_BUFFER_BIT;
            }
            if (depth) bits |= _gl.DEPTH_BUFFER_BIT;
            if (stencil) bits |= _gl.STENCIL_BUFFER_BIT;
            _gl.clear(bits);
        };
        this.clearColor = function() {
            this.clear(true, false, false);
        };
        this.clearDepth = function() {
            this.clear(false, true, false);
        };
        this.clearStencil = function() {
            this.clear(false, false, true);
        };
        //
        this.dispose = function() {
            canvas.removeEventListener("webglcontextlost", onContextLost, false);
            canvas.removeEventListener("webglcontextrestored", onContextRestore, false);
            canvas.removeEventListener("webglcontextcreationerror", onContextCreationError, false);
            renderLists.dispose();
            renderStates.dispose();
            properties.dispose();
            cubemaps.dispose();
            cubeuvmaps.dispose();
            objects.dispose();
            bindingStates.dispose();
            uniformsGroups.dispose();
            programCache.dispose();
            xr.dispose();
            xr.removeEventListener("sessionstart", onXRSessionStart);
            xr.removeEventListener("sessionend", onXRSessionEnd);
            if (_transmissionRenderTarget) {
                _transmissionRenderTarget.dispose();
                _transmissionRenderTarget = null;
            }
            animation.stop();
        };
        // Events
        function onContextLost(event) {
            event.preventDefault();
            console.log("THREE.WebGLRenderer: Context Lost.");
            _isContextLost = true;
        }
        function onContextRestore() {
            console.log("THREE.WebGLRenderer: Context Restored.");
            _isContextLost = false;
            const infoAutoReset = info.autoReset;
            const shadowMapEnabled = shadowMap.enabled;
            const shadowMapAutoUpdate = shadowMap.autoUpdate;
            const shadowMapNeedsUpdate = shadowMap.needsUpdate;
            const shadowMapType = shadowMap.type;
            initGLContext();
            info.autoReset = infoAutoReset;
            shadowMap.enabled = shadowMapEnabled;
            shadowMap.autoUpdate = shadowMapAutoUpdate;
            shadowMap.needsUpdate = shadowMapNeedsUpdate;
            shadowMap.type = shadowMapType;
        }
        function onContextCreationError(event) {
            console.error("THREE.WebGLRenderer: A WebGL context could not be created. Reason: ", event.statusMessage);
        }
        function onMaterialDispose(event) {
            const material = event.target;
            material.removeEventListener("dispose", onMaterialDispose);
            deallocateMaterial(material);
        }
        // Buffer deallocation
        function deallocateMaterial(material) {
            releaseMaterialProgramReferences(material);
            properties.remove(material);
        }
        function releaseMaterialProgramReferences(material) {
            const programs = properties.get(material).programs;
            if (programs !== undefined) {
                programs.forEach(function(program) {
                    programCache.releaseProgram(program);
                });
                if (material.isShaderMaterial) programCache.releaseShaderCache(material);
            }
        }
        // Buffer rendering
        this.renderBufferDirect = function(camera, scene, geometry, material, object, group) {
            if (scene === null) scene = _emptyScene; // renderBufferDirect second parameter used to be fog (could be null)
            const frontFaceCW = object.isMesh && object.matrixWorld.determinant() < 0;
            const program = setProgram(camera, scene, geometry, material, object);
            state.setMaterial(material, frontFaceCW);
            //
            let index = geometry.index;
            let rangeFactor = 1;
            if (material.wireframe === true) {
                index = geometries.getWireframeAttribute(geometry);
                if (index === undefined) return;
                rangeFactor = 2;
            }
            //
            const drawRange = geometry.drawRange;
            const position = geometry.attributes.position;
            let drawStart = drawRange.start * rangeFactor;
            let drawEnd = (drawRange.start + drawRange.count) * rangeFactor;
            if (group !== null) {
                drawStart = Math.max(drawStart, group.start * rangeFactor);
                drawEnd = Math.min(drawEnd, (group.start + group.count) * rangeFactor);
            }
            if (index !== null) {
                drawStart = Math.max(drawStart, 0);
                drawEnd = Math.min(drawEnd, index.count);
            } else if (position !== undefined && position !== null) {
                drawStart = Math.max(drawStart, 0);
                drawEnd = Math.min(drawEnd, position.count);
            }
            const drawCount = drawEnd - drawStart;
            if (drawCount < 0 || drawCount === Infinity) return;
            //
            bindingStates.setup(object, material, program, geometry, index);
            let attribute;
            let renderer = bufferRenderer;
            if (index !== null) {
                attribute = attributes.get(index);
                renderer = indexedBufferRenderer;
                renderer.setIndex(attribute);
            }
            //
            if (object.isMesh) {
                if (material.wireframe === true) {
                    state.setLineWidth(material.wireframeLinewidth * getTargetPixelRatio());
                    renderer.setMode(_gl.LINES);
                } else renderer.setMode(_gl.TRIANGLES);
            } else if (object.isLine) {
                let lineWidth = material.linewidth;
                if (lineWidth === undefined) lineWidth = 1; // Not using Line*Material
                state.setLineWidth(lineWidth * getTargetPixelRatio());
                if (object.isLineSegments) renderer.setMode(_gl.LINES);
                else if (object.isLineLoop) renderer.setMode(_gl.LINE_LOOP);
                else renderer.setMode(_gl.LINE_STRIP);
            } else if (object.isPoints) renderer.setMode(_gl.POINTS);
            else if (object.isSprite) renderer.setMode(_gl.TRIANGLES);
            if (object.isInstancedMesh) renderer.renderInstances(drawStart, drawCount, object.count);
            else if (geometry.isInstancedBufferGeometry) {
                const maxInstanceCount = geometry._maxInstanceCount !== undefined ? geometry._maxInstanceCount : Infinity;
                const instanceCount = Math.min(geometry.instanceCount, maxInstanceCount);
                renderer.renderInstances(drawStart, drawCount, instanceCount);
            } else renderer.render(drawStart, drawCount);
        };
        // Compile
        this.compile = function(scene, camera) {
            function prepare(material, scene, object) {
                if (material.transparent === true && material.side === DoubleSide && material.forceSinglePass === false) {
                    material.side = BackSide;
                    material.needsUpdate = true;
                    getProgram(material, scene, object);
                    material.side = FrontSide;
                    material.needsUpdate = true;
                    getProgram(material, scene, object);
                    material.side = DoubleSide;
                } else getProgram(material, scene, object);
            }
            currentRenderState = renderStates.get(scene);
            currentRenderState.init();
            renderStateStack.push(currentRenderState);
            scene.traverseVisible(function(object) {
                if (object.isLight && object.layers.test(camera.layers)) {
                    currentRenderState.pushLight(object);
                    if (object.castShadow) currentRenderState.pushShadow(object);
                }
            });
            currentRenderState.setupLights(_this._useLegacyLights);
            scene.traverse(function(object) {
                const material = object.material;
                if (material) {
                    if (Array.isArray(material)) for(let i = 0; i < material.length; i++){
                        const material2 = material[i];
                        prepare(material2, scene, object);
                    }
                    else prepare(material, scene, object);
                }
            });
            renderStateStack.pop();
            currentRenderState = null;
        };
        // Animation Loop
        let onAnimationFrameCallback = null;
        function onAnimationFrame(time) {
            if (onAnimationFrameCallback) onAnimationFrameCallback(time);
        }
        function onXRSessionStart() {
            animation.stop();
        }
        function onXRSessionEnd() {
            animation.start();
        }
        const animation = new WebGLAnimation();
        animation.setAnimationLoop(onAnimationFrame);
        if (typeof self !== "undefined") animation.setContext(self);
        this.setAnimationLoop = function(callback) {
            onAnimationFrameCallback = callback;
            xr.setAnimationLoop(callback);
            callback === null ? animation.stop() : animation.start();
        };
        xr.addEventListener("sessionstart", onXRSessionStart);
        xr.addEventListener("sessionend", onXRSessionEnd);
        // Rendering
        this.render = function(scene, camera) {
            if (camera !== undefined && camera.isCamera !== true) {
                console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");
                return;
            }
            if (_isContextLost === true) return;
            // update scene graph
            if (scene.matrixWorldAutoUpdate === true) scene.updateMatrixWorld();
            // update camera matrices and frustum
            if (camera.parent === null && camera.matrixWorldAutoUpdate === true) camera.updateMatrixWorld();
            if (xr.enabled === true && xr.isPresenting === true) {
                if (xr.cameraAutoUpdate === true) xr.updateCamera(camera);
                camera = xr.getCamera(); // use XR camera for rendering
            }
            //
            if (scene.isScene === true) scene.onBeforeRender(_this, scene, camera, _currentRenderTarget);
            currentRenderState = renderStates.get(scene, renderStateStack.length);
            currentRenderState.init();
            renderStateStack.push(currentRenderState);
            _projScreenMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);
            _frustum.setFromProjectionMatrix(_projScreenMatrix);
            _localClippingEnabled = this.localClippingEnabled;
            _clippingEnabled = clipping.init(this.clippingPlanes, _localClippingEnabled);
            currentRenderList = renderLists.get(scene, renderListStack.length);
            currentRenderList.init();
            renderListStack.push(currentRenderList);
            projectObject(scene, camera, 0, _this.sortObjects);
            currentRenderList.finish();
            if (_this.sortObjects === true) currentRenderList.sort(_opaqueSort, _transparentSort);
            //
            this.info.render.frame++;
            if (_clippingEnabled === true) clipping.beginShadows();
            const shadowsArray = currentRenderState.state.shadowsArray;
            shadowMap.render(shadowsArray, scene, camera);
            if (_clippingEnabled === true) clipping.endShadows();
            //
            if (this.info.autoReset === true) this.info.reset();
            //
            background.render(currentRenderList, scene);
            // render scene
            currentRenderState.setupLights(_this._useLegacyLights);
            if (camera.isArrayCamera) {
                const cameras = camera.cameras;
                for(let i = 0, l = cameras.length; i < l; i++){
                    const camera2 = cameras[i];
                    renderScene(currentRenderList, scene, camera2, camera2.viewport);
                }
            } else renderScene(currentRenderList, scene, camera);
            //
            if (_currentRenderTarget !== null) {
                // resolve multisample renderbuffers to a single-sample texture if necessary
                textures.updateMultisampleRenderTarget(_currentRenderTarget);
                // Generate mipmap if we're using any kind of mipmap filtering
                textures.updateRenderTargetMipmap(_currentRenderTarget);
            }
            //
            if (scene.isScene === true) scene.onAfterRender(_this, scene, camera);
            // _gl.finish();
            bindingStates.resetDefaultState();
            _currentMaterialId = -1;
            _currentCamera = null;
            renderStateStack.pop();
            if (renderStateStack.length > 0) currentRenderState = renderStateStack[renderStateStack.length - 1];
            else currentRenderState = null;
            renderListStack.pop();
            if (renderListStack.length > 0) currentRenderList = renderListStack[renderListStack.length - 1];
            else currentRenderList = null;
        };
        function projectObject(object, camera, groupOrder, sortObjects) {
            if (object.visible === false) return;
            const visible = object.layers.test(camera.layers);
            if (visible) {
                if (object.isGroup) groupOrder = object.renderOrder;
                else if (object.isLOD) {
                    if (object.autoUpdate === true) object.update(camera);
                } else if (object.isLight) {
                    currentRenderState.pushLight(object);
                    if (object.castShadow) currentRenderState.pushShadow(object);
                } else if (object.isSprite) {
                    if (!object.frustumCulled || _frustum.intersectsSprite(object)) {
                        if (sortObjects) _vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);
                        const geometry = objects.update(object);
                        const material = object.material;
                        if (material.visible) currentRenderList.push(object, geometry, material, groupOrder, _vector3.z, null);
                    }
                } else if (object.isMesh || object.isLine || object.isPoints) {
                    if (!object.frustumCulled || _frustum.intersectsObject(object)) {
                        const geometry = objects.update(object);
                        const material = object.material;
                        if (sortObjects) {
                            if (object.boundingSphere !== undefined) {
                                if (object.boundingSphere === null) object.computeBoundingSphere();
                                _vector3.copy(object.boundingSphere.center);
                            } else {
                                if (geometry.boundingSphere === null) geometry.computeBoundingSphere();
                                _vector3.copy(geometry.boundingSphere.center);
                            }
                            _vector3.applyMatrix4(object.matrixWorld).applyMatrix4(_projScreenMatrix);
                        }
                        if (Array.isArray(material)) {
                            const groups = geometry.groups;
                            for(let i = 0, l = groups.length; i < l; i++){
                                const group = groups[i];
                                const groupMaterial = material[group.materialIndex];
                                if (groupMaterial && groupMaterial.visible) currentRenderList.push(object, geometry, groupMaterial, groupOrder, _vector3.z, group);
                            }
                        } else if (material.visible) currentRenderList.push(object, geometry, material, groupOrder, _vector3.z, null);
                    }
                }
            }
            const children = object.children;
            for(let i = 0, l = children.length; i < l; i++)projectObject(children[i], camera, groupOrder, sortObjects);
        }
        function renderScene(currentRenderList, scene, camera, viewport) {
            const opaqueObjects = currentRenderList.opaque;
            const transmissiveObjects = currentRenderList.transmissive;
            const transparentObjects = currentRenderList.transparent;
            currentRenderState.setupLightsView(camera);
            if (_clippingEnabled === true) clipping.setGlobalState(_this.clippingPlanes, camera);
            if (transmissiveObjects.length > 0) renderTransmissionPass(opaqueObjects, transmissiveObjects, scene, camera);
            if (viewport) state.viewport(_currentViewport.copy(viewport));
            if (opaqueObjects.length > 0) renderObjects(opaqueObjects, scene, camera);
            if (transmissiveObjects.length > 0) renderObjects(transmissiveObjects, scene, camera);
            if (transparentObjects.length > 0) renderObjects(transparentObjects, scene, camera);
            // Ensure depth buffer writing is enabled so it can be cleared on next render
            state.buffers.depth.setTest(true);
            state.buffers.depth.setMask(true);
            state.buffers.color.setMask(true);
            state.setPolygonOffset(false);
        }
        function renderTransmissionPass(opaqueObjects, transmissiveObjects, scene, camera) {
            const isWebGL2 = capabilities.isWebGL2;
            if (_transmissionRenderTarget === null) _transmissionRenderTarget = new WebGLRenderTarget(1, 1, {
                generateMipmaps: true,
                type: extensions.has("EXT_color_buffer_half_float") ? HalfFloatType : UnsignedByteType,
                minFilter: LinearMipmapLinearFilter,
                samples: isWebGL2 ? 4 : 0
            });
            _this.getDrawingBufferSize(_vector2);
            if (isWebGL2) _transmissionRenderTarget.setSize(_vector2.x, _vector2.y);
            else _transmissionRenderTarget.setSize(floorPowerOfTwo(_vector2.x), floorPowerOfTwo(_vector2.y));
            //
            const currentRenderTarget = _this.getRenderTarget();
            _this.setRenderTarget(_transmissionRenderTarget);
            _this.getClearColor(_currentClearColor);
            _currentClearAlpha = _this.getClearAlpha();
            if (_currentClearAlpha < 1) _this.setClearColor(0xffffff, 0.5);
            _this.clear();
            // Turn off the features which can affect the frag color for opaque objects pass.
            // Otherwise they are applied twice in opaque objects pass and transmission objects pass.
            const currentToneMapping = _this.toneMapping;
            _this.toneMapping = NoToneMapping;
            renderObjects(opaqueObjects, scene, camera);
            textures.updateMultisampleRenderTarget(_transmissionRenderTarget);
            textures.updateRenderTargetMipmap(_transmissionRenderTarget);
            let renderTargetNeedsUpdate = false;
            for(let i = 0, l = transmissiveObjects.length; i < l; i++){
                const renderItem = transmissiveObjects[i];
                const object = renderItem.object;
                const geometry = renderItem.geometry;
                const material = renderItem.material;
                const group = renderItem.group;
                if (material.side === DoubleSide && object.layers.test(camera.layers)) {
                    const currentSide = material.side;
                    material.side = BackSide;
                    material.needsUpdate = true;
                    renderObject(object, scene, camera, geometry, material, group);
                    material.side = currentSide;
                    material.needsUpdate = true;
                    renderTargetNeedsUpdate = true;
                }
            }
            if (renderTargetNeedsUpdate === true) {
                textures.updateMultisampleRenderTarget(_transmissionRenderTarget);
                textures.updateRenderTargetMipmap(_transmissionRenderTarget);
            }
            _this.setRenderTarget(currentRenderTarget);
            _this.setClearColor(_currentClearColor, _currentClearAlpha);
            _this.toneMapping = currentToneMapping;
        }
        function renderObjects(renderList, scene, camera) {
            const overrideMaterial = scene.isScene === true ? scene.overrideMaterial : null;
            for(let i = 0, l = renderList.length; i < l; i++){
                const renderItem = renderList[i];
                const object = renderItem.object;
                const geometry = renderItem.geometry;
                const material = overrideMaterial === null ? renderItem.material : overrideMaterial;
                const group = renderItem.group;
                if (object.layers.test(camera.layers)) renderObject(object, scene, camera, geometry, material, group);
            }
        }
        function renderObject(object, scene, camera, geometry, material, group) {
            object.onBeforeRender(_this, scene, camera, geometry, material, group);
            object.modelViewMatrix.multiplyMatrices(camera.matrixWorldInverse, object.matrixWorld);
            object.normalMatrix.getNormalMatrix(object.modelViewMatrix);
            material.onBeforeRender(_this, scene, camera, geometry, object, group);
            if (material.transparent === true && material.side === DoubleSide && material.forceSinglePass === false) {
                material.side = BackSide;
                material.needsUpdate = true;
                _this.renderBufferDirect(camera, scene, geometry, material, object, group);
                material.side = FrontSide;
                material.needsUpdate = true;
                _this.renderBufferDirect(camera, scene, geometry, material, object, group);
                material.side = DoubleSide;
            } else _this.renderBufferDirect(camera, scene, geometry, material, object, group);
            object.onAfterRender(_this, scene, camera, geometry, material, group);
        }
        function getProgram(material, scene, object) {
            if (scene.isScene !== true) scene = _emptyScene; // scene could be a Mesh, Line, Points, ...
            const materialProperties = properties.get(material);
            const lights = currentRenderState.state.lights;
            const shadowsArray = currentRenderState.state.shadowsArray;
            const lightsStateVersion = lights.state.version;
            const parameters = programCache.getParameters(material, lights.state, shadowsArray, scene, object);
            const programCacheKey = programCache.getProgramCacheKey(parameters);
            let programs = materialProperties.programs;
            // always update environment and fog - changing these trigger an getProgram call, but it's possible that the program doesn't change
            materialProperties.environment = material.isMeshStandardMaterial ? scene.environment : null;
            materialProperties.fog = scene.fog;
            materialProperties.envMap = (material.isMeshStandardMaterial ? cubeuvmaps : cubemaps).get(material.envMap || materialProperties.environment);
            if (programs === undefined) {
                // new material
                material.addEventListener("dispose", onMaterialDispose);
                programs = new Map();
                materialProperties.programs = programs;
            }
            let program = programs.get(programCacheKey);
            if (program !== undefined) // early out if program and light state is identical
            {
                if (materialProperties.currentProgram === program && materialProperties.lightsStateVersion === lightsStateVersion) {
                    updateCommonMaterialProperties(material, parameters);
                    return program;
                }
            } else {
                parameters.uniforms = programCache.getUniforms(material);
                material.onBuild(object, parameters, _this);
                material.onBeforeCompile(parameters, _this);
                program = programCache.acquireProgram(parameters, programCacheKey);
                programs.set(programCacheKey, program);
                materialProperties.uniforms = parameters.uniforms;
            }
            const uniforms = materialProperties.uniforms;
            if (!material.isShaderMaterial && !material.isRawShaderMaterial || material.clipping === true) uniforms.clippingPlanes = clipping.uniform;
            updateCommonMaterialProperties(material, parameters);
            // store the light setup it was created for
            materialProperties.needsLights = materialNeedsLights(material);
            materialProperties.lightsStateVersion = lightsStateVersion;
            if (materialProperties.needsLights) {
                // wire up the material to this renderer's lighting state
                uniforms.ambientLightColor.value = lights.state.ambient;
                uniforms.lightProbe.value = lights.state.probe;
                uniforms.directionalLights.value = lights.state.directional;
                uniforms.directionalLightShadows.value = lights.state.directionalShadow;
                uniforms.spotLights.value = lights.state.spot;
                uniforms.spotLightShadows.value = lights.state.spotShadow;
                uniforms.rectAreaLights.value = lights.state.rectArea;
                uniforms.ltc_1.value = lights.state.rectAreaLTC1;
                uniforms.ltc_2.value = lights.state.rectAreaLTC2;
                uniforms.pointLights.value = lights.state.point;
                uniforms.pointLightShadows.value = lights.state.pointShadow;
                uniforms.hemisphereLights.value = lights.state.hemi;
                uniforms.directionalShadowMap.value = lights.state.directionalShadowMap;
                uniforms.directionalShadowMatrix.value = lights.state.directionalShadowMatrix;
                uniforms.spotShadowMap.value = lights.state.spotShadowMap;
                uniforms.spotLightMatrix.value = lights.state.spotLightMatrix;
                uniforms.spotLightMap.value = lights.state.spotLightMap;
                uniforms.pointShadowMap.value = lights.state.pointShadowMap;
                uniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix;
            // TODO (abelnation): add area lights shadow info to uniforms
            }
            const progUniforms = program.getUniforms();
            const uniformsList = WebGLUniforms.seqWithValue(progUniforms.seq, uniforms);
            materialProperties.currentProgram = program;
            materialProperties.uniformsList = uniformsList;
            return program;
        }
        function updateCommonMaterialProperties(material, parameters) {
            const materialProperties = properties.get(material);
            materialProperties.outputColorSpace = parameters.outputColorSpace;
            materialProperties.instancing = parameters.instancing;
            materialProperties.instancingColor = parameters.instancingColor;
            materialProperties.skinning = parameters.skinning;
            materialProperties.morphTargets = parameters.morphTargets;
            materialProperties.morphNormals = parameters.morphNormals;
            materialProperties.morphColors = parameters.morphColors;
            materialProperties.morphTargetsCount = parameters.morphTargetsCount;
            materialProperties.numClippingPlanes = parameters.numClippingPlanes;
            materialProperties.numIntersection = parameters.numClipIntersection;
            materialProperties.vertexAlphas = parameters.vertexAlphas;
            materialProperties.vertexTangents = parameters.vertexTangents;
            materialProperties.toneMapping = parameters.toneMapping;
        }
        function setProgram(camera, scene, geometry, material, object) {
            if (scene.isScene !== true) scene = _emptyScene; // scene could be a Mesh, Line, Points, ...
            textures.resetTextureUnits();
            const fog = scene.fog;
            const environment = material.isMeshStandardMaterial ? scene.environment : null;
            const colorSpace1 = _currentRenderTarget === null ? _this.outputColorSpace : _currentRenderTarget.isXRRenderTarget === true ? _currentRenderTarget.texture.colorSpace : LinearSRGBColorSpace;
            const envMap = (material.isMeshStandardMaterial ? cubeuvmaps : cubemaps).get(material.envMap || environment);
            const vertexAlphas = material.vertexColors === true && !!geometry.attributes.color && geometry.attributes.color.itemSize === 4;
            const vertexTangents = !!geometry.attributes.tangent && (!!material.normalMap || material.anisotropy > 0);
            const morphTargets = !!geometry.morphAttributes.position;
            const morphNormals = !!geometry.morphAttributes.normal;
            const morphColors = !!geometry.morphAttributes.color;
            let toneMapping = NoToneMapping;
            if (material.toneMapped) {
                if (_currentRenderTarget === null || _currentRenderTarget.isXRRenderTarget === true) toneMapping = _this.toneMapping;
            }
            const morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;
            const morphTargetsCount = morphAttribute !== undefined ? morphAttribute.length : 0;
            const materialProperties = properties.get(material);
            const lights = currentRenderState.state.lights;
            if (_clippingEnabled === true) {
                if (_localClippingEnabled === true || camera !== _currentCamera) {
                    const useCache = camera === _currentCamera && material.id === _currentMaterialId;
                    // we might want to call this function with some ClippingGroup
                    // object instead of the material, once it becomes feasible
                    // (#8465, #8379)
                    clipping.setState(material, camera, useCache);
                }
            }
            //
            let needsProgramChange = false;
            if (material.version === materialProperties.__version) {
                if (materialProperties.needsLights && materialProperties.lightsStateVersion !== lights.state.version) needsProgramChange = true;
                else if (materialProperties.outputColorSpace !== colorSpace1) needsProgramChange = true;
                else if (object.isInstancedMesh && materialProperties.instancing === false) needsProgramChange = true;
                else if (!object.isInstancedMesh && materialProperties.instancing === true) needsProgramChange = true;
                else if (object.isSkinnedMesh && materialProperties.skinning === false) needsProgramChange = true;
                else if (!object.isSkinnedMesh && materialProperties.skinning === true) needsProgramChange = true;
                else if (object.isInstancedMesh && materialProperties.instancingColor === true && object.instanceColor === null) needsProgramChange = true;
                else if (object.isInstancedMesh && materialProperties.instancingColor === false && object.instanceColor !== null) needsProgramChange = true;
                else if (materialProperties.envMap !== envMap) needsProgramChange = true;
                else if (material.fog === true && materialProperties.fog !== fog) needsProgramChange = true;
                else if (materialProperties.numClippingPlanes !== undefined && (materialProperties.numClippingPlanes !== clipping.numPlanes || materialProperties.numIntersection !== clipping.numIntersection)) needsProgramChange = true;
                else if (materialProperties.vertexAlphas !== vertexAlphas) needsProgramChange = true;
                else if (materialProperties.vertexTangents !== vertexTangents) needsProgramChange = true;
                else if (materialProperties.morphTargets !== morphTargets) needsProgramChange = true;
                else if (materialProperties.morphNormals !== morphNormals) needsProgramChange = true;
                else if (materialProperties.morphColors !== morphColors) needsProgramChange = true;
                else if (materialProperties.toneMapping !== toneMapping) needsProgramChange = true;
                else if (capabilities.isWebGL2 === true && materialProperties.morphTargetsCount !== morphTargetsCount) needsProgramChange = true;
            } else {
                needsProgramChange = true;
                materialProperties.__version = material.version;
            }
            //
            let program = materialProperties.currentProgram;
            if (needsProgramChange === true) program = getProgram(material, scene, object);
            let refreshProgram = false;
            let refreshMaterial = false;
            let refreshLights = false;
            const p_uniforms = program.getUniforms(), m_uniforms = materialProperties.uniforms;
            if (state.useProgram(program.program)) {
                refreshProgram = true;
                refreshMaterial = true;
                refreshLights = true;
            }
            if (material.id !== _currentMaterialId) {
                _currentMaterialId = material.id;
                refreshMaterial = true;
            }
            if (refreshProgram || _currentCamera !== camera) {
                // common camera uniforms
                p_uniforms.setValue(_gl, "projectionMatrix", camera.projectionMatrix);
                p_uniforms.setValue(_gl, "viewMatrix", camera.matrixWorldInverse);
                const uCamPos = p_uniforms.map.cameraPosition;
                if (uCamPos !== undefined) uCamPos.setValue(_gl, _vector3.setFromMatrixPosition(camera.matrixWorld));
                if (capabilities.logarithmicDepthBuffer) p_uniforms.setValue(_gl, "logDepthBufFC", 2.0 / (Math.log(camera.far + 1.0) / Math.LN2));
                // consider moving isOrthographic to UniformLib and WebGLMaterials, see https://github.com/mrdoob/three.js/pull/26467#issuecomment-1645185067
                if (material.isMeshPhongMaterial || material.isMeshToonMaterial || material.isMeshLambertMaterial || material.isMeshBasicMaterial || material.isMeshStandardMaterial || material.isShaderMaterial) p_uniforms.setValue(_gl, "isOrthographic", camera.isOrthographicCamera === true);
                if (_currentCamera !== camera) {
                    _currentCamera = camera;
                    // lighting uniforms depend on the camera so enforce an update
                    // now, in case this material supports lights - or later, when
                    // the next material that does gets activated:
                    refreshMaterial = true; // set to true on material change
                    refreshLights = true; // remains set until update done
                }
            }
            // skinning and morph target uniforms must be set even if material didn't change
            // auto-setting of texture unit for bone and morph texture must go before other textures
            // otherwise textures used for skinning and morphing can take over texture units reserved for other material textures
            if (object.isSkinnedMesh) {
                p_uniforms.setOptional(_gl, object, "bindMatrix");
                p_uniforms.setOptional(_gl, object, "bindMatrixInverse");
                const skeleton = object.skeleton;
                if (skeleton) {
                    if (capabilities.floatVertexTextures) {
                        if (skeleton.boneTexture === null) skeleton.computeBoneTexture();
                        p_uniforms.setValue(_gl, "boneTexture", skeleton.boneTexture, textures);
                        p_uniforms.setValue(_gl, "boneTextureSize", skeleton.boneTextureSize);
                    } else console.warn("THREE.WebGLRenderer: SkinnedMesh can only be used with WebGL 2. With WebGL 1 OES_texture_float and vertex textures support is required.");
                }
            }
            const morphAttributes = geometry.morphAttributes;
            if (morphAttributes.position !== undefined || morphAttributes.normal !== undefined || morphAttributes.color !== undefined && capabilities.isWebGL2 === true) morphtargets.update(object, geometry, program);
            if (refreshMaterial || materialProperties.receiveShadow !== object.receiveShadow) {
                materialProperties.receiveShadow = object.receiveShadow;
                p_uniforms.setValue(_gl, "receiveShadow", object.receiveShadow);
            }
            // https://github.com/mrdoob/three.js/pull/24467#issuecomment-1209031512
            if (material.isMeshGouraudMaterial && material.envMap !== null) {
                m_uniforms.envMap.value = envMap;
                m_uniforms.flipEnvMap.value = envMap.isCubeTexture && envMap.isRenderTargetTexture === false ? -1 : 1;
            }
            if (refreshMaterial) {
                p_uniforms.setValue(_gl, "toneMappingExposure", _this.toneMappingExposure);
                if (materialProperties.needsLights) // the current material requires lighting info
                // note: all lighting uniforms are always set correctly
                // they simply reference the renderer's state for their
                // values
                //
                // use the current material's .needsUpdate flags to set
                // the GL state when required
                markUniformsLightsNeedsUpdate(m_uniforms, refreshLights);
                // refresh uniforms common to several materials
                if (fog && material.fog === true) materials.refreshFogUniforms(m_uniforms, fog);
                materials.refreshMaterialUniforms(m_uniforms, material, _pixelRatio, _height, _transmissionRenderTarget);
                WebGLUniforms.upload(_gl, materialProperties.uniformsList, m_uniforms, textures);
            }
            if (material.isShaderMaterial && material.uniformsNeedUpdate === true) {
                WebGLUniforms.upload(_gl, materialProperties.uniformsList, m_uniforms, textures);
                material.uniformsNeedUpdate = false;
            }
            if (material.isSpriteMaterial) p_uniforms.setValue(_gl, "center", object.center);
            // common matrices
            p_uniforms.setValue(_gl, "modelViewMatrix", object.modelViewMatrix);
            p_uniforms.setValue(_gl, "normalMatrix", object.normalMatrix);
            p_uniforms.setValue(_gl, "modelMatrix", object.matrixWorld);
            // UBOs
            if (material.isShaderMaterial || material.isRawShaderMaterial) {
                const groups = material.uniformsGroups;
                for(let i = 0, l = groups.length; i < l; i++)if (capabilities.isWebGL2) {
                    const group = groups[i];
                    uniformsGroups.update(group, program);
                    uniformsGroups.bind(group, program);
                } else console.warn("THREE.WebGLRenderer: Uniform Buffer Objects can only be used with WebGL 2.");
            }
            return program;
        }
        // If uniforms are marked as clean, they don't need to be loaded to the GPU.
        function markUniformsLightsNeedsUpdate(uniforms, value) {
            uniforms.ambientLightColor.needsUpdate = value;
            uniforms.lightProbe.needsUpdate = value;
            uniforms.directionalLights.needsUpdate = value;
            uniforms.directionalLightShadows.needsUpdate = value;
            uniforms.pointLights.needsUpdate = value;
            uniforms.pointLightShadows.needsUpdate = value;
            uniforms.spotLights.needsUpdate = value;
            uniforms.spotLightShadows.needsUpdate = value;
            uniforms.rectAreaLights.needsUpdate = value;
            uniforms.hemisphereLights.needsUpdate = value;
        }
        function materialNeedsLights(material) {
            return material.isMeshLambertMaterial || material.isMeshToonMaterial || material.isMeshPhongMaterial || material.isMeshStandardMaterial || material.isShadowMaterial || material.isShaderMaterial && material.lights === true;
        }
        this.getActiveCubeFace = function() {
            return _currentActiveCubeFace;
        };
        this.getActiveMipmapLevel = function() {
            return _currentActiveMipmapLevel;
        };
        this.getRenderTarget = function() {
            return _currentRenderTarget;
        };
        this.setRenderTargetTextures = function(renderTarget, colorTexture, depthTexture) {
            properties.get(renderTarget.texture).__webglTexture = colorTexture;
            properties.get(renderTarget.depthTexture).__webglTexture = depthTexture;
            const renderTargetProperties = properties.get(renderTarget);
            renderTargetProperties.__hasExternalTextures = true;
            if (renderTargetProperties.__hasExternalTextures) {
                renderTargetProperties.__autoAllocateDepthBuffer = depthTexture === undefined;
                if (!renderTargetProperties.__autoAllocateDepthBuffer) // The multisample_render_to_texture extension doesn't work properly if there
                // are midframe flushes and an external depth buffer. Disable use of the extension.
                {
                    if (extensions.has("WEBGL_multisampled_render_to_texture") === true) {
                        console.warn("THREE.WebGLRenderer: Render-to-texture extension was disabled because an external texture was provided");
                        renderTargetProperties.__useRenderToTexture = false;
                    }
                }
            }
        };
        this.setRenderTargetFramebuffer = function(renderTarget, defaultFramebuffer) {
            const renderTargetProperties = properties.get(renderTarget);
            renderTargetProperties.__webglFramebuffer = defaultFramebuffer;
            renderTargetProperties.__useDefaultFramebuffer = defaultFramebuffer === undefined;
        };
        this.setRenderTarget = function(renderTarget, activeCubeFace = 0, activeMipmapLevel = 0) {
            _currentRenderTarget = renderTarget;
            _currentActiveCubeFace = activeCubeFace;
            _currentActiveMipmapLevel = activeMipmapLevel;
            let useDefaultFramebuffer = true;
            let framebuffer = null;
            let isCube = false;
            let isRenderTarget3D = false;
            if (renderTarget) {
                const renderTargetProperties = properties.get(renderTarget);
                if (renderTargetProperties.__useDefaultFramebuffer !== undefined) {
                    // We need to make sure to rebind the framebuffer.
                    state.bindFramebuffer(_gl.FRAMEBUFFER, null);
                    useDefaultFramebuffer = false;
                } else if (renderTargetProperties.__webglFramebuffer === undefined) textures.setupRenderTarget(renderTarget);
                else if (renderTargetProperties.__hasExternalTextures) // Color and depth texture must be rebound in order for the swapchain to update.
                textures.rebindTextures(renderTarget, properties.get(renderTarget.texture).__webglTexture, properties.get(renderTarget.depthTexture).__webglTexture);
                const texture = renderTarget.texture;
                if (texture.isData3DTexture || texture.isDataArrayTexture || texture.isCompressedArrayTexture) isRenderTarget3D = true;
                const __webglFramebuffer = properties.get(renderTarget).__webglFramebuffer;
                if (renderTarget.isWebGLCubeRenderTarget) {
                    if (Array.isArray(__webglFramebuffer[activeCubeFace])) framebuffer = __webglFramebuffer[activeCubeFace][activeMipmapLevel];
                    else framebuffer = __webglFramebuffer[activeCubeFace];
                    isCube = true;
                } else if (capabilities.isWebGL2 && renderTarget.samples > 0 && textures.useMultisampledRTT(renderTarget) === false) framebuffer = properties.get(renderTarget).__webglMultisampledFramebuffer;
                else if (Array.isArray(__webglFramebuffer)) framebuffer = __webglFramebuffer[activeMipmapLevel];
                else framebuffer = __webglFramebuffer;
                _currentViewport.copy(renderTarget.viewport);
                _currentScissor.copy(renderTarget.scissor);
                _currentScissorTest = renderTarget.scissorTest;
            } else {
                _currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).floor();
                _currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor();
                _currentScissorTest = _scissorTest;
            }
            const framebufferBound = state.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);
            if (framebufferBound && capabilities.drawBuffers && useDefaultFramebuffer) state.drawBuffers(renderTarget, framebuffer);
            state.viewport(_currentViewport);
            state.scissor(_currentScissor);
            state.setScissorTest(_currentScissorTest);
            if (isCube) {
                const textureProperties = properties.get(renderTarget.texture);
                _gl.framebufferTexture2D(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + activeCubeFace, textureProperties.__webglTexture, activeMipmapLevel);
            } else if (isRenderTarget3D) {
                const textureProperties = properties.get(renderTarget.texture);
                const layer = activeCubeFace || 0;
                _gl.framebufferTextureLayer(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, textureProperties.__webglTexture, activeMipmapLevel || 0, layer);
            }
            _currentMaterialId = -1; // reset current material to ensure correct uniform bindings
        };
        this.readRenderTargetPixels = function(renderTarget, x, y, width, height, buffer, activeCubeFaceIndex) {
            if (!(renderTarget && renderTarget.isWebGLRenderTarget)) {
                console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");
                return;
            }
            let framebuffer = properties.get(renderTarget).__webglFramebuffer;
            if (renderTarget.isWebGLCubeRenderTarget && activeCubeFaceIndex !== undefined) framebuffer = framebuffer[activeCubeFaceIndex];
            if (framebuffer) {
                state.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);
                try {
                    const texture = renderTarget.texture;
                    const textureFormat = texture.format;
                    const textureType = texture.type;
                    if (textureFormat !== RGBAFormat && utils.convert(textureFormat) !== _gl.getParameter(_gl.IMPLEMENTATION_COLOR_READ_FORMAT)) {
                        console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");
                        return;
                    }
                    const halfFloatSupportedByExt = textureType === HalfFloatType && (extensions.has("EXT_color_buffer_half_float") || capabilities.isWebGL2 && extensions.has("EXT_color_buffer_float"));
                    if (textureType !== UnsignedByteType && utils.convert(textureType) !== _gl.getParameter(_gl.IMPLEMENTATION_COLOR_READ_TYPE) && // Edge and Chrome Mac < 52 (#9513)
                    !(textureType === FloatType && (capabilities.isWebGL2 || extensions.has("OES_texture_float") || extensions.has("WEBGL_color_buffer_float"))) && // Chrome Mac >= 52 and Firefox
                    !halfFloatSupportedByExt) {
                        console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");
                        return;
                    }
                    // the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)
                    if (x >= 0 && x <= renderTarget.width - width && y >= 0 && y <= renderTarget.height - height) _gl.readPixels(x, y, width, height, utils.convert(textureFormat), utils.convert(textureType), buffer);
                } finally{
                    // restore framebuffer of current render target if necessary
                    const framebuffer = _currentRenderTarget !== null ? properties.get(_currentRenderTarget).__webglFramebuffer : null;
                    state.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);
                }
            }
        };
        this.copyFramebufferToTexture = function(position, texture, level = 0) {
            const levelScale = Math.pow(2, -level);
            const width = Math.floor(texture.image.width * levelScale);
            const height = Math.floor(texture.image.height * levelScale);
            textures.setTexture2D(texture, 0);
            _gl.copyTexSubImage2D(_gl.TEXTURE_2D, level, 0, 0, position.x, position.y, width, height);
            state.unbindTexture();
        };
        this.copyTextureToTexture = function(position, srcTexture, dstTexture, level = 0) {
            const width = srcTexture.image.width;
            const height = srcTexture.image.height;
            const glFormat = utils.convert(dstTexture.format);
            const glType = utils.convert(dstTexture.type);
            textures.setTexture2D(dstTexture, 0);
            // As another texture upload may have changed pixelStorei
            // parameters, make sure they are correct for the dstTexture
            _gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, dstTexture.flipY);
            _gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, dstTexture.premultiplyAlpha);
            _gl.pixelStorei(_gl.UNPACK_ALIGNMENT, dstTexture.unpackAlignment);
            if (srcTexture.isDataTexture) _gl.texSubImage2D(_gl.TEXTURE_2D, level, position.x, position.y, width, height, glFormat, glType, srcTexture.image.data);
            else if (srcTexture.isCompressedTexture) _gl.compressedTexSubImage2D(_gl.TEXTURE_2D, level, position.x, position.y, srcTexture.mipmaps[0].width, srcTexture.mipmaps[0].height, glFormat, srcTexture.mipmaps[0].data);
            else _gl.texSubImage2D(_gl.TEXTURE_2D, level, position.x, position.y, glFormat, glType, srcTexture.image);
            // Generate mipmaps only when copying level 0
            if (level === 0 && dstTexture.generateMipmaps) _gl.generateMipmap(_gl.TEXTURE_2D);
            state.unbindTexture();
        };
        this.copyTextureToTexture3D = function(sourceBox, position, srcTexture, dstTexture, level = 0) {
            if (_this.isWebGL1Renderer) {
                console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.");
                return;
            }
            const width = sourceBox.max.x - sourceBox.min.x + 1;
            const height = sourceBox.max.y - sourceBox.min.y + 1;
            const depth = sourceBox.max.z - sourceBox.min.z + 1;
            const glFormat = utils.convert(dstTexture.format);
            const glType = utils.convert(dstTexture.type);
            let glTarget;
            if (dstTexture.isData3DTexture) {
                textures.setTexture3D(dstTexture, 0);
                glTarget = _gl.TEXTURE_3D;
            } else if (dstTexture.isDataArrayTexture) {
                textures.setTexture2DArray(dstTexture, 0);
                glTarget = _gl.TEXTURE_2D_ARRAY;
            } else {
                console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.");
                return;
            }
            _gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, dstTexture.flipY);
            _gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, dstTexture.premultiplyAlpha);
            _gl.pixelStorei(_gl.UNPACK_ALIGNMENT, dstTexture.unpackAlignment);
            const unpackRowLen = _gl.getParameter(_gl.UNPACK_ROW_LENGTH);
            const unpackImageHeight = _gl.getParameter(_gl.UNPACK_IMAGE_HEIGHT);
            const unpackSkipPixels = _gl.getParameter(_gl.UNPACK_SKIP_PIXELS);
            const unpackSkipRows = _gl.getParameter(_gl.UNPACK_SKIP_ROWS);
            const unpackSkipImages = _gl.getParameter(_gl.UNPACK_SKIP_IMAGES);
            const image = srcTexture.isCompressedTexture ? srcTexture.mipmaps[0] : srcTexture.image;
            _gl.pixelStorei(_gl.UNPACK_ROW_LENGTH, image.width);
            _gl.pixelStorei(_gl.UNPACK_IMAGE_HEIGHT, image.height);
            _gl.pixelStorei(_gl.UNPACK_SKIP_PIXELS, sourceBox.min.x);
            _gl.pixelStorei(_gl.UNPACK_SKIP_ROWS, sourceBox.min.y);
            _gl.pixelStorei(_gl.UNPACK_SKIP_IMAGES, sourceBox.min.z);
            if (srcTexture.isDataTexture || srcTexture.isData3DTexture) _gl.texSubImage3D(glTarget, level, position.x, position.y, position.z, width, height, depth, glFormat, glType, image.data);
            else if (srcTexture.isCompressedArrayTexture) {
                console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: untested support for compressed srcTexture.");
                _gl.compressedTexSubImage3D(glTarget, level, position.x, position.y, position.z, width, height, depth, glFormat, image.data);
            } else _gl.texSubImage3D(glTarget, level, position.x, position.y, position.z, width, height, depth, glFormat, glType, image);
            _gl.pixelStorei(_gl.UNPACK_ROW_LENGTH, unpackRowLen);
            _gl.pixelStorei(_gl.UNPACK_IMAGE_HEIGHT, unpackImageHeight);
            _gl.pixelStorei(_gl.UNPACK_SKIP_PIXELS, unpackSkipPixels);
            _gl.pixelStorei(_gl.UNPACK_SKIP_ROWS, unpackSkipRows);
            _gl.pixelStorei(_gl.UNPACK_SKIP_IMAGES, unpackSkipImages);
            // Generate mipmaps only when copying level 0
            if (level === 0 && dstTexture.generateMipmaps) _gl.generateMipmap(glTarget);
            state.unbindTexture();
        };
        this.initTexture = function(texture) {
            if (texture.isCubeTexture) textures.setTextureCube(texture, 0);
            else if (texture.isData3DTexture) textures.setTexture3D(texture, 0);
            else if (texture.isDataArrayTexture || texture.isCompressedArrayTexture) textures.setTexture2DArray(texture, 0);
            else textures.setTexture2D(texture, 0);
            state.unbindTexture();
        };
        this.resetState = function() {
            _currentActiveCubeFace = 0;
            _currentActiveMipmapLevel = 0;
            _currentRenderTarget = null;
            state.reset();
            bindingStates.reset();
        };
        if (typeof __THREE_DEVTOOLS__ !== "undefined") __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe", {
            detail: this
        }));
    }
    get coordinateSystem() {
        return WebGLCoordinateSystem;
    }
    get physicallyCorrectLights() {
        console.warn("THREE.WebGLRenderer: The property .physicallyCorrectLights has been removed. Set renderer.useLegacyLights instead.");
        return !this.useLegacyLights;
    }
    set physicallyCorrectLights(value) {
        console.warn("THREE.WebGLRenderer: The property .physicallyCorrectLights has been removed. Set renderer.useLegacyLights instead.");
        this.useLegacyLights = !value;
    }
    get outputEncoding() {
        console.warn("THREE.WebGLRenderer: Property .outputEncoding has been removed. Use .outputColorSpace instead.");
        return this.outputColorSpace === SRGBColorSpace ? sRGBEncoding : LinearEncoding;
    }
    set outputEncoding(encoding) {
        console.warn("THREE.WebGLRenderer: Property .outputEncoding has been removed. Use .outputColorSpace instead.");
        this.outputColorSpace = encoding === sRGBEncoding ? SRGBColorSpace : LinearSRGBColorSpace;
    }
    get useLegacyLights() {
        console.warn("THREE.WebGLRenderer: The property .useLegacyLights has been deprecated. Migrate your lighting according to the following guide: https://discourse.threejs.org/t/updates-to-lighting-in-three-js-r155/53733.");
        return this._useLegacyLights;
    }
    set useLegacyLights(value) {
        console.warn("THREE.WebGLRenderer: The property .useLegacyLights has been deprecated. Migrate your lighting according to the following guide: https://discourse.threejs.org/t/updates-to-lighting-in-three-js-r155/53733.");
        this._useLegacyLights = value;
    }
}
class WebGL1Renderer extends WebGLRenderer {
}
WebGL1Renderer.prototype.isWebGL1Renderer = true;
class FogExp2 {
    constructor(color, density = 0.00025){
        this.isFogExp2 = true;
        this.name = "";
        this.color = new Color(color);
        this.density = density;
    }
    clone() {
        return new FogExp2(this.color, this.density);
    }
    toJSON() {
        return {
            type: "FogExp2",
            color: this.color.getHex(),
            density: this.density
        };
    }
}
class Fog {
    constructor(color, near = 1, far = 1000){
        this.isFog = true;
        this.name = "";
        this.color = new Color(color);
        this.near = near;
        this.far = far;
    }
    clone() {
        return new Fog(this.color, this.near, this.far);
    }
    toJSON() {
        return {
            type: "Fog",
            color: this.color.getHex(),
            near: this.near,
            far: this.far
        };
    }
}
class Scene extends Object3D {
    constructor(){
        super();
        this.isScene = true;
        this.type = "Scene";
        this.background = null;
        this.environment = null;
        this.fog = null;
        this.backgroundBlurriness = 0;
        this.backgroundIntensity = 1;
        this.overrideMaterial = null;
        if (typeof __THREE_DEVTOOLS__ !== "undefined") __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe", {
            detail: this
        }));
    }
    copy(source, recursive) {
        super.copy(source, recursive);
        if (source.background !== null) this.background = source.background.clone();
        if (source.environment !== null) this.environment = source.environment.clone();
        if (source.fog !== null) this.fog = source.fog.clone();
        this.backgroundBlurriness = source.backgroundBlurriness;
        this.backgroundIntensity = source.backgroundIntensity;
        if (source.overrideMaterial !== null) this.overrideMaterial = source.overrideMaterial.clone();
        this.matrixAutoUpdate = source.matrixAutoUpdate;
        return this;
    }
    toJSON(meta) {
        const data = super.toJSON(meta);
        if (this.fog !== null) data.object.fog = this.fog.toJSON();
        if (this.backgroundBlurriness > 0) data.object.backgroundBlurriness = this.backgroundBlurriness;
        if (this.backgroundIntensity !== 1) data.object.backgroundIntensity = this.backgroundIntensity;
        return data;
    }
}
class InterleavedBuffer {
    constructor(array, stride){
        this.isInterleavedBuffer = true;
        this.array = array;
        this.stride = stride;
        this.count = array !== undefined ? array.length / stride : 0;
        this.usage = StaticDrawUsage;
        this.updateRange = {
            offset: 0,
            count: -1
        };
        this.version = 0;
        this.uuid = generateUUID();
    }
    onUploadCallback() {}
    set needsUpdate(value) {
        if (value === true) this.version++;
    }
    setUsage(value) {
        this.usage = value;
        return this;
    }
    copy(source) {
        this.array = new source.array.constructor(source.array);
        this.count = source.count;
        this.stride = source.stride;
        this.usage = source.usage;
        return this;
    }
    copyAt(index1, attribute, index2) {
        index1 *= this.stride;
        index2 *= attribute.stride;
        for(let i = 0, l = this.stride; i < l; i++)this.array[index1 + i] = attribute.array[index2 + i];
        return this;
    }
    set(value, offset = 0) {
        this.array.set(value, offset);
        return this;
    }
    clone(data) {
        if (data.arrayBuffers === undefined) data.arrayBuffers = {};
        if (this.array.buffer._uuid === undefined) this.array.buffer._uuid = generateUUID();
        if (data.arrayBuffers[this.array.buffer._uuid] === undefined) data.arrayBuffers[this.array.buffer._uuid] = this.array.slice(0).buffer;
        const array = new this.array.constructor(data.arrayBuffers[this.array.buffer._uuid]);
        const ib = new this.constructor(array, this.stride);
        ib.setUsage(this.usage);
        return ib;
    }
    onUpload(callback) {
        this.onUploadCallback = callback;
        return this;
    }
    toJSON(data) {
        if (data.arrayBuffers === undefined) data.arrayBuffers = {};
        // generate UUID for array buffer if necessary
        if (this.array.buffer._uuid === undefined) this.array.buffer._uuid = generateUUID();
        if (data.arrayBuffers[this.array.buffer._uuid] === undefined) data.arrayBuffers[this.array.buffer._uuid] = Array.from(new Uint32Array(this.array.buffer));
        //
        return {
            uuid: this.uuid,
            buffer: this.array.buffer._uuid,
            type: this.array.constructor.name,
            stride: this.stride
        };
    }
}
const _vector$5 = /*@__PURE__*/ new Vector3();
class InterleavedBufferAttribute {
    constructor(interleavedBuffer, itemSize, offset, normalized = false){
        this.isInterleavedBufferAttribute = true;
        this.name = "";
        this.data = interleavedBuffer;
        this.itemSize = itemSize;
        this.offset = offset;
        this.normalized = normalized;
    }
    get count() {
        return this.data.count;
    }
    get array() {
        return this.data.array;
    }
    set needsUpdate(value) {
        this.data.needsUpdate = value;
    }
    applyMatrix4(m) {
        for(let i = 0, l = this.data.count; i < l; i++){
            _vector$5.fromBufferAttribute(this, i);
            _vector$5.applyMatrix4(m);
            this.setXYZ(i, _vector$5.x, _vector$5.y, _vector$5.z);
        }
        return this;
    }
    applyNormalMatrix(m) {
        for(let i = 0, l = this.count; i < l; i++){
            _vector$5.fromBufferAttribute(this, i);
            _vector$5.applyNormalMatrix(m);
            this.setXYZ(i, _vector$5.x, _vector$5.y, _vector$5.z);
        }
        return this;
    }
    transformDirection(m) {
        for(let i = 0, l = this.count; i < l; i++){
            _vector$5.fromBufferAttribute(this, i);
            _vector$5.transformDirection(m);
            this.setXYZ(i, _vector$5.x, _vector$5.y, _vector$5.z);
        }
        return this;
    }
    setX(index, x) {
        if (this.normalized) x = normalize(x, this.array);
        this.data.array[index * this.data.stride + this.offset] = x;
        return this;
    }
    setY(index, y) {
        if (this.normalized) y = normalize(y, this.array);
        this.data.array[index * this.data.stride + this.offset + 1] = y;
        return this;
    }
    setZ(index, z) {
        if (this.normalized) z = normalize(z, this.array);
        this.data.array[index * this.data.stride + this.offset + 2] = z;
        return this;
    }
    setW(index, w) {
        if (this.normalized) w = normalize(w, this.array);
        this.data.array[index * this.data.stride + this.offset + 3] = w;
        return this;
    }
    getX(index) {
        let x = this.data.array[index * this.data.stride + this.offset];
        if (this.normalized) x = denormalize(x, this.array);
        return x;
    }
    getY(index) {
        let y = this.data.array[index * this.data.stride + this.offset + 1];
        if (this.normalized) y = denormalize(y, this.array);
        return y;
    }
    getZ(index) {
        let z = this.data.array[index * this.data.stride + this.offset + 2];
        if (this.normalized) z = denormalize(z, this.array);
        return z;
    }
    getW(index) {
        let w = this.data.array[index * this.data.stride + this.offset + 3];
        if (this.normalized) w = denormalize(w, this.array);
        return w;
    }
    setXY(index, x, y) {
        index = index * this.data.stride + this.offset;
        if (this.normalized) {
            x = normalize(x, this.array);
            y = normalize(y, this.array);
        }
        this.data.array[index + 0] = x;
        this.data.array[index + 1] = y;
        return this;
    }
    setXYZ(index, x, y, z) {
        index = index * this.data.stride + this.offset;
        if (this.normalized) {
            x = normalize(x, this.array);
            y = normalize(y, this.array);
            z = normalize(z, this.array);
        }
        this.data.array[index + 0] = x;
        this.data.array[index + 1] = y;
        this.data.array[index + 2] = z;
        return this;
    }
    setXYZW(index, x, y, z, w) {
        index = index * this.data.stride + this.offset;
        if (this.normalized) {
            x = normalize(x, this.array);
            y = normalize(y, this.array);
            z = normalize(z, this.array);
            w = normalize(w, this.array);
        }
        this.data.array[index + 0] = x;
        this.data.array[index + 1] = y;
        this.data.array[index + 2] = z;
        this.data.array[index + 3] = w;
        return this;
    }
    clone(data) {
        if (data === undefined) {
            console.log("THREE.InterleavedBufferAttribute.clone(): Cloning an interleaved buffer attribute will de-interleave buffer data.");
            const array = [];
            for(let i = 0; i < this.count; i++){
                const index = i * this.data.stride + this.offset;
                for(let j = 0; j < this.itemSize; j++)array.push(this.data.array[index + j]);
            }
            return new BufferAttribute(new this.array.constructor(array), this.itemSize, this.normalized);
        } else {
            if (data.interleavedBuffers === undefined) data.interleavedBuffers = {};
            if (data.interleavedBuffers[this.data.uuid] === undefined) data.interleavedBuffers[this.data.uuid] = this.data.clone(data);
            return new InterleavedBufferAttribute(data.interleavedBuffers[this.data.uuid], this.itemSize, this.offset, this.normalized);
        }
    }
    toJSON(data) {
        if (data === undefined) {
            console.log("THREE.InterleavedBufferAttribute.toJSON(): Serializing an interleaved buffer attribute will de-interleave buffer data.");
            const array = [];
            for(let i = 0; i < this.count; i++){
                const index = i * this.data.stride + this.offset;
                for(let j = 0; j < this.itemSize; j++)array.push(this.data.array[index + j]);
            }
            // de-interleave data and save it as an ordinary buffer attribute for now
            return {
                itemSize: this.itemSize,
                type: this.array.constructor.name,
                array: array,
                normalized: this.normalized
            };
        } else {
            // save as true interleaved attribute
            if (data.interleavedBuffers === undefined) data.interleavedBuffers = {};
            if (data.interleavedBuffers[this.data.uuid] === undefined) data.interleavedBuffers[this.data.uuid] = this.data.toJSON(data);
            return {
                isInterleavedBufferAttribute: true,
                itemSize: this.itemSize,
                data: this.data.uuid,
                offset: this.offset,
                normalized: this.normalized
            };
        }
    }
}
class SpriteMaterial extends Material {
    constructor(parameters){
        super();
        this.isSpriteMaterial = true;
        this.type = "SpriteMaterial";
        this.color = new Color(0xffffff);
        this.map = null;
        this.alphaMap = null;
        this.rotation = 0;
        this.sizeAttenuation = true;
        this.transparent = true;
        this.fog = true;
        this.setValues(parameters);
    }
    copy(source) {
        super.copy(source);
        this.color.copy(source.color);
        this.map = source.map;
        this.alphaMap = source.alphaMap;
        this.rotation = source.rotation;
        this.sizeAttenuation = source.sizeAttenuation;
        this.fog = source.fog;
        return this;
    }
}
let _geometry;
const _intersectPoint = /*@__PURE__*/ new Vector3();
const _worldScale = /*@__PURE__*/ new Vector3();
const _mvPosition = /*@__PURE__*/ new Vector3();
const _alignedPosition = /*@__PURE__*/ new Vector2();
const _rotatedPosition = /*@__PURE__*/ new Vector2();
const _viewWorldMatrix = /*@__PURE__*/ new Matrix4();
const _vA = /*@__PURE__*/ new Vector3();
const _vB = /*@__PURE__*/ new Vector3();
const _vC = /*@__PURE__*/ new Vector3();
const _uvA = /*@__PURE__*/ new Vector2();
const _uvB = /*@__PURE__*/ new Vector2();
const _uvC = /*@__PURE__*/ new Vector2();
class Sprite extends Object3D {
    constructor(material){
        super();
        this.isSprite = true;
        this.type = "Sprite";
        if (_geometry === undefined) {
            _geometry = new BufferGeometry();
            const float32Array = new Float32Array([
                -0.5,
                -0.5,
                0,
                0,
                0,
                0.5,
                -0.5,
                0,
                1,
                0,
                0.5,
                0.5,
                0,
                1,
                1,
                -0.5,
                0.5,
                0,
                0,
                1
            ]);
            const interleavedBuffer = new InterleavedBuffer(float32Array, 5);
            _geometry.setIndex([
                0,
                1,
                2,
                0,
                2,
                3
            ]);
            _geometry.setAttribute("position", new InterleavedBufferAttribute(interleavedBuffer, 3, 0, false));
            _geometry.setAttribute("uv", new InterleavedBufferAttribute(interleavedBuffer, 2, 3, false));
        }
        this.geometry = _geometry;
        this.material = material !== undefined ? material : new SpriteMaterial();
        this.center = new Vector2(0.5, 0.5);
    }
    raycast(raycaster, intersects) {
        if (raycaster.camera === null) console.error('THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.');
        _worldScale.setFromMatrixScale(this.matrixWorld);
        _viewWorldMatrix.copy(raycaster.camera.matrixWorld);
        this.modelViewMatrix.multiplyMatrices(raycaster.camera.matrixWorldInverse, this.matrixWorld);
        _mvPosition.setFromMatrixPosition(this.modelViewMatrix);
        if (raycaster.camera.isPerspectiveCamera && this.material.sizeAttenuation === false) _worldScale.multiplyScalar(-_mvPosition.z);
        const rotation = this.material.rotation;
        let sin, cos;
        if (rotation !== 0) {
            cos = Math.cos(rotation);
            sin = Math.sin(rotation);
        }
        const center = this.center;
        transformVertex(_vA.set(-0.5, -0.5, 0), _mvPosition, center, _worldScale, sin, cos);
        transformVertex(_vB.set(0.5, -0.5, 0), _mvPosition, center, _worldScale, sin, cos);
        transformVertex(_vC.set(0.5, 0.5, 0), _mvPosition, center, _worldScale, sin, cos);
        _uvA.set(0, 0);
        _uvB.set(1, 0);
        _uvC.set(1, 1);
        // check first triangle
        let intersect = raycaster.ray.intersectTriangle(_vA, _vB, _vC, false, _intersectPoint);
        if (intersect === null) {
            // check second triangle
            transformVertex(_vB.set(-0.5, 0.5, 0), _mvPosition, center, _worldScale, sin, cos);
            _uvB.set(0, 1);
            intersect = raycaster.ray.intersectTriangle(_vA, _vC, _vB, false, _intersectPoint);
            if (intersect === null) return;
        }
        const distance = raycaster.ray.origin.distanceTo(_intersectPoint);
        if (distance < raycaster.near || distance > raycaster.far) return;
        intersects.push({
            distance: distance,
            point: _intersectPoint.clone(),
            uv: Triangle.getInterpolation(_intersectPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2()),
            face: null,
            object: this
        });
    }
    copy(source, recursive) {
        super.copy(source, recursive);
        if (source.center !== undefined) this.center.copy(source.center);
        this.material = source.material;
        return this;
    }
}
function transformVertex(vertexPosition, mvPosition, center, scale, sin, cos) {
    // compute position in camera space
    _alignedPosition.subVectors(vertexPosition, center).addScalar(0.5).multiply(scale);
    // to check if rotation is not zero
    if (sin !== undefined) {
        _rotatedPosition.x = cos * _alignedPosition.x - sin * _alignedPosition.y;
        _rotatedPosition.y = sin * _alignedPosition.x + cos * _alignedPosition.y;
    } else _rotatedPosition.copy(_alignedPosition);
    vertexPosition.copy(mvPosition);
    vertexPosition.x += _rotatedPosition.x;
    vertexPosition.y += _rotatedPosition.y;
    // transform to world space
    vertexPosition.applyMatrix4(_viewWorldMatrix);
}
const _v1$2 = /*@__PURE__*/ new Vector3();
const _v2$1 = /*@__PURE__*/ new Vector3();
class LOD extends Object3D {
    constructor(){
        super();
        this._currentLevel = 0;
        this.type = "LOD";
        Object.defineProperties(this, {
            levels: {
                enumerable: true,
                value: []
            },
            isLOD: {
                value: true
            }
        });
        this.autoUpdate = true;
    }
    copy(source) {
        super.copy(source, false);
        const levels = source.levels;
        for(let i = 0, l = levels.length; i < l; i++){
            const level = levels[i];
            this.addLevel(level.object.clone(), level.distance, level.hysteresis);
        }
        this.autoUpdate = source.autoUpdate;
        return this;
    }
    addLevel(object, distance = 0, hysteresis = 0) {
        distance = Math.abs(distance);
        const levels = this.levels;
        let l;
        for(l = 0; l < levels.length; l++){
            if (distance < levels[l].distance) break;
        }
        levels.splice(l, 0, {
            distance: distance,
            hysteresis: hysteresis,
            object: object
        });
        this.add(object);
        return this;
    }
    getCurrentLevel() {
        return this._currentLevel;
    }
    getObjectForDistance(distance) {
        const levels = this.levels;
        if (levels.length > 0) {
            let i, l;
            for(i = 1, l = levels.length; i < l; i++){
                let levelDistance = levels[i].distance;
                if (levels[i].object.visible) levelDistance -= levelDistance * levels[i].hysteresis;
                if (distance < levelDistance) break;
            }
            return levels[i - 1].object;
        }
        return null;
    }
    raycast(raycaster, intersects) {
        const levels = this.levels;
        if (levels.length > 0) {
            _v1$2.setFromMatrixPosition(this.matrixWorld);
            const distance = raycaster.ray.origin.distanceTo(_v1$2);
            this.getObjectForDistance(distance).raycast(raycaster, intersects);
        }
    }
    update(camera) {
        const levels = this.levels;
        if (levels.length > 1) {
            _v1$2.setFromMatrixPosition(camera.matrixWorld);
            _v2$1.setFromMatrixPosition(this.matrixWorld);
            const distance = _v1$2.distanceTo(_v2$1) / camera.zoom;
            levels[0].object.visible = true;
            let i, l;
            for(i = 1, l = levels.length; i < l; i++){
                let levelDistance = levels[i].distance;
                if (levels[i].object.visible) levelDistance -= levelDistance * levels[i].hysteresis;
                if (distance >= levelDistance) {
                    levels[i - 1].object.visible = false;
                    levels[i].object.visible = true;
                } else break;
            }
            this._currentLevel = i - 1;
            for(; i < l; i++)levels[i].object.visible = false;
        }
    }
    toJSON(meta) {
        const data = super.toJSON(meta);
        if (this.autoUpdate === false) data.object.autoUpdate = false;
        data.object.levels = [];
        const levels = this.levels;
        for(let i = 0, l = levels.length; i < l; i++){
            const level = levels[i];
            data.object.levels.push({
                object: level.object.uuid,
                distance: level.distance,
                hysteresis: level.hysteresis
            });
        }
        return data;
    }
}
const _basePosition = /*@__PURE__*/ new Vector3();
const _skinIndex = /*@__PURE__*/ new Vector4();
const _skinWeight = /*@__PURE__*/ new Vector4();
const _vector3 = /*@__PURE__*/ new Vector3();
const _matrix4 = /*@__PURE__*/ new Matrix4();
const _vertex = /*@__PURE__*/ new Vector3();
const _sphere$3 = /*@__PURE__*/ new Sphere();
const _inverseMatrix$2 = /*@__PURE__*/ new Matrix4();
const _ray$2 = /*@__PURE__*/ new Ray();
class SkinnedMesh extends Mesh {
    constructor(geometry, material){
        super(geometry, material);
        this.isSkinnedMesh = true;
        this.type = "SkinnedMesh";
        this.bindMode = "attached";
        this.bindMatrix = new Matrix4();
        this.bindMatrixInverse = new Matrix4();
        this.boundingBox = null;
        this.boundingSphere = null;
    }
    computeBoundingBox() {
        const geometry = this.geometry;
        if (this.boundingBox === null) this.boundingBox = new Box3();
        this.boundingBox.makeEmpty();
        const positionAttribute = geometry.getAttribute("position");
        for(let i = 0; i < positionAttribute.count; i++){
            _vertex.fromBufferAttribute(positionAttribute, i);
            this.applyBoneTransform(i, _vertex);
            this.boundingBox.expandByPoint(_vertex);
        }
    }
    computeBoundingSphere() {
        const geometry = this.geometry;
        if (this.boundingSphere === null) this.boundingSphere = new Sphere();
        this.boundingSphere.makeEmpty();
        const positionAttribute = geometry.getAttribute("position");
        for(let i = 0; i < positionAttribute.count; i++){
            _vertex.fromBufferAttribute(positionAttribute, i);
            this.applyBoneTransform(i, _vertex);
            this.boundingSphere.expandByPoint(_vertex);
        }
    }
    copy(source, recursive) {
        super.copy(source, recursive);
        this.bindMode = source.bindMode;
        this.bindMatrix.copy(source.bindMatrix);
        this.bindMatrixInverse.copy(source.bindMatrixInverse);
        this.skeleton = source.skeleton;
        if (source.boundingBox !== null) this.boundingBox = source.boundingBox.clone();
        if (source.boundingSphere !== null) this.boundingSphere = source.boundingSphere.clone();
        return this;
    }
    raycast(raycaster, intersects) {
        const material = this.material;
        const matrixWorld = this.matrixWorld;
        if (material === undefined) return;
        // test with bounding sphere in world space
        if (this.boundingSphere === null) this.computeBoundingSphere();
        _sphere$3.copy(this.boundingSphere);
        _sphere$3.applyMatrix4(matrixWorld);
        if (raycaster.ray.intersectsSphere(_sphere$3) === false) return;
        // convert ray to local space of skinned mesh
        _inverseMatrix$2.copy(matrixWorld).invert();
        _ray$2.copy(raycaster.ray).applyMatrix4(_inverseMatrix$2);
        // test with bounding box in local space
        if (this.boundingBox !== null) {
            if (_ray$2.intersectsBox(this.boundingBox) === false) return;
        }
        // test for intersections with geometry
        this._computeIntersections(raycaster, intersects, _ray$2);
    }
    getVertexPosition(index, target) {
        super.getVertexPosition(index, target);
        this.applyBoneTransform(index, target);
        return target;
    }
    bind(skeleton, bindMatrix) {
        this.skeleton = skeleton;
        if (bindMatrix === undefined) {
            this.updateMatrixWorld(true);
            this.skeleton.calculateInverses();
            bindMatrix = this.matrixWorld;
        }
        this.bindMatrix.copy(bindMatrix);
        this.bindMatrixInverse.copy(bindMatrix).invert();
    }
    pose() {
        this.skeleton.pose();
    }
    normalizeSkinWeights() {
        const vector = new Vector4();
        const skinWeight = this.geometry.attributes.skinWeight;
        for(let i = 0, l = skinWeight.count; i < l; i++){
            vector.fromBufferAttribute(skinWeight, i);
            const scale = 1.0 / vector.manhattanLength();
            if (scale !== Infinity) vector.multiplyScalar(scale);
            else vector.set(1, 0, 0, 0); // do something reasonable
            skinWeight.setXYZW(i, vector.x, vector.y, vector.z, vector.w);
        }
    }
    updateMatrixWorld(force) {
        super.updateMatrixWorld(force);
        if (this.bindMode === "attached") this.bindMatrixInverse.copy(this.matrixWorld).invert();
        else if (this.bindMode === "detached") this.bindMatrixInverse.copy(this.bindMatrix).invert();
        else console.warn("THREE.SkinnedMesh: Unrecognized bindMode: " + this.bindMode);
    }
    applyBoneTransform(index, vector) {
        const skeleton = this.skeleton;
        const geometry = this.geometry;
        _skinIndex.fromBufferAttribute(geometry.attributes.skinIndex, index);
        _skinWeight.fromBufferAttribute(geometry.attributes.skinWeight, index);
        _basePosition.copy(vector).applyMatrix4(this.bindMatrix);
        vector.set(0, 0, 0);
        for(let i = 0; i < 4; i++){
            const weight = _skinWeight.getComponent(i);
            if (weight !== 0) {
                const boneIndex = _skinIndex.getComponent(i);
                _matrix4.multiplyMatrices(skeleton.bones[boneIndex].matrixWorld, skeleton.boneInverses[boneIndex]);
                vector.addScaledVector(_vector3.copy(_basePosition).applyMatrix4(_matrix4), weight);
            }
        }
        return vector.applyMatrix4(this.bindMatrixInverse);
    }
    boneTransform(index, vector) {
        console.warn("THREE.SkinnedMesh: .boneTransform() was renamed to .applyBoneTransform() in r151.");
        return this.applyBoneTransform(index, vector);
    }
}
class Bone extends Object3D {
    constructor(){
        super();
        this.isBone = true;
        this.type = "Bone";
    }
}
class DataTexture extends Texture {
    constructor(data = null, width = 1, height = 1, format, type, mapping, wrapS, wrapT, magFilter = NearestFilter, minFilter = NearestFilter, anisotropy, colorSpace1){
        super(null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, colorSpace1);
        this.isDataTexture = true;
        this.image = {
            data: data,
            width: width,
            height: height
        };
        this.generateMipmaps = false;
        this.flipY = false;
        this.unpackAlignment = 1;
    }
}
const _offsetMatrix = /*@__PURE__*/ new Matrix4();
const _identityMatrix = /*@__PURE__*/ new Matrix4();
class Skeleton {
    constructor(bones = [], boneInverses = []){
        this.uuid = generateUUID();
        this.bones = bones.slice(0);
        this.boneInverses = boneInverses;
        this.boneMatrices = null;
        this.boneTexture = null;
        this.boneTextureSize = 0;
        this.init();
    }
    init() {
        const bones = this.bones;
        const boneInverses = this.boneInverses;
        this.boneMatrices = new Float32Array(bones.length * 16);
        // calculate inverse bone matrices if necessary
        if (boneInverses.length === 0) this.calculateInverses();
        else // handle special case
        if (bones.length !== boneInverses.length) {
            console.warn("THREE.Skeleton: Number of inverse bone matrices does not match amount of bones.");
            this.boneInverses = [];
            for(let i = 0, il = this.bones.length; i < il; i++)this.boneInverses.push(new Matrix4());
        }
    }
    calculateInverses() {
        this.boneInverses.length = 0;
        for(let i = 0, il = this.bones.length; i < il; i++){
            const inverse = new Matrix4();
            if (this.bones[i]) inverse.copy(this.bones[i].matrixWorld).invert();
            this.boneInverses.push(inverse);
        }
    }
    pose() {
        // recover the bind-time world matrices
        for(let i = 0, il = this.bones.length; i < il; i++){
            const bone = this.bones[i];
            if (bone) bone.matrixWorld.copy(this.boneInverses[i]).invert();
        }
        // compute the local matrices, positions, rotations and scales
        for(let i = 0, il = this.bones.length; i < il; i++){
            const bone = this.bones[i];
            if (bone) {
                if (bone.parent && bone.parent.isBone) {
                    bone.matrix.copy(bone.parent.matrixWorld).invert();
                    bone.matrix.multiply(bone.matrixWorld);
                } else bone.matrix.copy(bone.matrixWorld);
                bone.matrix.decompose(bone.position, bone.quaternion, bone.scale);
            }
        }
    }
    update() {
        const bones = this.bones;
        const boneInverses = this.boneInverses;
        const boneMatrices = this.boneMatrices;
        const boneTexture = this.boneTexture;
        // flatten bone matrices to array
        for(let i = 0, il = bones.length; i < il; i++){
            // compute the offset between the current and the original transform
            const matrix = bones[i] ? bones[i].matrixWorld : _identityMatrix;
            _offsetMatrix.multiplyMatrices(matrix, boneInverses[i]);
            _offsetMatrix.toArray(boneMatrices, i * 16);
        }
        if (boneTexture !== null) boneTexture.needsUpdate = true;
    }
    clone() {
        return new Skeleton(this.bones, this.boneInverses);
    }
    computeBoneTexture() {
        // layout (1 matrix = 4 pixels)
        //      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)
        //  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)
        //       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)
        //       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)
        //       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)
        let size = Math.sqrt(this.bones.length * 4); // 4 pixels needed for 1 matrix
        size = ceilPowerOfTwo(size);
        size = Math.max(size, 4);
        const boneMatrices = new Float32Array(size * size * 4); // 4 floats per RGBA pixel
        boneMatrices.set(this.boneMatrices); // copy current values
        const boneTexture = new DataTexture(boneMatrices, size, size, RGBAFormat, FloatType);
        boneTexture.needsUpdate = true;
        this.boneMatrices = boneMatrices;
        this.boneTexture = boneTexture;
        this.boneTextureSize = size;
        return this;
    }
    getBoneByName(name) {
        for(let i = 0, il = this.bones.length; i < il; i++){
            const bone = this.bones[i];
            if (bone.name === name) return bone;
        }
        return undefined;
    }
    dispose() {
        if (this.boneTexture !== null) {
            this.boneTexture.dispose();
            this.boneTexture = null;
        }
    }
    fromJSON(json, bones) {
        this.uuid = json.uuid;
        for(let i = 0, l = json.bones.length; i < l; i++){
            const uuid = json.bones[i];
            let bone = bones[uuid];
            if (bone === undefined) {
                console.warn("THREE.Skeleton: No bone found with UUID:", uuid);
                bone = new Bone();
            }
            this.bones.push(bone);
            this.boneInverses.push(new Matrix4().fromArray(json.boneInverses[i]));
        }
        this.init();
        return this;
    }
    toJSON() {
        const data = {
            metadata: {
                version: 4.6,
                type: "Skeleton",
                generator: "Skeleton.toJSON"
            },
            bones: [],
            boneInverses: []
        };
        data.uuid = this.uuid;
        const bones = this.bones;
        const boneInverses = this.boneInverses;
        for(let i = 0, l = bones.length; i < l; i++){
            const bone = bones[i];
            data.bones.push(bone.uuid);
            const boneInverse = boneInverses[i];
            data.boneInverses.push(boneInverse.toArray());
        }
        return data;
    }
}
class InstancedBufferAttribute extends BufferAttribute {
    constructor(array, itemSize, normalized, meshPerAttribute = 1){
        super(array, itemSize, normalized);
        this.isInstancedBufferAttribute = true;
        this.meshPerAttribute = meshPerAttribute;
    }
    copy(source) {
        super.copy(source);
        this.meshPerAttribute = source.meshPerAttribute;
        return this;
    }
    toJSON() {
        const data = super.toJSON();
        data.meshPerAttribute = this.meshPerAttribute;
        data.isInstancedBufferAttribute = true;
        return data;
    }
}
const _instanceLocalMatrix = /*@__PURE__*/ new Matrix4();
const _instanceWorldMatrix = /*@__PURE__*/ new Matrix4();
const _instanceIntersects = [];
const _box3 = /*@__PURE__*/ new Box3();
const _identity = /*@__PURE__*/ new Matrix4();
const _mesh = /*@__PURE__*/ new Mesh();
const _sphere$2 = /*@__PURE__*/ new Sphere();
class InstancedMesh extends Mesh {
    constructor(geometry, material, count){
        super(geometry, material);
        this.isInstancedMesh = true;
        this.instanceMatrix = new InstancedBufferAttribute(new Float32Array(count * 16), 16);
        this.instanceColor = null;
        this.count = count;
        this.boundingBox = null;
        this.boundingSphere = null;
        for(let i = 0; i < count; i++)this.setMatrixAt(i, _identity);
    }
    computeBoundingBox() {
        const geometry = this.geometry;
        const count = this.count;
        if (this.boundingBox === null) this.boundingBox = new Box3();
        if (geometry.boundingBox === null) geometry.computeBoundingBox();
        this.boundingBox.makeEmpty();
        for(let i = 0; i < count; i++){
            this.getMatrixAt(i, _instanceLocalMatrix);
            _box3.copy(geometry.boundingBox).applyMatrix4(_instanceLocalMatrix);
            this.boundingBox.union(_box3);
        }
    }
    computeBoundingSphere() {
        const geometry = this.geometry;
        const count = this.count;
        if (this.boundingSphere === null) this.boundingSphere = new Sphere();
        if (geometry.boundingSphere === null) geometry.computeBoundingSphere();
        this.boundingSphere.makeEmpty();
        for(let i = 0; i < count; i++){
            this.getMatrixAt(i, _instanceLocalMatrix);
            _sphere$2.copy(geometry.boundingSphere).applyMatrix4(_instanceLocalMatrix);
            this.boundingSphere.union(_sphere$2);
        }
    }
    copy(source, recursive) {
        super.copy(source, recursive);
        this.instanceMatrix.copy(source.instanceMatrix);
        if (source.instanceColor !== null) this.instanceColor = source.instanceColor.clone();
        this.count = source.count;
        if (source.boundingBox !== null) this.boundingBox = source.boundingBox.clone();
        if (source.boundingSphere !== null) this.boundingSphere = source.boundingSphere.clone();
        return this;
    }
    getColorAt(index, color) {
        color.fromArray(this.instanceColor.array, index * 3);
    }
    getMatrixAt(index, matrix) {
        matrix.fromArray(this.instanceMatrix.array, index * 16);
    }
    raycast(raycaster, intersects) {
        const matrixWorld = this.matrixWorld;
        const raycastTimes = this.count;
        _mesh.geometry = this.geometry;
        _mesh.material = this.material;
        if (_mesh.material === undefined) return;
        // test with bounding sphere first
        if (this.boundingSphere === null) this.computeBoundingSphere();
        _sphere$2.copy(this.boundingSphere);
        _sphere$2.applyMatrix4(matrixWorld);
        if (raycaster.ray.intersectsSphere(_sphere$2) === false) return;
        // now test each instance
        for(let instanceId = 0; instanceId < raycastTimes; instanceId++){
            // calculate the world matrix for each instance
            this.getMatrixAt(instanceId, _instanceLocalMatrix);
            _instanceWorldMatrix.multiplyMatrices(matrixWorld, _instanceLocalMatrix);
            // the mesh represents this single instance
            _mesh.matrixWorld = _instanceWorldMatrix;
            _mesh.raycast(raycaster, _instanceIntersects);
            // process the result of raycast
            for(let i = 0, l = _instanceIntersects.length; i < l; i++){
                const intersect = _instanceIntersects[i];
                intersect.instanceId = instanceId;
                intersect.object = this;
                intersects.push(intersect);
            }
            _instanceIntersects.length = 0;
        }
    }
    setColorAt(index, color) {
        if (this.instanceColor === null) this.instanceColor = new InstancedBufferAttribute(new Float32Array(this.instanceMatrix.count * 3), 3);
        color.toArray(this.instanceColor.array, index * 3);
    }
    setMatrixAt(index, matrix) {
        matrix.toArray(this.instanceMatrix.array, index * 16);
    }
    updateMorphTargets() {}
    dispose() {
        this.dispatchEvent({
            type: "dispose"
        });
    }
}
class LineBasicMaterial extends Material {
    constructor(parameters){
        super();
        this.isLineBasicMaterial = true;
        this.type = "LineBasicMaterial";
        this.color = new Color(0xffffff);
        this.map = null;
        this.linewidth = 1;
        this.linecap = "round";
        this.linejoin = "round";
        this.fog = true;
        this.setValues(parameters);
    }
    copy(source) {
        super.copy(source);
        this.color.copy(source.color);
        this.map = source.map;
        this.linewidth = source.linewidth;
        this.linecap = source.linecap;
        this.linejoin = source.linejoin;
        this.fog = source.fog;
        return this;
    }
}
const _start$1 = /*@__PURE__*/ new Vector3();
const _end$1 = /*@__PURE__*/ new Vector3();
const _inverseMatrix$1 = /*@__PURE__*/ new Matrix4();
const _ray$1 = /*@__PURE__*/ new Ray();
const _sphere$1 = /*@__PURE__*/ new Sphere();
class Line extends Object3D {
    constructor(geometry = new BufferGeometry(), material = new LineBasicMaterial()){
        super();
        this.isLine = true;
        this.type = "Line";
        this.geometry = geometry;
        this.material = material;
        this.updateMorphTargets();
    }
    copy(source, recursive) {
        super.copy(source, recursive);
        this.material = Array.isArray(source.material) ? source.material.slice() : source.material;
        this.geometry = source.geometry;
        return this;
    }
    computeLineDistances() {
        const geometry = this.geometry;
        // we assume non-indexed geometry
        if (geometry.index === null) {
            const positionAttribute = geometry.attributes.position;
            const lineDistances = [
                0
            ];
            for(let i = 1, l = positionAttribute.count; i < l; i++){
                _start$1.fromBufferAttribute(positionAttribute, i - 1);
                _end$1.fromBufferAttribute(positionAttribute, i);
                lineDistances[i] = lineDistances[i - 1];
                lineDistances[i] += _start$1.distanceTo(_end$1);
            }
            geometry.setAttribute("lineDistance", new Float32BufferAttribute(lineDistances, 1));
        } else console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");
        return this;
    }
    raycast(raycaster, intersects) {
        const geometry = this.geometry;
        const matrixWorld = this.matrixWorld;
        const threshold = raycaster.params.Line.threshold;
        const drawRange = geometry.drawRange;
        // Checking boundingSphere distance to ray
        if (geometry.boundingSphere === null) geometry.computeBoundingSphere();
        _sphere$1.copy(geometry.boundingSphere);
        _sphere$1.applyMatrix4(matrixWorld);
        _sphere$1.radius += threshold;
        if (raycaster.ray.intersectsSphere(_sphere$1) === false) return;
        //
        _inverseMatrix$1.copy(matrixWorld).invert();
        _ray$1.copy(raycaster.ray).applyMatrix4(_inverseMatrix$1);
        const localThreshold = threshold / ((this.scale.x + this.scale.y + this.scale.z) / 3);
        const localThresholdSq = localThreshold * localThreshold;
        const vStart = new Vector3();
        const vEnd = new Vector3();
        const interSegment = new Vector3();
        const interRay = new Vector3();
        const step = this.isLineSegments ? 2 : 1;
        const index = geometry.index;
        const attributes = geometry.attributes;
        const positionAttribute = attributes.position;
        if (index !== null) {
            const start = Math.max(0, drawRange.start);
            const end = Math.min(index.count, drawRange.start + drawRange.count);
            for(let i = start, l = end - 1; i < l; i += step){
                const a = index.getX(i);
                const b = index.getX(i + 1);
                vStart.fromBufferAttribute(positionAttribute, a);
                vEnd.fromBufferAttribute(positionAttribute, b);
                const distSq = _ray$1.distanceSqToSegment(vStart, vEnd, interRay, interSegment);
                if (distSq > localThresholdSq) continue;
                interRay.applyMatrix4(this.matrixWorld); //Move back to world space for distance calculation
                const distance = raycaster.ray.origin.distanceTo(interRay);
                if (distance < raycaster.near || distance > raycaster.far) continue;
                intersects.push({
                    distance: distance,
                    // What do we want? intersection point on the ray or on the segment??
                    // point: raycaster.ray.at( distance ),
                    point: interSegment.clone().applyMatrix4(this.matrixWorld),
                    index: i,
                    face: null,
                    faceIndex: null,
                    object: this
                });
            }
        } else {
            const start = Math.max(0, drawRange.start);
            const end = Math.min(positionAttribute.count, drawRange.start + drawRange.count);
            for(let i = start, l = end - 1; i < l; i += step){
                vStart.fromBufferAttribute(positionAttribute, i);
                vEnd.fromBufferAttribute(positionAttribute, i + 1);
                const distSq = _ray$1.distanceSqToSegment(vStart, vEnd, interRay, interSegment);
                if (distSq > localThresholdSq) continue;
                interRay.applyMatrix4(this.matrixWorld); //Move back to world space for distance calculation
                const distance = raycaster.ray.origin.distanceTo(interRay);
                if (distance < raycaster.near || distance > raycaster.far) continue;
                intersects.push({
                    distance: distance,
                    // What do we want? intersection point on the ray or on the segment??
                    // point: raycaster.ray.at( distance ),
                    point: interSegment.clone().applyMatrix4(this.matrixWorld),
                    index: i,
                    face: null,
                    faceIndex: null,
                    object: this
                });
            }
        }
    }
    updateMorphTargets() {
        const geometry = this.geometry;
        const morphAttributes = geometry.morphAttributes;
        const keys = Object.keys(morphAttributes);
        if (keys.length > 0) {
            const morphAttribute = morphAttributes[keys[0]];
            if (morphAttribute !== undefined) {
                this.morphTargetInfluences = [];
                this.morphTargetDictionary = {};
                for(let m = 0, ml = morphAttribute.length; m < ml; m++){
                    const name = morphAttribute[m].name || String(m);
                    this.morphTargetInfluences.push(0);
                    this.morphTargetDictionary[name] = m;
                }
            }
        }
    }
}
const _start = /*@__PURE__*/ new Vector3();
const _end = /*@__PURE__*/ new Vector3();
class LineSegments extends Line {
    constructor(geometry, material){
        super(geometry, material);
        this.isLineSegments = true;
        this.type = "LineSegments";
    }
    computeLineDistances() {
        const geometry = this.geometry;
        // we assume non-indexed geometry
        if (geometry.index === null) {
            const positionAttribute = geometry.attributes.position;
            const lineDistances = [];
            for(let i = 0, l = positionAttribute.count; i < l; i += 2){
                _start.fromBufferAttribute(positionAttribute, i);
                _end.fromBufferAttribute(positionAttribute, i + 1);
                lineDistances[i] = i === 0 ? 0 : lineDistances[i - 1];
                lineDistances[i + 1] = lineDistances[i] + _start.distanceTo(_end);
            }
            geometry.setAttribute("lineDistance", new Float32BufferAttribute(lineDistances, 1));
        } else console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");
        return this;
    }
}
class LineLoop extends Line {
    constructor(geometry, material){
        super(geometry, material);
        this.isLineLoop = true;
        this.type = "LineLoop";
    }
}
class PointsMaterial extends Material {
    constructor(parameters){
        super();
        this.isPointsMaterial = true;
        this.type = "PointsMaterial";
        this.color = new Color(0xffffff);
        this.map = null;
        this.alphaMap = null;
        this.size = 1;
        this.sizeAttenuation = true;
        this.fog = true;
        this.setValues(parameters);
    }
    copy(source) {
        super.copy(source);
        this.color.copy(source.color);
        this.map = source.map;
        this.alphaMap = source.alphaMap;
        this.size = source.size;
        this.sizeAttenuation = source.sizeAttenuation;
        this.fog = source.fog;
        return this;
    }
}
const _inverseMatrix = /*@__PURE__*/ new Matrix4();
const _ray = /*@__PURE__*/ new Ray();
const _sphere = /*@__PURE__*/ new Sphere();
const _position$2 = /*@__PURE__*/ new Vector3();
class Points extends Object3D {
    constructor(geometry = new BufferGeometry(), material = new PointsMaterial()){
        super();
        this.isPoints = true;
        this.type = "Points";
        this.geometry = geometry;
        this.material = material;
        this.updateMorphTargets();
    }
    copy(source, recursive) {
        super.copy(source, recursive);
        this.material = Array.isArray(source.material) ? source.material.slice() : source.material;
        this.geometry = source.geometry;
        return this;
    }
    raycast(raycaster, intersects) {
        const geometry = this.geometry;
        const matrixWorld = this.matrixWorld;
        const threshold = raycaster.params.Points.threshold;
        const drawRange = geometry.drawRange;
        // Checking boundingSphere distance to ray
        if (geometry.boundingSphere === null) geometry.computeBoundingSphere();
        _sphere.copy(geometry.boundingSphere);
        _sphere.applyMatrix4(matrixWorld);
        _sphere.radius += threshold;
        if (raycaster.ray.intersectsSphere(_sphere) === false) return;
        //
        _inverseMatrix.copy(matrixWorld).invert();
        _ray.copy(raycaster.ray).applyMatrix4(_inverseMatrix);
        const localThreshold = threshold / ((this.scale.x + this.scale.y + this.scale.z) / 3);
        const localThresholdSq = localThreshold * localThreshold;
        const index = geometry.index;
        const attributes = geometry.attributes;
        const positionAttribute = attributes.position;
        if (index !== null) {
            const start = Math.max(0, drawRange.start);
            const end = Math.min(index.count, drawRange.start + drawRange.count);
            for(let i = start, il = end; i < il; i++){
                const a = index.getX(i);
                _position$2.fromBufferAttribute(positionAttribute, a);
                testPoint(_position$2, a, localThresholdSq, matrixWorld, raycaster, intersects, this);
            }
        } else {
            const start = Math.max(0, drawRange.start);
            const end = Math.min(positionAttribute.count, drawRange.start + drawRange.count);
            for(let i = start, l = end; i < l; i++){
                _position$2.fromBufferAttribute(positionAttribute, i);
                testPoint(_position$2, i, localThresholdSq, matrixWorld, raycaster, intersects, this);
            }
        }
    }
    updateMorphTargets() {
        const geometry = this.geometry;
        const morphAttributes = geometry.morphAttributes;
        const keys = Object.keys(morphAttributes);
        if (keys.length > 0) {
            const morphAttribute = morphAttributes[keys[0]];
            if (morphAttribute !== undefined) {
                this.morphTargetInfluences = [];
                this.morphTargetDictionary = {};
                for(let m = 0, ml = morphAttribute.length; m < ml; m++){
                    const name = morphAttribute[m].name || String(m);
                    this.morphTargetInfluences.push(0);
                    this.morphTargetDictionary[name] = m;
                }
            }
        }
    }
}
function testPoint(point, index, localThresholdSq, matrixWorld, raycaster, intersects, object) {
    const rayPointDistanceSq = _ray.distanceSqToPoint(point);
    if (rayPointDistanceSq < localThresholdSq) {
        const intersectPoint = new Vector3();
        _ray.closestPointToPoint(point, intersectPoint);
        intersectPoint.applyMatrix4(matrixWorld);
        const distance = raycaster.ray.origin.distanceTo(intersectPoint);
        if (distance < raycaster.near || distance > raycaster.far) return;
        intersects.push({
            distance: distance,
            distanceToRay: Math.sqrt(rayPointDistanceSq),
            point: intersectPoint,
            index: index,
            face: null,
            object: object
        });
    }
}
class VideoTexture extends Texture {
    constructor(video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy){
        super(video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);
        this.isVideoTexture = true;
        this.minFilter = minFilter !== undefined ? minFilter : LinearFilter;
        this.magFilter = magFilter !== undefined ? magFilter : LinearFilter;
        this.generateMipmaps = false;
        const scope = this;
        function updateVideo() {
            scope.needsUpdate = true;
            video.requestVideoFrameCallback(updateVideo);
        }
        if ("requestVideoFrameCallback" in video) video.requestVideoFrameCallback(updateVideo);
    }
    clone() {
        return new this.constructor(this.image).copy(this);
    }
    update() {
        const video = this.image;
        const hasVideoFrameCallback = "requestVideoFrameCallback" in video;
        if (hasVideoFrameCallback === false && video.readyState >= video.HAVE_CURRENT_DATA) this.needsUpdate = true;
    }
}
class FramebufferTexture extends Texture {
    constructor(width, height){
        super({
            width,
            height
        });
        this.isFramebufferTexture = true;
        this.magFilter = NearestFilter;
        this.minFilter = NearestFilter;
        this.generateMipmaps = false;
        this.needsUpdate = true;
    }
}
class CompressedTexture extends Texture {
    constructor(mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, colorSpace1){
        super(null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, colorSpace1);
        this.isCompressedTexture = true;
        this.image = {
            width: width,
            height: height
        };
        this.mipmaps = mipmaps;
        // no flipping for cube textures
        // (also flipping doesn't work for compressed textures )
        this.flipY = false;
        // can't generate mipmaps for compressed textures
        // mips must be embedded in DDS files
        this.generateMipmaps = false;
    }
}
class CompressedArrayTexture extends CompressedTexture {
    constructor(mipmaps, width, height, depth, format, type){
        super(mipmaps, width, height, format, type);
        this.isCompressedArrayTexture = true;
        this.image.depth = depth;
        this.wrapR = ClampToEdgeWrapping;
    }
}
class CompressedCubeTexture extends CompressedTexture {
    constructor(images, format, type){
        super(undefined, images[0].width, images[0].height, format, type, CubeReflectionMapping);
        this.isCompressedCubeTexture = true;
        this.isCubeTexture = true;
        this.image = images;
    }
}
class CanvasTexture extends Texture {
    constructor(canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy){
        super(canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);
        this.isCanvasTexture = true;
        this.needsUpdate = true;
    }
}
/**
 * Extensible curve object.
 *
 * Some common of curve methods:
 * .getPoint( t, optionalTarget ), .getTangent( t, optionalTarget )
 * .getPointAt( u, optionalTarget ), .getTangentAt( u, optionalTarget )
 * .getPoints(), .getSpacedPoints()
 * .getLength()
 * .updateArcLengths()
 *
 * This following curves inherit from THREE.Curve:
 *
 * -- 2D curves --
 * THREE.ArcCurve
 * THREE.CubicBezierCurve
 * THREE.EllipseCurve
 * THREE.LineCurve
 * THREE.QuadraticBezierCurve
 * THREE.SplineCurve
 *
 * -- 3D curves --
 * THREE.CatmullRomCurve3
 * THREE.CubicBezierCurve3
 * THREE.LineCurve3
 * THREE.QuadraticBezierCurve3
 *
 * A series of curves can be represented as a THREE.CurvePath.
 *
 **/ class Curve {
    constructor(){
        this.type = "Curve";
        this.arcLengthDivisions = 200;
    }
    // Virtual base class method to overwrite and implement in subclasses
    //	- t [0 .. 1]
    getPoint() {
        console.warn("THREE.Curve: .getPoint() not implemented.");
        return null;
    }
    // Get point at relative position in curve according to arc length
    // - u [0 .. 1]
    getPointAt(u, optionalTarget) {
        const t = this.getUtoTmapping(u);
        return this.getPoint(t, optionalTarget);
    }
    // Get sequence of points using getPoint( t )
    getPoints(divisions = 5) {
        const points = [];
        for(let d = 0; d <= divisions; d++)points.push(this.getPoint(d / divisions));
        return points;
    }
    // Get sequence of points using getPointAt( u )
    getSpacedPoints(divisions = 5) {
        const points = [];
        for(let d = 0; d <= divisions; d++)points.push(this.getPointAt(d / divisions));
        return points;
    }
    // Get total curve arc length
    getLength() {
        const lengths = this.getLengths();
        return lengths[lengths.length - 1];
    }
    // Get list of cumulative segment lengths
    getLengths(divisions = this.arcLengthDivisions) {
        if (this.cacheArcLengths && this.cacheArcLengths.length === divisions + 1 && !this.needsUpdate) return this.cacheArcLengths;
        this.needsUpdate = false;
        const cache = [];
        let current, last = this.getPoint(0);
        let sum = 0;
        cache.push(0);
        for(let p = 1; p <= divisions; p++){
            current = this.getPoint(p / divisions);
            sum += current.distanceTo(last);
            cache.push(sum);
            last = current;
        }
        this.cacheArcLengths = cache;
        return cache; // { sums: cache, sum: sum }; Sum is in the last element.
    }
    updateArcLengths() {
        this.needsUpdate = true;
        this.getLengths();
    }
    // Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant
    getUtoTmapping(u, distance) {
        const arcLengths = this.getLengths();
        let i = 0;
        const il = arcLengths.length;
        let targetArcLength; // The targeted u distance value to get
        if (distance) targetArcLength = distance;
        else targetArcLength = u * arcLengths[il - 1];
        // binary search for the index with largest value smaller than target u distance
        let low = 0, high = il - 1, comparison;
        while(low <= high){
            i = Math.floor(low + (high - low) / 2); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats
            comparison = arcLengths[i] - targetArcLength;
            if (comparison < 0) low = i + 1;
            else if (comparison > 0) high = i - 1;
            else {
                high = i;
                break;
            // DONE
            }
        }
        i = high;
        if (arcLengths[i] === targetArcLength) return i / (il - 1);
        // we could get finer grain at lengths, or use simple interpolation between two points
        const lengthBefore = arcLengths[i];
        const lengthAfter = arcLengths[i + 1];
        const segmentLength = lengthAfter - lengthBefore;
        // determine where we are between the 'before' and 'after' points
        const segmentFraction = (targetArcLength - lengthBefore) / segmentLength;
        // add that fractional amount to t
        const t = (i + segmentFraction) / (il - 1);
        return t;
    }
    // Returns a unit vector tangent at t
    // In case any sub curve does not implement its tangent derivation,
    // 2 points a small delta apart will be used to find its gradient
    // which seems to give a reasonable approximation
    getTangent(t, optionalTarget) {
        const delta = 0.0001;
        let t1 = t - delta;
        let t2 = t + delta;
        // Capping in case of danger
        if (t1 < 0) t1 = 0;
        if (t2 > 1) t2 = 1;
        const pt1 = this.getPoint(t1);
        const pt2 = this.getPoint(t2);
        const tangent = optionalTarget || (pt1.isVector2 ? new Vector2() : new Vector3());
        tangent.copy(pt2).sub(pt1).normalize();
        return tangent;
    }
    getTangentAt(u, optionalTarget) {
        const t = this.getUtoTmapping(u);
        return this.getTangent(t, optionalTarget);
    }
    computeFrenetFrames(segments, closed) {
        // see http://www.cs.indiana.edu/pub/techreports/TR425.pdf
        const normal = new Vector3();
        const tangents = [];
        const normals = [];
        const binormals = [];
        const vec = new Vector3();
        const mat = new Matrix4();
        // compute the tangent vectors for each segment on the curve
        for(let i = 0; i <= segments; i++){
            const u = i / segments;
            tangents[i] = this.getTangentAt(u, new Vector3());
        }
        // select an initial normal vector perpendicular to the first tangent vector,
        // and in the direction of the minimum tangent xyz component
        normals[0] = new Vector3();
        binormals[0] = new Vector3();
        let min = Number.MAX_VALUE;
        const tx = Math.abs(tangents[0].x);
        const ty = Math.abs(tangents[0].y);
        const tz = Math.abs(tangents[0].z);
        if (tx <= min) {
            min = tx;
            normal.set(1, 0, 0);
        }
        if (ty <= min) {
            min = ty;
            normal.set(0, 1, 0);
        }
        if (tz <= min) normal.set(0, 0, 1);
        vec.crossVectors(tangents[0], normal).normalize();
        normals[0].crossVectors(tangents[0], vec);
        binormals[0].crossVectors(tangents[0], normals[0]);
        // compute the slowly-varying normal and binormal vectors for each segment on the curve
        for(let i = 1; i <= segments; i++){
            normals[i] = normals[i - 1].clone();
            binormals[i] = binormals[i - 1].clone();
            vec.crossVectors(tangents[i - 1], tangents[i]);
            if (vec.length() > Number.EPSILON) {
                vec.normalize();
                const theta = Math.acos(clamp(tangents[i - 1].dot(tangents[i]), -1, 1)); // clamp for floating pt errors
                normals[i].applyMatrix4(mat.makeRotationAxis(vec, theta));
            }
            binormals[i].crossVectors(tangents[i], normals[i]);
        }
        // if the curve is closed, postprocess the vectors so the first and last normal vectors are the same
        if (closed === true) {
            let theta = Math.acos(clamp(normals[0].dot(normals[segments]), -1, 1));
            theta /= segments;
            if (tangents[0].dot(vec.crossVectors(normals[0], normals[segments])) > 0) theta = -theta;
            for(let i = 1; i <= segments; i++){
                // twist a little...
                normals[i].applyMatrix4(mat.makeRotationAxis(tangents[i], theta * i));
                binormals[i].crossVectors(tangents[i], normals[i]);
            }
        }
        return {
            tangents: tangents,
            normals: normals,
            binormals: binormals
        };
    }
    clone() {
        return new this.constructor().copy(this);
    }
    copy(source) {
        this.arcLengthDivisions = source.arcLengthDivisions;
        return this;
    }
    toJSON() {
        const data = {
            metadata: {
                version: 4.6,
                type: "Curve",
                generator: "Curve.toJSON"
            }
        };
        data.arcLengthDivisions = this.arcLengthDivisions;
        data.type = this.type;
        return data;
    }
    fromJSON(json) {
        this.arcLengthDivisions = json.arcLengthDivisions;
        return this;
    }
}
class EllipseCurve extends Curve {
    constructor(aX = 0, aY = 0, xRadius = 1, yRadius = 1, aStartAngle = 0, aEndAngle = Math.PI * 2, aClockwise = false, aRotation = 0){
        super();
        this.isEllipseCurve = true;
        this.type = "EllipseCurve";
        this.aX = aX;
        this.aY = aY;
        this.xRadius = xRadius;
        this.yRadius = yRadius;
        this.aStartAngle = aStartAngle;
        this.aEndAngle = aEndAngle;
        this.aClockwise = aClockwise;
        this.aRotation = aRotation;
    }
    getPoint(t, optionalTarget) {
        const point = optionalTarget || new Vector2();
        const twoPi = Math.PI * 2;
        let deltaAngle = this.aEndAngle - this.aStartAngle;
        const samePoints = Math.abs(deltaAngle) < Number.EPSILON;
        // ensures that deltaAngle is 0 .. 2 PI
        while(deltaAngle < 0)deltaAngle += twoPi;
        while(deltaAngle > twoPi)deltaAngle -= twoPi;
        if (deltaAngle < Number.EPSILON) {
            if (samePoints) deltaAngle = 0;
            else deltaAngle = twoPi;
        }
        if (this.aClockwise === true && !samePoints) {
            if (deltaAngle === twoPi) deltaAngle = -twoPi;
            else deltaAngle = deltaAngle - twoPi;
        }
        const angle = this.aStartAngle + t * deltaAngle;
        let x = this.aX + this.xRadius * Math.cos(angle);
        let y = this.aY + this.yRadius * Math.sin(angle);
        if (this.aRotation !== 0) {
            const cos = Math.cos(this.aRotation);
            const sin = Math.sin(this.aRotation);
            const tx = x - this.aX;
            const ty = y - this.aY;
            // Rotate the point about the center of the ellipse.
            x = tx * cos - ty * sin + this.aX;
            y = tx * sin + ty * cos + this.aY;
        }
        return point.set(x, y);
    }
    copy(source) {
        super.copy(source);
        this.aX = source.aX;
        this.aY = source.aY;
        this.xRadius = source.xRadius;
        this.yRadius = source.yRadius;
        this.aStartAngle = source.aStartAngle;
        this.aEndAngle = source.aEndAngle;
        this.aClockwise = source.aClockwise;
        this.aRotation = source.aRotation;
        return this;
    }
    toJSON() {
        const data = super.toJSON();
        data.aX = this.aX;
        data.aY = this.aY;
        data.xRadius = this.xRadius;
        data.yRadius = this.yRadius;
        data.aStartAngle = this.aStartAngle;
        data.aEndAngle = this.aEndAngle;
        data.aClockwise = this.aClockwise;
        data.aRotation = this.aRotation;
        return data;
    }
    fromJSON(json) {
        super.fromJSON(json);
        this.aX = json.aX;
        this.aY = json.aY;
        this.xRadius = json.xRadius;
        this.yRadius = json.yRadius;
        this.aStartAngle = json.aStartAngle;
        this.aEndAngle = json.aEndAngle;
        this.aClockwise = json.aClockwise;
        this.aRotation = json.aRotation;
        return this;
    }
}
class ArcCurve extends EllipseCurve {
    constructor(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise){
        super(aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise);
        this.isArcCurve = true;
        this.type = "ArcCurve";
    }
}
/**
 * Centripetal CatmullRom Curve - which is useful for avoiding
 * cusps and self-intersections in non-uniform catmull rom curves.
 * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf
 *
 * curve.type accepts centripetal(default), chordal and catmullrom
 * curve.tension is used for catmullrom which defaults to 0.5
 */ /*
Based on an optimized c++ solution in
 - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/
 - http://ideone.com/NoEbVM

This CubicPoly class could be used for reusing some variables and calculations,
but for three.js curve use, it could be possible inlined and flatten into a single function call
which can be placed in CurveUtils.
*/ function CubicPoly() {
    let c0 = 0, c1 = 0, c2 = 0, c3 = 0;
    /*
	 * Compute coefficients for a cubic polynomial
	 *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3
	 * such that
	 *   p(0) = x0, p(1) = x1
	 *  and
	 *   p'(0) = t0, p'(1) = t1.
	 */ function init(x0, x1, t0, t1) {
        c0 = x0;
        c1 = t0;
        c2 = -3 * x0 + 3 * x1 - 2 * t0 - t1;
        c3 = 2 * x0 - 2 * x1 + t0 + t1;
    }
    return {
        initCatmullRom: function(x0, x1, x2, x3, tension) {
            init(x1, x2, tension * (x2 - x0), tension * (x3 - x1));
        },
        initNonuniformCatmullRom: function(x0, x1, x2, x3, dt0, dt1, dt2) {
            // compute tangents when parameterized in [t1,t2]
            let t1 = (x1 - x0) / dt0 - (x2 - x0) / (dt0 + dt1) + (x2 - x1) / dt1;
            let t2 = (x2 - x1) / dt1 - (x3 - x1) / (dt1 + dt2) + (x3 - x2) / dt2;
            // rescale tangents for parametrization in [0,1]
            t1 *= dt1;
            t2 *= dt1;
            init(x1, x2, t1, t2);
        },
        calc: function(t) {
            const t2 = t * t;
            const t3 = t2 * t;
            return c0 + c1 * t + c2 * t2 + c3 * t3;
        }
    };
}
//
const tmp = /*@__PURE__*/ new Vector3();
const px = /*@__PURE__*/ new CubicPoly();
const py = /*@__PURE__*/ new CubicPoly();
const pz = /*@__PURE__*/ new CubicPoly();
class CatmullRomCurve3 extends Curve {
    constructor(points = [], closed = false, curveType = "centripetal", tension = 0.5){
        super();
        this.isCatmullRomCurve3 = true;
        this.type = "CatmullRomCurve3";
        this.points = points;
        this.closed = closed;
        this.curveType = curveType;
        this.tension = tension;
    }
    getPoint(t, optionalTarget = new Vector3()) {
        const point = optionalTarget;
        const points = this.points;
        const l = points.length;
        const p = (l - (this.closed ? 0 : 1)) * t;
        let intPoint = Math.floor(p);
        let weight = p - intPoint;
        if (this.closed) intPoint += intPoint > 0 ? 0 : (Math.floor(Math.abs(intPoint) / l) + 1) * l;
        else if (weight === 0 && intPoint === l - 1) {
            intPoint = l - 2;
            weight = 1;
        }
        let p0, p3; // 4 points (p1 & p2 defined below)
        if (this.closed || intPoint > 0) p0 = points[(intPoint - 1) % l];
        else {
            // extrapolate first point
            tmp.subVectors(points[0], points[1]).add(points[0]);
            p0 = tmp;
        }
        const p1 = points[intPoint % l];
        const p2 = points[(intPoint + 1) % l];
        if (this.closed || intPoint + 2 < l) p3 = points[(intPoint + 2) % l];
        else {
            // extrapolate last point
            tmp.subVectors(points[l - 1], points[l - 2]).add(points[l - 1]);
            p3 = tmp;
        }
        if (this.curveType === "centripetal" || this.curveType === "chordal") {
            // init Centripetal / Chordal Catmull-Rom
            const pow = this.curveType === "chordal" ? 0.5 : 0.25;
            let dt0 = Math.pow(p0.distanceToSquared(p1), pow);
            let dt1 = Math.pow(p1.distanceToSquared(p2), pow);
            let dt2 = Math.pow(p2.distanceToSquared(p3), pow);
            // safety check for repeated points
            if (dt1 < 1e-4) dt1 = 1.0;
            if (dt0 < 1e-4) dt0 = dt1;
            if (dt2 < 1e-4) dt2 = dt1;
            px.initNonuniformCatmullRom(p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2);
            py.initNonuniformCatmullRom(p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2);
            pz.initNonuniformCatmullRom(p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2);
        } else if (this.curveType === "catmullrom") {
            px.initCatmullRom(p0.x, p1.x, p2.x, p3.x, this.tension);
            py.initCatmullRom(p0.y, p1.y, p2.y, p3.y, this.tension);
            pz.initCatmullRom(p0.z, p1.z, p2.z, p3.z, this.tension);
        }
        point.set(px.calc(weight), py.calc(weight), pz.calc(weight));
        return point;
    }
    copy(source) {
        super.copy(source);
        this.points = [];
        for(let i = 0, l = source.points.length; i < l; i++){
            const point = source.points[i];
            this.points.push(point.clone());
        }
        this.closed = source.closed;
        this.curveType = source.curveType;
        this.tension = source.tension;
        return this;
    }
    toJSON() {
        const data = super.toJSON();
        data.points = [];
        for(let i = 0, l = this.points.length; i < l; i++){
            const point = this.points[i];
            data.points.push(point.toArray());
        }
        data.closed = this.closed;
        data.curveType = this.curveType;
        data.tension = this.tension;
        return data;
    }
    fromJSON(json) {
        super.fromJSON(json);
        this.points = [];
        for(let i = 0, l = json.points.length; i < l; i++){
            const point = json.points[i];
            this.points.push(new Vector3().fromArray(point));
        }
        this.closed = json.closed;
        this.curveType = json.curveType;
        this.tension = json.tension;
        return this;
    }
}
/**
 * Bezier Curves formulas obtained from
 * https://en.wikipedia.org/wiki/B%C3%A9zier_curve
 */ function CatmullRom(t, p0, p1, p2, p3) {
    const v0 = (p2 - p0) * 0.5;
    const v1 = (p3 - p1) * 0.5;
    const t2 = t * t;
    const t3 = t * t2;
    return (2 * p1 - 2 * p2 + v0 + v1) * t3 + (-3 * p1 + 3 * p2 - 2 * v0 - v1) * t2 + v0 * t + p1;
}
//
function QuadraticBezierP0(t, p) {
    const k = 1 - t;
    return k * k * p;
}
function QuadraticBezierP1(t, p) {
    return 2 * (1 - t) * t * p;
}
function QuadraticBezierP2(t, p) {
    return t * t * p;
}
function QuadraticBezier(t, p0, p1, p2) {
    return QuadraticBezierP0(t, p0) + QuadraticBezierP1(t, p1) + QuadraticBezierP2(t, p2);
}
//
function CubicBezierP0(t, p) {
    const k = 1 - t;
    return k * k * k * p;
}
function CubicBezierP1(t, p) {
    const k = 1 - t;
    return 3 * k * k * t * p;
}
function CubicBezierP2(t, p) {
    return 3 * (1 - t) * t * t * p;
}
function CubicBezierP3(t, p) {
    return t * t * t * p;
}
function CubicBezier(t, p0, p1, p2, p3) {
    return CubicBezierP0(t, p0) + CubicBezierP1(t, p1) + CubicBezierP2(t, p2) + CubicBezierP3(t, p3);
}
class CubicBezierCurve extends Curve {
    constructor(v0 = new Vector2(), v1 = new Vector2(), v2 = new Vector2(), v3 = new Vector2()){
        super();
        this.isCubicBezierCurve = true;
        this.type = "CubicBezierCurve";
        this.v0 = v0;
        this.v1 = v1;
        this.v2 = v2;
        this.v3 = v3;
    }
    getPoint(t, optionalTarget = new Vector2()) {
        const point = optionalTarget;
        const v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;
        point.set(CubicBezier(t, v0.x, v1.x, v2.x, v3.x), CubicBezier(t, v0.y, v1.y, v2.y, v3.y));
        return point;
    }
    copy(source) {
        super.copy(source);
        this.v0.copy(source.v0);
        this.v1.copy(source.v1);
        this.v2.copy(source.v2);
        this.v3.copy(source.v3);
        return this;
    }
    toJSON() {
        const data = super.toJSON();
        data.v0 = this.v0.toArray();
        data.v1 = this.v1.toArray();
        data.v2 = this.v2.toArray();
        data.v3 = this.v3.toArray();
        return data;
    }
    fromJSON(json) {
        super.fromJSON(json);
        this.v0.fromArray(json.v0);
        this.v1.fromArray(json.v1);
        this.v2.fromArray(json.v2);
        this.v3.fromArray(json.v3);
        return this;
    }
}
class CubicBezierCurve3 extends Curve {
    constructor(v0 = new Vector3(), v1 = new Vector3(), v2 = new Vector3(), v3 = new Vector3()){
        super();
        this.isCubicBezierCurve3 = true;
        this.type = "CubicBezierCurve3";
        this.v0 = v0;
        this.v1 = v1;
        this.v2 = v2;
        this.v3 = v3;
    }
    getPoint(t, optionalTarget = new Vector3()) {
        const point = optionalTarget;
        const v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;
        point.set(CubicBezier(t, v0.x, v1.x, v2.x, v3.x), CubicBezier(t, v0.y, v1.y, v2.y, v3.y), CubicBezier(t, v0.z, v1.z, v2.z, v3.z));
        return point;
    }
    copy(source) {
        super.copy(source);
        this.v0.copy(source.v0);
        this.v1.copy(source.v1);
        this.v2.copy(source.v2);
        this.v3.copy(source.v3);
        return this;
    }
    toJSON() {
        const data = super.toJSON();
        data.v0 = this.v0.toArray();
        data.v1 = this.v1.toArray();
        data.v2 = this.v2.toArray();
        data.v3 = this.v3.toArray();
        return data;
    }
    fromJSON(json) {
        super.fromJSON(json);
        this.v0.fromArray(json.v0);
        this.v1.fromArray(json.v1);
        this.v2.fromArray(json.v2);
        this.v3.fromArray(json.v3);
        return this;
    }
}
class LineCurve extends Curve {
    constructor(v1 = new Vector2(), v2 = new Vector2()){
        super();
        this.isLineCurve = true;
        this.type = "LineCurve";
        this.v1 = v1;
        this.v2 = v2;
    }
    getPoint(t, optionalTarget = new Vector2()) {
        const point = optionalTarget;
        if (t === 1) point.copy(this.v2);
        else {
            point.copy(this.v2).sub(this.v1);
            point.multiplyScalar(t).add(this.v1);
        }
        return point;
    }
    // Line curve is linear, so we can overwrite default getPointAt
    getPointAt(u, optionalTarget) {
        return this.getPoint(u, optionalTarget);
    }
    getTangent(t, optionalTarget = new Vector2()) {
        return optionalTarget.subVectors(this.v2, this.v1).normalize();
    }
    getTangentAt(u, optionalTarget) {
        return this.getTangent(u, optionalTarget);
    }
    copy(source) {
        super.copy(source);
        this.v1.copy(source.v1);
        this.v2.copy(source.v2);
        return this;
    }
    toJSON() {
        const data = super.toJSON();
        data.v1 = this.v1.toArray();
        data.v2 = this.v2.toArray();
        return data;
    }
    fromJSON(json) {
        super.fromJSON(json);
        this.v1.fromArray(json.v1);
        this.v2.fromArray(json.v2);
        return this;
    }
}
class LineCurve3 extends Curve {
    constructor(v1 = new Vector3(), v2 = new Vector3()){
        super();
        this.isLineCurve3 = true;
        this.type = "LineCurve3";
        this.v1 = v1;
        this.v2 = v2;
    }
    getPoint(t, optionalTarget = new Vector3()) {
        const point = optionalTarget;
        if (t === 1) point.copy(this.v2);
        else {
            point.copy(this.v2).sub(this.v1);
            point.multiplyScalar(t).add(this.v1);
        }
        return point;
    }
    // Line curve is linear, so we can overwrite default getPointAt
    getPointAt(u, optionalTarget) {
        return this.getPoint(u, optionalTarget);
    }
    getTangent(t, optionalTarget = new Vector3()) {
        return optionalTarget.subVectors(this.v2, this.v1).normalize();
    }
    getTangentAt(u, optionalTarget) {
        return this.getTangent(u, optionalTarget);
    }
    copy(source) {
        super.copy(source);
        this.v1.copy(source.v1);
        this.v2.copy(source.v2);
        return this;
    }
    toJSON() {
        const data = super.toJSON();
        data.v1 = this.v1.toArray();
        data.v2 = this.v2.toArray();
        return data;
    }
    fromJSON(json) {
        super.fromJSON(json);
        this.v1.fromArray(json.v1);
        this.v2.fromArray(json.v2);
        return this;
    }
}
class QuadraticBezierCurve extends Curve {
    constructor(v0 = new Vector2(), v1 = new Vector2(), v2 = new Vector2()){
        super();
        this.isQuadraticBezierCurve = true;
        this.type = "QuadraticBezierCurve";
        this.v0 = v0;
        this.v1 = v1;
        this.v2 = v2;
    }
    getPoint(t, optionalTarget = new Vector2()) {
        const point = optionalTarget;
        const v0 = this.v0, v1 = this.v1, v2 = this.v2;
        point.set(QuadraticBezier(t, v0.x, v1.x, v2.x), QuadraticBezier(t, v0.y, v1.y, v2.y));
        return point;
    }
    copy(source) {
        super.copy(source);
        this.v0.copy(source.v0);
        this.v1.copy(source.v1);
        this.v2.copy(source.v2);
        return this;
    }
    toJSON() {
        const data = super.toJSON();
        data.v0 = this.v0.toArray();
        data.v1 = this.v1.toArray();
        data.v2 = this.v2.toArray();
        return data;
    }
    fromJSON(json) {
        super.fromJSON(json);
        this.v0.fromArray(json.v0);
        this.v1.fromArray(json.v1);
        this.v2.fromArray(json.v2);
        return this;
    }
}
class QuadraticBezierCurve3 extends Curve {
    constructor(v0 = new Vector3(), v1 = new Vector3(), v2 = new Vector3()){
        super();
        this.isQuadraticBezierCurve3 = true;
        this.type = "QuadraticBezierCurve3";
        this.v0 = v0;
        this.v1 = v1;
        this.v2 = v2;
    }
    getPoint(t, optionalTarget = new Vector3()) {
        const point = optionalTarget;
        const v0 = this.v0, v1 = this.v1, v2 = this.v2;
        point.set(QuadraticBezier(t, v0.x, v1.x, v2.x), QuadraticBezier(t, v0.y, v1.y, v2.y), QuadraticBezier(t, v0.z, v1.z, v2.z));
        return point;
    }
    copy(source) {
        super.copy(source);
        this.v0.copy(source.v0);
        this.v1.copy(source.v1);
        this.v2.copy(source.v2);
        return this;
    }
    toJSON() {
        const data = super.toJSON();
        data.v0 = this.v0.toArray();
        data.v1 = this.v1.toArray();
        data.v2 = this.v2.toArray();
        return data;
    }
    fromJSON(json) {
        super.fromJSON(json);
        this.v0.fromArray(json.v0);
        this.v1.fromArray(json.v1);
        this.v2.fromArray(json.v2);
        return this;
    }
}
class SplineCurve extends Curve {
    constructor(points = []){
        super();
        this.isSplineCurve = true;
        this.type = "SplineCurve";
        this.points = points;
    }
    getPoint(t, optionalTarget = new Vector2()) {
        const point = optionalTarget;
        const points = this.points;
        const p = (points.length - 1) * t;
        const intPoint = Math.floor(p);
        const weight = p - intPoint;
        const p0 = points[intPoint === 0 ? intPoint : intPoint - 1];
        const p1 = points[intPoint];
        const p2 = points[intPoint > points.length - 2 ? points.length - 1 : intPoint + 1];
        const p3 = points[intPoint > points.length - 3 ? points.length - 1 : intPoint + 2];
        point.set(CatmullRom(weight, p0.x, p1.x, p2.x, p3.x), CatmullRom(weight, p0.y, p1.y, p2.y, p3.y));
        return point;
    }
    copy(source) {
        super.copy(source);
        this.points = [];
        for(let i = 0, l = source.points.length; i < l; i++){
            const point = source.points[i];
            this.points.push(point.clone());
        }
        return this;
    }
    toJSON() {
        const data = super.toJSON();
        data.points = [];
        for(let i = 0, l = this.points.length; i < l; i++){
            const point = this.points[i];
            data.points.push(point.toArray());
        }
        return data;
    }
    fromJSON(json) {
        super.fromJSON(json);
        this.points = [];
        for(let i = 0, l = json.points.length; i < l; i++){
            const point = json.points[i];
            this.points.push(new Vector2().fromArray(point));
        }
        return this;
    }
}
var Curves = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    ArcCurve: ArcCurve,
    CatmullRomCurve3: CatmullRomCurve3,
    CubicBezierCurve: CubicBezierCurve,
    CubicBezierCurve3: CubicBezierCurve3,
    EllipseCurve: EllipseCurve,
    LineCurve: LineCurve,
    LineCurve3: LineCurve3,
    QuadraticBezierCurve: QuadraticBezierCurve,
    QuadraticBezierCurve3: QuadraticBezierCurve3,
    SplineCurve: SplineCurve
});
/**************************************************************
 *	Curved Path - a curve path is simply a array of connected
 *  curves, but retains the api of a curve
 **************************************************************/ class CurvePath extends Curve {
    constructor(){
        super();
        this.type = "CurvePath";
        this.curves = [];
        this.autoClose = false; // Automatically closes the path
    }
    add(curve) {
        this.curves.push(curve);
    }
    closePath() {
        // Add a line curve if start and end of lines are not connected
        const startPoint = this.curves[0].getPoint(0);
        const endPoint = this.curves[this.curves.length - 1].getPoint(1);
        if (!startPoint.equals(endPoint)) this.curves.push(new LineCurve(endPoint, startPoint));
    }
    // To get accurate point with reference to
    // entire path distance at time t,
    // following has to be done:
    // 1. Length of each sub path have to be known
    // 2. Locate and identify type of curve
    // 3. Get t for the curve
    // 4. Return curve.getPointAt(t')
    getPoint(t, optionalTarget) {
        const d = t * this.getLength();
        const curveLengths = this.getCurveLengths();
        let i = 0;
        // To think about boundaries points.
        while(i < curveLengths.length){
            if (curveLengths[i] >= d) {
                const diff = curveLengths[i] - d;
                const curve = this.curves[i];
                const segmentLength = curve.getLength();
                const u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;
                return curve.getPointAt(u, optionalTarget);
            }
            i++;
        }
        return null;
    // loop where sum != 0, sum > d , sum+1 <d
    }
    // We cannot use the default THREE.Curve getPoint() with getLength() because in
    // THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath
    // getPoint() depends on getLength
    getLength() {
        const lens = this.getCurveLengths();
        return lens[lens.length - 1];
    }
    // cacheLengths must be recalculated.
    updateArcLengths() {
        this.needsUpdate = true;
        this.cacheLengths = null;
        this.getCurveLengths();
    }
    // Compute lengths and cache them
    // We cannot overwrite getLengths() because UtoT mapping uses it.
    getCurveLengths() {
        // We use cache values if curves and cache array are same length
        if (this.cacheLengths && this.cacheLengths.length === this.curves.length) return this.cacheLengths;
        // Get length of sub-curve
        // Push sums into cached array
        const lengths = [];
        let sums = 0;
        for(let i = 0, l = this.curves.length; i < l; i++){
            sums += this.curves[i].getLength();
            lengths.push(sums);
        }
        this.cacheLengths = lengths;
        return lengths;
    }
    getSpacedPoints(divisions = 40) {
        const points = [];
        for(let i = 0; i <= divisions; i++)points.push(this.getPoint(i / divisions));
        if (this.autoClose) points.push(points[0]);
        return points;
    }
    getPoints(divisions = 12) {
        const points = [];
        let last;
        for(let i = 0, curves = this.curves; i < curves.length; i++){
            const curve = curves[i];
            const resolution = curve.isEllipseCurve ? divisions * 2 : curve.isLineCurve || curve.isLineCurve3 ? 1 : curve.isSplineCurve ? divisions * curve.points.length : divisions;
            const pts = curve.getPoints(resolution);
            for(let j = 0; j < pts.length; j++){
                const point = pts[j];
                if (last && last.equals(point)) continue; // ensures no consecutive points are duplicates
                points.push(point);
                last = point;
            }
        }
        if (this.autoClose && points.length > 1 && !points[points.length - 1].equals(points[0])) points.push(points[0]);
        return points;
    }
    copy(source) {
        super.copy(source);
        this.curves = [];
        for(let i = 0, l = source.curves.length; i < l; i++){
            const curve = source.curves[i];
            this.curves.push(curve.clone());
        }
        this.autoClose = source.autoClose;
        return this;
    }
    toJSON() {
        const data = super.toJSON();
        data.autoClose = this.autoClose;
        data.curves = [];
        for(let i = 0, l = this.curves.length; i < l; i++){
            const curve = this.curves[i];
            data.curves.push(curve.toJSON());
        }
        return data;
    }
    fromJSON(json) {
        super.fromJSON(json);
        this.autoClose = json.autoClose;
        this.curves = [];
        for(let i = 0, l = json.curves.length; i < l; i++){
            const curve = json.curves[i];
            this.curves.push(new Curves[curve.type]().fromJSON(curve));
        }
        return this;
    }
}
class Path extends CurvePath {
    constructor(points){
        super();
        this.type = "Path";
        this.currentPoint = new Vector2();
        if (points) this.setFromPoints(points);
    }
    setFromPoints(points) {
        this.moveTo(points[0].x, points[0].y);
        for(let i = 1, l = points.length; i < l; i++)this.lineTo(points[i].x, points[i].y);
        return this;
    }
    moveTo(x, y) {
        this.currentPoint.set(x, y); // TODO consider referencing vectors instead of copying?
        return this;
    }
    lineTo(x, y) {
        const curve = new LineCurve(this.currentPoint.clone(), new Vector2(x, y));
        this.curves.push(curve);
        this.currentPoint.set(x, y);
        return this;
    }
    quadraticCurveTo(aCPx, aCPy, aX, aY) {
        const curve = new QuadraticBezierCurve(this.currentPoint.clone(), new Vector2(aCPx, aCPy), new Vector2(aX, aY));
        this.curves.push(curve);
        this.currentPoint.set(aX, aY);
        return this;
    }
    bezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY) {
        const curve = new CubicBezierCurve(this.currentPoint.clone(), new Vector2(aCP1x, aCP1y), new Vector2(aCP2x, aCP2y), new Vector2(aX, aY));
        this.curves.push(curve);
        this.currentPoint.set(aX, aY);
        return this;
    }
    splineThru(pts /*Array of Vector*/ ) {
        const npts = [
            this.currentPoint.clone()
        ].concat(pts);
        const curve = new SplineCurve(npts);
        this.curves.push(curve);
        this.currentPoint.copy(pts[pts.length - 1]);
        return this;
    }
    arc(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {
        const x0 = this.currentPoint.x;
        const y0 = this.currentPoint.y;
        this.absarc(aX + x0, aY + y0, aRadius, aStartAngle, aEndAngle, aClockwise);
        return this;
    }
    absarc(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {
        this.absellipse(aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise);
        return this;
    }
    ellipse(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {
        const x0 = this.currentPoint.x;
        const y0 = this.currentPoint.y;
        this.absellipse(aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation);
        return this;
    }
    absellipse(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {
        const curve = new EllipseCurve(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation);
        if (this.curves.length > 0) {
            // if a previous curve is present, attempt to join
            const firstPoint = curve.getPoint(0);
            if (!firstPoint.equals(this.currentPoint)) this.lineTo(firstPoint.x, firstPoint.y);
        }
        this.curves.push(curve);
        const lastPoint = curve.getPoint(1);
        this.currentPoint.copy(lastPoint);
        return this;
    }
    copy(source) {
        super.copy(source);
        this.currentPoint.copy(source.currentPoint);
        return this;
    }
    toJSON() {
        const data = super.toJSON();
        data.currentPoint = this.currentPoint.toArray();
        return data;
    }
    fromJSON(json) {
        super.fromJSON(json);
        this.currentPoint.fromArray(json.currentPoint);
        return this;
    }
}
class LatheGeometry extends BufferGeometry {
    constructor(points = [
        new Vector2(0, -0.5),
        new Vector2(0.5, 0),
        new Vector2(0, 0.5)
    ], segments = 12, phiStart = 0, phiLength = Math.PI * 2){
        super();
        this.type = "LatheGeometry";
        this.parameters = {
            points: points,
            segments: segments,
            phiStart: phiStart,
            phiLength: phiLength
        };
        segments = Math.floor(segments);
        // clamp phiLength so it's in range of [ 0, 2PI ]
        phiLength = clamp(phiLength, 0, Math.PI * 2);
        // buffers
        const indices = [];
        const vertices = [];
        const uvs = [];
        const initNormals = [];
        const normals = [];
        // helper variables
        const inverseSegments = 1.0 / segments;
        const vertex = new Vector3();
        const uv = new Vector2();
        const normal = new Vector3();
        const curNormal = new Vector3();
        const prevNormal = new Vector3();
        let dx = 0;
        let dy = 0;
        // pre-compute normals for initial "meridian"
        for(let j = 0; j <= points.length - 1; j++)switch(j){
            case 0:
                dx = points[j + 1].x - points[j].x;
                dy = points[j + 1].y - points[j].y;
                normal.x = dy * 1.0;
                normal.y = -dx;
                normal.z = dy * 0.0;
                prevNormal.copy(normal);
                normal.normalize();
                initNormals.push(normal.x, normal.y, normal.z);
                break;
            case points.length - 1:
                initNormals.push(prevNormal.x, prevNormal.y, prevNormal.z);
                break;
            default:
                dx = points[j + 1].x - points[j].x;
                dy = points[j + 1].y - points[j].y;
                normal.x = dy * 1.0;
                normal.y = -dx;
                normal.z = dy * 0.0;
                curNormal.copy(normal);
                normal.x += prevNormal.x;
                normal.y += prevNormal.y;
                normal.z += prevNormal.z;
                normal.normalize();
                initNormals.push(normal.x, normal.y, normal.z);
                prevNormal.copy(curNormal);
        }
        // generate vertices, uvs and normals
        for(let i = 0; i <= segments; i++){
            const phi = phiStart + i * inverseSegments * phiLength;
            const sin = Math.sin(phi);
            const cos = Math.cos(phi);
            for(let j = 0; j <= points.length - 1; j++){
                // vertex
                vertex.x = points[j].x * sin;
                vertex.y = points[j].y;
                vertex.z = points[j].x * cos;
                vertices.push(vertex.x, vertex.y, vertex.z);
                // uv
                uv.x = i / segments;
                uv.y = j / (points.length - 1);
                uvs.push(uv.x, uv.y);
                // normal
                const x = initNormals[3 * j + 0] * sin;
                const y = initNormals[3 * j + 1];
                const z = initNormals[3 * j + 0] * cos;
                normals.push(x, y, z);
            }
        }
        // indices
        for(let i = 0; i < segments; i++)for(let j = 0; j < points.length - 1; j++){
            const base = j + i * points.length;
            const a = base;
            const b = base + points.length;
            const c = base + points.length + 1;
            const d = base + 1;
            // faces
            indices.push(a, b, d);
            indices.push(c, d, b);
        }
        // build geometry
        this.setIndex(indices);
        this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
        this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
        this.setAttribute("normal", new Float32BufferAttribute(normals, 3));
    }
    copy(source) {
        super.copy(source);
        this.parameters = Object.assign({}, source.parameters);
        return this;
    }
    static fromJSON(data) {
        return new LatheGeometry(data.points, data.segments, data.phiStart, data.phiLength);
    }
}
class CapsuleGeometry extends LatheGeometry {
    constructor(radius = 1, length = 1, capSegments = 4, radialSegments = 8){
        const path = new Path();
        path.absarc(0, -length / 2, radius, Math.PI * 1.5, 0);
        path.absarc(0, length / 2, radius, 0, Math.PI * 0.5);
        super(path.getPoints(capSegments), radialSegments);
        this.type = "CapsuleGeometry";
        this.parameters = {
            radius: radius,
            length: length,
            capSegments: capSegments,
            radialSegments: radialSegments
        };
    }
    static fromJSON(data) {
        return new CapsuleGeometry(data.radius, data.length, data.capSegments, data.radialSegments);
    }
}
class CircleGeometry extends BufferGeometry {
    constructor(radius = 1, segments = 32, thetaStart = 0, thetaLength = Math.PI * 2){
        super();
        this.type = "CircleGeometry";
        this.parameters = {
            radius: radius,
            segments: segments,
            thetaStart: thetaStart,
            thetaLength: thetaLength
        };
        segments = Math.max(3, segments);
        // buffers
        const indices = [];
        const vertices = [];
        const normals = [];
        const uvs = [];
        // helper variables
        const vertex = new Vector3();
        const uv = new Vector2();
        // center point
        vertices.push(0, 0, 0);
        normals.push(0, 0, 1);
        uvs.push(0.5, 0.5);
        for(let s = 0, i = 3; s <= segments; s++, i += 3){
            const segment = thetaStart + s / segments * thetaLength;
            // vertex
            vertex.x = radius * Math.cos(segment);
            vertex.y = radius * Math.sin(segment);
            vertices.push(vertex.x, vertex.y, vertex.z);
            // normal
            normals.push(0, 0, 1);
            // uvs
            uv.x = (vertices[i] / radius + 1) / 2;
            uv.y = (vertices[i + 1] / radius + 1) / 2;
            uvs.push(uv.x, uv.y);
        }
        // indices
        for(let i = 1; i <= segments; i++)indices.push(i, i + 1, 0);
        // build geometry
        this.setIndex(indices);
        this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
        this.setAttribute("normal", new Float32BufferAttribute(normals, 3));
        this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
    }
    copy(source) {
        super.copy(source);
        this.parameters = Object.assign({}, source.parameters);
        return this;
    }
    static fromJSON(data) {
        return new CircleGeometry(data.radius, data.segments, data.thetaStart, data.thetaLength);
    }
}
class CylinderGeometry extends BufferGeometry {
    constructor(radiusTop = 1, radiusBottom = 1, height = 1, radialSegments = 32, heightSegments = 1, openEnded = false, thetaStart = 0, thetaLength = Math.PI * 2){
        super();
        this.type = "CylinderGeometry";
        this.parameters = {
            radiusTop: radiusTop,
            radiusBottom: radiusBottom,
            height: height,
            radialSegments: radialSegments,
            heightSegments: heightSegments,
            openEnded: openEnded,
            thetaStart: thetaStart,
            thetaLength: thetaLength
        };
        const scope = this;
        radialSegments = Math.floor(radialSegments);
        heightSegments = Math.floor(heightSegments);
        // buffers
        const indices = [];
        const vertices = [];
        const normals = [];
        const uvs = [];
        // helper variables
        let index = 0;
        const indexArray = [];
        const halfHeight = height / 2;
        let groupStart = 0;
        // generate geometry
        generateTorso();
        if (openEnded === false) {
            if (radiusTop > 0) generateCap(true);
            if (radiusBottom > 0) generateCap(false);
        }
        // build geometry
        this.setIndex(indices);
        this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
        this.setAttribute("normal", new Float32BufferAttribute(normals, 3));
        this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
        function generateTorso() {
            const normal = new Vector3();
            const vertex = new Vector3();
            let groupCount = 0;
            // this will be used to calculate the normal
            const slope = (radiusBottom - radiusTop) / height;
            // generate vertices, normals and uvs
            for(let y = 0; y <= heightSegments; y++){
                const indexRow = [];
                const v = y / heightSegments;
                // calculate the radius of the current row
                const radius = v * (radiusBottom - radiusTop) + radiusTop;
                for(let x = 0; x <= radialSegments; x++){
                    const u = x / radialSegments;
                    const theta = u * thetaLength + thetaStart;
                    const sinTheta = Math.sin(theta);
                    const cosTheta = Math.cos(theta);
                    // vertex
                    vertex.x = radius * sinTheta;
                    vertex.y = -v * height + halfHeight;
                    vertex.z = radius * cosTheta;
                    vertices.push(vertex.x, vertex.y, vertex.z);
                    // normal
                    normal.set(sinTheta, slope, cosTheta).normalize();
                    normals.push(normal.x, normal.y, normal.z);
                    // uv
                    uvs.push(u, 1 - v);
                    // save index of vertex in respective row
                    indexRow.push(index++);
                }
                // now save vertices of the row in our index array
                indexArray.push(indexRow);
            }
            // generate indices
            for(let x = 0; x < radialSegments; x++)for(let y = 0; y < heightSegments; y++){
                // we use the index array to access the correct indices
                const a = indexArray[y][x];
                const b = indexArray[y + 1][x];
                const c = indexArray[y + 1][x + 1];
                const d = indexArray[y][x + 1];
                // faces
                indices.push(a, b, d);
                indices.push(b, c, d);
                // update group counter
                groupCount += 6;
            }
            // add a group to the geometry. this will ensure multi material support
            scope.addGroup(groupStart, groupCount, 0);
            // calculate new start value for groups
            groupStart += groupCount;
        }
        function generateCap(top) {
            // save the index of the first center vertex
            const centerIndexStart = index;
            const uv = new Vector2();
            const vertex = new Vector3();
            let groupCount = 0;
            const radius = top === true ? radiusTop : radiusBottom;
            const sign = top === true ? 1 : -1;
            // first we generate the center vertex data of the cap.
            // because the geometry needs one set of uvs per face,
            // we must generate a center vertex per face/segment
            for(let x = 1; x <= radialSegments; x++){
                // vertex
                vertices.push(0, halfHeight * sign, 0);
                // normal
                normals.push(0, sign, 0);
                // uv
                uvs.push(0.5, 0.5);
                // increase index
                index++;
            }
            // save the index of the last center vertex
            const centerIndexEnd = index;
            // now we generate the surrounding vertices, normals and uvs
            for(let x = 0; x <= radialSegments; x++){
                const u = x / radialSegments;
                const theta = u * thetaLength + thetaStart;
                const cosTheta = Math.cos(theta);
                const sinTheta = Math.sin(theta);
                // vertex
                vertex.x = radius * sinTheta;
                vertex.y = halfHeight * sign;
                vertex.z = radius * cosTheta;
                vertices.push(vertex.x, vertex.y, vertex.z);
                // normal
                normals.push(0, sign, 0);
                // uv
                uv.x = cosTheta * 0.5 + 0.5;
                uv.y = sinTheta * 0.5 * sign + 0.5;
                uvs.push(uv.x, uv.y);
                // increase index
                index++;
            }
            // generate indices
            for(let x = 0; x < radialSegments; x++){
                const c = centerIndexStart + x;
                const i = centerIndexEnd + x;
                if (top === true) // face top
                indices.push(i, i + 1, c);
                else // face bottom
                indices.push(i + 1, i, c);
                groupCount += 3;
            }
            // add a group to the geometry. this will ensure multi material support
            scope.addGroup(groupStart, groupCount, top === true ? 1 : 2);
            // calculate new start value for groups
            groupStart += groupCount;
        }
    }
    copy(source) {
        super.copy(source);
        this.parameters = Object.assign({}, source.parameters);
        return this;
    }
    static fromJSON(data) {
        return new CylinderGeometry(data.radiusTop, data.radiusBottom, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength);
    }
}
class ConeGeometry extends CylinderGeometry {
    constructor(radius = 1, height = 1, radialSegments = 32, heightSegments = 1, openEnded = false, thetaStart = 0, thetaLength = Math.PI * 2){
        super(0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength);
        this.type = "ConeGeometry";
        this.parameters = {
            radius: radius,
            height: height,
            radialSegments: radialSegments,
            heightSegments: heightSegments,
            openEnded: openEnded,
            thetaStart: thetaStart,
            thetaLength: thetaLength
        };
    }
    static fromJSON(data) {
        return new ConeGeometry(data.radius, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength);
    }
}
class PolyhedronGeometry extends BufferGeometry {
    constructor(vertices = [], indices = [], radius = 1, detail = 0){
        super();
        this.type = "PolyhedronGeometry";
        this.parameters = {
            vertices: vertices,
            indices: indices,
            radius: radius,
            detail: detail
        };
        // default buffer data
        const vertexBuffer = [];
        const uvBuffer = [];
        // the subdivision creates the vertex buffer data
        subdivide(detail);
        // all vertices should lie on a conceptual sphere with a given radius
        applyRadius(radius);
        // finally, create the uv data
        generateUVs();
        // build non-indexed geometry
        this.setAttribute("position", new Float32BufferAttribute(vertexBuffer, 3));
        this.setAttribute("normal", new Float32BufferAttribute(vertexBuffer.slice(), 3));
        this.setAttribute("uv", new Float32BufferAttribute(uvBuffer, 2));
        if (detail === 0) this.computeVertexNormals(); // flat normals
        else this.normalizeNormals(); // smooth normals
        // helper functions
        function subdivide(detail) {
            const a = new Vector3();
            const b = new Vector3();
            const c = new Vector3();
            // iterate over all faces and apply a subdivision with the given detail value
            for(let i = 0; i < indices.length; i += 3){
                // get the vertices of the face
                getVertexByIndex(indices[i + 0], a);
                getVertexByIndex(indices[i + 1], b);
                getVertexByIndex(indices[i + 2], c);
                // perform subdivision
                subdivideFace(a, b, c, detail);
            }
        }
        function subdivideFace(a, b, c, detail) {
            const cols = detail + 1;
            // we use this multidimensional array as a data structure for creating the subdivision
            const v = [];
            // construct all of the vertices for this subdivision
            for(let i = 0; i <= cols; i++){
                v[i] = [];
                const aj = a.clone().lerp(c, i / cols);
                const bj = b.clone().lerp(c, i / cols);
                const rows = cols - i;
                for(let j = 0; j <= rows; j++)if (j === 0 && i === cols) v[i][j] = aj;
                else v[i][j] = aj.clone().lerp(bj, j / rows);
            }
            // construct all of the faces
            for(let i = 0; i < cols; i++)for(let j = 0; j < 2 * (cols - i) - 1; j++){
                const k = Math.floor(j / 2);
                if (j % 2 === 0) {
                    pushVertex(v[i][k + 1]);
                    pushVertex(v[i + 1][k]);
                    pushVertex(v[i][k]);
                } else {
                    pushVertex(v[i][k + 1]);
                    pushVertex(v[i + 1][k + 1]);
                    pushVertex(v[i + 1][k]);
                }
            }
        }
        function applyRadius(radius) {
            const vertex = new Vector3();
            // iterate over the entire buffer and apply the radius to each vertex
            for(let i = 0; i < vertexBuffer.length; i += 3){
                vertex.x = vertexBuffer[i + 0];
                vertex.y = vertexBuffer[i + 1];
                vertex.z = vertexBuffer[i + 2];
                vertex.normalize().multiplyScalar(radius);
                vertexBuffer[i + 0] = vertex.x;
                vertexBuffer[i + 1] = vertex.y;
                vertexBuffer[i + 2] = vertex.z;
            }
        }
        function generateUVs() {
            const vertex = new Vector3();
            for(let i = 0; i < vertexBuffer.length; i += 3){
                vertex.x = vertexBuffer[i + 0];
                vertex.y = vertexBuffer[i + 1];
                vertex.z = vertexBuffer[i + 2];
                const u = azimuth(vertex) / 2 / Math.PI + 0.5;
                const v = inclination(vertex) / Math.PI + 0.5;
                uvBuffer.push(u, 1 - v);
            }
            correctUVs();
            correctSeam();
        }
        function correctSeam() {
            // handle case when face straddles the seam, see #3269
            for(let i = 0; i < uvBuffer.length; i += 6){
                // uv data of a single face
                const x0 = uvBuffer[i + 0];
                const x1 = uvBuffer[i + 2];
                const x2 = uvBuffer[i + 4];
                const max = Math.max(x0, x1, x2);
                const min = Math.min(x0, x1, x2);
                // 0.9 is somewhat arbitrary
                if (max > 0.9 && min < 0.1) {
                    if (x0 < 0.2) uvBuffer[i + 0] += 1;
                    if (x1 < 0.2) uvBuffer[i + 2] += 1;
                    if (x2 < 0.2) uvBuffer[i + 4] += 1;
                }
            }
        }
        function pushVertex(vertex) {
            vertexBuffer.push(vertex.x, vertex.y, vertex.z);
        }
        function getVertexByIndex(index, vertex) {
            const stride = index * 3;
            vertex.x = vertices[stride + 0];
            vertex.y = vertices[stride + 1];
            vertex.z = vertices[stride + 2];
        }
        function correctUVs() {
            const a = new Vector3();
            const b = new Vector3();
            const c = new Vector3();
            const centroid = new Vector3();
            const uvA = new Vector2();
            const uvB = new Vector2();
            const uvC = new Vector2();
            for(let i = 0, j = 0; i < vertexBuffer.length; i += 9, j += 6){
                a.set(vertexBuffer[i + 0], vertexBuffer[i + 1], vertexBuffer[i + 2]);
                b.set(vertexBuffer[i + 3], vertexBuffer[i + 4], vertexBuffer[i + 5]);
                c.set(vertexBuffer[i + 6], vertexBuffer[i + 7], vertexBuffer[i + 8]);
                uvA.set(uvBuffer[j + 0], uvBuffer[j + 1]);
                uvB.set(uvBuffer[j + 2], uvBuffer[j + 3]);
                uvC.set(uvBuffer[j + 4], uvBuffer[j + 5]);
                centroid.copy(a).add(b).add(c).divideScalar(3);
                const azi = azimuth(centroid);
                correctUV(uvA, j + 0, a, azi);
                correctUV(uvB, j + 2, b, azi);
                correctUV(uvC, j + 4, c, azi);
            }
        }
        function correctUV(uv, stride, vector, azimuth) {
            if (azimuth < 0 && uv.x === 1) uvBuffer[stride] = uv.x - 1;
            if (vector.x === 0 && vector.z === 0) uvBuffer[stride] = azimuth / 2 / Math.PI + 0.5;
        }
        // Angle around the Y axis, counter-clockwise when looking from above.
        function azimuth(vector) {
            return Math.atan2(vector.z, -vector.x);
        }
        // Angle above the XZ plane.
        function inclination(vector) {
            return Math.atan2(-vector.y, Math.sqrt(vector.x * vector.x + vector.z * vector.z));
        }
    }
    copy(source) {
        super.copy(source);
        this.parameters = Object.assign({}, source.parameters);
        return this;
    }
    static fromJSON(data) {
        return new PolyhedronGeometry(data.vertices, data.indices, data.radius, data.details);
    }
}
class DodecahedronGeometry extends PolyhedronGeometry {
    constructor(radius = 1, detail = 0){
        const t = (1 + Math.sqrt(5)) / 2;
        const r = 1 / t;
        const vertices = [
            // (±1, ±1, ±1)
            -1,
            -1,
            -1,
            -1,
            -1,
            1,
            -1,
            1,
            -1,
            -1,
            1,
            1,
            1,
            -1,
            -1,
            1,
            -1,
            1,
            1,
            1,
            -1,
            1,
            1,
            1,
            // (0, ±1/φ, ±φ)
            0,
            -r,
            -t,
            0,
            -r,
            t,
            0,
            r,
            -t,
            0,
            r,
            t,
            // (±1/φ, ±φ, 0)
            -r,
            -t,
            0,
            -r,
            t,
            0,
            r,
            -t,
            0,
            r,
            t,
            0,
            // (±φ, 0, ±1/φ)
            -t,
            0,
            -r,
            t,
            0,
            -r,
            -t,
            0,
            r,
            t,
            0,
            r
        ];
        const indices = [
            3,
            11,
            7,
            3,
            7,
            15,
            3,
            15,
            13,
            7,
            19,
            17,
            7,
            17,
            6,
            7,
            6,
            15,
            17,
            4,
            8,
            17,
            8,
            10,
            17,
            10,
            6,
            8,
            0,
            16,
            8,
            16,
            2,
            8,
            2,
            10,
            0,
            12,
            1,
            0,
            1,
            18,
            0,
            18,
            16,
            6,
            10,
            2,
            6,
            2,
            13,
            6,
            13,
            15,
            2,
            16,
            18,
            2,
            18,
            3,
            2,
            3,
            13,
            18,
            1,
            9,
            18,
            9,
            11,
            18,
            11,
            3,
            4,
            14,
            12,
            4,
            12,
            0,
            4,
            0,
            8,
            11,
            9,
            5,
            11,
            5,
            19,
            11,
            19,
            7,
            19,
            5,
            14,
            19,
            14,
            4,
            19,
            4,
            17,
            1,
            12,
            14,
            1,
            14,
            5,
            1,
            5,
            9
        ];
        super(vertices, indices, radius, detail);
        this.type = "DodecahedronGeometry";
        this.parameters = {
            radius: radius,
            detail: detail
        };
    }
    static fromJSON(data) {
        return new DodecahedronGeometry(data.radius, data.detail);
    }
}
const _v0 = /*@__PURE__*/ new Vector3();
const _v1$1 = /*@__PURE__*/ new Vector3();
const _normal = /*@__PURE__*/ new Vector3();
const _triangle = /*@__PURE__*/ new Triangle();
class EdgesGeometry extends BufferGeometry {
    constructor(geometry = null, thresholdAngle = 1){
        super();
        this.type = "EdgesGeometry";
        this.parameters = {
            geometry: geometry,
            thresholdAngle: thresholdAngle
        };
        if (geometry !== null) {
            const precisionPoints = 4;
            const precision = Math.pow(10, precisionPoints);
            const thresholdDot = Math.cos(DEG2RAD * thresholdAngle);
            const indexAttr = geometry.getIndex();
            const positionAttr = geometry.getAttribute("position");
            const indexCount = indexAttr ? indexAttr.count : positionAttr.count;
            const indexArr = [
                0,
                0,
                0
            ];
            const vertKeys = [
                "a",
                "b",
                "c"
            ];
            const hashes = new Array(3);
            const edgeData = {};
            const vertices = [];
            for(let i = 0; i < indexCount; i += 3){
                if (indexAttr) {
                    indexArr[0] = indexAttr.getX(i);
                    indexArr[1] = indexAttr.getX(i + 1);
                    indexArr[2] = indexAttr.getX(i + 2);
                } else {
                    indexArr[0] = i;
                    indexArr[1] = i + 1;
                    indexArr[2] = i + 2;
                }
                const { a, b, c } = _triangle;
                a.fromBufferAttribute(positionAttr, indexArr[0]);
                b.fromBufferAttribute(positionAttr, indexArr[1]);
                c.fromBufferAttribute(positionAttr, indexArr[2]);
                _triangle.getNormal(_normal);
                // create hashes for the edge from the vertices
                hashes[0] = `${Math.round(a.x * precision)},${Math.round(a.y * precision)},${Math.round(a.z * precision)}`;
                hashes[1] = `${Math.round(b.x * precision)},${Math.round(b.y * precision)},${Math.round(b.z * precision)}`;
                hashes[2] = `${Math.round(c.x * precision)},${Math.round(c.y * precision)},${Math.round(c.z * precision)}`;
                // skip degenerate triangles
                if (hashes[0] === hashes[1] || hashes[1] === hashes[2] || hashes[2] === hashes[0]) continue;
                // iterate over every edge
                for(let j = 0; j < 3; j++){
                    // get the first and next vertex making up the edge
                    const jNext = (j + 1) % 3;
                    const vecHash0 = hashes[j];
                    const vecHash1 = hashes[jNext];
                    const v0 = _triangle[vertKeys[j]];
                    const v1 = _triangle[vertKeys[jNext]];
                    const hash = `${vecHash0}_${vecHash1}`;
                    const reverseHash = `${vecHash1}_${vecHash0}`;
                    if (reverseHash in edgeData && edgeData[reverseHash]) {
                        // if we found a sibling edge add it into the vertex array if
                        // it meets the angle threshold and delete the edge from the map.
                        if (_normal.dot(edgeData[reverseHash].normal) <= thresholdDot) {
                            vertices.push(v0.x, v0.y, v0.z);
                            vertices.push(v1.x, v1.y, v1.z);
                        }
                        edgeData[reverseHash] = null;
                    } else if (!(hash in edgeData)) // if we've already got an edge here then skip adding a new one
                    edgeData[hash] = {
                        index0: indexArr[j],
                        index1: indexArr[jNext],
                        normal: _normal.clone()
                    };
                }
            }
            // iterate over all remaining, unmatched edges and add them to the vertex array
            for(const key in edgeData)if (edgeData[key]) {
                const { index0, index1 } = edgeData[key];
                _v0.fromBufferAttribute(positionAttr, index0);
                _v1$1.fromBufferAttribute(positionAttr, index1);
                vertices.push(_v0.x, _v0.y, _v0.z);
                vertices.push(_v1$1.x, _v1$1.y, _v1$1.z);
            }
            this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
        }
    }
    copy(source) {
        super.copy(source);
        this.parameters = Object.assign({}, source.parameters);
        return this;
    }
}
class Shape extends Path {
    constructor(points){
        super(points);
        this.uuid = generateUUID();
        this.type = "Shape";
        this.holes = [];
    }
    getPointsHoles(divisions) {
        const holesPts = [];
        for(let i = 0, l = this.holes.length; i < l; i++)holesPts[i] = this.holes[i].getPoints(divisions);
        return holesPts;
    }
    // get points of shape and holes (keypoints based on segments parameter)
    extractPoints(divisions) {
        return {
            shape: this.getPoints(divisions),
            holes: this.getPointsHoles(divisions)
        };
    }
    copy(source) {
        super.copy(source);
        this.holes = [];
        for(let i = 0, l = source.holes.length; i < l; i++){
            const hole = source.holes[i];
            this.holes.push(hole.clone());
        }
        return this;
    }
    toJSON() {
        const data = super.toJSON();
        data.uuid = this.uuid;
        data.holes = [];
        for(let i = 0, l = this.holes.length; i < l; i++){
            const hole = this.holes[i];
            data.holes.push(hole.toJSON());
        }
        return data;
    }
    fromJSON(json) {
        super.fromJSON(json);
        this.uuid = json.uuid;
        this.holes = [];
        for(let i = 0, l = json.holes.length; i < l; i++){
            const hole = json.holes[i];
            this.holes.push(new Path().fromJSON(hole));
        }
        return this;
    }
}
/**
 * Port from https://github.com/mapbox/earcut (v2.2.4)
 */ const Earcut = {
    triangulate: function(data, holeIndices, dim = 2) {
        const hasHoles = holeIndices && holeIndices.length;
        const outerLen = hasHoles ? holeIndices[0] * dim : data.length;
        let outerNode = linkedList(data, 0, outerLen, dim, true);
        const triangles = [];
        if (!outerNode || outerNode.next === outerNode.prev) return triangles;
        let minX, minY, maxX, maxY, x, y, invSize;
        if (hasHoles) outerNode = eliminateHoles(data, holeIndices, outerNode, dim);
        // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox
        if (data.length > 80 * dim) {
            minX = maxX = data[0];
            minY = maxY = data[1];
            for(let i = dim; i < outerLen; i += dim){
                x = data[i];
                y = data[i + 1];
                if (x < minX) minX = x;
                if (y < minY) minY = y;
                if (x > maxX) maxX = x;
                if (y > maxY) maxY = y;
            }
            // minX, minY and invSize are later used to transform coords into integers for z-order calculation
            invSize = Math.max(maxX - minX, maxY - minY);
            invSize = invSize !== 0 ? 32767 / invSize : 0;
        }
        earcutLinked(outerNode, triangles, dim, minX, minY, invSize, 0);
        return triangles;
    }
};
// create a circular doubly linked list from polygon points in the specified winding order
function linkedList(data, start, end, dim, clockwise) {
    let i, last;
    if (clockwise === signedArea(data, start, end, dim) > 0) for(i = start; i < end; i += dim)last = insertNode(i, data[i], data[i + 1], last);
    else for(i = end - dim; i >= start; i -= dim)last = insertNode(i, data[i], data[i + 1], last);
    if (last && equals(last, last.next)) {
        removeNode(last);
        last = last.next;
    }
    return last;
}
// eliminate colinear or duplicate points
function filterPoints(start, end) {
    if (!start) return start;
    if (!end) end = start;
    let p = start, again;
    do {
        again = false;
        if (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {
            removeNode(p);
            p = end = p.prev;
            if (p === p.next) break;
            again = true;
        } else p = p.next;
    }while (again || p !== end);
    return end;
}
// main ear slicing loop which triangulates a polygon (given as a linked list)
function earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {
    if (!ear) return;
    // interlink polygon nodes in z-order
    if (!pass && invSize) indexCurve(ear, minX, minY, invSize);
    let stop = ear, prev, next;
    // iterate through ears, slicing them one by one
    while(ear.prev !== ear.next){
        prev = ear.prev;
        next = ear.next;
        if (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {
            // cut off the triangle
            triangles.push(prev.i / dim | 0);
            triangles.push(ear.i / dim | 0);
            triangles.push(next.i / dim | 0);
            removeNode(ear);
            // skipping the next vertex leads to less sliver triangles
            ear = next.next;
            stop = next.next;
            continue;
        }
        ear = next;
        // if we looped through the whole remaining polygon and can't find any more ears
        if (ear === stop) {
            // try filtering points and slicing again
            if (!pass) earcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1);
            else if (pass === 1) {
                ear = cureLocalIntersections(filterPoints(ear), triangles, dim);
                earcutLinked(ear, triangles, dim, minX, minY, invSize, 2);
            // as a last resort, try splitting the remaining polygon into two
            } else if (pass === 2) splitEarcut(ear, triangles, dim, minX, minY, invSize);
            break;
        }
    }
}
// check whether a polygon node forms a valid ear with adjacent nodes
function isEar(ear) {
    const a = ear.prev, b = ear, c = ear.next;
    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear
    // now make sure we don't have other points inside the potential ear
    const ax = a.x, bx = b.x, cx = c.x, ay = a.y, by = b.y, cy = c.y;
    // triangle bbox; min & max are calculated like this for speed
    const x0 = ax < bx ? ax < cx ? ax : cx : bx < cx ? bx : cx, y0 = ay < by ? ay < cy ? ay : cy : by < cy ? by : cy, x1 = ax > bx ? ax > cx ? ax : cx : bx > cx ? bx : cx, y1 = ay > by ? ay > cy ? ay : cy : by > cy ? by : cy;
    let p = c.next;
    while(p !== a){
        if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 && pointInTriangle(ax, ay, bx, by, cx, cy, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;
        p = p.next;
    }
    return true;
}
function isEarHashed(ear, minX, minY, invSize) {
    const a = ear.prev, b = ear, c = ear.next;
    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear
    const ax = a.x, bx = b.x, cx = c.x, ay = a.y, by = b.y, cy = c.y;
    // triangle bbox; min & max are calculated like this for speed
    const x0 = ax < bx ? ax < cx ? ax : cx : bx < cx ? bx : cx, y0 = ay < by ? ay < cy ? ay : cy : by < cy ? by : cy, x1 = ax > bx ? ax > cx ? ax : cx : bx > cx ? bx : cx, y1 = ay > by ? ay > cy ? ay : cy : by > cy ? by : cy;
    // z-order range for the current triangle bbox;
    const minZ = zOrder(x0, y0, minX, minY, invSize), maxZ = zOrder(x1, y1, minX, minY, invSize);
    let p = ear.prevZ, n = ear.nextZ;
    // look for points inside the triangle in both directions
    while(p && p.z >= minZ && n && n.z <= maxZ){
        if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 && p !== a && p !== c && pointInTriangle(ax, ay, bx, by, cx, cy, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;
        p = p.prevZ;
        if (n.x >= x0 && n.x <= x1 && n.y >= y0 && n.y <= y1 && n !== a && n !== c && pointInTriangle(ax, ay, bx, by, cx, cy, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;
        n = n.nextZ;
    }
    // look for remaining points in decreasing z-order
    while(p && p.z >= minZ){
        if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 && p !== a && p !== c && pointInTriangle(ax, ay, bx, by, cx, cy, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;
        p = p.prevZ;
    }
    // look for remaining points in increasing z-order
    while(n && n.z <= maxZ){
        if (n.x >= x0 && n.x <= x1 && n.y >= y0 && n.y <= y1 && n !== a && n !== c && pointInTriangle(ax, ay, bx, by, cx, cy, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;
        n = n.nextZ;
    }
    return true;
}
// go through all polygon nodes and cure small local self-intersections
function cureLocalIntersections(start, triangles, dim) {
    let p = start;
    do {
        const a = p.prev, b = p.next.next;
        if (!equals(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {
            triangles.push(a.i / dim | 0);
            triangles.push(p.i / dim | 0);
            triangles.push(b.i / dim | 0);
            // remove two nodes involved
            removeNode(p);
            removeNode(p.next);
            p = start = b;
        }
        p = p.next;
    }while (p !== start);
    return filterPoints(p);
}
// try splitting polygon into two and triangulate them independently
function splitEarcut(start, triangles, dim, minX, minY, invSize) {
    // look for a valid diagonal that divides the polygon into two
    let a = start;
    do {
        let b = a.next.next;
        while(b !== a.prev){
            if (a.i !== b.i && isValidDiagonal(a, b)) {
                // split the polygon in two by the diagonal
                let c = splitPolygon(a, b);
                // filter colinear points around the cuts
                a = filterPoints(a, a.next);
                c = filterPoints(c, c.next);
                // run earcut on each half
                earcutLinked(a, triangles, dim, minX, minY, invSize, 0);
                earcutLinked(c, triangles, dim, minX, minY, invSize, 0);
                return;
            }
            b = b.next;
        }
        a = a.next;
    }while (a !== start);
}
// link every hole into the outer loop, producing a single-ring polygon without holes
function eliminateHoles(data, holeIndices, outerNode, dim) {
    const queue = [];
    let i, len, start, end, list;
    for(i = 0, len = holeIndices.length; i < len; i++){
        start = holeIndices[i] * dim;
        end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;
        list = linkedList(data, start, end, dim, false);
        if (list === list.next) list.steiner = true;
        queue.push(getLeftmost(list));
    }
    queue.sort(compareX);
    // process holes from left to right
    for(i = 0; i < queue.length; i++)outerNode = eliminateHole(queue[i], outerNode);
    return outerNode;
}
function compareX(a, b) {
    return a.x - b.x;
}
// find a bridge between vertices that connects hole with an outer ring and link it
function eliminateHole(hole, outerNode) {
    const bridge = findHoleBridge(hole, outerNode);
    if (!bridge) return outerNode;
    const bridgeReverse = splitPolygon(bridge, hole);
    // filter collinear points around the cuts
    filterPoints(bridgeReverse, bridgeReverse.next);
    return filterPoints(bridge, bridge.next);
}
// David Eberly's algorithm for finding a bridge between hole and outer polygon
function findHoleBridge(hole, outerNode) {
    let p = outerNode, qx = -Infinity, m;
    const hx = hole.x, hy = hole.y;
    // find a segment intersected by a ray from the hole's leftmost point to the left;
    // segment's endpoint with lesser x will be potential connection point
    do {
        if (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {
            const x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);
            if (x <= hx && x > qx) {
                qx = x;
                m = p.x < p.next.x ? p : p.next;
                if (x === hx) return m; // hole touches outer segment; pick leftmost endpoint
            }
        }
        p = p.next;
    }while (p !== outerNode);
    if (!m) return null;
    // look for points inside the triangle of hole point, segment intersection and endpoint;
    // if there are no points found, we have a valid connection;
    // otherwise choose the point of the minimum angle with the ray as connection point
    const stop = m, mx = m.x, my = m.y;
    let tanMin = Infinity, tan;
    p = m;
    do {
        if (hx >= p.x && p.x >= mx && hx !== p.x && pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {
            tan = Math.abs(hy - p.y) / (hx - p.x); // tangential
            if (locallyInside(p, hole) && (tan < tanMin || tan === tanMin && (p.x > m.x || p.x === m.x && sectorContainsSector(m, p)))) {
                m = p;
                tanMin = tan;
            }
        }
        p = p.next;
    }while (p !== stop);
    return m;
}
// whether sector in vertex m contains sector in vertex p in the same coordinates
function sectorContainsSector(m, p) {
    return area(m.prev, m, p.prev) < 0 && area(p.next, m, m.next) < 0;
}
// interlink polygon nodes in z-order
function indexCurve(start, minX, minY, invSize) {
    let p = start;
    do {
        if (p.z === 0) p.z = zOrder(p.x, p.y, minX, minY, invSize);
        p.prevZ = p.prev;
        p.nextZ = p.next;
        p = p.next;
    }while (p !== start);
    p.prevZ.nextZ = null;
    p.prevZ = null;
    sortLinked(p);
}
// Simon Tatham's linked list merge sort algorithm
// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html
function sortLinked(list) {
    let i, p, q, e, tail, numMerges, pSize, qSize, inSize = 1;
    do {
        p = list;
        list = null;
        tail = null;
        numMerges = 0;
        while(p){
            numMerges++;
            q = p;
            pSize = 0;
            for(i = 0; i < inSize; i++){
                pSize++;
                q = q.nextZ;
                if (!q) break;
            }
            qSize = inSize;
            while(pSize > 0 || qSize > 0 && q){
                if (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {
                    e = p;
                    p = p.nextZ;
                    pSize--;
                } else {
                    e = q;
                    q = q.nextZ;
                    qSize--;
                }
                if (tail) tail.nextZ = e;
                else list = e;
                e.prevZ = tail;
                tail = e;
            }
            p = q;
        }
        tail.nextZ = null;
        inSize *= 2;
    }while (numMerges > 1);
    return list;
}
// z-order of a point given coords and inverse of the longer side of data bbox
function zOrder(x, y, minX, minY, invSize) {
    // coords are transformed into non-negative 15-bit integer range
    x = (x - minX) * invSize | 0;
    y = (y - minY) * invSize | 0;
    x = (x | x << 8) & 0x00FF00FF;
    x = (x | x << 4) & 0x0F0F0F0F;
    x = (x | x << 2) & 0x33333333;
    x = (x | x << 1) & 0x55555555;
    y = (y | y << 8) & 0x00FF00FF;
    y = (y | y << 4) & 0x0F0F0F0F;
    y = (y | y << 2) & 0x33333333;
    y = (y | y << 1) & 0x55555555;
    return x | y << 1;
}
// find the leftmost node of a polygon ring
function getLeftmost(start) {
    let p = start, leftmost = start;
    do {
        if (p.x < leftmost.x || p.x === leftmost.x && p.y < leftmost.y) leftmost = p;
        p = p.next;
    }while (p !== start);
    return leftmost;
}
// check if a point lies within a convex triangle
function pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {
    return (cx - px) * (ay - py) >= (ax - px) * (cy - py) && (ax - px) * (by - py) >= (bx - px) * (ay - py) && (bx - px) * (cy - py) >= (cx - px) * (by - py);
}
// check if a diagonal between two polygon nodes is valid (lies in polygon interior)
function isValidDiagonal(a, b) {
    return a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) && // dones't intersect other edges
    (locallyInside(a, b) && locallyInside(b, a) && middleInside(a, b) && // locally visible
    (area(a.prev, a, b.prev) || area(a, b.prev, b)) || // does not create opposite-facing sectors
    equals(a, b) && area(a.prev, a, a.next) > 0 && area(b.prev, b, b.next) > 0); // special zero-length case
}
// signed area of a triangle
function area(p, q, r) {
    return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);
}
// check if two points are equal
function equals(p1, p2) {
    return p1.x === p2.x && p1.y === p2.y;
}
// check if two segments intersect
function intersects(p1, q1, p2, q2) {
    const o1 = sign(area(p1, q1, p2));
    const o2 = sign(area(p1, q1, q2));
    const o3 = sign(area(p2, q2, p1));
    const o4 = sign(area(p2, q2, q1));
    if (o1 !== o2 && o3 !== o4) return true; // general case
    if (o1 === 0 && onSegment(p1, p2, q1)) return true; // p1, q1 and p2 are collinear and p2 lies on p1q1
    if (o2 === 0 && onSegment(p1, q2, q1)) return true; // p1, q1 and q2 are collinear and q2 lies on p1q1
    if (o3 === 0 && onSegment(p2, p1, q2)) return true; // p2, q2 and p1 are collinear and p1 lies on p2q2
    if (o4 === 0 && onSegment(p2, q1, q2)) return true; // p2, q2 and q1 are collinear and q1 lies on p2q2
    return false;
}
// for collinear points p, q, r, check if point q lies on segment pr
function onSegment(p, q, r) {
    return q.x <= Math.max(p.x, r.x) && q.x >= Math.min(p.x, r.x) && q.y <= Math.max(p.y, r.y) && q.y >= Math.min(p.y, r.y);
}
function sign(num) {
    return num > 0 ? 1 : num < 0 ? -1 : 0;
}
// check if a polygon diagonal intersects any polygon segments
function intersectsPolygon(a, b) {
    let p = a;
    do {
        if (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i && intersects(p, p.next, a, b)) return true;
        p = p.next;
    }while (p !== a);
    return false;
}
// check if a polygon diagonal is locally inside the polygon
function locallyInside(a, b) {
    return area(a.prev, a, a.next) < 0 ? area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 : area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;
}
// check if the middle point of a polygon diagonal is inside the polygon
function middleInside(a, b) {
    let p = a, inside = false;
    const px = (a.x + b.x) / 2, py = (a.y + b.y) / 2;
    do {
        if (p.y > py !== p.next.y > py && p.next.y !== p.y && px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x) inside = !inside;
        p = p.next;
    }while (p !== a);
    return inside;
}
// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;
// if one belongs to the outer ring and another to a hole, it merges it into a single ring
function splitPolygon(a, b) {
    const a2 = new Node(a.i, a.x, a.y), b2 = new Node(b.i, b.x, b.y), an = a.next, bp = b.prev;
    a.next = b;
    b.prev = a;
    a2.next = an;
    an.prev = a2;
    b2.next = a2;
    a2.prev = b2;
    bp.next = b2;
    b2.prev = bp;
    return b2;
}
// create a node and optionally link it with previous one (in a circular doubly linked list)
function insertNode(i, x, y, last) {
    const p = new Node(i, x, y);
    if (!last) {
        p.prev = p;
        p.next = p;
    } else {
        p.next = last.next;
        p.prev = last;
        last.next.prev = p;
        last.next = p;
    }
    return p;
}
function removeNode(p) {
    p.next.prev = p.prev;
    p.prev.next = p.next;
    if (p.prevZ) p.prevZ.nextZ = p.nextZ;
    if (p.nextZ) p.nextZ.prevZ = p.prevZ;
}
function Node(i, x, y) {
    // vertex index in coordinates array
    this.i = i;
    // vertex coordinates
    this.x = x;
    this.y = y;
    // previous and next vertex nodes in a polygon ring
    this.prev = null;
    this.next = null;
    // z-order curve value
    this.z = 0;
    // previous and next nodes in z-order
    this.prevZ = null;
    this.nextZ = null;
    // indicates whether this is a steiner point
    this.steiner = false;
}
function signedArea(data, start, end, dim) {
    let sum = 0;
    for(let i = start, j = end - dim; i < end; i += dim){
        sum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);
        j = i;
    }
    return sum;
}
class ShapeUtils {
    // calculate area of the contour polygon
    static area(contour) {
        const n = contour.length;
        let a = 0.0;
        for(let p = n - 1, q = 0; q < n; p = q++)a += contour[p].x * contour[q].y - contour[q].x * contour[p].y;
        return a * 0.5;
    }
    static isClockWise(pts) {
        return ShapeUtils.area(pts) < 0;
    }
    static triangulateShape(contour, holes) {
        const vertices = []; // flat array of vertices like [ x0,y0, x1,y1, x2,y2, ... ]
        const holeIndices = []; // array of hole indices
        const faces = []; // final array of vertex indices like [ [ a,b,d ], [ b,c,d ] ]
        removeDupEndPts(contour);
        addContour(vertices, contour);
        //
        let holeIndex = contour.length;
        holes.forEach(removeDupEndPts);
        for(let i = 0; i < holes.length; i++){
            holeIndices.push(holeIndex);
            holeIndex += holes[i].length;
            addContour(vertices, holes[i]);
        }
        //
        const triangles = Earcut.triangulate(vertices, holeIndices);
        //
        for(let i = 0; i < triangles.length; i += 3)faces.push(triangles.slice(i, i + 3));
        return faces;
    }
}
function removeDupEndPts(points) {
    const l = points.length;
    if (l > 2 && points[l - 1].equals(points[0])) points.pop();
}
function addContour(vertices, contour) {
    for(let i = 0; i < contour.length; i++){
        vertices.push(contour[i].x);
        vertices.push(contour[i].y);
    }
}
/**
 * Creates extruded geometry from a path shape.
 *
 * parameters = {
 *
 *  curveSegments: <int>, // number of points on the curves
 *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too
 *  depth: <float>, // Depth to extrude the shape
 *
 *  bevelEnabled: <bool>, // turn on bevel
 *  bevelThickness: <float>, // how deep into the original shape bevel goes
 *  bevelSize: <float>, // how far from shape outline (including bevelOffset) is bevel
 *  bevelOffset: <float>, // how far from shape outline does bevel start
 *  bevelSegments: <int>, // number of bevel layers
 *
 *  extrudePath: <THREE.Curve> // curve to extrude shape along
 *
 *  UVGenerator: <Object> // object that provides UV generator functions
 *
 * }
 */ class ExtrudeGeometry extends BufferGeometry {
    constructor(shapes = new Shape([
        new Vector2(0.5, 0.5),
        new Vector2(-0.5, 0.5),
        new Vector2(-0.5, -0.5),
        new Vector2(0.5, -0.5)
    ]), options = {}){
        super();
        this.type = "ExtrudeGeometry";
        this.parameters = {
            shapes: shapes,
            options: options
        };
        shapes = Array.isArray(shapes) ? shapes : [
            shapes
        ];
        const scope = this;
        const verticesArray = [];
        const uvArray = [];
        for(let i = 0, l = shapes.length; i < l; i++){
            const shape = shapes[i];
            addShape(shape);
        }
        // build geometry
        this.setAttribute("position", new Float32BufferAttribute(verticesArray, 3));
        this.setAttribute("uv", new Float32BufferAttribute(uvArray, 2));
        this.computeVertexNormals();
        // functions
        function addShape(shape) {
            const placeholder = [];
            // options
            const curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;
            const steps = options.steps !== undefined ? options.steps : 1;
            const depth = options.depth !== undefined ? options.depth : 1;
            let bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true;
            let bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 0.2;
            let bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 0.1;
            let bevelOffset = options.bevelOffset !== undefined ? options.bevelOffset : 0;
            let bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;
            const extrudePath = options.extrudePath;
            const uvgen = options.UVGenerator !== undefined ? options.UVGenerator : WorldUVGenerator;
            //
            let extrudePts, extrudeByPath = false;
            let splineTube, binormal, normal, position2;
            if (extrudePath) {
                extrudePts = extrudePath.getSpacedPoints(steps);
                extrudeByPath = true;
                bevelEnabled = false; // bevels not supported for path extrusion
                // SETUP TNB variables
                // TODO1 - have a .isClosed in spline?
                splineTube = extrudePath.computeFrenetFrames(steps, false);
                // console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);
                binormal = new Vector3();
                normal = new Vector3();
                position2 = new Vector3();
            }
            // Safeguards if bevels are not enabled
            if (!bevelEnabled) {
                bevelSegments = 0;
                bevelThickness = 0;
                bevelSize = 0;
                bevelOffset = 0;
            }
            // Variables initialization
            const shapePoints = shape.extractPoints(curveSegments);
            let vertices = shapePoints.shape;
            const holes = shapePoints.holes;
            const reverse = !ShapeUtils.isClockWise(vertices);
            if (reverse) {
                vertices = vertices.reverse();
                // Maybe we should also check if holes are in the opposite direction, just to be safe ...
                for(let h = 0, hl = holes.length; h < hl; h++){
                    const ahole = holes[h];
                    if (ShapeUtils.isClockWise(ahole)) holes[h] = ahole.reverse();
                }
            }
            const faces = ShapeUtils.triangulateShape(vertices, holes);
            /* Vertices */ const contour = vertices; // vertices has all points but contour has only points of circumference
            for(let h = 0, hl = holes.length; h < hl; h++){
                const ahole = holes[h];
                vertices = vertices.concat(ahole);
            }
            function scalePt2(pt, vec, size) {
                if (!vec) console.error("THREE.ExtrudeGeometry: vec does not exist");
                return pt.clone().addScaledVector(vec, size);
            }
            const vlen = vertices.length, flen = faces.length;
            // Find directions for point movement
            function getBevelVec(inPt, inPrev, inNext) {
                // computes for inPt the corresponding point inPt' on a new contour
                //   shifted by 1 unit (length of normalized vector) to the left
                // if we walk along contour clockwise, this new contour is outside the old one
                //
                // inPt' is the intersection of the two lines parallel to the two
                //  adjacent edges of inPt at a distance of 1 unit on the left side.
                let v_trans_x, v_trans_y, shrink_by; // resulting translation vector for inPt
                // good reading for geometry algorithms (here: line-line intersection)
                // http://geomalgorithms.com/a05-_intersect-1.html
                const v_prev_x = inPt.x - inPrev.x, v_prev_y = inPt.y - inPrev.y;
                const v_next_x = inNext.x - inPt.x, v_next_y = inNext.y - inPt.y;
                const v_prev_lensq = v_prev_x * v_prev_x + v_prev_y * v_prev_y;
                // check for collinear edges
                const collinear0 = v_prev_x * v_next_y - v_prev_y * v_next_x;
                if (Math.abs(collinear0) > Number.EPSILON) {
                    // not collinear
                    // length of vectors for normalizing
                    const v_prev_len = Math.sqrt(v_prev_lensq);
                    const v_next_len = Math.sqrt(v_next_x * v_next_x + v_next_y * v_next_y);
                    // shift adjacent points by unit vectors to the left
                    const ptPrevShift_x = inPrev.x - v_prev_y / v_prev_len;
                    const ptPrevShift_y = inPrev.y + v_prev_x / v_prev_len;
                    const ptNextShift_x = inNext.x - v_next_y / v_next_len;
                    const ptNextShift_y = inNext.y + v_next_x / v_next_len;
                    // scaling factor for v_prev to intersection point
                    const sf = ((ptNextShift_x - ptPrevShift_x) * v_next_y - (ptNextShift_y - ptPrevShift_y) * v_next_x) / (v_prev_x * v_next_y - v_prev_y * v_next_x);
                    // vector from inPt to intersection point
                    v_trans_x = ptPrevShift_x + v_prev_x * sf - inPt.x;
                    v_trans_y = ptPrevShift_y + v_prev_y * sf - inPt.y;
                    // Don't normalize!, otherwise sharp corners become ugly
                    //  but prevent crazy spikes
                    const v_trans_lensq = v_trans_x * v_trans_x + v_trans_y * v_trans_y;
                    if (v_trans_lensq <= 2) return new Vector2(v_trans_x, v_trans_y);
                    else shrink_by = Math.sqrt(v_trans_lensq / 2);
                } else {
                    // handle special case of collinear edges
                    let direction_eq = false; // assumes: opposite
                    if (v_prev_x > Number.EPSILON) {
                        if (v_next_x > Number.EPSILON) direction_eq = true;
                    } else {
                        if (v_prev_x < -Number.EPSILON) {
                            if (v_next_x < -Number.EPSILON) direction_eq = true;
                        } else if (Math.sign(v_prev_y) === Math.sign(v_next_y)) direction_eq = true;
                    }
                    if (direction_eq) {
                        // console.log("Warning: lines are a straight sequence");
                        v_trans_x = -v_prev_y;
                        v_trans_y = v_prev_x;
                        shrink_by = Math.sqrt(v_prev_lensq);
                    } else {
                        // console.log("Warning: lines are a straight spike");
                        v_trans_x = v_prev_x;
                        v_trans_y = v_prev_y;
                        shrink_by = Math.sqrt(v_prev_lensq / 2);
                    }
                }
                return new Vector2(v_trans_x / shrink_by, v_trans_y / shrink_by);
            }
            const contourMovements = [];
            for(let i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i++, j++, k++){
                if (j === il) j = 0;
                if (k === il) k = 0;
                //  (j)---(i)---(k)
                // console.log('i,j,k', i, j , k)
                contourMovements[i] = getBevelVec(contour[i], contour[j], contour[k]);
            }
            const holesMovements = [];
            let oneHoleMovements, verticesMovements = contourMovements.concat();
            for(let h = 0, hl = holes.length; h < hl; h++){
                const ahole = holes[h];
                oneHoleMovements = [];
                for(let i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i++, j++, k++){
                    if (j === il) j = 0;
                    if (k === il) k = 0;
                    //  (j)---(i)---(k)
                    oneHoleMovements[i] = getBevelVec(ahole[i], ahole[j], ahole[k]);
                }
                holesMovements.push(oneHoleMovements);
                verticesMovements = verticesMovements.concat(oneHoleMovements);
            }
            // Loop bevelSegments, 1 for the front, 1 for the back
            for(let b = 0; b < bevelSegments; b++){
                //for ( b = bevelSegments; b > 0; b -- ) {
                const t = b / bevelSegments;
                const z = bevelThickness * Math.cos(t * Math.PI / 2);
                const bs = bevelSize * Math.sin(t * Math.PI / 2) + bevelOffset;
                // contract shape
                for(let i = 0, il = contour.length; i < il; i++){
                    const vert = scalePt2(contour[i], contourMovements[i], bs);
                    v(vert.x, vert.y, -z);
                }
                // expand holes
                for(let h = 0, hl = holes.length; h < hl; h++){
                    const ahole = holes[h];
                    oneHoleMovements = holesMovements[h];
                    for(let i = 0, il = ahole.length; i < il; i++){
                        const vert = scalePt2(ahole[i], oneHoleMovements[i], bs);
                        v(vert.x, vert.y, -z);
                    }
                }
            }
            const bs = bevelSize + bevelOffset;
            // Back facing vertices
            for(let i = 0; i < vlen; i++){
                const vert = bevelEnabled ? scalePt2(vertices[i], verticesMovements[i], bs) : vertices[i];
                if (!extrudeByPath) v(vert.x, vert.y, 0);
                else {
                    // v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );
                    normal.copy(splineTube.normals[0]).multiplyScalar(vert.x);
                    binormal.copy(splineTube.binormals[0]).multiplyScalar(vert.y);
                    position2.copy(extrudePts[0]).add(normal).add(binormal);
                    v(position2.x, position2.y, position2.z);
                }
            }
            // Add stepped vertices...
            // Including front facing vertices
            for(let s = 1; s <= steps; s++)for(let i = 0; i < vlen; i++){
                const vert = bevelEnabled ? scalePt2(vertices[i], verticesMovements[i], bs) : vertices[i];
                if (!extrudeByPath) v(vert.x, vert.y, depth / steps * s);
                else {
                    // v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );
                    normal.copy(splineTube.normals[s]).multiplyScalar(vert.x);
                    binormal.copy(splineTube.binormals[s]).multiplyScalar(vert.y);
                    position2.copy(extrudePts[s]).add(normal).add(binormal);
                    v(position2.x, position2.y, position2.z);
                }
            }
            // Add bevel segments planes
            //for ( b = 1; b <= bevelSegments; b ++ ) {
            for(let b = bevelSegments - 1; b >= 0; b--){
                const t = b / bevelSegments;
                const z = bevelThickness * Math.cos(t * Math.PI / 2);
                const bs = bevelSize * Math.sin(t * Math.PI / 2) + bevelOffset;
                // contract shape
                for(let i = 0, il = contour.length; i < il; i++){
                    const vert = scalePt2(contour[i], contourMovements[i], bs);
                    v(vert.x, vert.y, depth + z);
                }
                // expand holes
                for(let h = 0, hl = holes.length; h < hl; h++){
                    const ahole = holes[h];
                    oneHoleMovements = holesMovements[h];
                    for(let i = 0, il = ahole.length; i < il; i++){
                        const vert = scalePt2(ahole[i], oneHoleMovements[i], bs);
                        if (!extrudeByPath) v(vert.x, vert.y, depth + z);
                        else v(vert.x, vert.y + extrudePts[steps - 1].y, extrudePts[steps - 1].x + z);
                    }
                }
            }
            /* Faces */ // Top and bottom faces
            buildLidFaces();
            // Sides faces
            buildSideFaces();
            /////  Internal functions
            function buildLidFaces() {
                const start = verticesArray.length / 3;
                if (bevelEnabled) {
                    let layer = 0; // steps + 1
                    let offset = vlen * layer;
                    // Bottom faces
                    for(let i = 0; i < flen; i++){
                        const face = faces[i];
                        f3(face[2] + offset, face[1] + offset, face[0] + offset);
                    }
                    layer = steps + bevelSegments * 2;
                    offset = vlen * layer;
                    // Top faces
                    for(let i = 0; i < flen; i++){
                        const face = faces[i];
                        f3(face[0] + offset, face[1] + offset, face[2] + offset);
                    }
                } else {
                    // Bottom faces
                    for(let i = 0; i < flen; i++){
                        const face = faces[i];
                        f3(face[2], face[1], face[0]);
                    }
                    // Top faces
                    for(let i = 0; i < flen; i++){
                        const face = faces[i];
                        f3(face[0] + vlen * steps, face[1] + vlen * steps, face[2] + vlen * steps);
                    }
                }
                scope.addGroup(start, verticesArray.length / 3 - start, 0);
            }
            // Create faces for the z-sides of the shape
            function buildSideFaces() {
                const start = verticesArray.length / 3;
                let layeroffset = 0;
                sidewalls(contour, layeroffset);
                layeroffset += contour.length;
                for(let h = 0, hl = holes.length; h < hl; h++){
                    const ahole = holes[h];
                    sidewalls(ahole, layeroffset);
                    //, true
                    layeroffset += ahole.length;
                }
                scope.addGroup(start, verticesArray.length / 3 - start, 1);
            }
            function sidewalls(contour, layeroffset) {
                let i = contour.length;
                while(--i >= 0){
                    const j = i;
                    let k = i - 1;
                    if (k < 0) k = contour.length - 1;
                    //console.log('b', i,j, i-1, k,vertices.length);
                    for(let s = 0, sl = steps + bevelSegments * 2; s < sl; s++){
                        const slen1 = vlen * s;
                        const slen2 = vlen * (s + 1);
                        const a = layeroffset + j + slen1, b = layeroffset + k + slen1, c = layeroffset + k + slen2, d = layeroffset + j + slen2;
                        f4(a, b, c, d);
                    }
                }
            }
            function v(x, y, z) {
                placeholder.push(x);
                placeholder.push(y);
                placeholder.push(z);
            }
            function f3(a, b, c) {
                addVertex(a);
                addVertex(b);
                addVertex(c);
                const nextIndex = verticesArray.length / 3;
                const uvs = uvgen.generateTopUV(scope, verticesArray, nextIndex - 3, nextIndex - 2, nextIndex - 1);
                addUV(uvs[0]);
                addUV(uvs[1]);
                addUV(uvs[2]);
            }
            function f4(a, b, c, d) {
                addVertex(a);
                addVertex(b);
                addVertex(d);
                addVertex(b);
                addVertex(c);
                addVertex(d);
                const nextIndex = verticesArray.length / 3;
                const uvs = uvgen.generateSideWallUV(scope, verticesArray, nextIndex - 6, nextIndex - 3, nextIndex - 2, nextIndex - 1);
                addUV(uvs[0]);
                addUV(uvs[1]);
                addUV(uvs[3]);
                addUV(uvs[1]);
                addUV(uvs[2]);
                addUV(uvs[3]);
            }
            function addVertex(index) {
                verticesArray.push(placeholder[index * 3 + 0]);
                verticesArray.push(placeholder[index * 3 + 1]);
                verticesArray.push(placeholder[index * 3 + 2]);
            }
            function addUV(vector2) {
                uvArray.push(vector2.x);
                uvArray.push(vector2.y);
            }
        }
    }
    copy(source) {
        super.copy(source);
        this.parameters = Object.assign({}, source.parameters);
        return this;
    }
    toJSON() {
        const data = super.toJSON();
        const shapes = this.parameters.shapes;
        const options = this.parameters.options;
        return toJSON$1(shapes, options, data);
    }
    static fromJSON(data, shapes) {
        const geometryShapes = [];
        for(let j = 0, jl = data.shapes.length; j < jl; j++){
            const shape = shapes[data.shapes[j]];
            geometryShapes.push(shape);
        }
        const extrudePath = data.options.extrudePath;
        if (extrudePath !== undefined) data.options.extrudePath = new Curves[extrudePath.type]().fromJSON(extrudePath);
        return new ExtrudeGeometry(geometryShapes, data.options);
    }
}
const WorldUVGenerator = {
    generateTopUV: function(geometry, vertices, indexA, indexB, indexC) {
        const a_x = vertices[indexA * 3];
        const a_y = vertices[indexA * 3 + 1];
        const b_x = vertices[indexB * 3];
        const b_y = vertices[indexB * 3 + 1];
        const c_x = vertices[indexC * 3];
        const c_y = vertices[indexC * 3 + 1];
        return [
            new Vector2(a_x, a_y),
            new Vector2(b_x, b_y),
            new Vector2(c_x, c_y)
        ];
    },
    generateSideWallUV: function(geometry, vertices, indexA, indexB, indexC, indexD) {
        const a_x = vertices[indexA * 3];
        const a_y = vertices[indexA * 3 + 1];
        const a_z = vertices[indexA * 3 + 2];
        const b_x = vertices[indexB * 3];
        const b_y = vertices[indexB * 3 + 1];
        const b_z = vertices[indexB * 3 + 2];
        const c_x = vertices[indexC * 3];
        const c_y = vertices[indexC * 3 + 1];
        const c_z = vertices[indexC * 3 + 2];
        const d_x = vertices[indexD * 3];
        const d_y = vertices[indexD * 3 + 1];
        const d_z = vertices[indexD * 3 + 2];
        if (Math.abs(a_y - b_y) < Math.abs(a_x - b_x)) return [
            new Vector2(a_x, 1 - a_z),
            new Vector2(b_x, 1 - b_z),
            new Vector2(c_x, 1 - c_z),
            new Vector2(d_x, 1 - d_z)
        ];
        else return [
            new Vector2(a_y, 1 - a_z),
            new Vector2(b_y, 1 - b_z),
            new Vector2(c_y, 1 - c_z),
            new Vector2(d_y, 1 - d_z)
        ];
    }
};
function toJSON$1(shapes, options, data) {
    data.shapes = [];
    if (Array.isArray(shapes)) for(let i = 0, l = shapes.length; i < l; i++){
        const shape = shapes[i];
        data.shapes.push(shape.uuid);
    }
    else data.shapes.push(shapes.uuid);
    data.options = Object.assign({}, options);
    if (options.extrudePath !== undefined) data.options.extrudePath = options.extrudePath.toJSON();
    return data;
}
class IcosahedronGeometry extends PolyhedronGeometry {
    constructor(radius = 1, detail = 0){
        const t = (1 + Math.sqrt(5)) / 2;
        const vertices = [
            -1,
            t,
            0,
            1,
            t,
            0,
            -1,
            -t,
            0,
            1,
            -t,
            0,
            0,
            -1,
            t,
            0,
            1,
            t,
            0,
            -1,
            -t,
            0,
            1,
            -t,
            t,
            0,
            -1,
            t,
            0,
            1,
            -t,
            0,
            -1,
            -t,
            0,
            1
        ];
        const indices = [
            0,
            11,
            5,
            0,
            5,
            1,
            0,
            1,
            7,
            0,
            7,
            10,
            0,
            10,
            11,
            1,
            5,
            9,
            5,
            11,
            4,
            11,
            10,
            2,
            10,
            7,
            6,
            7,
            1,
            8,
            3,
            9,
            4,
            3,
            4,
            2,
            3,
            2,
            6,
            3,
            6,
            8,
            3,
            8,
            9,
            4,
            9,
            5,
            2,
            4,
            11,
            6,
            2,
            10,
            8,
            6,
            7,
            9,
            8,
            1
        ];
        super(vertices, indices, radius, detail);
        this.type = "IcosahedronGeometry";
        this.parameters = {
            radius: radius,
            detail: detail
        };
    }
    static fromJSON(data) {
        return new IcosahedronGeometry(data.radius, data.detail);
    }
}
class OctahedronGeometry extends PolyhedronGeometry {
    constructor(radius = 1, detail = 0){
        const vertices = [
            1,
            0,
            0,
            -1,
            0,
            0,
            0,
            1,
            0,
            0,
            -1,
            0,
            0,
            0,
            1,
            0,
            0,
            -1
        ];
        const indices = [
            0,
            2,
            4,
            0,
            4,
            3,
            0,
            3,
            5,
            0,
            5,
            2,
            1,
            2,
            5,
            1,
            5,
            3,
            1,
            3,
            4,
            1,
            4,
            2
        ];
        super(vertices, indices, radius, detail);
        this.type = "OctahedronGeometry";
        this.parameters = {
            radius: radius,
            detail: detail
        };
    }
    static fromJSON(data) {
        return new OctahedronGeometry(data.radius, data.detail);
    }
}
class RingGeometry extends BufferGeometry {
    constructor(innerRadius = 0.5, outerRadius = 1, thetaSegments = 32, phiSegments = 1, thetaStart = 0, thetaLength = Math.PI * 2){
        super();
        this.type = "RingGeometry";
        this.parameters = {
            innerRadius: innerRadius,
            outerRadius: outerRadius,
            thetaSegments: thetaSegments,
            phiSegments: phiSegments,
            thetaStart: thetaStart,
            thetaLength: thetaLength
        };
        thetaSegments = Math.max(3, thetaSegments);
        phiSegments = Math.max(1, phiSegments);
        // buffers
        const indices = [];
        const vertices = [];
        const normals = [];
        const uvs = [];
        // some helper variables
        let radius = innerRadius;
        const radiusStep = (outerRadius - innerRadius) / phiSegments;
        const vertex = new Vector3();
        const uv = new Vector2();
        // generate vertices, normals and uvs
        for(let j = 0; j <= phiSegments; j++){
            for(let i = 0; i <= thetaSegments; i++){
                // values are generate from the inside of the ring to the outside
                const segment = thetaStart + i / thetaSegments * thetaLength;
                // vertex
                vertex.x = radius * Math.cos(segment);
                vertex.y = radius * Math.sin(segment);
                vertices.push(vertex.x, vertex.y, vertex.z);
                // normal
                normals.push(0, 0, 1);
                // uv
                uv.x = (vertex.x / outerRadius + 1) / 2;
                uv.y = (vertex.y / outerRadius + 1) / 2;
                uvs.push(uv.x, uv.y);
            }
            // increase the radius for next row of vertices
            radius += radiusStep;
        }
        // indices
        for(let j = 0; j < phiSegments; j++){
            const thetaSegmentLevel = j * (thetaSegments + 1);
            for(let i = 0; i < thetaSegments; i++){
                const segment = i + thetaSegmentLevel;
                const a = segment;
                const b = segment + thetaSegments + 1;
                const c = segment + thetaSegments + 2;
                const d = segment + 1;
                // faces
                indices.push(a, b, d);
                indices.push(b, c, d);
            }
        }
        // build geometry
        this.setIndex(indices);
        this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
        this.setAttribute("normal", new Float32BufferAttribute(normals, 3));
        this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
    }
    copy(source) {
        super.copy(source);
        this.parameters = Object.assign({}, source.parameters);
        return this;
    }
    static fromJSON(data) {
        return new RingGeometry(data.innerRadius, data.outerRadius, data.thetaSegments, data.phiSegments, data.thetaStart, data.thetaLength);
    }
}
class ShapeGeometry extends BufferGeometry {
    constructor(shapes = new Shape([
        new Vector2(0, 0.5),
        new Vector2(-0.5, -0.5),
        new Vector2(0.5, -0.5)
    ]), curveSegments = 12){
        super();
        this.type = "ShapeGeometry";
        this.parameters = {
            shapes: shapes,
            curveSegments: curveSegments
        };
        // buffers
        const indices = [];
        const vertices = [];
        const normals = [];
        const uvs = [];
        // helper variables
        let groupStart = 0;
        let groupCount = 0;
        // allow single and array values for "shapes" parameter
        if (Array.isArray(shapes) === false) addShape(shapes);
        else for(let i = 0; i < shapes.length; i++){
            addShape(shapes[i]);
            this.addGroup(groupStart, groupCount, i); // enables MultiMaterial support
            groupStart += groupCount;
            groupCount = 0;
        }
        // build geometry
        this.setIndex(indices);
        this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
        this.setAttribute("normal", new Float32BufferAttribute(normals, 3));
        this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
        // helper functions
        function addShape(shape) {
            const indexOffset = vertices.length / 3;
            const points = shape.extractPoints(curveSegments);
            let shapeVertices = points.shape;
            const shapeHoles = points.holes;
            // check direction of vertices
            if (ShapeUtils.isClockWise(shapeVertices) === false) shapeVertices = shapeVertices.reverse();
            for(let i = 0, l = shapeHoles.length; i < l; i++){
                const shapeHole = shapeHoles[i];
                if (ShapeUtils.isClockWise(shapeHole) === true) shapeHoles[i] = shapeHole.reverse();
            }
            const faces = ShapeUtils.triangulateShape(shapeVertices, shapeHoles);
            // join vertices of inner and outer paths to a single array
            for(let i = 0, l = shapeHoles.length; i < l; i++){
                const shapeHole = shapeHoles[i];
                shapeVertices = shapeVertices.concat(shapeHole);
            }
            // vertices, normals, uvs
            for(let i = 0, l = shapeVertices.length; i < l; i++){
                const vertex = shapeVertices[i];
                vertices.push(vertex.x, vertex.y, 0);
                normals.push(0, 0, 1);
                uvs.push(vertex.x, vertex.y); // world uvs
            }
            // indices
            for(let i = 0, l = faces.length; i < l; i++){
                const face = faces[i];
                const a = face[0] + indexOffset;
                const b = face[1] + indexOffset;
                const c = face[2] + indexOffset;
                indices.push(a, b, c);
                groupCount += 3;
            }
        }
    }
    copy(source) {
        super.copy(source);
        this.parameters = Object.assign({}, source.parameters);
        return this;
    }
    toJSON() {
        const data = super.toJSON();
        const shapes = this.parameters.shapes;
        return toJSON(shapes, data);
    }
    static fromJSON(data, shapes) {
        const geometryShapes = [];
        for(let j = 0, jl = data.shapes.length; j < jl; j++){
            const shape = shapes[data.shapes[j]];
            geometryShapes.push(shape);
        }
        return new ShapeGeometry(geometryShapes, data.curveSegments);
    }
}
function toJSON(shapes, data) {
    data.shapes = [];
    if (Array.isArray(shapes)) for(let i = 0, l = shapes.length; i < l; i++){
        const shape = shapes[i];
        data.shapes.push(shape.uuid);
    }
    else data.shapes.push(shapes.uuid);
    return data;
}
class SphereGeometry extends BufferGeometry {
    constructor(radius = 1, widthSegments = 32, heightSegments = 16, phiStart = 0, phiLength = Math.PI * 2, thetaStart = 0, thetaLength = Math.PI){
        super();
        this.type = "SphereGeometry";
        this.parameters = {
            radius: radius,
            widthSegments: widthSegments,
            heightSegments: heightSegments,
            phiStart: phiStart,
            phiLength: phiLength,
            thetaStart: thetaStart,
            thetaLength: thetaLength
        };
        widthSegments = Math.max(3, Math.floor(widthSegments));
        heightSegments = Math.max(2, Math.floor(heightSegments));
        const thetaEnd = Math.min(thetaStart + thetaLength, Math.PI);
        let index = 0;
        const grid = [];
        const vertex = new Vector3();
        const normal = new Vector3();
        // buffers
        const indices = [];
        const vertices = [];
        const normals = [];
        const uvs = [];
        // generate vertices, normals and uvs
        for(let iy = 0; iy <= heightSegments; iy++){
            const verticesRow = [];
            const v = iy / heightSegments;
            // special case for the poles
            let uOffset = 0;
            if (iy === 0 && thetaStart === 0) uOffset = 0.5 / widthSegments;
            else if (iy === heightSegments && thetaEnd === Math.PI) uOffset = -0.5 / widthSegments;
            for(let ix = 0; ix <= widthSegments; ix++){
                const u = ix / widthSegments;
                // vertex
                vertex.x = -radius * Math.cos(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength);
                vertex.y = radius * Math.cos(thetaStart + v * thetaLength);
                vertex.z = radius * Math.sin(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength);
                vertices.push(vertex.x, vertex.y, vertex.z);
                // normal
                normal.copy(vertex).normalize();
                normals.push(normal.x, normal.y, normal.z);
                // uv
                uvs.push(u + uOffset, 1 - v);
                verticesRow.push(index++);
            }
            grid.push(verticesRow);
        }
        // indices
        for(let iy = 0; iy < heightSegments; iy++)for(let ix = 0; ix < widthSegments; ix++){
            const a = grid[iy][ix + 1];
            const b = grid[iy][ix];
            const c = grid[iy + 1][ix];
            const d = grid[iy + 1][ix + 1];
            if (iy !== 0 || thetaStart > 0) indices.push(a, b, d);
            if (iy !== heightSegments - 1 || thetaEnd < Math.PI) indices.push(b, c, d);
        }
        // build geometry
        this.setIndex(indices);
        this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
        this.setAttribute("normal", new Float32BufferAttribute(normals, 3));
        this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
    }
    copy(source) {
        super.copy(source);
        this.parameters = Object.assign({}, source.parameters);
        return this;
    }
    static fromJSON(data) {
        return new SphereGeometry(data.radius, data.widthSegments, data.heightSegments, data.phiStart, data.phiLength, data.thetaStart, data.thetaLength);
    }
}
class TetrahedronGeometry extends PolyhedronGeometry {
    constructor(radius = 1, detail = 0){
        const vertices = [
            1,
            1,
            1,
            -1,
            -1,
            1,
            -1,
            1,
            -1,
            1,
            -1,
            -1
        ];
        const indices = [
            2,
            1,
            0,
            0,
            3,
            2,
            1,
            3,
            0,
            2,
            3,
            1
        ];
        super(vertices, indices, radius, detail);
        this.type = "TetrahedronGeometry";
        this.parameters = {
            radius: radius,
            detail: detail
        };
    }
    static fromJSON(data) {
        return new TetrahedronGeometry(data.radius, data.detail);
    }
}
class TorusGeometry extends BufferGeometry {
    constructor(radius = 1, tube = 0.4, radialSegments = 12, tubularSegments = 48, arc = Math.PI * 2){
        super();
        this.type = "TorusGeometry";
        this.parameters = {
            radius: radius,
            tube: tube,
            radialSegments: radialSegments,
            tubularSegments: tubularSegments,
            arc: arc
        };
        radialSegments = Math.floor(radialSegments);
        tubularSegments = Math.floor(tubularSegments);
        // buffers
        const indices = [];
        const vertices = [];
        const normals = [];
        const uvs = [];
        // helper variables
        const center = new Vector3();
        const vertex = new Vector3();
        const normal = new Vector3();
        // generate vertices, normals and uvs
        for(let j = 0; j <= radialSegments; j++)for(let i = 0; i <= tubularSegments; i++){
            const u = i / tubularSegments * arc;
            const v = j / radialSegments * Math.PI * 2;
            // vertex
            vertex.x = (radius + tube * Math.cos(v)) * Math.cos(u);
            vertex.y = (radius + tube * Math.cos(v)) * Math.sin(u);
            vertex.z = tube * Math.sin(v);
            vertices.push(vertex.x, vertex.y, vertex.z);
            // normal
            center.x = radius * Math.cos(u);
            center.y = radius * Math.sin(u);
            normal.subVectors(vertex, center).normalize();
            normals.push(normal.x, normal.y, normal.z);
            // uv
            uvs.push(i / tubularSegments);
            uvs.push(j / radialSegments);
        }
        // generate indices
        for(let j = 1; j <= radialSegments; j++)for(let i = 1; i <= tubularSegments; i++){
            // indices
            const a = (tubularSegments + 1) * j + i - 1;
            const b = (tubularSegments + 1) * (j - 1) + i - 1;
            const c = (tubularSegments + 1) * (j - 1) + i;
            const d = (tubularSegments + 1) * j + i;
            // faces
            indices.push(a, b, d);
            indices.push(b, c, d);
        }
        // build geometry
        this.setIndex(indices);
        this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
        this.setAttribute("normal", new Float32BufferAttribute(normals, 3));
        this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
    }
    copy(source) {
        super.copy(source);
        this.parameters = Object.assign({}, source.parameters);
        return this;
    }
    static fromJSON(data) {
        return new TorusGeometry(data.radius, data.tube, data.radialSegments, data.tubularSegments, data.arc);
    }
}
class TorusKnotGeometry extends BufferGeometry {
    constructor(radius = 1, tube = 0.4, tubularSegments = 64, radialSegments = 8, p = 2, q = 3){
        super();
        this.type = "TorusKnotGeometry";
        this.parameters = {
            radius: radius,
            tube: tube,
            tubularSegments: tubularSegments,
            radialSegments: radialSegments,
            p: p,
            q: q
        };
        tubularSegments = Math.floor(tubularSegments);
        radialSegments = Math.floor(radialSegments);
        // buffers
        const indices = [];
        const vertices = [];
        const normals = [];
        const uvs = [];
        // helper variables
        const vertex = new Vector3();
        const normal = new Vector3();
        const P1 = new Vector3();
        const P2 = new Vector3();
        const B = new Vector3();
        const T = new Vector3();
        const N = new Vector3();
        // generate vertices, normals and uvs
        for(let i = 0; i <= tubularSegments; ++i){
            // the radian "u" is used to calculate the position on the torus curve of the current tubular segment
            const u = i / tubularSegments * p * Math.PI * 2;
            // now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.
            // these points are used to create a special "coordinate space", which is necessary to calculate the correct vertex positions
            calculatePositionOnCurve(u, p, q, radius, P1);
            calculatePositionOnCurve(u + 0.01, p, q, radius, P2);
            // calculate orthonormal basis
            T.subVectors(P2, P1);
            N.addVectors(P2, P1);
            B.crossVectors(T, N);
            N.crossVectors(B, T);
            // normalize B, N. T can be ignored, we don't use it
            B.normalize();
            N.normalize();
            for(let j = 0; j <= radialSegments; ++j){
                // now calculate the vertices. they are nothing more than an extrusion of the torus curve.
                // because we extrude a shape in the xy-plane, there is no need to calculate a z-value.
                const v = j / radialSegments * Math.PI * 2;
                const cx = -tube * Math.cos(v);
                const cy = tube * Math.sin(v);
                // now calculate the final vertex position.
                // first we orient the extrusion with our basis vectors, then we add it to the current position on the curve
                vertex.x = P1.x + (cx * N.x + cy * B.x);
                vertex.y = P1.y + (cx * N.y + cy * B.y);
                vertex.z = P1.z + (cx * N.z + cy * B.z);
                vertices.push(vertex.x, vertex.y, vertex.z);
                // normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)
                normal.subVectors(vertex, P1).normalize();
                normals.push(normal.x, normal.y, normal.z);
                // uv
                uvs.push(i / tubularSegments);
                uvs.push(j / radialSegments);
            }
        }
        // generate indices
        for(let j = 1; j <= tubularSegments; j++)for(let i = 1; i <= radialSegments; i++){
            // indices
            const a = (radialSegments + 1) * (j - 1) + (i - 1);
            const b = (radialSegments + 1) * j + (i - 1);
            const c = (radialSegments + 1) * j + i;
            const d = (radialSegments + 1) * (j - 1) + i;
            // faces
            indices.push(a, b, d);
            indices.push(b, c, d);
        }
        // build geometry
        this.setIndex(indices);
        this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
        this.setAttribute("normal", new Float32BufferAttribute(normals, 3));
        this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
        // this function calculates the current position on the torus curve
        function calculatePositionOnCurve(u, p, q, radius, position) {
            const cu = Math.cos(u);
            const su = Math.sin(u);
            const quOverP = q / p * u;
            const cs = Math.cos(quOverP);
            position.x = radius * (2 + cs) * 0.5 * cu;
            position.y = radius * (2 + cs) * su * 0.5;
            position.z = radius * Math.sin(quOverP) * 0.5;
        }
    }
    copy(source) {
        super.copy(source);
        this.parameters = Object.assign({}, source.parameters);
        return this;
    }
    static fromJSON(data) {
        return new TorusKnotGeometry(data.radius, data.tube, data.tubularSegments, data.radialSegments, data.p, data.q);
    }
}
class TubeGeometry extends BufferGeometry {
    constructor(path = new QuadraticBezierCurve3(new Vector3(-1, -1, 0), new Vector3(-1, 1, 0), new Vector3(1, 1, 0)), tubularSegments = 64, radius = 1, radialSegments = 8, closed = false){
        super();
        this.type = "TubeGeometry";
        this.parameters = {
            path: path,
            tubularSegments: tubularSegments,
            radius: radius,
            radialSegments: radialSegments,
            closed: closed
        };
        const frames = path.computeFrenetFrames(tubularSegments, closed);
        // expose internals
        this.tangents = frames.tangents;
        this.normals = frames.normals;
        this.binormals = frames.binormals;
        // helper variables
        const vertex = new Vector3();
        const normal = new Vector3();
        const uv = new Vector2();
        let P = new Vector3();
        // buffer
        const vertices = [];
        const normals = [];
        const uvs = [];
        const indices = [];
        // create buffer data
        generateBufferData();
        // build geometry
        this.setIndex(indices);
        this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
        this.setAttribute("normal", new Float32BufferAttribute(normals, 3));
        this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
        // functions
        function generateBufferData() {
            for(let i = 0; i < tubularSegments; i++)generateSegment(i);
            // if the geometry is not closed, generate the last row of vertices and normals
            // at the regular position on the given path
            //
            // if the geometry is closed, duplicate the first row of vertices and normals (uvs will differ)
            generateSegment(closed === false ? tubularSegments : 0);
            // uvs are generated in a separate function.
            // this makes it easy compute correct values for closed geometries
            generateUVs();
            // finally create faces
            generateIndices();
        }
        function generateSegment(i) {
            // we use getPointAt to sample evenly distributed points from the given path
            P = path.getPointAt(i / tubularSegments, P);
            // retrieve corresponding normal and binormal
            const N = frames.normals[i];
            const B = frames.binormals[i];
            // generate normals and vertices for the current segment
            for(let j = 0; j <= radialSegments; j++){
                const v = j / radialSegments * Math.PI * 2;
                const sin = Math.sin(v);
                const cos = -Math.cos(v);
                // normal
                normal.x = cos * N.x + sin * B.x;
                normal.y = cos * N.y + sin * B.y;
                normal.z = cos * N.z + sin * B.z;
                normal.normalize();
                normals.push(normal.x, normal.y, normal.z);
                // vertex
                vertex.x = P.x + radius * normal.x;
                vertex.y = P.y + radius * normal.y;
                vertex.z = P.z + radius * normal.z;
                vertices.push(vertex.x, vertex.y, vertex.z);
            }
        }
        function generateIndices() {
            for(let j = 1; j <= tubularSegments; j++)for(let i = 1; i <= radialSegments; i++){
                const a = (radialSegments + 1) * (j - 1) + (i - 1);
                const b = (radialSegments + 1) * j + (i - 1);
                const c = (radialSegments + 1) * j + i;
                const d = (radialSegments + 1) * (j - 1) + i;
                // faces
                indices.push(a, b, d);
                indices.push(b, c, d);
            }
        }
        function generateUVs() {
            for(let i = 0; i <= tubularSegments; i++)for(let j = 0; j <= radialSegments; j++){
                uv.x = i / tubularSegments;
                uv.y = j / radialSegments;
                uvs.push(uv.x, uv.y);
            }
        }
    }
    copy(source) {
        super.copy(source);
        this.parameters = Object.assign({}, source.parameters);
        return this;
    }
    toJSON() {
        const data = super.toJSON();
        data.path = this.parameters.path.toJSON();
        return data;
    }
    static fromJSON(data) {
        // This only works for built-in curves (e.g. CatmullRomCurve3).
        // User defined curves or instances of CurvePath will not be deserialized.
        return new TubeGeometry(new Curves[data.path.type]().fromJSON(data.path), data.tubularSegments, data.radius, data.radialSegments, data.closed);
    }
}
class WireframeGeometry extends BufferGeometry {
    constructor(geometry = null){
        super();
        this.type = "WireframeGeometry";
        this.parameters = {
            geometry: geometry
        };
        if (geometry !== null) {
            // buffer
            const vertices = [];
            const edges = new Set();
            // helper variables
            const start = new Vector3();
            const end = new Vector3();
            if (geometry.index !== null) {
                // indexed BufferGeometry
                const position = geometry.attributes.position;
                const indices = geometry.index;
                let groups = geometry.groups;
                if (groups.length === 0) groups = [
                    {
                        start: 0,
                        count: indices.count,
                        materialIndex: 0
                    }
                ];
                // create a data structure that contains all edges without duplicates
                for(let o = 0, ol = groups.length; o < ol; ++o){
                    const group = groups[o];
                    const groupStart = group.start;
                    const groupCount = group.count;
                    for(let i = groupStart, l = groupStart + groupCount; i < l; i += 3)for(let j = 0; j < 3; j++){
                        const index1 = indices.getX(i + j);
                        const index2 = indices.getX(i + (j + 1) % 3);
                        start.fromBufferAttribute(position, index1);
                        end.fromBufferAttribute(position, index2);
                        if (isUniqueEdge(start, end, edges) === true) {
                            vertices.push(start.x, start.y, start.z);
                            vertices.push(end.x, end.y, end.z);
                        }
                    }
                }
            } else {
                // non-indexed BufferGeometry
                const position = geometry.attributes.position;
                for(let i = 0, l = position.count / 3; i < l; i++)for(let j = 0; j < 3; j++){
                    // three edges per triangle, an edge is represented as (index1, index2)
                    // e.g. the first triangle has the following edges: (0,1),(1,2),(2,0)
                    const index1 = 3 * i + j;
                    const index2 = 3 * i + (j + 1) % 3;
                    start.fromBufferAttribute(position, index1);
                    end.fromBufferAttribute(position, index2);
                    if (isUniqueEdge(start, end, edges) === true) {
                        vertices.push(start.x, start.y, start.z);
                        vertices.push(end.x, end.y, end.z);
                    }
                }
            }
            // build geometry
            this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
        }
    }
    copy(source) {
        super.copy(source);
        this.parameters = Object.assign({}, source.parameters);
        return this;
    }
}
function isUniqueEdge(start, end, edges) {
    const hash1 = `${start.x},${start.y},${start.z}-${end.x},${end.y},${end.z}`;
    const hash2 = `${end.x},${end.y},${end.z}-${start.x},${start.y},${start.z}`; // coincident edge
    if (edges.has(hash1) === true || edges.has(hash2) === true) return false;
    else {
        edges.add(hash1);
        edges.add(hash2);
        return true;
    }
}
var Geometries = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    BoxGeometry: BoxGeometry,
    CapsuleGeometry: CapsuleGeometry,
    CircleGeometry: CircleGeometry,
    ConeGeometry: ConeGeometry,
    CylinderGeometry: CylinderGeometry,
    DodecahedronGeometry: DodecahedronGeometry,
    EdgesGeometry: EdgesGeometry,
    ExtrudeGeometry: ExtrudeGeometry,
    IcosahedronGeometry: IcosahedronGeometry,
    LatheGeometry: LatheGeometry,
    OctahedronGeometry: OctahedronGeometry,
    PlaneGeometry: PlaneGeometry,
    PolyhedronGeometry: PolyhedronGeometry,
    RingGeometry: RingGeometry,
    ShapeGeometry: ShapeGeometry,
    SphereGeometry: SphereGeometry,
    TetrahedronGeometry: TetrahedronGeometry,
    TorusGeometry: TorusGeometry,
    TorusKnotGeometry: TorusKnotGeometry,
    TubeGeometry: TubeGeometry,
    WireframeGeometry: WireframeGeometry
});
class ShadowMaterial extends Material {
    constructor(parameters){
        super();
        this.isShadowMaterial = true;
        this.type = "ShadowMaterial";
        this.color = new Color(0x000000);
        this.transparent = true;
        this.fog = true;
        this.setValues(parameters);
    }
    copy(source) {
        super.copy(source);
        this.color.copy(source.color);
        this.fog = source.fog;
        return this;
    }
}
class RawShaderMaterial extends ShaderMaterial {
    constructor(parameters){
        super(parameters);
        this.isRawShaderMaterial = true;
        this.type = "RawShaderMaterial";
    }
}
class MeshStandardMaterial extends Material {
    constructor(parameters){
        super();
        this.isMeshStandardMaterial = true;
        this.defines = {
            "STANDARD": ""
        };
        this.type = "MeshStandardMaterial";
        this.color = new Color(0xffffff); // diffuse
        this.roughness = 1.0;
        this.metalness = 0.0;
        this.map = null;
        this.lightMap = null;
        this.lightMapIntensity = 1.0;
        this.aoMap = null;
        this.aoMapIntensity = 1.0;
        this.emissive = new Color(0x000000);
        this.emissiveIntensity = 1.0;
        this.emissiveMap = null;
        this.bumpMap = null;
        this.bumpScale = 1;
        this.normalMap = null;
        this.normalMapType = TangentSpaceNormalMap;
        this.normalScale = new Vector2(1, 1);
        this.displacementMap = null;
        this.displacementScale = 1;
        this.displacementBias = 0;
        this.roughnessMap = null;
        this.metalnessMap = null;
        this.alphaMap = null;
        this.envMap = null;
        this.envMapIntensity = 1.0;
        this.wireframe = false;
        this.wireframeLinewidth = 1;
        this.wireframeLinecap = "round";
        this.wireframeLinejoin = "round";
        this.flatShading = false;
        this.fog = true;
        this.setValues(parameters);
    }
    copy(source) {
        super.copy(source);
        this.defines = {
            "STANDARD": ""
        };
        this.color.copy(source.color);
        this.roughness = source.roughness;
        this.metalness = source.metalness;
        this.map = source.map;
        this.lightMap = source.lightMap;
        this.lightMapIntensity = source.lightMapIntensity;
        this.aoMap = source.aoMap;
        this.aoMapIntensity = source.aoMapIntensity;
        this.emissive.copy(source.emissive);
        this.emissiveMap = source.emissiveMap;
        this.emissiveIntensity = source.emissiveIntensity;
        this.bumpMap = source.bumpMap;
        this.bumpScale = source.bumpScale;
        this.normalMap = source.normalMap;
        this.normalMapType = source.normalMapType;
        this.normalScale.copy(source.normalScale);
        this.displacementMap = source.displacementMap;
        this.displacementScale = source.displacementScale;
        this.displacementBias = source.displacementBias;
        this.roughnessMap = source.roughnessMap;
        this.metalnessMap = source.metalnessMap;
        this.alphaMap = source.alphaMap;
        this.envMap = source.envMap;
        this.envMapIntensity = source.envMapIntensity;
        this.wireframe = source.wireframe;
        this.wireframeLinewidth = source.wireframeLinewidth;
        this.wireframeLinecap = source.wireframeLinecap;
        this.wireframeLinejoin = source.wireframeLinejoin;
        this.flatShading = source.flatShading;
        this.fog = source.fog;
        return this;
    }
}
class MeshPhysicalMaterial extends MeshStandardMaterial {
    constructor(parameters){
        super();
        this.isMeshPhysicalMaterial = true;
        this.defines = {
            "STANDARD": "",
            "PHYSICAL": ""
        };
        this.type = "MeshPhysicalMaterial";
        this.anisotropyRotation = 0;
        this.anisotropyMap = null;
        this.clearcoatMap = null;
        this.clearcoatRoughness = 0.0;
        this.clearcoatRoughnessMap = null;
        this.clearcoatNormalScale = new Vector2(1, 1);
        this.clearcoatNormalMap = null;
        this.ior = 1.5;
        Object.defineProperty(this, "reflectivity", {
            get: function() {
                return clamp(2.5 * (this.ior - 1) / (this.ior + 1), 0, 1);
            },
            set: function(reflectivity) {
                this.ior = (1 + 0.4 * reflectivity) / (1 - 0.4 * reflectivity);
            }
        });
        this.iridescenceMap = null;
        this.iridescenceIOR = 1.3;
        this.iridescenceThicknessRange = [
            100,
            400
        ];
        this.iridescenceThicknessMap = null;
        this.sheenColor = new Color(0x000000);
        this.sheenColorMap = null;
        this.sheenRoughness = 1.0;
        this.sheenRoughnessMap = null;
        this.transmissionMap = null;
        this.thickness = 0;
        this.thicknessMap = null;
        this.attenuationDistance = Infinity;
        this.attenuationColor = new Color(1, 1, 1);
        this.specularIntensity = 1.0;
        this.specularIntensityMap = null;
        this.specularColor = new Color(1, 1, 1);
        this.specularColorMap = null;
        this._anisotropy = 0;
        this._clearcoat = 0;
        this._iridescence = 0;
        this._sheen = 0.0;
        this._transmission = 0;
        this.setValues(parameters);
    }
    get anisotropy() {
        return this._anisotropy;
    }
    set anisotropy(value) {
        if (this._anisotropy > 0 !== value > 0) this.version++;
        this._anisotropy = value;
    }
    get clearcoat() {
        return this._clearcoat;
    }
    set clearcoat(value) {
        if (this._clearcoat > 0 !== value > 0) this.version++;
        this._clearcoat = value;
    }
    get iridescence() {
        return this._iridescence;
    }
    set iridescence(value) {
        if (this._iridescence > 0 !== value > 0) this.version++;
        this._iridescence = value;
    }
    get sheen() {
        return this._sheen;
    }
    set sheen(value) {
        if (this._sheen > 0 !== value > 0) this.version++;
        this._sheen = value;
    }
    get transmission() {
        return this._transmission;
    }
    set transmission(value) {
        if (this._transmission > 0 !== value > 0) this.version++;
        this._transmission = value;
    }
    copy(source) {
        super.copy(source);
        this.defines = {
            "STANDARD": "",
            "PHYSICAL": ""
        };
        this.anisotropy = source.anisotropy;
        this.anisotropyRotation = source.anisotropyRotation;
        this.anisotropyMap = source.anisotropyMap;
        this.clearcoat = source.clearcoat;
        this.clearcoatMap = source.clearcoatMap;
        this.clearcoatRoughness = source.clearcoatRoughness;
        this.clearcoatRoughnessMap = source.clearcoatRoughnessMap;
        this.clearcoatNormalMap = source.clearcoatNormalMap;
        this.clearcoatNormalScale.copy(source.clearcoatNormalScale);
        this.ior = source.ior;
        this.iridescence = source.iridescence;
        this.iridescenceMap = source.iridescenceMap;
        this.iridescenceIOR = source.iridescenceIOR;
        this.iridescenceThicknessRange = [
            ...source.iridescenceThicknessRange
        ];
        this.iridescenceThicknessMap = source.iridescenceThicknessMap;
        this.sheen = source.sheen;
        this.sheenColor.copy(source.sheenColor);
        this.sheenColorMap = source.sheenColorMap;
        this.sheenRoughness = source.sheenRoughness;
        this.sheenRoughnessMap = source.sheenRoughnessMap;
        this.transmission = source.transmission;
        this.transmissionMap = source.transmissionMap;
        this.thickness = source.thickness;
        this.thicknessMap = source.thicknessMap;
        this.attenuationDistance = source.attenuationDistance;
        this.attenuationColor.copy(source.attenuationColor);
        this.specularIntensity = source.specularIntensity;
        this.specularIntensityMap = source.specularIntensityMap;
        this.specularColor.copy(source.specularColor);
        this.specularColorMap = source.specularColorMap;
        return this;
    }
}
class MeshPhongMaterial extends Material {
    constructor(parameters){
        super();
        this.isMeshPhongMaterial = true;
        this.type = "MeshPhongMaterial";
        this.color = new Color(0xffffff); // diffuse
        this.specular = new Color(0x111111);
        this.shininess = 30;
        this.map = null;
        this.lightMap = null;
        this.lightMapIntensity = 1.0;
        this.aoMap = null;
        this.aoMapIntensity = 1.0;
        this.emissive = new Color(0x000000);
        this.emissiveIntensity = 1.0;
        this.emissiveMap = null;
        this.bumpMap = null;
        this.bumpScale = 1;
        this.normalMap = null;
        this.normalMapType = TangentSpaceNormalMap;
        this.normalScale = new Vector2(1, 1);
        this.displacementMap = null;
        this.displacementScale = 1;
        this.displacementBias = 0;
        this.specularMap = null;
        this.alphaMap = null;
        this.envMap = null;
        this.combine = MultiplyOperation;
        this.reflectivity = 1;
        this.refractionRatio = 0.98;
        this.wireframe = false;
        this.wireframeLinewidth = 1;
        this.wireframeLinecap = "round";
        this.wireframeLinejoin = "round";
        this.flatShading = false;
        this.fog = true;
        this.setValues(parameters);
    }
    copy(source) {
        super.copy(source);
        this.color.copy(source.color);
        this.specular.copy(source.specular);
        this.shininess = source.shininess;
        this.map = source.map;
        this.lightMap = source.lightMap;
        this.lightMapIntensity = source.lightMapIntensity;
        this.aoMap = source.aoMap;
        this.aoMapIntensity = source.aoMapIntensity;
        this.emissive.copy(source.emissive);
        this.emissiveMap = source.emissiveMap;
        this.emissiveIntensity = source.emissiveIntensity;
        this.bumpMap = source.bumpMap;
        this.bumpScale = source.bumpScale;
        this.normalMap = source.normalMap;
        this.normalMapType = source.normalMapType;
        this.normalScale.copy(source.normalScale);
        this.displacementMap = source.displacementMap;
        this.displacementScale = source.displacementScale;
        this.displacementBias = source.displacementBias;
        this.specularMap = source.specularMap;
        this.alphaMap = source.alphaMap;
        this.envMap = source.envMap;
        this.combine = source.combine;
        this.reflectivity = source.reflectivity;
        this.refractionRatio = source.refractionRatio;
        this.wireframe = source.wireframe;
        this.wireframeLinewidth = source.wireframeLinewidth;
        this.wireframeLinecap = source.wireframeLinecap;
        this.wireframeLinejoin = source.wireframeLinejoin;
        this.flatShading = source.flatShading;
        this.fog = source.fog;
        return this;
    }
}
class MeshToonMaterial extends Material {
    constructor(parameters){
        super();
        this.isMeshToonMaterial = true;
        this.defines = {
            "TOON": ""
        };
        this.type = "MeshToonMaterial";
        this.color = new Color(0xffffff);
        this.map = null;
        this.gradientMap = null;
        this.lightMap = null;
        this.lightMapIntensity = 1.0;
        this.aoMap = null;
        this.aoMapIntensity = 1.0;
        this.emissive = new Color(0x000000);
        this.emissiveIntensity = 1.0;
        this.emissiveMap = null;
        this.bumpMap = null;
        this.bumpScale = 1;
        this.normalMap = null;
        this.normalMapType = TangentSpaceNormalMap;
        this.normalScale = new Vector2(1, 1);
        this.displacementMap = null;
        this.displacementScale = 1;
        this.displacementBias = 0;
        this.alphaMap = null;
        this.wireframe = false;
        this.wireframeLinewidth = 1;
        this.wireframeLinecap = "round";
        this.wireframeLinejoin = "round";
        this.fog = true;
        this.setValues(parameters);
    }
    copy(source) {
        super.copy(source);
        this.color.copy(source.color);
        this.map = source.map;
        this.gradientMap = source.gradientMap;
        this.lightMap = source.lightMap;
        this.lightMapIntensity = source.lightMapIntensity;
        this.aoMap = source.aoMap;
        this.aoMapIntensity = source.aoMapIntensity;
        this.emissive.copy(source.emissive);
        this.emissiveMap = source.emissiveMap;
        this.emissiveIntensity = source.emissiveIntensity;
        this.bumpMap = source.bumpMap;
        this.bumpScale = source.bumpScale;
        this.normalMap = source.normalMap;
        this.normalMapType = source.normalMapType;
        this.normalScale.copy(source.normalScale);
        this.displacementMap = source.displacementMap;
        this.displacementScale = source.displacementScale;
        this.displacementBias = source.displacementBias;
        this.alphaMap = source.alphaMap;
        this.wireframe = source.wireframe;
        this.wireframeLinewidth = source.wireframeLinewidth;
        this.wireframeLinecap = source.wireframeLinecap;
        this.wireframeLinejoin = source.wireframeLinejoin;
        this.fog = source.fog;
        return this;
    }
}
class MeshNormalMaterial extends Material {
    constructor(parameters){
        super();
        this.isMeshNormalMaterial = true;
        this.type = "MeshNormalMaterial";
        this.bumpMap = null;
        this.bumpScale = 1;
        this.normalMap = null;
        this.normalMapType = TangentSpaceNormalMap;
        this.normalScale = new Vector2(1, 1);
        this.displacementMap = null;
        this.displacementScale = 1;
        this.displacementBias = 0;
        this.wireframe = false;
        this.wireframeLinewidth = 1;
        this.flatShading = false;
        this.setValues(parameters);
    }
    copy(source) {
        super.copy(source);
        this.bumpMap = source.bumpMap;
        this.bumpScale = source.bumpScale;
        this.normalMap = source.normalMap;
        this.normalMapType = source.normalMapType;
        this.normalScale.copy(source.normalScale);
        this.displacementMap = source.displacementMap;
        this.displacementScale = source.displacementScale;
        this.displacementBias = source.displacementBias;
        this.wireframe = source.wireframe;
        this.wireframeLinewidth = source.wireframeLinewidth;
        this.flatShading = source.flatShading;
        return this;
    }
}
class MeshLambertMaterial extends Material {
    constructor(parameters){
        super();
        this.isMeshLambertMaterial = true;
        this.type = "MeshLambertMaterial";
        this.color = new Color(0xffffff); // diffuse
        this.map = null;
        this.lightMap = null;
        this.lightMapIntensity = 1.0;
        this.aoMap = null;
        this.aoMapIntensity = 1.0;
        this.emissive = new Color(0x000000);
        this.emissiveIntensity = 1.0;
        this.emissiveMap = null;
        this.bumpMap = null;
        this.bumpScale = 1;
        this.normalMap = null;
        this.normalMapType = TangentSpaceNormalMap;
        this.normalScale = new Vector2(1, 1);
        this.displacementMap = null;
        this.displacementScale = 1;
        this.displacementBias = 0;
        this.specularMap = null;
        this.alphaMap = null;
        this.envMap = null;
        this.combine = MultiplyOperation;
        this.reflectivity = 1;
        this.refractionRatio = 0.98;
        this.wireframe = false;
        this.wireframeLinewidth = 1;
        this.wireframeLinecap = "round";
        this.wireframeLinejoin = "round";
        this.flatShading = false;
        this.fog = true;
        this.setValues(parameters);
    }
    copy(source) {
        super.copy(source);
        this.color.copy(source.color);
        this.map = source.map;
        this.lightMap = source.lightMap;
        this.lightMapIntensity = source.lightMapIntensity;
        this.aoMap = source.aoMap;
        this.aoMapIntensity = source.aoMapIntensity;
        this.emissive.copy(source.emissive);
        this.emissiveMap = source.emissiveMap;
        this.emissiveIntensity = source.emissiveIntensity;
        this.bumpMap = source.bumpMap;
        this.bumpScale = source.bumpScale;
        this.normalMap = source.normalMap;
        this.normalMapType = source.normalMapType;
        this.normalScale.copy(source.normalScale);
        this.displacementMap = source.displacementMap;
        this.displacementScale = source.displacementScale;
        this.displacementBias = source.displacementBias;
        this.specularMap = source.specularMap;
        this.alphaMap = source.alphaMap;
        this.envMap = source.envMap;
        this.combine = source.combine;
        this.reflectivity = source.reflectivity;
        this.refractionRatio = source.refractionRatio;
        this.wireframe = source.wireframe;
        this.wireframeLinewidth = source.wireframeLinewidth;
        this.wireframeLinecap = source.wireframeLinecap;
        this.wireframeLinejoin = source.wireframeLinejoin;
        this.flatShading = source.flatShading;
        this.fog = source.fog;
        return this;
    }
}
class MeshMatcapMaterial extends Material {
    constructor(parameters){
        super();
        this.isMeshMatcapMaterial = true;
        this.defines = {
            "MATCAP": ""
        };
        this.type = "MeshMatcapMaterial";
        this.color = new Color(0xffffff); // diffuse
        this.matcap = null;
        this.map = null;
        this.bumpMap = null;
        this.bumpScale = 1;
        this.normalMap = null;
        this.normalMapType = TangentSpaceNormalMap;
        this.normalScale = new Vector2(1, 1);
        this.displacementMap = null;
        this.displacementScale = 1;
        this.displacementBias = 0;
        this.alphaMap = null;
        this.flatShading = false;
        this.fog = true;
        this.setValues(parameters);
    }
    copy(source) {
        super.copy(source);
        this.defines = {
            "MATCAP": ""
        };
        this.color.copy(source.color);
        this.matcap = source.matcap;
        this.map = source.map;
        this.bumpMap = source.bumpMap;
        this.bumpScale = source.bumpScale;
        this.normalMap = source.normalMap;
        this.normalMapType = source.normalMapType;
        this.normalScale.copy(source.normalScale);
        this.displacementMap = source.displacementMap;
        this.displacementScale = source.displacementScale;
        this.displacementBias = source.displacementBias;
        this.alphaMap = source.alphaMap;
        this.flatShading = source.flatShading;
        this.fog = source.fog;
        return this;
    }
}
class LineDashedMaterial extends LineBasicMaterial {
    constructor(parameters){
        super();
        this.isLineDashedMaterial = true;
        this.type = "LineDashedMaterial";
        this.scale = 1;
        this.dashSize = 3;
        this.gapSize = 1;
        this.setValues(parameters);
    }
    copy(source) {
        super.copy(source);
        this.scale = source.scale;
        this.dashSize = source.dashSize;
        this.gapSize = source.gapSize;
        return this;
    }
}
// same as Array.prototype.slice, but also works on typed arrays
function arraySlice(array, from, to) {
    if (isTypedArray(array)) // in ios9 array.subarray(from, undefined) will return empty array
    // but array.subarray(from) or array.subarray(from, len) is correct
    return new array.constructor(array.subarray(from, to !== undefined ? to : array.length));
    return array.slice(from, to);
}
// converts an array to a specific type
function convertArray(array, type, forceClone) {
    if (!array || // let 'undefined' and 'null' pass
    !forceClone && array.constructor === type) return array;
    if (typeof type.BYTES_PER_ELEMENT === "number") return new type(array); // create typed array
    return Array.prototype.slice.call(array); // create Array
}
function isTypedArray(object) {
    return ArrayBuffer.isView(object) && !(object instanceof DataView);
}
// returns an array by which times and values can be sorted
function getKeyframeOrder(times) {
    function compareTime(i, j) {
        return times[i] - times[j];
    }
    const n = times.length;
    const result = new Array(n);
    for(let i = 0; i !== n; ++i)result[i] = i;
    result.sort(compareTime);
    return result;
}
// uses the array previously returned by 'getKeyframeOrder' to sort data
function sortedArray(values, stride, order) {
    const nValues = values.length;
    const result = new values.constructor(nValues);
    for(let i = 0, dstOffset = 0; dstOffset !== nValues; ++i){
        const srcOffset = order[i] * stride;
        for(let j = 0; j !== stride; ++j)result[dstOffset++] = values[srcOffset + j];
    }
    return result;
}
// function for parsing AOS keyframe formats
function flattenJSON(jsonKeys, times, values, valuePropertyName) {
    let i = 1, key = jsonKeys[0];
    while(key !== undefined && key[valuePropertyName] === undefined)key = jsonKeys[i++];
    if (key === undefined) return; // no data
    let value = key[valuePropertyName];
    if (value === undefined) return; // no data
    if (Array.isArray(value)) do {
        value = key[valuePropertyName];
        if (value !== undefined) {
            times.push(key.time);
            values.push.apply(values, value); // push all elements
        }
        key = jsonKeys[i++];
    }while (key !== undefined);
    else if (value.toArray !== undefined) // ...assume THREE.Math-ish
    do {
        value = key[valuePropertyName];
        if (value !== undefined) {
            times.push(key.time);
            value.toArray(values, values.length);
        }
        key = jsonKeys[i++];
    }while (key !== undefined);
    else // otherwise push as-is
    do {
        value = key[valuePropertyName];
        if (value !== undefined) {
            times.push(key.time);
            values.push(value);
        }
        key = jsonKeys[i++];
    }while (key !== undefined);
}
function subclip(sourceClip, name, startFrame, endFrame, fps = 30) {
    const clip = sourceClip.clone();
    clip.name = name;
    const tracks = [];
    for(let i = 0; i < clip.tracks.length; ++i){
        const track = clip.tracks[i];
        const valueSize = track.getValueSize();
        const times = [];
        const values = [];
        for(let j = 0; j < track.times.length; ++j){
            const frame = track.times[j] * fps;
            if (frame < startFrame || frame >= endFrame) continue;
            times.push(track.times[j]);
            for(let k = 0; k < valueSize; ++k)values.push(track.values[j * valueSize + k]);
        }
        if (times.length === 0) continue;
        track.times = convertArray(times, track.times.constructor);
        track.values = convertArray(values, track.values.constructor);
        tracks.push(track);
    }
    clip.tracks = tracks;
    // find minimum .times value across all tracks in the trimmed clip
    let minStartTime = Infinity;
    for(let i = 0; i < clip.tracks.length; ++i)if (minStartTime > clip.tracks[i].times[0]) minStartTime = clip.tracks[i].times[0];
    // shift all tracks such that clip begins at t=0
    for(let i = 0; i < clip.tracks.length; ++i)clip.tracks[i].shift(-1 * minStartTime);
    clip.resetDuration();
    return clip;
}
function makeClipAdditive(targetClip, referenceFrame = 0, referenceClip = targetClip, fps = 30) {
    if (fps <= 0) fps = 30;
    const numTracks = referenceClip.tracks.length;
    const referenceTime = referenceFrame / fps;
    // Make each track's values relative to the values at the reference frame
    for(let i = 0; i < numTracks; ++i){
        const referenceTrack = referenceClip.tracks[i];
        const referenceTrackType = referenceTrack.ValueTypeName;
        // Skip this track if it's non-numeric
        if (referenceTrackType === "bool" || referenceTrackType === "string") continue;
        // Find the track in the target clip whose name and type matches the reference track
        const targetTrack = targetClip.tracks.find(function(track) {
            return track.name === referenceTrack.name && track.ValueTypeName === referenceTrackType;
        });
        if (targetTrack === undefined) continue;
        let referenceOffset = 0;
        const referenceValueSize = referenceTrack.getValueSize();
        if (referenceTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline) referenceOffset = referenceValueSize / 3;
        let targetOffset = 0;
        const targetValueSize = targetTrack.getValueSize();
        if (targetTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline) targetOffset = targetValueSize / 3;
        const lastIndex = referenceTrack.times.length - 1;
        let referenceValue;
        // Find the value to subtract out of the track
        if (referenceTime <= referenceTrack.times[0]) {
            // Reference frame is earlier than the first keyframe, so just use the first keyframe
            const startIndex = referenceOffset;
            const endIndex = referenceValueSize - referenceOffset;
            referenceValue = arraySlice(referenceTrack.values, startIndex, endIndex);
        } else if (referenceTime >= referenceTrack.times[lastIndex]) {
            // Reference frame is after the last keyframe, so just use the last keyframe
            const startIndex = lastIndex * referenceValueSize + referenceOffset;
            const endIndex = startIndex + referenceValueSize - referenceOffset;
            referenceValue = arraySlice(referenceTrack.values, startIndex, endIndex);
        } else {
            // Interpolate to the reference value
            const interpolant = referenceTrack.createInterpolant();
            const startIndex = referenceOffset;
            const endIndex = referenceValueSize - referenceOffset;
            interpolant.evaluate(referenceTime);
            referenceValue = arraySlice(interpolant.resultBuffer, startIndex, endIndex);
        }
        // Conjugate the quaternion
        if (referenceTrackType === "quaternion") {
            const referenceQuat = new Quaternion().fromArray(referenceValue).normalize().conjugate();
            referenceQuat.toArray(referenceValue);
        }
        // Subtract the reference value from all of the track values
        const numTimes = targetTrack.times.length;
        for(let j = 0; j < numTimes; ++j){
            const valueStart = j * targetValueSize + targetOffset;
            if (referenceTrackType === "quaternion") // Multiply the conjugate for quaternion track types
            Quaternion.multiplyQuaternionsFlat(targetTrack.values, valueStart, referenceValue, 0, targetTrack.values, valueStart);
            else {
                const valueEnd = targetValueSize - targetOffset * 2;
                // Subtract each value for all other numeric track types
                for(let k = 0; k < valueEnd; ++k)targetTrack.values[valueStart + k] -= referenceValue[k];
            }
        }
    }
    targetClip.blendMode = AdditiveAnimationBlendMode;
    return targetClip;
}
const AnimationUtils = {
    arraySlice: arraySlice,
    convertArray: convertArray,
    isTypedArray: isTypedArray,
    getKeyframeOrder: getKeyframeOrder,
    sortedArray: sortedArray,
    flattenJSON: flattenJSON,
    subclip: subclip,
    makeClipAdditive: makeClipAdditive
};
/**
 * Abstract base class of interpolants over parametric samples.
 *
 * The parameter domain is one dimensional, typically the time or a path
 * along a curve defined by the data.
 *
 * The sample values can have any dimensionality and derived classes may
 * apply special interpretations to the data.
 *
 * This class provides the interval seek in a Template Method, deferring
 * the actual interpolation to derived classes.
 *
 * Time complexity is O(1) for linear access crossing at most two points
 * and O(log N) for random access, where N is the number of positions.
 *
 * References:
 *
 * 		http://www.oodesign.com/template-method-pattern.html
 *
 */ class Interpolant {
    constructor(parameterPositions, sampleValues, sampleSize, resultBuffer){
        this.parameterPositions = parameterPositions;
        this._cachedIndex = 0;
        this.resultBuffer = resultBuffer !== undefined ? resultBuffer : new sampleValues.constructor(sampleSize);
        this.sampleValues = sampleValues;
        this.valueSize = sampleSize;
        this.settings = null;
        this.DefaultSettings_ = {};
    }
    evaluate(t) {
        const pp = this.parameterPositions;
        let i1 = this._cachedIndex, t1 = pp[i1], t0 = pp[i1 - 1];
        validate_interval: {
            seek: {
                let right;
                linear_scan: {
                    //- See http://jsperf.com/comparison-to-undefined/3
                    //- slower code:
                    //-
                    //- 				if ( t >= t1 || t1 === undefined ) {
                    forward_scan: if (!(t < t1)) {
                        for(let giveUpAt = i1 + 2;;){
                            if (t1 === undefined) {
                                if (t < t0) break forward_scan;
                                // after end
                                i1 = pp.length;
                                this._cachedIndex = i1;
                                return this.copySampleValue_(i1 - 1);
                            }
                            if (i1 === giveUpAt) break; // this loop
                            t0 = t1;
                            t1 = pp[++i1];
                            if (t < t1) break seek;
                        }
                        // prepare binary search on the right side of the index
                        right = pp.length;
                        break linear_scan;
                    }
                    //- slower code:
                    //-					if ( t < t0 || t0 === undefined ) {
                    if (!(t >= t0)) {
                        // looping?
                        const t1global = pp[1];
                        if (t < t1global) {
                            i1 = 2; // + 1, using the scan for the details
                            t0 = t1global;
                        }
                        // linear reverse scan
                        for(let giveUpAt = i1 - 2;;){
                            if (t0 === undefined) {
                                // before start
                                this._cachedIndex = 0;
                                return this.copySampleValue_(0);
                            }
                            if (i1 === giveUpAt) break; // this loop
                            t1 = t0;
                            t0 = pp[--i1 - 1];
                            if (t >= t0) break seek;
                        }
                        // prepare binary search on the left side of the index
                        right = i1;
                        i1 = 0;
                        break linear_scan;
                    }
                    break validate_interval;
                } // linear scan
                // binary search
                while(i1 < right){
                    const mid = i1 + right >>> 1;
                    if (t < pp[mid]) right = mid;
                    else i1 = mid + 1;
                }
                t1 = pp[i1];
                t0 = pp[i1 - 1];
                // check boundary cases, again
                if (t0 === undefined) {
                    this._cachedIndex = 0;
                    return this.copySampleValue_(0);
                }
                if (t1 === undefined) {
                    i1 = pp.length;
                    this._cachedIndex = i1;
                    return this.copySampleValue_(i1 - 1);
                }
            } // seek
            this._cachedIndex = i1;
            this.intervalChanged_(i1, t0, t1);
        } // validate_interval
        return this.interpolate_(i1, t0, t, t1);
    }
    getSettings_() {
        return this.settings || this.DefaultSettings_;
    }
    copySampleValue_(index) {
        // copies a sample value to the result buffer
        const result = this.resultBuffer, values = this.sampleValues, stride = this.valueSize, offset = index * stride;
        for(let i = 0; i !== stride; ++i)result[i] = values[offset + i];
        return result;
    }
    // Template methods for derived classes:
    interpolate_() {
        throw new Error("call to abstract method");
    // implementations shall return this.resultBuffer
    }
    intervalChanged_() {
    // empty
    }
}
/**
 * Fast and simple cubic spline interpolant.
 *
 * It was derived from a Hermitian construction setting the first derivative
 * at each sample position to the linear slope between neighboring positions
 * over their parameter interval.
 */ class CubicInterpolant extends Interpolant {
    constructor(parameterPositions, sampleValues, sampleSize, resultBuffer){
        super(parameterPositions, sampleValues, sampleSize, resultBuffer);
        this._weightPrev = -0;
        this._offsetPrev = -0;
        this._weightNext = -0;
        this._offsetNext = -0;
        this.DefaultSettings_ = {
            endingStart: ZeroCurvatureEnding,
            endingEnd: ZeroCurvatureEnding
        };
    }
    intervalChanged_(i1, t0, t1) {
        const pp = this.parameterPositions;
        let iPrev = i1 - 2, iNext = i1 + 1, tPrev = pp[iPrev], tNext = pp[iNext];
        if (tPrev === undefined) switch(this.getSettings_().endingStart){
            case ZeroSlopeEnding:
                // f'(t0) = 0
                iPrev = i1;
                tPrev = 2 * t0 - t1;
                break;
            case WrapAroundEnding:
                // use the other end of the curve
                iPrev = pp.length - 2;
                tPrev = t0 + pp[iPrev] - pp[iPrev + 1];
                break;
            default:
                // f''(t0) = 0 a.k.a. Natural Spline
                iPrev = i1;
                tPrev = t1;
        }
        if (tNext === undefined) switch(this.getSettings_().endingEnd){
            case ZeroSlopeEnding:
                // f'(tN) = 0
                iNext = i1;
                tNext = 2 * t1 - t0;
                break;
            case WrapAroundEnding:
                // use the other end of the curve
                iNext = 1;
                tNext = t1 + pp[1] - pp[0];
                break;
            default:
                // f''(tN) = 0, a.k.a. Natural Spline
                iNext = i1 - 1;
                tNext = t0;
        }
        const halfDt = (t1 - t0) * 0.5, stride = this.valueSize;
        this._weightPrev = halfDt / (t0 - tPrev);
        this._weightNext = halfDt / (tNext - t1);
        this._offsetPrev = iPrev * stride;
        this._offsetNext = iNext * stride;
    }
    interpolate_(i1, t0, t, t1) {
        const result = this.resultBuffer, values = this.sampleValues, stride = this.valueSize, o1 = i1 * stride, o0 = o1 - stride, oP = this._offsetPrev, oN = this._offsetNext, wP = this._weightPrev, wN = this._weightNext, p = (t - t0) / (t1 - t0), pp = p * p, ppp = pp * p;
        // evaluate polynomials
        const sP = -wP * ppp + 2 * wP * pp - wP * p;
        const s0 = (1 + wP) * ppp + (-1.5 - 2 * wP) * pp + (-0.5 + wP) * p + 1;
        const s1 = (-1 - wN) * ppp + (1.5 + wN) * pp + 0.5 * p;
        const sN = wN * ppp - wN * pp;
        // combine data linearly
        for(let i = 0; i !== stride; ++i)result[i] = sP * values[oP + i] + s0 * values[o0 + i] + s1 * values[o1 + i] + sN * values[oN + i];
        return result;
    }
}
class LinearInterpolant extends Interpolant {
    constructor(parameterPositions, sampleValues, sampleSize, resultBuffer){
        super(parameterPositions, sampleValues, sampleSize, resultBuffer);
    }
    interpolate_(i1, t0, t, t1) {
        const result = this.resultBuffer, values = this.sampleValues, stride = this.valueSize, offset1 = i1 * stride, offset0 = offset1 - stride, weight1 = (t - t0) / (t1 - t0), weight0 = 1 - weight1;
        for(let i = 0; i !== stride; ++i)result[i] = values[offset0 + i] * weight0 + values[offset1 + i] * weight1;
        return result;
    }
}
/**
 *
 * Interpolant that evaluates to the sample value at the position preceding
 * the parameter.
 */ class DiscreteInterpolant extends Interpolant {
    constructor(parameterPositions, sampleValues, sampleSize, resultBuffer){
        super(parameterPositions, sampleValues, sampleSize, resultBuffer);
    }
    interpolate_(i1 /*, t0, t, t1 */ ) {
        return this.copySampleValue_(i1 - 1);
    }
}
class KeyframeTrack {
    constructor(name, times, values, interpolation){
        if (name === undefined) throw new Error("THREE.KeyframeTrack: track name is undefined");
        if (times === undefined || times.length === 0) throw new Error("THREE.KeyframeTrack: no keyframes in track named " + name);
        this.name = name;
        this.times = convertArray(times, this.TimeBufferType);
        this.values = convertArray(values, this.ValueBufferType);
        this.setInterpolation(interpolation || this.DefaultInterpolation);
    }
    // Serialization (in static context, because of constructor invocation
    // and automatic invocation of .toJSON):
    static toJSON(track) {
        const trackType = track.constructor;
        let json;
        // derived classes can define a static toJSON method
        if (trackType.toJSON !== this.toJSON) json = trackType.toJSON(track);
        else {
            // by default, we assume the data can be serialized as-is
            json = {
                "name": track.name,
                "times": convertArray(track.times, Array),
                "values": convertArray(track.values, Array)
            };
            const interpolation = track.getInterpolation();
            if (interpolation !== track.DefaultInterpolation) json.interpolation = interpolation;
        }
        json.type = track.ValueTypeName; // mandatory
        return json;
    }
    InterpolantFactoryMethodDiscrete(result) {
        return new DiscreteInterpolant(this.times, this.values, this.getValueSize(), result);
    }
    InterpolantFactoryMethodLinear(result) {
        return new LinearInterpolant(this.times, this.values, this.getValueSize(), result);
    }
    InterpolantFactoryMethodSmooth(result) {
        return new CubicInterpolant(this.times, this.values, this.getValueSize(), result);
    }
    setInterpolation(interpolation) {
        let factoryMethod;
        switch(interpolation){
            case InterpolateDiscrete:
                factoryMethod = this.InterpolantFactoryMethodDiscrete;
                break;
            case InterpolateLinear:
                factoryMethod = this.InterpolantFactoryMethodLinear;
                break;
            case InterpolateSmooth:
                factoryMethod = this.InterpolantFactoryMethodSmooth;
                break;
        }
        if (factoryMethod === undefined) {
            const message = "unsupported interpolation for " + this.ValueTypeName + " keyframe track named " + this.name;
            if (this.createInterpolant === undefined) {
                // fall back to default, unless the default itself is messed up
                if (interpolation !== this.DefaultInterpolation) this.setInterpolation(this.DefaultInterpolation);
                else throw new Error(message); // fatal, in this case
            }
            console.warn("THREE.KeyframeTrack:", message);
            return this;
        }
        this.createInterpolant = factoryMethod;
        return this;
    }
    getInterpolation() {
        switch(this.createInterpolant){
            case this.InterpolantFactoryMethodDiscrete:
                return InterpolateDiscrete;
            case this.InterpolantFactoryMethodLinear:
                return InterpolateLinear;
            case this.InterpolantFactoryMethodSmooth:
                return InterpolateSmooth;
        }
    }
    getValueSize() {
        return this.values.length / this.times.length;
    }
    // move all keyframes either forwards or backwards in time
    shift(timeOffset) {
        if (timeOffset !== 0.0) {
            const times = this.times;
            for(let i = 0, n = times.length; i !== n; ++i)times[i] += timeOffset;
        }
        return this;
    }
    // scale all keyframe times by a factor (useful for frame <-> seconds conversions)
    scale(timeScale) {
        if (timeScale !== 1.0) {
            const times = this.times;
            for(let i = 0, n = times.length; i !== n; ++i)times[i] *= timeScale;
        }
        return this;
    }
    // removes keyframes before and after animation without changing any values within the range [startTime, endTime].
    // IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values
    trim(startTime, endTime) {
        const times = this.times, nKeys = times.length;
        let from = 0, to = nKeys - 1;
        while(from !== nKeys && times[from] < startTime)++from;
        while(to !== -1 && times[to] > endTime)--to;
        ++to; // inclusive -> exclusive bound
        if (from !== 0 || to !== nKeys) {
            // empty tracks are forbidden, so keep at least one keyframe
            if (from >= to) {
                to = Math.max(to, 1);
                from = to - 1;
            }
            const stride = this.getValueSize();
            this.times = arraySlice(times, from, to);
            this.values = arraySlice(this.values, from * stride, to * stride);
        }
        return this;
    }
    // ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable
    validate() {
        let valid = true;
        const valueSize = this.getValueSize();
        if (valueSize - Math.floor(valueSize) !== 0) {
            console.error("THREE.KeyframeTrack: Invalid value size in track.", this);
            valid = false;
        }
        const times = this.times, values = this.values, nKeys = times.length;
        if (nKeys === 0) {
            console.error("THREE.KeyframeTrack: Track is empty.", this);
            valid = false;
        }
        let prevTime = null;
        for(let i = 0; i !== nKeys; i++){
            const currTime = times[i];
            if (typeof currTime === "number" && isNaN(currTime)) {
                console.error("THREE.KeyframeTrack: Time is not a valid number.", this, i, currTime);
                valid = false;
                break;
            }
            if (prevTime !== null && prevTime > currTime) {
                console.error("THREE.KeyframeTrack: Out of order keys.", this, i, currTime, prevTime);
                valid = false;
                break;
            }
            prevTime = currTime;
        }
        if (values !== undefined) {
            if (isTypedArray(values)) for(let i = 0, n = values.length; i !== n; ++i){
                const value = values[i];
                if (isNaN(value)) {
                    console.error("THREE.KeyframeTrack: Value is not a valid number.", this, i, value);
                    valid = false;
                    break;
                }
            }
        }
        return valid;
    }
    // removes equivalent sequential keys as common in morph target sequences
    // (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)
    optimize() {
        // times or values may be shared with other tracks, so overwriting is unsafe
        const times = arraySlice(this.times), values = arraySlice(this.values), stride = this.getValueSize(), smoothInterpolation = this.getInterpolation() === InterpolateSmooth, lastIndex = times.length - 1;
        let writeIndex = 1;
        for(let i = 1; i < lastIndex; ++i){
            let keep = false;
            const time = times[i];
            const timeNext = times[i + 1];
            // remove adjacent keyframes scheduled at the same time
            if (time !== timeNext && (i !== 1 || time !== times[0])) {
                if (!smoothInterpolation) {
                    // remove unnecessary keyframes same as their neighbors
                    const offset = i * stride, offsetP = offset - stride, offsetN = offset + stride;
                    for(let j = 0; j !== stride; ++j){
                        const value = values[offset + j];
                        if (value !== values[offsetP + j] || value !== values[offsetN + j]) {
                            keep = true;
                            break;
                        }
                    }
                } else keep = true;
            }
            // in-place compaction
            if (keep) {
                if (i !== writeIndex) {
                    times[writeIndex] = times[i];
                    const readOffset = i * stride, writeOffset = writeIndex * stride;
                    for(let j = 0; j !== stride; ++j)values[writeOffset + j] = values[readOffset + j];
                }
                ++writeIndex;
            }
        }
        // flush last keyframe (compaction looks ahead)
        if (lastIndex > 0) {
            times[writeIndex] = times[lastIndex];
            for(let readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j = 0; j !== stride; ++j)values[writeOffset + j] = values[readOffset + j];
            ++writeIndex;
        }
        if (writeIndex !== times.length) {
            this.times = arraySlice(times, 0, writeIndex);
            this.values = arraySlice(values, 0, writeIndex * stride);
        } else {
            this.times = times;
            this.values = values;
        }
        return this;
    }
    clone() {
        const times = arraySlice(this.times, 0);
        const values = arraySlice(this.values, 0);
        const TypedKeyframeTrack = this.constructor;
        const track = new TypedKeyframeTrack(this.name, times, values);
        // Interpolant argument to constructor is not saved, so copy the factory method directly.
        track.createInterpolant = this.createInterpolant;
        return track;
    }
}
KeyframeTrack.prototype.TimeBufferType = Float32Array;
KeyframeTrack.prototype.ValueBufferType = Float32Array;
KeyframeTrack.prototype.DefaultInterpolation = InterpolateLinear;
/**
 * A Track of Boolean keyframe values.
 */ class BooleanKeyframeTrack extends KeyframeTrack {
}
BooleanKeyframeTrack.prototype.ValueTypeName = "bool";
BooleanKeyframeTrack.prototype.ValueBufferType = Array;
BooleanKeyframeTrack.prototype.DefaultInterpolation = InterpolateDiscrete;
BooleanKeyframeTrack.prototype.InterpolantFactoryMethodLinear = undefined;
BooleanKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined;
/**
 * A Track of keyframe values that represent color.
 */ class ColorKeyframeTrack extends KeyframeTrack {
}
ColorKeyframeTrack.prototype.ValueTypeName = "color";
/**
 * A Track of numeric keyframe values.
 */ class NumberKeyframeTrack extends KeyframeTrack {
}
NumberKeyframeTrack.prototype.ValueTypeName = "number";
/**
 * Spherical linear unit quaternion interpolant.
 */ class QuaternionLinearInterpolant extends Interpolant {
    constructor(parameterPositions, sampleValues, sampleSize, resultBuffer){
        super(parameterPositions, sampleValues, sampleSize, resultBuffer);
    }
    interpolate_(i1, t0, t, t1) {
        const result = this.resultBuffer, values = this.sampleValues, stride = this.valueSize, alpha = (t - t0) / (t1 - t0);
        let offset = i1 * stride;
        for(let end = offset + stride; offset !== end; offset += 4)Quaternion.slerpFlat(result, 0, values, offset - stride, values, offset, alpha);
        return result;
    }
}
/**
 * A Track of quaternion keyframe values.
 */ class QuaternionKeyframeTrack extends KeyframeTrack {
    InterpolantFactoryMethodLinear(result) {
        return new QuaternionLinearInterpolant(this.times, this.values, this.getValueSize(), result);
    }
}
QuaternionKeyframeTrack.prototype.ValueTypeName = "quaternion";
// ValueBufferType is inherited
QuaternionKeyframeTrack.prototype.DefaultInterpolation = InterpolateLinear;
QuaternionKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined;
/**
 * A Track that interpolates Strings
 */ class StringKeyframeTrack extends KeyframeTrack {
}
StringKeyframeTrack.prototype.ValueTypeName = "string";
StringKeyframeTrack.prototype.ValueBufferType = Array;
StringKeyframeTrack.prototype.DefaultInterpolation = InterpolateDiscrete;
StringKeyframeTrack.prototype.InterpolantFactoryMethodLinear = undefined;
StringKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined;
/**
 * A Track of vectored keyframe values.
 */ class VectorKeyframeTrack extends KeyframeTrack {
}
VectorKeyframeTrack.prototype.ValueTypeName = "vector";
class AnimationClip {
    constructor(name, duration = -1, tracks, blendMode = NormalAnimationBlendMode){
        this.name = name;
        this.tracks = tracks;
        this.duration = duration;
        this.blendMode = blendMode;
        this.uuid = generateUUID();
        // this means it should figure out its duration by scanning the tracks
        if (this.duration < 0) this.resetDuration();
    }
    static parse(json) {
        const tracks = [], jsonTracks = json.tracks, frameTime = 1.0 / (json.fps || 1.0);
        for(let i = 0, n = jsonTracks.length; i !== n; ++i)tracks.push(parseKeyframeTrack(jsonTracks[i]).scale(frameTime));
        const clip = new this(json.name, json.duration, tracks, json.blendMode);
        clip.uuid = json.uuid;
        return clip;
    }
    static toJSON(clip) {
        const tracks = [], clipTracks = clip.tracks;
        const json = {
            "name": clip.name,
            "duration": clip.duration,
            "tracks": tracks,
            "uuid": clip.uuid,
            "blendMode": clip.blendMode
        };
        for(let i = 0, n = clipTracks.length; i !== n; ++i)tracks.push(KeyframeTrack.toJSON(clipTracks[i]));
        return json;
    }
    static CreateFromMorphTargetSequence(name, morphTargetSequence, fps, noLoop) {
        const numMorphTargets = morphTargetSequence.length;
        const tracks = [];
        for(let i = 0; i < numMorphTargets; i++){
            let times = [];
            let values = [];
            times.push((i + numMorphTargets - 1) % numMorphTargets, i, (i + 1) % numMorphTargets);
            values.push(0, 1, 0);
            const order = getKeyframeOrder(times);
            times = sortedArray(times, 1, order);
            values = sortedArray(values, 1, order);
            // if there is a key at the first frame, duplicate it as the
            // last frame as well for perfect loop.
            if (!noLoop && times[0] === 0) {
                times.push(numMorphTargets);
                values.push(values[0]);
            }
            tracks.push(new NumberKeyframeTrack(".morphTargetInfluences[" + morphTargetSequence[i].name + "]", times, values).scale(1.0 / fps));
        }
        return new this(name, -1, tracks);
    }
    static findByName(objectOrClipArray, name) {
        let clipArray = objectOrClipArray;
        if (!Array.isArray(objectOrClipArray)) {
            const o = objectOrClipArray;
            clipArray = o.geometry && o.geometry.animations || o.animations;
        }
        for(let i = 0; i < clipArray.length; i++){
            if (clipArray[i].name === name) return clipArray[i];
        }
        return null;
    }
    static CreateClipsFromMorphTargetSequences(morphTargets, fps, noLoop) {
        const animationToMorphTargets = {};
        // tested with https://regex101.com/ on trick sequences
        // such flamingo_flyA_003, flamingo_run1_003, crdeath0059
        const pattern = /^([\w-]*?)([\d]+)$/;
        // sort morph target names into animation groups based
        // patterns like Walk_001, Walk_002, Run_001, Run_002
        for(let i = 0, il = morphTargets.length; i < il; i++){
            const morphTarget = morphTargets[i];
            const parts = morphTarget.name.match(pattern);
            if (parts && parts.length > 1) {
                const name = parts[1];
                let animationMorphTargets = animationToMorphTargets[name];
                if (!animationMorphTargets) animationToMorphTargets[name] = animationMorphTargets = [];
                animationMorphTargets.push(morphTarget);
            }
        }
        const clips = [];
        for(const name in animationToMorphTargets)clips.push(this.CreateFromMorphTargetSequence(name, animationToMorphTargets[name], fps, noLoop));
        return clips;
    }
    // parse the animation.hierarchy format
    static parseAnimation(animation, bones) {
        if (!animation) {
            console.error("THREE.AnimationClip: No animation in JSONLoader data.");
            return null;
        }
        const addNonemptyTrack = function(trackType, trackName, animationKeys, propertyName, destTracks) {
            // only return track if there are actually keys.
            if (animationKeys.length !== 0) {
                const times = [];
                const values = [];
                flattenJSON(animationKeys, times, values, propertyName);
                // empty keys are filtered out, so check again
                if (times.length !== 0) destTracks.push(new trackType(trackName, times, values));
            }
        };
        const tracks = [];
        const clipName = animation.name || "default";
        const fps = animation.fps || 30;
        const blendMode = animation.blendMode;
        // automatic length determination in AnimationClip.
        let duration = animation.length || -1;
        const hierarchyTracks = animation.hierarchy || [];
        for(let h = 0; h < hierarchyTracks.length; h++){
            const animationKeys = hierarchyTracks[h].keys;
            // skip empty tracks
            if (!animationKeys || animationKeys.length === 0) continue;
            // process morph targets
            if (animationKeys[0].morphTargets) {
                // figure out all morph targets used in this track
                const morphTargetNames = {};
                let k;
                for(k = 0; k < animationKeys.length; k++){
                    if (animationKeys[k].morphTargets) for(let m = 0; m < animationKeys[k].morphTargets.length; m++)morphTargetNames[animationKeys[k].morphTargets[m]] = -1;
                }
                // create a track for each morph target with all zero
                // morphTargetInfluences except for the keys in which
                // the morphTarget is named.
                for(const morphTargetName in morphTargetNames){
                    const times = [];
                    const values = [];
                    for(let m = 0; m !== animationKeys[k].morphTargets.length; ++m){
                        const animationKey = animationKeys[k];
                        times.push(animationKey.time);
                        values.push(animationKey.morphTarget === morphTargetName ? 1 : 0);
                    }
                    tracks.push(new NumberKeyframeTrack(".morphTargetInfluence[" + morphTargetName + "]", times, values));
                }
                duration = morphTargetNames.length * fps;
            } else {
                // ...assume skeletal animation
                const boneName = ".bones[" + bones[h].name + "]";
                addNonemptyTrack(VectorKeyframeTrack, boneName + ".position", animationKeys, "pos", tracks);
                addNonemptyTrack(QuaternionKeyframeTrack, boneName + ".quaternion", animationKeys, "rot", tracks);
                addNonemptyTrack(VectorKeyframeTrack, boneName + ".scale", animationKeys, "scl", tracks);
            }
        }
        if (tracks.length === 0) return null;
        const clip = new this(clipName, duration, tracks, blendMode);
        return clip;
    }
    resetDuration() {
        const tracks = this.tracks;
        let duration = 0;
        for(let i = 0, n = tracks.length; i !== n; ++i){
            const track = this.tracks[i];
            duration = Math.max(duration, track.times[track.times.length - 1]);
        }
        this.duration = duration;
        return this;
    }
    trim() {
        for(let i = 0; i < this.tracks.length; i++)this.tracks[i].trim(0, this.duration);
        return this;
    }
    validate() {
        let valid = true;
        for(let i = 0; i < this.tracks.length; i++)valid = valid && this.tracks[i].validate();
        return valid;
    }
    optimize() {
        for(let i = 0; i < this.tracks.length; i++)this.tracks[i].optimize();
        return this;
    }
    clone() {
        const tracks = [];
        for(let i = 0; i < this.tracks.length; i++)tracks.push(this.tracks[i].clone());
        return new this.constructor(this.name, this.duration, tracks, this.blendMode);
    }
    toJSON() {
        return this.constructor.toJSON(this);
    }
}
function getTrackTypeForValueTypeName(typeName) {
    switch(typeName.toLowerCase()){
        case "scalar":
        case "double":
        case "float":
        case "number":
        case "integer":
            return NumberKeyframeTrack;
        case "vector":
        case "vector2":
        case "vector3":
        case "vector4":
            return VectorKeyframeTrack;
        case "color":
            return ColorKeyframeTrack;
        case "quaternion":
            return QuaternionKeyframeTrack;
        case "bool":
        case "boolean":
            return BooleanKeyframeTrack;
        case "string":
            return StringKeyframeTrack;
    }
    throw new Error("THREE.KeyframeTrack: Unsupported typeName: " + typeName);
}
function parseKeyframeTrack(json) {
    if (json.type === undefined) throw new Error("THREE.KeyframeTrack: track type undefined, can not parse");
    const trackType = getTrackTypeForValueTypeName(json.type);
    if (json.times === undefined) {
        const times = [], values = [];
        flattenJSON(json.keys, times, values, "value");
        json.times = times;
        json.values = values;
    }
    // derived classes can define a static parse method
    if (trackType.parse !== undefined) return trackType.parse(json);
    else // by default, we assume a constructor compatible with the base
    return new trackType(json.name, json.times, json.values, json.interpolation);
}
const Cache = {
    enabled: false,
    files: {},
    add: function(key, file) {
        if (this.enabled === false) return;
        // console.log( 'THREE.Cache', 'Adding key:', key );
        this.files[key] = file;
    },
    get: function(key) {
        if (this.enabled === false) return;
        // console.log( 'THREE.Cache', 'Checking key:', key );
        return this.files[key];
    },
    remove: function(key) {
        delete this.files[key];
    },
    clear: function() {
        this.files = {};
    }
};
class LoadingManager {
    constructor(onLoad, onProgress, onError){
        const scope = this;
        let isLoading = false;
        let itemsLoaded = 0;
        let itemsTotal = 0;
        let urlModifier = undefined;
        const handlers = [];
        // Refer to #5689 for the reason why we don't set .onStart
        // in the constructor
        this.onStart = undefined;
        this.onLoad = onLoad;
        this.onProgress = onProgress;
        this.onError = onError;
        this.itemStart = function(url) {
            itemsTotal++;
            if (isLoading === false) {
                if (scope.onStart !== undefined) scope.onStart(url, itemsLoaded, itemsTotal);
            }
            isLoading = true;
        };
        this.itemEnd = function(url) {
            itemsLoaded++;
            if (scope.onProgress !== undefined) scope.onProgress(url, itemsLoaded, itemsTotal);
            if (itemsLoaded === itemsTotal) {
                isLoading = false;
                if (scope.onLoad !== undefined) scope.onLoad();
            }
        };
        this.itemError = function(url) {
            if (scope.onError !== undefined) scope.onError(url);
        };
        this.resolveURL = function(url) {
            if (urlModifier) return urlModifier(url);
            return url;
        };
        this.setURLModifier = function(transform) {
            urlModifier = transform;
            return this;
        };
        this.addHandler = function(regex, loader) {
            handlers.push(regex, loader);
            return this;
        };
        this.removeHandler = function(regex) {
            const index = handlers.indexOf(regex);
            if (index !== -1) handlers.splice(index, 2);
            return this;
        };
        this.getHandler = function(file) {
            for(let i = 0, l = handlers.length; i < l; i += 2){
                const regex = handlers[i];
                const loader = handlers[i + 1];
                if (regex.global) regex.lastIndex = 0; // see #17920
                if (regex.test(file)) return loader;
            }
            return null;
        };
    }
}
const DefaultLoadingManager = /*@__PURE__*/ new LoadingManager();
class Loader {
    constructor(manager){
        this.manager = manager !== undefined ? manager : DefaultLoadingManager;
        this.crossOrigin = "anonymous";
        this.withCredentials = false;
        this.path = "";
        this.resourcePath = "";
        this.requestHeader = {};
    }
    load() {}
    loadAsync(url, onProgress) {
        const scope = this;
        return new Promise(function(resolve, reject) {
            scope.load(url, resolve, onProgress, reject);
        });
    }
    parse() {}
    setCrossOrigin(crossOrigin) {
        this.crossOrigin = crossOrigin;
        return this;
    }
    setWithCredentials(value) {
        this.withCredentials = value;
        return this;
    }
    setPath(path) {
        this.path = path;
        return this;
    }
    setResourcePath(resourcePath) {
        this.resourcePath = resourcePath;
        return this;
    }
    setRequestHeader(requestHeader) {
        this.requestHeader = requestHeader;
        return this;
    }
}
Loader.DEFAULT_MATERIAL_NAME = "__DEFAULT";
const loading = {};
class HttpError extends Error {
    constructor(message, response){
        super(message);
        this.response = response;
    }
}
class FileLoader extends Loader {
    constructor(manager){
        super(manager);
    }
    load(url, onLoad, onProgress, onError) {
        if (url === undefined) url = "";
        if (this.path !== undefined) url = this.path + url;
        url = this.manager.resolveURL(url);
        const cached = Cache.get(url);
        if (cached !== undefined) {
            this.manager.itemStart(url);
            setTimeout(()=>{
                if (onLoad) onLoad(cached);
                this.manager.itemEnd(url);
            }, 0);
            return cached;
        }
        // Check if request is duplicate
        if (loading[url] !== undefined) {
            loading[url].push({
                onLoad: onLoad,
                onProgress: onProgress,
                onError: onError
            });
            return;
        }
        // Initialise array for duplicate requests
        loading[url] = [];
        loading[url].push({
            onLoad: onLoad,
            onProgress: onProgress,
            onError: onError
        });
        // create request
        const req = new Request(url, {
            headers: new Headers(this.requestHeader),
            credentials: this.withCredentials ? "include" : "same-origin"
        });
        // record states ( avoid data race )
        const mimeType = this.mimeType;
        const responseType = this.responseType;
        // start the fetch
        fetch(req).then((response)=>{
            if (response.status === 200 || response.status === 0) {
                // Some browsers return HTTP Status 0 when using non-http protocol
                // e.g. 'file://' or 'data://'. Handle as success.
                if (response.status === 0) console.warn("THREE.FileLoader: HTTP Status 0 received.");
                // Workaround: Checking if response.body === undefined for Alipay browser #23548
                if (typeof ReadableStream === "undefined" || response.body === undefined || response.body.getReader === undefined) return response;
                const callbacks = loading[url];
                const reader = response.body.getReader();
                // Nginx needs X-File-Size check
                // https://serverfault.com/questions/482875/why-does-nginx-remove-content-length-header-for-chunked-content
                const contentLength = response.headers.get("Content-Length") || response.headers.get("X-File-Size");
                const total = contentLength ? parseInt(contentLength) : 0;
                const lengthComputable = total !== 0;
                let loaded = 0;
                // periodically read data into the new stream tracking while download progress
                const stream = new ReadableStream({
                    start (controller) {
                        readData();
                        function readData() {
                            reader.read().then(({ done, value })=>{
                                if (done) controller.close();
                                else {
                                    loaded += value.byteLength;
                                    const event = new ProgressEvent("progress", {
                                        lengthComputable,
                                        loaded,
                                        total
                                    });
                                    for(let i = 0, il = callbacks.length; i < il; i++){
                                        const callback = callbacks[i];
                                        if (callback.onProgress) callback.onProgress(event);
                                    }
                                    controller.enqueue(value);
                                    readData();
                                }
                            });
                        }
                    }
                });
                return new Response(stream);
            } else throw new HttpError(`fetch for "${response.url}" responded with ${response.status}: ${response.statusText}`, response);
        }).then((response)=>{
            switch(responseType){
                case "arraybuffer":
                    return response.arrayBuffer();
                case "blob":
                    return response.blob();
                case "document":
                    return response.text().then((text)=>{
                        const parser = new DOMParser();
                        return parser.parseFromString(text, mimeType);
                    });
                case "json":
                    return response.json();
                default:
                    if (mimeType === undefined) return response.text();
                    else {
                        // sniff encoding
                        const re = /charset="?([^;"\s]*)"?/i;
                        const exec = re.exec(mimeType);
                        const label = exec && exec[1] ? exec[1].toLowerCase() : undefined;
                        const decoder = new TextDecoder(label);
                        return response.arrayBuffer().then((ab)=>decoder.decode(ab));
                    }
            }
        }).then((data)=>{
            // Add to cache only on HTTP success, so that we do not cache
            // error response bodies as proper responses to requests.
            Cache.add(url, data);
            const callbacks = loading[url];
            delete loading[url];
            for(let i = 0, il = callbacks.length; i < il; i++){
                const callback = callbacks[i];
                if (callback.onLoad) callback.onLoad(data);
            }
        }).catch((err)=>{
            // Abort errors and other errors are handled the same
            const callbacks = loading[url];
            if (callbacks === undefined) {
                // When onLoad was called and url was deleted in `loading`
                this.manager.itemError(url);
                throw err;
            }
            delete loading[url];
            for(let i = 0, il = callbacks.length; i < il; i++){
                const callback = callbacks[i];
                if (callback.onError) callback.onError(err);
            }
            this.manager.itemError(url);
        }).finally(()=>{
            this.manager.itemEnd(url);
        });
        this.manager.itemStart(url);
    }
    setResponseType(value) {
        this.responseType = value;
        return this;
    }
    setMimeType(value) {
        this.mimeType = value;
        return this;
    }
}
class AnimationLoader extends Loader {
    constructor(manager){
        super(manager);
    }
    load(url, onLoad, onProgress, onError) {
        const scope = this;
        const loader = new FileLoader(this.manager);
        loader.setPath(this.path);
        loader.setRequestHeader(this.requestHeader);
        loader.setWithCredentials(this.withCredentials);
        loader.load(url, function(text) {
            try {
                onLoad(scope.parse(JSON.parse(text)));
            } catch (e) {
                if (onError) onError(e);
                else console.error(e);
                scope.manager.itemError(url);
            }
        }, onProgress, onError);
    }
    parse(json) {
        const animations = [];
        for(let i = 0; i < json.length; i++){
            const clip = AnimationClip.parse(json[i]);
            animations.push(clip);
        }
        return animations;
    }
}
/**
 * Abstract Base class to block based textures loader (dds, pvr, ...)
 *
 * Sub classes have to implement the parse() method which will be used in load().
 */ class CompressedTextureLoader extends Loader {
    constructor(manager){
        super(manager);
    }
    load(url, onLoad, onProgress, onError) {
        const scope = this;
        const images = [];
        const texture = new CompressedTexture();
        const loader = new FileLoader(this.manager);
        loader.setPath(this.path);
        loader.setResponseType("arraybuffer");
        loader.setRequestHeader(this.requestHeader);
        loader.setWithCredentials(scope.withCredentials);
        let loaded = 0;
        function loadTexture(i) {
            loader.load(url[i], function(buffer) {
                const texDatas = scope.parse(buffer, true);
                images[i] = {
                    width: texDatas.width,
                    height: texDatas.height,
                    format: texDatas.format,
                    mipmaps: texDatas.mipmaps
                };
                loaded += 1;
                if (loaded === 6) {
                    if (texDatas.mipmapCount === 1) texture.minFilter = LinearFilter;
                    texture.image = images;
                    texture.format = texDatas.format;
                    texture.needsUpdate = true;
                    if (onLoad) onLoad(texture);
                }
            }, onProgress, onError);
        }
        if (Array.isArray(url)) for(let i = 0, il = url.length; i < il; ++i)loadTexture(i);
        else // compressed cubemap texture stored in a single DDS file
        loader.load(url, function(buffer) {
            const texDatas = scope.parse(buffer, true);
            if (texDatas.isCubemap) {
                const faces = texDatas.mipmaps.length / texDatas.mipmapCount;
                for(let f = 0; f < faces; f++){
                    images[f] = {
                        mipmaps: []
                    };
                    for(let i = 0; i < texDatas.mipmapCount; i++){
                        images[f].mipmaps.push(texDatas.mipmaps[f * texDatas.mipmapCount + i]);
                        images[f].format = texDatas.format;
                        images[f].width = texDatas.width;
                        images[f].height = texDatas.height;
                    }
                }
                texture.image = images;
            } else {
                texture.image.width = texDatas.width;
                texture.image.height = texDatas.height;
                texture.mipmaps = texDatas.mipmaps;
            }
            if (texDatas.mipmapCount === 1) texture.minFilter = LinearFilter;
            texture.format = texDatas.format;
            texture.needsUpdate = true;
            if (onLoad) onLoad(texture);
        }, onProgress, onError);
        return texture;
    }
}
class ImageLoader extends Loader {
    constructor(manager){
        super(manager);
    }
    load(url, onLoad, onProgress, onError) {
        if (this.path !== undefined) url = this.path + url;
        url = this.manager.resolveURL(url);
        const scope = this;
        const cached = Cache.get(url);
        if (cached !== undefined) {
            scope.manager.itemStart(url);
            setTimeout(function() {
                if (onLoad) onLoad(cached);
                scope.manager.itemEnd(url);
            }, 0);
            return cached;
        }
        const image = createElementNS("img");
        function onImageLoad() {
            removeEventListeners();
            Cache.add(url, this);
            if (onLoad) onLoad(this);
            scope.manager.itemEnd(url);
        }
        function onImageError(event) {
            removeEventListeners();
            if (onError) onError(event);
            scope.manager.itemError(url);
            scope.manager.itemEnd(url);
        }
        function removeEventListeners() {
            image.removeEventListener("load", onImageLoad, false);
            image.removeEventListener("error", onImageError, false);
        }
        image.addEventListener("load", onImageLoad, false);
        image.addEventListener("error", onImageError, false);
        if (url.slice(0, 5) !== "data:") {
            if (this.crossOrigin !== undefined) image.crossOrigin = this.crossOrigin;
        }
        scope.manager.itemStart(url);
        image.src = url;
        return image;
    }
}
class CubeTextureLoader extends Loader {
    constructor(manager){
        super(manager);
    }
    load(urls, onLoad, onProgress, onError) {
        const texture = new CubeTexture();
        texture.colorSpace = SRGBColorSpace;
        const loader = new ImageLoader(this.manager);
        loader.setCrossOrigin(this.crossOrigin);
        loader.setPath(this.path);
        let loaded = 0;
        function loadTexture(i) {
            loader.load(urls[i], function(image) {
                texture.images[i] = image;
                loaded++;
                if (loaded === 6) {
                    texture.needsUpdate = true;
                    if (onLoad) onLoad(texture);
                }
            }, undefined, onError);
        }
        for(let i = 0; i < urls.length; ++i)loadTexture(i);
        return texture;
    }
}
/**
 * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)
 *
 * Sub classes have to implement the parse() method which will be used in load().
 */ class DataTextureLoader extends Loader {
    constructor(manager){
        super(manager);
    }
    load(url, onLoad, onProgress, onError) {
        const scope = this;
        const texture = new DataTexture();
        const loader = new FileLoader(this.manager);
        loader.setResponseType("arraybuffer");
        loader.setRequestHeader(this.requestHeader);
        loader.setPath(this.path);
        loader.setWithCredentials(scope.withCredentials);
        loader.load(url, function(buffer) {
            let texData;
            try {
                texData = scope.parse(buffer);
            } catch (error) {
                if (onError !== undefined) onError(error);
                else {
                    console.error(error);
                    return;
                }
            }
            if (texData.image !== undefined) texture.image = texData.image;
            else if (texData.data !== undefined) {
                texture.image.width = texData.width;
                texture.image.height = texData.height;
                texture.image.data = texData.data;
            }
            texture.wrapS = texData.wrapS !== undefined ? texData.wrapS : ClampToEdgeWrapping;
            texture.wrapT = texData.wrapT !== undefined ? texData.wrapT : ClampToEdgeWrapping;
            texture.magFilter = texData.magFilter !== undefined ? texData.magFilter : LinearFilter;
            texture.minFilter = texData.minFilter !== undefined ? texData.minFilter : LinearFilter;
            texture.anisotropy = texData.anisotropy !== undefined ? texData.anisotropy : 1;
            if (texData.colorSpace !== undefined) texture.colorSpace = texData.colorSpace;
            else if (texData.encoding !== undefined) texture.encoding = texData.encoding;
            if (texData.flipY !== undefined) texture.flipY = texData.flipY;
            if (texData.format !== undefined) texture.format = texData.format;
            if (texData.type !== undefined) texture.type = texData.type;
            if (texData.mipmaps !== undefined) {
                texture.mipmaps = texData.mipmaps;
                texture.minFilter = LinearMipmapLinearFilter; // presumably...
            }
            if (texData.mipmapCount === 1) texture.minFilter = LinearFilter;
            if (texData.generateMipmaps !== undefined) texture.generateMipmaps = texData.generateMipmaps;
            texture.needsUpdate = true;
            if (onLoad) onLoad(texture, texData);
        }, onProgress, onError);
        return texture;
    }
}
class TextureLoader extends Loader {
    constructor(manager){
        super(manager);
    }
    load(url, onLoad, onProgress, onError) {
        const texture = new Texture();
        const loader = new ImageLoader(this.manager);
        loader.setCrossOrigin(this.crossOrigin);
        loader.setPath(this.path);
        loader.load(url, function(image) {
            texture.image = image;
            texture.needsUpdate = true;
            if (onLoad !== undefined) onLoad(texture);
        }, onProgress, onError);
        return texture;
    }
}
class Light extends Object3D {
    constructor(color, intensity = 1){
        super();
        this.isLight = true;
        this.type = "Light";
        this.color = new Color(color);
        this.intensity = intensity;
    }
    dispose() {
    // Empty here in base class; some subclasses override.
    }
    copy(source, recursive) {
        super.copy(source, recursive);
        this.color.copy(source.color);
        this.intensity = source.intensity;
        return this;
    }
    toJSON(meta) {
        const data = super.toJSON(meta);
        data.object.color = this.color.getHex();
        data.object.intensity = this.intensity;
        if (this.groundColor !== undefined) data.object.groundColor = this.groundColor.getHex();
        if (this.distance !== undefined) data.object.distance = this.distance;
        if (this.angle !== undefined) data.object.angle = this.angle;
        if (this.decay !== undefined) data.object.decay = this.decay;
        if (this.penumbra !== undefined) data.object.penumbra = this.penumbra;
        if (this.shadow !== undefined) data.object.shadow = this.shadow.toJSON();
        return data;
    }
}
class HemisphereLight extends Light {
    constructor(skyColor, groundColor, intensity){
        super(skyColor, intensity);
        this.isHemisphereLight = true;
        this.type = "HemisphereLight";
        this.position.copy(Object3D.DEFAULT_UP);
        this.updateMatrix();
        this.groundColor = new Color(groundColor);
    }
    copy(source, recursive) {
        super.copy(source, recursive);
        this.groundColor.copy(source.groundColor);
        return this;
    }
}
const _projScreenMatrix$1 = /*@__PURE__*/ new Matrix4();
const _lightPositionWorld$1 = /*@__PURE__*/ new Vector3();
const _lookTarget$1 = /*@__PURE__*/ new Vector3();
class LightShadow {
    constructor(camera){
        this.camera = camera;
        this.bias = 0;
        this.normalBias = 0;
        this.radius = 1;
        this.blurSamples = 8;
        this.mapSize = new Vector2(512, 512);
        this.map = null;
        this.mapPass = null;
        this.matrix = new Matrix4();
        this.autoUpdate = true;
        this.needsUpdate = false;
        this._frustum = new Frustum();
        this._frameExtents = new Vector2(1, 1);
        this._viewportCount = 1;
        this._viewports = [
            new Vector4(0, 0, 1, 1)
        ];
    }
    getViewportCount() {
        return this._viewportCount;
    }
    getFrustum() {
        return this._frustum;
    }
    updateMatrices(light) {
        const shadowCamera = this.camera;
        const shadowMatrix = this.matrix;
        _lightPositionWorld$1.setFromMatrixPosition(light.matrixWorld);
        shadowCamera.position.copy(_lightPositionWorld$1);
        _lookTarget$1.setFromMatrixPosition(light.target.matrixWorld);
        shadowCamera.lookAt(_lookTarget$1);
        shadowCamera.updateMatrixWorld();
        _projScreenMatrix$1.multiplyMatrices(shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse);
        this._frustum.setFromProjectionMatrix(_projScreenMatrix$1);
        shadowMatrix.set(0.5, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0);
        shadowMatrix.multiply(_projScreenMatrix$1);
    }
    getViewport(viewportIndex) {
        return this._viewports[viewportIndex];
    }
    getFrameExtents() {
        return this._frameExtents;
    }
    dispose() {
        if (this.map) this.map.dispose();
        if (this.mapPass) this.mapPass.dispose();
    }
    copy(source) {
        this.camera = source.camera.clone();
        this.bias = source.bias;
        this.radius = source.radius;
        this.mapSize.copy(source.mapSize);
        return this;
    }
    clone() {
        return new this.constructor().copy(this);
    }
    toJSON() {
        const object = {};
        if (this.bias !== 0) object.bias = this.bias;
        if (this.normalBias !== 0) object.normalBias = this.normalBias;
        if (this.radius !== 1) object.radius = this.radius;
        if (this.mapSize.x !== 512 || this.mapSize.y !== 512) object.mapSize = this.mapSize.toArray();
        object.camera = this.camera.toJSON(false).object;
        delete object.camera.matrix;
        return object;
    }
}
class SpotLightShadow extends LightShadow {
    constructor(){
        super(new PerspectiveCamera(50, 1, 0.5, 500));
        this.isSpotLightShadow = true;
        this.focus = 1;
    }
    updateMatrices(light) {
        const camera = this.camera;
        const fov = RAD2DEG * 2 * light.angle * this.focus;
        const aspect = this.mapSize.width / this.mapSize.height;
        const far = light.distance || camera.far;
        if (fov !== camera.fov || aspect !== camera.aspect || far !== camera.far) {
            camera.fov = fov;
            camera.aspect = aspect;
            camera.far = far;
            camera.updateProjectionMatrix();
        }
        super.updateMatrices(light);
    }
    copy(source) {
        super.copy(source);
        this.focus = source.focus;
        return this;
    }
}
class SpotLight extends Light {
    constructor(color, intensity, distance = 0, angle = Math.PI / 3, penumbra = 0, decay = 2){
        super(color, intensity);
        this.isSpotLight = true;
        this.type = "SpotLight";
        this.position.copy(Object3D.DEFAULT_UP);
        this.updateMatrix();
        this.target = new Object3D();
        this.distance = distance;
        this.angle = angle;
        this.penumbra = penumbra;
        this.decay = decay;
        this.map = null;
        this.shadow = new SpotLightShadow();
    }
    get power() {
        // compute the light's luminous power (in lumens) from its intensity (in candela)
        // by convention for a spotlight, luminous power (lm) = π * luminous intensity (cd)
        return this.intensity * Math.PI;
    }
    set power(power) {
        // set the light's intensity (in candela) from the desired luminous power (in lumens)
        this.intensity = power / Math.PI;
    }
    dispose() {
        this.shadow.dispose();
    }
    copy(source, recursive) {
        super.copy(source, recursive);
        this.distance = source.distance;
        this.angle = source.angle;
        this.penumbra = source.penumbra;
        this.decay = source.decay;
        this.target = source.target.clone();
        this.shadow = source.shadow.clone();
        return this;
    }
}
const _projScreenMatrix = /*@__PURE__*/ new Matrix4();
const _lightPositionWorld = /*@__PURE__*/ new Vector3();
const _lookTarget = /*@__PURE__*/ new Vector3();
class PointLightShadow extends LightShadow {
    constructor(){
        super(new PerspectiveCamera(90, 1, 0.5, 500));
        this.isPointLightShadow = true;
        this._frameExtents = new Vector2(4, 2);
        this._viewportCount = 6;
        this._viewports = [
            // These viewports map a cube-map onto a 2D texture with the
            // following orientation:
            //
            //  xzXZ
            //   y Y
            //
            // X - Positive x direction
            // x - Negative x direction
            // Y - Positive y direction
            // y - Negative y direction
            // Z - Positive z direction
            // z - Negative z direction
            // positive X
            new Vector4(2, 1, 1, 1),
            // negative X
            new Vector4(0, 1, 1, 1),
            // positive Z
            new Vector4(3, 1, 1, 1),
            // negative Z
            new Vector4(1, 1, 1, 1),
            // positive Y
            new Vector4(3, 0, 1, 1),
            // negative Y
            new Vector4(1, 0, 1, 1)
        ];
        this._cubeDirections = [
            new Vector3(1, 0, 0),
            new Vector3(-1, 0, 0),
            new Vector3(0, 0, 1),
            new Vector3(0, 0, -1),
            new Vector3(0, 1, 0),
            new Vector3(0, -1, 0)
        ];
        this._cubeUps = [
            new Vector3(0, 1, 0),
            new Vector3(0, 1, 0),
            new Vector3(0, 1, 0),
            new Vector3(0, 1, 0),
            new Vector3(0, 0, 1),
            new Vector3(0, 0, -1)
        ];
    }
    updateMatrices(light, viewportIndex = 0) {
        const camera = this.camera;
        const shadowMatrix = this.matrix;
        const far = light.distance || camera.far;
        if (far !== camera.far) {
            camera.far = far;
            camera.updateProjectionMatrix();
        }
        _lightPositionWorld.setFromMatrixPosition(light.matrixWorld);
        camera.position.copy(_lightPositionWorld);
        _lookTarget.copy(camera.position);
        _lookTarget.add(this._cubeDirections[viewportIndex]);
        camera.up.copy(this._cubeUps[viewportIndex]);
        camera.lookAt(_lookTarget);
        camera.updateMatrixWorld();
        shadowMatrix.makeTranslation(-_lightPositionWorld.x, -_lightPositionWorld.y, -_lightPositionWorld.z);
        _projScreenMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);
        this._frustum.setFromProjectionMatrix(_projScreenMatrix);
    }
}
class PointLight extends Light {
    constructor(color, intensity, distance = 0, decay = 2){
        super(color, intensity);
        this.isPointLight = true;
        this.type = "PointLight";
        this.distance = distance;
        this.decay = decay;
        this.shadow = new PointLightShadow();
    }
    get power() {
        // compute the light's luminous power (in lumens) from its intensity (in candela)
        // for an isotropic light source, luminous power (lm) = 4 π luminous intensity (cd)
        return this.intensity * 4 * Math.PI;
    }
    set power(power) {
        // set the light's intensity (in candela) from the desired luminous power (in lumens)
        this.intensity = power / (4 * Math.PI);
    }
    dispose() {
        this.shadow.dispose();
    }
    copy(source, recursive) {
        super.copy(source, recursive);
        this.distance = source.distance;
        this.decay = source.decay;
        this.shadow = source.shadow.clone();
        return this;
    }
}
class DirectionalLightShadow extends LightShadow {
    constructor(){
        super(new OrthographicCamera(-5, 5, 5, -5, 0.5, 500));
        this.isDirectionalLightShadow = true;
    }
}
class DirectionalLight extends Light {
    constructor(color, intensity){
        super(color, intensity);
        this.isDirectionalLight = true;
        this.type = "DirectionalLight";
        this.position.copy(Object3D.DEFAULT_UP);
        this.updateMatrix();
        this.target = new Object3D();
        this.shadow = new DirectionalLightShadow();
    }
    dispose() {
        this.shadow.dispose();
    }
    copy(source) {
        super.copy(source);
        this.target = source.target.clone();
        this.shadow = source.shadow.clone();
        return this;
    }
}
class AmbientLight extends Light {
    constructor(color, intensity){
        super(color, intensity);
        this.isAmbientLight = true;
        this.type = "AmbientLight";
    }
}
class RectAreaLight extends Light {
    constructor(color, intensity, width = 10, height = 10){
        super(color, intensity);
        this.isRectAreaLight = true;
        this.type = "RectAreaLight";
        this.width = width;
        this.height = height;
    }
    get power() {
        // compute the light's luminous power (in lumens) from its intensity (in nits)
        return this.intensity * this.width * this.height * Math.PI;
    }
    set power(power) {
        // set the light's intensity (in nits) from the desired luminous power (in lumens)
        this.intensity = power / (this.width * this.height * Math.PI);
    }
    copy(source) {
        super.copy(source);
        this.width = source.width;
        this.height = source.height;
        return this;
    }
    toJSON(meta) {
        const data = super.toJSON(meta);
        data.object.width = this.width;
        data.object.height = this.height;
        return data;
    }
}
/**
 * Primary reference:
 *   https://graphics.stanford.edu/papers/envmap/envmap.pdf
 *
 * Secondary reference:
 *   https://www.ppsloan.org/publications/StupidSH36.pdf
 */ // 3-band SH defined by 9 coefficients
class SphericalHarmonics3 {
    constructor(){
        this.isSphericalHarmonics3 = true;
        this.coefficients = [];
        for(let i = 0; i < 9; i++)this.coefficients.push(new Vector3());
    }
    set(coefficients) {
        for(let i = 0; i < 9; i++)this.coefficients[i].copy(coefficients[i]);
        return this;
    }
    zero() {
        for(let i = 0; i < 9; i++)this.coefficients[i].set(0, 0, 0);
        return this;
    }
    // get the radiance in the direction of the normal
    // target is a Vector3
    getAt(normal, target) {
        // normal is assumed to be unit length
        const x = normal.x, y = normal.y, z = normal.z;
        const coeff = this.coefficients;
        // band 0
        target.copy(coeff[0]).multiplyScalar(0.282095);
        // band 1
        target.addScaledVector(coeff[1], 0.488603 * y);
        target.addScaledVector(coeff[2], 0.488603 * z);
        target.addScaledVector(coeff[3], 0.488603 * x);
        // band 2
        target.addScaledVector(coeff[4], 1.092548 * (x * y));
        target.addScaledVector(coeff[5], 1.092548 * (y * z));
        target.addScaledVector(coeff[6], 0.315392 * (3.0 * z * z - 1.0));
        target.addScaledVector(coeff[7], 1.092548 * (x * z));
        target.addScaledVector(coeff[8], 0.546274 * (x * x - y * y));
        return target;
    }
    // get the irradiance (radiance convolved with cosine lobe) in the direction of the normal
    // target is a Vector3
    // https://graphics.stanford.edu/papers/envmap/envmap.pdf
    getIrradianceAt(normal, target) {
        // normal is assumed to be unit length
        const x = normal.x, y = normal.y, z = normal.z;
        const coeff = this.coefficients;
        // band 0
        target.copy(coeff[0]).multiplyScalar(0.886227); // π * 0.282095
        // band 1
        target.addScaledVector(coeff[1], 1.023328 * y); // ( 2 * π / 3 ) * 0.488603
        target.addScaledVector(coeff[2], 1.023328 * z);
        target.addScaledVector(coeff[3], 1.023328 * x);
        // band 2
        target.addScaledVector(coeff[4], 0.858086 * x * y); // ( π / 4 ) * 1.092548
        target.addScaledVector(coeff[5], 0.858086 * y * z);
        target.addScaledVector(coeff[6], 0.743125 * z * z - 0.247708); // ( π / 4 ) * 0.315392 * 3
        target.addScaledVector(coeff[7], 0.858086 * x * z);
        target.addScaledVector(coeff[8], 0.429043 * (x * x - y * y)); // ( π / 4 ) * 0.546274
        return target;
    }
    add(sh) {
        for(let i = 0; i < 9; i++)this.coefficients[i].add(sh.coefficients[i]);
        return this;
    }
    addScaledSH(sh, s) {
        for(let i = 0; i < 9; i++)this.coefficients[i].addScaledVector(sh.coefficients[i], s);
        return this;
    }
    scale(s) {
        for(let i = 0; i < 9; i++)this.coefficients[i].multiplyScalar(s);
        return this;
    }
    lerp(sh, alpha) {
        for(let i = 0; i < 9; i++)this.coefficients[i].lerp(sh.coefficients[i], alpha);
        return this;
    }
    equals(sh) {
        for(let i = 0; i < 9; i++){
            if (!this.coefficients[i].equals(sh.coefficients[i])) return false;
        }
        return true;
    }
    copy(sh) {
        return this.set(sh.coefficients);
    }
    clone() {
        return new this.constructor().copy(this);
    }
    fromArray(array, offset = 0) {
        const coefficients = this.coefficients;
        for(let i = 0; i < 9; i++)coefficients[i].fromArray(array, offset + i * 3);
        return this;
    }
    toArray(array = [], offset = 0) {
        const coefficients = this.coefficients;
        for(let i = 0; i < 9; i++)coefficients[i].toArray(array, offset + i * 3);
        return array;
    }
    // evaluate the basis functions
    // shBasis is an Array[ 9 ]
    static getBasisAt(normal, shBasis) {
        // normal is assumed to be unit length
        const x = normal.x, y = normal.y, z = normal.z;
        // band 0
        shBasis[0] = 0.282095;
        // band 1
        shBasis[1] = 0.488603 * y;
        shBasis[2] = 0.488603 * z;
        shBasis[3] = 0.488603 * x;
        // band 2
        shBasis[4] = 1.092548 * x * y;
        shBasis[5] = 1.092548 * y * z;
        shBasis[6] = 0.315392 * (3 * z * z - 1);
        shBasis[7] = 1.092548 * x * z;
        shBasis[8] = 0.546274 * (x * x - y * y);
    }
}
class LightProbe extends Light {
    constructor(sh = new SphericalHarmonics3(), intensity = 1){
        super(undefined, intensity);
        this.isLightProbe = true;
        this.sh = sh;
    }
    copy(source) {
        super.copy(source);
        this.sh.copy(source.sh);
        return this;
    }
    fromJSON(json) {
        this.intensity = json.intensity; // TODO: Move this bit to Light.fromJSON();
        this.sh.fromArray(json.sh);
        return this;
    }
    toJSON(meta) {
        const data = super.toJSON(meta);
        data.object.sh = this.sh.toArray();
        return data;
    }
}
class MaterialLoader extends Loader {
    constructor(manager){
        super(manager);
        this.textures = {};
    }
    load(url, onLoad, onProgress, onError) {
        const scope = this;
        const loader = new FileLoader(scope.manager);
        loader.setPath(scope.path);
        loader.setRequestHeader(scope.requestHeader);
        loader.setWithCredentials(scope.withCredentials);
        loader.load(url, function(text) {
            try {
                onLoad(scope.parse(JSON.parse(text)));
            } catch (e) {
                if (onError) onError(e);
                else console.error(e);
                scope.manager.itemError(url);
            }
        }, onProgress, onError);
    }
    parse(json) {
        const textures = this.textures;
        function getTexture(name) {
            if (textures[name] === undefined) console.warn("THREE.MaterialLoader: Undefined texture", name);
            return textures[name];
        }
        const material = MaterialLoader.createMaterialFromType(json.type);
        if (json.uuid !== undefined) material.uuid = json.uuid;
        if (json.name !== undefined) material.name = json.name;
        if (json.color !== undefined && material.color !== undefined) material.color.setHex(json.color);
        if (json.roughness !== undefined) material.roughness = json.roughness;
        if (json.metalness !== undefined) material.metalness = json.metalness;
        if (json.sheen !== undefined) material.sheen = json.sheen;
        if (json.sheenColor !== undefined) material.sheenColor = new Color().setHex(json.sheenColor);
        if (json.sheenRoughness !== undefined) material.sheenRoughness = json.sheenRoughness;
        if (json.emissive !== undefined && material.emissive !== undefined) material.emissive.setHex(json.emissive);
        if (json.specular !== undefined && material.specular !== undefined) material.specular.setHex(json.specular);
        if (json.specularIntensity !== undefined) material.specularIntensity = json.specularIntensity;
        if (json.specularColor !== undefined && material.specularColor !== undefined) material.specularColor.setHex(json.specularColor);
        if (json.shininess !== undefined) material.shininess = json.shininess;
        if (json.clearcoat !== undefined) material.clearcoat = json.clearcoat;
        if (json.clearcoatRoughness !== undefined) material.clearcoatRoughness = json.clearcoatRoughness;
        if (json.iridescence !== undefined) material.iridescence = json.iridescence;
        if (json.iridescenceIOR !== undefined) material.iridescenceIOR = json.iridescenceIOR;
        if (json.iridescenceThicknessRange !== undefined) material.iridescenceThicknessRange = json.iridescenceThicknessRange;
        if (json.transmission !== undefined) material.transmission = json.transmission;
        if (json.thickness !== undefined) material.thickness = json.thickness;
        if (json.attenuationDistance !== undefined) material.attenuationDistance = json.attenuationDistance;
        if (json.attenuationColor !== undefined && material.attenuationColor !== undefined) material.attenuationColor.setHex(json.attenuationColor);
        if (json.anisotropy !== undefined) material.anisotropy = json.anisotropy;
        if (json.anisotropyRotation !== undefined) material.anisotropyRotation = json.anisotropyRotation;
        if (json.fog !== undefined) material.fog = json.fog;
        if (json.flatShading !== undefined) material.flatShading = json.flatShading;
        if (json.blending !== undefined) material.blending = json.blending;
        if (json.combine !== undefined) material.combine = json.combine;
        if (json.side !== undefined) material.side = json.side;
        if (json.shadowSide !== undefined) material.shadowSide = json.shadowSide;
        if (json.opacity !== undefined) material.opacity = json.opacity;
        if (json.transparent !== undefined) material.transparent = json.transparent;
        if (json.alphaTest !== undefined) material.alphaTest = json.alphaTest;
        if (json.alphaHash !== undefined) material.alphaHash = json.alphaHash;
        if (json.depthTest !== undefined) material.depthTest = json.depthTest;
        if (json.depthWrite !== undefined) material.depthWrite = json.depthWrite;
        if (json.colorWrite !== undefined) material.colorWrite = json.colorWrite;
        if (json.stencilWrite !== undefined) material.stencilWrite = json.stencilWrite;
        if (json.stencilWriteMask !== undefined) material.stencilWriteMask = json.stencilWriteMask;
        if (json.stencilFunc !== undefined) material.stencilFunc = json.stencilFunc;
        if (json.stencilRef !== undefined) material.stencilRef = json.stencilRef;
        if (json.stencilFuncMask !== undefined) material.stencilFuncMask = json.stencilFuncMask;
        if (json.stencilFail !== undefined) material.stencilFail = json.stencilFail;
        if (json.stencilZFail !== undefined) material.stencilZFail = json.stencilZFail;
        if (json.stencilZPass !== undefined) material.stencilZPass = json.stencilZPass;
        if (json.wireframe !== undefined) material.wireframe = json.wireframe;
        if (json.wireframeLinewidth !== undefined) material.wireframeLinewidth = json.wireframeLinewidth;
        if (json.wireframeLinecap !== undefined) material.wireframeLinecap = json.wireframeLinecap;
        if (json.wireframeLinejoin !== undefined) material.wireframeLinejoin = json.wireframeLinejoin;
        if (json.rotation !== undefined) material.rotation = json.rotation;
        if (json.linewidth !== 1) material.linewidth = json.linewidth;
        if (json.dashSize !== undefined) material.dashSize = json.dashSize;
        if (json.gapSize !== undefined) material.gapSize = json.gapSize;
        if (json.scale !== undefined) material.scale = json.scale;
        if (json.polygonOffset !== undefined) material.polygonOffset = json.polygonOffset;
        if (json.polygonOffsetFactor !== undefined) material.polygonOffsetFactor = json.polygonOffsetFactor;
        if (json.polygonOffsetUnits !== undefined) material.polygonOffsetUnits = json.polygonOffsetUnits;
        if (json.dithering !== undefined) material.dithering = json.dithering;
        if (json.alphaToCoverage !== undefined) material.alphaToCoverage = json.alphaToCoverage;
        if (json.premultipliedAlpha !== undefined) material.premultipliedAlpha = json.premultipliedAlpha;
        if (json.forceSinglePass !== undefined) material.forceSinglePass = json.forceSinglePass;
        if (json.visible !== undefined) material.visible = json.visible;
        if (json.toneMapped !== undefined) material.toneMapped = json.toneMapped;
        if (json.userData !== undefined) material.userData = json.userData;
        if (json.vertexColors !== undefined) {
            if (typeof json.vertexColors === "number") material.vertexColors = json.vertexColors > 0 ? true : false;
            else material.vertexColors = json.vertexColors;
        }
        // Shader Material
        if (json.uniforms !== undefined) for(const name in json.uniforms){
            const uniform = json.uniforms[name];
            material.uniforms[name] = {};
            switch(uniform.type){
                case "t":
                    material.uniforms[name].value = getTexture(uniform.value);
                    break;
                case "c":
                    material.uniforms[name].value = new Color().setHex(uniform.value);
                    break;
                case "v2":
                    material.uniforms[name].value = new Vector2().fromArray(uniform.value);
                    break;
                case "v3":
                    material.uniforms[name].value = new Vector3().fromArray(uniform.value);
                    break;
                case "v4":
                    material.uniforms[name].value = new Vector4().fromArray(uniform.value);
                    break;
                case "m3":
                    material.uniforms[name].value = new Matrix3().fromArray(uniform.value);
                    break;
                case "m4":
                    material.uniforms[name].value = new Matrix4().fromArray(uniform.value);
                    break;
                default:
                    material.uniforms[name].value = uniform.value;
            }
        }
        if (json.defines !== undefined) material.defines = json.defines;
        if (json.vertexShader !== undefined) material.vertexShader = json.vertexShader;
        if (json.fragmentShader !== undefined) material.fragmentShader = json.fragmentShader;
        if (json.glslVersion !== undefined) material.glslVersion = json.glslVersion;
        if (json.extensions !== undefined) for(const key in json.extensions)material.extensions[key] = json.extensions[key];
        if (json.lights !== undefined) material.lights = json.lights;
        if (json.clipping !== undefined) material.clipping = json.clipping;
        // for PointsMaterial
        if (json.size !== undefined) material.size = json.size;
        if (json.sizeAttenuation !== undefined) material.sizeAttenuation = json.sizeAttenuation;
        // maps
        if (json.map !== undefined) material.map = getTexture(json.map);
        if (json.matcap !== undefined) material.matcap = getTexture(json.matcap);
        if (json.alphaMap !== undefined) material.alphaMap = getTexture(json.alphaMap);
        if (json.bumpMap !== undefined) material.bumpMap = getTexture(json.bumpMap);
        if (json.bumpScale !== undefined) material.bumpScale = json.bumpScale;
        if (json.normalMap !== undefined) material.normalMap = getTexture(json.normalMap);
        if (json.normalMapType !== undefined) material.normalMapType = json.normalMapType;
        if (json.normalScale !== undefined) {
            let normalScale = json.normalScale;
            if (Array.isArray(normalScale) === false) // Blender exporter used to export a scalar. See #7459
            normalScale = [
                normalScale,
                normalScale
            ];
            material.normalScale = new Vector2().fromArray(normalScale);
        }
        if (json.displacementMap !== undefined) material.displacementMap = getTexture(json.displacementMap);
        if (json.displacementScale !== undefined) material.displacementScale = json.displacementScale;
        if (json.displacementBias !== undefined) material.displacementBias = json.displacementBias;
        if (json.roughnessMap !== undefined) material.roughnessMap = getTexture(json.roughnessMap);
        if (json.metalnessMap !== undefined) material.metalnessMap = getTexture(json.metalnessMap);
        if (json.emissiveMap !== undefined) material.emissiveMap = getTexture(json.emissiveMap);
        if (json.emissiveIntensity !== undefined) material.emissiveIntensity = json.emissiveIntensity;
        if (json.specularMap !== undefined) material.specularMap = getTexture(json.specularMap);
        if (json.specularIntensityMap !== undefined) material.specularIntensityMap = getTexture(json.specularIntensityMap);
        if (json.specularColorMap !== undefined) material.specularColorMap = getTexture(json.specularColorMap);
        if (json.envMap !== undefined) material.envMap = getTexture(json.envMap);
        if (json.envMapIntensity !== undefined) material.envMapIntensity = json.envMapIntensity;
        if (json.reflectivity !== undefined) material.reflectivity = json.reflectivity;
        if (json.refractionRatio !== undefined) material.refractionRatio = json.refractionRatio;
        if (json.lightMap !== undefined) material.lightMap = getTexture(json.lightMap);
        if (json.lightMapIntensity !== undefined) material.lightMapIntensity = json.lightMapIntensity;
        if (json.aoMap !== undefined) material.aoMap = getTexture(json.aoMap);
        if (json.aoMapIntensity !== undefined) material.aoMapIntensity = json.aoMapIntensity;
        if (json.gradientMap !== undefined) material.gradientMap = getTexture(json.gradientMap);
        if (json.clearcoatMap !== undefined) material.clearcoatMap = getTexture(json.clearcoatMap);
        if (json.clearcoatRoughnessMap !== undefined) material.clearcoatRoughnessMap = getTexture(json.clearcoatRoughnessMap);
        if (json.clearcoatNormalMap !== undefined) material.clearcoatNormalMap = getTexture(json.clearcoatNormalMap);
        if (json.clearcoatNormalScale !== undefined) material.clearcoatNormalScale = new Vector2().fromArray(json.clearcoatNormalScale);
        if (json.iridescenceMap !== undefined) material.iridescenceMap = getTexture(json.iridescenceMap);
        if (json.iridescenceThicknessMap !== undefined) material.iridescenceThicknessMap = getTexture(json.iridescenceThicknessMap);
        if (json.transmissionMap !== undefined) material.transmissionMap = getTexture(json.transmissionMap);
        if (json.thicknessMap !== undefined) material.thicknessMap = getTexture(json.thicknessMap);
        if (json.anisotropyMap !== undefined) material.anisotropyMap = getTexture(json.anisotropyMap);
        if (json.sheenColorMap !== undefined) material.sheenColorMap = getTexture(json.sheenColorMap);
        if (json.sheenRoughnessMap !== undefined) material.sheenRoughnessMap = getTexture(json.sheenRoughnessMap);
        return material;
    }
    setTextures(value) {
        this.textures = value;
        return this;
    }
    static createMaterialFromType(type) {
        const materialLib = {
            ShadowMaterial,
            SpriteMaterial,
            RawShaderMaterial,
            ShaderMaterial,
            PointsMaterial,
            MeshPhysicalMaterial,
            MeshStandardMaterial,
            MeshPhongMaterial,
            MeshToonMaterial,
            MeshNormalMaterial,
            MeshLambertMaterial,
            MeshDepthMaterial,
            MeshDistanceMaterial,
            MeshBasicMaterial,
            MeshMatcapMaterial,
            LineDashedMaterial,
            LineBasicMaterial,
            Material
        };
        return new materialLib[type]();
    }
}
class LoaderUtils {
    static decodeText(array) {
        if (typeof TextDecoder !== "undefined") return new TextDecoder().decode(array);
        // Avoid the String.fromCharCode.apply(null, array) shortcut, which
        // throws a "maximum call stack size exceeded" error for large arrays.
        let s = "";
        for(let i = 0, il = array.length; i < il; i++)// Implicitly assumes little-endian.
        s += String.fromCharCode(array[i]);
        try {
            // merges multi-byte utf-8 characters.
            return decodeURIComponent(escape(s));
        } catch (e) {
            return s;
        }
    }
    static extractUrlBase(url) {
        const index = url.lastIndexOf("/");
        if (index === -1) return "./";
        return url.slice(0, index + 1);
    }
    static resolveURL(url, path) {
        // Invalid URL
        if (typeof url !== "string" || url === "") return "";
        // Host Relative URL
        if (/^https?:\/\//i.test(path) && /^\//.test(url)) path = path.replace(/(^https?:\/\/[^\/]+).*/i, "$1");
        // Absolute URL http://,https://,//
        if (/^(https?:)?\/\//i.test(url)) return url;
        // Data URI
        if (/^data:.*,.*$/i.test(url)) return url;
        // Blob URL
        if (/^blob:.*$/i.test(url)) return url;
        // Relative URL
        return path + url;
    }
}
class InstancedBufferGeometry extends BufferGeometry {
    constructor(){
        super();
        this.isInstancedBufferGeometry = true;
        this.type = "InstancedBufferGeometry";
        this.instanceCount = Infinity;
    }
    copy(source) {
        super.copy(source);
        this.instanceCount = source.instanceCount;
        return this;
    }
    toJSON() {
        const data = super.toJSON();
        data.instanceCount = this.instanceCount;
        data.isInstancedBufferGeometry = true;
        return data;
    }
}
class BufferGeometryLoader extends Loader {
    constructor(manager){
        super(manager);
    }
    load(url, onLoad, onProgress, onError) {
        const scope = this;
        const loader = new FileLoader(scope.manager);
        loader.setPath(scope.path);
        loader.setRequestHeader(scope.requestHeader);
        loader.setWithCredentials(scope.withCredentials);
        loader.load(url, function(text) {
            try {
                onLoad(scope.parse(JSON.parse(text)));
            } catch (e) {
                if (onError) onError(e);
                else console.error(e);
                scope.manager.itemError(url);
            }
        }, onProgress, onError);
    }
    parse(json) {
        const interleavedBufferMap = {};
        const arrayBufferMap = {};
        function getInterleavedBuffer(json, uuid) {
            if (interleavedBufferMap[uuid] !== undefined) return interleavedBufferMap[uuid];
            const interleavedBuffers = json.interleavedBuffers;
            const interleavedBuffer = interleavedBuffers[uuid];
            const buffer = getArrayBuffer(json, interleavedBuffer.buffer);
            const array = getTypedArray(interleavedBuffer.type, buffer);
            const ib = new InterleavedBuffer(array, interleavedBuffer.stride);
            ib.uuid = interleavedBuffer.uuid;
            interleavedBufferMap[uuid] = ib;
            return ib;
        }
        function getArrayBuffer(json, uuid) {
            if (arrayBufferMap[uuid] !== undefined) return arrayBufferMap[uuid];
            const arrayBuffers = json.arrayBuffers;
            const arrayBuffer = arrayBuffers[uuid];
            const ab = new Uint32Array(arrayBuffer).buffer;
            arrayBufferMap[uuid] = ab;
            return ab;
        }
        const geometry = json.isInstancedBufferGeometry ? new InstancedBufferGeometry() : new BufferGeometry();
        const index = json.data.index;
        if (index !== undefined) {
            const typedArray = getTypedArray(index.type, index.array);
            geometry.setIndex(new BufferAttribute(typedArray, 1));
        }
        const attributes = json.data.attributes;
        for(const key in attributes){
            const attribute = attributes[key];
            let bufferAttribute;
            if (attribute.isInterleavedBufferAttribute) {
                const interleavedBuffer = getInterleavedBuffer(json.data, attribute.data);
                bufferAttribute = new InterleavedBufferAttribute(interleavedBuffer, attribute.itemSize, attribute.offset, attribute.normalized);
            } else {
                const typedArray = getTypedArray(attribute.type, attribute.array);
                const bufferAttributeConstr = attribute.isInstancedBufferAttribute ? InstancedBufferAttribute : BufferAttribute;
                bufferAttribute = new bufferAttributeConstr(typedArray, attribute.itemSize, attribute.normalized);
            }
            if (attribute.name !== undefined) bufferAttribute.name = attribute.name;
            if (attribute.usage !== undefined) bufferAttribute.setUsage(attribute.usage);
            if (attribute.updateRange !== undefined) {
                bufferAttribute.updateRange.offset = attribute.updateRange.offset;
                bufferAttribute.updateRange.count = attribute.updateRange.count;
            }
            geometry.setAttribute(key, bufferAttribute);
        }
        const morphAttributes = json.data.morphAttributes;
        if (morphAttributes) for(const key in morphAttributes){
            const attributeArray = morphAttributes[key];
            const array = [];
            for(let i = 0, il = attributeArray.length; i < il; i++){
                const attribute = attributeArray[i];
                let bufferAttribute;
                if (attribute.isInterleavedBufferAttribute) {
                    const interleavedBuffer = getInterleavedBuffer(json.data, attribute.data);
                    bufferAttribute = new InterleavedBufferAttribute(interleavedBuffer, attribute.itemSize, attribute.offset, attribute.normalized);
                } else {
                    const typedArray = getTypedArray(attribute.type, attribute.array);
                    bufferAttribute = new BufferAttribute(typedArray, attribute.itemSize, attribute.normalized);
                }
                if (attribute.name !== undefined) bufferAttribute.name = attribute.name;
                array.push(bufferAttribute);
            }
            geometry.morphAttributes[key] = array;
        }
        const morphTargetsRelative = json.data.morphTargetsRelative;
        if (morphTargetsRelative) geometry.morphTargetsRelative = true;
        const groups = json.data.groups || json.data.drawcalls || json.data.offsets;
        if (groups !== undefined) for(let i = 0, n = groups.length; i !== n; ++i){
            const group = groups[i];
            geometry.addGroup(group.start, group.count, group.materialIndex);
        }
        const boundingSphere = json.data.boundingSphere;
        if (boundingSphere !== undefined) {
            const center = new Vector3();
            if (boundingSphere.center !== undefined) center.fromArray(boundingSphere.center);
            geometry.boundingSphere = new Sphere(center, boundingSphere.radius);
        }
        if (json.name) geometry.name = json.name;
        if (json.userData) geometry.userData = json.userData;
        return geometry;
    }
}
class ObjectLoader extends Loader {
    constructor(manager){
        super(manager);
    }
    load(url, onLoad, onProgress, onError) {
        const scope = this;
        const path = this.path === "" ? LoaderUtils.extractUrlBase(url) : this.path;
        this.resourcePath = this.resourcePath || path;
        const loader = new FileLoader(this.manager);
        loader.setPath(this.path);
        loader.setRequestHeader(this.requestHeader);
        loader.setWithCredentials(this.withCredentials);
        loader.load(url, function(text) {
            let json = null;
            try {
                json = JSON.parse(text);
            } catch (error) {
                if (onError !== undefined) onError(error);
                console.error("THREE:ObjectLoader: Can't parse " + url + ".", error.message);
                return;
            }
            const metadata = json.metadata;
            if (metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === "geometry") {
                if (onError !== undefined) onError(new Error("THREE.ObjectLoader: Can't load " + url));
                console.error("THREE.ObjectLoader: Can't load " + url);
                return;
            }
            scope.parse(json, onLoad);
        }, onProgress, onError);
    }
    async loadAsync(url, onProgress) {
        const scope = this;
        const path = this.path === "" ? LoaderUtils.extractUrlBase(url) : this.path;
        this.resourcePath = this.resourcePath || path;
        const loader = new FileLoader(this.manager);
        loader.setPath(this.path);
        loader.setRequestHeader(this.requestHeader);
        loader.setWithCredentials(this.withCredentials);
        const text = await loader.loadAsync(url, onProgress);
        const json = JSON.parse(text);
        const metadata = json.metadata;
        if (metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === "geometry") throw new Error("THREE.ObjectLoader: Can't load " + url);
        return await scope.parseAsync(json);
    }
    parse(json, onLoad) {
        const animations = this.parseAnimations(json.animations);
        const shapes = this.parseShapes(json.shapes);
        const geometries = this.parseGeometries(json.geometries, shapes);
        const images = this.parseImages(json.images, function() {
            if (onLoad !== undefined) onLoad(object);
        });
        const textures = this.parseTextures(json.textures, images);
        const materials = this.parseMaterials(json.materials, textures);
        const object = this.parseObject(json.object, geometries, materials, textures, animations);
        const skeletons = this.parseSkeletons(json.skeletons, object);
        this.bindSkeletons(object, skeletons);
        //
        if (onLoad !== undefined) {
            let hasImages = false;
            for(const uuid in images)if (images[uuid].data instanceof HTMLImageElement) {
                hasImages = true;
                break;
            }
            if (hasImages === false) onLoad(object);
        }
        return object;
    }
    async parseAsync(json) {
        const animations = this.parseAnimations(json.animations);
        const shapes = this.parseShapes(json.shapes);
        const geometries = this.parseGeometries(json.geometries, shapes);
        const images = await this.parseImagesAsync(json.images);
        const textures = this.parseTextures(json.textures, images);
        const materials = this.parseMaterials(json.materials, textures);
        const object = this.parseObject(json.object, geometries, materials, textures, animations);
        const skeletons = this.parseSkeletons(json.skeletons, object);
        this.bindSkeletons(object, skeletons);
        return object;
    }
    parseShapes(json) {
        const shapes = {};
        if (json !== undefined) for(let i = 0, l = json.length; i < l; i++){
            const shape = new Shape().fromJSON(json[i]);
            shapes[shape.uuid] = shape;
        }
        return shapes;
    }
    parseSkeletons(json, object) {
        const skeletons = {};
        const bones = {};
        // generate bone lookup table
        object.traverse(function(child) {
            if (child.isBone) bones[child.uuid] = child;
        });
        // create skeletons
        if (json !== undefined) for(let i = 0, l = json.length; i < l; i++){
            const skeleton = new Skeleton().fromJSON(json[i], bones);
            skeletons[skeleton.uuid] = skeleton;
        }
        return skeletons;
    }
    parseGeometries(json, shapes) {
        const geometries = {};
        if (json !== undefined) {
            const bufferGeometryLoader = new BufferGeometryLoader();
            for(let i = 0, l = json.length; i < l; i++){
                let geometry;
                const data = json[i];
                switch(data.type){
                    case "BufferGeometry":
                    case "InstancedBufferGeometry":
                        geometry = bufferGeometryLoader.parse(data);
                        break;
                    default:
                        if (data.type in Geometries) geometry = Geometries[data.type].fromJSON(data, shapes);
                        else console.warn(`THREE.ObjectLoader: Unsupported geometry type "${data.type}"`);
                }
                geometry.uuid = data.uuid;
                if (data.name !== undefined) geometry.name = data.name;
                if (data.userData !== undefined) geometry.userData = data.userData;
                geometries[data.uuid] = geometry;
            }
        }
        return geometries;
    }
    parseMaterials(json, textures) {
        const cache = {}; // MultiMaterial
        const materials = {};
        if (json !== undefined) {
            const loader = new MaterialLoader();
            loader.setTextures(textures);
            for(let i = 0, l = json.length; i < l; i++){
                const data = json[i];
                if (cache[data.uuid] === undefined) cache[data.uuid] = loader.parse(data);
                materials[data.uuid] = cache[data.uuid];
            }
        }
        return materials;
    }
    parseAnimations(json) {
        const animations = {};
        if (json !== undefined) for(let i = 0; i < json.length; i++){
            const data = json[i];
            const clip = AnimationClip.parse(data);
            animations[clip.uuid] = clip;
        }
        return animations;
    }
    parseImages(json, onLoad) {
        const scope = this;
        const images = {};
        let loader;
        function loadImage(url) {
            scope.manager.itemStart(url);
            return loader.load(url, function() {
                scope.manager.itemEnd(url);
            }, undefined, function() {
                scope.manager.itemError(url);
                scope.manager.itemEnd(url);
            });
        }
        function deserializeImage(image) {
            if (typeof image === "string") {
                const url = image;
                const path = /^(\/\/)|([a-z]+:(\/\/)?)/i.test(url) ? url : scope.resourcePath + url;
                return loadImage(path);
            } else {
                if (image.data) return {
                    data: getTypedArray(image.type, image.data),
                    width: image.width,
                    height: image.height
                };
                else return null;
            }
        }
        if (json !== undefined && json.length > 0) {
            const manager = new LoadingManager(onLoad);
            loader = new ImageLoader(manager);
            loader.setCrossOrigin(this.crossOrigin);
            for(let i = 0, il = json.length; i < il; i++){
                const image = json[i];
                const url = image.url;
                if (Array.isArray(url)) {
                    // load array of images e.g CubeTexture
                    const imageArray = [];
                    for(let j = 0, jl = url.length; j < jl; j++){
                        const currentUrl = url[j];
                        const deserializedImage = deserializeImage(currentUrl);
                        if (deserializedImage !== null) {
                            if (deserializedImage instanceof HTMLImageElement) imageArray.push(deserializedImage);
                            else // special case: handle array of data textures for cube textures
                            imageArray.push(new DataTexture(deserializedImage.data, deserializedImage.width, deserializedImage.height));
                        }
                    }
                    images[image.uuid] = new Source(imageArray);
                } else {
                    // load single image
                    const deserializedImage = deserializeImage(image.url);
                    images[image.uuid] = new Source(deserializedImage);
                }
            }
        }
        return images;
    }
    async parseImagesAsync(json) {
        const scope = this;
        const images = {};
        let loader;
        async function deserializeImage(image) {
            if (typeof image === "string") {
                const url = image;
                const path = /^(\/\/)|([a-z]+:(\/\/)?)/i.test(url) ? url : scope.resourcePath + url;
                return await loader.loadAsync(path);
            } else {
                if (image.data) return {
                    data: getTypedArray(image.type, image.data),
                    width: image.width,
                    height: image.height
                };
                else return null;
            }
        }
        if (json !== undefined && json.length > 0) {
            loader = new ImageLoader(this.manager);
            loader.setCrossOrigin(this.crossOrigin);
            for(let i = 0, il = json.length; i < il; i++){
                const image = json[i];
                const url = image.url;
                if (Array.isArray(url)) {
                    // load array of images e.g CubeTexture
                    const imageArray = [];
                    for(let j = 0, jl = url.length; j < jl; j++){
                        const currentUrl = url[j];
                        const deserializedImage = await deserializeImage(currentUrl);
                        if (deserializedImage !== null) {
                            if (deserializedImage instanceof HTMLImageElement) imageArray.push(deserializedImage);
                            else // special case: handle array of data textures for cube textures
                            imageArray.push(new DataTexture(deserializedImage.data, deserializedImage.width, deserializedImage.height));
                        }
                    }
                    images[image.uuid] = new Source(imageArray);
                } else {
                    // load single image
                    const deserializedImage = await deserializeImage(image.url);
                    images[image.uuid] = new Source(deserializedImage);
                }
            }
        }
        return images;
    }
    parseTextures(json, images) {
        function parseConstant(value, type) {
            if (typeof value === "number") return value;
            console.warn("THREE.ObjectLoader.parseTexture: Constant should be in numeric form.", value);
            return type[value];
        }
        const textures = {};
        if (json !== undefined) for(let i = 0, l = json.length; i < l; i++){
            const data = json[i];
            if (data.image === undefined) console.warn('THREE.ObjectLoader: No "image" specified for', data.uuid);
            if (images[data.image] === undefined) console.warn("THREE.ObjectLoader: Undefined image", data.image);
            const source = images[data.image];
            const image = source.data;
            let texture;
            if (Array.isArray(image)) {
                texture = new CubeTexture();
                if (image.length === 6) texture.needsUpdate = true;
            } else {
                if (image && image.data) texture = new DataTexture();
                else texture = new Texture();
                if (image) texture.needsUpdate = true; // textures can have undefined image data
            }
            texture.source = source;
            texture.uuid = data.uuid;
            if (data.name !== undefined) texture.name = data.name;
            if (data.mapping !== undefined) texture.mapping = parseConstant(data.mapping, TEXTURE_MAPPING);
            if (data.channel !== undefined) texture.channel = data.channel;
            if (data.offset !== undefined) texture.offset.fromArray(data.offset);
            if (data.repeat !== undefined) texture.repeat.fromArray(data.repeat);
            if (data.center !== undefined) texture.center.fromArray(data.center);
            if (data.rotation !== undefined) texture.rotation = data.rotation;
            if (data.wrap !== undefined) {
                texture.wrapS = parseConstant(data.wrap[0], TEXTURE_WRAPPING);
                texture.wrapT = parseConstant(data.wrap[1], TEXTURE_WRAPPING);
            }
            if (data.format !== undefined) texture.format = data.format;
            if (data.internalFormat !== undefined) texture.internalFormat = data.internalFormat;
            if (data.type !== undefined) texture.type = data.type;
            if (data.colorSpace !== undefined) texture.colorSpace = data.colorSpace;
            if (data.encoding !== undefined) texture.encoding = data.encoding; // @deprecated, r152
            if (data.minFilter !== undefined) texture.minFilter = parseConstant(data.minFilter, TEXTURE_FILTER);
            if (data.magFilter !== undefined) texture.magFilter = parseConstant(data.magFilter, TEXTURE_FILTER);
            if (data.anisotropy !== undefined) texture.anisotropy = data.anisotropy;
            if (data.flipY !== undefined) texture.flipY = data.flipY;
            if (data.generateMipmaps !== undefined) texture.generateMipmaps = data.generateMipmaps;
            if (data.premultiplyAlpha !== undefined) texture.premultiplyAlpha = data.premultiplyAlpha;
            if (data.unpackAlignment !== undefined) texture.unpackAlignment = data.unpackAlignment;
            if (data.compareFunction !== undefined) texture.compareFunction = data.compareFunction;
            if (data.userData !== undefined) texture.userData = data.userData;
            textures[data.uuid] = texture;
        }
        return textures;
    }
    parseObject(data, geometries, materials, textures, animations) {
        let object;
        function getGeometry(name) {
            if (geometries[name] === undefined) console.warn("THREE.ObjectLoader: Undefined geometry", name);
            return geometries[name];
        }
        function getMaterial(name) {
            if (name === undefined) return undefined;
            if (Array.isArray(name)) {
                const array = [];
                for(let i = 0, l = name.length; i < l; i++){
                    const uuid = name[i];
                    if (materials[uuid] === undefined) console.warn("THREE.ObjectLoader: Undefined material", uuid);
                    array.push(materials[uuid]);
                }
                return array;
            }
            if (materials[name] === undefined) console.warn("THREE.ObjectLoader: Undefined material", name);
            return materials[name];
        }
        function getTexture(uuid) {
            if (textures[uuid] === undefined) console.warn("THREE.ObjectLoader: Undefined texture", uuid);
            return textures[uuid];
        }
        let geometry, material;
        switch(data.type){
            case "Scene":
                object = new Scene();
                if (data.background !== undefined) {
                    if (Number.isInteger(data.background)) object.background = new Color(data.background);
                    else object.background = getTexture(data.background);
                }
                if (data.environment !== undefined) object.environment = getTexture(data.environment);
                if (data.fog !== undefined) {
                    if (data.fog.type === "Fog") object.fog = new Fog(data.fog.color, data.fog.near, data.fog.far);
                    else if (data.fog.type === "FogExp2") object.fog = new FogExp2(data.fog.color, data.fog.density);
                }
                if (data.backgroundBlurriness !== undefined) object.backgroundBlurriness = data.backgroundBlurriness;
                if (data.backgroundIntensity !== undefined) object.backgroundIntensity = data.backgroundIntensity;
                break;
            case "PerspectiveCamera":
                object = new PerspectiveCamera(data.fov, data.aspect, data.near, data.far);
                if (data.focus !== undefined) object.focus = data.focus;
                if (data.zoom !== undefined) object.zoom = data.zoom;
                if (data.filmGauge !== undefined) object.filmGauge = data.filmGauge;
                if (data.filmOffset !== undefined) object.filmOffset = data.filmOffset;
                if (data.view !== undefined) object.view = Object.assign({}, data.view);
                break;
            case "OrthographicCamera":
                object = new OrthographicCamera(data.left, data.right, data.top, data.bottom, data.near, data.far);
                if (data.zoom !== undefined) object.zoom = data.zoom;
                if (data.view !== undefined) object.view = Object.assign({}, data.view);
                break;
            case "AmbientLight":
                object = new AmbientLight(data.color, data.intensity);
                break;
            case "DirectionalLight":
                object = new DirectionalLight(data.color, data.intensity);
                break;
            case "PointLight":
                object = new PointLight(data.color, data.intensity, data.distance, data.decay);
                break;
            case "RectAreaLight":
                object = new RectAreaLight(data.color, data.intensity, data.width, data.height);
                break;
            case "SpotLight":
                object = new SpotLight(data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay);
                break;
            case "HemisphereLight":
                object = new HemisphereLight(data.color, data.groundColor, data.intensity);
                break;
            case "LightProbe":
                object = new LightProbe().fromJSON(data);
                break;
            case "SkinnedMesh":
                geometry = getGeometry(data.geometry);
                material = getMaterial(data.material);
                object = new SkinnedMesh(geometry, material);
                if (data.bindMode !== undefined) object.bindMode = data.bindMode;
                if (data.bindMatrix !== undefined) object.bindMatrix.fromArray(data.bindMatrix);
                if (data.skeleton !== undefined) object.skeleton = data.skeleton;
                break;
            case "Mesh":
                geometry = getGeometry(data.geometry);
                material = getMaterial(data.material);
                object = new Mesh(geometry, material);
                break;
            case "InstancedMesh":
                geometry = getGeometry(data.geometry);
                material = getMaterial(data.material);
                const count = data.count;
                const instanceMatrix = data.instanceMatrix;
                const instanceColor = data.instanceColor;
                object = new InstancedMesh(geometry, material, count);
                object.instanceMatrix = new InstancedBufferAttribute(new Float32Array(instanceMatrix.array), 16);
                if (instanceColor !== undefined) object.instanceColor = new InstancedBufferAttribute(new Float32Array(instanceColor.array), instanceColor.itemSize);
                break;
            case "LOD":
                object = new LOD();
                break;
            case "Line":
                object = new Line(getGeometry(data.geometry), getMaterial(data.material));
                break;
            case "LineLoop":
                object = new LineLoop(getGeometry(data.geometry), getMaterial(data.material));
                break;
            case "LineSegments":
                object = new LineSegments(getGeometry(data.geometry), getMaterial(data.material));
                break;
            case "PointCloud":
            case "Points":
                object = new Points(getGeometry(data.geometry), getMaterial(data.material));
                break;
            case "Sprite":
                object = new Sprite(getMaterial(data.material));
                break;
            case "Group":
                object = new Group();
                break;
            case "Bone":
                object = new Bone();
                break;
            default:
                object = new Object3D();
        }
        object.uuid = data.uuid;
        if (data.name !== undefined) object.name = data.name;
        if (data.matrix !== undefined) {
            object.matrix.fromArray(data.matrix);
            if (data.matrixAutoUpdate !== undefined) object.matrixAutoUpdate = data.matrixAutoUpdate;
            if (object.matrixAutoUpdate) object.matrix.decompose(object.position, object.quaternion, object.scale);
        } else {
            if (data.position !== undefined) object.position.fromArray(data.position);
            if (data.rotation !== undefined) object.rotation.fromArray(data.rotation);
            if (data.quaternion !== undefined) object.quaternion.fromArray(data.quaternion);
            if (data.scale !== undefined) object.scale.fromArray(data.scale);
        }
        if (data.up !== undefined) object.up.fromArray(data.up);
        if (data.castShadow !== undefined) object.castShadow = data.castShadow;
        if (data.receiveShadow !== undefined) object.receiveShadow = data.receiveShadow;
        if (data.shadow) {
            if (data.shadow.bias !== undefined) object.shadow.bias = data.shadow.bias;
            if (data.shadow.normalBias !== undefined) object.shadow.normalBias = data.shadow.normalBias;
            if (data.shadow.radius !== undefined) object.shadow.radius = data.shadow.radius;
            if (data.shadow.mapSize !== undefined) object.shadow.mapSize.fromArray(data.shadow.mapSize);
            if (data.shadow.camera !== undefined) object.shadow.camera = this.parseObject(data.shadow.camera);
        }
        if (data.visible !== undefined) object.visible = data.visible;
        if (data.frustumCulled !== undefined) object.frustumCulled = data.frustumCulled;
        if (data.renderOrder !== undefined) object.renderOrder = data.renderOrder;
        if (data.userData !== undefined) object.userData = data.userData;
        if (data.layers !== undefined) object.layers.mask = data.layers;
        if (data.children !== undefined) {
            const children = data.children;
            for(let i = 0; i < children.length; i++)object.add(this.parseObject(children[i], geometries, materials, textures, animations));
        }
        if (data.animations !== undefined) {
            const objectAnimations = data.animations;
            for(let i = 0; i < objectAnimations.length; i++){
                const uuid = objectAnimations[i];
                object.animations.push(animations[uuid]);
            }
        }
        if (data.type === "LOD") {
            if (data.autoUpdate !== undefined) object.autoUpdate = data.autoUpdate;
            const levels = data.levels;
            for(let l = 0; l < levels.length; l++){
                const level = levels[l];
                const child = object.getObjectByProperty("uuid", level.object);
                if (child !== undefined) object.addLevel(child, level.distance, level.hysteresis);
            }
        }
        return object;
    }
    bindSkeletons(object, skeletons) {
        if (Object.keys(skeletons).length === 0) return;
        object.traverse(function(child) {
            if (child.isSkinnedMesh === true && child.skeleton !== undefined) {
                const skeleton = skeletons[child.skeleton];
                if (skeleton === undefined) console.warn("THREE.ObjectLoader: No skeleton found with UUID:", child.skeleton);
                else child.bind(skeleton, child.bindMatrix);
            }
        });
    }
}
const TEXTURE_MAPPING = {
    UVMapping: UVMapping,
    CubeReflectionMapping: CubeReflectionMapping,
    CubeRefractionMapping: CubeRefractionMapping,
    EquirectangularReflectionMapping: EquirectangularReflectionMapping,
    EquirectangularRefractionMapping: EquirectangularRefractionMapping,
    CubeUVReflectionMapping: CubeUVReflectionMapping
};
const TEXTURE_WRAPPING = {
    RepeatWrapping: RepeatWrapping,
    ClampToEdgeWrapping: ClampToEdgeWrapping,
    MirroredRepeatWrapping: MirroredRepeatWrapping
};
const TEXTURE_FILTER = {
    NearestFilter: NearestFilter,
    NearestMipmapNearestFilter: NearestMipmapNearestFilter,
    NearestMipmapLinearFilter: NearestMipmapLinearFilter,
    LinearFilter: LinearFilter,
    LinearMipmapNearestFilter: LinearMipmapNearestFilter,
    LinearMipmapLinearFilter: LinearMipmapLinearFilter
};
class ImageBitmapLoader extends Loader {
    constructor(manager){
        super(manager);
        this.isImageBitmapLoader = true;
        if (typeof createImageBitmap === "undefined") console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported.");
        if (typeof fetch === "undefined") console.warn("THREE.ImageBitmapLoader: fetch() not supported.");
        this.options = {
            premultiplyAlpha: "none"
        };
    }
    setOptions(options) {
        this.options = options;
        return this;
    }
    load(url, onLoad, onProgress, onError) {
        if (url === undefined) url = "";
        if (this.path !== undefined) url = this.path + url;
        url = this.manager.resolveURL(url);
        const scope = this;
        const cached = Cache.get(url);
        if (cached !== undefined) {
            scope.manager.itemStart(url);
            setTimeout(function() {
                if (onLoad) onLoad(cached);
                scope.manager.itemEnd(url);
            }, 0);
            return cached;
        }
        const fetchOptions = {};
        fetchOptions.credentials = this.crossOrigin === "anonymous" ? "same-origin" : "include";
        fetchOptions.headers = this.requestHeader;
        fetch(url, fetchOptions).then(function(res) {
            return res.blob();
        }).then(function(blob) {
            return createImageBitmap(blob, Object.assign(scope.options, {
                colorSpaceConversion: "none"
            }));
        }).then(function(imageBitmap) {
            Cache.add(url, imageBitmap);
            if (onLoad) onLoad(imageBitmap);
            scope.manager.itemEnd(url);
        }).catch(function(e) {
            if (onError) onError(e);
            scope.manager.itemError(url);
            scope.manager.itemEnd(url);
        });
        scope.manager.itemStart(url);
    }
}
let _context;
class AudioContext {
    static getContext() {
        if (_context === undefined) _context = new (window.AudioContext || window.webkitAudioContext)();
        return _context;
    }
    static setContext(value) {
        _context = value;
    }
}
class AudioLoader extends Loader {
    constructor(manager){
        super(manager);
    }
    load(url, onLoad, onProgress, onError) {
        const scope = this;
        const loader = new FileLoader(this.manager);
        loader.setResponseType("arraybuffer");
        loader.setPath(this.path);
        loader.setRequestHeader(this.requestHeader);
        loader.setWithCredentials(this.withCredentials);
        loader.load(url, function(buffer) {
            try {
                // Create a copy of the buffer. The `decodeAudioData` method
                // detaches the buffer when complete, preventing reuse.
                const bufferCopy = buffer.slice(0);
                const context = AudioContext.getContext();
                context.decodeAudioData(bufferCopy, function(audioBuffer) {
                    onLoad(audioBuffer);
                }, handleError);
            } catch (e) {
                handleError(e);
            }
        }, onProgress, onError);
        function handleError(e) {
            if (onError) onError(e);
            else console.error(e);
            scope.manager.itemError(url);
        }
    }
}
class HemisphereLightProbe extends LightProbe {
    constructor(skyColor, groundColor, intensity = 1){
        super(undefined, intensity);
        this.isHemisphereLightProbe = true;
        const color1 = new Color().set(skyColor);
        const color2 = new Color().set(groundColor);
        const sky = new Vector3(color1.r, color1.g, color1.b);
        const ground = new Vector3(color2.r, color2.g, color2.b);
        // without extra factor of PI in the shader, should = 1 / Math.sqrt( Math.PI );
        const c0 = Math.sqrt(Math.PI);
        const c1 = c0 * Math.sqrt(0.75);
        this.sh.coefficients[0].copy(sky).add(ground).multiplyScalar(c0);
        this.sh.coefficients[1].copy(sky).sub(ground).multiplyScalar(c1);
    }
}
class AmbientLightProbe extends LightProbe {
    constructor(color, intensity = 1){
        super(undefined, intensity);
        this.isAmbientLightProbe = true;
        const color1 = new Color().set(color);
        // without extra factor of PI in the shader, would be 2 / Math.sqrt( Math.PI );
        this.sh.coefficients[0].set(color1.r, color1.g, color1.b).multiplyScalar(2 * Math.sqrt(Math.PI));
    }
}
const _eyeRight = /*@__PURE__*/ new Matrix4();
const _eyeLeft = /*@__PURE__*/ new Matrix4();
const _projectionMatrix = /*@__PURE__*/ new Matrix4();
class StereoCamera {
    constructor(){
        this.type = "StereoCamera";
        this.aspect = 1;
        this.eyeSep = 0.064;
        this.cameraL = new PerspectiveCamera();
        this.cameraL.layers.enable(1);
        this.cameraL.matrixAutoUpdate = false;
        this.cameraR = new PerspectiveCamera();
        this.cameraR.layers.enable(2);
        this.cameraR.matrixAutoUpdate = false;
        this._cache = {
            focus: null,
            fov: null,
            aspect: null,
            near: null,
            far: null,
            zoom: null,
            eyeSep: null
        };
    }
    update(camera) {
        const cache = this._cache;
        const needsUpdate = cache.focus !== camera.focus || cache.fov !== camera.fov || cache.aspect !== camera.aspect * this.aspect || cache.near !== camera.near || cache.far !== camera.far || cache.zoom !== camera.zoom || cache.eyeSep !== this.eyeSep;
        if (needsUpdate) {
            cache.focus = camera.focus;
            cache.fov = camera.fov;
            cache.aspect = camera.aspect * this.aspect;
            cache.near = camera.near;
            cache.far = camera.far;
            cache.zoom = camera.zoom;
            cache.eyeSep = this.eyeSep;
            // Off-axis stereoscopic effect based on
            // http://paulbourke.net/stereographics/stereorender/
            _projectionMatrix.copy(camera.projectionMatrix);
            const eyeSepHalf = cache.eyeSep / 2;
            const eyeSepOnProjection = eyeSepHalf * cache.near / cache.focus;
            const ymax = cache.near * Math.tan(DEG2RAD * cache.fov * 0.5) / cache.zoom;
            let xmin, xmax;
            // translate xOffset
            _eyeLeft.elements[12] = -eyeSepHalf;
            _eyeRight.elements[12] = eyeSepHalf;
            // for left eye
            xmin = -ymax * cache.aspect + eyeSepOnProjection;
            xmax = ymax * cache.aspect + eyeSepOnProjection;
            _projectionMatrix.elements[0] = 2 * cache.near / (xmax - xmin);
            _projectionMatrix.elements[8] = (xmax + xmin) / (xmax - xmin);
            this.cameraL.projectionMatrix.copy(_projectionMatrix);
            // for right eye
            xmin = -ymax * cache.aspect - eyeSepOnProjection;
            xmax = ymax * cache.aspect - eyeSepOnProjection;
            _projectionMatrix.elements[0] = 2 * cache.near / (xmax - xmin);
            _projectionMatrix.elements[8] = (xmax + xmin) / (xmax - xmin);
            this.cameraR.projectionMatrix.copy(_projectionMatrix);
        }
        this.cameraL.matrixWorld.copy(camera.matrixWorld).multiply(_eyeLeft);
        this.cameraR.matrixWorld.copy(camera.matrixWorld).multiply(_eyeRight);
    }
}
class Clock {
    constructor(autoStart = true){
        this.autoStart = autoStart;
        this.startTime = 0;
        this.oldTime = 0;
        this.elapsedTime = 0;
        this.running = false;
    }
    start() {
        this.startTime = now();
        this.oldTime = this.startTime;
        this.elapsedTime = 0;
        this.running = true;
    }
    stop() {
        this.getElapsedTime();
        this.running = false;
        this.autoStart = false;
    }
    getElapsedTime() {
        this.getDelta();
        return this.elapsedTime;
    }
    getDelta() {
        let diff = 0;
        if (this.autoStart && !this.running) {
            this.start();
            return 0;
        }
        if (this.running) {
            const newTime = now();
            diff = (newTime - this.oldTime) / 1000;
            this.oldTime = newTime;
            this.elapsedTime += diff;
        }
        return diff;
    }
}
function now() {
    return (typeof performance === "undefined" ? Date : performance).now(); // see #10732
}
const _position$1 = /*@__PURE__*/ new Vector3();
const _quaternion$1 = /*@__PURE__*/ new Quaternion();
const _scale$1 = /*@__PURE__*/ new Vector3();
const _orientation$1 = /*@__PURE__*/ new Vector3();
class AudioListener extends Object3D {
    constructor(){
        super();
        this.type = "AudioListener";
        this.context = AudioContext.getContext();
        this.gain = this.context.createGain();
        this.gain.connect(this.context.destination);
        this.filter = null;
        this.timeDelta = 0;
        // private
        this._clock = new Clock();
    }
    getInput() {
        return this.gain;
    }
    removeFilter() {
        if (this.filter !== null) {
            this.gain.disconnect(this.filter);
            this.filter.disconnect(this.context.destination);
            this.gain.connect(this.context.destination);
            this.filter = null;
        }
        return this;
    }
    getFilter() {
        return this.filter;
    }
    setFilter(value) {
        if (this.filter !== null) {
            this.gain.disconnect(this.filter);
            this.filter.disconnect(this.context.destination);
        } else this.gain.disconnect(this.context.destination);
        this.filter = value;
        this.gain.connect(this.filter);
        this.filter.connect(this.context.destination);
        return this;
    }
    getMasterVolume() {
        return this.gain.gain.value;
    }
    setMasterVolume(value) {
        this.gain.gain.setTargetAtTime(value, this.context.currentTime, 0.01);
        return this;
    }
    updateMatrixWorld(force) {
        super.updateMatrixWorld(force);
        const listener = this.context.listener;
        const up = this.up;
        this.timeDelta = this._clock.getDelta();
        this.matrixWorld.decompose(_position$1, _quaternion$1, _scale$1);
        _orientation$1.set(0, 0, -1).applyQuaternion(_quaternion$1);
        if (listener.positionX) {
            // code path for Chrome (see #14393)
            const endTime = this.context.currentTime + this.timeDelta;
            listener.positionX.linearRampToValueAtTime(_position$1.x, endTime);
            listener.positionY.linearRampToValueAtTime(_position$1.y, endTime);
            listener.positionZ.linearRampToValueAtTime(_position$1.z, endTime);
            listener.forwardX.linearRampToValueAtTime(_orientation$1.x, endTime);
            listener.forwardY.linearRampToValueAtTime(_orientation$1.y, endTime);
            listener.forwardZ.linearRampToValueAtTime(_orientation$1.z, endTime);
            listener.upX.linearRampToValueAtTime(up.x, endTime);
            listener.upY.linearRampToValueAtTime(up.y, endTime);
            listener.upZ.linearRampToValueAtTime(up.z, endTime);
        } else {
            listener.setPosition(_position$1.x, _position$1.y, _position$1.z);
            listener.setOrientation(_orientation$1.x, _orientation$1.y, _orientation$1.z, up.x, up.y, up.z);
        }
    }
}
class Audio extends Object3D {
    constructor(listener){
        super();
        this.type = "Audio";
        this.listener = listener;
        this.context = listener.context;
        this.gain = this.context.createGain();
        this.gain.connect(listener.getInput());
        this.autoplay = false;
        this.buffer = null;
        this.detune = 0;
        this.loop = false;
        this.loopStart = 0;
        this.loopEnd = 0;
        this.offset = 0;
        this.duration = undefined;
        this.playbackRate = 1;
        this.isPlaying = false;
        this.hasPlaybackControl = true;
        this.source = null;
        this.sourceType = "empty";
        this._startedAt = 0;
        this._progress = 0;
        this._connected = false;
        this.filters = [];
    }
    getOutput() {
        return this.gain;
    }
    setNodeSource(audioNode) {
        this.hasPlaybackControl = false;
        this.sourceType = "audioNode";
        this.source = audioNode;
        this.connect();
        return this;
    }
    setMediaElementSource(mediaElement) {
        this.hasPlaybackControl = false;
        this.sourceType = "mediaNode";
        this.source = this.context.createMediaElementSource(mediaElement);
        this.connect();
        return this;
    }
    setMediaStreamSource(mediaStream) {
        this.hasPlaybackControl = false;
        this.sourceType = "mediaStreamNode";
        this.source = this.context.createMediaStreamSource(mediaStream);
        this.connect();
        return this;
    }
    setBuffer(audioBuffer) {
        this.buffer = audioBuffer;
        this.sourceType = "buffer";
        if (this.autoplay) this.play();
        return this;
    }
    play(delay = 0) {
        if (this.isPlaying === true) {
            console.warn("THREE.Audio: Audio is already playing.");
            return;
        }
        if (this.hasPlaybackControl === false) {
            console.warn("THREE.Audio: this Audio has no playback control.");
            return;
        }
        this._startedAt = this.context.currentTime + delay;
        const source = this.context.createBufferSource();
        source.buffer = this.buffer;
        source.loop = this.loop;
        source.loopStart = this.loopStart;
        source.loopEnd = this.loopEnd;
        source.onended = this.onEnded.bind(this);
        source.start(this._startedAt, this._progress + this.offset, this.duration);
        this.isPlaying = true;
        this.source = source;
        this.setDetune(this.detune);
        this.setPlaybackRate(this.playbackRate);
        return this.connect();
    }
    pause() {
        if (this.hasPlaybackControl === false) {
            console.warn("THREE.Audio: this Audio has no playback control.");
            return;
        }
        if (this.isPlaying === true) {
            // update current progress
            this._progress += Math.max(this.context.currentTime - this._startedAt, 0) * this.playbackRate;
            if (this.loop === true) // ensure _progress does not exceed duration with looped audios
            this._progress = this._progress % (this.duration || this.buffer.duration);
            this.source.stop();
            this.source.onended = null;
            this.isPlaying = false;
        }
        return this;
    }
    stop() {
        if (this.hasPlaybackControl === false) {
            console.warn("THREE.Audio: this Audio has no playback control.");
            return;
        }
        this._progress = 0;
        if (this.source !== null) {
            this.source.stop();
            this.source.onended = null;
        }
        this.isPlaying = false;
        return this;
    }
    connect() {
        if (this.filters.length > 0) {
            this.source.connect(this.filters[0]);
            for(let i = 1, l = this.filters.length; i < l; i++)this.filters[i - 1].connect(this.filters[i]);
            this.filters[this.filters.length - 1].connect(this.getOutput());
        } else this.source.connect(this.getOutput());
        this._connected = true;
        return this;
    }
    disconnect() {
        if (this._connected === false) return;
        if (this.filters.length > 0) {
            this.source.disconnect(this.filters[0]);
            for(let i = 1, l = this.filters.length; i < l; i++)this.filters[i - 1].disconnect(this.filters[i]);
            this.filters[this.filters.length - 1].disconnect(this.getOutput());
        } else this.source.disconnect(this.getOutput());
        this._connected = false;
        return this;
    }
    getFilters() {
        return this.filters;
    }
    setFilters(value) {
        if (!value) value = [];
        if (this._connected === true) {
            this.disconnect();
            this.filters = value.slice();
            this.connect();
        } else this.filters = value.slice();
        return this;
    }
    setDetune(value) {
        this.detune = value;
        if (this.source.detune === undefined) return; // only set detune when available
        if (this.isPlaying === true) this.source.detune.setTargetAtTime(this.detune, this.context.currentTime, 0.01);
        return this;
    }
    getDetune() {
        return this.detune;
    }
    getFilter() {
        return this.getFilters()[0];
    }
    setFilter(filter) {
        return this.setFilters(filter ? [
            filter
        ] : []);
    }
    setPlaybackRate(value) {
        if (this.hasPlaybackControl === false) {
            console.warn("THREE.Audio: this Audio has no playback control.");
            return;
        }
        this.playbackRate = value;
        if (this.isPlaying === true) this.source.playbackRate.setTargetAtTime(this.playbackRate, this.context.currentTime, 0.01);
        return this;
    }
    getPlaybackRate() {
        return this.playbackRate;
    }
    onEnded() {
        this.isPlaying = false;
    }
    getLoop() {
        if (this.hasPlaybackControl === false) {
            console.warn("THREE.Audio: this Audio has no playback control.");
            return false;
        }
        return this.loop;
    }
    setLoop(value) {
        if (this.hasPlaybackControl === false) {
            console.warn("THREE.Audio: this Audio has no playback control.");
            return;
        }
        this.loop = value;
        if (this.isPlaying === true) this.source.loop = this.loop;
        return this;
    }
    setLoopStart(value) {
        this.loopStart = value;
        return this;
    }
    setLoopEnd(value) {
        this.loopEnd = value;
        return this;
    }
    getVolume() {
        return this.gain.gain.value;
    }
    setVolume(value) {
        this.gain.gain.setTargetAtTime(value, this.context.currentTime, 0.01);
        return this;
    }
}
const _position = /*@__PURE__*/ new Vector3();
const _quaternion = /*@__PURE__*/ new Quaternion();
const _scale = /*@__PURE__*/ new Vector3();
const _orientation = /*@__PURE__*/ new Vector3();
class PositionalAudio extends Audio {
    constructor(listener){
        super(listener);
        this.panner = this.context.createPanner();
        this.panner.panningModel = "HRTF";
        this.panner.connect(this.gain);
    }
    connect() {
        super.connect();
        this.panner.connect(this.gain);
    }
    disconnect() {
        super.disconnect();
        this.panner.disconnect(this.gain);
    }
    getOutput() {
        return this.panner;
    }
    getRefDistance() {
        return this.panner.refDistance;
    }
    setRefDistance(value) {
        this.panner.refDistance = value;
        return this;
    }
    getRolloffFactor() {
        return this.panner.rolloffFactor;
    }
    setRolloffFactor(value) {
        this.panner.rolloffFactor = value;
        return this;
    }
    getDistanceModel() {
        return this.panner.distanceModel;
    }
    setDistanceModel(value) {
        this.panner.distanceModel = value;
        return this;
    }
    getMaxDistance() {
        return this.panner.maxDistance;
    }
    setMaxDistance(value) {
        this.panner.maxDistance = value;
        return this;
    }
    setDirectionalCone(coneInnerAngle, coneOuterAngle, coneOuterGain) {
        this.panner.coneInnerAngle = coneInnerAngle;
        this.panner.coneOuterAngle = coneOuterAngle;
        this.panner.coneOuterGain = coneOuterGain;
        return this;
    }
    updateMatrixWorld(force) {
        super.updateMatrixWorld(force);
        if (this.hasPlaybackControl === true && this.isPlaying === false) return;
        this.matrixWorld.decompose(_position, _quaternion, _scale);
        _orientation.set(0, 0, 1).applyQuaternion(_quaternion);
        const panner = this.panner;
        if (panner.positionX) {
            // code path for Chrome and Firefox (see #14393)
            const endTime = this.context.currentTime + this.listener.timeDelta;
            panner.positionX.linearRampToValueAtTime(_position.x, endTime);
            panner.positionY.linearRampToValueAtTime(_position.y, endTime);
            panner.positionZ.linearRampToValueAtTime(_position.z, endTime);
            panner.orientationX.linearRampToValueAtTime(_orientation.x, endTime);
            panner.orientationY.linearRampToValueAtTime(_orientation.y, endTime);
            panner.orientationZ.linearRampToValueAtTime(_orientation.z, endTime);
        } else {
            panner.setPosition(_position.x, _position.y, _position.z);
            panner.setOrientation(_orientation.x, _orientation.y, _orientation.z);
        }
    }
}
class AudioAnalyser {
    constructor(audio, fftSize = 2048){
        this.analyser = audio.context.createAnalyser();
        this.analyser.fftSize = fftSize;
        this.data = new Uint8Array(this.analyser.frequencyBinCount);
        audio.getOutput().connect(this.analyser);
    }
    getFrequencyData() {
        this.analyser.getByteFrequencyData(this.data);
        return this.data;
    }
    getAverageFrequency() {
        let value = 0;
        const data = this.getFrequencyData();
        for(let i = 0; i < data.length; i++)value += data[i];
        return value / data.length;
    }
}
class PropertyMixer {
    constructor(binding, typeName, valueSize){
        this.binding = binding;
        this.valueSize = valueSize;
        let mixFunction, mixFunctionAdditive, setIdentity;
        // buffer layout: [ incoming | accu0 | accu1 | orig | addAccu | (optional work) ]
        //
        // interpolators can use .buffer as their .result
        // the data then goes to 'incoming'
        //
        // 'accu0' and 'accu1' are used frame-interleaved for
        // the cumulative result and are compared to detect
        // changes
        //
        // 'orig' stores the original state of the property
        //
        // 'add' is used for additive cumulative results
        //
        // 'work' is optional and is only present for quaternion types. It is used
        // to store intermediate quaternion multiplication results
        switch(typeName){
            case "quaternion":
                mixFunction = this._slerp;
                mixFunctionAdditive = this._slerpAdditive;
                setIdentity = this._setAdditiveIdentityQuaternion;
                this.buffer = new Float64Array(valueSize * 6);
                this._workIndex = 5;
                break;
            case "string":
            case "bool":
                mixFunction = this._select;
                // Use the regular mix function and for additive on these types,
                // additive is not relevant for non-numeric types
                mixFunctionAdditive = this._select;
                setIdentity = this._setAdditiveIdentityOther;
                this.buffer = new Array(valueSize * 5);
                break;
            default:
                mixFunction = this._lerp;
                mixFunctionAdditive = this._lerpAdditive;
                setIdentity = this._setAdditiveIdentityNumeric;
                this.buffer = new Float64Array(valueSize * 5);
        }
        this._mixBufferRegion = mixFunction;
        this._mixBufferRegionAdditive = mixFunctionAdditive;
        this._setIdentity = setIdentity;
        this._origIndex = 3;
        this._addIndex = 4;
        this.cumulativeWeight = 0;
        this.cumulativeWeightAdditive = 0;
        this.useCount = 0;
        this.referenceCount = 0;
    }
    // accumulate data in the 'incoming' region into 'accu<i>'
    accumulate(accuIndex, weight) {
        // note: happily accumulating nothing when weight = 0, the caller knows
        // the weight and shouldn't have made the call in the first place
        const buffer = this.buffer, stride = this.valueSize, offset = accuIndex * stride + stride;
        let currentWeight = this.cumulativeWeight;
        if (currentWeight === 0) {
            // accuN := incoming * weight
            for(let i = 0; i !== stride; ++i)buffer[offset + i] = buffer[i];
            currentWeight = weight;
        } else {
            // accuN := accuN + incoming * weight
            currentWeight += weight;
            const mix = weight / currentWeight;
            this._mixBufferRegion(buffer, offset, 0, mix, stride);
        }
        this.cumulativeWeight = currentWeight;
    }
    // accumulate data in the 'incoming' region into 'add'
    accumulateAdditive(weight) {
        const buffer = this.buffer, stride = this.valueSize, offset = stride * this._addIndex;
        if (this.cumulativeWeightAdditive === 0) // add = identity
        this._setIdentity();
        // add := add + incoming * weight
        this._mixBufferRegionAdditive(buffer, offset, 0, weight, stride);
        this.cumulativeWeightAdditive += weight;
    }
    // apply the state of 'accu<i>' to the binding when accus differ
    apply(accuIndex) {
        const stride = this.valueSize, buffer = this.buffer, offset = accuIndex * stride + stride, weight = this.cumulativeWeight, weightAdditive = this.cumulativeWeightAdditive, binding = this.binding;
        this.cumulativeWeight = 0;
        this.cumulativeWeightAdditive = 0;
        if (weight < 1) {
            // accuN := accuN + original * ( 1 - cumulativeWeight )
            const originalValueOffset = stride * this._origIndex;
            this._mixBufferRegion(buffer, offset, originalValueOffset, 1 - weight, stride);
        }
        if (weightAdditive > 0) // accuN := accuN + additive accuN
        this._mixBufferRegionAdditive(buffer, offset, this._addIndex * stride, 1, stride);
        for(let i = stride, e = stride + stride; i !== e; ++i)if (buffer[i] !== buffer[i + stride]) {
            // value has changed -> update scene graph
            binding.setValue(buffer, offset);
            break;
        }
    }
    // remember the state of the bound property and copy it to both accus
    saveOriginalState() {
        const binding = this.binding;
        const buffer = this.buffer, stride = this.valueSize, originalValueOffset = stride * this._origIndex;
        binding.getValue(buffer, originalValueOffset);
        // accu[0..1] := orig -- initially detect changes against the original
        for(let i = stride, e = originalValueOffset; i !== e; ++i)buffer[i] = buffer[originalValueOffset + i % stride];
        // Add to identity for additive
        this._setIdentity();
        this.cumulativeWeight = 0;
        this.cumulativeWeightAdditive = 0;
    }
    // apply the state previously taken via 'saveOriginalState' to the binding
    restoreOriginalState() {
        const originalValueOffset = this.valueSize * 3;
        this.binding.setValue(this.buffer, originalValueOffset);
    }
    _setAdditiveIdentityNumeric() {
        const startIndex = this._addIndex * this.valueSize;
        const endIndex = startIndex + this.valueSize;
        for(let i = startIndex; i < endIndex; i++)this.buffer[i] = 0;
    }
    _setAdditiveIdentityQuaternion() {
        this._setAdditiveIdentityNumeric();
        this.buffer[this._addIndex * this.valueSize + 3] = 1;
    }
    _setAdditiveIdentityOther() {
        const startIndex = this._origIndex * this.valueSize;
        const targetIndex = this._addIndex * this.valueSize;
        for(let i = 0; i < this.valueSize; i++)this.buffer[targetIndex + i] = this.buffer[startIndex + i];
    }
    // mix functions
    _select(buffer, dstOffset, srcOffset, t, stride) {
        if (t >= 0.5) for(let i = 0; i !== stride; ++i)buffer[dstOffset + i] = buffer[srcOffset + i];
    }
    _slerp(buffer, dstOffset, srcOffset, t) {
        Quaternion.slerpFlat(buffer, dstOffset, buffer, dstOffset, buffer, srcOffset, t);
    }
    _slerpAdditive(buffer, dstOffset, srcOffset, t, stride) {
        const workOffset = this._workIndex * stride;
        // Store result in intermediate buffer offset
        Quaternion.multiplyQuaternionsFlat(buffer, workOffset, buffer, dstOffset, buffer, srcOffset);
        // Slerp to the intermediate result
        Quaternion.slerpFlat(buffer, dstOffset, buffer, dstOffset, buffer, workOffset, t);
    }
    _lerp(buffer, dstOffset, srcOffset, t, stride) {
        const s = 1 - t;
        for(let i = 0; i !== stride; ++i){
            const j = dstOffset + i;
            buffer[j] = buffer[j] * s + buffer[srcOffset + i] * t;
        }
    }
    _lerpAdditive(buffer, dstOffset, srcOffset, t, stride) {
        for(let i = 0; i !== stride; ++i){
            const j = dstOffset + i;
            buffer[j] = buffer[j] + buffer[srcOffset + i] * t;
        }
    }
}
// Characters [].:/ are reserved for track binding syntax.
const _RESERVED_CHARS_RE = "\\[\\]\\.:\\/";
const _reservedRe = new RegExp("[" + _RESERVED_CHARS_RE + "]", "g");
// Attempts to allow node names from any language. ES5's `\w` regexp matches
// only latin characters, and the unicode \p{L} is not yet supported. So
// instead, we exclude reserved characters and match everything else.
const _wordChar = "[^" + _RESERVED_CHARS_RE + "]";
const _wordCharOrDot = "[^" + _RESERVED_CHARS_RE.replace("\\.", "") + "]";
// Parent directories, delimited by '/' or ':'. Currently unused, but must
// be matched to parse the rest of the track name.
const _directoryRe = /*@__PURE__*/ /((?:WC+[\/:])*)/.source.replace("WC", _wordChar);
// Target node. May contain word characters (a-zA-Z0-9_) and '.' or '-'.
const _nodeRe = /*@__PURE__*/ /(WCOD+)?/.source.replace("WCOD", _wordCharOrDot);
// Object on target node, and accessor. May not contain reserved
// characters. Accessor may contain any character except closing bracket.
const _objectRe = /*@__PURE__*/ /(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC", _wordChar);
// Property and accessor. May not contain reserved characters. Accessor may
// contain any non-bracket characters.
const _propertyRe = /*@__PURE__*/ /\.(WC+)(?:\[(.+)\])?/.source.replace("WC", _wordChar);
const _trackRe = new RegExp("^" + _directoryRe + _nodeRe + _objectRe + _propertyRe + "$");
const _supportedObjectNames = [
    "material",
    "materials",
    "bones",
    "map"
];
class Composite {
    constructor(targetGroup, path, optionalParsedPath){
        const parsedPath = optionalParsedPath || PropertyBinding.parseTrackName(path);
        this._targetGroup = targetGroup;
        this._bindings = targetGroup.subscribe_(path, parsedPath);
    }
    getValue(array, offset) {
        this.bind(); // bind all binding
        const firstValidIndex = this._targetGroup.nCachedObjects_, binding = this._bindings[firstValidIndex];
        // and only call .getValue on the first
        if (binding !== undefined) binding.getValue(array, offset);
    }
    setValue(array, offset) {
        const bindings = this._bindings;
        for(let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i)bindings[i].setValue(array, offset);
    }
    bind() {
        const bindings = this._bindings;
        for(let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i)bindings[i].bind();
    }
    unbind() {
        const bindings = this._bindings;
        for(let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i)bindings[i].unbind();
    }
}
// Note: This class uses a State pattern on a per-method basis:
// 'bind' sets 'this.getValue' / 'setValue' and shadows the
// prototype version of these methods with one that represents
// the bound state. When the property is not found, the methods
// become no-ops.
class PropertyBinding {
    constructor(rootNode, path, parsedPath){
        this.path = path;
        this.parsedPath = parsedPath || PropertyBinding.parseTrackName(path);
        this.node = PropertyBinding.findNode(rootNode, this.parsedPath.nodeName);
        this.rootNode = rootNode;
        // initial state of these methods that calls 'bind'
        this.getValue = this._getValue_unbound;
        this.setValue = this._setValue_unbound;
    }
    static create(root, path, parsedPath) {
        if (!(root && root.isAnimationObjectGroup)) return new PropertyBinding(root, path, parsedPath);
        else return new PropertyBinding.Composite(root, path, parsedPath);
    }
    /**
	 * Replaces spaces with underscores and removes unsupported characters from
	 * node names, to ensure compatibility with parseTrackName().
	 *
	 * @param {string} name Node name to be sanitized.
	 * @return {string}
	 */ static sanitizeNodeName(name) {
        return name.replace(/\s/g, "_").replace(_reservedRe, "");
    }
    static parseTrackName(trackName) {
        const matches = _trackRe.exec(trackName);
        if (matches === null) throw new Error("PropertyBinding: Cannot parse trackName: " + trackName);
        const results = {
            // directoryName: matches[ 1 ], // (tschw) currently unused
            nodeName: matches[2],
            objectName: matches[3],
            objectIndex: matches[4],
            propertyName: matches[5],
            propertyIndex: matches[6]
        };
        const lastDot = results.nodeName && results.nodeName.lastIndexOf(".");
        if (lastDot !== undefined && lastDot !== -1) {
            const objectName = results.nodeName.substring(lastDot + 1);
            // Object names must be checked against an allowlist. Otherwise, there
            // is no way to parse 'foo.bar.baz': 'baz' must be a property, but
            // 'bar' could be the objectName, or part of a nodeName (which can
            // include '.' characters).
            if (_supportedObjectNames.indexOf(objectName) !== -1) {
                results.nodeName = results.nodeName.substring(0, lastDot);
                results.objectName = objectName;
            }
        }
        if (results.propertyName === null || results.propertyName.length === 0) throw new Error("PropertyBinding: can not parse propertyName from trackName: " + trackName);
        return results;
    }
    static findNode(root, nodeName) {
        if (nodeName === undefined || nodeName === "" || nodeName === "." || nodeName === -1 || nodeName === root.name || nodeName === root.uuid) return root;
        // search into skeleton bones.
        if (root.skeleton) {
            const bone = root.skeleton.getBoneByName(nodeName);
            if (bone !== undefined) return bone;
        }
        // search into node subtree.
        if (root.children) {
            const searchNodeSubtree = function(children) {
                for(let i = 0; i < children.length; i++){
                    const childNode = children[i];
                    if (childNode.name === nodeName || childNode.uuid === nodeName) return childNode;
                    const result = searchNodeSubtree(childNode.children);
                    if (result) return result;
                }
                return null;
            };
            const subTreeNode = searchNodeSubtree(root.children);
            if (subTreeNode) return subTreeNode;
        }
        return null;
    }
    // these are used to "bind" a nonexistent property
    _getValue_unavailable() {}
    _setValue_unavailable() {}
    // Getters
    _getValue_direct(buffer, offset) {
        buffer[offset] = this.targetObject[this.propertyName];
    }
    _getValue_array(buffer, offset) {
        const source = this.resolvedProperty;
        for(let i = 0, n = source.length; i !== n; ++i)buffer[offset++] = source[i];
    }
    _getValue_arrayElement(buffer, offset) {
        buffer[offset] = this.resolvedProperty[this.propertyIndex];
    }
    _getValue_toArray(buffer, offset) {
        this.resolvedProperty.toArray(buffer, offset);
    }
    // Direct
    _setValue_direct(buffer, offset) {
        this.targetObject[this.propertyName] = buffer[offset];
    }
    _setValue_direct_setNeedsUpdate(buffer, offset) {
        this.targetObject[this.propertyName] = buffer[offset];
        this.targetObject.needsUpdate = true;
    }
    _setValue_direct_setMatrixWorldNeedsUpdate(buffer, offset) {
        this.targetObject[this.propertyName] = buffer[offset];
        this.targetObject.matrixWorldNeedsUpdate = true;
    }
    // EntireArray
    _setValue_array(buffer, offset) {
        const dest = this.resolvedProperty;
        for(let i = 0, n = dest.length; i !== n; ++i)dest[i] = buffer[offset++];
    }
    _setValue_array_setNeedsUpdate(buffer, offset) {
        const dest = this.resolvedProperty;
        for(let i = 0, n = dest.length; i !== n; ++i)dest[i] = buffer[offset++];
        this.targetObject.needsUpdate = true;
    }
    _setValue_array_setMatrixWorldNeedsUpdate(buffer, offset) {
        const dest = this.resolvedProperty;
        for(let i = 0, n = dest.length; i !== n; ++i)dest[i] = buffer[offset++];
        this.targetObject.matrixWorldNeedsUpdate = true;
    }
    // ArrayElement
    _setValue_arrayElement(buffer, offset) {
        this.resolvedProperty[this.propertyIndex] = buffer[offset];
    }
    _setValue_arrayElement_setNeedsUpdate(buffer, offset) {
        this.resolvedProperty[this.propertyIndex] = buffer[offset];
        this.targetObject.needsUpdate = true;
    }
    _setValue_arrayElement_setMatrixWorldNeedsUpdate(buffer, offset) {
        this.resolvedProperty[this.propertyIndex] = buffer[offset];
        this.targetObject.matrixWorldNeedsUpdate = true;
    }
    // HasToFromArray
    _setValue_fromArray(buffer, offset) {
        this.resolvedProperty.fromArray(buffer, offset);
    }
    _setValue_fromArray_setNeedsUpdate(buffer, offset) {
        this.resolvedProperty.fromArray(buffer, offset);
        this.targetObject.needsUpdate = true;
    }
    _setValue_fromArray_setMatrixWorldNeedsUpdate(buffer, offset) {
        this.resolvedProperty.fromArray(buffer, offset);
        this.targetObject.matrixWorldNeedsUpdate = true;
    }
    _getValue_unbound(targetArray, offset) {
        this.bind();
        this.getValue(targetArray, offset);
    }
    _setValue_unbound(sourceArray, offset) {
        this.bind();
        this.setValue(sourceArray, offset);
    }
    // create getter / setter pair for a property in the scene graph
    bind() {
        let targetObject = this.node;
        const parsedPath = this.parsedPath;
        const objectName = parsedPath.objectName;
        const propertyName = parsedPath.propertyName;
        let propertyIndex = parsedPath.propertyIndex;
        if (!targetObject) {
            targetObject = PropertyBinding.findNode(this.rootNode, parsedPath.nodeName);
            this.node = targetObject;
        }
        // set fail state so we can just 'return' on error
        this.getValue = this._getValue_unavailable;
        this.setValue = this._setValue_unavailable;
        // ensure there is a value node
        if (!targetObject) {
            console.warn("THREE.PropertyBinding: No target node found for track: " + this.path + ".");
            return;
        }
        if (objectName) {
            let objectIndex = parsedPath.objectIndex;
            // special cases were we need to reach deeper into the hierarchy to get the face materials....
            switch(objectName){
                case "materials":
                    if (!targetObject.material) {
                        console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.", this);
                        return;
                    }
                    if (!targetObject.material.materials) {
                        console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.", this);
                        return;
                    }
                    targetObject = targetObject.material.materials;
                    break;
                case "bones":
                    if (!targetObject.skeleton) {
                        console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.", this);
                        return;
                    }
                    // potential future optimization: skip this if propertyIndex is already an integer
                    // and convert the integer string to a true integer.
                    targetObject = targetObject.skeleton.bones;
                    // support resolving morphTarget names into indices.
                    for(let i = 0; i < targetObject.length; i++)if (targetObject[i].name === objectIndex) {
                        objectIndex = i;
                        break;
                    }
                    break;
                case "map":
                    if ("map" in targetObject) {
                        targetObject = targetObject.map;
                        break;
                    }
                    if (!targetObject.material) {
                        console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.", this);
                        return;
                    }
                    if (!targetObject.material.map) {
                        console.error("THREE.PropertyBinding: Can not bind to material.map as node.material does not have a map.", this);
                        return;
                    }
                    targetObject = targetObject.material.map;
                    break;
                default:
                    if (targetObject[objectName] === undefined) {
                        console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.", this);
                        return;
                    }
                    targetObject = targetObject[objectName];
            }
            if (objectIndex !== undefined) {
                if (targetObject[objectIndex] === undefined) {
                    console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.", this, targetObject);
                    return;
                }
                targetObject = targetObject[objectIndex];
            }
        }
        // resolve property
        const nodeProperty = targetObject[propertyName];
        if (nodeProperty === undefined) {
            const nodeName = parsedPath.nodeName;
            console.error("THREE.PropertyBinding: Trying to update property for track: " + nodeName + "." + propertyName + " but it wasn't found.", targetObject);
            return;
        }
        // determine versioning scheme
        let versioning = this.Versioning.None;
        this.targetObject = targetObject;
        if (targetObject.needsUpdate !== undefined) versioning = this.Versioning.NeedsUpdate;
        else if (targetObject.matrixWorldNeedsUpdate !== undefined) versioning = this.Versioning.MatrixWorldNeedsUpdate;
        // determine how the property gets bound
        let bindingType = this.BindingType.Direct;
        if (propertyIndex !== undefined) {
            // access a sub element of the property array (only primitives are supported right now)
            if (propertyName === "morphTargetInfluences") {
                // potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.
                // support resolving morphTarget names into indices.
                if (!targetObject.geometry) {
                    console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.", this);
                    return;
                }
                if (!targetObject.geometry.morphAttributes) {
                    console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.", this);
                    return;
                }
                if (targetObject.morphTargetDictionary[propertyIndex] !== undefined) propertyIndex = targetObject.morphTargetDictionary[propertyIndex];
            }
            bindingType = this.BindingType.ArrayElement;
            this.resolvedProperty = nodeProperty;
            this.propertyIndex = propertyIndex;
        } else if (nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined) {
            // must use copy for Object3D.Euler/Quaternion
            bindingType = this.BindingType.HasFromToArray;
            this.resolvedProperty = nodeProperty;
        } else if (Array.isArray(nodeProperty)) {
            bindingType = this.BindingType.EntireArray;
            this.resolvedProperty = nodeProperty;
        } else this.propertyName = propertyName;
        // select getter / setter
        this.getValue = this.GetterByBindingType[bindingType];
        this.setValue = this.SetterByBindingTypeAndVersioning[bindingType][versioning];
    }
    unbind() {
        this.node = null;
        // back to the prototype version of getValue / setValue
        // note: avoiding to mutate the shape of 'this' via 'delete'
        this.getValue = this._getValue_unbound;
        this.setValue = this._setValue_unbound;
    }
}
PropertyBinding.Composite = Composite;
PropertyBinding.prototype.BindingType = {
    Direct: 0,
    EntireArray: 1,
    ArrayElement: 2,
    HasFromToArray: 3
};
PropertyBinding.prototype.Versioning = {
    None: 0,
    NeedsUpdate: 1,
    MatrixWorldNeedsUpdate: 2
};
PropertyBinding.prototype.GetterByBindingType = [
    PropertyBinding.prototype._getValue_direct,
    PropertyBinding.prototype._getValue_array,
    PropertyBinding.prototype._getValue_arrayElement,
    PropertyBinding.prototype._getValue_toArray
];
PropertyBinding.prototype.SetterByBindingTypeAndVersioning = [
    [
        // Direct
        PropertyBinding.prototype._setValue_direct,
        PropertyBinding.prototype._setValue_direct_setNeedsUpdate,
        PropertyBinding.prototype._setValue_direct_setMatrixWorldNeedsUpdate
    ],
    [
        // EntireArray
        PropertyBinding.prototype._setValue_array,
        PropertyBinding.prototype._setValue_array_setNeedsUpdate,
        PropertyBinding.prototype._setValue_array_setMatrixWorldNeedsUpdate
    ],
    [
        // ArrayElement
        PropertyBinding.prototype._setValue_arrayElement,
        PropertyBinding.prototype._setValue_arrayElement_setNeedsUpdate,
        PropertyBinding.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate
    ],
    [
        // HasToFromArray
        PropertyBinding.prototype._setValue_fromArray,
        PropertyBinding.prototype._setValue_fromArray_setNeedsUpdate,
        PropertyBinding.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate
    ]
];
/**
 *
 * A group of objects that receives a shared animation state.
 *
 * Usage:
 *
 *  - Add objects you would otherwise pass as 'root' to the
 *    constructor or the .clipAction method of AnimationMixer.
 *
 *  - Instead pass this object as 'root'.
 *
 *  - You can also add and remove objects later when the mixer
 *    is running.
 *
 * Note:
 *
 *    Objects of this class appear as one object to the mixer,
 *    so cache control of the individual objects must be done
 *    on the group.
 *
 * Limitation:
 *
 *  - The animated properties must be compatible among the
 *    all objects in the group.
 *
 *  - A single property can either be controlled through a
 *    target group or directly, but not both.
 */ class AnimationObjectGroup {
    constructor(){
        this.isAnimationObjectGroup = true;
        this.uuid = generateUUID();
        // cached objects followed by the active ones
        this._objects = Array.prototype.slice.call(arguments);
        this.nCachedObjects_ = 0; // threshold
        // note: read by PropertyBinding.Composite
        const indices = {};
        this._indicesByUUID = indices; // for bookkeeping
        for(let i = 0, n = arguments.length; i !== n; ++i)indices[arguments[i].uuid] = i;
        this._paths = []; // inside: string
        this._parsedPaths = []; // inside: { we don't care, here }
        this._bindings = []; // inside: Array< PropertyBinding >
        this._bindingsIndicesByPath = {}; // inside: indices in these arrays
        const scope = this;
        this.stats = {
            objects: {
                get total () {
                    return scope._objects.length;
                },
                get inUse () {
                    return this.total - scope.nCachedObjects_;
                }
            },
            get bindingsPerObject () {
                return scope._bindings.length;
            }
        };
    }
    add() {
        const objects = this._objects, indicesByUUID = this._indicesByUUID, paths = this._paths, parsedPaths = this._parsedPaths, bindings = this._bindings, nBindings = bindings.length;
        let knownObject = undefined, nObjects = objects.length, nCachedObjects = this.nCachedObjects_;
        for(let i = 0, n = arguments.length; i !== n; ++i){
            const object = arguments[i], uuid = object.uuid;
            let index = indicesByUUID[uuid];
            if (index === undefined) {
                // unknown object -> add it to the ACTIVE region
                index = nObjects++;
                indicesByUUID[uuid] = index;
                objects.push(object);
                // accounting is done, now do the same for all bindings
                for(let j = 0, m = nBindings; j !== m; ++j)bindings[j].push(new PropertyBinding(object, paths[j], parsedPaths[j]));
            } else if (index < nCachedObjects) {
                knownObject = objects[index];
                // move existing object to the ACTIVE region
                const firstActiveIndex = --nCachedObjects, lastCachedObject = objects[firstActiveIndex];
                indicesByUUID[lastCachedObject.uuid] = index;
                objects[index] = lastCachedObject;
                indicesByUUID[uuid] = firstActiveIndex;
                objects[firstActiveIndex] = object;
                // accounting is done, now do the same for all bindings
                for(let j = 0, m = nBindings; j !== m; ++j){
                    const bindingsForPath = bindings[j], lastCached = bindingsForPath[firstActiveIndex];
                    let binding = bindingsForPath[index];
                    bindingsForPath[index] = lastCached;
                    if (binding === undefined) // since we do not bother to create new bindings
                    // for objects that are cached, the binding may
                    // or may not exist
                    binding = new PropertyBinding(object, paths[j], parsedPaths[j]);
                    bindingsForPath[firstActiveIndex] = binding;
                }
            } else if (objects[index] !== knownObject) console.error("THREE.AnimationObjectGroup: Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes.");
             // else the object is already where we want it to be
        } // for arguments
        this.nCachedObjects_ = nCachedObjects;
    }
    remove() {
        const objects = this._objects, indicesByUUID = this._indicesByUUID, bindings = this._bindings, nBindings = bindings.length;
        let nCachedObjects = this.nCachedObjects_;
        for(let i = 0, n = arguments.length; i !== n; ++i){
            const object = arguments[i], uuid = object.uuid, index = indicesByUUID[uuid];
            if (index !== undefined && index >= nCachedObjects) {
                // move existing object into the CACHED region
                const lastCachedIndex = nCachedObjects++, firstActiveObject = objects[lastCachedIndex];
                indicesByUUID[firstActiveObject.uuid] = index;
                objects[index] = firstActiveObject;
                indicesByUUID[uuid] = lastCachedIndex;
                objects[lastCachedIndex] = object;
                // accounting is done, now do the same for all bindings
                for(let j = 0, m = nBindings; j !== m; ++j){
                    const bindingsForPath = bindings[j], firstActive = bindingsForPath[lastCachedIndex], binding = bindingsForPath[index];
                    bindingsForPath[index] = firstActive;
                    bindingsForPath[lastCachedIndex] = binding;
                }
            }
        } // for arguments
        this.nCachedObjects_ = nCachedObjects;
    }
    // remove & forget
    uncache() {
        const objects = this._objects, indicesByUUID = this._indicesByUUID, bindings = this._bindings, nBindings = bindings.length;
        let nCachedObjects = this.nCachedObjects_, nObjects = objects.length;
        for(let i = 0, n = arguments.length; i !== n; ++i){
            const object = arguments[i], uuid = object.uuid, index = indicesByUUID[uuid];
            if (index !== undefined) {
                delete indicesByUUID[uuid];
                if (index < nCachedObjects) {
                    // object is cached, shrink the CACHED region
                    const firstActiveIndex = --nCachedObjects, lastCachedObject = objects[firstActiveIndex], lastIndex = --nObjects, lastObject = objects[lastIndex];
                    // last cached object takes this object's place
                    indicesByUUID[lastCachedObject.uuid] = index;
                    objects[index] = lastCachedObject;
                    // last object goes to the activated slot and pop
                    indicesByUUID[lastObject.uuid] = firstActiveIndex;
                    objects[firstActiveIndex] = lastObject;
                    objects.pop();
                    // accounting is done, now do the same for all bindings
                    for(let j = 0, m = nBindings; j !== m; ++j){
                        const bindingsForPath = bindings[j], lastCached = bindingsForPath[firstActiveIndex], last = bindingsForPath[lastIndex];
                        bindingsForPath[index] = lastCached;
                        bindingsForPath[firstActiveIndex] = last;
                        bindingsForPath.pop();
                    }
                } else {
                    // object is active, just swap with the last and pop
                    const lastIndex = --nObjects, lastObject = objects[lastIndex];
                    if (lastIndex > 0) indicesByUUID[lastObject.uuid] = index;
                    objects[index] = lastObject;
                    objects.pop();
                    // accounting is done, now do the same for all bindings
                    for(let j = 0, m = nBindings; j !== m; ++j){
                        const bindingsForPath = bindings[j];
                        bindingsForPath[index] = bindingsForPath[lastIndex];
                        bindingsForPath.pop();
                    }
                } // cached or active
            } // if object is known
        } // for arguments
        this.nCachedObjects_ = nCachedObjects;
    }
    // Internal interface used by befriended PropertyBinding.Composite:
    subscribe_(path, parsedPath) {
        // returns an array of bindings for the given path that is changed
        // according to the contained objects in the group
        const indicesByPath = this._bindingsIndicesByPath;
        let index = indicesByPath[path];
        const bindings = this._bindings;
        if (index !== undefined) return bindings[index];
        const paths = this._paths, parsedPaths = this._parsedPaths, objects = this._objects, nObjects = objects.length, nCachedObjects = this.nCachedObjects_, bindingsForPath = new Array(nObjects);
        index = bindings.length;
        indicesByPath[path] = index;
        paths.push(path);
        parsedPaths.push(parsedPath);
        bindings.push(bindingsForPath);
        for(let i = nCachedObjects, n = objects.length; i !== n; ++i){
            const object = objects[i];
            bindingsForPath[i] = new PropertyBinding(object, path, parsedPath);
        }
        return bindingsForPath;
    }
    unsubscribe_(path) {
        // tells the group to forget about a property path and no longer
        // update the array previously obtained with 'subscribe_'
        const indicesByPath = this._bindingsIndicesByPath, index = indicesByPath[path];
        if (index !== undefined) {
            const paths = this._paths, parsedPaths = this._parsedPaths, bindings = this._bindings, lastBindingsIndex = bindings.length - 1, lastBindings = bindings[lastBindingsIndex], lastBindingsPath = path[lastBindingsIndex];
            indicesByPath[lastBindingsPath] = index;
            bindings[index] = lastBindings;
            bindings.pop();
            parsedPaths[index] = parsedPaths[lastBindingsIndex];
            parsedPaths.pop();
            paths[index] = paths[lastBindingsIndex];
            paths.pop();
        }
    }
}
class AnimationAction {
    constructor(mixer, clip, localRoot = null, blendMode = clip.blendMode){
        this._mixer = mixer;
        this._clip = clip;
        this._localRoot = localRoot;
        this.blendMode = blendMode;
        const tracks = clip.tracks, nTracks = tracks.length, interpolants = new Array(nTracks);
        const interpolantSettings = {
            endingStart: ZeroCurvatureEnding,
            endingEnd: ZeroCurvatureEnding
        };
        for(let i = 0; i !== nTracks; ++i){
            const interpolant = tracks[i].createInterpolant(null);
            interpolants[i] = interpolant;
            interpolant.settings = interpolantSettings;
        }
        this._interpolantSettings = interpolantSettings;
        this._interpolants = interpolants; // bound by the mixer
        // inside: PropertyMixer (managed by the mixer)
        this._propertyBindings = new Array(nTracks);
        this._cacheIndex = null; // for the memory manager
        this._byClipCacheIndex = null; // for the memory manager
        this._timeScaleInterpolant = null;
        this._weightInterpolant = null;
        this.loop = LoopRepeat;
        this._loopCount = -1;
        // global mixer time when the action is to be started
        // it's set back to 'null' upon start of the action
        this._startTime = null;
        // scaled local time of the action
        // gets clamped or wrapped to 0..clip.duration according to loop
        this.time = 0;
        this.timeScale = 1;
        this._effectiveTimeScale = 1;
        this.weight = 1;
        this._effectiveWeight = 1;
        this.repetitions = Infinity; // no. of repetitions when looping
        this.paused = false; // true -> zero effective time scale
        this.enabled = true; // false -> zero effective weight
        this.clampWhenFinished = false; // keep feeding the last frame?
        this.zeroSlopeAtStart = true; // for smooth interpolation w/o separate
        this.zeroSlopeAtEnd = true; // clips for start, loop and end
    }
    // State & Scheduling
    play() {
        this._mixer._activateAction(this);
        return this;
    }
    stop() {
        this._mixer._deactivateAction(this);
        return this.reset();
    }
    reset() {
        this.paused = false;
        this.enabled = true;
        this.time = 0; // restart clip
        this._loopCount = -1; // forget previous loops
        this._startTime = null; // forget scheduling
        return this.stopFading().stopWarping();
    }
    isRunning() {
        return this.enabled && !this.paused && this.timeScale !== 0 && this._startTime === null && this._mixer._isActiveAction(this);
    }
    // return true when play has been called
    isScheduled() {
        return this._mixer._isActiveAction(this);
    }
    startAt(time) {
        this._startTime = time;
        return this;
    }
    setLoop(mode, repetitions) {
        this.loop = mode;
        this.repetitions = repetitions;
        return this;
    }
    // Weight
    // set the weight stopping any scheduled fading
    // although .enabled = false yields an effective weight of zero, this
    // method does *not* change .enabled, because it would be confusing
    setEffectiveWeight(weight) {
        this.weight = weight;
        // note: same logic as when updated at runtime
        this._effectiveWeight = this.enabled ? weight : 0;
        return this.stopFading();
    }
    // return the weight considering fading and .enabled
    getEffectiveWeight() {
        return this._effectiveWeight;
    }
    fadeIn(duration) {
        return this._scheduleFading(duration, 0, 1);
    }
    fadeOut(duration) {
        return this._scheduleFading(duration, 1, 0);
    }
    crossFadeFrom(fadeOutAction, duration, warp) {
        fadeOutAction.fadeOut(duration);
        this.fadeIn(duration);
        if (warp) {
            const fadeInDuration = this._clip.duration, fadeOutDuration = fadeOutAction._clip.duration, startEndRatio = fadeOutDuration / fadeInDuration, endStartRatio = fadeInDuration / fadeOutDuration;
            fadeOutAction.warp(1.0, startEndRatio, duration);
            this.warp(endStartRatio, 1.0, duration);
        }
        return this;
    }
    crossFadeTo(fadeInAction, duration, warp) {
        return fadeInAction.crossFadeFrom(this, duration, warp);
    }
    stopFading() {
        const weightInterpolant = this._weightInterpolant;
        if (weightInterpolant !== null) {
            this._weightInterpolant = null;
            this._mixer._takeBackControlInterpolant(weightInterpolant);
        }
        return this;
    }
    // Time Scale Control
    // set the time scale stopping any scheduled warping
    // although .paused = true yields an effective time scale of zero, this
    // method does *not* change .paused, because it would be confusing
    setEffectiveTimeScale(timeScale) {
        this.timeScale = timeScale;
        this._effectiveTimeScale = this.paused ? 0 : timeScale;
        return this.stopWarping();
    }
    // return the time scale considering warping and .paused
    getEffectiveTimeScale() {
        return this._effectiveTimeScale;
    }
    setDuration(duration) {
        this.timeScale = this._clip.duration / duration;
        return this.stopWarping();
    }
    syncWith(action) {
        this.time = action.time;
        this.timeScale = action.timeScale;
        return this.stopWarping();
    }
    halt(duration) {
        return this.warp(this._effectiveTimeScale, 0, duration);
    }
    warp(startTimeScale, endTimeScale, duration) {
        const mixer = this._mixer, now = mixer.time, timeScale = this.timeScale;
        let interpolant = this._timeScaleInterpolant;
        if (interpolant === null) {
            interpolant = mixer._lendControlInterpolant();
            this._timeScaleInterpolant = interpolant;
        }
        const times = interpolant.parameterPositions, values = interpolant.sampleValues;
        times[0] = now;
        times[1] = now + duration;
        values[0] = startTimeScale / timeScale;
        values[1] = endTimeScale / timeScale;
        return this;
    }
    stopWarping() {
        const timeScaleInterpolant = this._timeScaleInterpolant;
        if (timeScaleInterpolant !== null) {
            this._timeScaleInterpolant = null;
            this._mixer._takeBackControlInterpolant(timeScaleInterpolant);
        }
        return this;
    }
    // Object Accessors
    getMixer() {
        return this._mixer;
    }
    getClip() {
        return this._clip;
    }
    getRoot() {
        return this._localRoot || this._mixer._root;
    }
    // Interna
    _update(time, deltaTime, timeDirection, accuIndex) {
        // called by the mixer
        if (!this.enabled) {
            // call ._updateWeight() to update ._effectiveWeight
            this._updateWeight(time);
            return;
        }
        const startTime = this._startTime;
        if (startTime !== null) {
            // check for scheduled start of action
            const timeRunning = (time - startTime) * timeDirection;
            if (timeRunning < 0 || timeDirection === 0) deltaTime = 0;
            else {
                this._startTime = null; // unschedule
                deltaTime = timeDirection * timeRunning;
            }
        }
        // apply time scale and advance time
        deltaTime *= this._updateTimeScale(time);
        const clipTime = this._updateTime(deltaTime);
        // note: _updateTime may disable the action resulting in
        // an effective weight of 0
        const weight = this._updateWeight(time);
        if (weight > 0) {
            const interpolants = this._interpolants;
            const propertyMixers = this._propertyBindings;
            switch(this.blendMode){
                case AdditiveAnimationBlendMode:
                    for(let j = 0, m = interpolants.length; j !== m; ++j){
                        interpolants[j].evaluate(clipTime);
                        propertyMixers[j].accumulateAdditive(weight);
                    }
                    break;
                case NormalAnimationBlendMode:
                default:
                    for(let j = 0, m = interpolants.length; j !== m; ++j){
                        interpolants[j].evaluate(clipTime);
                        propertyMixers[j].accumulate(accuIndex, weight);
                    }
            }
        }
    }
    _updateWeight(time) {
        let weight = 0;
        if (this.enabled) {
            weight = this.weight;
            const interpolant = this._weightInterpolant;
            if (interpolant !== null) {
                const interpolantValue = interpolant.evaluate(time)[0];
                weight *= interpolantValue;
                if (time > interpolant.parameterPositions[1]) {
                    this.stopFading();
                    if (interpolantValue === 0) // faded out, disable
                    this.enabled = false;
                }
            }
        }
        this._effectiveWeight = weight;
        return weight;
    }
    _updateTimeScale(time) {
        let timeScale = 0;
        if (!this.paused) {
            timeScale = this.timeScale;
            const interpolant = this._timeScaleInterpolant;
            if (interpolant !== null) {
                const interpolantValue = interpolant.evaluate(time)[0];
                timeScale *= interpolantValue;
                if (time > interpolant.parameterPositions[1]) {
                    this.stopWarping();
                    if (timeScale === 0) // motion has halted, pause
                    this.paused = true;
                    else // warp done - apply final time scale
                    this.timeScale = timeScale;
                }
            }
        }
        this._effectiveTimeScale = timeScale;
        return timeScale;
    }
    _updateTime(deltaTime) {
        const duration = this._clip.duration;
        const loop = this.loop;
        let time = this.time + deltaTime;
        let loopCount = this._loopCount;
        const pingPong = loop === LoopPingPong;
        if (deltaTime === 0) {
            if (loopCount === -1) return time;
            return pingPong && (loopCount & 1) === 1 ? duration - time : time;
        }
        if (loop === LoopOnce) {
            if (loopCount === -1) {
                // just started
                this._loopCount = 0;
                this._setEndings(true, true, false);
            }
            handle_stop: {
                if (time >= duration) time = duration;
                else if (time < 0) time = 0;
                else {
                    this.time = time;
                    break handle_stop;
                }
                if (this.clampWhenFinished) this.paused = true;
                else this.enabled = false;
                this.time = time;
                this._mixer.dispatchEvent({
                    type: "finished",
                    action: this,
                    direction: deltaTime < 0 ? -1 : 1
                });
            }
        } else {
            if (loopCount === -1) {
                // just started
                if (deltaTime >= 0) {
                    loopCount = 0;
                    this._setEndings(true, this.repetitions === 0, pingPong);
                } else // when looping in reverse direction, the initial
                // transition through zero counts as a repetition,
                // so leave loopCount at -1
                this._setEndings(this.repetitions === 0, true, pingPong);
            }
            if (time >= duration || time < 0) {
                // wrap around
                const loopDelta = Math.floor(time / duration); // signed
                time -= duration * loopDelta;
                loopCount += Math.abs(loopDelta);
                const pending = this.repetitions - loopCount;
                if (pending <= 0) {
                    // have to stop (switch state, clamp time, fire event)
                    if (this.clampWhenFinished) this.paused = true;
                    else this.enabled = false;
                    time = deltaTime > 0 ? duration : 0;
                    this.time = time;
                    this._mixer.dispatchEvent({
                        type: "finished",
                        action: this,
                        direction: deltaTime > 0 ? 1 : -1
                    });
                } else {
                    // keep running
                    if (pending === 1) {
                        // entering the last round
                        const atStart = deltaTime < 0;
                        this._setEndings(atStart, !atStart, pingPong);
                    } else this._setEndings(false, false, pingPong);
                    this._loopCount = loopCount;
                    this.time = time;
                    this._mixer.dispatchEvent({
                        type: "loop",
                        action: this,
                        loopDelta: loopDelta
                    });
                }
            } else this.time = time;
            if (pingPong && (loopCount & 1) === 1) // invert time for the "pong round"
            return duration - time;
        }
        return time;
    }
    _setEndings(atStart, atEnd, pingPong) {
        const settings = this._interpolantSettings;
        if (pingPong) {
            settings.endingStart = ZeroSlopeEnding;
            settings.endingEnd = ZeroSlopeEnding;
        } else {
            // assuming for LoopOnce atStart == atEnd == true
            if (atStart) settings.endingStart = this.zeroSlopeAtStart ? ZeroSlopeEnding : ZeroCurvatureEnding;
            else settings.endingStart = WrapAroundEnding;
            if (atEnd) settings.endingEnd = this.zeroSlopeAtEnd ? ZeroSlopeEnding : ZeroCurvatureEnding;
            else settings.endingEnd = WrapAroundEnding;
        }
    }
    _scheduleFading(duration, weightNow, weightThen) {
        const mixer = this._mixer, now = mixer.time;
        let interpolant = this._weightInterpolant;
        if (interpolant === null) {
            interpolant = mixer._lendControlInterpolant();
            this._weightInterpolant = interpolant;
        }
        const times = interpolant.parameterPositions, values = interpolant.sampleValues;
        times[0] = now;
        values[0] = weightNow;
        times[1] = now + duration;
        values[1] = weightThen;
        return this;
    }
}
const _controlInterpolantsResultBuffer = new Float32Array(1);
class AnimationMixer extends EventDispatcher {
    constructor(root){
        super();
        this._root = root;
        this._initMemoryManager();
        this._accuIndex = 0;
        this.time = 0;
        this.timeScale = 1.0;
    }
    _bindAction(action, prototypeAction) {
        const root = action._localRoot || this._root, tracks = action._clip.tracks, nTracks = tracks.length, bindings = action._propertyBindings, interpolants = action._interpolants, rootUuid = root.uuid, bindingsByRoot = this._bindingsByRootAndName;
        let bindingsByName = bindingsByRoot[rootUuid];
        if (bindingsByName === undefined) {
            bindingsByName = {};
            bindingsByRoot[rootUuid] = bindingsByName;
        }
        for(let i = 0; i !== nTracks; ++i){
            const track = tracks[i], trackName = track.name;
            let binding = bindingsByName[trackName];
            if (binding !== undefined) {
                ++binding.referenceCount;
                bindings[i] = binding;
            } else {
                binding = bindings[i];
                if (binding !== undefined) {
                    // existing binding, make sure the cache knows
                    if (binding._cacheIndex === null) {
                        ++binding.referenceCount;
                        this._addInactiveBinding(binding, rootUuid, trackName);
                    }
                    continue;
                }
                const path = prototypeAction && prototypeAction._propertyBindings[i].binding.parsedPath;
                binding = new PropertyMixer(PropertyBinding.create(root, trackName, path), track.ValueTypeName, track.getValueSize());
                ++binding.referenceCount;
                this._addInactiveBinding(binding, rootUuid, trackName);
                bindings[i] = binding;
            }
            interpolants[i].resultBuffer = binding.buffer;
        }
    }
    _activateAction(action) {
        if (!this._isActiveAction(action)) {
            if (action._cacheIndex === null) {
                // this action has been forgotten by the cache, but the user
                // appears to be still using it -> rebind
                const rootUuid = (action._localRoot || this._root).uuid, clipUuid = action._clip.uuid, actionsForClip = this._actionsByClip[clipUuid];
                this._bindAction(action, actionsForClip && actionsForClip.knownActions[0]);
                this._addInactiveAction(action, clipUuid, rootUuid);
            }
            const bindings = action._propertyBindings;
            // increment reference counts / sort out state
            for(let i = 0, n = bindings.length; i !== n; ++i){
                const binding = bindings[i];
                if (binding.useCount++ === 0) {
                    this._lendBinding(binding);
                    binding.saveOriginalState();
                }
            }
            this._lendAction(action);
        }
    }
    _deactivateAction(action) {
        if (this._isActiveAction(action)) {
            const bindings = action._propertyBindings;
            // decrement reference counts / sort out state
            for(let i = 0, n = bindings.length; i !== n; ++i){
                const binding = bindings[i];
                if (--binding.useCount === 0) {
                    binding.restoreOriginalState();
                    this._takeBackBinding(binding);
                }
            }
            this._takeBackAction(action);
        }
    }
    // Memory manager
    _initMemoryManager() {
        this._actions = []; // 'nActiveActions' followed by inactive ones
        this._nActiveActions = 0;
        this._actionsByClip = {};
        // inside:
        // {
        // 	knownActions: Array< AnimationAction > - used as prototypes
        // 	actionByRoot: AnimationAction - lookup
        // }
        this._bindings = []; // 'nActiveBindings' followed by inactive ones
        this._nActiveBindings = 0;
        this._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >
        this._controlInterpolants = []; // same game as above
        this._nActiveControlInterpolants = 0;
        const scope = this;
        this.stats = {
            actions: {
                get total () {
                    return scope._actions.length;
                },
                get inUse () {
                    return scope._nActiveActions;
                }
            },
            bindings: {
                get total () {
                    return scope._bindings.length;
                },
                get inUse () {
                    return scope._nActiveBindings;
                }
            },
            controlInterpolants: {
                get total () {
                    return scope._controlInterpolants.length;
                },
                get inUse () {
                    return scope._nActiveControlInterpolants;
                }
            }
        };
    }
    // Memory management for AnimationAction objects
    _isActiveAction(action) {
        const index = action._cacheIndex;
        return index !== null && index < this._nActiveActions;
    }
    _addInactiveAction(action, clipUuid, rootUuid) {
        const actions = this._actions, actionsByClip = this._actionsByClip;
        let actionsForClip = actionsByClip[clipUuid];
        if (actionsForClip === undefined) {
            actionsForClip = {
                knownActions: [
                    action
                ],
                actionByRoot: {}
            };
            action._byClipCacheIndex = 0;
            actionsByClip[clipUuid] = actionsForClip;
        } else {
            const knownActions = actionsForClip.knownActions;
            action._byClipCacheIndex = knownActions.length;
            knownActions.push(action);
        }
        action._cacheIndex = actions.length;
        actions.push(action);
        actionsForClip.actionByRoot[rootUuid] = action;
    }
    _removeInactiveAction(action) {
        const actions = this._actions, lastInactiveAction = actions[actions.length - 1], cacheIndex = action._cacheIndex;
        lastInactiveAction._cacheIndex = cacheIndex;
        actions[cacheIndex] = lastInactiveAction;
        actions.pop();
        action._cacheIndex = null;
        const clipUuid = action._clip.uuid, actionsByClip = this._actionsByClip, actionsForClip = actionsByClip[clipUuid], knownActionsForClip = actionsForClip.knownActions, lastKnownAction = knownActionsForClip[knownActionsForClip.length - 1], byClipCacheIndex = action._byClipCacheIndex;
        lastKnownAction._byClipCacheIndex = byClipCacheIndex;
        knownActionsForClip[byClipCacheIndex] = lastKnownAction;
        knownActionsForClip.pop();
        action._byClipCacheIndex = null;
        const actionByRoot = actionsForClip.actionByRoot, rootUuid = (action._localRoot || this._root).uuid;
        delete actionByRoot[rootUuid];
        if (knownActionsForClip.length === 0) delete actionsByClip[clipUuid];
        this._removeInactiveBindingsForAction(action);
    }
    _removeInactiveBindingsForAction(action) {
        const bindings = action._propertyBindings;
        for(let i = 0, n = bindings.length; i !== n; ++i){
            const binding = bindings[i];
            if (--binding.referenceCount === 0) this._removeInactiveBinding(binding);
        }
    }
    _lendAction(action) {
        // [ active actions |  inactive actions  ]
        // [  active actions >| inactive actions ]
        //                 s        a
        //                  <-swap->
        //                 a        s
        const actions = this._actions, prevIndex = action._cacheIndex, lastActiveIndex = this._nActiveActions++, firstInactiveAction = actions[lastActiveIndex];
        action._cacheIndex = lastActiveIndex;
        actions[lastActiveIndex] = action;
        firstInactiveAction._cacheIndex = prevIndex;
        actions[prevIndex] = firstInactiveAction;
    }
    _takeBackAction(action) {
        // [  active actions  | inactive actions ]
        // [ active actions |< inactive actions  ]
        //        a        s
        //         <-swap->
        //        s        a
        const actions = this._actions, prevIndex = action._cacheIndex, firstInactiveIndex = --this._nActiveActions, lastActiveAction = actions[firstInactiveIndex];
        action._cacheIndex = firstInactiveIndex;
        actions[firstInactiveIndex] = action;
        lastActiveAction._cacheIndex = prevIndex;
        actions[prevIndex] = lastActiveAction;
    }
    // Memory management for PropertyMixer objects
    _addInactiveBinding(binding, rootUuid, trackName) {
        const bindingsByRoot = this._bindingsByRootAndName, bindings = this._bindings;
        let bindingByName = bindingsByRoot[rootUuid];
        if (bindingByName === undefined) {
            bindingByName = {};
            bindingsByRoot[rootUuid] = bindingByName;
        }
        bindingByName[trackName] = binding;
        binding._cacheIndex = bindings.length;
        bindings.push(binding);
    }
    _removeInactiveBinding(binding) {
        const bindings = this._bindings, propBinding = binding.binding, rootUuid = propBinding.rootNode.uuid, trackName = propBinding.path, bindingsByRoot = this._bindingsByRootAndName, bindingByName = bindingsByRoot[rootUuid], lastInactiveBinding = bindings[bindings.length - 1], cacheIndex = binding._cacheIndex;
        lastInactiveBinding._cacheIndex = cacheIndex;
        bindings[cacheIndex] = lastInactiveBinding;
        bindings.pop();
        delete bindingByName[trackName];
        if (Object.keys(bindingByName).length === 0) delete bindingsByRoot[rootUuid];
    }
    _lendBinding(binding) {
        const bindings = this._bindings, prevIndex = binding._cacheIndex, lastActiveIndex = this._nActiveBindings++, firstInactiveBinding = bindings[lastActiveIndex];
        binding._cacheIndex = lastActiveIndex;
        bindings[lastActiveIndex] = binding;
        firstInactiveBinding._cacheIndex = prevIndex;
        bindings[prevIndex] = firstInactiveBinding;
    }
    _takeBackBinding(binding) {
        const bindings = this._bindings, prevIndex = binding._cacheIndex, firstInactiveIndex = --this._nActiveBindings, lastActiveBinding = bindings[firstInactiveIndex];
        binding._cacheIndex = firstInactiveIndex;
        bindings[firstInactiveIndex] = binding;
        lastActiveBinding._cacheIndex = prevIndex;
        bindings[prevIndex] = lastActiveBinding;
    }
    // Memory management of Interpolants for weight and time scale
    _lendControlInterpolant() {
        const interpolants = this._controlInterpolants, lastActiveIndex = this._nActiveControlInterpolants++;
        let interpolant = interpolants[lastActiveIndex];
        if (interpolant === undefined) {
            interpolant = new LinearInterpolant(new Float32Array(2), new Float32Array(2), 1, _controlInterpolantsResultBuffer);
            interpolant.__cacheIndex = lastActiveIndex;
            interpolants[lastActiveIndex] = interpolant;
        }
        return interpolant;
    }
    _takeBackControlInterpolant(interpolant) {
        const interpolants = this._controlInterpolants, prevIndex = interpolant.__cacheIndex, firstInactiveIndex = --this._nActiveControlInterpolants, lastActiveInterpolant = interpolants[firstInactiveIndex];
        interpolant.__cacheIndex = firstInactiveIndex;
        interpolants[firstInactiveIndex] = interpolant;
        lastActiveInterpolant.__cacheIndex = prevIndex;
        interpolants[prevIndex] = lastActiveInterpolant;
    }
    // return an action for a clip optionally using a custom root target
    // object (this method allocates a lot of dynamic memory in case a
    // previously unknown clip/root combination is specified)
    clipAction(clip, optionalRoot, blendMode) {
        const root = optionalRoot || this._root, rootUuid = root.uuid;
        let clipObject = typeof clip === "string" ? AnimationClip.findByName(root, clip) : clip;
        const clipUuid = clipObject !== null ? clipObject.uuid : clip;
        const actionsForClip = this._actionsByClip[clipUuid];
        let prototypeAction = null;
        if (blendMode === undefined) {
            if (clipObject !== null) blendMode = clipObject.blendMode;
            else blendMode = NormalAnimationBlendMode;
        }
        if (actionsForClip !== undefined) {
            const existingAction = actionsForClip.actionByRoot[rootUuid];
            if (existingAction !== undefined && existingAction.blendMode === blendMode) return existingAction;
            // we know the clip, so we don't have to parse all
            // the bindings again but can just copy
            prototypeAction = actionsForClip.knownActions[0];
            // also, take the clip from the prototype action
            if (clipObject === null) clipObject = prototypeAction._clip;
        }
        // clip must be known when specified via string
        if (clipObject === null) return null;
        // allocate all resources required to run it
        const newAction = new AnimationAction(this, clipObject, optionalRoot, blendMode);
        this._bindAction(newAction, prototypeAction);
        // and make the action known to the memory manager
        this._addInactiveAction(newAction, clipUuid, rootUuid);
        return newAction;
    }
    // get an existing action
    existingAction(clip, optionalRoot) {
        const root = optionalRoot || this._root, rootUuid = root.uuid, clipObject = typeof clip === "string" ? AnimationClip.findByName(root, clip) : clip, clipUuid = clipObject ? clipObject.uuid : clip, actionsForClip = this._actionsByClip[clipUuid];
        if (actionsForClip !== undefined) return actionsForClip.actionByRoot[rootUuid] || null;
        return null;
    }
    // deactivates all previously scheduled actions
    stopAllAction() {
        const actions = this._actions, nActions = this._nActiveActions;
        for(let i = nActions - 1; i >= 0; --i)actions[i].stop();
        return this;
    }
    // advance the time and update apply the animation
    update(deltaTime) {
        deltaTime *= this.timeScale;
        const actions = this._actions, nActions = this._nActiveActions, time = this.time += deltaTime, timeDirection = Math.sign(deltaTime), accuIndex = this._accuIndex ^= 1;
        // run active actions
        for(let i = 0; i !== nActions; ++i){
            const action = actions[i];
            action._update(time, deltaTime, timeDirection, accuIndex);
        }
        // update scene graph
        const bindings = this._bindings, nBindings = this._nActiveBindings;
        for(let i = 0; i !== nBindings; ++i)bindings[i].apply(accuIndex);
        return this;
    }
    // Allows you to seek to a specific time in an animation.
    setTime(timeInSeconds) {
        this.time = 0; // Zero out time attribute for AnimationMixer object;
        for(let i = 0; i < this._actions.length; i++)this._actions[i].time = 0; // Zero out time attribute for all associated AnimationAction objects.
        return this.update(timeInSeconds); // Update used to set exact time. Returns "this" AnimationMixer object.
    }
    // return this mixer's root target object
    getRoot() {
        return this._root;
    }
    // free all resources specific to a particular clip
    uncacheClip(clip) {
        const actions = this._actions, clipUuid = clip.uuid, actionsByClip = this._actionsByClip, actionsForClip = actionsByClip[clipUuid];
        if (actionsForClip !== undefined) {
            // note: just calling _removeInactiveAction would mess up the
            // iteration state and also require updating the state we can
            // just throw away
            const actionsToRemove = actionsForClip.knownActions;
            for(let i = 0, n = actionsToRemove.length; i !== n; ++i){
                const action = actionsToRemove[i];
                this._deactivateAction(action);
                const cacheIndex = action._cacheIndex, lastInactiveAction = actions[actions.length - 1];
                action._cacheIndex = null;
                action._byClipCacheIndex = null;
                lastInactiveAction._cacheIndex = cacheIndex;
                actions[cacheIndex] = lastInactiveAction;
                actions.pop();
                this._removeInactiveBindingsForAction(action);
            }
            delete actionsByClip[clipUuid];
        }
    }
    // free all resources specific to a particular root target object
    uncacheRoot(root) {
        const rootUuid = root.uuid, actionsByClip = this._actionsByClip;
        for(const clipUuid in actionsByClip){
            const actionByRoot = actionsByClip[clipUuid].actionByRoot, action = actionByRoot[rootUuid];
            if (action !== undefined) {
                this._deactivateAction(action);
                this._removeInactiveAction(action);
            }
        }
        const bindingsByRoot = this._bindingsByRootAndName, bindingByName = bindingsByRoot[rootUuid];
        if (bindingByName !== undefined) for(const trackName in bindingByName){
            const binding = bindingByName[trackName];
            binding.restoreOriginalState();
            this._removeInactiveBinding(binding);
        }
    }
    // remove a targeted clip from the cache
    uncacheAction(clip, optionalRoot) {
        const action = this.existingAction(clip, optionalRoot);
        if (action !== null) {
            this._deactivateAction(action);
            this._removeInactiveAction(action);
        }
    }
}
class Uniform {
    constructor(value){
        this.value = value;
    }
    clone() {
        return new Uniform(this.value.clone === undefined ? this.value : this.value.clone());
    }
}
let _id = 0;
class UniformsGroup extends EventDispatcher {
    constructor(){
        super();
        this.isUniformsGroup = true;
        Object.defineProperty(this, "id", {
            value: _id++
        });
        this.name = "";
        this.usage = StaticDrawUsage;
        this.uniforms = [];
    }
    add(uniform) {
        this.uniforms.push(uniform);
        return this;
    }
    remove(uniform) {
        const index = this.uniforms.indexOf(uniform);
        if (index !== -1) this.uniforms.splice(index, 1);
        return this;
    }
    setName(name) {
        this.name = name;
        return this;
    }
    setUsage(value) {
        this.usage = value;
        return this;
    }
    dispose() {
        this.dispatchEvent({
            type: "dispose"
        });
        return this;
    }
    copy(source) {
        this.name = source.name;
        this.usage = source.usage;
        const uniformsSource = source.uniforms;
        this.uniforms.length = 0;
        for(let i = 0, l = uniformsSource.length; i < l; i++)this.uniforms.push(uniformsSource[i].clone());
        return this;
    }
    clone() {
        return new this.constructor().copy(this);
    }
}
class InstancedInterleavedBuffer extends InterleavedBuffer {
    constructor(array, stride, meshPerAttribute = 1){
        super(array, stride);
        this.isInstancedInterleavedBuffer = true;
        this.meshPerAttribute = meshPerAttribute;
    }
    copy(source) {
        super.copy(source);
        this.meshPerAttribute = source.meshPerAttribute;
        return this;
    }
    clone(data) {
        const ib = super.clone(data);
        ib.meshPerAttribute = this.meshPerAttribute;
        return ib;
    }
    toJSON(data) {
        const json = super.toJSON(data);
        json.isInstancedInterleavedBuffer = true;
        json.meshPerAttribute = this.meshPerAttribute;
        return json;
    }
}
class GLBufferAttribute {
    constructor(buffer, type, itemSize, elementSize, count){
        this.isGLBufferAttribute = true;
        this.name = "";
        this.buffer = buffer;
        this.type = type;
        this.itemSize = itemSize;
        this.elementSize = elementSize;
        this.count = count;
        this.version = 0;
    }
    set needsUpdate(value) {
        if (value === true) this.version++;
    }
    setBuffer(buffer) {
        this.buffer = buffer;
        return this;
    }
    setType(type, elementSize) {
        this.type = type;
        this.elementSize = elementSize;
        return this;
    }
    setItemSize(itemSize) {
        this.itemSize = itemSize;
        return this;
    }
    setCount(count) {
        this.count = count;
        return this;
    }
}
class Raycaster {
    constructor(origin, direction, near = 0, far = Infinity){
        this.ray = new Ray(origin, direction);
        // direction is assumed to be normalized (for accurate distance calculations)
        this.near = near;
        this.far = far;
        this.camera = null;
        this.layers = new Layers();
        this.params = {
            Mesh: {},
            Line: {
                threshold: 1
            },
            LOD: {},
            Points: {
                threshold: 1
            },
            Sprite: {}
        };
    }
    set(origin, direction) {
        // direction is assumed to be normalized (for accurate distance calculations)
        this.ray.set(origin, direction);
    }
    setFromCamera(coords, camera) {
        if (camera.isPerspectiveCamera) {
            this.ray.origin.setFromMatrixPosition(camera.matrixWorld);
            this.ray.direction.set(coords.x, coords.y, 0.5).unproject(camera).sub(this.ray.origin).normalize();
            this.camera = camera;
        } else if (camera.isOrthographicCamera) {
            this.ray.origin.set(coords.x, coords.y, (camera.near + camera.far) / (camera.near - camera.far)).unproject(camera); // set origin in plane of camera
            this.ray.direction.set(0, 0, -1).transformDirection(camera.matrixWorld);
            this.camera = camera;
        } else console.error("THREE.Raycaster: Unsupported camera type: " + camera.type);
    }
    intersectObject(object, recursive = true, intersects = []) {
        intersectObject(object, this, intersects, recursive);
        intersects.sort(ascSort);
        return intersects;
    }
    intersectObjects(objects, recursive = true, intersects = []) {
        for(let i = 0, l = objects.length; i < l; i++)intersectObject(objects[i], this, intersects, recursive);
        intersects.sort(ascSort);
        return intersects;
    }
}
function ascSort(a, b) {
    return a.distance - b.distance;
}
function intersectObject(object, raycaster, intersects, recursive) {
    if (object.layers.test(raycaster.layers)) object.raycast(raycaster, intersects);
    if (recursive === true) {
        const children = object.children;
        for(let i = 0, l = children.length; i < l; i++)intersectObject(children[i], raycaster, intersects, true);
    }
}
/**
 * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system
 *
 * The polar angle (phi) is measured from the positive y-axis. The positive y-axis is up.
 * The azimuthal angle (theta) is measured from the positive z-axis.
 */ class Spherical {
    constructor(radius = 1, phi = 0, theta = 0){
        this.radius = radius;
        this.phi = phi; // polar angle
        this.theta = theta; // azimuthal angle
        return this;
    }
    set(radius, phi, theta) {
        this.radius = radius;
        this.phi = phi;
        this.theta = theta;
        return this;
    }
    copy(other) {
        this.radius = other.radius;
        this.phi = other.phi;
        this.theta = other.theta;
        return this;
    }
    // restrict phi to be between EPS and PI-EPS
    makeSafe() {
        const EPS = 0.000001;
        this.phi = Math.max(EPS, Math.min(Math.PI - EPS, this.phi));
        return this;
    }
    setFromVector3(v) {
        return this.setFromCartesianCoords(v.x, v.y, v.z);
    }
    setFromCartesianCoords(x, y, z) {
        this.radius = Math.sqrt(x * x + y * y + z * z);
        if (this.radius === 0) {
            this.theta = 0;
            this.phi = 0;
        } else {
            this.theta = Math.atan2(x, z);
            this.phi = Math.acos(clamp(y / this.radius, -1, 1));
        }
        return this;
    }
    clone() {
        return new this.constructor().copy(this);
    }
}
/**
 * Ref: https://en.wikipedia.org/wiki/Cylindrical_coordinate_system
 */ class Cylindrical {
    constructor(radius = 1, theta = 0, y = 0){
        this.radius = radius; // distance from the origin to a point in the x-z plane
        this.theta = theta; // counterclockwise angle in the x-z plane measured in radians from the positive z-axis
        this.y = y; // height above the x-z plane
        return this;
    }
    set(radius, theta, y) {
        this.radius = radius;
        this.theta = theta;
        this.y = y;
        return this;
    }
    copy(other) {
        this.radius = other.radius;
        this.theta = other.theta;
        this.y = other.y;
        return this;
    }
    setFromVector3(v) {
        return this.setFromCartesianCoords(v.x, v.y, v.z);
    }
    setFromCartesianCoords(x, y, z) {
        this.radius = Math.sqrt(x * x + z * z);
        this.theta = Math.atan2(x, z);
        this.y = y;
        return this;
    }
    clone() {
        return new this.constructor().copy(this);
    }
}
const _vector$4 = /*@__PURE__*/ new Vector2();
class Box2 {
    constructor(min = new Vector2(Infinity, Infinity), max = new Vector2(-Infinity, -Infinity)){
        this.isBox2 = true;
        this.min = min;
        this.max = max;
    }
    set(min, max) {
        this.min.copy(min);
        this.max.copy(max);
        return this;
    }
    setFromPoints(points) {
        this.makeEmpty();
        for(let i = 0, il = points.length; i < il; i++)this.expandByPoint(points[i]);
        return this;
    }
    setFromCenterAndSize(center, size) {
        const halfSize = _vector$4.copy(size).multiplyScalar(0.5);
        this.min.copy(center).sub(halfSize);
        this.max.copy(center).add(halfSize);
        return this;
    }
    clone() {
        return new this.constructor().copy(this);
    }
    copy(box) {
        this.min.copy(box.min);
        this.max.copy(box.max);
        return this;
    }
    makeEmpty() {
        this.min.x = this.min.y = Infinity;
        this.max.x = this.max.y = -Infinity;
        return this;
    }
    isEmpty() {
        // this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes
        return this.max.x < this.min.x || this.max.y < this.min.y;
    }
    getCenter(target) {
        return this.isEmpty() ? target.set(0, 0) : target.addVectors(this.min, this.max).multiplyScalar(0.5);
    }
    getSize(target) {
        return this.isEmpty() ? target.set(0, 0) : target.subVectors(this.max, this.min);
    }
    expandByPoint(point) {
        this.min.min(point);
        this.max.max(point);
        return this;
    }
    expandByVector(vector) {
        this.min.sub(vector);
        this.max.add(vector);
        return this;
    }
    expandByScalar(scalar) {
        this.min.addScalar(-scalar);
        this.max.addScalar(scalar);
        return this;
    }
    containsPoint(point) {
        return point.x < this.min.x || point.x > this.max.x || point.y < this.min.y || point.y > this.max.y ? false : true;
    }
    containsBox(box) {
        return this.min.x <= box.min.x && box.max.x <= this.max.x && this.min.y <= box.min.y && box.max.y <= this.max.y;
    }
    getParameter(point, target) {
        // This can potentially have a divide by zero if the box
        // has a size dimension of 0.
        return target.set((point.x - this.min.x) / (this.max.x - this.min.x), (point.y - this.min.y) / (this.max.y - this.min.y));
    }
    intersectsBox(box) {
        // using 4 splitting planes to rule out intersections
        return box.max.x < this.min.x || box.min.x > this.max.x || box.max.y < this.min.y || box.min.y > this.max.y ? false : true;
    }
    clampPoint(point, target) {
        return target.copy(point).clamp(this.min, this.max);
    }
    distanceToPoint(point) {
        return this.clampPoint(point, _vector$4).distanceTo(point);
    }
    intersect(box) {
        this.min.max(box.min);
        this.max.min(box.max);
        if (this.isEmpty()) this.makeEmpty();
        return this;
    }
    union(box) {
        this.min.min(box.min);
        this.max.max(box.max);
        return this;
    }
    translate(offset) {
        this.min.add(offset);
        this.max.add(offset);
        return this;
    }
    equals(box) {
        return box.min.equals(this.min) && box.max.equals(this.max);
    }
}
const _startP = /*@__PURE__*/ new Vector3();
const _startEnd = /*@__PURE__*/ new Vector3();
class Line3 {
    constructor(start = new Vector3(), end = new Vector3()){
        this.start = start;
        this.end = end;
    }
    set(start, end) {
        this.start.copy(start);
        this.end.copy(end);
        return this;
    }
    copy(line) {
        this.start.copy(line.start);
        this.end.copy(line.end);
        return this;
    }
    getCenter(target) {
        return target.addVectors(this.start, this.end).multiplyScalar(0.5);
    }
    delta(target) {
        return target.subVectors(this.end, this.start);
    }
    distanceSq() {
        return this.start.distanceToSquared(this.end);
    }
    distance() {
        return this.start.distanceTo(this.end);
    }
    at(t, target) {
        return this.delta(target).multiplyScalar(t).add(this.start);
    }
    closestPointToPointParameter(point, clampToLine) {
        _startP.subVectors(point, this.start);
        _startEnd.subVectors(this.end, this.start);
        const startEnd2 = _startEnd.dot(_startEnd);
        const startEnd_startP = _startEnd.dot(_startP);
        let t = startEnd_startP / startEnd2;
        if (clampToLine) t = clamp(t, 0, 1);
        return t;
    }
    closestPointToPoint(point, clampToLine, target) {
        const t = this.closestPointToPointParameter(point, clampToLine);
        return this.delta(target).multiplyScalar(t).add(this.start);
    }
    applyMatrix4(matrix) {
        this.start.applyMatrix4(matrix);
        this.end.applyMatrix4(matrix);
        return this;
    }
    equals(line) {
        return line.start.equals(this.start) && line.end.equals(this.end);
    }
    clone() {
        return new this.constructor().copy(this);
    }
}
const _vector$3 = /*@__PURE__*/ new Vector3();
class SpotLightHelper extends Object3D {
    constructor(light, color){
        super();
        this.light = light;
        this.matrix = light.matrixWorld;
        this.matrixAutoUpdate = false;
        this.color = color;
        this.type = "SpotLightHelper";
        const geometry = new BufferGeometry();
        const positions = [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            -1,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            -1,
            1
        ];
        for(let i = 0, j = 1, l = 32; i < l; i++, j++){
            const p1 = i / l * Math.PI * 2;
            const p2 = j / l * Math.PI * 2;
            positions.push(Math.cos(p1), Math.sin(p1), 1, Math.cos(p2), Math.sin(p2), 1);
        }
        geometry.setAttribute("position", new Float32BufferAttribute(positions, 3));
        const material = new LineBasicMaterial({
            fog: false,
            toneMapped: false
        });
        this.cone = new LineSegments(geometry, material);
        this.add(this.cone);
        this.update();
    }
    dispose() {
        this.cone.geometry.dispose();
        this.cone.material.dispose();
    }
    update() {
        this.light.updateWorldMatrix(true, false);
        this.light.target.updateWorldMatrix(true, false);
        const coneLength = this.light.distance ? this.light.distance : 1000;
        const coneWidth = coneLength * Math.tan(this.light.angle);
        this.cone.scale.set(coneWidth, coneWidth, coneLength);
        _vector$3.setFromMatrixPosition(this.light.target.matrixWorld);
        this.cone.lookAt(_vector$3);
        if (this.color !== undefined) this.cone.material.color.set(this.color);
        else this.cone.material.color.copy(this.light.color);
    }
}
const _vector$2 = /*@__PURE__*/ new Vector3();
const _boneMatrix = /*@__PURE__*/ new Matrix4();
const _matrixWorldInv = /*@__PURE__*/ new Matrix4();
class SkeletonHelper extends LineSegments {
    constructor(object){
        const bones = getBoneList(object);
        const geometry = new BufferGeometry();
        const vertices = [];
        const colors = [];
        const color1 = new Color(0, 0, 1);
        const color2 = new Color(0, 1, 0);
        for(let i = 0; i < bones.length; i++){
            const bone = bones[i];
            if (bone.parent && bone.parent.isBone) {
                vertices.push(0, 0, 0);
                vertices.push(0, 0, 0);
                colors.push(color1.r, color1.g, color1.b);
                colors.push(color2.r, color2.g, color2.b);
            }
        }
        geometry.setAttribute("position", new Float32BufferAttribute(vertices, 3));
        geometry.setAttribute("color", new Float32BufferAttribute(colors, 3));
        const material = new LineBasicMaterial({
            vertexColors: true,
            depthTest: false,
            depthWrite: false,
            toneMapped: false,
            transparent: true
        });
        super(geometry, material);
        this.isSkeletonHelper = true;
        this.type = "SkeletonHelper";
        this.root = object;
        this.bones = bones;
        this.matrix = object.matrixWorld;
        this.matrixAutoUpdate = false;
    }
    updateMatrixWorld(force) {
        const bones = this.bones;
        const geometry = this.geometry;
        const position = geometry.getAttribute("position");
        _matrixWorldInv.copy(this.root.matrixWorld).invert();
        for(let i = 0, j = 0; i < bones.length; i++){
            const bone = bones[i];
            if (bone.parent && bone.parent.isBone) {
                _boneMatrix.multiplyMatrices(_matrixWorldInv, bone.matrixWorld);
                _vector$2.setFromMatrixPosition(_boneMatrix);
                position.setXYZ(j, _vector$2.x, _vector$2.y, _vector$2.z);
                _boneMatrix.multiplyMatrices(_matrixWorldInv, bone.parent.matrixWorld);
                _vector$2.setFromMatrixPosition(_boneMatrix);
                position.setXYZ(j + 1, _vector$2.x, _vector$2.y, _vector$2.z);
                j += 2;
            }
        }
        geometry.getAttribute("position").needsUpdate = true;
        super.updateMatrixWorld(force);
    }
    dispose() {
        this.geometry.dispose();
        this.material.dispose();
    }
}
function getBoneList(object) {
    const boneList = [];
    if (object.isBone === true) boneList.push(object);
    for(let i = 0; i < object.children.length; i++)boneList.push.apply(boneList, getBoneList(object.children[i]));
    return boneList;
}
class PointLightHelper extends Mesh {
    constructor(light, sphereSize, color){
        const geometry = new SphereGeometry(sphereSize, 4, 2);
        const material = new MeshBasicMaterial({
            wireframe: true,
            fog: false,
            toneMapped: false
        });
        super(geometry, material);
        this.light = light;
        this.color = color;
        this.type = "PointLightHelper";
        this.matrix = this.light.matrixWorld;
        this.matrixAutoUpdate = false;
        this.update();
    /*
	// TODO: delete this comment?
	const distanceGeometry = new THREE.IcosahedronGeometry( 1, 2 );
	const distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );

	this.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );
	this.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );

	const d = light.distance;

	if ( d === 0.0 ) {

		this.lightDistance.visible = false;

	} else {

		this.lightDistance.scale.set( d, d, d );

	}

	this.add( this.lightDistance );
	*/ }
    dispose() {
        this.geometry.dispose();
        this.material.dispose();
    }
    update() {
        this.light.updateWorldMatrix(true, false);
        if (this.color !== undefined) this.material.color.set(this.color);
        else this.material.color.copy(this.light.color);
    /*
		const d = this.light.distance;

		if ( d === 0.0 ) {

			this.lightDistance.visible = false;

		} else {

			this.lightDistance.visible = true;
			this.lightDistance.scale.set( d, d, d );

		}
		*/ }
}
const _vector$1 = /*@__PURE__*/ new Vector3();
const _color1 = /*@__PURE__*/ new Color();
const _color2 = /*@__PURE__*/ new Color();
class HemisphereLightHelper extends Object3D {
    constructor(light, size, color){
        super();
        this.light = light;
        this.matrix = light.matrixWorld;
        this.matrixAutoUpdate = false;
        this.color = color;
        this.type = "HemisphereLightHelper";
        const geometry = new OctahedronGeometry(size);
        geometry.rotateY(Math.PI * 0.5);
        this.material = new MeshBasicMaterial({
            wireframe: true,
            fog: false,
            toneMapped: false
        });
        if (this.color === undefined) this.material.vertexColors = true;
        const position = geometry.getAttribute("position");
        const colors = new Float32Array(position.count * 3);
        geometry.setAttribute("color", new BufferAttribute(colors, 3));
        this.add(new Mesh(geometry, this.material));
        this.update();
    }
    dispose() {
        this.children[0].geometry.dispose();
        this.children[0].material.dispose();
    }
    update() {
        const mesh = this.children[0];
        if (this.color !== undefined) this.material.color.set(this.color);
        else {
            const colors = mesh.geometry.getAttribute("color");
            _color1.copy(this.light.color);
            _color2.copy(this.light.groundColor);
            for(let i = 0, l = colors.count; i < l; i++){
                const color = i < l / 2 ? _color1 : _color2;
                colors.setXYZ(i, color.r, color.g, color.b);
            }
            colors.needsUpdate = true;
        }
        this.light.updateWorldMatrix(true, false);
        mesh.lookAt(_vector$1.setFromMatrixPosition(this.light.matrixWorld).negate());
    }
}
class GridHelper extends LineSegments {
    constructor(size = 10, divisions = 10, color1 = 0x444444, color2 = 0x888888){
        color1 = new Color(color1);
        color2 = new Color(color2);
        const center = divisions / 2;
        const step = size / divisions;
        const halfSize = size / 2;
        const vertices = [], colors = [];
        for(let i = 0, j = 0, k = -halfSize; i <= divisions; i++, k += step){
            vertices.push(-halfSize, 0, k, halfSize, 0, k);
            vertices.push(k, 0, -halfSize, k, 0, halfSize);
            const color = i === center ? color1 : color2;
            color.toArray(colors, j);
            j += 3;
            color.toArray(colors, j);
            j += 3;
            color.toArray(colors, j);
            j += 3;
            color.toArray(colors, j);
            j += 3;
        }
        const geometry = new BufferGeometry();
        geometry.setAttribute("position", new Float32BufferAttribute(vertices, 3));
        geometry.setAttribute("color", new Float32BufferAttribute(colors, 3));
        const material = new LineBasicMaterial({
            vertexColors: true,
            toneMapped: false
        });
        super(geometry, material);
        this.type = "GridHelper";
    }
    dispose() {
        this.geometry.dispose();
        this.material.dispose();
    }
}
class PolarGridHelper extends LineSegments {
    constructor(radius = 10, sectors = 16, rings = 8, divisions = 64, color1 = 0x444444, color2 = 0x888888){
        color1 = new Color(color1);
        color2 = new Color(color2);
        const vertices = [];
        const colors = [];
        // create the sectors
        if (sectors > 1) for(let i = 0; i < sectors; i++){
            const v = i / sectors * (Math.PI * 2);
            const x = Math.sin(v) * radius;
            const z = Math.cos(v) * radius;
            vertices.push(0, 0, 0);
            vertices.push(x, 0, z);
            const color = i & 1 ? color1 : color2;
            colors.push(color.r, color.g, color.b);
            colors.push(color.r, color.g, color.b);
        }
        // create the rings
        for(let i = 0; i < rings; i++){
            const color = i & 1 ? color1 : color2;
            const r = radius - radius / rings * i;
            for(let j = 0; j < divisions; j++){
                // first vertex
                let v = j / divisions * (Math.PI * 2);
                let x = Math.sin(v) * r;
                let z = Math.cos(v) * r;
                vertices.push(x, 0, z);
                colors.push(color.r, color.g, color.b);
                // second vertex
                v = (j + 1) / divisions * (Math.PI * 2);
                x = Math.sin(v) * r;
                z = Math.cos(v) * r;
                vertices.push(x, 0, z);
                colors.push(color.r, color.g, color.b);
            }
        }
        const geometry = new BufferGeometry();
        geometry.setAttribute("position", new Float32BufferAttribute(vertices, 3));
        geometry.setAttribute("color", new Float32BufferAttribute(colors, 3));
        const material = new LineBasicMaterial({
            vertexColors: true,
            toneMapped: false
        });
        super(geometry, material);
        this.type = "PolarGridHelper";
    }
    dispose() {
        this.geometry.dispose();
        this.material.dispose();
    }
}
const _v1 = /*@__PURE__*/ new Vector3();
const _v2 = /*@__PURE__*/ new Vector3();
const _v3 = /*@__PURE__*/ new Vector3();
class DirectionalLightHelper extends Object3D {
    constructor(light, size, color){
        super();
        this.light = light;
        this.matrix = light.matrixWorld;
        this.matrixAutoUpdate = false;
        this.color = color;
        this.type = "DirectionalLightHelper";
        if (size === undefined) size = 1;
        let geometry = new BufferGeometry();
        geometry.setAttribute("position", new Float32BufferAttribute([
            -size,
            size,
            0,
            size,
            size,
            0,
            size,
            -size,
            0,
            -size,
            -size,
            0,
            -size,
            size,
            0
        ], 3));
        const material = new LineBasicMaterial({
            fog: false,
            toneMapped: false
        });
        this.lightPlane = new Line(geometry, material);
        this.add(this.lightPlane);
        geometry = new BufferGeometry();
        geometry.setAttribute("position", new Float32BufferAttribute([
            0,
            0,
            0,
            0,
            0,
            1
        ], 3));
        this.targetLine = new Line(geometry, material);
        this.add(this.targetLine);
        this.update();
    }
    dispose() {
        this.lightPlane.geometry.dispose();
        this.lightPlane.material.dispose();
        this.targetLine.geometry.dispose();
        this.targetLine.material.dispose();
    }
    update() {
        this.light.updateWorldMatrix(true, false);
        this.light.target.updateWorldMatrix(true, false);
        _v1.setFromMatrixPosition(this.light.matrixWorld);
        _v2.setFromMatrixPosition(this.light.target.matrixWorld);
        _v3.subVectors(_v2, _v1);
        this.lightPlane.lookAt(_v2);
        if (this.color !== undefined) {
            this.lightPlane.material.color.set(this.color);
            this.targetLine.material.color.set(this.color);
        } else {
            this.lightPlane.material.color.copy(this.light.color);
            this.targetLine.material.color.copy(this.light.color);
        }
        this.targetLine.lookAt(_v2);
        this.targetLine.scale.z = _v3.length();
    }
}
const _vector = /*@__PURE__*/ new Vector3();
const _camera = /*@__PURE__*/ new Camera();
/**
 *	- shows frustum, line of sight and up of the camera
 *	- suitable for fast updates
 * 	- based on frustum visualization in lightgl.js shadowmap example
 *		https://github.com/evanw/lightgl.js/blob/master/tests/shadowmap.html
 */ class CameraHelper extends LineSegments {
    constructor(camera){
        const geometry = new BufferGeometry();
        const material = new LineBasicMaterial({
            color: 0xffffff,
            vertexColors: true,
            toneMapped: false
        });
        const vertices = [];
        const colors = [];
        const pointMap = {};
        // near
        addLine("n1", "n2");
        addLine("n2", "n4");
        addLine("n4", "n3");
        addLine("n3", "n1");
        // far
        addLine("f1", "f2");
        addLine("f2", "f4");
        addLine("f4", "f3");
        addLine("f3", "f1");
        // sides
        addLine("n1", "f1");
        addLine("n2", "f2");
        addLine("n3", "f3");
        addLine("n4", "f4");
        // cone
        addLine("p", "n1");
        addLine("p", "n2");
        addLine("p", "n3");
        addLine("p", "n4");
        // up
        addLine("u1", "u2");
        addLine("u2", "u3");
        addLine("u3", "u1");
        // target
        addLine("c", "t");
        addLine("p", "c");
        // cross
        addLine("cn1", "cn2");
        addLine("cn3", "cn4");
        addLine("cf1", "cf2");
        addLine("cf3", "cf4");
        function addLine(a, b) {
            addPoint(a);
            addPoint(b);
        }
        function addPoint(id) {
            vertices.push(0, 0, 0);
            colors.push(0, 0, 0);
            if (pointMap[id] === undefined) pointMap[id] = [];
            pointMap[id].push(vertices.length / 3 - 1);
        }
        geometry.setAttribute("position", new Float32BufferAttribute(vertices, 3));
        geometry.setAttribute("color", new Float32BufferAttribute(colors, 3));
        super(geometry, material);
        this.type = "CameraHelper";
        this.camera = camera;
        if (this.camera.updateProjectionMatrix) this.camera.updateProjectionMatrix();
        this.matrix = camera.matrixWorld;
        this.matrixAutoUpdate = false;
        this.pointMap = pointMap;
        this.update();
        // colors
        const colorFrustum = new Color(0xffaa00);
        const colorCone = new Color(0xff0000);
        const colorUp = new Color(0x00aaff);
        const colorTarget = new Color(0xffffff);
        const colorCross = new Color(0x333333);
        this.setColors(colorFrustum, colorCone, colorUp, colorTarget, colorCross);
    }
    setColors(frustum, cone, up, target, cross) {
        const geometry = this.geometry;
        const colorAttribute = geometry.getAttribute("color");
        // near
        colorAttribute.setXYZ(0, frustum.r, frustum.g, frustum.b);
        colorAttribute.setXYZ(1, frustum.r, frustum.g, frustum.b); // n1, n2
        colorAttribute.setXYZ(2, frustum.r, frustum.g, frustum.b);
        colorAttribute.setXYZ(3, frustum.r, frustum.g, frustum.b); // n2, n4
        colorAttribute.setXYZ(4, frustum.r, frustum.g, frustum.b);
        colorAttribute.setXYZ(5, frustum.r, frustum.g, frustum.b); // n4, n3
        colorAttribute.setXYZ(6, frustum.r, frustum.g, frustum.b);
        colorAttribute.setXYZ(7, frustum.r, frustum.g, frustum.b); // n3, n1
        // far
        colorAttribute.setXYZ(8, frustum.r, frustum.g, frustum.b);
        colorAttribute.setXYZ(9, frustum.r, frustum.g, frustum.b); // f1, f2
        colorAttribute.setXYZ(10, frustum.r, frustum.g, frustum.b);
        colorAttribute.setXYZ(11, frustum.r, frustum.g, frustum.b); // f2, f4
        colorAttribute.setXYZ(12, frustum.r, frustum.g, frustum.b);
        colorAttribute.setXYZ(13, frustum.r, frustum.g, frustum.b); // f4, f3
        colorAttribute.setXYZ(14, frustum.r, frustum.g, frustum.b);
        colorAttribute.setXYZ(15, frustum.r, frustum.g, frustum.b); // f3, f1
        // sides
        colorAttribute.setXYZ(16, frustum.r, frustum.g, frustum.b);
        colorAttribute.setXYZ(17, frustum.r, frustum.g, frustum.b); // n1, f1
        colorAttribute.setXYZ(18, frustum.r, frustum.g, frustum.b);
        colorAttribute.setXYZ(19, frustum.r, frustum.g, frustum.b); // n2, f2
        colorAttribute.setXYZ(20, frustum.r, frustum.g, frustum.b);
        colorAttribute.setXYZ(21, frustum.r, frustum.g, frustum.b); // n3, f3
        colorAttribute.setXYZ(22, frustum.r, frustum.g, frustum.b);
        colorAttribute.setXYZ(23, frustum.r, frustum.g, frustum.b); // n4, f4
        // cone
        colorAttribute.setXYZ(24, cone.r, cone.g, cone.b);
        colorAttribute.setXYZ(25, cone.r, cone.g, cone.b); // p, n1
        colorAttribute.setXYZ(26, cone.r, cone.g, cone.b);
        colorAttribute.setXYZ(27, cone.r, cone.g, cone.b); // p, n2
        colorAttribute.setXYZ(28, cone.r, cone.g, cone.b);
        colorAttribute.setXYZ(29, cone.r, cone.g, cone.b); // p, n3
        colorAttribute.setXYZ(30, cone.r, cone.g, cone.b);
        colorAttribute.setXYZ(31, cone.r, cone.g, cone.b); // p, n4
        // up
        colorAttribute.setXYZ(32, up.r, up.g, up.b);
        colorAttribute.setXYZ(33, up.r, up.g, up.b); // u1, u2
        colorAttribute.setXYZ(34, up.r, up.g, up.b);
        colorAttribute.setXYZ(35, up.r, up.g, up.b); // u2, u3
        colorAttribute.setXYZ(36, up.r, up.g, up.b);
        colorAttribute.setXYZ(37, up.r, up.g, up.b); // u3, u1
        // target
        colorAttribute.setXYZ(38, target.r, target.g, target.b);
        colorAttribute.setXYZ(39, target.r, target.g, target.b); // c, t
        colorAttribute.setXYZ(40, cross.r, cross.g, cross.b);
        colorAttribute.setXYZ(41, cross.r, cross.g, cross.b); // p, c
        // cross
        colorAttribute.setXYZ(42, cross.r, cross.g, cross.b);
        colorAttribute.setXYZ(43, cross.r, cross.g, cross.b); // cn1, cn2
        colorAttribute.setXYZ(44, cross.r, cross.g, cross.b);
        colorAttribute.setXYZ(45, cross.r, cross.g, cross.b); // cn3, cn4
        colorAttribute.setXYZ(46, cross.r, cross.g, cross.b);
        colorAttribute.setXYZ(47, cross.r, cross.g, cross.b); // cf1, cf2
        colorAttribute.setXYZ(48, cross.r, cross.g, cross.b);
        colorAttribute.setXYZ(49, cross.r, cross.g, cross.b); // cf3, cf4
        colorAttribute.needsUpdate = true;
    }
    update() {
        const geometry = this.geometry;
        const pointMap = this.pointMap;
        const w = 1, h = 1;
        // we need just camera projection matrix inverse
        // world matrix must be identity
        _camera.projectionMatrixInverse.copy(this.camera.projectionMatrixInverse);
        // center / target
        setPoint("c", pointMap, geometry, _camera, 0, 0, -1);
        setPoint("t", pointMap, geometry, _camera, 0, 0, 1);
        // near
        setPoint("n1", pointMap, geometry, _camera, -w, -h, -1);
        setPoint("n2", pointMap, geometry, _camera, w, -h, -1);
        setPoint("n3", pointMap, geometry, _camera, -w, h, -1);
        setPoint("n4", pointMap, geometry, _camera, w, h, -1);
        // far
        setPoint("f1", pointMap, geometry, _camera, -w, -h, 1);
        setPoint("f2", pointMap, geometry, _camera, w, -h, 1);
        setPoint("f3", pointMap, geometry, _camera, -w, h, 1);
        setPoint("f4", pointMap, geometry, _camera, w, h, 1);
        // up
        setPoint("u1", pointMap, geometry, _camera, w * 0.7, h * 1.1, -1);
        setPoint("u2", pointMap, geometry, _camera, -w * 0.7, h * 1.1, -1);
        setPoint("u3", pointMap, geometry, _camera, 0, h * 2, -1);
        // cross
        setPoint("cf1", pointMap, geometry, _camera, -w, 0, 1);
        setPoint("cf2", pointMap, geometry, _camera, w, 0, 1);
        setPoint("cf3", pointMap, geometry, _camera, 0, -h, 1);
        setPoint("cf4", pointMap, geometry, _camera, 0, h, 1);
        setPoint("cn1", pointMap, geometry, _camera, -w, 0, -1);
        setPoint("cn2", pointMap, geometry, _camera, w, 0, -1);
        setPoint("cn3", pointMap, geometry, _camera, 0, -h, -1);
        setPoint("cn4", pointMap, geometry, _camera, 0, h, -1);
        geometry.getAttribute("position").needsUpdate = true;
    }
    dispose() {
        this.geometry.dispose();
        this.material.dispose();
    }
}
function setPoint(point, pointMap, geometry, camera, x, y, z) {
    _vector.set(x, y, z).unproject(camera);
    const points = pointMap[point];
    if (points !== undefined) {
        const position = geometry.getAttribute("position");
        for(let i = 0, l = points.length; i < l; i++)position.setXYZ(points[i], _vector.x, _vector.y, _vector.z);
    }
}
const _box = /*@__PURE__*/ new Box3();
class BoxHelper extends LineSegments {
    constructor(object, color = 0xffff00){
        const indices = new Uint16Array([
            0,
            1,
            1,
            2,
            2,
            3,
            3,
            0,
            4,
            5,
            5,
            6,
            6,
            7,
            7,
            4,
            0,
            4,
            1,
            5,
            2,
            6,
            3,
            7
        ]);
        const positions = new Float32Array(24);
        const geometry = new BufferGeometry();
        geometry.setIndex(new BufferAttribute(indices, 1));
        geometry.setAttribute("position", new BufferAttribute(positions, 3));
        super(geometry, new LineBasicMaterial({
            color: color,
            toneMapped: false
        }));
        this.object = object;
        this.type = "BoxHelper";
        this.matrixAutoUpdate = false;
        this.update();
    }
    update(object) {
        if (object !== undefined) console.warn("THREE.BoxHelper: .update() has no longer arguments.");
        if (this.object !== undefined) _box.setFromObject(this.object);
        if (_box.isEmpty()) return;
        const min = _box.min;
        const max = _box.max;
        /*
			5____4
		1/___0/|
		| 6__|_7
		2/___3/

		0: max.x, max.y, max.z
		1: min.x, max.y, max.z
		2: min.x, min.y, max.z
		3: max.x, min.y, max.z
		4: max.x, max.y, min.z
		5: min.x, max.y, min.z
		6: min.x, min.y, min.z
		7: max.x, min.y, min.z
		*/ const position = this.geometry.attributes.position;
        const array = position.array;
        array[0] = max.x;
        array[1] = max.y;
        array[2] = max.z;
        array[3] = min.x;
        array[4] = max.y;
        array[5] = max.z;
        array[6] = min.x;
        array[7] = min.y;
        array[8] = max.z;
        array[9] = max.x;
        array[10] = min.y;
        array[11] = max.z;
        array[12] = max.x;
        array[13] = max.y;
        array[14] = min.z;
        array[15] = min.x;
        array[16] = max.y;
        array[17] = min.z;
        array[18] = min.x;
        array[19] = min.y;
        array[20] = min.z;
        array[21] = max.x;
        array[22] = min.y;
        array[23] = min.z;
        position.needsUpdate = true;
        this.geometry.computeBoundingSphere();
    }
    setFromObject(object) {
        this.object = object;
        this.update();
        return this;
    }
    copy(source, recursive) {
        super.copy(source, recursive);
        this.object = source.object;
        return this;
    }
    dispose() {
        this.geometry.dispose();
        this.material.dispose();
    }
}
class Box3Helper extends LineSegments {
    constructor(box, color = 0xffff00){
        const indices = new Uint16Array([
            0,
            1,
            1,
            2,
            2,
            3,
            3,
            0,
            4,
            5,
            5,
            6,
            6,
            7,
            7,
            4,
            0,
            4,
            1,
            5,
            2,
            6,
            3,
            7
        ]);
        const positions = [
            1,
            1,
            1,
            -1,
            1,
            1,
            -1,
            -1,
            1,
            1,
            -1,
            1,
            1,
            1,
            -1,
            -1,
            1,
            -1,
            -1,
            -1,
            -1,
            1,
            -1,
            -1
        ];
        const geometry = new BufferGeometry();
        geometry.setIndex(new BufferAttribute(indices, 1));
        geometry.setAttribute("position", new Float32BufferAttribute(positions, 3));
        super(geometry, new LineBasicMaterial({
            color: color,
            toneMapped: false
        }));
        this.box = box;
        this.type = "Box3Helper";
        this.geometry.computeBoundingSphere();
    }
    updateMatrixWorld(force) {
        const box = this.box;
        if (box.isEmpty()) return;
        box.getCenter(this.position);
        box.getSize(this.scale);
        this.scale.multiplyScalar(0.5);
        super.updateMatrixWorld(force);
    }
    dispose() {
        this.geometry.dispose();
        this.material.dispose();
    }
}
class PlaneHelper extends Line {
    constructor(plane, size = 1, hex = 0xffff00){
        const color = hex;
        const positions = [
            1,
            -1,
            0,
            -1,
            1,
            0,
            -1,
            -1,
            0,
            1,
            1,
            0,
            -1,
            1,
            0,
            -1,
            -1,
            0,
            1,
            -1,
            0,
            1,
            1,
            0
        ];
        const geometry = new BufferGeometry();
        geometry.setAttribute("position", new Float32BufferAttribute(positions, 3));
        geometry.computeBoundingSphere();
        super(geometry, new LineBasicMaterial({
            color: color,
            toneMapped: false
        }));
        this.type = "PlaneHelper";
        this.plane = plane;
        this.size = size;
        const positions2 = [
            1,
            1,
            0,
            -1,
            1,
            0,
            -1,
            -1,
            0,
            1,
            1,
            0,
            -1,
            -1,
            0,
            1,
            -1,
            0
        ];
        const geometry2 = new BufferGeometry();
        geometry2.setAttribute("position", new Float32BufferAttribute(positions2, 3));
        geometry2.computeBoundingSphere();
        this.add(new Mesh(geometry2, new MeshBasicMaterial({
            color: color,
            opacity: 0.2,
            transparent: true,
            depthWrite: false,
            toneMapped: false
        })));
    }
    updateMatrixWorld(force) {
        this.position.set(0, 0, 0);
        this.scale.set(0.5 * this.size, 0.5 * this.size, 1);
        this.lookAt(this.plane.normal);
        this.translateZ(-this.plane.constant);
        super.updateMatrixWorld(force);
    }
    dispose() {
        this.geometry.dispose();
        this.material.dispose();
        this.children[0].geometry.dispose();
        this.children[0].material.dispose();
    }
}
const _axis = /*@__PURE__*/ new Vector3();
let _lineGeometry, _coneGeometry;
class ArrowHelper extends Object3D {
    // dir is assumed to be normalized
    constructor(dir = new Vector3(0, 0, 1), origin = new Vector3(0, 0, 0), length = 1, color = 0xffff00, headLength = length * 0.2, headWidth = headLength * 0.2){
        super();
        this.type = "ArrowHelper";
        if (_lineGeometry === undefined) {
            _lineGeometry = new BufferGeometry();
            _lineGeometry.setAttribute("position", new Float32BufferAttribute([
                0,
                0,
                0,
                0,
                1,
                0
            ], 3));
            _coneGeometry = new CylinderGeometry(0, 0.5, 1, 5, 1);
            _coneGeometry.translate(0, -0.5, 0);
        }
        this.position.copy(origin);
        this.line = new Line(_lineGeometry, new LineBasicMaterial({
            color: color,
            toneMapped: false
        }));
        this.line.matrixAutoUpdate = false;
        this.add(this.line);
        this.cone = new Mesh(_coneGeometry, new MeshBasicMaterial({
            color: color,
            toneMapped: false
        }));
        this.cone.matrixAutoUpdate = false;
        this.add(this.cone);
        this.setDirection(dir);
        this.setLength(length, headLength, headWidth);
    }
    setDirection(dir) {
        // dir is assumed to be normalized
        if (dir.y > 0.99999) this.quaternion.set(0, 0, 0, 1);
        else if (dir.y < -0.99999) this.quaternion.set(1, 0, 0, 0);
        else {
            _axis.set(dir.z, 0, -dir.x).normalize();
            const radians = Math.acos(dir.y);
            this.quaternion.setFromAxisAngle(_axis, radians);
        }
    }
    setLength(length, headLength = length * 0.2, headWidth = headLength * 0.2) {
        this.line.scale.set(1, Math.max(0.0001, length - headLength), 1); // see #17458
        this.line.updateMatrix();
        this.cone.scale.set(headWidth, headLength, headWidth);
        this.cone.position.y = length;
        this.cone.updateMatrix();
    }
    setColor(color) {
        this.line.material.color.set(color);
        this.cone.material.color.set(color);
    }
    copy(source) {
        super.copy(source, false);
        this.line.copy(source.line);
        this.cone.copy(source.cone);
        return this;
    }
    dispose() {
        this.line.geometry.dispose();
        this.line.material.dispose();
        this.cone.geometry.dispose();
        this.cone.material.dispose();
    }
}
class AxesHelper extends LineSegments {
    constructor(size = 1){
        const vertices = [
            0,
            0,
            0,
            size,
            0,
            0,
            0,
            0,
            0,
            0,
            size,
            0,
            0,
            0,
            0,
            0,
            0,
            size
        ];
        const colors = [
            1,
            0,
            0,
            1,
            0.6,
            0,
            0,
            1,
            0,
            0.6,
            1,
            0,
            0,
            0,
            1,
            0,
            0.6,
            1
        ];
        const geometry = new BufferGeometry();
        geometry.setAttribute("position", new Float32BufferAttribute(vertices, 3));
        geometry.setAttribute("color", new Float32BufferAttribute(colors, 3));
        const material = new LineBasicMaterial({
            vertexColors: true,
            toneMapped: false
        });
        super(geometry, material);
        this.type = "AxesHelper";
    }
    setColors(xAxisColor, yAxisColor, zAxisColor) {
        const color = new Color();
        const array = this.geometry.attributes.color.array;
        color.set(xAxisColor);
        color.toArray(array, 0);
        color.toArray(array, 3);
        color.set(yAxisColor);
        color.toArray(array, 6);
        color.toArray(array, 9);
        color.set(zAxisColor);
        color.toArray(array, 12);
        color.toArray(array, 15);
        this.geometry.attributes.color.needsUpdate = true;
        return this;
    }
    dispose() {
        this.geometry.dispose();
        this.material.dispose();
    }
}
class ShapePath {
    constructor(){
        this.type = "ShapePath";
        this.color = new Color();
        this.subPaths = [];
        this.currentPath = null;
    }
    moveTo(x, y) {
        this.currentPath = new Path();
        this.subPaths.push(this.currentPath);
        this.currentPath.moveTo(x, y);
        return this;
    }
    lineTo(x, y) {
        this.currentPath.lineTo(x, y);
        return this;
    }
    quadraticCurveTo(aCPx, aCPy, aX, aY) {
        this.currentPath.quadraticCurveTo(aCPx, aCPy, aX, aY);
        return this;
    }
    bezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY) {
        this.currentPath.bezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY);
        return this;
    }
    splineThru(pts) {
        this.currentPath.splineThru(pts);
        return this;
    }
    toShapes(isCCW) {
        function toShapesNoHoles(inSubpaths) {
            const shapes = [];
            for(let i = 0, l = inSubpaths.length; i < l; i++){
                const tmpPath = inSubpaths[i];
                const tmpShape = new Shape();
                tmpShape.curves = tmpPath.curves;
                shapes.push(tmpShape);
            }
            return shapes;
        }
        function isPointInsidePolygon(inPt, inPolygon) {
            const polyLen = inPolygon.length;
            // inPt on polygon contour => immediate success    or
            // toggling of inside/outside at every single! intersection point of an edge
            //  with the horizontal line through inPt, left of inPt
            //  not counting lowerY endpoints of edges and whole edges on that line
            let inside = false;
            for(let p = polyLen - 1, q = 0; q < polyLen; p = q++){
                let edgeLowPt = inPolygon[p];
                let edgeHighPt = inPolygon[q];
                let edgeDx = edgeHighPt.x - edgeLowPt.x;
                let edgeDy = edgeHighPt.y - edgeLowPt.y;
                if (Math.abs(edgeDy) > Number.EPSILON) {
                    // not parallel
                    if (edgeDy < 0) {
                        edgeLowPt = inPolygon[q];
                        edgeDx = -edgeDx;
                        edgeHighPt = inPolygon[p];
                        edgeDy = -edgeDy;
                    }
                    if (inPt.y < edgeLowPt.y || inPt.y > edgeHighPt.y) continue;
                    if (inPt.y === edgeLowPt.y) {
                        if (inPt.x === edgeLowPt.x) return true; // inPt is on contour ?
                    // continue;				// no intersection or edgeLowPt => doesn't count !!!
                    } else {
                        const perpEdge = edgeDy * (inPt.x - edgeLowPt.x) - edgeDx * (inPt.y - edgeLowPt.y);
                        if (perpEdge === 0) return true; // inPt is on contour ?
                        if (perpEdge < 0) continue;
                        inside = !inside; // true intersection left of inPt
                    }
                } else {
                    // parallel or collinear
                    if (inPt.y !== edgeLowPt.y) continue; // parallel
                    // edge lies on the same horizontal line as inPt
                    if (edgeHighPt.x <= inPt.x && inPt.x <= edgeLowPt.x || edgeLowPt.x <= inPt.x && inPt.x <= edgeHighPt.x) return true; // inPt: Point on contour !
                // continue;
                }
            }
            return inside;
        }
        const isClockWise = ShapeUtils.isClockWise;
        const subPaths = this.subPaths;
        if (subPaths.length === 0) return [];
        let solid, tmpPath, tmpShape;
        const shapes = [];
        if (subPaths.length === 1) {
            tmpPath = subPaths[0];
            tmpShape = new Shape();
            tmpShape.curves = tmpPath.curves;
            shapes.push(tmpShape);
            return shapes;
        }
        let holesFirst = !isClockWise(subPaths[0].getPoints());
        holesFirst = isCCW ? !holesFirst : holesFirst;
        // console.log("Holes first", holesFirst);
        const betterShapeHoles = [];
        const newShapes = [];
        let newShapeHoles = [];
        let mainIdx = 0;
        let tmpPoints;
        newShapes[mainIdx] = undefined;
        newShapeHoles[mainIdx] = [];
        for(let i = 0, l = subPaths.length; i < l; i++){
            tmpPath = subPaths[i];
            tmpPoints = tmpPath.getPoints();
            solid = isClockWise(tmpPoints);
            solid = isCCW ? !solid : solid;
            if (solid) {
                if (!holesFirst && newShapes[mainIdx]) mainIdx++;
                newShapes[mainIdx] = {
                    s: new Shape(),
                    p: tmpPoints
                };
                newShapes[mainIdx].s.curves = tmpPath.curves;
                if (holesFirst) mainIdx++;
                newShapeHoles[mainIdx] = [];
            //console.log('cw', i);
            } else newShapeHoles[mainIdx].push({
                h: tmpPath,
                p: tmpPoints[0]
            });
        }
        // only Holes? -> probably all Shapes with wrong orientation
        if (!newShapes[0]) return toShapesNoHoles(subPaths);
        if (newShapes.length > 1) {
            let ambiguous = false;
            let toChange = 0;
            for(let sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx++)betterShapeHoles[sIdx] = [];
            for(let sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx++){
                const sho = newShapeHoles[sIdx];
                for(let hIdx = 0; hIdx < sho.length; hIdx++){
                    const ho = sho[hIdx];
                    let hole_unassigned = true;
                    for(let s2Idx = 0; s2Idx < newShapes.length; s2Idx++)if (isPointInsidePolygon(ho.p, newShapes[s2Idx].p)) {
                        if (sIdx !== s2Idx) toChange++;
                        if (hole_unassigned) {
                            hole_unassigned = false;
                            betterShapeHoles[s2Idx].push(ho);
                        } else ambiguous = true;
                    }
                    if (hole_unassigned) betterShapeHoles[sIdx].push(ho);
                }
            }
            if (toChange > 0 && ambiguous === false) newShapeHoles = betterShapeHoles;
        }
        let tmpHoles;
        for(let i = 0, il = newShapes.length; i < il; i++){
            tmpShape = newShapes[i].s;
            shapes.push(tmpShape);
            tmpHoles = newShapeHoles[i];
            for(let j = 0, jl = tmpHoles.length; j < jl; j++)tmpShape.holes.push(tmpHoles[j].h);
        }
        //console.log("shape", shapes);
        return shapes;
    }
}
if (typeof __THREE_DEVTOOLS__ !== "undefined") __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register", {
    detail: {
        revision: REVISION
    }
}));
if (typeof window !== "undefined") {
    if (window.__THREE__) console.warn("WARNING: Multiple instances of Three.js being imported.");
    else window.__THREE__ = REVISION;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fPULy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "OrbitControls", ()=>OrbitControls);
var _three = require("three");
// OrbitControls performs orbiting, dollying (zooming), and panning.
// Unlike TrackballControls, it maintains the "up" direction object.up (+Y by default).
//
//    Orbit - left mouse / touch: one-finger move
//    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish
//    Pan - right mouse, or left mouse + ctrl/meta/shiftKey, or arrow keys / touch: two-finger move
const _changeEvent = {
    type: "change"
};
const _startEvent = {
    type: "start"
};
const _endEvent = {
    type: "end"
};
const _ray = new (0, _three.Ray)();
const _plane = new (0, _three.Plane)();
const TILT_LIMIT = Math.cos(70 * (0, _three.MathUtils).DEG2RAD);
class OrbitControls extends (0, _three.EventDispatcher) {
    constructor(object, domElement){
        super();
        this.object = object;
        this.domElement = domElement;
        this.domElement.style.touchAction = "none"; // disable touch scroll
        // Set to false to disable this control
        this.enabled = true;
        // "target" sets the location of focus, where the object orbits around
        this.target = new (0, _three.Vector3)();
        // How far you can dolly in and out ( PerspectiveCamera only )
        this.minDistance = 0;
        this.maxDistance = Infinity;
        // How far you can zoom in and out ( OrthographicCamera only )
        this.minZoom = 0;
        this.maxZoom = Infinity;
        // How far you can orbit vertically, upper and lower limits.
        // Range is 0 to Math.PI radians.
        this.minPolarAngle = 0; // radians
        this.maxPolarAngle = Math.PI; // radians
        // How far you can orbit horizontally, upper and lower limits.
        // If set, the interval [ min, max ] must be a sub-interval of [ - 2 PI, 2 PI ], with ( max - min < 2 PI )
        this.minAzimuthAngle = -Infinity; // radians
        this.maxAzimuthAngle = Infinity; // radians
        // Set to true to enable damping (inertia)
        // If damping is enabled, you must call controls.update() in your animation loop
        this.enableDamping = false;
        this.dampingFactor = 0.05;
        // This option actually enables dollying in and out; left as "zoom" for backwards compatibility.
        // Set to false to disable zooming
        this.enableZoom = true;
        this.zoomSpeed = 1.0;
        // Set to false to disable rotating
        this.enableRotate = true;
        this.rotateSpeed = 1.0;
        // Set to false to disable panning
        this.enablePan = true;
        this.panSpeed = 1.0;
        this.screenSpacePanning = true; // if false, pan orthogonal to world-space direction camera.up
        this.keyPanSpeed = 7.0; // pixels moved per arrow key push
        this.zoomToCursor = false;
        // Set to true to automatically rotate around the target
        // If auto-rotate is enabled, you must call controls.update() in your animation loop
        this.autoRotate = false;
        this.autoRotateSpeed = 2.0; // 30 seconds per orbit when fps is 60
        // The four arrow keys
        this.keys = {
            LEFT: "ArrowLeft",
            UP: "ArrowUp",
            RIGHT: "ArrowRight",
            BOTTOM: "ArrowDown"
        };
        // Mouse buttons
        this.mouseButtons = {
            LEFT: (0, _three.MOUSE).ROTATE,
            MIDDLE: (0, _three.MOUSE).DOLLY,
            RIGHT: (0, _three.MOUSE).PAN
        };
        // Touch fingers
        this.touches = {
            ONE: (0, _three.TOUCH).ROTATE,
            TWO: (0, _three.TOUCH).DOLLY_PAN
        };
        // for reset
        this.target0 = this.target.clone();
        this.position0 = this.object.position.clone();
        this.zoom0 = this.object.zoom;
        // the target DOM element for key events
        this._domElementKeyEvents = null;
        //
        // public methods
        //
        this.getPolarAngle = function() {
            return spherical.phi;
        };
        this.getAzimuthalAngle = function() {
            return spherical.theta;
        };
        this.getDistance = function() {
            return this.object.position.distanceTo(this.target);
        };
        this.listenToKeyEvents = function(domElement) {
            domElement.addEventListener("keydown", onKeyDown);
            this._domElementKeyEvents = domElement;
        };
        this.stopListenToKeyEvents = function() {
            this._domElementKeyEvents.removeEventListener("keydown", onKeyDown);
            this._domElementKeyEvents = null;
        };
        this.saveState = function() {
            scope.target0.copy(scope.target);
            scope.position0.copy(scope.object.position);
            scope.zoom0 = scope.object.zoom;
        };
        this.reset = function() {
            scope.target.copy(scope.target0);
            scope.object.position.copy(scope.position0);
            scope.object.zoom = scope.zoom0;
            scope.object.updateProjectionMatrix();
            scope.dispatchEvent(_changeEvent);
            scope.update();
            state = STATE.NONE;
        };
        // this method is exposed, but perhaps it would be better if we can make it private...
        this.update = function() {
            const offset = new (0, _three.Vector3)();
            // so camera.up is the orbit axis
            const quat = new (0, _three.Quaternion)().setFromUnitVectors(object.up, new (0, _three.Vector3)(0, 1, 0));
            const quatInverse = quat.clone().invert();
            const lastPosition = new (0, _three.Vector3)();
            const lastQuaternion = new (0, _three.Quaternion)();
            const lastTargetPosition = new (0, _three.Vector3)();
            const twoPI = 2 * Math.PI;
            return function update(deltaTime = null) {
                const position = scope.object.position;
                offset.copy(position).sub(scope.target);
                // rotate offset to "y-axis-is-up" space
                offset.applyQuaternion(quat);
                // angle from z-axis around y-axis
                spherical.setFromVector3(offset);
                if (scope.autoRotate && state === STATE.NONE) rotateLeft(getAutoRotationAngle(deltaTime));
                if (scope.enableDamping) {
                    spherical.theta += sphericalDelta.theta * scope.dampingFactor;
                    spherical.phi += sphericalDelta.phi * scope.dampingFactor;
                } else {
                    spherical.theta += sphericalDelta.theta;
                    spherical.phi += sphericalDelta.phi;
                }
                // restrict theta to be between desired limits
                let min = scope.minAzimuthAngle;
                let max = scope.maxAzimuthAngle;
                if (isFinite(min) && isFinite(max)) {
                    if (min < -Math.PI) min += twoPI;
                    else if (min > Math.PI) min -= twoPI;
                    if (max < -Math.PI) max += twoPI;
                    else if (max > Math.PI) max -= twoPI;
                    if (min <= max) spherical.theta = Math.max(min, Math.min(max, spherical.theta));
                    else spherical.theta = spherical.theta > (min + max) / 2 ? Math.max(min, spherical.theta) : Math.min(max, spherical.theta);
                }
                // restrict phi to be between desired limits
                spherical.phi = Math.max(scope.minPolarAngle, Math.min(scope.maxPolarAngle, spherical.phi));
                spherical.makeSafe();
                // move target to panned location
                if (scope.enableDamping === true) scope.target.addScaledVector(panOffset, scope.dampingFactor);
                else scope.target.add(panOffset);
                // adjust the camera position based on zoom only if we're not zooming to the cursor or if it's an ortho camera
                // we adjust zoom later in these cases
                if (scope.zoomToCursor && performCursorZoom || scope.object.isOrthographicCamera) spherical.radius = clampDistance(spherical.radius);
                else spherical.radius = clampDistance(spherical.radius * scale);
                offset.setFromSpherical(spherical);
                // rotate offset back to "camera-up-vector-is-up" space
                offset.applyQuaternion(quatInverse);
                position.copy(scope.target).add(offset);
                scope.object.lookAt(scope.target);
                if (scope.enableDamping === true) {
                    sphericalDelta.theta *= 1 - scope.dampingFactor;
                    sphericalDelta.phi *= 1 - scope.dampingFactor;
                    panOffset.multiplyScalar(1 - scope.dampingFactor);
                } else {
                    sphericalDelta.set(0, 0, 0);
                    panOffset.set(0, 0, 0);
                }
                // adjust camera position
                let zoomChanged = false;
                if (scope.zoomToCursor && performCursorZoom) {
                    let newRadius = null;
                    if (scope.object.isPerspectiveCamera) {
                        // move the camera down the pointer ray
                        // this method avoids floating point error
                        const prevRadius = offset.length();
                        newRadius = clampDistance(prevRadius * scale);
                        const radiusDelta = prevRadius - newRadius;
                        scope.object.position.addScaledVector(dollyDirection, radiusDelta);
                        scope.object.updateMatrixWorld();
                    } else if (scope.object.isOrthographicCamera) {
                        // adjust the ortho camera position based on zoom changes
                        const mouseBefore = new (0, _three.Vector3)(mouse.x, mouse.y, 0);
                        mouseBefore.unproject(scope.object);
                        scope.object.zoom = Math.max(scope.minZoom, Math.min(scope.maxZoom, scope.object.zoom / scale));
                        scope.object.updateProjectionMatrix();
                        zoomChanged = true;
                        const mouseAfter = new (0, _three.Vector3)(mouse.x, mouse.y, 0);
                        mouseAfter.unproject(scope.object);
                        scope.object.position.sub(mouseAfter).add(mouseBefore);
                        scope.object.updateMatrixWorld();
                        newRadius = offset.length();
                    } else {
                        console.warn("WARNING: OrbitControls.js encountered an unknown camera type - zoom to cursor disabled.");
                        scope.zoomToCursor = false;
                    }
                    // handle the placement of the target
                    if (newRadius !== null) {
                        if (this.screenSpacePanning) // position the orbit target in front of the new camera position
                        scope.target.set(0, 0, -1).transformDirection(scope.object.matrix).multiplyScalar(newRadius).add(scope.object.position);
                        else {
                            // get the ray and translation plane to compute target
                            _ray.origin.copy(scope.object.position);
                            _ray.direction.set(0, 0, -1).transformDirection(scope.object.matrix);
                            // if the camera is 20 degrees above the horizon then don't adjust the focus target to avoid
                            // extremely large values
                            if (Math.abs(scope.object.up.dot(_ray.direction)) < TILT_LIMIT) object.lookAt(scope.target);
                            else {
                                _plane.setFromNormalAndCoplanarPoint(scope.object.up, scope.target);
                                _ray.intersectPlane(_plane, scope.target);
                            }
                        }
                    }
                } else if (scope.object.isOrthographicCamera) {
                    scope.object.zoom = Math.max(scope.minZoom, Math.min(scope.maxZoom, scope.object.zoom / scale));
                    scope.object.updateProjectionMatrix();
                    zoomChanged = true;
                }
                scale = 1;
                performCursorZoom = false;
                // update condition is:
                // min(camera displacement, camera rotation in radians)^2 > EPS
                // using small-angle approximation cos(x/2) = 1 - x^2 / 8
                if (zoomChanged || lastPosition.distanceToSquared(scope.object.position) > EPS || 8 * (1 - lastQuaternion.dot(scope.object.quaternion)) > EPS || lastTargetPosition.distanceToSquared(scope.target) > 0) {
                    scope.dispatchEvent(_changeEvent);
                    lastPosition.copy(scope.object.position);
                    lastQuaternion.copy(scope.object.quaternion);
                    lastTargetPosition.copy(scope.target);
                    zoomChanged = false;
                    return true;
                }
                return false;
            };
        }();
        this.dispose = function() {
            scope.domElement.removeEventListener("contextmenu", onContextMenu);
            scope.domElement.removeEventListener("pointerdown", onPointerDown);
            scope.domElement.removeEventListener("pointercancel", onPointerUp);
            scope.domElement.removeEventListener("wheel", onMouseWheel);
            scope.domElement.removeEventListener("pointermove", onPointerMove);
            scope.domElement.removeEventListener("pointerup", onPointerUp);
            if (scope._domElementKeyEvents !== null) {
                scope._domElementKeyEvents.removeEventListener("keydown", onKeyDown);
                scope._domElementKeyEvents = null;
            }
        //scope.dispatchEvent( { type: 'dispose' } ); // should this be added here?
        };
        //
        // internals
        //
        const scope = this;
        const STATE = {
            NONE: -1,
            ROTATE: 0,
            DOLLY: 1,
            PAN: 2,
            TOUCH_ROTATE: 3,
            TOUCH_PAN: 4,
            TOUCH_DOLLY_PAN: 5,
            TOUCH_DOLLY_ROTATE: 6
        };
        let state = STATE.NONE;
        const EPS = 0.000001;
        // current position in spherical coordinates
        const spherical = new (0, _three.Spherical)();
        const sphericalDelta = new (0, _three.Spherical)();
        let scale = 1;
        const panOffset = new (0, _three.Vector3)();
        const rotateStart = new (0, _three.Vector2)();
        const rotateEnd = new (0, _three.Vector2)();
        const rotateDelta = new (0, _three.Vector2)();
        const panStart = new (0, _three.Vector2)();
        const panEnd = new (0, _three.Vector2)();
        const panDelta = new (0, _three.Vector2)();
        const dollyStart = new (0, _three.Vector2)();
        const dollyEnd = new (0, _three.Vector2)();
        const dollyDelta = new (0, _three.Vector2)();
        const dollyDirection = new (0, _three.Vector3)();
        const mouse = new (0, _three.Vector2)();
        let performCursorZoom = false;
        const pointers = [];
        const pointerPositions = {};
        function getAutoRotationAngle(deltaTime) {
            if (deltaTime !== null) return 2 * Math.PI / 60 * scope.autoRotateSpeed * deltaTime;
            else return 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;
        }
        function getZoomScale() {
            return Math.pow(0.95, scope.zoomSpeed);
        }
        function rotateLeft(angle) {
            sphericalDelta.theta -= angle;
        }
        function rotateUp(angle) {
            sphericalDelta.phi -= angle;
        }
        const panLeft = function() {
            const v = new (0, _three.Vector3)();
            return function panLeft(distance, objectMatrix) {
                v.setFromMatrixColumn(objectMatrix, 0); // get X column of objectMatrix
                v.multiplyScalar(-distance);
                panOffset.add(v);
            };
        }();
        const panUp = function() {
            const v = new (0, _three.Vector3)();
            return function panUp(distance, objectMatrix) {
                if (scope.screenSpacePanning === true) v.setFromMatrixColumn(objectMatrix, 1);
                else {
                    v.setFromMatrixColumn(objectMatrix, 0);
                    v.crossVectors(scope.object.up, v);
                }
                v.multiplyScalar(distance);
                panOffset.add(v);
            };
        }();
        // deltaX and deltaY are in pixels; right and down are positive
        const pan = function() {
            const offset = new (0, _three.Vector3)();
            return function pan(deltaX, deltaY) {
                const element = scope.domElement;
                if (scope.object.isPerspectiveCamera) {
                    // perspective
                    const position = scope.object.position;
                    offset.copy(position).sub(scope.target);
                    let targetDistance = offset.length();
                    // half of the fov is center to top of screen
                    targetDistance *= Math.tan(scope.object.fov / 2 * Math.PI / 180.0);
                    // we use only clientHeight here so aspect ratio does not distort speed
                    panLeft(2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix);
                    panUp(2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix);
                } else if (scope.object.isOrthographicCamera) {
                    // orthographic
                    panLeft(deltaX * (scope.object.right - scope.object.left) / scope.object.zoom / element.clientWidth, scope.object.matrix);
                    panUp(deltaY * (scope.object.top - scope.object.bottom) / scope.object.zoom / element.clientHeight, scope.object.matrix);
                } else {
                    // camera neither orthographic nor perspective
                    console.warn("WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.");
                    scope.enablePan = false;
                }
            };
        }();
        function dollyOut(dollyScale) {
            if (scope.object.isPerspectiveCamera || scope.object.isOrthographicCamera) scale /= dollyScale;
            else {
                console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.");
                scope.enableZoom = false;
            }
        }
        function dollyIn(dollyScale) {
            if (scope.object.isPerspectiveCamera || scope.object.isOrthographicCamera) scale *= dollyScale;
            else {
                console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.");
                scope.enableZoom = false;
            }
        }
        function updateMouseParameters(event) {
            if (!scope.zoomToCursor) return;
            performCursorZoom = true;
            const rect = scope.domElement.getBoundingClientRect();
            const x = event.clientX - rect.left;
            const y = event.clientY - rect.top;
            const w = rect.width;
            const h = rect.height;
            mouse.x = x / w * 2 - 1;
            mouse.y = -(y / h) * 2 + 1;
            dollyDirection.set(mouse.x, mouse.y, 1).unproject(scope.object).sub(scope.object.position).normalize();
        }
        function clampDistance(dist) {
            return Math.max(scope.minDistance, Math.min(scope.maxDistance, dist));
        }
        //
        // event callbacks - update the object state
        //
        function handleMouseDownRotate(event) {
            rotateStart.set(event.clientX, event.clientY);
        }
        function handleMouseDownDolly(event) {
            updateMouseParameters(event);
            dollyStart.set(event.clientX, event.clientY);
        }
        function handleMouseDownPan(event) {
            panStart.set(event.clientX, event.clientY);
        }
        function handleMouseMoveRotate(event) {
            rotateEnd.set(event.clientX, event.clientY);
            rotateDelta.subVectors(rotateEnd, rotateStart).multiplyScalar(scope.rotateSpeed);
            const element = scope.domElement;
            rotateLeft(2 * Math.PI * rotateDelta.x / element.clientHeight); // yes, height
            rotateUp(2 * Math.PI * rotateDelta.y / element.clientHeight);
            rotateStart.copy(rotateEnd);
            scope.update();
        }
        function handleMouseMoveDolly(event) {
            dollyEnd.set(event.clientX, event.clientY);
            dollyDelta.subVectors(dollyEnd, dollyStart);
            if (dollyDelta.y > 0) dollyOut(getZoomScale());
            else if (dollyDelta.y < 0) dollyIn(getZoomScale());
            dollyStart.copy(dollyEnd);
            scope.update();
        }
        function handleMouseMovePan(event) {
            panEnd.set(event.clientX, event.clientY);
            panDelta.subVectors(panEnd, panStart).multiplyScalar(scope.panSpeed);
            pan(panDelta.x, panDelta.y);
            panStart.copy(panEnd);
            scope.update();
        }
        function handleMouseWheel(event) {
            updateMouseParameters(event);
            if (event.deltaY < 0) dollyIn(getZoomScale());
            else if (event.deltaY > 0) dollyOut(getZoomScale());
            scope.update();
        }
        function handleKeyDown(event) {
            let needsUpdate = false;
            switch(event.code){
                case scope.keys.UP:
                    if (event.ctrlKey || event.metaKey || event.shiftKey) rotateUp(2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight);
                    else pan(0, scope.keyPanSpeed);
                    needsUpdate = true;
                    break;
                case scope.keys.BOTTOM:
                    if (event.ctrlKey || event.metaKey || event.shiftKey) rotateUp(-2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight);
                    else pan(0, -scope.keyPanSpeed);
                    needsUpdate = true;
                    break;
                case scope.keys.LEFT:
                    if (event.ctrlKey || event.metaKey || event.shiftKey) rotateLeft(2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight);
                    else pan(scope.keyPanSpeed, 0);
                    needsUpdate = true;
                    break;
                case scope.keys.RIGHT:
                    if (event.ctrlKey || event.metaKey || event.shiftKey) rotateLeft(-2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight);
                    else pan(-scope.keyPanSpeed, 0);
                    needsUpdate = true;
                    break;
            }
            if (needsUpdate) {
                // prevent the browser from scrolling on cursor keys
                event.preventDefault();
                scope.update();
            }
        }
        function handleTouchStartRotate() {
            if (pointers.length === 1) rotateStart.set(pointers[0].pageX, pointers[0].pageY);
            else {
                const x = 0.5 * (pointers[0].pageX + pointers[1].pageX);
                const y = 0.5 * (pointers[0].pageY + pointers[1].pageY);
                rotateStart.set(x, y);
            }
        }
        function handleTouchStartPan() {
            if (pointers.length === 1) panStart.set(pointers[0].pageX, pointers[0].pageY);
            else {
                const x = 0.5 * (pointers[0].pageX + pointers[1].pageX);
                const y = 0.5 * (pointers[0].pageY + pointers[1].pageY);
                panStart.set(x, y);
            }
        }
        function handleTouchStartDolly() {
            const dx = pointers[0].pageX - pointers[1].pageX;
            const dy = pointers[0].pageY - pointers[1].pageY;
            const distance = Math.sqrt(dx * dx + dy * dy);
            dollyStart.set(0, distance);
        }
        function handleTouchStartDollyPan() {
            if (scope.enableZoom) handleTouchStartDolly();
            if (scope.enablePan) handleTouchStartPan();
        }
        function handleTouchStartDollyRotate() {
            if (scope.enableZoom) handleTouchStartDolly();
            if (scope.enableRotate) handleTouchStartRotate();
        }
        function handleTouchMoveRotate(event) {
            if (pointers.length == 1) rotateEnd.set(event.pageX, event.pageY);
            else {
                const position = getSecondPointerPosition(event);
                const x = 0.5 * (event.pageX + position.x);
                const y = 0.5 * (event.pageY + position.y);
                rotateEnd.set(x, y);
            }
            rotateDelta.subVectors(rotateEnd, rotateStart).multiplyScalar(scope.rotateSpeed);
            const element = scope.domElement;
            rotateLeft(2 * Math.PI * rotateDelta.x / element.clientHeight); // yes, height
            rotateUp(2 * Math.PI * rotateDelta.y / element.clientHeight);
            rotateStart.copy(rotateEnd);
        }
        function handleTouchMovePan(event) {
            if (pointers.length === 1) panEnd.set(event.pageX, event.pageY);
            else {
                const position = getSecondPointerPosition(event);
                const x = 0.5 * (event.pageX + position.x);
                const y = 0.5 * (event.pageY + position.y);
                panEnd.set(x, y);
            }
            panDelta.subVectors(panEnd, panStart).multiplyScalar(scope.panSpeed);
            pan(panDelta.x, panDelta.y);
            panStart.copy(panEnd);
        }
        function handleTouchMoveDolly(event) {
            const position = getSecondPointerPosition(event);
            const dx = event.pageX - position.x;
            const dy = event.pageY - position.y;
            const distance = Math.sqrt(dx * dx + dy * dy);
            dollyEnd.set(0, distance);
            dollyDelta.set(0, Math.pow(dollyEnd.y / dollyStart.y, scope.zoomSpeed));
            dollyOut(dollyDelta.y);
            dollyStart.copy(dollyEnd);
        }
        function handleTouchMoveDollyPan(event) {
            if (scope.enableZoom) handleTouchMoveDolly(event);
            if (scope.enablePan) handleTouchMovePan(event);
        }
        function handleTouchMoveDollyRotate(event) {
            if (scope.enableZoom) handleTouchMoveDolly(event);
            if (scope.enableRotate) handleTouchMoveRotate(event);
        }
        //
        // event handlers - FSM: listen for events and reset state
        //
        function onPointerDown(event) {
            if (scope.enabled === false) return;
            if (pointers.length === 0) {
                scope.domElement.setPointerCapture(event.pointerId);
                scope.domElement.addEventListener("pointermove", onPointerMove);
                scope.domElement.addEventListener("pointerup", onPointerUp);
            }
            //
            addPointer(event);
            if (event.pointerType === "touch") onTouchStart(event);
            else onMouseDown(event);
        }
        function onPointerMove(event) {
            if (scope.enabled === false) return;
            if (event.pointerType === "touch") onTouchMove(event);
            else onMouseMove(event);
        }
        function onPointerUp(event) {
            removePointer(event);
            if (pointers.length === 0) {
                scope.domElement.releasePointerCapture(event.pointerId);
                scope.domElement.removeEventListener("pointermove", onPointerMove);
                scope.domElement.removeEventListener("pointerup", onPointerUp);
            }
            scope.dispatchEvent(_endEvent);
            state = STATE.NONE;
        }
        function onMouseDown(event) {
            let mouseAction;
            switch(event.button){
                case 0:
                    mouseAction = scope.mouseButtons.LEFT;
                    break;
                case 1:
                    mouseAction = scope.mouseButtons.MIDDLE;
                    break;
                case 2:
                    mouseAction = scope.mouseButtons.RIGHT;
                    break;
                default:
                    mouseAction = -1;
            }
            switch(mouseAction){
                case (0, _three.MOUSE).DOLLY:
                    if (scope.enableZoom === false) return;
                    handleMouseDownDolly(event);
                    state = STATE.DOLLY;
                    break;
                case (0, _three.MOUSE).ROTATE:
                    if (event.ctrlKey || event.metaKey || event.shiftKey) {
                        if (scope.enablePan === false) return;
                        handleMouseDownPan(event);
                        state = STATE.PAN;
                    } else {
                        if (scope.enableRotate === false) return;
                        handleMouseDownRotate(event);
                        state = STATE.ROTATE;
                    }
                    break;
                case (0, _three.MOUSE).PAN:
                    if (event.ctrlKey || event.metaKey || event.shiftKey) {
                        if (scope.enableRotate === false) return;
                        handleMouseDownRotate(event);
                        state = STATE.ROTATE;
                    } else {
                        if (scope.enablePan === false) return;
                        handleMouseDownPan(event);
                        state = STATE.PAN;
                    }
                    break;
                default:
                    state = STATE.NONE;
            }
            if (state !== STATE.NONE) scope.dispatchEvent(_startEvent);
        }
        function onMouseMove(event) {
            switch(state){
                case STATE.ROTATE:
                    if (scope.enableRotate === false) return;
                    handleMouseMoveRotate(event);
                    break;
                case STATE.DOLLY:
                    if (scope.enableZoom === false) return;
                    handleMouseMoveDolly(event);
                    break;
                case STATE.PAN:
                    if (scope.enablePan === false) return;
                    handleMouseMovePan(event);
                    break;
            }
        }
        function onMouseWheel(event) {
            if (scope.enabled === false || scope.enableZoom === false || state !== STATE.NONE) return;
            event.preventDefault();
            scope.dispatchEvent(_startEvent);
            handleMouseWheel(event);
            scope.dispatchEvent(_endEvent);
        }
        function onKeyDown(event) {
            if (scope.enabled === false || scope.enablePan === false) return;
            handleKeyDown(event);
        }
        function onTouchStart(event) {
            trackPointer(event);
            switch(pointers.length){
                case 1:
                    switch(scope.touches.ONE){
                        case (0, _three.TOUCH).ROTATE:
                            if (scope.enableRotate === false) return;
                            handleTouchStartRotate();
                            state = STATE.TOUCH_ROTATE;
                            break;
                        case (0, _three.TOUCH).PAN:
                            if (scope.enablePan === false) return;
                            handleTouchStartPan();
                            state = STATE.TOUCH_PAN;
                            break;
                        default:
                            state = STATE.NONE;
                    }
                    break;
                case 2:
                    switch(scope.touches.TWO){
                        case (0, _three.TOUCH).DOLLY_PAN:
                            if (scope.enableZoom === false && scope.enablePan === false) return;
                            handleTouchStartDollyPan();
                            state = STATE.TOUCH_DOLLY_PAN;
                            break;
                        case (0, _three.TOUCH).DOLLY_ROTATE:
                            if (scope.enableZoom === false && scope.enableRotate === false) return;
                            handleTouchStartDollyRotate();
                            state = STATE.TOUCH_DOLLY_ROTATE;
                            break;
                        default:
                            state = STATE.NONE;
                    }
                    break;
                default:
                    state = STATE.NONE;
            }
            if (state !== STATE.NONE) scope.dispatchEvent(_startEvent);
        }
        function onTouchMove(event) {
            trackPointer(event);
            switch(state){
                case STATE.TOUCH_ROTATE:
                    if (scope.enableRotate === false) return;
                    handleTouchMoveRotate(event);
                    scope.update();
                    break;
                case STATE.TOUCH_PAN:
                    if (scope.enablePan === false) return;
                    handleTouchMovePan(event);
                    scope.update();
                    break;
                case STATE.TOUCH_DOLLY_PAN:
                    if (scope.enableZoom === false && scope.enablePan === false) return;
                    handleTouchMoveDollyPan(event);
                    scope.update();
                    break;
                case STATE.TOUCH_DOLLY_ROTATE:
                    if (scope.enableZoom === false && scope.enableRotate === false) return;
                    handleTouchMoveDollyRotate(event);
                    scope.update();
                    break;
                default:
                    state = STATE.NONE;
            }
        }
        function onContextMenu(event) {
            if (scope.enabled === false) return;
            event.preventDefault();
        }
        function addPointer(event) {
            pointers.push(event);
        }
        function removePointer(event) {
            delete pointerPositions[event.pointerId];
            for(let i = 0; i < pointers.length; i++)if (pointers[i].pointerId == event.pointerId) {
                pointers.splice(i, 1);
                return;
            }
        }
        function trackPointer(event) {
            let position = pointerPositions[event.pointerId];
            if (position === undefined) {
                position = new (0, _three.Vector2)();
                pointerPositions[event.pointerId] = position;
            }
            position.set(event.pageX, event.pageY);
        }
        function getSecondPointerPosition(event) {
            const pointer = event.pointerId === pointers[0].pointerId ? pointers[1] : pointers[0];
            return pointerPositions[pointer.pointerId];
        }
        //
        scope.domElement.addEventListener("contextmenu", onContextMenu);
        scope.domElement.addEventListener("pointerdown", onPointerDown);
        scope.domElement.addEventListener("pointercancel", onPointerUp);
        scope.domElement.addEventListener("wheel", onMouseWheel, {
            passive: false
        });
        // force an update at start
        this.update();
    }
}

},{"three":"ktPTu","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"84P8x":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CSS2DObject", ()=>CSS2DObject);
parcelHelpers.export(exports, "CSS2DRenderer", ()=>CSS2DRenderer);
var _three = require("three");
class CSS2DObject extends (0, _three.Object3D) {
    constructor(element = document.createElement("div")){
        super();
        this.isCSS2DObject = true;
        this.element = element;
        this.element.style.position = "absolute";
        this.element.style.userSelect = "none";
        this.element.setAttribute("draggable", false);
        this.center = new (0, _three.Vector2)(0.5, 0.5); // ( 0, 0 ) is the lower left; ( 1, 1 ) is the top right
        this.addEventListener("removed", function() {
            this.traverse(function(object) {
                if (object.element instanceof Element && object.element.parentNode !== null) object.element.parentNode.removeChild(object.element);
            });
        });
    }
    copy(source, recursive) {
        super.copy(source, recursive);
        this.element = source.element.cloneNode(true);
        this.center = source.center;
        return this;
    }
}
//
const _vector = new (0, _three.Vector3)();
const _viewMatrix = new (0, _three.Matrix4)();
const _viewProjectionMatrix = new (0, _three.Matrix4)();
const _a = new (0, _three.Vector3)();
const _b = new (0, _three.Vector3)();
class CSS2DRenderer {
    constructor(parameters = {}){
        const _this = this;
        let _width, _height;
        let _widthHalf, _heightHalf;
        const cache = {
            objects: new WeakMap()
        };
        const domElement = parameters.element !== undefined ? parameters.element : document.createElement("div");
        domElement.style.overflow = "hidden";
        this.domElement = domElement;
        this.getSize = function() {
            return {
                width: _width,
                height: _height
            };
        };
        this.render = function(scene, camera) {
            if (scene.matrixWorldAutoUpdate === true) scene.updateMatrixWorld();
            if (camera.parent === null && camera.matrixWorldAutoUpdate === true) camera.updateMatrixWorld();
            _viewMatrix.copy(camera.matrixWorldInverse);
            _viewProjectionMatrix.multiplyMatrices(camera.projectionMatrix, _viewMatrix);
            renderObject(scene, scene, camera);
            zOrder(scene);
        };
        this.setSize = function(width, height) {
            _width = width;
            _height = height;
            _widthHalf = _width / 2;
            _heightHalf = _height / 2;
            domElement.style.width = width + "px";
            domElement.style.height = height + "px";
        };
        function renderObject(object, scene, camera) {
            if (object.isCSS2DObject) {
                _vector.setFromMatrixPosition(object.matrixWorld);
                _vector.applyMatrix4(_viewProjectionMatrix);
                const visible = object.visible === true && _vector.z >= -1 && _vector.z <= 1 && object.layers.test(camera.layers) === true;
                object.element.style.display = visible === true ? "" : "none";
                if (visible === true) {
                    object.onBeforeRender(_this, scene, camera);
                    const element = object.element;
                    element.style.transform = "translate(" + -100 * object.center.x + "%," + -100 * object.center.y + "%)" + "translate(" + (_vector.x * _widthHalf + _widthHalf) + "px," + (-_vector.y * _heightHalf + _heightHalf) + "px)";
                    if (element.parentNode !== domElement) domElement.appendChild(element);
                    object.onAfterRender(_this, scene, camera);
                }
                const objectData = {
                    distanceToCameraSquared: getDistanceToSquared(camera, object)
                };
                cache.objects.set(object, objectData);
            }
            for(let i = 0, l = object.children.length; i < l; i++)renderObject(object.children[i], scene, camera);
        }
        function getDistanceToSquared(object1, object2) {
            _a.setFromMatrixPosition(object1.matrixWorld);
            _b.setFromMatrixPosition(object2.matrixWorld);
            return _a.distanceToSquared(_b);
        }
        function filterAndFlatten(scene) {
            const result = [];
            scene.traverse(function(object) {
                if (object.isCSS2DObject) result.push(object);
            });
            return result;
        }
        function zOrder(scene) {
            const sorted = filterAndFlatten(scene).sort(function(a, b) {
                if (a.renderOrder !== b.renderOrder) return b.renderOrder - a.renderOrder;
                const distanceA = cache.objects.get(a).distanceToCameraSquared;
                const distanceB = cache.objects.get(b).distanceToCameraSquared;
                return distanceA - distanceB;
            });
            const zMax = sorted.length;
            for(let i = 0, l = sorted.length; i < l; i++)sorted[i].element.style.zIndex = zMax - i;
        }
    }
}

},{"three":"ktPTu","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1OLFC":[function(require,module,exports) {
/*************************************************************
 * COPYRIGHT University of Hawaii - COMA Project / Lava Lab  *
 * Author: James Hutchison                                   *
 * Date: 5/5/2022                                            *
 *************************************************************/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Processor", ()=>Processor);
/* Module that can apply min and max filters or change data types on a dataset */ parcelHelpers.export(exports, "Filter", ()=>Filter);
parcelHelpers.export(exports, "DataConversion", ()=>DataConversion);
var _moduleJs = require("../module.js");
var _constantsJs = require("../../sharedVariables/constants.js");
var _messageJs = require("../../communication/message.js");
class Processor extends (0, _moduleJs.Module) {
    constructor(category, color, shape, command, name, image, inports, outports, key){
        super(category, color, shape, command, name, image, inports, outports, key);
    }
}
class Filter extends Processor {
    constructor(category, color, shape, key){
        super(category, color, shape, "filter", "Filter", "images/icons/filter-white.png", [
            {
                name: "PS_IN",
                leftSide: true,
                type: (0, _constantsJs.LT_PROCESSOR)
            },
            {
                name: "IN",
                leftSide: true,
                type: (0, _constantsJs.LT_SOURCE)
            }
        ], [
            {
                name: "PS_OUT",
                leftSide: false,
                type: (0, _constantsJs.LT_PROCESSOR)
            },
            {
                name: "OUT",
                leftSide: false,
                type: (0, _constantsJs.LT_OUTPUT)
            }
        ], key);
        this.addData("inportType", [
            (0, _constantsJs.LT_PROCESSOR),
            (0, _constantsJs.LT_SOURCE)
        ]);
        this.addData("outportType", [
            (0, _constantsJs.LT_PROCESSOR),
            (0, _constantsJs.LT_OUTPUT)
        ]);
        //this.addData('description', 'Use this module to filter table data.');
        this.addData("popupWidth", 300);
        this.addData("popupHeight", 300);
        this.#createInspectorCardData();
    }
    /** When the module is connected from the source or another processor module, 
     *  this function prepares and saves the moduleData for this module. 
     *  (inputManager handles the preparation) (then sets moduleData for this processor module)
     * */ prepInspectorCardData(toModuleKey, fromModuleData) {
        this.sendMessage(new (0, _messageJs.Message)((0, _constantsJs.INPUT_MANAGER), (0, _constantsJs.MODULE), "Prep Filter Data Event", {
            moduleKey: toModuleKey,
            fromModuleData: fromModuleData
        }));
    }
    updateInspectorCard() {
        var moduleKey = this.getData("key");
        var moduleData = this.getData("moduleData");
        console.log(moduleData);
    // call inspectorCardMaker to create inspector card content
    }
    /** --- PRIVATE ---
     * Creates Inspector Card Data */ #createInspectorCardData() {
        this.inspectorCardMaker.addInspectorCardDescription(this.getData("description"));
    }
    /** --- PRIVATE ---
     * Creates the HTML object to insert into the Popup */ #setPopupContent = ()=>{
        this.popupContentMaker.addDescriptionText(this.getData("description"));
        this.addData("popupContent", this.popupContentMaker.getPopupContentWrapper());
    };
    /** --- PUBLIC ---
     * When the module connects to another node in a chain including data, the metadata for that dataset must be processed here.
     * This function will create filter cards for each column in the data table so that the user can apply constraints to that dataset.
     * @param {metadata JSON object} metadata the metadata to process */ processMetadata(metadata) {
        // Bind the changeDataType function to each element in the metadata. This function will be passed to the filter card in the inspector.
        metadata.columnHeaders.forEach((header)=>header.changeDataTypeFunction = this.changeDataType.bind(this));
        this.addData("metadata", metadata);
        this.addData("getFilterDetailsFunctionArray", this.inspectorCardMaker.addFilterCards(this.getData("metadata")));
    }
    /** --- PUBLIC ---
     * Each filter card has a function associated with it that when called will return all relevant information from that card. This includes
     * things like the new min, new max, current data type, etc. This function will return an array of functions that can collectively return 
     * all information about the entire data set.
     * @returns array of functions for retrieving data from the filter inspector card. */ getFilterDataFunction() {
        const dataArray = [];
        this.getData("getFilterDetailsFunctionArray").forEach((fn)=>dataArray.push(fn()));
        return dataArray;
    }
    /** --- PUBLIC ---
     * This function was bound to the metadata and passed to the min/max filter card. It is called by the inspector card.
     * @param {string} fieldName the column to change type 
     * @param {string} oldDataType the current data type
     * @param {string} newDataType change to this data type
     * @param {function} callbackFN the Hub will notify the min max filter card that the type was changed. */ changeDataType(fieldName, oldDataType, newDataType, callbackFN) {
        const message = new (0, _messageJs.Message)((0, _constantsJs.DATA_MANAGER), (0, _constantsJs.MODULE), "Data Type Change Event", {
            metadata: this.getData("metadata"),
            dataKey: this.getData("dataKey"),
            moduleKey: this.getData("key"),
            field: fieldName,
            oldType: oldDataType,
            newType: newDataType,
            callback: callbackFN,
            updateMetadataCallback: this.updateMetadata.bind(this)
        });
        this.sendMessage(message);
    }
}
class DataConversion extends Processor {
    constructor(category, color, shape, key){
        super(category, color, shape, "dataConversion", "DataConversion", "images/icons/convert-white.png", [
            {
                name: "PS_IN",
                leftSide: true,
                type: (0, _constantsJs.LT_PROCESSOR)
            },
            {
                name: "IN",
                leftSide: true,
                type: (0, _constantsJs.LT_SOURCE)
            }
        ], [
            {
                name: "PS_OUT",
                leftSide: false,
                type: (0, _constantsJs.LT_PROCESSOR)
            },
            {
                name: "OUT",
                leftSide: false,
                type: (0, _constantsJs.LT_OUTPUT)
            }
        ], key);
        this.addData("description", "Use this module to convert table data.");
        this.addData("popupWidth", 300);
        this.addData("popupHeight", 300);
        this.createInspectorCardData();
    }
    /** --- PRIVATE ---
    * Creates Inspector Card Data */ createInspectorCardData() {
        this.inspectorCardMaker.addInspectorCardDescription(this.getData("description"));
    }
    /** --- PRIVATE ---
     * Creates the HTML object to insert into the Popup */ /*setPopupContent = () => {
        this.popupContentMaker.addDescriptionText(this.getData('description'));
        this.addData('popupContent', this.popupContentMaker.getPopupContentWrapper());
    }*/ /** --- PUBLIC --- 
     * When attached to a pipeline containing metadata, the headers must be processed for generating the 
     * Inspector Card for conversions.
     * @param {Metadata Object} metadata the metadata object */ processMetadata(metadata) {
        this.addData("metadata", metadata);
        this.addData("conversionCard", this.inspectorCardMaker.addConversionCard(this.getData("metadata")));
        this.getData("conversionCard").getButton().addEventListener("click", this.convertDataEvent.bind(this));
    }
    /** --- PUBLIC ----
     * Emits a Data Conversion Event. This message will be forwarded to the Hub where the conversion will be
     * processed on the DataManager. This function is bound to a button on the Inspector Card. */ convertDataEvent() {
        const conversionDetails = this.getData("conversionCard").getConversionInputAndFunction();
        this.sendMessage(new (0, _messageJs.Message)((0, _constantsJs.DATA_MANAGER), (0, _constantsJs.MODULE), "Data Conversion Event", {
            conversionFunction: conversionDetails.fn,
            outputFieldName: conversionDetails.outputFieldName,
            inputFieldName: conversionDetails.input,
            key: this.getData("dataKey"),
            moduleKey: this.getData("key")
        }));
    }
}

},{"../module.js":"a5q86","../../sharedVariables/constants.js":"dxmqI","../../communication/message.js":"QtU95","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5FZt3":[function(require,module,exports) {
/*************************************************************
 * COPYRIGHT University of Hawaii - COMA Project / Lava Lab  *
 * Author: James Hutchison                                   *
 * Date: 5/5/2022                                            *
 *************************************************************/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Output", ()=>Output);
/** All 2D charts inherit from this except Tables */ parcelHelpers.export(exports, "Chart_2D", ()=>Chart_2D);
parcelHelpers.export(exports, "ScatterPlot", ()=>ScatterPlot);
parcelHelpers.export(exports, "BarChart", ()=>BarChart);
parcelHelpers.export(exports, "LineChart", ()=>LineChart);
parcelHelpers.export(exports, "OrbitalPlot", ()=>OrbitalPlot);
parcelHelpers.export(exports, "ToCSV", ()=>ToCSV);
var _indexJs = require("../index.js");
var _chartDataStorageJs = require("./components/chartDataStorage.js");
var _constantsJs = require("../../sharedVariables/constants.js");
var _messageJs = require("../../communication/message.js");
class Output extends (0, _indexJs.Module) {
    constructor(category, color, shape, command, name, image, inports, outports, key){
        super(category, color, shape, command, name, image, inports, outports, key);
        this.addData("inportType", [
            -1
        ]);
        this.addData("outportType", [
            (0, _constantsJs.LT_PROCESSOR),
            (0, _constantsJs.LT_SOURCE)
        ]);
    }
}
class Chart_2D extends Output {
    constructor(category, color, shape, command, name, image, outports, key){
        super(category, color, shape, command, name, image, [
            {
                name: "IN",
                leftSide: true,
                type: (0, _constantsJs.LT_SOURCE)
            },
            {
                name: "OUT",
                leftSide: true,
                type: (0, _constantsJs.LT_OUTPUT)
            }
        ], outports, key);
        this.setPopupContent();
        this.addData("inportType", [
            (0, _constantsJs.LT_SOURCE),
            (0, _constantsJs.LT_PROCESSOR)
        ]);
        this.addData("outportType", [
            -1
        ]);
    }
    /** --- PUBLIC ---
     * Creates the HTML content to be inserted into the Popup in the DOM. */ setPopupContent = ()=>{
        this.addData("popupContent", this.popupContentMaker.getPopupContentWrapper());
        this.addData("themeDD", this.popupContentMaker.addEChartThemeDropdown(this.getData("key")), false, "", false);
        this.addData("plotDiv", this.popupContentMaker.addPlotDiv(this.getData("key")), false, "", false);
        var popupContent = this.getData("popupContent");
        popupContent.classList.add("plot-popup");
    };
    /** --- PUBLIC ---
     * Creates the Inspector Card data */ createInspectorCardData() {
    //this.inspectorCardMaker.addInspectorCardIDField(this.getData('key'));
    //this.inspectorCardMaker.addInspectorCardDataConnectedField();
    }
    prepInspectorCardData(toModuleKey, fromModuleData) {
        this.sendMessage(new (0, _messageJs.Message)((0, _constantsJs.INPUT_MANAGER), (0, _constantsJs.MODULE), "Prep Chart Data Event", {
            moduleKey: toModuleKey,
            sourceModuleData: fromModuleData
        }));
    }
    /** --- PUBLIC ---
     * Called by the Hub when an output module is connected to a flow with data.
     * Updates the inspector card and sets up the chartData object.
     * @param {Number} moduleKey key of the module
     * @param {object} moduleData module data for data headers, data, etc
     * */ updateInspectorCard() {
        var moduleKey = this.getData("key");
        var moduleData = this.getData("moduleData");
        this.inspectorCardMaker.updateChartModuleInspectorCard(moduleKey, moduleData);
    /*const xAxis = this.inspectorCardMaker.addInspectorCardChartXAxisCard(headers, moduleKey, this.addTrace.bind(this));
        const yAxis = this.inspectorCardMaker.addInspectorCardChartYAxisCard(headers, moduleKey, this.addTrace.bind(this));
        yAxis.dropdown.id = `${this.chartData.getNumberOfTraces()}-y-axis-dropdown`;
        yAxis.errorDropDown.id = `${this.chartData.getNumberOfTraces()}-y-axis-error-dropdown`;
        this.chartData.storeHeaders(headers);
        this.chartData.set_2D_XAxisListeners(xAxis);
        this.chartData.set_2D_YAxisListeners(yAxis);
        this.chartData.setInitialValues(xAxis.dropdown.value, yAxis.dropdown.value, xAxis.labelInput.value,
            yAxis.labelInput.value, xAxis.gridCheckbox.checkbox.checked, yAxis.gridCheckbox.checkbox.checked,
            xAxis.tickCheckbox.checkbox.checked, yAxis.tickCheckbox.checkbox.checked, yAxis.errorDropDown.value);
        this.inspectorCardMaker.addInspectorCardGenerateChartButton(moduleKey, this.createNewChartFromButtonClick.bind(this));*/ }
    /** --- PUBLIC ---
     * Called by the Hub when an output module is connected to a flow with data.
     * Updates the inspector card and sets up the chartData object.
     * @param {Number} dataKey key to the dataset on the DataManager 
     * @param {string[]} headers data headers for loading dropdowns etc.*/ updateInspectorCardWithNewData(dataKey, headers) {
        const key = this.getData("key");
        this.inspectorCardMaker.addInspectorCardLinkedNodeField(dataKey);
        const xAxis = this.inspectorCardMaker.addInspectorCardChartXAxisCard(headers, key, this.addTrace.bind(this));
        const yAxis = this.inspectorCardMaker.addInspectorCardChartYAxisCard(headers, key, this.addTrace.bind(this));
        yAxis.dropdown.id = `${this.chartData.getNumberOfTraces()}-y-axis-dropdown`;
        yAxis.errorDropDown.id = `${this.chartData.getNumberOfTraces()}-y-axis-error-dropdown`;
        this.chartData.storeHeaders(headers);
        this.chartData.set_2D_XAxisListeners(xAxis);
        this.chartData.set_2D_YAxisListeners(yAxis);
        this.chartData.setInitialValues(xAxis.dropdown.value, yAxis.dropdown.value, xAxis.labelInput.value, yAxis.labelInput.value, xAxis.gridCheckbox.checkbox.checked, yAxis.gridCheckbox.checkbox.checked, xAxis.tickCheckbox.checkbox.checked, yAxis.tickCheckbox.checkbox.checked, yAxis.errorDropDown.value);
        this.inspectorCardMaker.addInspectorCardGenerateChartButton(key, this.createNewChartFromButtonClick.bind(this));
    }
    /** --- PUBLIC --- 
     * Emits a Create New Local Chart Event.
     * Attached to a button on the Inspector Card. */ createNewChartFromButtonClick() {
        this.sendMessage(new (0, _messageJs.Message)((0, _constantsJs.OUTPUT_MANAGER), (0, _constantsJs.MODULE), "Create New Local Chart Event", {
            datasetKey: this.getData("dataKey"),
            moduleKey: this.getData("key"),
            fieldData: this.chartData.getChartData(),
            div: this.getData("plotDiv"),
            type: this.getData("chartType")
        }));
    }
    /** --- Public ---
     * This function is passed as a callback to the inspector card element and attached to a button.
     * Adds a new trace to the Axis inspector card and updates the ChartData table with the new data.
     * A Trace consists of a main data dropdown where the user can select fields and an error dropdown that starts with 'None'. */ addTrace() {
        const title = "test";
        const dropDown = this.HF.createNewSelect(`${title}-${this.getData("key")}`, `${title}-${this.getData("key")}`, [], [], this.chartData.getHeaders(), this.chartData.getHeaders());
        const errorHeaders = [
            ...this.chartData.getHeaders()
        ];
        errorHeaders.unshift("None");
        const errorDropDown = this.HF.createNewSelect(`${title}-${this.getData("key")}`, `${title}-${this.getData("key")}`, [], [], errorHeaders, errorHeaders);
        this.inspectorCardMaker.addNewTraceToInspectorCard(dropDown, errorDropDown);
        dropDown.id = `${this.chartData.getNumberOfTraces()}-x-axis-dropdown`;
        errorDropDown.id = `${this.chartData.getNumberOfTraces()}-x-axis-error-dropdown`;
        this.chartData.listenToYAxisDataChanges(dropDown);
        this.chartData.listenToYAxisErrorChanges(errorDropDown);
        this.chartData.addInitialValueForNewTrace(dropDown.value, errorDropDown.value, dropDown.id.split("-")[0]);
    }
}
class ScatterPlot extends Chart_2D {
    constructor(category, color, shape, key){
        super(category, color, shape, "output", "Scatter Plot", "images/icons/scatter-graph.png", [], key);
        this.createInspectorCardData();
        this.addData("chartType", "scatter");
        this.addData("coordinateSystem", "cartesian2d");
    //this.chartData = new ChartDataStorage('scatter', 'cartesian2d');
    }
}
class BarChart extends Chart_2D {
    constructor(category, color, shape, key){
        super(category, color, shape, "output", "Bar Chart", "images/icons/bar-chart-white.png", [], key);
        this.createInspectorCardData();
        this.addData("chartType", "bar");
        this.addData("coordinateSystem", "cartesian2d");
    //this.chartData = new ChartDataStorage('bar', 'cartesian2d');
    }
}
class LineChart extends Chart_2D {
    constructor(category, color, shape, key){
        super(category, color, shape, "output", "Line Chart", "images/icons/line-chart-white.png", [], key);
        this.createInspectorCardData();
        this.addData("chartType", "line");
        this.addData("coordinateSystem", "cartesian2d");
    //this.chartData = new ChartDataStorage('line', 'cartesian2d');
    }
}
class OrbitalPlot extends Output {
    constructor(category, color, shape, key){
        super(category, color, shape, "output", "Orbital Plot", "images/icons/orbital-plot-white.png", [
            {
                name: "IN",
                leftSide: true,
                type: (0, _constantsJs.LT_SOURCE)
            },
            {
                name: "OUT",
                leftSide: true,
                type: (0, _constantsJs.LT_OUTPUT)
            }
        ], [], key);
        this.addData("callOnCreationFunction", true);
        this.addData("inportType", [
            (0, _constantsJs.LT_SOURCE),
            (0, _constantsJs.LT_PROCESSOR)
        ]);
        this.addData("outportType", [
            -1
        ]);
        this.#addPlotDiv();
    }
    #addPlotDiv() {
        this.addData("orbitDiv", this.popupContentMaker.addPlotDiv(this.getData("key")));
        this.popupContentMaker.getPopupContentWrapper().style.margin = 0;
    /*var popupContent = this.getData('popupContent');
        popupContent.classList.add('plot-popup');*/ }
    /** --- PUBLIC ---
     * Creates the HTML content to be inserted into the Popup in the DOM. */ /*#setPopupContent = () => {
        this.addData('popupContent', this.popupContentMaker.getPopupContentWrapper(), false, '', false);
        this.addData('orbitDiv', this.popupContentMaker.addPlotDiv(this.getData('key')), false, '', false);

        var popupContent = this.getData('popupContent');
        popupContent.classList.add('plot-popup');
    }*/ // on creation, set the elliptical moduleData in browser's localStorage
    getPlanetOrbits = ()=>{
        // check if localStorage already has the Planet Orbits data
        if (!localStorage.getItem("Planet Orbits")) {
            let moduleKey = this.getData("key");
            //console.log(moduleKey);
            this.sendMessage(new (0, _messageJs.Message)((0, _constantsJs.INPUT_MANAGER), (0, _constantsJs.MODULE), "Get Planet Orbits Event", {
                moduleKey: moduleKey
            }));
            console.log(moduleKey);
        }
    };
    prepInspectorCardData(toModuleKey, fromModuleData) {
        this.sendMessage(new (0, _messageJs.Message)((0, _constantsJs.INPUT_MANAGER), (0, _constantsJs.MODULE), "Prep Orbit Data Event", {
            moduleKey: toModuleKey,
            sourceModuleData: fromModuleData
        }));
    }
    /** --- PUBLIC ---  rename to createInspectorCardContent() ?
     * Called by the Hub when an output module is connected to a flow with data.
     * Updates the inspector card and sets up the chartData object.
     * @param {Number} moduleKey key of the module
     * @param {object} moduleData module data for data headers, data, etc
     * */ updateInspectorCard() {
        var moduleKey = this.getData("key");
        var moduleData = this.getData("moduleData");
        console.log(moduleData);
        if (moduleData) this.inspectorCardMaker.updateOrbitModuleInspectorCard(moduleKey, moduleData);
    }
    onCreation() {
        //localStorage.clear();
        if (!localStorage.getItem("Planet Orbits")) this.sendMessage(new (0, _messageJs.Message)((0, _constantsJs.WORKER_MANAGER), (0, _constantsJs.MODULE), "Get Planet Orbits Event"));
        if (!localStorage.getItem("Object Orbits")) this.sendMessage(new (0, _messageJs.Message)((0, _constantsJs.INPUT_MANAGER), (0, _constantsJs.MODULE), "Get Object Orbits Event"));
    }
}
class ToCSV extends Output {
    constructor(category, color, shape, key){
        super(category, color, shape, "output", "To CSV", "images/icons/csv-file-format-extension-white.png", [
            {
                name: "IN",
                leftSide: true,
                type: (0, _constantsJs.LT_OUTPUT)
            }
        ], [], key);
        this.setPopupContent();
        this.createInspectorCardData();
        this.chartData = new (0, _chartDataStorageJs.ChartDataStorage)("table");
        this.addData("inportType", (0, _constantsJs.LT_PROCESSOR));
        this.addData("outportType", -1);
        this.addData("chartType", "table");
    }
    /** --- PUBLIC ---
    * Creates the Inspector Card data */ createInspectorCardData() {
        this.inspectorCardMaker.addInspectorCardIDField(this.getData("key"));
        this.inspectorCardMaker.addInspectorCardDataConnectedField();
    }
    /** --- PUBLIC ---
     * Called by the HUB when a new link is drawn. Updates the inspector card to show the
     * available data for creating the CSV file.
     * @param {Number} dataKey key that identifies the dataset on the DataManager 
     * @param {string[]} headers the names of the fields in the table */ updateInspectorCardWithNewData(dataKey, headers) {
        const key = this.getData("key");
        this.chartData.storeHeaders(headers);
        this.inspectorCardMaker.addInspectorCardLinkedNodeField(dataKey);
        const columnCheckboxes = this.inspectorCardMaker.addInspectorCardIncludeColumnCard(headers, key);
        this.chartData.listenToCheckboxChanges(columnCheckboxes);
        this.inspectorCardMaker.addInspectorCardGenerateTablePreviewButton(key, this.createNewTableFromButtonClick.bind(this));
        this.inspectorCardMaker.addInspectorCardGenerateCSVFileButton(key, this.createCSVFile.bind(this));
    }
    /** --- PUBLIC ---
     * Emits a Create New CSV File Event when the createCSVFile button is clicked in the inspector */ createCSVFile() {
        this.sendMessage(new (0, _messageJs.Message)((0, _constantsJs.OUTPUT_MANAGER), (0, _constantsJs.MODULE), "Create New CSV File Event", {
            datasetKey: this.getData("dataKey"),
            moduleKey: this.getData("key"),
            fieldData: this.chartData.getChartData()
        }));
    }
    /** --- PUBLIC ---
     * Emits a Create New Local Table Event when the Preview CSV Table Data button is clicked in the inspector. */ createNewTableFromButtonClick() {
        this.sendMessage(new (0, _messageJs.Message)((0, _constantsJs.OUTPUT_MANAGER), (0, _constantsJs.MODULE), "Create New Local Table Event", {
            datasetKey: this.getData("dataKey"),
            moduleKey: this.getData("key"),
            fieldData: this.chartData.getChartData(),
            div: this.getData("plotDiv"),
            type: this.getData("chartType")
        }));
    }
    /** --- PUBLIC ---
     * Creates the HTML content to be inserted into the Popup in the DOM. */ /*setPopupContent = () => {
        this.addData('popupContent', this.popupContentMaker.getPopupContentWrapper(), false, '', false);
        this.addData('plotDiv', this.popupContentMaker.addPlotDiv(), false, '', false);
    };*/ /** --- PUBLIC ---
     * stores an array of strings, 1 for each column name, on the chartData table.
     * @param {string[]} headerRow */ storeTableHeaders(headerRow) {
        this.chartData.storeHeaders(headerRow);
    }
}

},{"../index.js":"ddnCK","./components/chartDataStorage.js":"bO9lZ","../../sharedVariables/constants.js":"dxmqI","../../communication/message.js":"QtU95","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bO9lZ":[function(require,module,exports) {
/*************************************************************
 * COPYRIGHT University of Hawaii - COMA Project / Lava Lab  *
 * Author: James Hutchison                                   *
 * Date: 5/5/2022                                            *
 *************************************************************/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ChartDataStorage", ()=>ChartDataStorage);
class ChartDataStorage {
    #dataTable;
    numberOfTraces;
    constructor(chartType, coordinateSystem){
        this.#dataTable = new Map();
        this.numberOfTraces = 0;
        this.#setData("chartType", chartType);
        this.#setData("coordinateSystem", coordinateSystem);
    }
    set_2D_XAxisListeners(xAxis) {
        this.listenToXAxisDataChanges(xAxis.dropdown);
        this.listenToXAxisLabelChanges(xAxis.labelInput);
        this.listenToXAxisTickChanges(xAxis.tickCheckbox.checkbox);
        this.listenToXAxisGridChanges(xAxis.gridCheckbox.checkbox);
    }
    set_2D_YAxisListeners(yAxis) {
        this.listenToYAxisDataChanges(yAxis.dropdown);
        this.listenToYAxisErrorChanges(yAxis.errorDropDown);
        this.listenToYAxisLabelChanges(yAxis.labelInput);
        this.listenToYAxisTickChanges(yAxis.tickCheckbox.checkbox);
        this.listenToYAxisGridChanges(yAxis.gridCheckbox.checkbox);
    }
    listenToXAxisDataChanges(element) {
        element.addEventListener("change", this.updateXAxisFieldName.bind(this));
    }
    listenToYAxisDataChanges(element) {
        element.addEventListener("change", this.updateYAxisFieldName.bind(this));
    }
    listenToYAxisErrorChanges(element) {
        element.addEventListener("change", this.updateYAxisErrorFieldName.bind(this));
    }
    listenToXAxisLabelChanges(element) {
        element.addEventListener("change", this.updateXAxisLabel.bind(this));
    }
    listenToYAxisLabelChanges(element) {
        element.addEventListener("change", this.updateYAxisLabel.bind(this));
    }
    listenToXAxisTickChanges(element) {
        element.addEventListener("change", this.updateXAxisTick.bind(this));
    }
    listenToYAxisTickChanges(element) {
        element.addEventListener("change", this.updateYAxisTick.bind(this));
    }
    listenToXAxisGridChanges(element) {
        element.addEventListener("change", this.updateXAxisGrid.bind(this));
    }
    listenToYAxisGridChanges(element) {
        element.addEventListener("change", this.updateYAxisGrid.bind(this));
    }
    /** --- PUBLIC ---
     * Updates the X Axis field name
     * @param {DOM Event} event a change event when user changes the X axis dropdown  */ updateXAxisFieldName = (event)=>this.#setData("xAxisField", event.target.value);
    /** --- PUBLIC ---
     * Updates the Y Axis field name
     * @param {DOM Event} event a change event when user changes one of the Y axis drop downs  */ updateYAxisFieldName = (event)=>{
        const yAxisArray = this.#dataTable.get("yAxisField");
        const index = event.target.id.split("-")[0];
        yAxisArray[index] = event.target.value;
        console.log(this.#dataTable);
    };
    /** --- PUBLIC ---
     * Updates the Y Axis error field name
     * @param {DOM Event} event a change event when user changes one of the Y axis error drop downs  */ updateYAxisErrorFieldName = (event)=>{
        const yAxisErrorArray = this.#dataTable.get("yAxisErrorField");
        const index = event.target.id.split("-")[0];
        yAxisErrorArray[index] = event.target.value;
        console.log(this.#dataTable);
    };
    updateXAxisLabel = (event)=>this.#setData("xAxisLabel", event.target.value);
    updateYAxisLabel = (event)=>this.#setData("yAxisLabel", event.target.value);
    updateXAxisTick = (event)=>this.#setData("xAxisTick", event.target.checked);
    updateYAxisTick = (event)=>this.#setData("yAxisTick", event.target.checked);
    updateXAxisGrid = (event)=>this.#setData("xAxisGrid", event.target.checked);
    updateYAxisGrid = (event)=>this.#setData("yAxisGrid", event.target.checked);
    listenToCheckboxChanges(checkboxes) {
        checkboxes.forEach((box)=>{
            box.checkbox.addEventListener("change", this.toggleIncludeHeader.bind(this));
        });
    }
    /** --- PUBLIC ---
     * Sets the initial values for the object
     * @param {string} xAxisField name of the column to use for the x axis data
     * @param {string} yAxisField name of the column to use for the y axis data
     * @param {string} xAxisLabel x axis label
     * @param {string} yAxisLabel y axis label
     * @param {boolean} xAxisGrid turn grid lines on or off
     * @param {boolean} yAxisGrid turn grid lines on or off
     * @param {boolean} xAxisTick turn tick lines on or off
     * @param {boolean} yAxisTick turn tick lines on or off
     * @param {string} yAxisErrorDropdownField name of the column to use for the y axis error data */ setInitialValues(xAxisField, yAxisField, xAxisLabel, yAxisLabel, xAxisGrid, yAxisGrid, xAxisTick, yAxisTick, yAxisErrorDropdownField) {
        const yAxisFieldArray = new Array(100);
        const yAxisErrorFieldArray = new Array(100);
        yAxisFieldArray[this.numberOfTraces] = yAxisField;
        yAxisErrorFieldArray[this.numberOfTraces] = yAxisErrorDropdownField;
        this.#setData("xAxisField", xAxisField);
        this.#setData("yAxisField", yAxisFieldArray);
        this.#setData("xAxisLabel", xAxisLabel);
        this.#setData("yAxisLabel", yAxisLabel);
        this.#setData("xAxisGrid", xAxisGrid);
        this.#setData("yAxisGrid", yAxisGrid);
        this.#setData("xAxisTick", xAxisTick);
        this.#setData("yAxisTick", yAxisTick);
        this.#setData("yAxisErrorField", yAxisErrorFieldArray);
        this.numberOfTraces = 1;
    }
    /** --- PUBLIC ---
     * Users can uncheck boxes which will remove a field from consideration when a table is built.
     * @param {DOM Event} event event when a checkbox is clicked */ toggleIncludeHeader(event) {
        const headerArray = this.#dataTable.get("headers");
        headerArray.forEach((header)=>{
            if (header.label === event.target.value) header.include = event.target.checked;
        });
    }
    /** --- PUBLIC ---
     * Stores the list of column headers
     * @param {string[]} headers array of header name strings */ storeHeaders(headers) {
        const headerArray = [];
        headers.forEach((header)=>{
            headerArray.push({
                label: header,
                include: true
            });
        });
        this.#setData("headers", headerArray);
    }
    /** --- PUBLIC ---
     * returns the array of headers
     * @returns array of strings, one for each header (column name)  */ getHeaders = ()=>{
        const headers = this.#dataTable.get("headers");
        const lables = [];
        headers.forEach((header)=>lables.push(header.label));
        return lables;
    };
    /** --- PUBLIC ---
     * When a new trace is added, the output Manager will call this function to add
     * initial values for the trace. They will be the first options in the drop downs.
     * @param {string} value The default value in the y axis data dropdown
     * @param {string} errorValue the default value in the y axis error dropdown
     * @param {number} index The index into the array of Y axis traces */ addInitialValueForNewTrace(value, errorValue, index) {
        this.#dataTable.get("yAxisField")[index] = value;
        this.#dataTable.get("yAxisErrorField")[index] = errorValue;
        this.numberOfTraces++;
    }
    /** --- PUBLIC ---
     * Gets necessary data to build a chart.
     * @returns xAxisField, yAxisField, xAxisLabel, yAxisLabel, xAxisGrid, yAxisGrid, coordinateSystem, headers, yAxisErrorField */ getChartData() {
        return {
            xAxisField: this.#dataTable.get("xAxisField"),
            yAxisField: this.#dataTable.get("yAxisField"),
            xAxisLabel: this.#dataTable.get("xAxisLabel"),
            yAxisLabel: this.#dataTable.get("yAxisLabel"),
            xAxisGrid: this.#dataTable.get("xAxisGrid"),
            yAxisGrid: this.#dataTable.get("yAxisGrid"),
            xAxisTick: this.#dataTable.get("xAxisTick"),
            yAxisTick: this.#dataTable.get("yAxisTick"),
            coordinateSystem: this.#dataTable.get("coordinateSystem"),
            yAxisErrorField: this.#dataTable.get("yAxisErrorField"),
            headers: this.#dataTable.get("headers")
        };
    }
    getNumberOfTraces = ()=>this.numberOfTraces;
    /** --- PRIVATE ---
    * Sets key value pair in the dataTable
    * @param {string} key 
    * @param {any} value  */ #setData(key, value) {
        this.#dataTable.set(key, value);
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"czBTW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ObjectImages", ()=>ObjectImages);
var _indexJs = require("../index.js");
var _constantsJs = require("../../sharedVariables/constants.js");
var _messageJs = require("../../communication/message.js");
class ObjectImages extends (0, _indexJs.Output) {
    constructor(category, color, shape, key){
        super(category, color, shape, "output", "Object Images", "images/icons/image_light.png", [
            {
                name: "IN",
                leftSide: true,
                type: (0, _constantsJs.LT_SOURCE)
            },
            {
                name: "OUT",
                leftSide: true,
                type: (0, _constantsJs.LT_OUTPUT)
            }
        ], [], key);
        //this.addData('callOnCreationFunction', true);
        this.addData("inportType", [
            (0, _constantsJs.LT_SOURCE),
            (0, _constantsJs.LT_PROCESSOR)
        ]);
        this.addData("outportType", [
            -1
        ]);
        this.addData("popupWidth", 500);
        this.addData("popupHeight", 500);
    }
    /** --- PUBLIC ---
     * Creates the HTML content to be inserted into the Popup in the DOM. */ /*#setPopupContent = () => {
        this.addData('popupContent', this.popupContentMaker.getPopupContentWrapper());
        this.addData('imageDiv', this.popupContentMaker.addPlotDiv(this.getData('key')));
    }*/ // on creation, set the elliptical moduleData in browser's localStorage
    /*getPlanetOrbits = () => {
        // check if localStorage already has the Planet Orbits data
        if (!localStorage.getItem('Planet Orbits')) {
            let moduleKey = this.getData('key');
            //console.log(moduleKey);
            this.sendMessage(new Message(INPUT_MANAGER, MODULE, 'Get Planet Orbits Event', { moduleKey: moduleKey }));
            console.log(moduleKey);
        }
    }*/ renderObjectImages(moduleKey) {
        const moduleData = this.getData("moduleData");
        console.log(moduleData);
        this.popupContentMaker.createObjectImagesPopup(moduleKey, moduleData.objectName, moduleData.imageDates, moduleData.imagesToRender);
    // PCM create image module popup
    }
    prepInspectorCardData(toModuleKey, fromModuleData, fromKey) {
        console.log(fromModuleData);
        this.sendMessage(new (0, _messageJs.Message)((0, _constantsJs.INPUT_MANAGER), (0, _constantsJs.MODULE), "Prep Object Images Event", {
            moduleKey: toModuleKey,
            sourceModuleData: fromModuleData,
            sourceModuleKey: fromKey
        }));
    }
    /** --- PUBLIC ---  rename to createInspectorCardContent() ?
     * Called by the Hub when an output module is connected to a flow with data.
     * Updates the inspector card and sets up the chartData object.
     * @param {Number} moduleKey key of the module
     * @param {object} moduleData module data for data headers, data, etc
     * */ updateInspectorCard() {
        var moduleKey = this.getData("key");
        var moduleData = this.getData("moduleData");
        console.log(moduleData);
        if (moduleData) this.inspectorCardMaker.updateImageModuleInspectorCard(moduleKey, moduleData);
    }
    onCreation() {
    //localStorage.clear();
    /*if (!localStorage.getItem('Planet Orbits')) {
            this.sendMessage(new Message(WORKER_MANAGER, MODULE, 'Get Planet Orbits Event'));
        }*/ }
}

},{"../index.js":"ddnCK","../../sharedVariables/constants.js":"dxmqI","../../communication/message.js":"QtU95","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5zQ56":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Table", ()=>Table);
var _indexJs = require("../index.js");
var _htmlFactoryJs = require("../../htmlGeneration/htmlFactory.js");
var _constantsJs = require("../../sharedVariables/constants.js");
var _messageJs = require("../../communication/message.js");
class Table extends (0, _indexJs.Output) {
    #dataArea;
    constructor(category, color, shape, key){
        super(category, color, shape, "getTableData", "Table", "images/icons/table_inv.png", [
            {
                name: "IN",
                leftSide: true,
                type: (0, _constantsJs.LT_SOURCE)
            },
            {
                name: "OUT",
                leftSide: true,
                type: (0, _constantsJs.LT_OUTPUT)
            }
        ], [], key);
        this.HF = new (0, _htmlFactoryJs.HTMLFactory)();
        //this.setPopupContent();
        this.#setTablePopupContent();
    //this.addData('link', -1, false, '', false);
    //this.addData('onCreationFunction', this.onCreation.bind(this));
    // close data source popup and inspectors
    }
    /*setPopupContent = () => {
        const popupContent = this.HF.createNewDiv('table-popup', 'table-popup', ['table-popup'], []);

        //popupContent.appendChild(tablePopup);
        this.addData('popupContent', popupContent, false, '', false);
        //this.addData('plotDiv', plotDiv, false, '', false);

        */ /*const plotDiv = this.HF.createNewDiv(`plot_${this.key}`, `plot_${this.key}`, ['plot1'], []);

        popupContent.appendChild(this.plotDiv);
        this.addData('popupContent', popupContent, false, '', false);
        this.addData('plotDiv', plotDiv, false, '', false);*/ /*
    }*/ #setTablePopupContent = ()=>{
        //this.popupContentMaker.addDescriptionText(this.getData('description'));
        //this.popupContentMaker.createFileUploadField(this.handleFiles.bind(this), this.getData('key'));
        //this.popupContentMaker.addDataArea();
        var moduleKey = this.getData("key");
        //this.addData('popupContent', this.popupContentMaker.getPopupContentWrapper(), false, '', false);
        this.popupContentMaker.setTablePopupContent(moduleKey);
    };
    prepInspectorCardData(toModuleKey, fromModuleData) {
        this.sendMessage(new (0, _messageJs.Message)((0, _constantsJs.INPUT_MANAGER), (0, _constantsJs.MODULE), "Prep Table Data Event", {
            moduleKey: toModuleKey,
            sourceModuleData: fromModuleData
        }));
    }
    // moduleData: { columnHeaders }
    // Set Inspector card content
    updateInspectorCard() {
        var moduleKey = this.getData("key");
        var moduleData = this.getData("moduleData");
        // fields objects include { fieldname, displayname, and unitsArray }
        if (moduleData.sourceData) // prepare fields to render in the inspector card
        // add view table button
        this.inspectorCardMaker.updateTableModuleInspectorCard(moduleKey, moduleData);
        else console.log("moduleData is not set. Please make sure the source module contains data");
    }
}

},{"../index.js":"ddnCK","../../htmlGeneration/htmlFactory.js":"9lYdL","../../sharedVariables/constants.js":"dxmqI","../../communication/message.js":"QtU95","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2mCNw":[function(require,module,exports) {
/*************************************************************
 * COPYRIGHT University of Hawaii - COMA Project / Lava Lab  *
 * Author: James Hutchison                                   *
 * Date: 5/5/2022                                            *
 *************************************************************/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Composite", ()=>Composite);
parcelHelpers.export(exports, "CompositePrefab", ()=>CompositePrefab);
var _moduleJs = require("../module.js");
class Composite extends (0, _moduleJs.Module) {
    #nodeArray;
    #linkArray;
    #isDataModule;
    constructor(category, color, shape, key, name, inports, isData){
        super(category, color, shape, "composite", name, "images/icons/flow-diagram-white.png", inports, [
            {
                name: "OUT",
                leftSide: false
            }
        ], key, "Composite Module");
        this.isData = isData;
        this.createInspectorCardData();
    }
    createInspectorCardData() {
        this.inspectorCardMaker.addInspectorCardIDField(this.getData("key"));
    }
    /** --- PUBLIC ---
     * Saves the module using teh save module function.*/ saveModule() {
        const saveFunction = this.getData("Save Module Function");
        saveFunction(this.getData("Composite Group Info"));
    }
    /** --- PUBLIC ---
     * Stores the function that saves the composite module for future use.
     * @param {function} saveModuleFunction */ setSaveModuleFunction(saveModuleFunction) {
        this.addData("Save Module Function", saveModuleFunction);
    }
    /** --- PUBLIC ---
     * Stires the JSON representation of the group
     * @param {JSON Object} info representation of links and nodes with keys. */ setCompositeGroupInfo(info) {
        this.addData("Composite Group Info", info);
    }
}
class CompositePrefab extends (0, _moduleJs.Module) {
    #nodeArray;
    #linkArray;
    #isDataModule;
    constructor(category, color, shape, key, name, inports, isData){
        super(category, color, shape, "composite", name, "images/icons/flow-diagram-white.png", inports, [
            {
                name: "OUT",
                leftSide: false
            }
        ], key, "Composite Module");
        this.isData = isData;
        this.setPopupContent();
    }
    createInspectorCardData() {
        this.inspectorCardMaker.addInspectorCardIDField(this.getData("key"));
        this.inspectorCardMaker.addInspectorCardDescription(this.getData("description"));
    }
}

},{"../module.js":"a5q86","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2MxzQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ModuleManager", ()=>ModuleManager);
var _indexJs = require("./index.js");
var _indexJs1 = require("../communication/index.js");
var _errorHandlersJs = require("../errorHandling/errorHandlers.js");
var _indexJs2 = require("../sharedVariables/index.js");
var _popupJs = require("../components/popup/popup.js");
var _htmlFactoryJs = require("../htmlGeneration/htmlFactory.js");
class ModuleManager {
    // Private Member Variables
    #MG;
    #moduleMap;
    #compositePrefabMap;
    #PCM;
    #HF;
    constructor(){
        this.#MG = new (0, _indexJs.ModuleGenerator)();
        this.publisher = new (0, _indexJs1.Publisher)();
        this.subscriber = new (0, _indexJs1.Subscriber)(this.messageHandler.bind(this));
        this.#moduleMap = new Map();
        this.#compositePrefabMap = new Map();
        this.messageHandlerMap = new Map();
        this.#buildMessageHandlerMap();
        this.#PCM = new (0, _indexJs.PopupContentMaker)();
        this.#HF = new (0, _htmlFactoryJs.HTMLFactory)();
    }
    /* ########################## PRIVATE CLASS METHODS ##############################  */ /** --- PRIVATE ---
     * Builds the hash table of functions required to handle events.
     */ #buildMessageHandlerMap = ()=>{
        this.messageHandlerMap.set("Deploy Module Event", this.deployNewModule.bind(this));
    };
    /** --- PRIVATE ---
    * Sends a Message to all subscribers (should only be hub.)
    * @param {Message} msg the message object to send.
    */ #sendMessage = (msg)=>{
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(msg, "msg", "object")
        ], "ModuleManager", "#sendMessage")) return;
        this.publisher.publishMessage(msg);
    };
    /** --- PRIVATE ---
     * Creates a new module by calling the module generator. This function is called by the Environment as a callback after the Request Key Event.
     * @param {string} name name of the module.
     * @param {string} category category of the module (i.e. output, processor, source)
     * @param {number} key unique identifier of the module. ()
     * @param {int} oldKey -- ONLY USED BY COMPOSITE PREFAB NODES -- this is the key that was associted with the module when it was first saved. Must be overridden at creation.
     * @param {groupKey} -- ONLY USED BY COMPOSITE PREFAB NODES -- 
     * @return true if successful, false if not.
     */ #createNewModule = (name, category, key1, oldKey, groupKey)=>{
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(name, "name", "string"),
            (0, _errorHandlersJs.varTest)(category, "category", "string"),
            (0, _errorHandlersJs.varTest)(key1, "key", "number")
        ], "ModuleManager", "createNewModule")) return false;
        try {
            const module = this.#MG.generateNewModule(name, category, key1); // This is the new module Instance.
            module.addData("oldKey", oldKey); // It is fine if this is undefined
            module.publisher.subscribe(this.subscriber);
            this.#sendMessage(new (0, _indexJs1.Message)((0, _indexJs2.INSPECTOR), (0, _indexJs2.MODULE_MANAGER), "Publish Module Inspector Card Event", {
                moduleKey: key1,
                card: module.getInspectorCard().getCard()
            }));
            this.#sendMessage(new (0, _indexJs1.Message)((0, _indexJs2.POPUP_MANAGER), (0, _indexJs2.MODULE_MANAGER), "Publish Module Popup Event", {
                moduleKey: key1,
                content: module.getPopupContent()
            }));
            this.#sendMessage(new (0, _indexJs1.Message)((0, _indexJs2.ENVIRONMENT), (0, _indexJs2.MODULE_MANAGER), "New Module Created Event", {
                module: module,
                templateExists: this.#moduleMap.has(key1),
                groupKey: groupKey
            }));
            this.#addModule(module, key1);
            return true;
        } catch (e) {
            console.log(e);
            return false;
        }
    };
    /** --- PRIVATE ---
     * Creates a new Composite Prefab Model.
     * @param {number} key unique indentifier of the module.
     * @param {object} groupData stores a JSON representation of the modules and links of the group.
     * @param {string} description description of the module written by the user who saved the prefab.
     */ #createNewCompositePrefabModule = (key1, groupData, description)=>{
        try {
            const module = this.#MG.generateNewModule("CompositePrefab", "Composite", key1);
            this.#sendMessage(new (0, _indexJs1.Message)((0, _indexJs2.INSPECTOR), (0, _indexJs2.MODULE_MANAGER), "Publish Module Inspector Card Event", {
                moduleKey: key1,
                card: module.getInspectorCard().getCard()
            }));
            this.#addModule(module, key1);
            module.setCompositeGroupInfo(groupData);
            module.addData("description", description);
            module.createInspectorCardData();
            return module;
        } catch (e) {
            console.log(e);
            return undefined;
        }
    };
    /** --- PRIVATE ---
     * When user clicks on the save composite model, this function generates a popup window with options to name and describe the new module.
     * They do the actual save event from this popup.
     * @param {JSON Object} groupInfo JSON representation of the node group.
     */ #saveCompositeModule(groupInfo) {
        // Generate the Popup HTML element
        const saveContent = new (0, _indexJs.SaveCompositeModulePopupContent)(groupInfo, this.saveCompositeModuleCallback.bind(this));
        this.#sendMessage(new (0, _indexJs1.Message)((0, _indexJs2.POPUP_MANAGER), (0, _indexJs2.MODULE_MANAGER), "Create Save Composite Popup Event", {
            color: saveContent.getColor(),
            content: saveContent.getContent(),
            headerText: saveContent.getHeaderText()
        }));
    }
    /** --- PRIVATE ---
     * Gets a module by its old key.
     * @param {Number} key this is the original key for a module that was created from a saved composite model. This key
     *                     refers to the object from the time it was saved, not this instance of the application. It can 
     *                     be used to find the right module when creating links and building the group when the prefab is first
     *                     created 
     * @returns the module or null.
     */ #getModuleByOldKey(key1) {
        let mod = null;
        this.#moduleMap.forEach((module)=>{
            const oldKey = module.getData("oldKey");
            if (oldKey === key1) mod = module;
        });
        return mod;
    }
    /** --- PRIVATE ---
     * Add a module to the moduleMap hash table.
     * @param {Module} module the module to add
     * @param {number} key the key to add
     * @return true if successful add, false if not.
     */ #addModule = (module, key1)=>{
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(module, "module", "object"),
            (0, _errorHandlersJs.varTest)(key1, "key", "number")
        ], "ModuleManager", "#addModule")) return false;
        this.#moduleMap.set(key1, module);
        return true;
    };
    /** --- PRIVATE ---
     * This is called to update the filter module's data and inspector cards when it is connected to a chain of modules
     * that includes local data.
     * @param {Number} toModule key to the filter module 
     * @param {Number} fromModule key to the module directly before the filter module in the new link. 
     */ #updateModule_NewFilterConnection(toModule, fromModule) {
        let dataKey = fromModule.getData("dataKey");
        this.#sendMessage(new (0, _indexJs1.Message)((0, _indexJs2.DATA_MANAGER), (0, _indexJs2.MODULE_MANAGER), "New Filter Applied Event", {
            filterFunction: toModule.getFilterDataFunction.bind(toModule),
            dataKey: dataKey
        }));
    }
    /** --- PRIVATE ---
     * This is called when a module is connected to a chain that includes a local data module. It updates some
     * flags and keys in the data table.
     * @param {Number} toModule 
     * @param {Number} fromModule 
     */ #updateModule_LocalDataConnection(toModule, fromModule) {
        toModule.addData("linkedToData", true);
        toModule.addData("dataKey", fromModule.getData("dataKey"));
    }
    // ########################## PUBLIC CLASS METHODS ################################   
    /** --- PUBLIC ---
     * Passes messages from the Modules to the HUB to be executed.
     * @param {Message} msg the message to pass along the chain of command 
     */ messageHandler = (msg)=>{
        const message = msg.readMessage();
        if (message.to === (0, _indexJs2.MODULE_MANAGER)) try {
            this.messageHandlerMap.get(message.type)(message.data);
        } catch (e) {
            console.log(e);
        }
        else if (message.to !== (0, _indexJs2.MODULE_MANAGER) && message.from == (0, _indexJs2.MODULE)) {
            msg.updateFrom((0, _indexJs2.MODULE_MANAGER));
            this.#sendMessage(msg);
        }
    };
    /** --- PUBLIC ---
     * Subscribes to a publisher (Called in Init function in main.js to subscribe to ModuleSelectionMenu)
     * @param {Publisher} publisherToSubscribeTo 
     */ addPublisher = (publisherToSubscribeTo)=>{
        publisherToSubscribeTo.subscribe(this.subscriber);
    };
    /** --- PUBLIC ---
     * Creates a new composite Model
     * @param {number} key unique identifier of the module.
     * @param {groupData}
     * @return the new module or undefined if fail.
     */ createNewCompositeModule = (key1, groupData)=>{
        try {
            const module = this.#MG.generateNewModule("Composite", "Composite", key1);
            this.#sendMessage(new (0, _indexJs1.Message)((0, _indexJs2.INSPECTOR), (0, _indexJs2.MODULE_MANAGER), "Publish Module Inspector Card Event", {
                moduleKey: key1,
                card: module.getInspectorCard().getCard()
            }));
            this.#addModule(module, key1);
            module.setCompositeGroupInfo(groupData);
            module.setSaveModuleFunction(this.#saveCompositeModule.bind(this));
            return module;
        } catch (e) {
            console.log(e);
            return undefined;
        }
    };
    /** --- PUBLIC ---
     * Minimizes all Inspector Cards.
     */ collapseAllInspectorCards() {
        this.#moduleMap.forEach((value, key1)=>{
            value.getInspectorCard().minimizeCard();
        });
    }
    /** --- PUBLIC ---
     * Stores a JSON representation of the Prefab model. This data is provided to the client from the NODE middleware, currently
     * from a file in localstorage.
     * @param {string} name the name of the module 
     * @param {JSON Object} moduleData a JSON representation of the entire composite model (nodes and links)
     */ storeCompositePrefabData(name, moduleData) {
        this.#compositePrefabMap.set(name, moduleData);
    }
    /** -- PUBLIC ---
     * When a module is saved, this function is called by SaveCompositeModulePopupContent instance. This function is
     * passed when that instance is created.
     * @param {JSON Object
     * {
     * description: (string) The description of the save composite module (created by user)
     * name: (string) The name of the saved composite model (created by the user)
     * groupInfo: (Object) An array of nodes and an array of links.
     * }} data the data coorespoinding to the newly saved module.
     */ saveCompositeModuleCallback(data) {
        console.log(data);
        if (data.name !== "") this.#sendMessage(new (0, _indexJs1.Message)((0, _indexJs2.WORKER_MANAGER), (0, _indexJs2.MODULE_MANAGER), "Save Composite Module Event", data));
        else alert("Module Name Cannot Be Left Blank");
    }
    /** --- PUBLIC ---
     * Loads the module into the gojs environment.
     * @param {Object
     * {
     *  moduleName: (string) the name of the module being deployed. ex. 'CSV File'
     *  moduleCategory: (string) the category of the module being depolyed. ex. 'Source'
     *  type: (string) either composite or non-composite
     *  oldKey: (Number) a number representind a key of a saved module (will be overwritten, Optional)
     *  groupKey: (Number) a key representing the group membership (Optional: Only used with certain groups)
     * }} args The arguments passed in the message from the Module Selection Menu.
     * @return true 
     */ deployNewModule = (args)=>{
        if (args.type === "non-composite") this.#sendMessage(new (0, _indexJs1.Message)((0, _indexJs2.ENVIRONMENT), (0, _indexJs2.MODULE_MANAGER), "Request Module Key Event", {
            name: args.moduleName,
            category: args.moduleCategory,
            cb: this.#createNewModule,
            oldKey: args.oldKey,
            groupKey: args.groupKey
        }));
        else this.#sendMessage(new (0, _indexJs1.Message)((0, _indexJs2.ENVIRONMENT), (0, _indexJs2.MODULE_MANAGER), "Create Composite Group Event", {
            callback: this.deployCompositeComponentsWithGroupKey.bind(this),
            name: args.moduleName
        }));
        return true;
    };
    /** --- PUBLIC ---
     * When a prefab module is deployed, each of the individual modules are deployed as their own independent 
     * modules, linked with a group key. The information for each of these individual modes is stored in the 
     * compositePrefabMap under the name of the module. After the individual modules are built and deployed, any
     * saved links are created by the Environment.
     * 
     * @param {number} key this is the group key (originated from gojs Environment) 
     * @param {string} name the name of the composite module.
     */ deployCompositeComponentsWithGroupKey = (key1, name)=>{
        const data = this.#compositePrefabMap.get(name);
        console.log(data);
        const modulesInGroup = new Map();
        Object.values(data.groupInfo.nodes).forEach((node)=>{
            const args = {
                moduleName: node.type,
                moduleCategory: node.name,
                oldKey: node.key,
                groupKey: key1,
                type: "non-composite"
            };
            this.deployNewModule(args);
            modulesInGroup.set(this.#getModuleByOldKey(node.key).getData("key"), this.#getModuleByOldKey(node.key));
        });
        // Connect Modules with saved links
        Object.values(data.groupInfo.links).forEach((link)=>{
            const from = this.#getModuleByOldKey(link.from);
            const to = this.#getModuleByOldKey(link.to);
            this.#sendMessage(new (0, _indexJs1.Message)((0, _indexJs2.ENVIRONMENT), (0, _indexJs2.MODULE_MANAGER), "Draw Link Event", {
                from: from.getData("key"),
                to: to.getData("key")
            }));
        });
        this.#moduleMap.forEach((module)=>module.destroyOldKey());
        this.#createNewCompositePrefabModule(key1, data.groupInfo, data.description);
    };
    /** --- PUBLIC ---
     * Removes a node from the hash table.
     * @param {number} key the key of the module to remove
     * @return true if successful, false if failure.
     */ removeModule = (key1)=>{
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(key1, "key", "number")
        ], "ModuleManager", "#removeModule")) return false;
        if (this.#moduleMap.has(key1)) {
            const module = this.#moduleMap.get(key1);
            module.deleteInspectorCard();
            this.#moduleMap.delete(key1);
            // remove all daterange animation elements from body element
            var datepickers = document.querySelectorAll(".flatpickr-calendar");
            datepickers.forEach(function(e) {
                e.parentNode.removeChild(e);
            });
            return true;
        } else (0, _errorHandlersJs.printErrorMessage)("no module found for key", `key: ${key1} -- ModuleManager - #removeModule`);
        return false;
    };
    /** --- PUBLIC --- deprecated
     * When a data module is generated, it connects to the module that generated the data. 
     * Search the module hash table and locate the unconnected module, then link them.
     * This is called by the Hub during a 'New Data Event'.
     * @param {number} key identifies the module tha generated the data.
     * @return {Module} the module that was modified or undefined.
     */ connectDataModule(key1) {
        let returnModule = undefined;
        this.#moduleMap.forEach((module)=>{
            if (module.getData("isDataModule") !== undefined) {
                if (module.getData("isDataModule")) {
                    if (module.getData("link") === -1) {
                        module.addData("link", key1);
                        returnModule = module;
                        return; // Break the Loop
                    }
                }
            }
        });
        return returnModule;
    }
    /** --- PUBLIC --- deprecated
     * When a data module is generated, it connects to the table module that generated the data. 
     * Search the module hash table and locate the unconnected module, then link them.
     * This is called by the Hub during a 'New Table Event'.
     * @param {number} key identifies the module that generated the data.
     * @return {Module} the module that was modified or undefined.
     */ connectTableModule(key1) {
        let returnModule = undefined;
        this.#moduleMap.forEach((module)=>{
            if (key1 !== -1) {
                if (module.getData("link") === -1) {
                    module.addData("link", key1);
                    returnModule = module;
                    return; // Break the Loop
                }
            }
        });
        return returnModule;
    }
    /** --- PUBLIC ---
     * Retrieves the module from the hash table.
     * @param {number} key the Key of the module to get.
     * @returns the module if it is found, undefined if not.
     */ getModule = (key1)=>{
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(key1, "key", "number")
        ], "ModuleManager", "getModule")) return undefined;
        if (this.#moduleMap.has(key1)) return this.#moduleMap.get(key1);
        else (0, _errorHandlersJs.printErrorMessage)(`No module found`, `key ${key1}. -- ModuleManager - getModule`);
        return undefined;
    };
    /** --- PUBLIC ---
     * Converts the array of node keys to actual modules and adds the modules to the overall model. This function
     * is called by the HUB in the run() function. These values are passed to the PipelineManager for validation.
     * @param {Object containing links[] and nodes[]} model This is an object with 2 arrays, links and nodes. Nodes have data for key, type, and name.
     * @returns the updated model that includes the module objects. Returns undefined if the model is undefined.
     */ getModulesForPipeline = (model)=>{
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(model, "model", "object")
        ], "ModuleManager", "getModulesForPipeline")) return undefined;
        model.nodes.forEach((node)=>node.module = this.getModule(node.key));
        return model;
    };
    /** --- PUBLIC ---
     * Gets the content necessary to populate a popup associated with a specific module.
     * Is utilized any time a new popup is created and is called by the Hub. (doubleClickEvent(), createNewChartEvent(), etc.)
     * @param {number} key the key of the module to get.
     * @returns the content for the popup.
     */ getPopupContentForModule = (key1)=>{
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(key1, "key", "number")
        ], "ModuleManager", "getPopupContentForPipeline")) return undefined;
        const module = this.getModule(key1);
        let content = undefined;
        if (module) {
            content = module.getPopupContent();
            if (!content) (0, _errorHandlersJs.printErrorMessage)(`undefined variable. No Content found`, `key: ${key1}. -- ModuleManager -> getPopupContentForPipeline`);
        } else (0, _errorHandlersJs.printErrorMessage)("module is undefined", `key: ${key1}. -- ModuleManager -> getPopupContentForModule`);
        return content;
    };
    /***************** Mai 022823 ******************/ /** --- PUBLIC ---
     * Create/update popup content for the specified module. 
     * @param {number} moduleKey the key of the module to get.
     * @param {object} data data to update the popup with.
     *                  data.status: status of the query
     *                  data.queryType: type of the query
     *                  data.queryEntries: inputs of the query
     *                  data.columnHeaders: status and taskid of the resulting data
     */ updatePopupContent(moduleKey, moduleName, data) {
        const module = this.getModule(moduleKey);
        //const status = 'error';  // test error message
        let content = undefined;
        if (module) {
            content = module.getPopupContent();
            if (data.status === "error") this.#PCM.setErrorDisplay(moduleKey, content.content, data);
            else switch(moduleName){
                case "search":
                    this.#PCM.setSearchModuleContent(moduleKey, content.content, data);
                    break;
                case "table":
                    this.#PCM.setTableData(moduleKey, content.content, data);
                    break;
                default:
                    console.log("insert default method for setSearchModuleContent");
            }
        } else (0, _errorHandlersJs.printErrorMessage)("module is undefined", `key: ${key}. -- ModuleManager -> setPopupContentForModule`);
    }
    /** --- PUBLIC ---
     * When a new link is drawn between 2 modules, this function checks to see if the link is drawn between a composite data module and some
     * other module such as an output. This does not return true if the connection is made with a processor. Those are handled by a different
     * set of module specific functions. This is called by the Hub on a Link Drawn Event.
     * @param {number} to key to the module from is linked to 
     * @param {number} from key to the module from is linked from
     * @returns true if link contains a data module, false if not.
     */ checkForNewDataLink(to, from) {
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(to, "to", "number"),
            (0, _errorHandlersJs.varTest)(from, "from", "number")
        ], "Module Manager", "checkForNewDataLink")) return false;
        const toModule = this.getModule(to);
        const fromModule = this.getModule(from);
        if (!toModule || !fromModule) (0, _errorHandlersJs.printErrorMessage)(`Missing Module`, `to: ${toModule}, from: ${fromModule}. --ModuleManager -> checkForNewDataLink`);
        else {
            if (fromModule.getData("isDataModule") && toModule.getData("type") !== "Processor" || fromModule.getData("linkedToData") && toModule.getData("type") !== "Processor") return true;
        }
        return false;
    }
    /** --- PUBLIC ---
     * Called by the Hub on Link Drawn Event. This function checks to see if there is metadata available in the from
     * node of the newly drawn link.
     * @param {Number} from the key to the from node in the new link. 
     * @returns true if the checked node has stored metadata. False if otherwise.
     */ checkForMetadataLink(from) {
        const fromModule = this.getModule(from);
        if (fromModule?.getData("linkedToData") && fromModule?.getData("metadata")) return true;
        else return false;
    }
    /** --- PUBLIC ---
     * Called by the hub at the end of the Link Drawn Event. If this flow chain contains a local data module such as the 
     * module created by a CSV file, the new module must have the flags set in its data table. Additionally, if this new
     * module is a filter module that is part of a chain with a local data module, it must get the metadata to build the 
     * inspector vard.
     * @param {Number} to key to the to node in the link.
     * @param {Number} from key to the from node in the link.
     */ handleLocalDataConnection(to, from) {
        const toModule = this.getModule(to);
        const fromModule = this.getModule(from);
        console.log(fromModule);
        console.log(toModule);
        if (fromModule.getData("linkedToData")) this.#updateModule_LocalDataConnection(toModule, fromModule);
        if (toModule.getData("name") === "Filter") this.#updateModule_NewFilterConnection(toModule, fromModule);
    }
    /** --- PUBLIC ---
     * Dynamic Fields are updated when the variable changes. For instance, a new data link is made, the inspector card
     * may have a field for linked to data: false. This will be changed to true. Called by the HUB.
     * The inspector card maker will make the updates on the instpector card.
     * @param {Number} key key of the module who's data has changed 
     * @param {string} field the name of the field (ex. LinkedToData)
     * @param {any} value the new value.
     */ updateDynamicInspectorCardField(key1, field, value) {
        this.getModule(key1).inspectorCardMaker.updateInspectorCardDynamicField(field, value);
    }
    /** --- PUBLIC ---
     * Updates a field in the module data hash table.
     * This is called by the Hub when there is a Value Change Event, such as a change in the inspector or a popup.
     * This may not be currently implemented 
     * @param {
     * {
     *  moduleKey (number) the module to select
     *  field (string) the field to change 
     *  newValue (any) the new value to set
     * }
     * } args
     * @returns true if successful, false if failure;
     */ updateModuleDataTable = (args)=>{
        if (this.#moduleMap.has(args.moduleKey)) {
            if (parseFloat(args.newValue)) args.newValue = parseFloat(args.newValue); // Check to see if the value is a string and should be converted to a number.
            this.#moduleMap.get(args.moduleKey).addData(args.field, args.value).updatePopupData(args.field);
            return true;
        } else (0, _errorHandlersJs.printErrorMessage)(`module undefined`, `key: ${args.moduleKey} --ModuleManager -> updateModuleDataTable`);
        return false;
    };
    /** --- PUBLIC ---
    * Toggle the inspector card header and popup header colors.
    * If the module is processed, then change the header colors to dark gray.
    * If the module is not validated or processed, change the header colors to light gray.
    * keys are removed from the data table.
    */ toggleHeaderColor(moduleKey, processed) {
        var color = "#363538";
        var module = this.getModule(moduleKey);
        if (!processed) color = "#383838";
        // toggle inspector card header color
        var inspectorCardHeader = module.getInspectorCard().getCard().querySelector(".inspector-card-header");
        inspectorCardHeader.style.backgroundColor = color;
        // toggle popup header color
        var popupHeader = module.getPopupContent().content.closest(".popup").querySelector(".popupHeader");
        popupHeader.style.backgroundColor = color;
    }
}

},{"./index.js":"ddnCK","../communication/index.js":"eT70M","../errorHandling/errorHandlers.js":"dxjcu","../sharedVariables/index.js":"1uX14","../components/popup/popup.js":"7Q5cD","../htmlGeneration/htmlFactory.js":"9lYdL","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"33rvh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ModuleGenerator", ()=>ModuleGenerator);
var _moduleDataJs = require("../../sharedVariables/moduleData.js");
class ModuleGenerator {
    constructor(){
        this.generationMap = new Map();
        this.populateGenerationMap();
    }
    populateGenerationMap() {
        (0, _moduleDataJs.moduleDataObject).forEach((module)=>{
            this.generationMap.set(module.key, module.moduleCreationFunction);
        });
    }
    /**
     * Generates a new module on demand
     * @param {string} type the type of module (ie. JSON)
     * @param {string} category the category of module (ie. processor, output, source)
     * @param {number} key
     * @returns the new module if successful, undefined if failure
     */ generateNewModule = (type, category, key)=>{
        console.log(type, category, key);
        if (category) {
            if (category != "") {
                let module = undefined;
                try {
                    module = this.generationMap.get(type)(category, key);
                } catch (e) {
                    console.log(e);
                } finally{
                    return module;
                }
            } else console.log(`ERROR: Parameter Error. type: ${type}, category: ${category}. -- ModuleGenerator -> generate new module`);
        } else console.log(`ERROR: Parameter Error. type: ${type}, category: ${category}. -- ModuleGenerator -> generate new module`);
        return undefined;
    };
}

},{"../../sharedVariables/moduleData.js":"87R3y","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"14ZQg":[function(require,module,exports) {
/*************************************************************
 * COPYRIGHT University of Hawaii - COMA Project / Lava Lab  *
 * Author: James Hutchison                                   *
 * Date: 5/5/2022                                            *
 *************************************************************/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Data", ()=>Data);
var _moduleJs = require("../module.js");
var _constantsJs = require("../../sharedVariables/constants.js");
class Data extends (0, _moduleJs.Module) {
    #nodeArray;
    #linkArray;
    #isDataModule;
    constructor(category, color, shape, key, name, inports, isData){
        super(category, color, shape, "data", name, "images/icons/flow-diagram-white.png", inports, [
            {
                name: "OUT",
                leftSide: false,
                type: (0, _constantsJs.LT_PROCESSOR)
            }
        ], key);
        this.isData = true;
        this.addData("link", -1, false, "", false);
        this.addData("isDataModule", isData, false, "", false);
        this.addData("inportType", [
            (0, _constantsJs.LT_SOURCE)
        ]);
        this.addData("outportType", [
            (0, _constantsJs.LT_OUTPUT)
        ]);
        this.addData("dataKey", key);
        this.setPopupContent();
        this.createInspectorCardData();
    }
    setPopupContent = ()=>{
        const popupContent = this.HF.createNewDiv("", "", [], []);
        this.addData("popupContent", popupContent, false, "", false);
    };
    createInspectorCardData() {
        this.inspectorCardMaker.addInspectorCardIDField(this.getData("key"));
        this.inspectorCardMaker.addInspectorDataCard();
    }
    /** --- PUBLIC ---
     * Stores the metadata and updates the linkedToData field.
     * @param {JSON Object} metadata */ setMetadata = (metadata)=>{
        this.addData("metadata", metadata);
        this.inspectorCardMaker.addMetadataCard(metadata);
        this.popupContentMaker.addMetadataCard(metadata);
        this.addData("linkedToData", true);
    };
}

},{"../module.js":"a5q86","../../sharedVariables/constants.js":"dxmqI","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4ZKbb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SaveCompositeModulePopupContent", ()=>SaveCompositeModulePopupContent);
var _htmlFactoryJs = require("../../htmlGeneration/htmlFactory.js");
var _colorsJs = require("../../sharedVariables/colors.js");
class SaveCompositeModulePopupContent {
    constructor(groupInfo, saveCallback){
        this.HF = new (0, _htmlFactoryJs.HTMLFactory)();
        this.saveCallback = saveCallback;
        this.groupInfo = groupInfo;
        this.contentWrapper = this.createContentWrapper();
        this.nameInput = this.createNameInput();
        this.addInputLabel(this.nameInput, "Module Name");
        this.descriptionInput = this.createDescriptionInput();
        this.addInputLabel(this.descriptionInput, "Description");
        this.saveButton = this.createSaveButton();
        this.addSaveButtonListener();
        this.contentWrapper.appendChild(this.saveButton);
    }
    createContentWrapper() {
        return this.HF.createNewDiv("", "", [
            "save-popup-wrapper"
        ], []);
    }
    createNameInput() {
        return this.HF.createNewTextInput("", "", [], [], "text");
    }
    createDescriptionInput() {
        return this.HF.createNewTextArea("", "", [], []);
    }
    createSaveButton() {
        return this.HF.createNewButton("", "", [
            "save-popup-save-button"
        ], [], "button", "Save");
    }
    addInputLabel(element, labelText) {
        const label = this.HF.createNewParagraph("", "", [], [], labelText);
        const inputWrapper = this.HF.createNewDiv("", "", [
            "save-popup-input-wrapper"
        ], []);
        inputWrapper.appendChild(label);
        inputWrapper.appendChild(element);
        this.contentWrapper.appendChild(inputWrapper);
    }
    addSaveButtonListener() {
        this.saveButton.addEventListener("click", this.saveModule.bind(this));
    }
    saveModule() {
        console.log(this.nameInput.value);
        const data = {
            name: this.nameInput.value,
            description: this.descriptionInput.value,
            groupInfo: this.groupInfo
        };
        this.saveCallback(data);
    }
    getContent = ()=>this.contentWrapper;
    getColor = ()=>(0, _colorsJs.sourceColor);
    getHeaderText = ()=>"Save Composite Module";
}

},{"../../htmlGeneration/htmlFactory.js":"9lYdL","../../sharedVariables/colors.js":"hy48G","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6NNZ8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Environment", ()=>(0, _environmentJs.Environment));
parcelHelpers.export(exports, "PipelineManager", ()=>(0, _pipelineManagerJs.PipelineManager));
var _environmentJs = require("./environment.js");
var _pipelineManagerJs = require("./pipelineManager.js");

},{"./environment.js":"05czw","./pipelineManager.js":"5vuui","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"05czw":[function(require,module,exports) {
/*************************************************************
 * COPYRIGHT University of Hawaii - COMA Project / Lava Lab  *
 * Author: James Hutchison                                   *
 * Date: 5/5/2022                                            *
 *************************************************************/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Environment", ()=>Environment);
var _indexJs = require("../../communication/index.js");
var _errorHandlersJs = require("../../errorHandling/errorHandlers.js");
var _indexJs1 = require("../../sharedVariables/index.js");
class Environment {
    // Communication Variables
    publisher;
    #divID;
    #myDiagram;
    #model;
    #nodeKey;
    #contextMenu;
    #nextGroupKey;
    constructor(divID){
        this.publisher = new (0, _indexJs.Publisher)();
        this.#divID = divID; // The HTML Div of this environment.
        this.#myDiagram; // GOJS diagram.
        this.#model; // GOJS Model.
        this.#nodeKey = 1; // Initialize the next node key to 1.
        this.#nextGroupKey = -10000;
        this.#contextMenu = this.#createContextMenu();
        this.#setPrintEventListener();
    }
    #sendMessage = (msg)=>{
        this.publisher.publishMessage(msg);
    };
    #setPrintEventListener = ()=>{
        document.addEventListener("keydown", (e)=>{
            if (e.code === "KeyK") this.printModel();
        });
    };
    /** Creats the gojs environment objects.
     * Creates the New Model
     * Loads the model into the environment.
     * Adds interaction event listeners. */ setUpEnvironment = ()=>{
        this.#startGoJsEnvironment();
        this.#defineGroupTemplate(this.#getGOJSMakeObject());
        this.#createNewModel();
        this.#createValidationRules();
        this.#load(); // Loads the data into the canvas object.
        this.#createInteractionEventListeners(); // Define gojs event handlers
    };
    /** Returns a gojs graph object */ #getGOJSMakeObject = ()=>go.GraphObject.make;
    /** --- PRIVATE ---
     * Creates the diagram and sets off a chain of functions that build the environment */ #startGoJsEnvironment = ()=>{
        go.licenseKey = "73f944e0b76631b700ca0d2b113f69ee1bb37b319ed01ef65a0541a7ef0e69462b9ded2858d08bc0d4ff4efd1c2fd2c9dacc3921971e5638b533d18b43b78ffdb3627ab0105c408ba40721c29bff7da4f82d26f5c0bd65b2dc2ddcf4ebfa939d4ef8f0d54bc911bb29670e";
        this.#myDiagram = this.#createNewDiagram(this.#getGOJSMakeObject());
        this.#setGridVisibility(true); // Toggles the grid in the background of the environment DOM element
    };
    /** --- PRIVATE ---
     * This template defines a group in gojs. Any time a group of elements is created, this template is called.
     * @param {Gojs Graph Object} gojs 
     */ #defineGroupTemplate = (gojs)=>{
        // Groups consist of a title in the color given by the group node data
        // above a translucent gray rectangle surrounding the member parts
        this.#myDiagram.groupTemplate = gojs(go.Group, "Vertical", {
            selectionObjectName: "PANEL",
            ungroupable: true // enable Ctrl-Shift-G to ungroup a selected Group
        }, {
            layout: gojs(go.LayeredDigraphLayout, {
                direction: 0
            })
        }, gojs("SubGraphExpanderButton", {
            row: 0,
            column: 0,
            margin: 3
        }), gojs(go.TextBlock, {
            font: "bold 16px sans-serif",
            isMultiline: false,
            editable: true // allow in-place editing by user
        }, new go.Binding("text", "text").makeTwoWay(), new go.Binding("stroke", "color")), gojs(go.Panel, "Table", {
            name: "PANEL"
        }, gojs(go.Shape, "Rectangle", {
            fill: (0, _indexJs1.compositColor),
            stroke: (0, _indexJs1.compositColor),
            strokeWidth: 3,
            minSize: new go.Size(60, 60),
            maxSize: new go.Size(70, 70),
            portId: "",
            cursor: "pointer",
            // allow all kinds of links from and to this port
            fromLinkable: false,
            fromLinkableSelfNode: false,
            fromLinkableDuplicates: false,
            toLinkable: false,
            toLinkableSelfNode: false,
            toLinkableDuplicates: false
        }), gojs(go.Picture, (0, _indexJs1.compositIcon), {
            width: 40,
            height: 40
        }), gojs(go.Placeholder, {
            margin: 10,
            background: (0, _indexJs1.compositColor),
            padding: 10
        }, new go.Binding("padding", "isSubGraphExpanded", function(exp) {
            return exp ? 10 : 10;
        }).ofObject())), {
            // the same context menu Adornment is shared by all groups
            toolTip: gojs("ToolTip", gojs(go.TextBlock, {
                margin: 4
            }, // bind to tooltip, not to Group.data, to allow access to Group properties
            new go.Binding("text", "", this.#groupInfo).ofObject())),
            contextMenu: this.#contextMenu
        });
    };
    /** --- PRIVATE ---
     * Creates a Model Object. Binds Data for cetrain categories
     */ #createNewModel = ()=>{
        this.#model = {
            class: "go.GraphLinksModel",
            nodeCategoryProperty: "type",
            linkFromPortIdProperty: "frompid",
            linkToPortIdProperty: "topid",
            nodeDataArray: [],
            linkDataArray: [] // This can be accessed to see the link data of the graph
        };
    };
    /** --- PRIVATE ---
     * Add All Interaction event listeneres here. Whenever a gojs event is fired, this function should
     * define the event handlers.
     */ #createInteractionEventListeners = ()=>{
        this.#myDiagram.addDiagramListener("LinkDrawn", (e)=>{
            console.log(e.subject);
            this.#sendMessage(new (0, _indexJs.Message)((0, _indexJs1.MODULE_MANAGER), (0, _indexJs1.ENVIRONMENT), "Link Drawn Event", {
                event: "LinkDrawn",
                fromNodeKey: e.subject.fromNode.key,
                toNodeKey: e.subject.toNode.key
            }));
        });
        this.#myDiagram.addDiagramListener("SelectionDeleted", (e)=>{
            const deletedKeys = [];
            e.subject.each((node)=>{
                if (node.data.key) deletedKeys.push(node.data.key);
            });
            this.#sendMessage(new (0, _indexJs.Message)((0, _indexJs1.MODULE_MANAGER), (0, _indexJs1.ENVIRONMENT), "Nodes Deleted Event", deletedKeys));
        });
        this.#myDiagram.addDiagramListener("SelectionGrouped", this.#handleNewGroup.bind(this));
        this.#myDiagram.addDiagramListener("SelectionUngrouped", this.#handleUngrouping.bind(this));
    };
    /**
     * Creates a new node template.
     * @param {object (Module)} module The module object that will be represented as a node in the graph */ #createTemplate = (module)=>{
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(module, "module", "object")
        ], "Environment", "#createTemplate")) return;
        //console.log(module);
        this.#makeTemplate(module.getData("name"), module.getData("image"), module.getData("color"), module.getData("shape"), this.#unpackPortArray(module, "inports"), this.#unpackPortArray(module, "outports"), module.getData("inportType"), module.getData("outportType"));
    };
    /** --- PRIVATE ---
     * Creates the menu that appears then user right clicks on a graph element
     * @returns the menu */ #createContextMenu = ()=>{
        const gojs = this.#getGOJSMakeObject();
        return gojs("ContextMenu", this.#makeButton("Delete", function(e, obj) {
            e.diagram.commandHandler.deleteSelection();
        }, function(o) {
            return o.diagram.commandHandler.canDeleteSelection();
        }), this.#makeButton("Undo", function(e, obj) {
            e.diagram.commandHandler.undo();
        }, function(o) {
            return o.diagram.commandHandler.canUndo();
        }), this.#makeButton("Redo", function(e, obj) {
            e.diagram.commandHandler.redo();
        }, function(o) {
            return o.diagram.commandHandler.canRedo();
        }), this.#makeButton("Group", function(e, obj) {
            e.diagram.commandHandler.groupSelection();
        }, function(o) {
            return o.diagram.commandHandler.canGroupSelection();
        }), this.#makeButton("Ungroup", function(e, obj) {
            e.diagram.commandHandler.ungroupSelection();
        }, function(o) {
            return o.diagram.commandHandler.canUngroupSelection();
        }));
    };
    /** --- PRIVATE ---
     * When modules are created they pass port information to the environment. This function converts
     * the module representation of the port to the gojs representation.
     * @param {object (Module)} module 
     * @param {string} portType 'inports' or 'outports'
     * @returns array of ports
     */ #unpackPortArray = (module, portType)=>{
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(module, "module", "object"),
            (0, _errorHandlersJs.varTest)(portType, "portType", "string")
        ], "Environemnt", "#unpackPortArray")) return undefined;
        const ports = [];
        module.getData(portType).forEach((obj)=>ports.push(this.#makePort(obj.name, obj.leftSide, obj.type)));
        return ports;
    };
    /** --- PRIVATE ---
     * Turns the grid on or off
     * @param {boolean} visibility 
     */ #setGridVisibility = (visibility)=>this.#myDiagram.grid.visible = visibility;
    /** --- PRIVATE ---
     * Creates a new GOJS diagram object
     * @param {GOJS Graph Object} gojs 
     * @returns the new diagram with initial variables set
     */ #createNewDiagram = (gojs)=>{
        return gojs(go.Diagram, this.#divID, this.#setInitialDiagramVariables(gojs));
    };
    /** --- PRIVATE ---
     * Sets defaults for the gojs diagram
     * @param {gojs graph object} gojs 
     * @returns object with default settings
     */ #setInitialDiagramVariables = (gojs)=>{
        console.log(go.Spot);
        return {
            initialContentAlignment: go.Spot.Center,
            initialAutoScale: go.Diagram.UniformToFill,
            layout: gojs(go.LayeredDigraphLayout, {
                direction: 0
            }),
            "commandHandler.archetypeGroupData": {
                text: "Composite",
                isGroup: true,
                color: "black",
                background: (0, _indexJs1.compositColor)
            },
            "undoManager.isEnabled": true
        };
    };
    /** --- PRIVATE ---
     * Builds the gojs node template. 
     * @param {string} typename type of the node
     * @param {string} icon path to the icon
     * @param {string} background background color of the node
     * @param {string} shape shape of the node
     * @param {[] of gojs panel objects} inports array of panels. These were created by the makeport function
     * @param {[] of gojs panel objects} outports array of panels. These were created by the makeport function
     */ #makeTemplate = (typename, icon, background, shape, inports, outports, inportType, outportType)=>{
        const gojs = this.#getGOJSMakeObject();
        const node = this.#createNewNode(gojs, shape, background, typename, icon, inports, outports, outportType, inportType);
        this.#myDiagram.nodeTemplateMap.add(typename, node);
    };
    /** --- PRIVATE ---
     * Creates a new node and adds it to the environment
     * @param {GoJS graph object} gojs used to make gojs elements 
     * @param {string} shape the shape of the node. ie. 'rectangle' 
     * @param {string} background the background color
     * @param {string} typename the type of the node 
     * @param {string} icon the path to the icon image 
     * @param {object[]} inports array of ports on the left side
     * @param {object[]} outports array of ports on the right side
     * @param {Number} outportType constant defining the type of port. Is used for color and link validation 
     * @param {Number} inportType constant defining the type of port. Is used for color and link validation 
     */ #createNewNode = (gojs, shape, background, typename, icon, inports, outports, outportType, inportType)=>{
        return gojs(go.Node, this.#setSelectionAdornedVariables(), this.#setDoubleClickListener(), this.#createNodeBody(gojs, shape, background, typename, icon, inports, outports), this.#createMenuAdornment(), this.#createNewGOJSBinding("outPortType", 1));
    };
    /** --- PRIVATE ---
     * Sets the context menu. This is the menu that appears when the node is right clicked.
     * @returns content menu settings.
     */ #createMenuAdornment = ()=>{
        return {
            contextMenu: this.#contextMenu
        };
    };
    /** --- PRIVATE ---
     * Create the actual node oject that is displayed in the environment.
     * @param {GoJS graph object} gojs used to make gojs elements 
     * @param {string} shape the shape of the node. ie. 'rectangle' 
     * @param {string} background the background color
     * @param {string} typename the type of the node 
     * @param {string} icon the path to the icon image 
     * @param {object[]} inports array of ports on the left side
     * @param {object[]} outports array of ports on the right side
     * @returns The node body
     */ #createNodeBody = (gojs, shape, background, typename, icon, inports, outports)=>{
        return gojs(go.Panel, "Auto", this.#setNodeWidthAndHeight(80, 80), this.#createShapeObject(shape, gojs, background), this.#populateNodeBody(gojs, typename, icon), this.#createInports(gojs, inports), this.#createOutports(gojs, outports));
    };
    /** --- PRIAVTE ---
     * Creates a GOJS shape object. This is likely used for the background of the node. This one attaches animations and bind
     * attributes.
     * @param {string} shape the shape of the element ie. 'rectange', 'circle' 
     * @param {gojs graph object} gojs used to make gojs elements 
     * @param {string} background hex color identifying the background color of the shape 
     * @returns a new shape.
     */ #createShapeObject = (shape, gojs, background)=>{
        return gojs(go.Shape, shape, this.#setNodeShapeAttributes(background), this.#createNewGOJSBinding("stroke", "stroke"), this.#createNewGOJSBinding("fill", "fill"), this.#createNewAnimationTrigger("stroke"), this.#createNewAnimationTrigger("fill"));
    };
    /** ---PRIVATE ---
     * Sets an aniamtion trigger. I was using this to fade the background colors of the nodes. They were
     * fading to gray when the pipeline is sent to the server and faded back to color when they were processed.
     * @param {string} attribute string identifying what to animate. i.e. fill or stroke
     * @returns the animation trigger
     */ #createNewAnimationTrigger = (attribute)=>new go.AnimationTrigger(attribute);
    /** --- PRIVATE ---
     * Creates a an attribute binding. You can bind any of the gojs attributes with a key.
     * @param {string} attribute the attribute to bind, ie. 'stroke'
     * @param {string} identifier the key to identify the attribute, can be the same as the attribute 
     * @returns a new gojs binding
     */ #createNewGOJSBinding = (attribute, identifier)=>new go.Binding(attribute, identifier);
    /** --- PRIVATE ---
     * Populates the body of the gojs node with a type string, an icon and a name
     * @param {gojs graph object} gojs  
     * @param {string} typename the name of the module, like 'CSV File'
     * @param {string} icon the path to the icon
     * @returns an object with the settings for the body.
     */ #populateNodeBody = (gojs, typename, icon)=>{
        return gojs(go.Panel, "Table", gojs(go.TextBlock, typename, this.#setNodeTypeAttributes()), gojs(go.Picture, icon, this.#setNodeIconAttributes(1, 8, 8, 3.0)), gojs(go.TextBlock, this.#setNodeNameAttributes(), new go.Binding("text", "name").makeTwoWay())); // User can change the string in the environment by clicking on it
    };
    /** --- PRIVATE ---
     * Sets the width and height in pixels of the node
     * @param {Number} width only number, no 'px'
     * @param {Number} height 
     * @returns object with the settings
     */ #setNodeWidthAndHeight = (width, height)=>{
        return {
            width: width,
            height: height
        };
    };
    /** --- PRIVATE ---
     * Sets the attributes for the node background object. This is the rectangle or circle that makes up the main part of the
     * node that is displayed in the environment. 
     * @param {string} background color in hex
     * @returns settings for the node
     */ #setNodeShapeAttributes = (background)=>{
        return {
            fill: background,
            stroke: "transparent",
            strokeWidth: 5,
            spot1: go.Spot.TopLeft,
            spot2: go.Spot.BottomRight,
            name: "SHAPE" // Name of the element for access in gojs
        };
    };
    /** --- PRIVATE ---
     * These are the settings for the Type block on the Node. The type refers to 'CSV File' etc. Not Source or processor
     * @returns Object with the settings
     */ #setNodeTypeAttributes = ()=>{
        return {
            row: 0,
            margin: 3,
            maxSize: new go.Size(80, NaN),
            stroke: "white",
            font: "bold 7pt sans-serif"
        };
    };
    /** --- PRIVATE ---
     * Settings for the icon
     * ALL VARIABLES ARE CURRENTLY HARD CODED BUT COULD BE CHANGED
     * @param {*} row 
     * @param {*} width 
     * @param {*} height 
     * @param {*} scale 
     * @returns 
     */ #setNodeIconAttributes = (row, width, height, scale)=>{
        return {
            row: 1,
            width: 8,
            height: 8,
            scale: 3.0
        };
    };
    /** --- PRIVATE ---
     * Settings for the Name. Name is 'Procesor' or 'Output' etc.
     */ #setNodeNameAttributes = ()=>{
        return {
            row: 2,
            margin: 3,
            editable: true,
            maxSize: new go.Size(80, 40),
            stroke: "white",
            font: "bold 9pt sans-serif"
        };
    };
    /** --- PRIVATE ---
     * Creates the in ports, left side of the panel
     * @param {gojs graph object} gojs 
     * @param {object[]} inports 
     * @returns Object containing the ports
     */ #createInports = (gojs, inports)=>gojs(go.Panel, "Vertical", this.#alignInports(), inports);
    /** --- PRIVATE ---
     * Creates the out ports, right side of the panel.
     * @param {gojs graph object} gojs 
     * @param {object[]} inports 
     * @returns Object containing the ports
     */ #createOutports = (gojs, outports)=>gojs(go.Panel, "Vertical", this.#alignOutports(), outports);
    /** --- PRIVATE ---
     * Positions the ports on the left side
     * @returns alignment settings
     */ #alignInports = ()=>{
        return {
            alignment: new go.Spot(0, 0.5, 0, 0)
        };
    };
    /** --- PRIVATE ---
     * Positions the ports on the right side
     * @returns alignment settings
     */ #alignOutports = ()=>{
        return {
            alignment: new go.Spot(1, 0.5, 0, 0)
        };
    };
    /** --- PRIVATE ---
     * Set double click handler function here.
     * @returns double click listener object
     */ #setDoubleClickListener = ()=>{
        return {
            doubleClick: (e, node)=>this.#handleDoubleClick(e, node.key)
        };
    };
    /** --- PRIVATE ---
     * Sets the selection adorned. This means is the selected node highlighted with a box when it is clicked.
     * Also sets the function for when the selection is changed.
     */ #setSelectionAdornedVariables = ()=>{
        return {
            selectionAdorned: true,
            selectionChanged: this.#onSelectionChanged
        };
    };
    /**
     * Creates a gojs port panel
     * @param {string} name the name of the port. ie. in, out
     * @param {boolean} leftside true if left side, false if right side.
     * @returns a panel object.
     */ #makePort = (name, leftside, type)=>{
        const gojs = this.#getGOJSMakeObject();
        const panel = this.#createPortPanel(gojs);
        panel.add(this.#setupPort(leftside, this.#createPortObject(gojs, name, type), this.#createPortLabel(gojs, name), panel));
        return panel;
    };
    /** --- PRIVATE ---
     * Creates the settings for a port, one at a time.
     * @param {boolean} leftside if true, ports go on the left, false ports go on the right
     * @param {Object} port the port object created by GOJS
     * @param {string} label this is a string that can display in or out if desired
     * @param {Object} panel The panel to attach the ports to.
     * @returns the port object with settings applied
     */ #setupPort = (leftside, port, label, panel)=>{
        this.#placePortLabel(leftside, label); // Sets the location of the label
        this.#placePort(leftside, panel); // Sets the location fof the port
        this.#alignPort(leftside, port); // Aligns the port
        this.#setToLinkable(leftside, port); // Sets whether or not the port to linkable (ie. an in or out port)
        this.#setFromLinkable(leftside, port); // Sets whether or not the port is in or out port
        return port;
    };
    #placePortLabel = (leftside, label)=>label.margin === leftside ? new go.Margin(1, 1, 0, 0) : new go.Margin(1, 0, 0, 1);
    #placePort = (leftside, port)=>port.toSpot = leftside ? go.Spot.Left : go.Spot.Right;
    #alignPort = (leftside, port)=>port.alignment = leftside ? go.Spot.TopLeft : go.Spot.TopRight;
    #setToLinkable = (leftside, port)=>port.toLinkable = leftside ? true : false;
    #setFromLinkable = (leftside, port)=>port.fromLinkable = leftside ? false : true;
    /** --- PRIVATE ---
     * Creates the GOJS panel object. This is the background box of the port
     * @param {gojs graph object} gojs used to make gojs elements 
     * @returns the panel
     */ #createPortPanel = (gojs)=>{
        return gojs(go.Panel, "Horizontal", {
            margin: new go.Margin(2, 0)
        });
    };
    /** --- PRIVATE ---
     * Creates the text block with the port label
     * @param {gojs graph object} gojs used to make gojs elements 
     * @param {string} label the label of the port (most likely IN or OUT)
     * @returns the gojs label object with settings
     */ #createPortLabel = (gojs, label)=>{
        return gojs(go.TextBlock, label, {
            font: "7pt sans-serif"
        });
    };
    /** --- PRIVATE ---
     * Creates the port object (technically the gojs shape)
     * @param {gojs graph object} gojs 
     * @param {string} name IN or OUT 
     * @param {*} type 
     * @returns 
     */ #createPortObject = (gojs, name, type)=>{
        console.log("PortName: ", name);
        return gojs(go.Shape, "Rectangle", {
            fill: (0, _indexJs1.typeColorArray)[type],
            stroke: null,
            desiredSize: new go.Size(12, 12),
            portId: name,
            toMaxLinks: 4,
            cursor: "pointer" // show a different cursor to indicate potential link point
        });
    };
    /** --- Private ---
     * This sets up the context menu for grouped items.
     * @param {GO JS Object} adornment the context menu
     * @returns group info
     */ #groupInfo = (adornment)=>{
        var g = adornment.adornedPart; // get the Group that the tooltip adorns
        var mems = g.memberParts.count;
        var links = 0;
        g.memberParts.each(function(part) {
            if (part instanceof go.Link) links++;
        });
        return "Group " + g.data.key + ": " + g.data.text + "\n" + mems + " members including " + links + " links";
    };
    /** When a node is selected, the data for this module is passed to the Inspector
     * @param node -> The newly selected node. 
     */ #onSelectionChanged = (node)=>{
        if (node) this.#sendMessage(new (0, _indexJs.Message)((0, _indexJs1.INSPECTOR), (0, _indexJs1.ENVIRONMENT), "Node Selected Event", {
            moduleKey: node.key
        }));
        else console.log(`ERROR: Cannot select undefined node. -- Environment -> onSelectionChanged`);
    };
    /** --- PUBLIC ---
     * Programatically draws a link between two nodes.
     * @param {Number} source key to the source node
     * @param {Number} destination key to the destination node
     */ drawLinkBetweenNodes(source, destination) {
        this.#myDiagram.startTransaction("make new link");
        this.#myDiagram.model.addLinkData({
            from: source,
            to: destination
        });
        this.#myDiagram.commitTransaction("make new link");
    }
    /** --- PUBLIC ---
     * Creats a group. This is called when a group is created from a prefab node.
     * @returns the key for the new group node.
     */ createNewGroupNode() {
        const key = this.#getNextGroupKey();
        this.#myDiagram.startTransaction("make new group");
        this.#myDiagram.model.addNodeData({
            key: key,
            isGroup: true
        });
        this.#myDiagram.commitTransaction("make new group");
        return key;
    }
    /** --- PRIVATE ---
     * Gets the next available group key and increments. Group Keys are negative numbers.
     * @returns the key.
     */ #getNextGroupKey() {
        this.#nextGroupKey = this.#nextGroupKey - 100;
        return this.#nextGroupKey;
    }
    /** Removes a node from the diagram. */ #removeNode = (nodeKey)=>{
        const node = this.#myDiagram.findNodeForKey(nodeKey);
        if (node !== null) {
            this.#myDiagram.startTransaction();
            this.#myDiagram.remove(node);
            let i = this.#model.nodeDataArray.forEach((n, index)=>{
                if (n.key === nodeKey) return index;
            });
            this.#model.nodeDataArray.splice(i, 1);
            this.MDT.removeModule(nodeKey, node.data.type);
            this.#myDiagram.commitTransaction("deleted node");
        } else console.log("No Node Found. Cannot Delete.");
    };
    /** Returns the next unique node key and increments the counter. */ getNextNodeKey = ()=>{
        this.#nodeKey++;
        return this.#nodeKey - 1;
    };
    /**
     * This function takes a newly created module and generates a graph node for it. If the template does not exist yet, it will be created.
     * @param {Module} mod the module to insert into the graph
     * @param {boolean} templateExists true if a template exists for this node type, false if not.
     */ insertModule = (mod, templateExists, groupKey)=>{
        if (mod && templateExists != undefined) {
            if (!templateExists) this.#createTemplate(mod);
            this.#myDiagram.startTransaction("make new node");
            if (groupKey) this.#myDiagram.model.addNodeData({
                "key": this.#nodeKey - 1,
                "type": mod.getData("name"),
                "name": mod.getData("type") === "Composite" ? "" : mod.getData("type"),
                "group": groupKey
            });
            else this.#myDiagram.model.addNodeData({
                "key": this.#nodeKey - 1,
                "type": mod.getData("name"),
                "name": mod.getData("type") === "Composite" ? "" : mod.getData("type")
            });
            this.#myDiagram.commitTransaction("make new node");
        } else console.log(`ERROR: parameter error. mod: ${mod}, templateExists: ${templateExists}. -- Environment -> insertModule`);
    };
    // To simplify this code we define a function for creating a context menu button:
    #makeButton = (text, action, visiblePredicate)=>{
        const gojs = this.#getGOJSMakeObject();
        return gojs("ContextMenuButton", gojs(go.TextBlock, text), {
            click: action
        }, // don't bother with binding GraphObject.visible if there's no predicate
        visiblePredicate ? new go.Binding("visible", "", function(o, e) {
            return o.diagram ? visiblePredicate(o, e) : false;
        }).ofObject() : {});
    };
    /** Loads the model to the HTML browser page. */ #load = ()=>{
        this.#myDiagram.model = go.Model.fromJson(this.#model);
    };
    /**
     * Handles a double click event
     * @param {gojs event object} event has the click location.
     * @param {number} key the key of the node that was clicked.
     */ #handleDoubleClick = (event, key)=>{
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(event, "event", "object"),
            (0, _errorHandlersJs.varTest)(key, "key", "number")
        ], "Environment", "#handleDoubleClick")) return false;
        this.clearHighlightedNode(key);
        this.#sendMessage(new (0, _indexJs.Message)((0, _indexJs1.POPUP_MANAGER), (0, _indexJs1.ENVIRONMENT), "Double Click Event", {
            moduleKey: key,
            x: event.Xr.clientX,
            y: event.Xr.clientY
        })); // Open Popup
    };
    printModel = ()=>{
        console.log(this.#model.nodeDataArray);
        console.log(this.#model.linkDataArray);
    };
    /**
     * Gets the current model.
     * @returns object of links and nodes.
     */ getModel = ()=>{
        return {
            links: JSON.parse(JSON.stringify(this.#model.linkDataArray)),
            nodes: JSON.parse(JSON.stringify(this.#model.nodeDataArray))
        };
    };
    /**
     * Adds a colored outline to nodes.
     * @param {number[]} nodeArray an array of keys for the nodes that were changed and need a colored outline
     */ highlightChangedNodes = (nodeArray)=>{
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(nodeArray, "nodeArray", "object")
        ], "Environment", "highlightChangedNodes")) return;
        nodeArray.forEach((key)=>this.#myDiagram.findNodeForKey(key).findObject("SHAPE").stroke = "red");
    };
    /**
     * Removes outline around gojs node.
     * @param {number} key node key.
     */ clearHighlightedNode = (key)=>{
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(key, "key", "number")
        ], "Environment", "clearHighlightedNode")) return;
        this.#myDiagram.findNodeForKey(key).findObject("SHAPE").stroke = "transparent";
    };
    /**
     * Colors the nodes whos keys are provided based on their type.
     * @param {number[]} nodeArray 
     */ updatePipelineProgress = (nodeArray)=>{
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(nodeArray, "nodeArray", "object")
        ], "Environment", "updatePipelinePrograss")) return;
        nodeArray.forEach((key)=>{
            const node = this.#myDiagram.findNodeForKey(key);
            this.changeNodeBackgroundColor(node, this.#getNodeColor(node.data.name));
        });
    };
    /** --- PRIVATE ---
     * This function is called when a group is made in the Environmnt by the user highlighting nodes, right clicking, and selecting group.
     * Creates an object representation of the group and sends it to the module manager. */ #handleNewGroup() {
        // When a new group is made, it should be the only thing selected on the diagram.
        if (this.#myDiagram.selection.count != 1) {
            console.log("More than one module selected error.");
            return;
        }
        let groupKey = Infinity;
        const groupDiagram = {
            nodes: [],
            links: []
        };
        this.#myDiagram.selection.each((e)=>{
            if (e.data.isGroup) groupKey = e.data.key;
        });
        if (groupKey != Infinity && groupKey != undefined) {
            const idArray = [];
            this.#model.nodeDataArray.forEach((node)=>{
                if (node.group === groupKey) {
                    groupDiagram.nodes.push(node);
                    idArray.push(node.key);
                }
            });
            this.#model.linkDataArray.forEach((link)=>{
                if (idArray.includes(link.to) && idArray.includes(link.from)) groupDiagram.links.push(link);
            });
        }
        this.#sendMessage(new (0, _indexJs.Message)((0, _indexJs1.MODULE_MANAGER), (0, _indexJs1.ENVIRONMENT), "New Group Created", {
            groupDiagram: groupDiagram,
            groupKey: groupKey
        }));
    }
    /** --- PRIVATE ---
     * Called when user manually ungroups a group of nodes in the environment. The group node must be deleted.
     * Module Manager is Notified with an array of all effected module keys so that their datatables can be updated.
     * @param {GOJS object} event Gojs event */ #handleUngrouping(event) {
        const groupKeys = [];
        event.subject.iterator.each((node)=>groupKeys.push(node.data.key));
        this.#sendMessage(new (0, _indexJs.Message)((0, _indexJs1.MODULE_MANAGER), (0, _indexJs1.ENVIRONMENT), "Nodes Deleted Event", groupKeys));
    }
    /**
     * @param {string} type 'Source', 'Processor', or 'Output'
     * @returns the color
     */ #getNodeColor = (type)=>{
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(type, "type", "string")
        ], "Environment", "#getNodeColor")) return undefined;
        let color = undefined;
        switch(type){
            case "Source":
                color = (0, _indexJs1.sourceColor);
                break;
            case "Processor":
                color = (0, _indexJs1.processorColor);
                break;
            case "Output":
                color = (0, _indexJs1.outputColor);
                break;
            case "Composite":
                color = (0, _indexJs1.compositColor);
                break;
            default:
                (0, _errorHandlersJs.printErrorMessage)("unhandled type. Cannot get color.", `type: ${type} -- Environment -> #getnodeColor`);
                break;
        }
        return color;
    };
    #createValidationRules() {
        this.#myDiagram.toolManager.linkingTool.linkValidation = this.#validatePortLinks;
    }
    /** --- PRIVATE ---
     * This function is used to validate the links and make sure that the correct links are allowed. This function will need to be 
     * updated as the program progresses and you find out exactly how the pipeline will be constructed and sent to the user.
     * 
     * Data from the node or port can be used to this validation.
     * 
     * @param {*} fromnode The node sending the link
     * @param {*} fromport the port on the from node sending the link
     * @param {*} tonode the to node receiving the link
     * @param {*} toport the port on the to node receiving the link
     * @returns true if it is allowed
     */ #validatePortLinks(fromnode, fromport, tonode, toport) {
        return fromport.fill === toport.fill;
    }
    /**
     * Turns all Nodes in the graph gray when run is clicked.
     * @param {number[]} nodeArray Array of keys for the nodes to turn gray.
     */ grayOutPipeline = (nodeArray)=>{
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(nodeArray, "nodeArray", "object")
        ], "Environment", "grayOutPipeline")) return;
        nodeArray.forEach((key)=>{
            console.log(key);
            if (key != undefined) this.changeNodeBackgroundColor(this.#myDiagram.findNodeForKey(key), "#363538");
            else (0, _errorHandlersJs.printErrorMessage)(`undefined variable`, `key: ${key} -- Environment -> grayOutPipeline`);
        });
    };
    /**
     * Changes the background color of a single node.
     * @param {gojs node} node the node to change background color.
     * @param {string} color the color to fill with
     */ changeNodeBackgroundColor = (node, color)=>{
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(node, "node", "object"),
            (0, _errorHandlersJs.varTest)(color, "color", "string")
        ], "Environment", "changeNodeBackgroundColor")) return;
        node.findObject("SHAPE").fill = color;
    };
    toggleNodeColor(moduleKey, processed) {
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(moduleKey, "moduleKey", "number"),
            (0, _errorHandlersJs.varTest)(processed, "processed", "boolean")
        ], "Environment", "toggleNodeColor")) return;
        var node = this.#myDiagram.findNodeForKey(moduleKey);
        if (processed) node.findObject("SHAPE").fill = (0, _indexJs1.processedModuleColor);
        else node.findObject("SHAPE").fill = (0, _indexJs1.sourceColor);
    }
}

},{"../../communication/index.js":"eT70M","../../errorHandling/errorHandlers.js":"dxjcu","../../sharedVariables/index.js":"1uX14","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5vuui":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "PipelineManager", ()=>PipelineManager);
var _indexJs = require("../../communication/index.js");
var _errorHandlersJs = require("../../errorHandling/errorHandlers.js");
var _constantsJs = require("../../sharedVariables/constants.js");
class PipelineManager {
    publisher;
    constructor(){
        this.publisher = new (0, _indexJs.Publisher)();
    }
    /**
     * Validates the pipeline before sending it to the server.
     * @param {Object} pipeLine has two fields, links and nodes. Each has a single 1d array.
     */ validatePipeline = (pipeLine)=>{
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(pipeLine, "pipeLine", "object")
        ], "PipelineManager", "validatePipeline")) return;
        console.log(pipeLine);
        let valid = true;
        // TODO: Create validation function.
        if (valid) this.sendRequest(this.buildPipeJSON(pipeLine)).sendPipelineKeys(pipeLine);
        else (0, _errorHandlersJs.printErrorMessage)("invalid pipeline", `-- Pipeline Manager - validatePipeline`);
    // if valid, show success message
    // else show error modal with message containing where in the pipeline failed
    };
    /**
     * Creates an array of JSON objects to send to the server from links and nodes of the flow diagram.
     * Each object has an id, a command, next (out links), previous (in links), and an optional datavalue field.
     * @param {object {links: [], nodes: []}} pipeLine The pipeline data to build from.
     * @returns array of nodes. (DAG representation with serverside commands)
     */ buildPipeJSON = (pipeLine)=>{
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(pipeLine, "pipeLine", "object")
        ], "PipelineManager", "buildPipeJSON")) return;
        const nodeArray = [];
        if (pipeLine.nodes.length > 0) pipeLine.nodes.forEach((node)=>nodeArray.push(this.createNodeRepresentation(node, pipeLine)));
        else (0, _errorHandlersJs.printErrorMessage)("empty array", "pipeLine Node array is length 0. -- Pipeline Manager -> buildPipeJSON");
        return nodeArray;
    };
    /**
     * Creates a node representation from the pipeline. 
     * NodeRepresentation = {id: number, command: string, dataValue: number(optional), next:number[], previous:number[]}
     * @param {object} node A single Node
     * @param {object} pipeLine The entire pipeline
     * @returns the node representation object that will be sent to the server.
     */ createNodeRepresentation = (node, pipeLine)=>{
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(pipeLine, "pipeLine", "object"),
            (0, _errorHandlersJs.varTest)(node, "node", "object")
        ], "PipelineManager", "buildPipeJSON")) return;
        const nodeRepresentation = {
            id: node.module.getData("key"),
            command: node.module.getData("command"),
            dataValue: null,
            next: [],
            previous: []
        };
        this.setNodeLinks(pipeLine, node, nodeRepresentation).isNodeALocalDataSource(nodeRepresentation, node);
        return nodeRepresentation;
    };
    /**
     * Sets the in and out links from the node.
     * @param {object} pipeLine The entire pipeline (array of links and nodes)
     * @param {object} node A single node from the pipeline
     * @param {object {id: number, command: string, dataValue: number(optional), next:number[], previous:number[]}} nodeRepresentation 
     * @returns this (PipelineManager) for chaining function calls.
     */ setNodeLinks = (pipeLine, node, nodeRepresentation)=>{
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(pipeLine, "pipeLine", "object"),
            (0, _errorHandlersJs.varTest)(node, "node", "object"),
            (0, _errorHandlersJs.varTest)(nodeRepresentation, "nodeRepresentation", "object")
        ], "PipelineManager", "setNodeLinks")) return;
        pipeLine.links.forEach((link)=>{
            if (link.to === node.module.getData("key")) nodeRepresentation.previous.push(link.from);
            else if (link.from === node.module.getData("key")) nodeRepresentation.next.push(link.to);
        });
        return this;
    };
    /**
     * Checks to see if this node is a local data source meaning the data is generated on the client. If it is, it gets the command 'store this value
     * @param {object {id: number, command: string, dataValue: number(optional), next:number[], previous:number[]}} nodeRepresentation 
     * @param {object} node a single node from the pipeline
     */ isNodeALocalDataSource = (nodeRepresentation, node)=>{
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(nodeRepresentation, "nodeRepresentation", "object"),
            (0, _errorHandlersJs.varTest)(node, "node", "object")
        ], "PipelineManager", "isNodeASource")) return;
        if (nodeRepresentation.previous.length === 0) {
            if (nodeRepresentation.command === "storeThisData") nodeRepresentation.dataValue = node.module.getData("value");
        }
    };
    /**
     * Builds an array of keys. Sends the keys to the environment to turn them all gray when run button is clicked.
     * @param {object {links: [], nodes: []}} pipeLine The pipeline object.
     */ sendPipelineKeys = (pipeLine)=>{
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(pipeLine, "pipeLine", "object")
        ], "PipelineManager", "sendPipelineKeys")) return;
        const keyArray = [];
        pipeLine.nodes.forEach((node)=>keyArray.push(node.module.getData("key")));
        this.#sendMessage(new (0, _indexJs.Message)((0, _constantsJs.ENVIRONMENT), (0, _constantsJs.PIPELINE_MANAGER), "Gray Out Pipeline Event", {
            value: keyArray
        }));
    };
    /**
     * Sends a transmit pipeline event to the worker manager for transmittal to the server.
     * @param {[{id: number, command: string, dataValue: number (-1 if not using), next:[number], previous[number]}]} pipelineArray array of constructed nodes.
     * @returns this
     */ sendRequest = (pipelineArray)=>{
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(pipelineArray, "pipelineArray", "object")
        ], "PipelineManager", "sendRequest")) return undefined;
        if (pipelineArray.length > 0) this.#sendMessage(new (0, _indexJs.Message)((0, _constantsJs.WORKER_MANAGER), (0, _constantsJs.PIPELINE_MANAGER), "Transmit Pipeline Event", {
            value: pipelineArray
        }));
        else (0, _errorHandlersJs.printErrorMessage)("invalid pipeline length", `length: ${pipelineArray.length}. -- Pipeline Manager -> sendRequest`);
        return this;
    };
    printResults = (res)=>{
        console.log(res);
    };
    #sendMessage = (msg)=>{
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(msg, "msg", "object")
        ], "PipelineManager", "#sendMessage")) return undefined;
        this.publisher.publishMessage(msg);
    };
}

},{"../../communication/index.js":"eT70M","../../errorHandling/errorHandlers.js":"dxjcu","../../sharedVariables/constants.js":"dxmqI","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9nAa4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "WorkerManager", ()=>WorkerManager);
var _indexJs = require("../communication/index.js");
var _errorHandlersJs = require("../errorHandling/errorHandlers.js");
var _constantsJs = require("../sharedVariables/constants.js");
var _mainJs = require("../main.js");
class WorkerManager {
    #workers;
    publisher;
    #index;
    constructor(){
        this.publisher = new (0, _indexJs.Publisher)();
        this.#workers = new Map();
        this.#index = -1;
    }
    /**
   * Starts a new WebWorker object with clientWorker.js file.
   * @returns a newly created webWorker
   */ startWorker = ()=>{
        if (typeof Worker !== "undefined") return new Worker(require("5ae89f2602063f3a"));
        else console.log("ERROR: No Web Worker Support for this browser.");
        return undefined;
    };
    /**
   * Adds a worker to the hash table
   * @param {object (Worker)} worker the worker to add
   * @returns the id of the worker if successful
   */ addWorkerToDataTable = (worker)=>{
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(worker, "worker", "object")
        ], "WorkerManager", "addWorkerToDataTable")) return -1;
        let workerId = this.getNextIndex();
        this.#workers.set(workerId, {
            id: workerId,
            worker: worker,
            stopWorkerFunction: undefined,
            handleReturnFunction: undefined,
            returnMessageRecipient: undefined,
            returnMessage: undefined
        });
        return workerId;
    };
    /**
   * Sends a message to the worker so that it can set its id
   * @param {number} id the id of the worker
   * @returns this (workerManager) for chaining
   */ notifyWorkerOfId = (id)=>{
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(id, "id", "number")
        ], "WorkerManager", "notifyWorkerOfId")) return undefined;
        if (this.#workers.has(id)) this.#workers.get(id).worker.postMessage({
            type: "Set Worker Id",
            id: id
        });
        return this;
    };
    /**
   * Sets the callback that can stop the worker.
   * @param {number} id the worker id
   * @returns this (workerManager)for chaining
   */ setStopWorkerFunction = (id)=>{
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(id, "id", "number")
        ], "WorkerManager", "setStopWorkerFunction")) return undefined;
        if (this.#workers.has(id)) this.#workers.get(id).stopWorkerFunction = this.stopWorker;
        return this;
    };
    /**
   * Sets the callback for when server returns data.
   * @param {number} id the worker id
   * @returns this (WorkerManager) for chaining
   */ setHandleReturnFunction = (id, fn)=>{
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(id, "id", "number")
        ], "WorkerManager", "setHandleReturnFunction")) return undefined;
        if (this.#workers.has(id)) this.#workers.get(id).handleReturnFunction = fn === undefined ? this.handleReturn : fn;
        return this;
    };
    setWorkerReturnMessageRecipient = (id, recipient)=>{
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(id, "id", "number"),
            (0, _errorHandlersJs.varTest)(recipient, "recipient", "number")
        ], "WorkerManager", "setReturnMessageRecipient")) return undefined;
        if (this.#workers.has(id)) this.#workers.get(id).returnMessageRecipient = recipient;
        return this;
    };
    setWorkerReturnMessage = (id, message, moduleKey)=>{
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(id, "id", "number"),
            (0, _errorHandlersJs.varTest)(message, "message", "string"),
            (0, _errorHandlersJs.varTest)(moduleKey, "moduleKey", "number")
        ], "WorkerManager", "setReturnMessage")) return undefined;
        if (this.#workers.has(id)) {
            this.#workers.get(id).returnMessage = {
                moduleKey: moduleKey,
                message: message
            };
            return this;
        } else return undefined;
    };
    /**
   * Sets the algorithm for onmessage events.
   * @param {number} id the worker id
   * @returns this (workerManager) for chaining
   */ setWorkerMessageHandler = (id)=>{
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(id, "id", "number")
        ], "WorkerManager", "setWorkerMessageHandler")) return undefined;
        if (this.#workers.has(id)) {
            const workerObject = this.#workers.get(id);
            console.log(workerObject);
            workerObject.worker.onmessage = (event1)=>{
                switch(event1.data.type){
                    case "Text Only":
                        console.log(event1.data.data);
                        break;
                    case "Processing Complete":
                        workerObject.handleReturnFunction(event1.data.data.results, "complete");
                        workerObject.handleReturnFunction(event1.data.data.keys, "incomplete");
                        workerObject.stopWorkerFunction(id);
                        this.removeWorkerFromDataTable(id);
                        break;
                    case "Processing Incomplete":
                        workerObject.handleReturnFunction(event1.data.data, "incomplete");
                        break;
                    case "Server Return Event":
                        this.#sendMessage(new (0, _indexJs.Message)(workerObject.returnMessageRecipient, (0, _constantsJs.WORKER_MANAGER), workerObject.returnMessage.message, event1.data));
                        workerObject.stopWorkerFunction(id);
                        break;
                    case "Saved Modules Return":
                        this.#sendMessage(new (0, _indexJs.Message)(workerObject.returnMessageRecipient, (0, _constantsJs.WORKER_MANAGER), workerObject.returnMessage.message, event1.data));
                        break;
                    case "Metadata Return":
                        workerObject.handleReturnFunction(event1.data.data);
                        break;
                    case "Task Result Return":
                        workerObject.stopWorkerFunction(id);
                        break;
                    /*case 'Handle Query Return':
                        console.log(event.data);
                        const taskResult = {
                            val: {
                                queryType: event.data.queryType,
                                queryEntries: event.data.queryEntries,
                                resultData: event.data.taskResult
                            },
                            moduleKey: workerObject.returnMessage.moduleKey,
                        }
                        this.#sendMessage(new Message(workerObject.returnMessageRecipient, WORKER_MANAGER, workerObject.returnMessage.message, taskResult));
                        workerObject.stopWorkerFunction(id);
                        break;*/ case "Database Query Return":
                        console.log(event1.data);
                        const moduleData = event1.data;
                        moduleData["moduleKey"] = workerObject.returnMessage.moduleKey;
                        moduleData["sourceData"] = event1.data.sourceData;
                        //moduleData["cometOrbit"] = event.data.comet_orbit;
                        this.#sendMessage(new (0, _indexJs.Message)(workerObject.returnMessageRecipient, (0, _constantsJs.WORKER_MANAGER), workerObject.returnMessage.message, moduleData));
                        workerObject.stopWorkerFunction(id);
                        break;
                    case "Handle Fetch Error":
                        const data = {
                            moduleKey: workerObject.returnMessage.moduleKey,
                            queryType: event1.data.queryType,
                            query: event1.data.query,
                            message: event1.data.message
                        };
                        workerObject.returnMessage.message = "Handle Fetch Error";
                        this.#sendMessage(new (0, _indexJs.Message)(workerObject.returnMessageRecipient, (0, _constantsJs.WORKER_MANAGER), workerObject.returnMessage.message, data));
                        workerObject.stopWorkerFunction(id);
                        break;
                    case "Remote Dropdown Options Return":
                        const fieldName = event1.data.fieldName;
                        const fieldList = event1.data.data;
                        console.log(fieldList);
                        localStorage.setItem(`Remote Dropdown ${event1.data.fieldName}`, JSON.stringify(fieldList));
                        this.#sendMessage(new (0, _indexJs.Message)(workerObject.returnMessageRecipient, (0, _constantsJs.WORKER_MANAGER), workerObject.returnMessage.message, event1.data));
                        workerObject.stopWorkerFunction(id);
                        break;
                    case "Remote Objects Suggestions Return":
                        //console.log(event.data);
                        this.#sendMessage(new (0, _indexJs.Message)(workerObject.returnMessageRecipient, (0, _constantsJs.WORKER_MANAGER), workerObject.returnMessage.message, event1.data));
                        workerObject.stopWorkerFunction(id);
                        break;
                    case "Planet Orbits Return":
                        const response = event1.data.response;
                        console.log(event1.data);
                        if (response.status === "success") {
                            let planet_coordinates = response.planet_coordinates;
                            planet_coordinates.push(planet_coordinates[0]);
                            localStorage.setItem("Planet Orbits", JSON.stringify(planet_coordinates));
                        }
                        workerObject.stopWorkerFunction(id);
                        break;
                }
            };
        }
        return this;
    };
    /**
   * notifies worker to send a post request with pipeline data for processing
   * @param {number} id the worker id
   * @param {object (Constructed Pipeline)} pipelineArray the pipeline data
   * @returns true if successful
   */ sendPipelineToServer = (id, pipelineArray)=>{
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(id, "id", "number"),
            (0, _errorHandlersJs.varTest)(pipelineArray, "pipelineArray", "object")
        ], "WorkerManager", "sendPipelineToServer")) return false;
        if (this.#workers.has(id)) this.#workers.get(id).worker.postMessage({
            type: "Execute Pipeline",
            list: pipelineArray
        });
        console.log(pipelineArray);
        // resolve the sequence of server request here?
        return true;
    };
    requestMetadata(id, moduleName) {
        if (this.#workers.has(id)) this.#workers.get(id).worker.postMessage({
            type: "Get Metadata",
            moduleName: moduleName
        });
    }
    sendCompositeModuleInfoToServer = (id, groupInfo)=>{
        if (this.#workers.has(id)) this.#workers.get(id).worker.postMessage({
            type: "Save Module",
            groupInfo: groupInfo
        });
    };
    /**
   *
   * @param {number} id the worker id
   * @returns true if successful
   */ getObjectsFromServer = (id)=>{
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(id, "id", "number")
        ], "WorkerManager", "getObjectsFromServer")) return false;
        if (this.#workers.has(id)) {
            this.#workers.get(id).worker.postMessage({
                type: `Get Objects`
            });
            return true;
        } else return false;
    };
    /**
   *
   * @param {number} id the worker id
   * @returns true if successful
   */ getRoutesFromServer = (id)=>{
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(id, "id", "number")
        ], "WorkerManager", "getRoutesFromServer")) return false;
        if (this.#workers.has(id)) {
            this.#workers.get(id).worker.postMessage({
                type: `Get Routes`
            });
            return true;
        } else return false;
    };
    getSavedModulesFromServer = (id)=>{
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(id, "id", "number")
        ], "WorkerManager", "getSavedModulesFromServer")) return false;
        if (this.#workers.has(id)) {
            this.#workers.get(id).worker.postMessage({
                type: `Load Saved Modules`
            });
            return true;
        } else return false;
    };
    /**
   * Stops a webworker process
   * @param {number} id the id of the process to stop.
   */ stopWorker = (id)=>{
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(id, "id", "number")
        ], "WorkerManager", "stopWorker")) return false;
        if (id >= 0) {
            if (this.#workers.has(id)) this.#workers.get(id).worker.terminate();
            else console.log(`ERROR: cannot delete worker, no worker found for key: ${key}. -- WorkerManager -> stop Worker`);
        } else console.log(`ERROR: id: ${id}. -- WorkerManager -> stopWorker.`);
    };
    /**
   * Removes a worker from the hash table after it has been terminated
   * @param {number} id the id of the worker to remove
   * @returns true if successful
   */ removeWorkerFromDataTable = (id)=>{
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(id, "id", "number")
        ], "WorkerManager", "removeWorkerFromDataTable")) return false;
        if (id >= 0) {
            if (this.#workers.has(id)) this.#workers.delete(id);
            else console.log(`ERROR: cannot delete worker, no worker found for key: ${key}. -- WorkerManager -> stop Worker`);
        } else console.log(`ERROR: id: ${id}. -- WorkerManager -> stopWorker.`);
    };
    requestNewJob = (id, method, url)=>{
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(id, "id", "number")
        ], "WorkerManager", "requestNewJob")) return false;
        if (this.#workers.has(id)) {
            this.#workers.get(id).worker.postMessage({
                type: `test`,
                method: method
            });
            return true;
        } else return false;
    };
    requestMetadata(id, moduleName) {
        if (this.#workers.has(id)) {
            this.#workers.get(id).worker.postMessage({
                type: `Get Metadata`,
                moduleName: moduleName
            });
            return true;
        } else return false;
    }
    /**
   * Webworkers have a unique id. When one is created, the id is generated from this function.
   * @returns the next webworker id.
   */ getNextIndex = ()=>{
        return ++this.#index;
    };
    #sendMessage = (msg)=>{
        //console.log(msg);
        this.publisher.publishMessage(msg);
    };
    /**
   * Callback called by web workers when data is returned from the server.
   * @param {object} results Results object varies based on event status. If Complete, contains data, if incomplete, contains array of completed keys.
   */ handleReturn = (results)=>{
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(results, "results", "object"),
            (0, _errorHandlersJs.varTest)(event, "event", "string")
        ], "WorkerManager", "handleReturn")) return false;
        // let msg;
        // switch (event) {
        //     case 'complete':
        //         // msg = new Message(DATA_MANAGER, WORKER_MANAGER, 'Pipeline Return Event', { value: results });
        //         break;
        //     case 'incomplete':
        //         // sg = new Message(ENVIRONMENT, WORKER_MANAGER, 'Partial Pipeline Return Event', { value: results });
        //         break;
        //     default:
        //         console.log(`ERROR: invalid event: ${event}. -- WorkerManager -> handleReturn.`);
        //         return;
        // }
        //this.#sendMessage(msg);
        console.log(results);
    };
    // sendGetRequest(id){
    //     if (invalidVariables([varTest(id, 'id', 'number')], 'WorkerManager', 'sendGetRequest')) return false;
    //     if (this.#workers.has(id)) this.#workers.get(id).worker.postMessage({ type: 'Get Routes'});
    //     return true;
    // }
    /**
   * Kills All Outstanding webworkers.
   */ destroyAllWorkers = ()=>{
        console.log("Die Minions");
        for (let key1 of this.#workers.keys())this.stopWorker(key1);
    };
    /** Processes Search to the Database
   *
   * */ processSearch(workerId, data) {
        // post data to get taskId back
        if (this.#workers.has(workerId)) /*const entries = {};
            if (data.formdata) {
                data.formdata.forEach((value, key) => { entries[key] = value });
            }*/ this.#workers.get(workerId).worker.postMessage({
            type: "Query COMA Engine",
            remoteData: data.remoteData,
            datasetType: data.datasetType,
            queryType: data.queryType,
            queryEntries: data.queryEntries,
            responseKey: data.responseKey,
            sortBy: data.sortBy,
            columnsToRender: data.columnsToRender
        });
    }
    getObjectName(workerId, objectID) {
        if (this.#workers.has(workerId)) /*const entries = {};
            if (data.formdata) {
                data.formdata.forEach((value, key) => { entries[key] = value });
            }*/ this.#workers.get(workerId).worker.postMessage({
            type: "Get Object Name",
            objectID: objectID
        });
    }
    getRemoteDropdownOptions(workerId, data) {
        // call clientworker to query the database
        if (this.#workers.has(workerId)) this.#workers.get(workerId).worker.postMessage({
            type: "Get Remote Dropdown Options",
            data: data
        });
    }
    getRemoteObjectsSuggestions(workerId, data) {
        if (this.#workers.has(workerId)) this.#workers.get(workerId).worker.postMessage({
            type: "Get Remote Objects Suggestions",
            data: data
        });
    }
    getPlanetOrbits(workerId) {
        if (this.#workers.has(workerId)) this.#workers.get(workerId).worker.postMessage({
            type: "Get Planet Orbits"
        });
    }
}
/**
 * If user presses f, all workers are destroyed.
 */ document.addEventListener("keyup", (e)=>{
    if (e.code === "KeyF") (0, _mainJs.GM).WM.destroyAllWorkers();
});

},{"../communication/index.js":"eT70M","../errorHandling/errorHandlers.js":"dxjcu","../sharedVariables/constants.js":"dxmqI","../main.js":"1SICI","5ae89f2602063f3a":"3usXb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3usXb":[function(require,module,exports) {
let workerURL = require("48a8df92b014eeb2");
let bundleURL = require("5f6cdb4ed0303ed9");
let url = bundleURL.getBundleURL("10Mjw") + "clientWorker.c08575ca.js" + "?" + Date.now();
module.exports = workerURL(url, bundleURL.getOrigin(url), false);

},{"48a8df92b014eeb2":"cn2gM","5f6cdb4ed0303ed9":"lgJ39"}],"cn2gM":[function(require,module,exports) {
"use strict";
module.exports = function(workerUrl, origin, isESM) {
    if (origin === self.location.origin) // If the worker bundle's url is on the same origin as the document,
    // use the worker bundle's own url.
    return workerUrl;
    else {
        // Otherwise, create a blob URL which loads the worker bundle with `importScripts`.
        var source = isESM ? "import " + JSON.stringify(workerUrl) + ";" : "importScripts(" + JSON.stringify(workerUrl) + ");";
        return URL.createObjectURL(new Blob([
            source
        ], {
            type: "application/javascript"
        }));
    }
};

},{}],"lgJ39":[function(require,module,exports) {
"use strict";
var bundleURL = {};
function getBundleURLCached(id) {
    var value = bundleURL[id];
    if (!value) {
        value = getBundleURL();
        bundleURL[id] = value;
    }
    return value;
}
function getBundleURL() {
    try {
        throw new Error();
    } catch (err) {
        var matches = ("" + err.stack).match(/(https?|file|ftp|(chrome|moz|safari-web)-extension):\/\/[^)\n]+/g);
        if (matches) // The first two stack frames will be this function and getBundleURLCached.
        // Use the 3rd one, which will be a runtime in the original bundle.
        return getBaseURL(matches[2]);
    }
    return "/";
}
function getBaseURL(url) {
    return ("" + url).replace(/^((?:https?|file|ftp|(chrome|moz|safari-web)-extension):\/\/.+)\/[^/]+$/, "$1") + "/";
}
// TODO: Replace uses with `new URL(url).origin` when ie11 is no longer supported.
function getOrigin(url) {
    var matches = ("" + url).match(/(https?|file|ftp|(chrome|moz|safari-web)-extension):\/\/[^/]+/);
    if (!matches) throw new Error("Origin not found");
    return matches[0];
}
exports.getBundleURL = getBundleURLCached;
exports.getBaseURL = getBaseURL;
exports.getOrigin = getOrigin;

},{}],"fY0gk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Popup", ()=>(0, _popupJs.Popup));
parcelHelpers.export(exports, "PopupManager", ()=>(0, _popupManagerJs.PopupManager));
var _popupJs = require("./popup.js");
var _popupManagerJs = require("./popupManager.js");

},{"./popup.js":"7Q5cD","./popupManager.js":"c8UGc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"c8UGc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/* This class Manages the popup elements in the application. */ parcelHelpers.export(exports, "PopupManager", ()=>PopupManager);
var _indexJs = require("../../communication/index.js");
var _errorHandlersJs = require("../../errorHandling/errorHandlers.js");
var _indexJs1 = require("./index.js");
var _indexJs2 = require("../../sharedVariables/index.js");
class PopupManager {
    publisher;
    #popupList;
    #nonModulePopupIndex;
    #zIndex;
    constructor(){
        this.publisher = new (0, _indexJs.Publisher)();
        this.subscriber = new (0, _indexJs.Subscriber)(this.messageHandler.bind(this));
        this.#popupList = new Map(); // Popups are indexed with a module Key.
        this.#zIndex = 10001;
        this.#nonModulePopupIndex = 1000001;
        this.messageHandlerMap = new Map();
        this.buildMessageHandlerMap();
    }
    buildMessageHandlerMap() {
        this.messageHandlerMap.set("Popup Closed Event", this.closePopup.bind(this));
        this.messageHandlerMap.set("Request Z Index", this.getNextZIndex.bind(this));
    }
    messageHandler(msg) {
        const message = msg.readMessage();
        if (message.to !== (0, _indexJs2.POPUP_MANAGER)) {
            msg.updateFrom((0, _indexJs2.POPUP_MANAGER));
            this.sendMessage(msg);
        } else this.messageHandlerMap.get(message.type)(message.data);
    }
    /** Publishes a message to all subscribers 
     * @param msg -> the message to send. This is a Message object.
    */ sendMessage = (msg)=>{
        this.publisher.publishMessage(msg);
    };
    /** Creates a Module Popup. This means that the popup is populated with the module's specific content
     * as defined by its class.
     * @param {number} moduleKey -> the key of the module object. (int)
     * @param {HTML element} content -> The content to append to the popup body (html element)
     * @param {number} x -> the x position of the click that generated the popup;
     * @param {number} y -> The y position of the mouse click that generated the popup.
     */ createModulePopup = (moduleKey, content)=>{
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(moduleKey, "moduleKey", "number"),
            (0, _errorHandlersJs.varTest)(content, "content", "object")
        ], "Popup Manager", "createModulePopup")) return;
        // Only allow one popup for each module at any given time.
        if (!this.#popupList.has(moduleKey)) {
            // Check window size before building.
            let width = content.width ? content.width : 900;
            let height = content.height ? content.height : 500;
            const p = new (0, _indexJs1.Popup)(width, height, 50, 50, moduleKey, content.color, content.content, content.headerText);
            p.publisher.subscribe(this.subscriber);
            this.#popupList.set(moduleKey, {
                type: "module",
                element: p
            });
            this.sendMessage(new (0, _indexJs.Message)((0, _indexJs2.OUTPUT_MANAGER), (0, _indexJs2.POPUP_MANAGER), "Resize Popup Event", {
                moduleKey: moduleKey
            }));
        } else console.log(`ERROR: Popup already exists for moduleKey: ${moduleKey}. -- PopupManager -> createModulePopup.`);
    };
    // -- deprecated create tabs in a popup? 
    createOtherPopup = (content)=>{
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(content, "content", "object")
        ], "Popup Manager", "createOtherPopup")) return;
        const nextIndex = this.incrementNonModulePopupIndex();
        if (!this.#popupList.has(nextIndex)) {
            // Check window size before building.
            let width = 800;
            let height = 500;
            if (window.innerWidth > 2048) {
                width = 1000;
                height = 800;
            }
            const p = new (0, _indexJs1.Popup)(width, height, 0, 0, nextIndex, content.color, content.content, content.headerText);
            p.publisher.subscribe(this.subscriber);
            this.#popupList.set(nextIndex, {
                type: "other",
                element: p
            });
            this.sendMessage(new (0, _indexJs.Message)((0, _indexJs2.OUTPUT_MANAGER), (0, _indexJs2.POPUP_MANAGER), "Resize Popup Event", {
                moduleKey: nextIndex
            }));
        } else console.log(`ERROR: Popup already exists for this key: ${nextIndex}. -- PopupManager -> createModulePopup.`);
    };
    incrementNonModulePopupIndex() {
        return ++this.#nonModulePopupIndex;
    }
    /**
     * Checks to see if a popup is already open for a module.
     * @param {number} key unique identifier of the module.
     * @returns true if is open, false if not.
     */ isPopupOpen = (key)=>{
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(key, "key", "number")
        ], "PopupManager", "isPopupOpen")) return false;
        //if (this.#popupList.has(key)) return true;
        return false;
    };
    /** Gets the width of a specific popup.
     * @param {number} key the key identifying the popup. Is also the unique identifier for the module associated with the popup.
     * @return the width in pixels (number only) or -1 if no popup found.
     */ getPopupWidth = (key)=>{
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(key, "key", "number")
        ], "PopupManager", "getPopupWidth")) return -1;
        if (this.#popupList.has(key)) return this.#popupList.get(key).element.width;
        else return -1;
    };
    /** Gets the height of a specific popup.
     * @param {number} key the key identifying the popup. Is also the unique identifier for the module associated with the popup.
     * @return the height in pixels (number only) or -1 if no popup found.
     */ getPopupHeight = (key)=>{
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(key, "key", "number")
        ], "PopupManager", "getPopupHeight")) return -1;
        if (this.#popupList.has(key)) return this.#popupList.get(key).element.height - 50;
        else return -1;
    };
    setPopupDimension = (key, width, height)=>{
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(key, "key", "number")
        ], "PopupManager", "getPopupWidth")) return -1;
        if (this.#popupList.has(key)) {
            if (width) this.#popupList.get(key).element.width = width;
            if (height) this.#popupList.get(key).element.height = height;
        } else return -1;
    };
    /**
     * Gets the div representing the body of the popup.
     * @param {number} key the key identifying the popup. Is also the unique identifier for the module associated with the popup.
     * @returns the div or undefined if no div is found.
     */ getPopupBodyDiv = (key)=>{
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(key, "key", "number")
        ], "PopupManager", "getPopupBodyDiv")) return undefined;
        if (this.#popupList.has(key)) return this.#popupList.get(key).element.body;
        else return undefined;
    };
    /**
     * Clears the body of all html.
     * @param {number} key the key identifying the popup. Is also the unique identifier for the module associated with the popup.
     */ clearChart = (key)=>{
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(key, "key", "number")
        ], "PopupManager", "clearChart")) return;
        const body = this.getPopupBodyDiv(key);
        if (body.classList.contains("chartDiv")) body.querySelector(".plotly").innerHTML = "";
    };
    /** Destroys a popup (removes it from the list.)  The actual html element is removed by the 
     * popup class itself.
     * @param {Object {moduleKey: (number)}} data -> this is the index of the popup in the list. (int)
     */ destroyPopup = (data)=>{
        this.#popupList.delete(data.moduleKey);
    // destroy when module is deleted
    };
    closePopup = (data)=>{
        this.sendMessage(new (0, _indexJs.Message)((0, _indexJs2.OUTPUT_MANAGER), (0, _indexJs2.POPUP_MANAGER), "Popup Closed Event", data));
    };
    /**
     * Z index is requested by a popup. Increment Z index and pass it to the callback
     * @param {{
     *  callback: (function) the function that needs the next z index -- From a Popup}} args 
     */ getNextZIndex = (args)=>{
        args.callback(this.incrementZIndex());
    };
    incrementZIndex = ()=>this.#zIndex++;
}

},{"../../communication/index.js":"eT70M","../../errorHandling/errorHandlers.js":"dxjcu","./index.js":"fY0gk","../../sharedVariables/index.js":"1uX14","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fYnOv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ModuleSelectionMenu", ()=>(0, _moduleSelectionMenuJs.ModuleSelectionMenu));
var _moduleSelectionMenuJs = require("./moduleSelectionMenu.js");

},{"./moduleSelectionMenu.js":"47i5y","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"47i5y":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/************************************************************************************************
 * This file creates the HTML and JS interactions for the module selection menu on the left side of the UI.
 * The menu is a series of sections.
 * The outer layer is the Module Selection Menu.
 * The module top button is the heading that says Composite or source etc. This is a button that when clicked expands the sub menu.
 * Module sub menu is the inner menus that have the buttons for actually choosing a module
 * Sub menu cards are the icon and text buttons.
 */ parcelHelpers.export(exports, "ModuleSelectionMenu", ()=>ModuleSelectionMenu);
var _indexJs = require("../../sharedVariables/index.js");
var _indexJs1 = require("../../communication/index.js");
var _mainJs = require("../../main.js");
var _indexJs2 = require("../../htmlGeneration/index.js");
var _moduleDataJs = require("../../sharedVariables/moduleData.js");
const flowDiagramWhite = new URL(require("16a14a1bb332f5c4"));
class ModuleSelectionMenu {
    publisher;
    constructor(){
        this.publisher = new (0, _indexJs1.Publisher)();
        this.menuContainer = document.getElementById("moduleMenu");
        this.sourceSubMenuItems = [];
        this.processorSubMenuItems = [];
        this.outputSubMenuItems = [];
        this.compositeSubMenuItems = [];
        this.moduleTypes = [
            {
                text: "Composite",
                color: (0, _indexJs.moduleMenuColor),
                subMenuItems: this.compositeSubMenuItems,
                subMenu: null,
                buttonIcon: flowDiagramWhite
            },
            {
                text: "Source",
                color: (0, _indexJs.moduleMenuColor),
                subMenuItems: this.sourceSubMenuItems,
                subMenu: null,
                buttonIcon: "images/icons/database-storage.png"
            },
            {
                text: "Processor",
                color: (0, _indexJs.moduleMenuColor),
                subMenuItems: this.processorSubMenuItems,
                subMenu: null,
                buttonIcon: "images/icons/calculator.png"
            },
            {
                text: "Output",
                color: (0, _indexJs.moduleMenuColor),
                subMenuItems: this.outputSubMenuItems,
                subMenu: null,
                buttonIcon: "images/icons/scatter-graph.png"
            }
        ];
        this.topMenuButtonArray = [];
        this.populateMenuArrays();
    }
    populateMenuArrays() {
        (0, _moduleDataJs.moduleDataObject).forEach((e)=>{
            if (e.menuData) switch(e.menuData.category){
                case "Source":
                    this.sourceSubMenuItems.push(e.menuData);
                    break;
                case "Processor":
                    this.processorSubMenuItems.push(e.menuData);
                    break;
                case "Output":
                    this.outputSubMenuItems.push(e.menuData);
                    break;
                case "Composite":
                    this.compositeSubMenuItems.push(e.menuData);
                    break;
            }
        });
    }
    initializeMenu = ()=>{
        this.moduleTypes.forEach((m, index)=>this.instantiateMenuButton(m, index));
    };
    instantiateMenuButton = (m, index)=>{
        const button = new ModuleTopButton(m);
        if (index === 0) button.getButtonElement().classList.add("topRoundedCorners");
        else if (index === this.moduleTypes.length - 1) button.getButtonElement().classList.add("bottomRoundedCorners");
        this.topMenuButtonArray.push(button.getElement());
        this.menuContainer.append(button.getElement());
    };
    addCompositeSubMenuItem = (name)=>{
        this.compositeSubMenuItems.push({
            icon: "images/icons/flow-diagram-black.png",
            text: name,
            category: "Composite"
        });
    };
}
class ModuleTopButton {
    constructor(module){
        this.wrapperElement;
        this.buttonElement;
        this.text = module.text;
        this.color = module.color;
        this.image = module.buttonIcon;
        this.subMenu;
        this.createButton(module.subMenuItems);
    }
    createButton = (subMenuItems)=>{
        this.wrapperElement = (0, _mainJs.GM).HF.createNewDiv("module-selection-menu-wrapper", "module-selection-menu-wrapper", [
            "menuSegmentWrapper"
        ], [], [], "");
        this.buttonElement = (0, _mainJs.GM).HF.createNewDiv(`${this.text}_topMenuButton`, "", [
            "topMenuButton"
        ], [
            {
                style: "backgroundColor",
                value: this.color
            }
        ], [], "");
        this.buttonElement.append((0, _mainJs.GM).HF.createNewIMG("", "", this.image, [], [], "Submenu Icon"));
        this.buttonElement.append((0, _mainJs.GM).HF.createNewParagraph("", "", [], [], this.text));
        this.wrapperElement.append(this.buttonElement);
        this.subMenu = new ModuleSubMenu(this.text, subMenuItems);
        this.wrapperElement.append(this.subMenu.getWrapperElement());
        this.buttonElement.addEventListener("click", this.subMenu.toggleMenu);
    };
    getElement = ()=>this.wrapperElement;
    getButtonElement = ()=>this.buttonElement;
}
class ModuleSubMenu {
    constructor(name, dataArray){
        this.name = name;
        this.dataArray = dataArray;
        this.maxHeight = 0;
        this.open = false;
        this.wrapperElement;
        this.cardArray = [];
        this.createSubMenu();
    }
    createSubMenu = ()=>{
        this.maxHeight = Math.ceil(this.dataArray.length / 4) * 100 + "px";
        this.wrapperElement = (0, _mainJs.GM).HF.createNewDiv("msm-submenu-wrapper", "msm-submenu-wrapper", [
            "subMenuWrapper"
        ], [], [], "");
        this.dataArray.forEach((e)=>{
            const card = new SubMenuCard(e);
            this.cardArray.push(card);
            this.wrapperElement.append(card.getElement());
        });
    };
    toggleMenu = ()=>{
        const height = this.open ? 0 : this.maxHeight;
        const paddingTop = this.open ? "0%" : "1%";
        const paddingBottom = this.open ? "0%" : "1%";
        this.open = !this.open;
        (0, _indexJs2.HTMLFactory).setCustomStyles(this.wrapperElement, [
            {
                style: "height",
                value: height
            },
            {
                style: "paddingTop",
                value: paddingTop
            },
            {
                style: "paddingBottom",
                value: paddingBottom
            }
        ]);
    };
    getWrapperElement = ()=>{
        return this.wrapperElement;
    };
}
class SubMenuCard {
    constructor(data){
        this.icon = data.icon;
        this.text = data.text;
        this.category = data.category;
        this.element;
        this.textArea;
        this.image;
        this.createCard();
    }
    createCard = ()=>{
        this.element = (0, _mainJs.GM).HF.createNewDiv("", "", [
            "menuIconCard"
        ], [], [], "");
        this.image = (0, _mainJs.GM).HF.createNewIMG("", "", this.icon, [], [], "menu icon");
        this.element.appendChild(this.image);
        this.textArea = (0, _mainJs.GM).HF.createNewParagraph("", "", [
            "iconText"
        ], [], this.text);
        this.element.appendChild(this.textArea);
        this.element.addEventListener("click", this.clickHandler);
    };
    getElement = ()=>{
        return this.element;
    };
    clickHandler = ()=>{
        if (this.category === "Composite") this.createCompositeModel();
        else this.createNonCompositeModel();
    };
    createCompositeModel() {
        const data = {
            moduleName: this.text,
            moduleCategory: this.category,
            type: "composite"
        };
        const msg = new (0, _indexJs1.Message)((0, _indexJs.MODULE_MANAGER), (0, _indexJs.MODULE_SELECTION_MENU), "Deploy Module Event", data);
        this.#sendMessage(msg);
    }
    createNonCompositeModel() {
        const data = {
            moduleName: this.text,
            moduleCategory: this.category,
            type: "non-composite"
        };
        const msg = new (0, _indexJs1.Message)((0, _indexJs.MODULE_MANAGER), (0, _indexJs.MODULE_SELECTION_MENU), "Deploy Module Event", data);
        this.#sendMessage(msg);
    }
    #sendMessage = (msg)=>{
        (0, _mainJs.GM).MSM.publisher.publishMessage(msg);
    };
}

},{"../../sharedVariables/index.js":"1uX14","../../communication/index.js":"eT70M","../../main.js":"1SICI","../../htmlGeneration/index.js":"f3jdF","../../sharedVariables/moduleData.js":"87R3y","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3","16a14a1bb332f5c4":"3yiox"}],"3yiox":[function(require,module,exports) {
module.exports = require("2ff0e9c599799434").getBundleURL("10Mjw") + "flow-diagram-white.97130cbb.png" + "?" + Date.now();

},{"2ff0e9c599799434":"lgJ39"}],"2dJqk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../communication/index.js");
var _mainJs = require("../main.js");
var _constantsJs = require("../sharedVariables/constants.js");
var _errorHandlersJs = require("../errorHandling/errorHandlers.js");
var _formatValuesJs = require("../sharedVariables/formatValues.js");
var _moduleDataJs = require("../sharedVariables/moduleData.js");
class Hub {
    publisher;
    subscriber;
    GM;
    #messageHandlerMap;
    #messageForOutputManager;
    #messageForDataManager;
    #messageForWorkerManager;
    #messageForInputManager;
    #messageForPopupManager;
    #messageForInspector;
    #messageForModuleManager;
    #messageForEnvironment;
    constructor(){
        this.publisher = new (0, _indexJs.Publisher)();
        this.subscriber = new (0, _indexJs.Subscriber)(this.messageHandler);
        this.#messageHandlerMap = new Map();
        this.#buildMessageHandlerMap();
    }
    #buildMessageHandlerMap() {
        this.#messageForOutputManager = new Map();
        this.#buildMessageForOutputManagerMap();
        this.#messageForDataManager = new Map();
        this.#buildMessageForDataManagerMap();
        this.#messageForWorkerManager = new Map();
        this.#buildMessageForWorkerManagerMap();
        this.#messageForInputManager = new Map();
        this.#buildMessageForInputManager();
        this.#messageForPopupManager = new Map();
        this.#buildMessageForPopupManager();
        this.#messageForInspector = new Map();
        this.#buildMessageForInspector();
        this.#messageForModuleManager = new Map();
        this.#buildMessageForModuleManager();
        this.#messageForEnvironment = new Map();
        this.#buildMessageForEnvironment();
        this.#messageHandlerMap.set((0, _constantsJs.ENVIRONMENT), this.#messageForEnvironment);
        this.#messageHandlerMap.set((0, _constantsJs.MODULE_MANAGER), this.#messageForModuleManager);
        this.#messageHandlerMap.set((0, _constantsJs.INSPECTOR), this.#messageForInspector);
        this.#messageHandlerMap.set((0, _constantsJs.POPUP_MANAGER), this.#messageForPopupManager);
        this.#messageHandlerMap.set((0, _constantsJs.INPUT_MANAGER), this.#messageForInputManager);
        this.#messageHandlerMap.set((0, _constantsJs.DATA_MANAGER), this.#messageForDataManager);
        this.#messageHandlerMap.set((0, _constantsJs.WORKER_MANAGER), this.#messageForWorkerManager);
        this.#messageHandlerMap.set((0, _constantsJs.OUTPUT_MANAGER), this.#messageForOutputManager);
    }
    /* All Messages from one component to another are handled here. The proper manager is notified through
    the Global Manager. */ messageHandler = (msg)=>{
        const msgContents = msg.readMessage();
        console.log(msgContents.type); // Console Log All Events for Debugging.
        if (this.#messageHandlerMap.has(msgContents.to)) {
            if (this.#messageHandlerMap.get(msgContents.to).has(msgContents.type)) this.#messageHandlerMap.get(msgContents.to).get(msgContents.type)(msgContents.data);
        } else console.log("Cannot Read Message to " + msgContents.to);
    };
    /** Hub subscribes */ subscribe = ()=>{
        (0, _mainJs.GM).ENV.publisher.subscribe(this.subscriber);
        (0, _mainJs.GM).DM.publisher.subscribe(this.subscriber);
        (0, _mainJs.GM).MM.publisher.subscribe(this.subscriber);
        (0, _mainJs.GM).INS.publisher.subscribe(this.subscriber);
        (0, _mainJs.GM).IM.publisher.subscribe(this.subscriber);
        (0, _mainJs.GM).PLM.publisher.subscribe(this.subscriber);
        (0, _mainJs.GM).OM.publisher.subscribe(this.subscriber);
        (0, _mainJs.GM).WM.publisher.subscribe(this.subscriber);
        (0, _mainJs.GM).PM.publisher.subscribe(this.subscriber);
        (0, _mainJs.GM).DOM.publisher.subscribe(this.subscriber);
    };
    #buildMessageForEnvironment() {
        this.#messageForEnvironment.set("Create Composite Group Event", this.#createCompositeGroupEvent.bind(this));
        this.#messageForEnvironment.set("Draw Link Event", this.#drawLinkEvent.bind(this));
        this.#messageForEnvironment.set("Gray Out Pipeline Event", this.#grayOutPipelineEvent.bind(this));
        this.#messageForEnvironment.set("Partial Pipeline Return Event", this.partialPipelineReturnEvent.bind(this));
        this.#messageForEnvironment.set("Request Module Key Event", this.#requestModuleKeyEvent.bind(this));
        this.#messageForEnvironment.set("Start Environment Event", this.#startEnvironmentEvent.bind(this));
        this.#messageForEnvironment.set("New Module Created Event", this.#newModuleCreatedEvent.bind(this));
    }
    #buildMessageForModuleManager() {
        this.#messageForModuleManager.set("Saved Modules Loaded Event", this.#savedModulesLoadedEvent.bind(this));
        this.#messageForModuleManager.set("New Group Created", this.#newGroupCreated.bind(this));
        this.#messageForModuleManager.set("Nodes Deleted Event", this.#nodesDeletedEvent.bind(this));
        this.#messageForModuleManager.set("Link Drawn Event", this.#linkDrawnEvent.bind(this));
        this.#messageForModuleManager.set("Set Search Result Content", this.#setSearchResultContent.bind(this));
        this.#messageForModuleManager.set("Handle Fetch Error", this.#handleFetchError.bind(this));
        this.#messageForModuleManager.set("Set Module Data Event", this.#setModuleDataEvent.bind(this));
        this.#messageForModuleManager.set("Toggle Module Color Event", this.#toggleModuleColorEvent.bind(this));
        this.#messageForModuleManager.set("Update Inspector Card Event", this.#updateInspectorCardEvent.bind(this));
    }
    #buildMessageForInspector() {
        this.#messageForInspector.set("Publish Module Inspector Card Event", this.#publishModuleInspectorCardEvent.bind(this));
        this.#messageForInspector.set("Node Selected Event", this.#nodeSelectedEvent.bind(this));
        this.#messageForInspector.set("Minimize Card Event", this.#minimizeCardsEvent.bind(this));
        this.#messageForInspector.set("Maximize Card Event", this.#maximizeCardEvent.bind(this));
        this.#messageForInspector.set("Set Remote Dropdown Options", this.#setRemoteDropdownOptions.bind(this));
        this.#messageForInspector.set("Set Remote Objects Suggestions", this.#setRemoteObjectsSuggestions.bind(this));
    }
    #buildMessageForInputManager() {
        this.#messageForInputManager.set("Request List Of Objects Event", this.#requestListOfObjectsEvent.bind(this));
        this.#messageForInputManager.set("Objects Loaded Event", this.#objectsLoadedEvent.bind(this));
        this.#messageForInputManager.set("Routes Loaded Event", this.#routesLoadedEvent.bind(this));
        this.#messageForInputManager.set("Read File Event", this.#readFileEvent.bind(this));
        this.#messageForInputManager.set("Search Form Submit Event", this.#searchFormSubmit.bind(this));
        this.#messageForInputManager.set("Fetch Local Table Data Event", this.#fetchLocalTableDataEvent.bind(this));
        this.#messageForInputManager.set("Fetch Local Chart Data Event", this.#fetchLocalChartDataEvent.bind(this));
        this.#messageForInputManager.set("Prep Filter Data Event", this.#prepFilterDataEvent.bind(this));
        this.#messageForInputManager.set("Prep Table Data Event", this.#prepTableDataEvent.bind(this));
        this.#messageForInputManager.set("Prep Chart Data Event", this.#prepChartDataEvent.bind(this));
        this.#messageForInputManager.set("Prep Orbit Data Event", this.#prepOrbitDataEvent.bind(this));
        this.#messageForInputManager.set("Get Object Orbits Event", this.#getObjectOrbitsDataEvent.bind(this));
        this.#messageForInputManager.set("Prep Object Images Event", this.#prepObjectImagesEvent.bind(this));
    }
    #buildMessageForWorkerManagerMap() {
        this.#messageForWorkerManager.set("Transmit Pipeline Event", this.#transmitPipelineEvent.bind(this));
        this.#messageForWorkerManager.set("Save Composite Module Event", this.#saveCompositeModuleEvent.bind(this));
        this.#messageForWorkerManager.set("Get Remote Dropdown Options", this.#getRemoteDropdownOptions.bind(this));
        this.#messageForWorkerManager.set("Get Remote Objects Suggestions", this.#getRemoteObjectsSuggestions.bind(this));
        this.#messageForWorkerManager.set("Fetch Remote Table Data Event", this.#fetchRemoteTableDataEvent.bind(this));
        this.#messageForWorkerManager.set("Get Planet Orbits Event", this.#getPlanetOrbitsDataEvent.bind(this));
    }
    #buildMessageForPopupManager() {
        this.#messageForPopupManager.set("Publish Module Popup Event", this.#publishModulePopupEvent.bind(this));
        this.#messageForPopupManager.set("Create Save Composite Popup Event", this.#createSaveCompositePopupEvent.bind(this));
        this.#messageForPopupManager.set("Double Click Event", this.#doubleClickEvent.bind(this));
    }
    #buildMessageForDataManagerMap() {
        this.#messageForDataManager.set("Pipeline Return Event", this.pipelineReturnEvent.bind(this));
        this.#messageForDataManager.set("New Data Event", this.#newDataEvent.bind(this));
        this.#messageForDataManager.set("New Filter Applied Event", this.#newFilterAppliedEvent.bind(this));
        this.#messageForDataManager.set("Data Conversion Event", this.#dataConversionEvent.bind(this));
        this.#messageForDataManager.set("Data Type Change Event", this.#dataTypeChangeEvent.bind(this));
    }
    #buildMessageForOutputManagerMap() {
        this.#messageForOutputManager.set("Create New CSV File Event", this.#createNewCSVFileEvent.bind(this));
        this.#messageForOutputManager.set("Create New Local Table Event", this.#createNewLocalTableEvent.bind(this));
        this.#messageForOutputManager.set("Create New Local Chart Event", this.#createNewLocalChartEvent.bind(this));
        this.#messageForOutputManager.set("Change EChart Theme Event", this.#eChartThemeEvent.bind(this));
        this.#messageForOutputManager.set("Popup Closed Event", this.#popupClosedEvent.bind(this));
        this.#messageForOutputManager.set("Resize Popup Event", this.#resizePopupEvent.bind(this));
        //this.#messageForOutputManager.set('New Table Event', this.#newTableEvent.bind(this));
        this.#messageForOutputManager.set("Set New Table Event", this.#setNewTableEvent.bind(this));
        this.#messageForOutputManager.set("Set New Chart Event", this.#setNewChartEvent.bind(this));
        this.#messageForOutputManager.set("Set New Orbit Event", this.#setNewOrbitEvent.bind(this));
        this.#messageForOutputManager.set("Set New Images Event", this.#setNewImagesEvent.bind(this));
    }
    /** --- PRIVATE --- MESSAGE FOR ENVIRONMENT
     * Called when a new module is created by the ModuleGenerator. This notifies the Environment to insert
     * a new GOJS node into the graph environment. If the module requires metadata from the server, this function
     * notifies the WorkerManager to request it.
     * @param {{
     * groupkey (Number): Identifies a group of nodes. Will be undefined if there is no group.
     * module (Module): The new Module object.
     * templateExists (boolean): True if the Envrionment already has a template to build from. False if it
     *                           has to create a new template, ie. this is the first model of this type made.
     * }} data 
     * @returns 
     */ #newModuleCreatedEvent(data) {
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(data.module, "module", "object"),
            (0, _errorHandlersJs.varTest)(data.templateExists, "templateExists", "boolean")
        ], "HUB", "#messageForEnvironment (New Module Created Event)")) return;
        console.log(data);
        var moduleKey = data.module.getData("key");
        (0, _mainJs.GM).ENV.insertModule(data.module, data.templateExists, data.groupKey);
        try {
            var callOnCreation = data.module.getData("callOnCreationFunction");
            if (callOnCreation === true) //this.#makeMetadataRequest(this.#getNewWorkerIndex(), data.module.getData('name'), data.module.getData('onCreationFunction'));
            data.module.onCreation();
        } catch (e) {
            console.log(e);
        }
        this.#maximizeCardEvent({
            id: moduleKey
        });
    }
    /** --- PRIVATE --- MESSAGE FOR ENVIRONMENT
     * Called at application start. Creates the GOJS enviromnet.
     * @param {*} data The paramater is not actually used by the function. 
     */ #startEnvironmentEvent(data) {
        try {
            (0, _mainJs.GM).ENV.setUpEnvironment();
        } catch (e) {
            console.log("FAILED TO SET UP GOJS ENVIRONMENT");
            console.log(e);
        }
    }
    /** --- PRIVATE --- MESSAGE FOR ENVIRONMENT
     * When a module is created in the ModuleGenerator, the module manager requests a key from the Environment.
     * The keys is passed back to the ModuleManager through a callback.
     * @param {{
     * name (string): Name of module i.e. CSV File
     * category (string): category of the module. ie. Source
     * cb (function): the callback function
     * groupKey (Number): identifies a module group. (will be undefined if this is not part of a group)
     * oldKey (Number): if a module is loaded from a saved prefab, it will have an old key associated. This will be rewritten
     *                  but is necessary to identify node when first created. (will be undefined otherwise)
     * }} data 
     * @returns 
     */ #requestModuleKeyEvent(data) {
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(data.cb, "cb", "function"),
            (0, _errorHandlersJs.varTest)(data.name, "name", "string"),
            (0, _errorHandlersJs.varTest)(data.category, "category", "string")
        ], "HUB", "#messageForEnvironment (Request Module Key Event")) return;
        data.cb(data.name, data.category, (0, _mainJs.GM).ENV.getNextNodeKey(), data.oldKey, data.groupKey);
    }
    /** --- PUBLIC --- MESSAGE FOR ENVIRONMENT
     * This function was used for testing to update the graph as individual nodes were processed on the server.
     * Depending on implementation, this may be depricated.
     * @param {*} data 
     * @returns 
     */ partialPipelineReturnEvent(data) {
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(data.value, "value", "object")
        ], "HUB", "#messageForEnvironment (Partial Pipeline Return Event")) return;
        (0, _mainJs.GM).ENV.updatePipelineProgress(data.value);
    }
    /** --- PRIVATE --- MESSAGE FOR ENVIRONMENT
     * This turns the environment gray to show that the request has been sent to the server.
     * @param {Number[]} data.value array of keys to gray out.
     */ #grayOutPipelineEvent(data) {
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(data.value, "value", "object")
        ], "HUB", "#messageForEnvironment (Gray Out Pipeline Event")) return;
        else (0, _mainJs.GM).ENV.grayOutPipeline(data.value);
    }
    /** --- PRIVATE --- MESSAGE FOR ENVIRONMENT
     * Draws a link programatically between two nodes. 
     * @param {{
     * from (Number): id of the origin of the link.
     * to (Number): id of the recipient of the link.
     * }} data 
     */ #drawLinkEvent(data) {
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(data.from, "from", "number"),
            (0, _errorHandlersJs.varTest)(data.to, "to", "number")
        ], "HUB", "#messageForEnvironment (Draw Link Event")) return;
        (0, _mainJs.GM).ENV.drawLinkBetweenNodes(data.from, data.to);
    }
    /** --- PRIVATE --- MESSAGE FOR ENVIRONMENT
     * Called when a prefab (saved) composite node is created by the module generator.
     * @param {{
     * name (string): the name of the group node 
     * callback (function): ModuleManager callback function that processes the group node.
     * }} data
     */ #createCompositeGroupEvent(data) {
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(data.callback, "callback", "function")
        ], "HUB", "#messageForEnivonment (Create Composite Group Event")) return;
        data.callback((0, _mainJs.GM).ENV.createNewGroupNode(), data.name);
    }
    /** --- PRIVATE --- MESSAGE FOR MODULE MANAGER
     * Called when a new link is drawn. Checks if Module needs to be updated with data information or metadata information.
     * @param {{
     * event (string): 'LinkDrawn',
     * fromNodeKey (Number): Origin of the link
     * toNodeKey (Number) : End of the link
     * }} data
     */ #linkDrawnEvent(data) {
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(data.fromNodeKey, "fromNodeKey", "number")
        ], "HUB", "#messageForEnvironment (Link Drawn Event)")) return;
        const toNodetype = (0, _mainJs.GM).MM.getModule(data.toNodeKey).getData("type").toLowerCase();
        //const linked = GM.MM.checkForNewDataLink(data.toNodeKey, data.fromNodeKey);
        //const containsMetadata = GM.MM.checkForMetadataLink(data.fromNodeKey);
        console.log(toNodetype);
        // Processors are handled differently......................not needed?
        //if (linkedToData && type !== 'processor') this.#processNewDataLink(data.toNodeKey, data.fromNodeKey);
        /*if (toNodetype == 'output' || toNodetype == 'processor') {
            this.#processNewOutputLink(data.fromNodeKey, data.toNodeKey);
        }*/ this.#updateToModuleInspectorCardContent(data.fromNodeKey, data.toNodeKey);
    // type = processor same as above...?
    //else if (containsMetadata) this.#processMetadataLink(data.toNodeKey, data.fromNodeKey);
    // If this is a local Data connection, the Module Manager will update modules.
    //GM.MM.handleLocalDataConnection(data.toNodeKey, data.fromNodeKey);
    }
    /** --- PRIVATE ---
    * This is called by linkDrawnEvent when a new link is drawn between two modules (previous to next).
    * This function updates the inspector card content of toModule, which a link was drawn to.
    * @param {Number} fromKey Key to recipient of the link.
    * @param {Number} toKey Key to node that originated the link
    */ #updateToModuleInspectorCardContent(fromKey, toKey) {
        const fromModule = (0, _mainJs.GM).MM.getModule(fromKey);
        const fromModuleType = fromModule.getData("type").toLowerCase();
        const toModule = (0, _mainJs.GM).MM.getModule(toKey);
        if (fromModuleType === "source") {
            var fromModuleData = fromModule.getData("moduleData");
            console.log(fromModuleData);
            // prepInspectorCardData sets the toModuleData from fromModuleData
            toModule.prepInspectorCardData(toKey, fromModuleData, fromKey);
            // The content of the moduleData parameter differs from module to module.
            toModule.updateInspectorCard();
            /*const toModuleName = toModule.getData('type').toLowerCase();
            switch (toModuleName) {
                case 'output':
                    var fromModuleData = fromModule.getData('moduleData');
                    console.log(fromModuleData);
                    // prepInspectorCardData sets the toModuleData from fromModuleData
                    toModule.prepInspectorCardData(toModule.getData('key'), fromModuleData, fromKey);

                    // The content of the moduleData parameter differs from module to module.
                    toModule.updateInspectorCard();

                    break;
                default:
                    console.log(toModuleName);
            }*/ // select the output node
            this.#nodeSelectedEvent({
                moduleKey: toKey
            });
        }
    }
    /** --- PRIVATE ---
     * This is called by linkDrawnEvent when a new link is drawn between Source/Processor module and an Output Module.
     * @param {Number} fromKey Key to recipient of the link.
     * @param {Number} toKey Key to node that originated the link
     */ #processNewOutputLink(fromKey, toKey) {
        const fromModule = (0, _mainJs.GM).MM.getModule(fromKey);
        const fromModuleType = fromModule.getData("type").toLowerCase();
        const toModule = (0, _mainJs.GM).MM.getModule(toKey);
        if (fromModuleType === "source") {
            const toModuleName = toModule.getData("type").toLowerCase();
            switch(toModuleName){
                case "output":
                    var fromModuleData = fromModule.getData("moduleData");
                    console.log(fromModuleData);
                    // prepInspectorCardData sets the toModuleData from fromModuleData
                    toModule.prepInspectorCardData(toModule.getData("key"), fromModuleData, fromKey);
                    // The content of the moduleData parameter differs from module to module.
                    toModule.updateInspectorCard();
                    break;
                default:
                    console.log(toModuleName);
            }
            // select the output node
            this.#nodeSelectedEvent({
                moduleKey: toKey
            });
        }
    // if fromModule is processor module
    //toModule.updateInspectorCardWithNewData(dataKey, dataSet.data.getHeaders()); // old
    }
    /** --- PRIVATE --- CALLED LOCALLY
     * This is called by linkDrawnEvent when a new link is drawn between a local data module and an 
     * Output Module.
     * @param {Number} toKey Key to node that originated the link
     * @param {Number} fromKey Key to recipient of the link.
     */ #processNewDataLink(toKey, fromKey) {
        const toModule = (0, _mainJs.GM).MM.getModule(toKey);
        const type = toModule.getData("type").toLowerCase();
        //const linkedToData = toModule.getData('linkedToData');
        const dataModule = (0, _mainJs.GM).MM.getModule(fromKey);
        const dataKey = dataModule.getData("dataKey");
        const dataSet = (0, _mainJs.GM).DM.getData(dataKey);
        if (type === "output") (0, _mainJs.GM).MM.updateDynamicInspectorCardField(toKey, "Data Linked", true);
        // this is specifically for chart modules
        toModule.updateInspectorCardWithNewData(dataKey, dataSet.data.getHeaders());
        if (toModule.storeTableHeaders) {
            const headers = dataSet.data.getHeaders();
            toModule.storeTableHeaders(headers);
        }
    }
    /** --- PRIVATE --- CALLED LOCALLY
     * This is called after confirming that there is a new metadata link in the Link Drawn Event.
     * Passes the metadata to the newly linked module by invoking the Module Manager.
     * @param {Number} toKey
     * @param {Number} fromKey
     */ #processMetadataLink(toKey, fromKey) {
        const metadata = (0, _mainJs.GM).MM.getModule(fromKey).getData("metadata");
        (0, _mainJs.GM).MM.getModule(toKey).processMetadata(metadata);
    }
    /** --- PRIVATE --- MESSAGE FOR MODULE MANAGER
     * Called when user deletes a module manually.
     * @param {Number[]} data an array of keys to delete. 
     */ #nodesDeletedEvent(data) {
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(data, "data", "object")
        ], "HUB", "Nodes Deleted Event")) return;
        data.forEach((key)=>{
            (0, _mainJs.GM).MM.removeModule(key);
            (0, _mainJs.GM).OM.removeOutputData(key); // Remove any saved chart information
        });
    }
    /** --- PRIVATE --- MESSAGE FOR MODULE MANAGER
     * @param {{
     * groupDiagram: {
     *         nodes (array of {type: (module name), name: (module category), key (number)}
     *         links (array of links)
     *     }
     * groupKey (number): key identifying the group.
     * }} data
     */ #newGroupCreated(data) {
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(data.groupDiagram, "groupDiagram", "object"),
            (0, _errorHandlersJs.varTest)(data.groupKey, "groupKey", "number")
        ], "HUB", "#messageForModuleManager (New Group Created)")) return;
        const module = (0, _mainJs.GM).MM.createNewCompositeModule(data.groupKey, data.groupDiagram);
        module.inspectorCardMaker.createInspectorCompositeDetailCard(data.groupDiagram, module.saveModule.bind(module));
    }
    /** --- PRIVATE --- MESSAGE FOR MODULE MANAGER
     * Called when WebWorker returns with saved data. (This is all done locally on the node server and will have
     * to be rewritten when we have access to the database.)
     * @param {{
     * clientId (Number): id returned from the server. Used by the webworker
     * data (Object): data for all of the modules. Contains links, nodes, description, name
     * type (String): Identifies the type of server return. Used by the webworker
     * }} data 
     */ #savedModulesLoadedEvent(data) {
        if (data.data !== "No Saved Modules Found") Object.entries(data.data).forEach((module)=>{
            // Module[0] is the name, Module[1] is the module data.
            (0, _mainJs.GM).MM.storeCompositePrefabData(module[0], module[1]);
            (0, _mainJs.GM).MSM.addCompositeSubMenuItem(module[0]);
        });
        (0, _mainJs.GM).MSM.initializeMenu(); // Now that the composite modules have returned, build the Module Selection Menu.
    }
    /** --- PRIVATE --- MESSAGE FOR INSPECTOR
     * Hides all cards, them maximizes the inspector card of the node that was clicked in the Environment
     * @param {{moduleKey (number): key of the module clicked}} data 
     */ #nodeSelectedEvent(data) {
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(data.moduleKey, "moduleKey", "number")
        ], "HUB", "#messageForInspector (Node Selected Event.)")) return;
        (0, _mainJs.GM).MM.collapseAllInspectorCards();
        (0, _mainJs.GM).MM.getModule(data.moduleKey).getInspectorCard().maximizeCardEnvironmentClick();
    }
    /** --- PRIVATE --- MESSAGE FOR INSPECTOR
     * minimizes all inspector cards */ #minimizeCardsEvent() {
        (0, _mainJs.GM).INS.minimizeCards();
    }
    /** --- PRIVATE --- MESSAGE FOR INSPECTOR
     * Maximizes a single card
     * @param {id (number): id of the module to maximize}
     */ #maximizeCardEvent(data) {
        (0, _mainJs.GM).INS.maximizeCard(data.id);
    }
    /** --- PRIVATE --- MESSAGE FOR INSPECTOR
     * Passes the HTML data for an inspector card when a module is created.
     * @param {{
     * card (HTML Div): contains the HTML to inject 
     * moduleKey (Number): the key the module whose card to publish
     * }} data 
     */ #publishModuleInspectorCardEvent(data) {
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(data.moduleKey, "moduleKey", "number"),
            (0, _errorHandlersJs.varTest)(data.card, "card", "object")
        ], "HUB", "#messageForInspector (publish Module Card Event")) return;
        (0, _mainJs.GM).INS.addModuleCard(data.moduleKey, data.card);
    }
    /** --- PRIVATE --- MESSAGE FOR Popup Manager
     * Passes the HTML data for a popup when a module is created.
     * @param {moduleKey} (Number): the key of the module whose popup to publish
     * @param {content} (Object): the object { color, popupContent, headerText } of the Popup to publish
     * }} data 
     */ #publishModulePopupEvent(data) {
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(data.moduleKey, "moduleKey", "number"),
            (0, _errorHandlersJs.varTest)(data.content, "content", "object")
        ], "HUB", "#messageForInspector (publish Module Card Event")) return;
        (0, _mainJs.GM).PM.createModulePopup(data.moduleKey, data.content);
    }
    /** --- PRIVATE --- MESSAGE FOR POPUP MANAGER
     * Generates popup when a Environment graph node is double-clicked.
     * Currently the system just loads the popup to point (0,0)
     * @param {{
     * moduleKey (Number): the id of the module clicked
     * x (Number): the x position of the click (not currently working)
     * y (Number): the y position of the click (not currently working)
     * }} data 
     */ #doubleClickEvent(data) {
        (0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(data.moduleKey, "moduleKey", "number"),
            (0, _errorHandlersJs.varTest)(data.x, "x", "number"),
            (0, _errorHandlersJs.varTest)(data.y, "y", "number")
        ], "HUB", "#messageForPopupManager (double click event)");
        this.#openModulePopup(data.moduleKey, data.x, data.y);
    }
    /** --- PRIVATE --- MESSAGE FOR POPUP MANAGER
     * Creates the popup for saving a module with Module name and description fields.
     * @param {{
     * color (string): hex color for the popup header.
     * content (HTML div): the content to displace.
     * headerText (string): text to display in the popup header.
     * }} data 
     */ #createSaveCompositePopupEvent(data) {
        console.log(data);
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(data.content, "content", "object"),
            (0, _errorHandlersJs.varTest)(data.color, "color", "string"),
            (0, _errorHandlersJs.varTest)(data.headerText, "headerText", "string")
        ], "HUB", "#messageForPopupManager (Create Save Composite Popup Event)")) return;
        (0, _mainJs.GM).PM.createOtherPopup(data);
    }
    /** --- PRIVATE --- MESSAGE FOR INPUT MANAGER
     * 
     * @param {{
     * moduleKey (Number): the key to the source module 
     * path (string): the id of HTML element that generates the upload.
     * source (string): html
     * type (string): the type of file ie. csv
     * }} data 
     */ #readFileEvent(data) {
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(data.fileType, "fileType", "string"),
            (0, _errorHandlersJs.varTest)(data.moduleKey, "moduleKey", "number")
        ], "HUB", "#messageForInputManager (Read File Event)")) return;
        // validateFile function and sets moduleData
        (0, _mainJs.GM).IM.readFile(data.moduleKey, data.fileId, data.fileType, data.objectName);
    }
    #setModuleDataEvent(data) {
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(data.moduleKey, "moduleKey", "number"),
            (0, _errorHandlersJs.varTest)(data.moduleData, "moduleData", "object"),
            (0, _errorHandlersJs.varTest)(data.toggleModuleColor, "toggleModuleColor", "boolean")
        ], "HUB", "#messageForModuleManager (Set Module Data Event)")) return;
        var module = (0, _mainJs.GM).MM.getModule(data.moduleKey);
        console.log(data);
        var processed = false;
        if (data.moduleData) {
            module.addData("moduleData", data.moduleData);
            processed = true;
            //console.log(module);
            if (data.toggleModuleColor) this.#toggleModuleColorEvent(data.moduleKey, processed);
        } else module.removeData("moduleData");
        return processed;
    }
    #toggleModuleColorEvent(moduleKey, processed) {
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(moduleKey, "moduleKey", "number"),
            (0, _errorHandlersJs.varTest)(processed, "processed", "boolean")
        ], "HUB", "#toggleModuleColorEvent (Toggle Module Color Event)")) return;
        // toggle module color and inspector/popup header color
        (0, _mainJs.GM).ENV.toggleNodeColor(moduleKey, processed);
        (0, _mainJs.GM).MM.toggleHeaderColor(moduleKey, processed);
    }
    #updateInspectorCardEvent(data) {
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(data.moduleKey, "moduleKey", "number"),
            (0, _errorHandlersJs.varTest)(data.moduleData, "moduleData", "object")
        ], "HUB", "#messageForModuleManager (Update Inspector Card Event)")) return;
        var module = (0, _mainJs.GM).MM.getModule(data.moduleKey);
        module.updateInspectorCard();
    }
    //*************** search form */
    //-------------------------------------- .. use prepworker event.. from Worker manager
    #searchFormSubmit(data) {
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(data.moduleKey, "moduleKey", "number"),
            (0, _errorHandlersJs.varTest)(data.queryType, "queryEntries", "string"),
            (0, _errorHandlersJs.varTest)(data.queryEntries, "queryEntries", "object")
        ], "HUB", "#messageForInputManager (Search Form Submit Event)")) return;
        const workerId = this.#getNewWorkerIndex();
        this.#prepWorker(workerId, (0, _constantsJs.MODULE_MANAGER), "Set Search Result Content", data.moduleKey).processSearch(workerId, data);
    }
    #handleFetchError(data) {
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(data.moduleKey, "moduleKey", "number"),
            (0, _errorHandlersJs.varTest)(data.query, "query", "object"),
            (0, _errorHandlersJs.varTest)(data.message, "message", "object")
        ], "HUB", "#messageForPopupManager (Handle Fetch Error)")) return;
        console.log(data);
        var resultData = {
            query: data.query,
            detail: data.message
        };
        (0, _mainJs.GM).MM.updatePopupContent(data.moduleKey, "error", resultData);
        // do prepworker
        // Open popup if not opened yet
        if (!(0, _mainJs.GM).PM.isPopupOpen(data.moduleKey)) this.#openModulePopup(data.moduleKey, 0, 0);
    }
    /***************** Mai 022823 ******************/ ////////////////////////////////////////////////////////// ------------- REWRITE THIS FUNCTION TO REUSE SetModuleData func in the hub
    /*
     * Updates a popup content for this search module with the search result
     *  @param {number} data.moduleKey
     *  @param {Object} data.val query entries and search taskResult data
     * */ async #setSearchResultContent(data) {
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(data.moduleKey, "moduleKey", "number"),
            (0, _errorHandlersJs.varTest)(data.status, "status", "string"),
            (0, _errorHandlersJs.varTest)(data.queryType, "queryType", "string"),
            (0, _errorHandlersJs.varTest)(data.queryEntries, "queryEntries", "object"),
            (0, _errorHandlersJs.varTest)(data.sourceData, "sourceData", "object")
        ], "HUB", "#messageForInputManager (Set Search Result Content)")) return;
        let processed = false;
        // get objectname here (from WM)
        const objectFetchURL = "http://coma.ifa.hawaii.edu:8000/api/v1/objects/" + data.queryEntries.objects;
        const response = await fetch(objectFetchURL);
        const rjson = await response.json();
        console.log(rjson);
        const objectName = rjson.object.ui_name;
        if (data.status === "success") {
            const moduleData = {
                moduleKey: data.moduleKey,
                moduleData: {
                    remoteData: data.remoteData,
                    status: data.status,
                    datasetType: data.datasetType,
                    sourceData: data.sourceData,
                    cometOrbit: data.comet_orbit,
                    objectName: objectName
                },
                toggleModuleColor: true
            };
            processed = this.#setModuleDataEvent(moduleData);
            const moduleName = (0, _mainJs.GM).MM.getModule(data.moduleKey).getData("name").toLowerCase();
            // update module popup content
            (0, _mainJs.GM).MM.updatePopupContent(data.moduleKey, moduleName, data);
        // toggle Module color
        /*GM.ENV.toggleNodeColor(data.moduleKey, processed);
            GM.MM.toggleHeaderColor(data.moduleKey, processed);*/ }
    //if (!GM.PM.isPopupOpen(data.moduleKey)) this.#openModulePopup(data.moduleKey, 0, 0);
    }
    /*
     * Updates a popup content for this search module with the search result
     *  @param {number} data.moduleKey moduleKey
     *  @param {Object} data.val search result data
     * */ /*#setSearchResultContent(data) {
        if (invalidVariables([varTest(data.val, 'val', 'object'), varTest(data.moduleKey, 'moduleKey', 'number')], 'HUB', '#messageForInputManager (Set Search Result Content)')) return;
        console.log(data);

        let tableData = undefined;
        // if error, display error
        if (data.val.data !== undefined) {
            // Organize tableData for Tabulator
            const jsonData = JSON.parse(data.val.data);
            console.log(jsonData);

            const headers = Object.keys(jsonData.data[0]);

            let columns = [];
            headers.forEach(function (headeritem) {
                var leftWidth = 0;
                // Get the width of the left decimal type values
                var decimalType = jsonData.data[0][headeritem];
                if (decimalType.includes(".")) {
                    // get all values of the current column
                    jsonData.data.map((val) => {
                        let value = val[headeritem].split(".");
                        if (value[0].length > leftWidth) {
                            leftWidth = value[0].length;
                        }
                    });
                }
                columns.push({
                    title: headeritem, field: headeritem,
                    titleFormatter: function (cell) {
                        let title = cell.getValue();
                        cell.getElement().style.textAlign = "center";
                        return title;
                    },
                    formatter: function (cellValue) {
                        let value = cellValue._cell.value;
                        let valueWrapper = GM.HF.createNewDiv('', '', ['column-val-wrapper'], [{ style: "display", value: "flex" }, { style: "font-family", value: "monospace" }]);
                        if (leftWidth == 0) {
                            // create span of 100% with the value
                            let span = GM.HF.createNewSpan('', '', ['column-val'], [{ style: "text-align", value: "center" }, { style: "display", value: "block" }, { style: "width", value: "100%" }], value);
                            valueWrapper.appendChild(span);
                        }
                        else {
                            let left = value.split(".")[0];
                            let right = value.split(".")[1];
                            // create left span with leftWidth
                            let spanLeft = GM.HF.createNewSpan('', '', ['column-val'], [{ style: "text-align", value: "end" }, { style: "width", value: leftWidth + "ch" }], left);
                            // create right span width 100% - leftWidth
                            let spanDecimal = GM.HF.createNewSpan('', '', ['column-val'], [], ".");
                            let spanRight = GM.HF.createNewSpan('', '', ['column-val'], [], right);
                            valueWrapper.appendChild(spanLeft);
                            valueWrapper.appendChild(spanDecimal);
                            valueWrapper.appendChild(spanRight);
                        }

                        //console.log(valueWrapper);
                        return valueWrapper;
                    },
                });
                jsonData.data.forEach(function (item) {
                    if (Object.keys(format_mapping).includes(headeritem)) {
                        item[headeritem] = Number(item[headeritem]).toFixed(format_mapping[headeritem]);
                    }
                });
            });
            tableData = { columns: columns, tabledata: jsonData.data };
        }

        var resultData = { query: data.val.query, tableData: tableData };
        GM.MM.updatePopupContent(data.moduleKey, data.val.status, resultData);

        // Open popup if not opened yet
        if (!GM.PM.isPopupOpen(data.moduleKey)) this.#openModulePopup(data.moduleKey, 0, 0);
    }*/ /** Gets dropdown options from db. If it fails, load the table locally from static data
     *  
     * */ #getRemoteDropdownOptions(data) {
        console.log(data);
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(data.moduleKey, "moduleKey", "number"),
            (0, _errorHandlersJs.varTest)(data.dirName, "dirName", "string"),
            (0, _errorHandlersJs.varTest)(data.fieldWrapperId, "fieldWrapperId", "string"),
            (0, _errorHandlersJs.varTest)(data.delay, "delay", "number")
        ], "HUB", "#messageForWorkerManager (Get Remote Dropdown Options Event)")) return;
        // use prepworker
        const workerId = this.#getNewWorkerIndex();
        try {
            this.#prepWorker(workerId, (0, _constantsJs.INSPECTOR), "Set Remote Dropdown Options", data.moduleKey).getRemoteDropdownOptions(workerId, data);
        } catch (e) {
            // Add display error function here
            console.log("ERROR GETTING REMOTE DROPDOWN OPTIONS");
            console.log(e);
        }
    }
    // remote search data is the return from server
    #setRemoteDropdownOptions(data) {
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(data.fieldName, "fieldName", "string"),
            (0, _errorHandlersJs.varTest)(data.fieldWrapperId, "fieldWrapperId", "string"),
            (0, _errorHandlersJs.varTest)(data.data, "data", "object")
        ], "HUB", "#messageForWorkerManager (Set Remote Dropdown Options Event)")) return;
        console.log(data);
        // get options for the fieldName
        var success = false;
        if (data.data) {
            var result = data.data[data.fieldName];
            var options = [
                {
                    name: "--- None ---",
                    value: -1
                }
            ];
            switch(data.fieldName){
                case "filters":
                    result.map((item)=>{
                        options.push({
                            name: item.common_name,
                            value: item.id
                        });
                    });
                    break;
                default:
                    result.map((item)=>{
                        options.push({
                            name: item.name,
                            value: item.id
                        });
                    });
            }
            console.log(options);
            // append to dropdown INS
            success = (0, _mainJs.GM).INS.setRemoteDropdownOptions(data.moduleKey, data.fieldWrapperId, options);
        }
    }
    /** Gets objects suggestions from the backend on user input. 
     * 
     * 
     * */ #getRemoteObjectsSuggestions(data) {
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(data.moduleKey, "moduleKey", "number"),
            (0, _errorHandlersJs.varTest)(data.dirName, "dirName", "string"),
            (0, _errorHandlersJs.varTest)(data.fieldWrapperId, "fieldWrapperId", "string"),
            (0, _errorHandlersJs.varTest)(data.term, "term", "string"),
            (0, _errorHandlersJs.varTest)(data.delay, "delay", "number")
        ], "HUB", "#messageForInputManager (Get Remote Objects Suggestions Event)")) return;
        const workerId = this.#getNewWorkerIndex();
        try {
            this.#prepWorker(workerId, (0, _constantsJs.INSPECTOR), "Set Remote Objects Suggestions", data.moduleKey).getRemoteObjectsSuggestions(workerId, data);
        } catch (e) {
            // Add display error function here
            console.log("ERROR GETTING OBJECTS SUGGESTIONS");
            console.log(e);
        }
    }
    #setRemoteObjectsSuggestions(data) {
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(data.moduleKey, "moduleKey", "number"),
            (0, _errorHandlersJs.varTest)(data.fieldWrapperId, "fieldWrapperId", "string"),
            (0, _errorHandlersJs.varTest)(data.data, "data", "object")
        ], "HUB", "#messageForWorkerManager (Set Remote Objects Suggestions Event)")) return;
        console.log(data);
        // get options for the fieldName
        var success = false;
        if (data.data) // append to dropdown INS
        success = (0, _mainJs.GM).INS.setRemoteObjectsSuggestions(data.moduleKey, data.fieldWrapperId, data.data);
        if (!success) console.log("Could not retrieve remote data.");
    }
    /** --- PRIVATE --- MESSAGE FOR INPUT MANAGER
     * Called When routes are loaded
     * @param {Object} data.data the routes 
     */ #routesLoadedEvent(data) {
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(data.data, "data", "object")
        ], "HUB", "#messageForInputManager (Routes Loaded Event")) return;
        (0, _mainJs.GM).IM.addRoutes(data.data);
    }
    /** --- PRIVATE --- MESSAGE FOR INPUT MANAGER
     * Called when objects list is loaded
     * @param {Object} data.data the list of the objects 
     */ #objectsLoadedEvent(data) {
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(data.data, "data", "object")
        ], "HUB", "#messageForInputManager (Objects Loaded Event")) return;
        (0, _mainJs.GM).IM.addObjects(data.data);
    }
    /** --- PRIVATE --- MESSAGE FOR INPUT MANAGER
     * Requests a list of objects from the Input Manager (Only works if there are objects returned from the server.)
     * @param {{callbackFunction (function): function that handles the data on the InspectorCardMaker}} data 
     */ #requestListOfObjectsEvent(data) {
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(data.callbackFunction, "callbackFunction", "function")
        ], "HUB", "#messageForInputManager (Request List Of Objects Event)")) return;
        let objects = (0, _mainJs.GM).IM.getObjects();
        if (objects === undefined) objects = {
            "9P": "Temple 1",
            "10P": "Temple 2"
        }; // Create Fake Data for Testing
        data.callbackFunction(objects);
    }
    /** --- PRIVATE --- MESSAGE FOR WORKER MANAGER
     * Notifies the Node server to write a new saved module to file.
     * @param {{
     * groupInfo (Object): Object representing the group of modules to be saved.
     * name (string): The name of the saved group (user generated)
     * description (string): User generated description
     * }} data 
     */ #saveCompositeModuleEvent(data) {
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(data.groupInfo, "groupInfo", "object"),
            (0, _errorHandlersJs.varTest)(data.name, "name", "string"),
            (0, _errorHandlersJs.varTest)(data.description, "description", "string")
        ], "HUB", "#messageForWorkerManager (Save Composite Module Event)")) return;
        const workerIndex = this.#getNewWorkerIndex();
        try {
            this.#prepWorker(workerIndex).sendCompositeModuleInfoToServer(workerIndex, data);
        } catch (e) {
            console.log("ERROR TRANSMITTING SAVED COMPOSITE MODEL");
            console.log(e);
        }
    }
    /** --- PRIVATE --- Message For Worker Manager
     * Draws a Table to a table module popup. Uses table module.
     * @param {{
     * id (Number): module id,
     * val (Object): values of the data response
     * linkDataNode (Boolean): Draw a link to the module or not
     * local (Boolean): Data comes from local or remote.
     * }} data 
     */ #fetchRemoteTableDataEvent(data) {
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(data.moduleKey, "moduleKey", "number"),
            (0, _errorHandlersJs.varTest)(data.queryType, "queryType", "string"),
            (0, _errorHandlersJs.varTest)(data.queryEntries, "queryEntries", "object")
        ], "HUB", "#messageForWorkerManager (Fetch Remote Table Data Event)")) return;
        const workerId = this.#getNewWorkerIndex();
        this.#prepWorker(workerId, (0, _constantsJs.OUTPUT_MANAGER), "Set New Table Event", data.moduleKey).processSearch(workerId, data);
    }
    #fetchLocalTableDataEvent(data) {
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(data.moduleKey, "moduleKey", "number"),
            (0, _errorHandlersJs.varTest)(data.remoteData, "remoteData", "boolean"),
            (0, _errorHandlersJs.varTest)(data.fileId, "fileId", "string"),
            (0, _errorHandlersJs.varTest)(data.columnsToRender, "columnsToRender", "object")
        ], "HUB", "#messageForInputManager (Fetch Local Table Data Event)")) return;
        // Get table content from local target file
        (0, _mainJs.GM).IM.getTableData(data);
    }
    ////////////////////////////////////////////// create fetchRemoteChartDataEvent ///////////////////////////////////////////////////
    #fetchLocalChartDataEvent(data) {
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(data.moduleKey, "moduleKey", "number"),
            (0, _errorHandlersJs.varTest)(data.remoteData, "remoteData", "boolean"),
            (0, _errorHandlersJs.varTest)(data.datasetType, "datasetType", "string"),
            (0, _errorHandlersJs.varTest)(data.fileId, "fileId", "string"),
            (0, _errorHandlersJs.varTest)(data.traceData, "traceData", "object")
        ], "HUB", "#messageForInputManager (Fetch Local Table Data Event)")) return;
        // Get Chart content from local target file
        (0, _mainJs.GM).IM.getChartData(data);
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //************************************** PROCESSOR MODULE FUNCTIONS **************************************//
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
    #prepFilterDataEvent(data) {
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(data.moduleKey, "moduleKey", "number"),
            (0, _errorHandlersJs.varTest)(data.fromModuleData, "fromModuleData", "object")
        ], "HUB", "#messageForInputManager (Prep Filter Data Event)")) return;
        // get module
        const module = (0, _mainJs.GM).MM.getModule(data.moduleKey);
        console.log(data.fromModuleData);
    }
    /** --- PRIVATE --- MESSAGE FOR WORKER MANAGER
     * Notifies the Worker Manager to transmit a pipeline to the server for processing
     * (THIS WAS GENERATED FOR MY OWN PERSONAL TESTING BACKEND AND WILL HAVE TO BE REWRITTEN)
     * @param {Object[]} data An array of objects representing the pipeline to transmit.  
     */ #transmitPipelineEvent(data) {
        const workerIndex = this.#getNewWorkerIndex();
        try {
            this.#prepWorker(workerIndex).sendPipelineToServer(workerIndex, data.value);
        } catch (e) {
            console.log("ERROR TRANSMITTING PIPELINE");
            console.log(e);
        }
    }
    /** --- PRIVATE --- MESSAGE FOR DATA MANAGER
    * When data is added to the application, a data module must be generated. This function
    * can also connect the new module to the source with a link. It will then swap the key to the data 
    * on the Data Manager from the Source module to the data module.
    * @param {{
     * id (Number): the id of the module that generated the data.
     * linkDataNode (boolean): true if a link should be programatically drawn
     * local (boolean): true if local, false if from the server.
     * val {
     *     data (DataTable): the data object 
     *      type: ex. 'table'
     * }
     * }} data 
     * @returns 
     */ #newDataEvent(data) {
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(data.id, "id", "number"),
            (0, _errorHandlersJs.varTest)(data.val, "val", "object"),
            (0, _errorHandlersJs.varTest)(data.linkDataNode, "linkDataNode", "boolean"),
            (0, _errorHandlersJs.varTest)(data.local, "local", "boolean")
        ], "HUB", " #messageForDataManager. (new data event)")) return;
        else if ((0, _mainJs.GM).DM.addData(data.id, data.val, data.local)) try {
            // moduleCategory is Composite, but this node is actually a non-composite data node. Still using that category for color characteristics only.
            (0, _mainJs.GM).MM.deployNewModule({
                moduleName: "Data",
                moduleCategory: "Composite",
                type: "non-composite"
            });
            const module = (0, _mainJs.GM).MM.connectDataModule(data.id);
            if (data.local) module.setMetadata(data.val.data.getMetadata());
            if (module && data.linkDataNode) {
                // Connect the source module and the newly generated data module
                (0, _mainJs.GM).ENV.drawLinkBetweenNodes(module.getData("link"), module.getData("key"));
                // The data belongs to the data module, not the source module.
                (0, _mainJs.GM).DM.swapDataKeys(module.getData("link"), module.getData("key"));
            }
        } catch (e) {
            console.log("ERROR CREATING NEW DATA MODULE");
            console.log(e);
        }
    }
    /** --- PRIVATE --- MESSAGE FOR DATA MANAGER
     * Called when a new filter module is applied to a dataset.
     * Adds a flag to data on the DataManager and stores a callback that can access the data directly from the filter card.
     * @param {{
     * dataKey (Number): The key that identifies the dataset on the DataManager
     * filterFunction (Function): This function is bound the the minmax card of the filter. It is a getData function  
     *                            that returns information about what filters have been applied to the dataset.
     * }} data 
     */ #newFilterAppliedEvent(data) {
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(data.filterFunction, "filterFunction", "function"),
            (0, _errorHandlersJs.varTest)(data.dataKey, "dataKey", "number")
        ], "HUB", "newFilterAppliedEvent")) return;
        (0, _mainJs.GM).DM.addFilterToDataTable(data.filterFunction, data.dataKey); // Flag the data as filtered on the DataManager
    }
    /** --- PRIVATE --- MESSAGE FOR DATA MANAGER
     * When any data conversion is applied, such as Julian Data to Modified Julian Date, this event is called. It
     * calles the Data Manager to convert the data and create a new DataTable object. Then a new Data Module is created and
     * added to the environment.
     * @param {{
     * inputFieldName (string): The name of the column in the data table to convert,
     * key (Number):  The key identifying the data on the DataManager,
     * moduleKey (Number): The key of the DataConversion module,
     * outputFieldName (string): The name of the new column that will be added to the data table.
     * conversionFunction (function): The function to map to the data. 
     * }} data 
     */ #dataConversionEvent(data) {
        const dataTable = (0, _mainJs.GM).DM.convertData(data.inputFieldName, data.outputFieldName, data.conversionFunction, data.key, data.moduleKey);
        this.#newDataEvent({
            id: data.moduleKey,
            val: dataTable,
            local: true,
            linkDataNode: true
        });
    }
    /** --- PRIVATE ---
     * Datatypes can be changed in the filter if they are wrongly typed.
     * @param {{
     * metadata (Object): Object containing the metadata of the dataset,
     * oldType (string): The current type
     * newType (string): Change to this type
     * field (string): The column in the dataset to change
     * dataKey (Number): Key identifying the dataset on the DataManager
     * callback (function): callback to the min/max card that initiated the event
     * updateMetadataCallback (function): callback to the filter module to update with new metadata.
     * }} data 
     */ #dataTypeChangeEvent(data) {
        (0, _mainJs.GM).DM.changeDataType(data.metadata, data.oldType, data.newType, data.field, data.dataKey, data.callback, data.updateMetadataCallback);
    }
    pipelineReturnEvent(data) {
    //     const keyArray = [];
    //     data.value.forEach(dataObject => {
    //         if (dataObject.id != undefined && dataObject.val != undefined) {
    //             // Data Is Pushed to the data manager. Then the datamanager sends a new data loaded event. to the module manager
    //             GM.DM.addData(dataObject.id, { type: typeof (dataObject.val), data: dataObject.val });
    //             keyArray.push(dataObject.id);
    //         } else printErrorMessage(`Parameter Error.`, `id: ${dataObject.id}, value: ${dataObject.val} -- HUB -> Pipeline Return Event`);
    //         GM.ENV.highlightChangedNodes(keyArray);
    //     });
    }
    /** --- PRIVATE --- MESSAGE FOR OUTPUT MANAGER
     * When a popup with a chart is resized, the chart must also be resized. This function will pass the width and height
     * of the popup to the OutputManager to redraw the chart.
     * @param {{
     * moduleKey (Number): A key associated with the specific popup element.
     * }} data 
     */ #resizePopupEvent(data) {
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(data.moduleKey, "moduleKey", "number")
        ], "HUB", "#messageForOutputManager (Resize Popup Event)")) return;
        if ((0, _mainJs.GM).OM.popupHasAChart(data.moduleKey)) // Popup Manager will pass the height and width to the Output Manager to redraw the Chart to the right size.
        (0, _mainJs.GM).OM.resizeChart(data.moduleKey, (0, _mainJs.GM).PM.getPopupWidth(data.moduleKey), (0, _mainJs.GM).PM.getPopupHeight(data.moduleKey));
        if ((0, _mainJs.GM).OM.popupHasOrbit(data.moduleKey)) (0, _mainJs.GM).OM.resizeOrbit(data.moduleKey, (0, _mainJs.GM).PM.getPopupWidth(data.moduleKey), (0, _mainJs.GM).PM.getPopupHeight(data.moduleKey));
    }
    /** --- PRIVATE --- MESSAGE FOR OUTPUT MANAGER
     * If there is a chart on the popup that was removed, that chart is removed.
     * @param {{moduleKey: (number) the key of the popup that was deleted}} data 
     */ #popupClosedEvent(data) {
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(data.moduleKey, "moduleKey", "number")
        ], "HUB", "#messageForOutputManager (Popup Closed Event)")) return;
        //if (GM.OM.popupHasActiveChart(data.moduleKey)) GM.OM.removeChart(data.moduleKey);
        // set visibility hidden
        var modulePopup = (0, _mainJs.GM).MM.getPopupContentForModule(data.moduleKey);
        var popup = modulePopup.content;
        if (popup) {
            var popupWrapper = popup.closest(`#popup-${data.moduleKey}`);
            popupWrapper.style.visibility = "hidden";
        }
    }
    /** --- PRIVATE --- MESSAGE FOR OUTPUT MANAGER
     * Sets the theme for a chart. This event is emitted from the chart popup.
     * If the chart is currently being displayed, it is redrawn with the new colors.
     * @param {{
     * moduleKey: (number) the key of the module that generated the popup
     * theme: (string) this identifies the theme to apply to the chart.
     * }} data 
     * @returns 
     */ #eChartThemeEvent(data) {
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(data.moduleKey, "moduleKey", "number"),
            (0, _errorHandlersJs.varTest)(data.theme, "theme", "string")
        ], "HUB", "#messageForOutputManager (Change EChart Theme Event)")) return;
        if ((0, _mainJs.GM).OM.popupHasAChart(data.moduleKey)) {
            if ((0, _mainJs.GM).OM.changeEchartTheme(data.moduleKey, data.theme)) {
                if ((0, _mainJs.GM).OM.popupHasActiveChart(data.moduleKey)) (0, _mainJs.GM).OM.redrawEChart(data.moduleKey, (0, _mainJs.GM).PM.getPopupWidth(data.moduleKey), (0, _mainJs.GM).PM.getPopupHeight(data.moduleKey));
            }
        }
    }
    /** --- PRIVATE --- Message For Output Manager
     * Called when user clicks Generate on a Chart inspector card.
     * @param {{
     * datasetKey (Number): the key identifying the data on the DataManager,
     * div (HTML Div): Where to inject the chart into the DOM,
     * fieldData (Object): Contains information from the ChartDataStorage object on the Output module. It has information 
     *                     such as labels, coordinateSystem, and other options.
     * moduleKey (Number): the id of the chart (Output) Module,
     * type (string): chart type i.e. 'bar', 'scatter'
     * }} data 
     */ #createNewLocalChartEvent(data) {
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(data.datasetKey, "datasetKey", "number"),
            (0, _errorHandlersJs.varTest)(data.moduleKey, "moduleKey", "number"),
            (0, _errorHandlersJs.varTest)(data.fieldData, "fieldData", "object"),
            (0, _errorHandlersJs.varTest)(data.div, "div", "object"),
            (0, _errorHandlersJs.varTest)(data.type, "type", "string")
        ], "HUB", "#messageForOutputManager (Create Local Chart Event)")) return;
        if ((0, _mainJs.GM).DM.hasData(data.datasetKey)) {
            const chartData = (0, _mainJs.GM).DM.getXYDataWithFields(data.datasetKey, data.fieldData);
            // Store this information on the Output manager for quick redrawing during resizing charts.
            if ((0, _mainJs.GM).OM.storeChartData(data.moduleKey, chartData, data.div, data.type, data.fieldData.xAxisLabel, data.fieldData.yAxisLabel, data.fieldData.xAxisGrid, data.fieldData.yAxisGrid, data.fieldData.xAxisTick, data.fieldData.yAxisTick, data.fieldData.coordinateSystem)) {
                if (!(0, _mainJs.GM).PM.isPopupOpen(data.moduleKey)) this.#openModulePopup(data.moduleKey, 0, 0);
                (0, _mainJs.GM).OM.drawChart(data.moduleKey, data.div, (0, _mainJs.GM).PM.getPopupWidth(data.moduleKey), (0, _mainJs.GM).PM.getPopupHeight(data.moduleKey));
            }
        }
    }
    /** --- PRIVATE --- Message For Output Manager (Deprecated)
     * Calls the DataManager to get the relevant data and filter out the unwanted fields that the user has unchecked. Then passes
     * that data to the output manager to generate a new CSV file.
     * @param {{
     * datasetKey (Number): key identifying the data on the DataManager,
     * moduleKey (Number): key identifying the module,
     * fieldData (Object): Conaints information from the ChatDataStorage objeect on the ToCSV module. The only important information
     *                     in this object is the Headers but the entire object needs to be passed to the DataManager.
     * }} data 
     */ #createNewCSVFileEvent(data) {
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(data.datasetKey, "datasetKey", "number"),
            (0, _errorHandlersJs.varTest)(data.moduleKey, "moduleKey", "number"),
            (0, _errorHandlersJs.varTest)(data.fieldData, "fieldData", "object")
        ], "HUB", "#messageForOutputManager (Create Csv File Event)")) return;
        if ((0, _mainJs.GM).DM.hasData(data.datasetKey)) {
            const tableData = (0, _mainJs.GM).DM.getTableDataWithFields(data.datasetKey, data.fieldData);
            (0, _mainJs.GM).OM.generateCsvFile(tableData);
        }
    }
    /** --- PRIVATE --- Message For Output Manager
     * Draws a Table to a module popup. Uses Plotly to create the chart instead of ECharts.
     * @param {{
     * datasetKey (Number): key identifying the data on the DataManager,
     * moduleKey (Number): key identifying the module,
     * fieldData (Object): Conaints information from the ChatDataStorage objeect on the ToCSV module. The only important information
     *                     in this object is the Headers but the entire object needs to be passed to the DataManager.
     * div (HTML Div): The dom location to insert the chart
     * type (string): 'table' identifies the chart type.
     * }} data 
     */ #createNewLocalTableEvent(data) {
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(data.datasetKey, "datasetKey", "number"),
            (0, _errorHandlersJs.varTest)(data.moduleKey, "moduleKey", "number"),
            (0, _errorHandlersJs.varTest)(data.type, "type", "string")
        ], "HUB", "#messageForOutputManager (Create Local Chart Event)")) return;
        if ((0, _mainJs.GM).DM.hasData(data.datasetKey)) {
            const chartData = (0, _mainJs.GM).DM.getTableDataWithFields(data.datasetKey, data.fieldData);
            if ((0, _mainJs.GM).OM.storeChartData(data.moduleKey, chartData, data.div, data.type, "", "")) {
                if (!(0, _mainJs.GM).PM.isPopupOpen(data.moduleKey)) this.#openModulePopup(data.moduleKey, 0, 0);
                if ((0, _mainJs.GM).PM.isPopupOpen(data.moduleKey)) (0, _mainJs.GM).OM.drawChart(data.moduleKey, data.div, (0, _mainJs.GM).PM.getPopupWidth(data.moduleKey), (0, _mainJs.GM).PM.getPopupHeight(data.moduleKey));
            }
        }
    }
    /////////////////////////////////////////////////////////// for input & outputmanagers ///////////////////////////////////////////////////////////
    //******************************************************************************************************/
    //********************************************* TABLE MODULE *******************************************/
    //******************************************************************************************************/
    /** Sets a table moduleData from source moduleData
     * @param {moduleKey} moduleKey of the table module
     * @param {sourceModuleData} sourceModuleData of the source module
     * */ #prepTableDataEvent(data) {
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(data.moduleKey, "moduleKey", "number"),
            (0, _errorHandlersJs.varTest)(data.sourceModuleData, "sourceModuleData", "object")
        ], "HUB", "#messageForInputManager (Prep Table Data Event)")) return;
        var processed = false;
        var fromDatasetType = data.sourceModuleData.datasetType;
        var fromSourceData = data.sourceModuleData.sourceData;
        console.log(fromSourceData);
        if (fromSourceData) {
            // get columnHeaders
            var columnHeaders = (0, _mainJs.GM).IM.getColumnHeaders(fromSourceData);
            console.log(columnHeaders);
            // set moduleData for this table module
            var data = {
                moduleKey: data.moduleKey,
                moduleData: {
                    datasetType: fromDatasetType,
                    columnHeaders: columnHeaders,
                    sourceData: fromSourceData
                },
                toggleModuleColor: true
            };
            processed = this.#setModuleDataEvent(data);
        }
    // else show error
    }
    /** Sets a new tabulator table to the Table Module Popup.
     * @param {moduleData} moduleData to set the table content with.
     *                      (e.g. { moduleKey: 1, datasetType: "", columnHeaders: [""], columnsToRender: [""], sourceData: [{}] })
     * */ #setNewTableEvent(moduleData) {
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(moduleData.moduleKey, "moduleKey", "number"),
            (0, _errorHandlersJs.varTest)(moduleData.datasetType, "datasetType", "string"),
            (0, _errorHandlersJs.varTest)(moduleData.sourceData, "sourceData", "object"),
            (0, _errorHandlersJs.varTest)(moduleData.columnsToRender, "columnsToRender", "object")
        ], "HUB", "#messageForOutputManager (Set New Table Event)")) return;
        console.log("---------------- set New Table Event --------------");
        var processed = false;
        //-------------- write function in OutputManager.. in chartBuilder.js
        // Organize tableData for Tabulator
        var tableData = (0, _mainJs.GM).OM.getTabulatorData(moduleData.datasetType, moduleData.columnsToRender, moduleData.sourceData);
        // store tableData in OM?
        /*
                headers.forEach(function (headeritem) {
                    var columnData = headerData.find(h => h.fieldName === headeritem);
                    // Get the width of the left decimal type values
                    */ /*var leftWidth = 0;
        var decimalType = data[0][headeritem];
        if (decimalType.includes(".")) {
            // get all values of the current column
            data.map((val) => {
                let value = val[headeritem].split(".");
                if (value[0].length > leftWidth) {
                    leftWidth = value[0].length;
                }
            });
        }*/ /*
        columns.push({
            title: headeritem, field: headeritem,
            headerHozAlign: "center",
            */ /*formatter: 'text',
        formatterParams: function (cellValue) {
            let value = cellValue._cell.value;
            let valueWrapper = GM.HF.createNewDiv('', '', ['column-val-wrapper'], [{ style: "display", value: "flex" }, { style: "font-family", value: "monospace" }]);
            if (leftWidth == 0) {
                // create span of 100% with the value
                let span = GM.HF.createNewSpan('', '', ['column-val'], [{ style: "text-align", value: "center" }, { style: "display", value: "block" }, { style: "width", value: "100%" }], value);
                valueWrapper.appendChild(span);
            }
            else {
                let left = value.split(".")[0];
                let right = value.split(".")[1];
                // create left span with leftWidth
                let spanLeft = GM.HF.createNewSpan('', '', ['column-val'], [{ style: "text-align", value: "end" }, { style: "width", value: leftWidth + "ch" }], left);
                // create right span width 100% - leftWidth
                let spanDecimal = GM.HF.createNewSpan('', '', ['column-val'], [], ".");
                let spanRight = GM.HF.createNewSpan('', '', ['column-val'], [], right);
                valueWrapper.appendChild(spanLeft);
                valueWrapper.appendChild(spanDecimal);
                valueWrapper.appendChild(spanRight);
            }
    
            //console.log(valueWrapper);
            return valueWrapper;
        },*/ /*
    });
});*/ //resultData = { columns: columns, tabledata: tableData };
        processed = true;
        // Open popup if not opened yet
        if (!(0, _mainJs.GM).PM.isPopupOpen(moduleData.moduleKey)) this.#openModulePopup(moduleData.moduleKey, 0, 0);
        (0, _mainJs.GM).MM.updatePopupContent(moduleData.moduleKey, "table", tableData);
        // toggle module color and inspector/popup header color
        (0, _mainJs.GM).ENV.toggleNodeColor(moduleData.moduleKey, processed);
        (0, _mainJs.GM).MM.toggleHeaderColor(moduleData.moduleKey, processed);
    }
    //******************************************************************************************************/
    //********************************************* CHART MODULE *******************************************/
    //******************************************************************************************************/
    /** Sets a chart moduleData from source moduleData
     * @param {moduleKey} moduleKey of the table module
     * @param {sourceModuleData} sourceModuleData of the source module
     * */ #prepChartDataEvent(data) {
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(data.moduleKey, "moduleKey", "number"),
            (0, _errorHandlersJs.varTest)(data.sourceModuleData, "sourceModuleData", "object")
        ], "HUB", "#messageForOutputManager (Prep Chart Data Event)")) return;
        var processed = false;
        var remoteData = data.sourceModuleData.remoteData;
        var fromDatasetType = data.sourceModuleData.datasetType;
        var fromSourceData = data.sourceModuleData.sourceData;
        var fromObjectName = data.sourceModuleData.objectName;
        if (fromSourceData) {
            // get columnHeaders
            var chartData = (0, _mainJs.GM).IM.getChartData(remoteData, fromSourceData);
            // set moduleData for this table module
            var data = {
                moduleKey: data.moduleKey,
                moduleData: {
                    datasetType: fromDatasetType,
                    sourceData: fromSourceData,
                    chartData: chartData,
                    objectName: fromObjectName
                },
                toggleModuleColor: true
            };
            processed = this.#setModuleDataEvent(data);
        }
    // else show error
    }
    #setNewChartEvent(data) {
        // moduleKey, datasetType, chartData, status, tableData
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(data.moduleKey, "moduleKey", "number"),
            (0, _errorHandlersJs.varTest)(data.moduleData, "moduleData", "object")
        ], "HUB", "#messageForOutputManager (Set New Chart Event)")) return;
        // get chart type
        const key = data.moduleKey;
        const moduleData = data.moduleData;
        const module = (0, _mainJs.GM).MM.getModule(key);
        const div = module.getData("plotDiv");
        // Organize the chartData for Echart
        const chartData = (0, _mainJs.GM).OM.prepChartData(key, moduleData.datasetType, moduleData.chartTitle, moduleData.chartData, moduleData.sourceData);
        const processed = (0, _mainJs.GM).OM.storeChartData(key, chartData, div, module.getData("chartType"), module.getData("coordinateSystem"));
        if (processed) {
            (0, _mainJs.GM).OM.drawChart(key, div, (0, _mainJs.GM).PM.getPopupWidth(key), (0, _mainJs.GM).PM.getPopupHeight(key));
            if (!(0, _mainJs.GM).PM.isPopupOpen(key)) this.#openModulePopup(key, 0, 0);
        }
        // toggle module color and inspector/popup header color
        this.#toggleModuleColorEvent(key, processed);
    }
    /** --- PRIVATE --- Message For Output Manager (deprecated)
     * Draws a Table to a module popup. Uses Plotly to create the chart instead of ECharts.
     * @param {{
     * id (Number): module id,
     * val (Object): values of the data response
     * linkDataNode (Boolean): Draw a link to the module or not
     * local (Boolean): Data comes from local or remote.
     * }} data 
     */ /*#newTableEvent(data) {
        if (invalidVariables([varTest(data.id, 'id', 'number'), varTest(data.val, 'val', 'object'), varTest(data.linkDataNode, 'linkDataNode', 'boolean'), varTest(data.local, 'local', 'boolean')], 'HUB', ' #messageForOutputManager. (new table event)')) return;
        //if (GM.OM.addData(data.id, data.val, data.local)) {
            try {
                // moduleCategory is Composite, but this node is actually a non-composite data node. Still using that category for color characteristics only.

                // oncreation of module, add dataTable in this module, then create popup card

                GM.MM.deployNewModule({ moduleName: 'Table', moduleCategory: 'Output', type: 'non-composite' });
                const module = GM.MM.connectTableModule(data.id);
                if (data.local) {
                    module.setData(data);
                }
                else {
                    module.setRemoteData(data.val.data);
                    //module.getData('data');
                }
                if (module && data.linkDataNode) {
                    // Connect the source module and the newly generated data module
                    GM.ENV.drawLinkBetweenNodes(module.getData('link'), module.getData('key'));

                    // The data belongs to the data module, not the source module.
                    //GM.DM.swapDataKeys(module.getData('link'), module.getData('key'));
                    const data = { moduleKey: module.getData('key') };
                    this.#nodeSelectedEvent(data);
                    // open popup
                    console.log(module);
                }
            } catch (e) {
                console.log('ERROR CREATING NEW TABLE MODULE');
                console.log(e);
            }
        //}
        // outputmanager draw chart

    }*/ //******************************************************************************************************/
    //********************************************** ORBIT MODULE ******************************************/
    //******************************************************************************************************/
    // sets planet orbits on creation of orbit module
    #getPlanetOrbitsDataEvent() {
        if ((0, _errorHandlersJs.invalidVariables)([], "HUB", "#messageForWorkerManager (Get Planet Orbits Event)")) return;
        const workerId = this.#getNewWorkerIndex();
        this.#prepWorker(workerId).getPlanetOrbits(workerId);
    }
    // sets object orbits on creation of orbit module
    #getObjectOrbitsDataEvent() {
        if ((0, _errorHandlersJs.invalidVariables)([], "HUB", "#messageForInputManager (Get Object Orbits Event)")) return;
        (0, _mainJs.GM).IM.getObjectOrbits();
    }
    /** Sets a orbit moduleData from source moduleData
     * @param {moduleKey} moduleKey of the table module
     * @param {sourceModuleData} sourceModuleData of the source module
     * */ #prepOrbitDataEvent(data) {
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(data.moduleKey, "moduleKey", "number"),
            (0, _errorHandlersJs.varTest)(data.sourceModuleData, "sourceModuleData", "object")
        ], "HUB", "#messageForOutputManager (Prep Orbit Data Event)")) return;
        (0, _mainJs.GM).IM.prepOrbitModuleData(data.moduleKey, data.sourceModuleData.remoteData, data.sourceModuleData.objectName, data.sourceModuleData.sourceData, data.sourceModuleData.cometOrbit);
    }
    #setNewOrbitEvent(data) {
        if ((0, _errorHandlersJs.invalidVariables)([
            (0, _errorHandlersJs.varTest)(data.moduleKey, "moduleKey", "number")
        ], "HUB", "#messageForOutputManager (Set New Orbit Event)")) return;
        const key = data.moduleKey;
        const module = (0, _mainJs.GM).MM.getModule(key);
        let processed = module.getData("processed");
        if (!processed) {
            let moduleData = module.getData("moduleData");
            let div = module.getData("orbitDiv");
            console.log((0, _mainJs.GM).PM.getPopupWidth(key));
            console.log(moduleData);
            let orbitData = (0, _mainJs.GM).OM.prepOrbitData(data.objectsToRender, moduleData.sourceData, data.orbitsToRender, moduleData.cometOrbit);
            processed = (0, _mainJs.GM).OM.storeOrbitData(key, orbitData, div);
            if (processed) {
                (0, _mainJs.GM).OM.drawOrbit(key, div, (0, _mainJs.GM).PM.getPopupWidth(key), (0, _mainJs.GM).PM.getPopupHeight(key));
                module.addData("processed", true);
            }
        }
        // toggle module color and inspector/popup header color
        this.#toggleModuleColorEvent(key, processed);
        if (!(0, _mainJs.GM).PM.isPopupOpen(key)) this.#openModulePopup(key, 0, 0);
    }
    //******************************************************************************************************/
    //***************************************** OBJECT IMAGES MODULE ***************************************/
    //******************************************************************************************************/
    /**
     * Prepare Object Images data to get corresponding object name of the image to render
     * */ #prepObjectImagesEvent(data) {
        const key = data.moduleKey;
        const module = (0, _mainJs.GM).MM.getModule(key);
        const moduleData = data.sourceModuleData;
        const remote = moduleData.remoteData;
        console.log(moduleData);
        //if (remote) {
        // get object name from the search module input
        (0, _mainJs.GM).IM.prepObjectImagesModuleData(remote, key, data.sourceModuleKey);
    /*}
        else {
            // same as remote... just add the object type-ahead field to the csv module & set moduleData


        }*/ }
    async #setNewImagesEvent(data) {
        if (!data.imagePopupExists) {
            // get path of the images to render
            const imagePaths = await (0, _mainJs.GM).OM.getObjectImagePaths(data.objectToRender);
            //console.log(imagePaths);
            const imageModuleData = {
                moduleKey: data.moduleKey,
                moduleData: {
                    objectName: imagePaths.objectName,
                    imageDates: imagePaths.imageDates,
                    imagesToRender: imagePaths.imagesToRender
                },
                toggleModuleColor: true
            };
            this.#setModuleDataEvent(imageModuleData);
            // Render images in popup body (and date dropdown)
            const module = (0, _mainJs.GM).MM.getModule(data.moduleKey);
            const moduleData = module.getData("moduleData");
            module.renderObjectImages(data.moduleKey, moduleData);
        }
        if (!(0, _mainJs.GM).PM.isPopupOpen(data.moduleKey)) this.#openModulePopup(data.moduleKey, 0, 0);
    }
    /** --- PUBLIC ---     * At application start, server is pinged to get routes and available objects.
     */ makeInitialContactWithServer() {
        //this.#getRoutes();
        //this.#getObjects();
        this.#getSavedModules();
    }
    /** --- PRIVATE --- 
     * Opens a new popup linked to a specific module.
     * @param {Number} key module key
     * @param {Number} x x position to insert popup element in dom
     * @param {Number} y y position tin insert popup element in dom
     */ #openModulePopup(key, x, y) {
        //GM.PM.createModulePopup(key, GM.MM.getPopupContentForModule(key), x, y);
        // instead of createModulePopup, set the visibility to visible 
        var modulePopup = (0, _mainJs.GM).MM.getPopupContentForModule(key);
        var popup = modulePopup.content;
        if (popup) {
            var popupWrapper = popup.closest(`#popup-${key}`);
            popupWrapper.style.visibility = "visible";
        }
    // add delay to show the loading screen for minimum 0.5sec?
    // look for popup wrapper
    // resize to update width and height of the popup accordingly
    }
    /** ---PRIVATE---
     * Called when a new module is created that requires metadata from the server. Likely a Source module.
     * @param {Number} workerIndex the index of an available webWorker.
     * @param {string} moduleName the name of the new module
     * @param {function} callbackFunction handles the metadata when it is returned. 
     */ #makeMetadataRequest(moduleKey, callbackFunction) {
        callbackFunction(moduleKey);
    /*GM.WM.notifyWorkerOfId(workerIndex)
            .setStopWorkerFunction(workerIndex)
            .setHandleReturnFunction(workerIndex, callbackFunction)
            .setWorkerMessageHandler(workerIndex)*/ //.requestMetadata(workerIndex, moduleName);
    }
    /** --- PRIVATE ---
     * Gets all routes from the server API
     */ #getRoutes() {
        const workerIndex = this.#getNewWorkerIndex();
        this.#prepWorker(workerIndex, (0, _constantsJs.INPUT_MANAGER), "Routes Loaded Event").getRoutesFromServer(workerIndex);
    }
    /** --- PRIVATE ---
     * Gets a list of all queryable objects from the server API
     */ #getObjects() {
        const workerIndex = this.#getNewWorkerIndex();
        this.#prepWorker(workerIndex, (0, _constantsJs.INPUT_MANAGER), "Objects Loaded Event").getObjectsFromServer(workerIndex);
    }
    /** --- PRIVATE ---
     * Gets all of the saved modules at startup
     */ #getSavedModules() {
        const workerIndex = this.#getNewWorkerIndex();
        this.#prepWorker(workerIndex, (0, _constantsJs.MODULE_MANAGER), "Saved Modules Loaded Event").getSavedModulesFromServer(workerIndex);
    }
    /** --- PRIVATE ---
     * Initializes a new worker and sets necessary variables.
     * @param {Number} workerIndex id of the worker that will handle the task
     * @param {Number} messageRecipient id of the recipient of the return message (ie OUTPUT_MANAGER)
     *                             This can be undefined if no message needs to be directed to a specific component.
     * @param {string} returnMessage the message to send upon return 
     *                          This can be undefined if no message needs to be directed to a specific component.
     * @returns the active webworker, ready to handle a job.
     */ #prepWorker(workerIndex, messageRecipient, returnMessage, moduleKey) {
        if (messageRecipient && returnMessage) {
            var moduleKey = moduleKey ? moduleKey : -1;
            return (0, _mainJs.GM).WM.notifyWorkerOfId(workerIndex).setStopWorkerFunction(workerIndex).setHandleReturnFunction(workerIndex).setWorkerMessageHandler(workerIndex).setWorkerReturnMessageRecipient(workerIndex, messageRecipient).setWorkerReturnMessage(workerIndex, returnMessage, moduleKey);
        } else return (0, _mainJs.GM).WM.notifyWorkerOfId(workerIndex).setStopWorkerFunction(workerIndex).setHandleReturnFunction(workerIndex).setWorkerMessageHandler(workerIndex);
    }
    /** --- PRIVATE ---
     * Starts a new web worker and returns the worker id to the calling function.
     * @returns the id of an active and available worker
     */ #getNewWorkerIndex() {
        return (0, _mainJs.GM).WM.addWorkerToDataTable((0, _mainJs.GM).WM.startWorker());
    }
    // This function is called when the run button is pressed.
    // The Pipeline must be validated, jsonified, then sent to the next layer for processing.
    run = ()=>{
        let m = (0, _mainJs.GM).ENV.getModel();
        (0, _mainJs.GM).PLM.validatePipeline((0, _mainJs.GM).MM.getModulesForPipeline(m));
    };
}
exports.default = Hub;

},{"../communication/index.js":"eT70M","../main.js":"1SICI","../sharedVariables/constants.js":"dxmqI","../errorHandling/errorHandlers.js":"dxjcu","../sharedVariables/formatValues.js":"dLTDz","../sharedVariables/moduleData.js":"87R3y","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bllQU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DomManager", ()=>DomManager);
var _publisherJs = require("../../communication/publisher.js");
var _htmlFactoryJs = require("../../htmlGeneration/htmlFactory.js");
const imageUrl = new URL(require("96fb5a3a230690fe"));
class DomManager {
    publisher;
    #domTable;
    constructor(){
        this.#domTable = new Map();
        this.publisher = new (0, _publisherJs.Publisher)();
        this.HF = new (0, _htmlFactoryJs.HTMLFactory)();
    }
    initializeDomManager() {
        this.#addToDomTable("navBarDiv", document.querySelector("#navWrapper"));
        this.#addToDomTable("logo", this.#initializeLogo());
    }
    #initializeLogo() {
        const elementDiv = this.HF.createNewDiv("", "", [
            "nav-content-wrapper"
        ], [], [], "");
        const leftNavDiv = this.HF.createNewDiv("", "", [
            "left-nav-wrapper",
            "nav-content"
        ], [], [], "");
        const logoIMG = this.HF.createNewIMG("logo", "logo", imageUrl, [
            "logo"
        ], [], "COMA logo");
        //const element = this.HF.createNewIMG('logo', 'logo', '../../../images/logo/COMA_LOGO_T.png', ['logo'], [], 'COMA logo');
        leftNavDiv.appendChild(logoIMG);
        elementDiv.appendChild(leftNavDiv);
        this.#domTable.get("navBarDiv").appendChild(elementDiv);
        return elementDiv;
    }
    #addToDomTable(key, value) {
        this.#domTable.set(key, value);
    }
}

},{"../../communication/publisher.js":"ilZi7","../../htmlGeneration/htmlFactory.js":"9lYdL","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3","96fb5a3a230690fe":"aym73"}],"aym73":[function(require,module,exports) {
module.exports = require("5de116d943e1f8fb").getBundleURL("10Mjw") + "COMA-LOGO-NEW.1a9f3a31.png" + "?" + Date.now();

},{"5de116d943e1f8fb":"lgJ39"}],"4LcTn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "go", ()=>go);
parcelHelpers.export(exports, "Group", ()=>Group);
parcelHelpers.export(exports, "EnumValue", ()=>EnumValue);
parcelHelpers.export(exports, "List", ()=>List);
parcelHelpers.export(exports, "Set", ()=>Set);
parcelHelpers.export(exports, "Map", ()=>Map);
parcelHelpers.export(exports, "Point", ()=>Point);
parcelHelpers.export(exports, "Size", ()=>Size);
parcelHelpers.export(exports, "Rect", ()=>Rect);
parcelHelpers.export(exports, "Margin", ()=>Margin);
parcelHelpers.export(exports, "Spot", ()=>Spot);
parcelHelpers.export(exports, "Geometry", ()=>Geometry);
parcelHelpers.export(exports, "PathFigure", ()=>PathFigure);
parcelHelpers.export(exports, "PathSegment", ()=>PathSegment);
parcelHelpers.export(exports, "InputEvent", ()=>InputEvent);
parcelHelpers.export(exports, "DiagramEvent", ()=>DiagramEvent);
parcelHelpers.export(exports, "ChangedEvent", ()=>ChangedEvent);
parcelHelpers.export(exports, "Model", ()=>Model);
parcelHelpers.export(exports, "GraphLinksModel", ()=>GraphLinksModel);
parcelHelpers.export(exports, "TreeModel", ()=>TreeModel);
parcelHelpers.export(exports, "Binding", ()=>Binding);
parcelHelpers.export(exports, "Transaction", ()=>Transaction);
parcelHelpers.export(exports, "UndoManager", ()=>UndoManager);
parcelHelpers.export(exports, "CommandHandler", ()=>CommandHandler);
parcelHelpers.export(exports, "Tool", ()=>Tool);
parcelHelpers.export(exports, "DraggingTool", ()=>DraggingTool);
parcelHelpers.export(exports, "DraggingInfo", ()=>DraggingInfo);
parcelHelpers.export(exports, "LinkingBaseTool", ()=>LinkingBaseTool);
parcelHelpers.export(exports, "LinkingTool", ()=>LinkingTool);
parcelHelpers.export(exports, "RelinkingTool", ()=>RelinkingTool);
parcelHelpers.export(exports, "LinkReshapingTool", ()=>LinkReshapingTool);
parcelHelpers.export(exports, "ResizingTool", ()=>ResizingTool);
parcelHelpers.export(exports, "RotatingTool", ()=>RotatingTool);
parcelHelpers.export(exports, "ClickSelectingTool", ()=>ClickSelectingTool);
parcelHelpers.export(exports, "ActionTool", ()=>ActionTool);
parcelHelpers.export(exports, "ClickCreatingTool", ()=>ClickCreatingTool);
parcelHelpers.export(exports, "HTMLInfo", ()=>HTMLInfo);
parcelHelpers.export(exports, "ContextMenuTool", ()=>ContextMenuTool);
parcelHelpers.export(exports, "DragSelectingTool", ()=>DragSelectingTool);
parcelHelpers.export(exports, "PanningTool", ()=>PanningTool);
parcelHelpers.export(exports, "TextEditingTool", ()=>TextEditingTool);
parcelHelpers.export(exports, "ToolManager", ()=>ToolManager);
parcelHelpers.export(exports, "Animation", ()=>Animation);
parcelHelpers.export(exports, "AnimationManager", ()=>AnimationManager);
parcelHelpers.export(exports, "AnimationTrigger", ()=>AnimationTrigger);
parcelHelpers.export(exports, "Layer", ()=>Layer);
parcelHelpers.export(exports, "Diagram", ()=>Diagram);
parcelHelpers.export(exports, "Palette", ()=>Palette);
parcelHelpers.export(exports, "Overview", ()=>Overview);
parcelHelpers.export(exports, "Brush", ()=>Brush);
parcelHelpers.export(exports, "GraphObject", ()=>GraphObject);
parcelHelpers.export(exports, "Panel", ()=>Panel);
parcelHelpers.export(exports, "RowColumnDefinition", ()=>RowColumnDefinition);
parcelHelpers.export(exports, "Shape", ()=>Shape);
parcelHelpers.export(exports, "TextBlock", ()=>TextBlock);
parcelHelpers.export(exports, "TextBlockMetrics", ()=>TextBlockMetrics);
parcelHelpers.export(exports, "Picture", ()=>Picture);
parcelHelpers.export(exports, "Part", ()=>Part);
parcelHelpers.export(exports, "Adornment", ()=>Adornment);
parcelHelpers.export(exports, "Node", ()=>Node);
parcelHelpers.export(exports, "Link", ()=>Link);
parcelHelpers.export(exports, "Placeholder", ()=>Placeholder);
parcelHelpers.export(exports, "Layout", ()=>Layout);
parcelHelpers.export(exports, "LayoutNetwork", ()=>LayoutNetwork);
parcelHelpers.export(exports, "LayoutVertex", ()=>LayoutVertex);
parcelHelpers.export(exports, "LayoutEdge", ()=>LayoutEdge);
parcelHelpers.export(exports, "GridLayout", ()=>GridLayout);
parcelHelpers.export(exports, "PanelLayout", ()=>PanelLayout);
parcelHelpers.export(exports, "CircularLayout", ()=>CircularLayout);
parcelHelpers.export(exports, "CircularNetwork", ()=>CircularNetwork);
parcelHelpers.export(exports, "CircularVertex", ()=>CircularVertex);
parcelHelpers.export(exports, "CircularEdge", ()=>CircularEdge);
parcelHelpers.export(exports, "ForceDirectedLayout", ()=>ForceDirectedLayout);
parcelHelpers.export(exports, "ForceDirectedNetwork", ()=>ForceDirectedNetwork);
parcelHelpers.export(exports, "ForceDirectedVertex", ()=>ForceDirectedVertex);
parcelHelpers.export(exports, "ForceDirectedEdge", ()=>ForceDirectedEdge);
parcelHelpers.export(exports, "LayeredDigraphLayout", ()=>LayeredDigraphLayout);
parcelHelpers.export(exports, "LayeredDigraphNetwork", ()=>LayeredDigraphNetwork);
parcelHelpers.export(exports, "LayeredDigraphVertex", ()=>LayeredDigraphVertex);
parcelHelpers.export(exports, "LayeredDigraphEdge", ()=>LayeredDigraphEdge);
parcelHelpers.export(exports, "TreeLayout", ()=>TreeLayout);
parcelHelpers.export(exports, "TreeNetwork", ()=>TreeNetwork);
parcelHelpers.export(exports, "TreeVertex", ()=>TreeVertex);
parcelHelpers.export(exports, "TreeEdge", ()=>TreeEdge);
parcelHelpers.export(exports, "version", ()=>version);
var global = arguments[3];
/*
 * GoJS v2.3.11 JavaScript Library for HTML Diagrams, https://gojs.net
 * GoJS and Northwoods Software are registered trademarks of Northwoods Software Corporation, https://www.nwoods.com.
 * Copyright (C) 1998-2023 by Northwoods Software Corporation.  All Rights Reserved.
 * THIS SOFTWARE IS LICENSED.  THE LICENSE AGREEMENT IS AT: https://gojs.net/2.3.11/license.html.
 * DO NOT MODIFY THIS FILE.  DO NOT DISTRIBUTE A MODIFIED COPY OF THE CONTENTS OF THIS FILE.
 */ (function() {
    var t;
    function aa(a1) {
        var b = 0;
        return function() {
            return b < a1.length ? {
                done: !1,
                value: a1[b++]
            } : {
                done: !0
            };
        };
    }
    function ba(a1) {
        var b = "undefined" != typeof Symbol && Symbol.iterator && a1[Symbol.iterator];
        return b ? b.call(a1) : {
            next: aa(a1)
        };
    }
    function da(a1) {
        for(var b, c = []; !(b = a1.next()).done;)c.push(b.value);
        return c;
    }
    var ea = "function" == typeof Object.create ? Object.create : function(a1) {
        function b() {}
        b.prototype = a1;
        return new b;
    }, fa;
    if ("function" == typeof Object.setPrototypeOf) fa = Object.setPrototypeOf;
    else {
        var ha;
        a: {
            var ia = {
                a: !0
            }, ja = {};
            try {
                ja.__proto__ = ia;
                ha = ja.a;
                break a;
            } catch (a1) {}
            ha = !1;
        }
        fa = ha ? function(a1, b) {
            a1.__proto__ = b;
            if (a1.__proto__ !== b) throw new TypeError(a1 + " is not extensible");
            return a1;
        } : null;
    }
    var ka = fa;
    function la(a1, b) {
        a1.prototype = ea(b.prototype);
        a1.prototype.constructor = a1;
        if (ka) ka(a1, b);
        else for(var c in b)if ("prototype" != c) {
            if (Object.defineProperties) {
                var d = Object.getOwnPropertyDescriptor(b, c);
                d && Object.defineProperty(a1, c, d);
            } else a1[c] = b[c];
        }
        a1.QA = b.prototype;
    }
    var ma = "undefined" != typeof global && null != global ? global : self, oa = "function" == typeof Object.assign ? Object.assign : function(a1, b) {
        for(var c = 1; c < arguments.length; c++){
            var d = arguments[c];
            if (d) for(var e in d)Object.prototype.hasOwnProperty.call(d, e) && (a1[e] = d[e]);
        }
        return a1;
    }, pa = "function" == typeof Object.defineProperties ? Object.defineProperty : function(a1, b, c) {
        a1 != Array.prototype && a1 != Object.prototype && (a1[b] = c.value);
    };
    function qa(a1, b) {
        if (b) {
            var c = ma;
            a1 = a1.split(".");
            for(var d = 0; d < a1.length - 1; d++){
                var e = a1[d];
                e in c || (c[e] = {});
                c = c[e];
            }
            a1 = a1[a1.length - 1];
            d = c[a1];
            b = b(d);
            b != d && null != b && pa(c, a1, {
                writable: !0,
                value: b
            });
        }
    }
    qa("Object.assign", function(a1) {
        return a1 || oa;
    });
    qa("Array.prototype.fill", function(a1) {
        return a1 ? a1 : function(a1, c, d) {
            var b = this.length || 0;
            0 > c && (c = Math.max(0, b + c));
            if (null == d || d > b) d = b;
            d = Number(d);
            0 > d && (d = Math.max(0, b + d));
            for(c = Number(c || 0); c < d; c++)this[c] = a1;
            return this;
        };
    });
    var x = "object" === typeof globalThis && globalThis || "object" === typeof global && global.global === global && global || "object" === typeof self && self.self === self && self || {};
    void 0 === x.requestAnimationFrame && (void 0 === x.setImmediate ? x.requestAnimationFrame = function(a1) {
        x.setTimeout(a1, 0);
    } : x.requestAnimationFrame = x.setImmediate);
    function ra() {}
    function sa(a1, b) {
        var c = -1;
        return function() {
            var d = this, e = arguments;
            -1 !== c && x.clearTimeout(c);
            c = ta(function() {
                c = -1;
                a1.apply(d, e);
            }, b);
        };
    }
    function ta(a1, b) {
        return x.setTimeout(a1, b);
    }
    function ua(a1) {
        return x.document.createElement(a1);
    }
    function C(a1) {
        throw Error(a1);
    }
    function va(a1, b) {
        a1 = "The object is frozen, so its properties cannot be set: " + a1.toString();
        void 0 !== b && (a1 += "  to value: " + b);
        C(a1);
    }
    function xa(a1, b, c, d) {
        c = null === c ? "*" : "string" === typeof c ? c : "function" === typeof c && "string" === typeof c.className ? c.className : "";
        void 0 !== d && (c += "." + d);
        C(c + " is not in the range " + b + ": " + a1);
    }
    function ya(a1) {
        x.console && x.console.log(a1);
    }
    function za(a1) {
        return "object" === typeof a1 && null !== a1;
    }
    function Aa(a1) {
        return Array.isArray(a1) || x.NodeList && a1 instanceof x.NodeList || x.HTMLCollection && a1 instanceof x.HTMLCollection;
    }
    function Ba(a1) {
        return Array.prototype.slice.call(a1);
    }
    function Ca(a1, b, c) {
        Array.isArray(a1) ? b >= a1.length ? a1.push(c) : a1.splice(b, 0, c) : C("Cannot insert an object into an HTMLCollection or NodeList: " + c + " at " + b);
    }
    function Da(a1, b) {
        Array.isArray(a1) ? b >= a1.length ? a1.pop() : a1.splice(b, 1) : C("Cannot remove an object from an HTMLCollection or NodeList at " + b);
    }
    function Ea() {
        var a1 = Fa.pop();
        return void 0 === a1 ? [] : a1;
    }
    function Ga(a1) {
        a1.length = 0;
        Fa.push(a1);
    }
    function Ha(a1) {
        if ("function" === typeof a1) {
            if (a1.className) return a1.className;
            if (a1.name) return a1.name;
            var b = a1.toString();
            b = b.substring(9, b.indexOf("(")).trim();
            if ("" !== b) return a1._className = b;
        } else if (za(a1) && a1.constructor) return Ha(a1.constructor);
        return typeof a1;
    }
    function Ia(a1) {
        var b = a1;
        za(a1) && (a1.text ? b = a1.text : a1.name ? b = a1.name : void 0 !== a1.key ? b = a1.key : void 0 !== a1.id ? b = a1.id : a1.constructor === Object && (a1.Text ? b = a1.Text : a1.Name ? b = a1.Name : void 0 !== a1.Key ? b = a1.Key : void 0 !== a1.Id ? b = a1.Id : void 0 !== a1.ID && (b = a1.ID)));
        return void 0 === b ? "undefined" : null === b ? "null" : b.toString();
    }
    function Ja(a1, b) {
        if (a1.hasOwnProperty(b)) return !0;
        for(a1 = Object.getPrototypeOf(a1); a1 && a1 !== Function;){
            if (a1.hasOwnProperty(b)) return !0;
            var c = a1.CA;
            if (c && c[b]) return !0;
            a1 = Object.getPrototypeOf(a1);
        }
        return !1;
    }
    function Ka(a1, b, c) {
        Object.defineProperty(La.prototype, a1, {
            get: b,
            set: c
        });
    }
    function Ma(a1) {
        for(var b = [], c = 0; 256 > c; c++)b["0123456789abcdef".charAt(c >> 4) + "0123456789abcdef".charAt(c & 15)] = String.fromCharCode(c);
        a1.length % 2 && (a1 = "0" + a1);
        c = [];
        for(var d = 0, e = 0; e < a1.length; e += 2)c[d++] = b[a1.substr(e, 2)];
        a1 = c.join("");
        a1 = "" === a1 ? "0" : a1;
        b = [];
        for(c = 0; 256 > c; c++)b[c] = c;
        for(c = d = 0; 256 > c; c++)d = (d + b[c] + 119) % 256, e = b[c], b[c] = b[d], b[d] = e;
        d = c = 0;
        for(var f = "", g = 0; g < a1.length; g++)c = (c + 1) % 256, d = (d + b[c]) % 256, e = b[c], b[c] = b[d], b[d] = e, f += String.fromCharCode(a1.charCodeAt(g) ^ b[(b[c] + b[d]) % 256]);
        return f;
    }
    var Na = void 0 !== x.navigator && 0 < x.navigator.userAgent.indexOf("Trident/7"), Oa = void 0 !== x.navigator && void 0 !== x.navigator.platform && null !== x.navigator.platform.match(/(iPhone|iPod|iPad|Mac)/i), Fa = [];
    Object.freeze([]);
    ra.className = "Util";
    ra.Dx = "32ab5ff3b26f42dc0ed90f21472913b5";
    ra.adym = "gojs.net";
    ra.vfo = "28e645fdb267";
    ra.className = "Util";
    function E(a1, b, c) {
        Qa(this);
        this.j = a1;
        this.xa = b;
        this.o = c;
    }
    E.prototype.toString = function() {
        return "EnumValue." + this.xa;
    };
    function Ra(a1, b) {
        return void 0 === b || null === b || "" === b ? null : a1[b];
    }
    ma.Object.defineProperties(E.prototype, {
        classType: {
            get: function() {
                return this.j;
            }
        },
        name: {
            get: function() {
                return this.xa;
            }
        },
        value: {
            get: function() {
                return this.o;
            }
        }
    });
    E.className = "EnumValue";
    function Sa() {
        this.ew = [];
    }
    Sa.prototype.toString = function() {
        return this.ew.join("");
    };
    Sa.prototype.add = function(a1) {
        "" !== a1 && this.ew.push(a1);
    };
    Sa.className = "StringBuilder";
    function Ta() {}
    Ta.className = "PropertyCollection";
    var Wa = {
        EA: !1,
        JA: !1,
        GA: !1,
        IA: !1,
        NA: !1,
        LA: !1,
        nx: !1,
        FA: null,
        trace: function(a1) {
            x.console && x.console.log(a1);
        },
        HA: function(a1, b, c, d) {
            a1.strokeStyle = "red";
            a1.fillStyle = "red";
            a1.font = "8px sans-serif";
            a1.beginPath();
            a1.moveTo(-10, 0);
            a1.lineTo(10, 0);
            a1.moveTo(0, -10);
            a1.lineTo(0, 10);
            a1.stroke();
            a1.setTransform(1, 0, 0, 1, 0, 0);
            a1.scale(c, c);
            a1.transform(b.m11, b.m12, b.m21, b.m22, b.dx, b.dy);
            a1.lineWidth = 2;
            a1.beginPath();
            a1.moveTo(d.left, d.top + 20);
            a1.lineTo(d.left, d.top);
            a1.lineTo(d.left + 20, d.top);
            a1.moveTo(d.right, d.bottom - 20);
            a1.lineTo(d.right, d.bottom);
            a1.lineTo(d.right - 20, d.bottom);
            a1.stroke();
            a1.fillText("DB: " + Math.round(d.x) + ", " + Math.round(d.y) + ", " + Math.round(d.width) + ", " + Math.round(d.height), d.left, d.top - 5);
        },
        DA: function(a1) {
            var b = {}, c;
            for(c in a1){
                b.x = c;
                if ("licenseKey" !== b.x) {
                    var d = a1[b.x];
                    if (void 0 !== d.prototype) {
                        b.Yl = Object.getOwnPropertyNames(d.prototype);
                        for(var e = {
                            Sj: 0
                        }; e.Sj < b.Yl.length; e = {
                            Sj: e.Sj
                        }, e.Sj++){
                            var f = Object.getOwnPropertyDescriptor(d.prototype, b.Yl[e.Sj]);
                            void 0 !== f.get && void 0 === f.set && Object.defineProperty(d.prototype, b.Yl[e.Sj], {
                                set: function(a1, b) {
                                    return function() {
                                        throw Error("Property " + a1.Yl[b.Sj] + " of " + a1.x + " is read-only.");
                                    };
                                }(b, e)
                            });
                        }
                    }
                }
                b = {
                    Yl: b.Yl,
                    x: b.x
                };
            }
        }
    };
    function Xa() {}
    Xa.prototype.reset = function() {};
    Xa.prototype.next = function() {
        return !1;
    };
    Xa.prototype.Ad = function() {
        return !1;
    };
    Xa.prototype.first = function() {
        return null;
    };
    Xa.prototype.any = function() {
        return !1;
    };
    Xa.prototype.all = function() {
        return !0;
    };
    Xa.prototype.each = function() {
        return this;
    };
    Xa.prototype.map = function() {
        return this;
    };
    Xa.prototype.filter = function() {
        return this;
    };
    Xa.prototype.de = function() {};
    Xa.prototype.toString = function() {
        return "EmptyIterator";
    };
    ma.Object.defineProperties(Xa.prototype, {
        iterator: {
            get: function() {
                return this;
            }
        },
        count: {
            get: function() {
                return 0;
            }
        }
    });
    Xa.prototype.first = Xa.prototype.first;
    Xa.prototype.hasNext = Xa.prototype.Ad;
    Xa.prototype.next = Xa.prototype.next;
    Xa.prototype.reset = Xa.prototype.reset;
    var Ya = null;
    Xa.className = "EmptyIterator";
    Ya = new Xa;
    function Za(a1) {
        this.key = -1;
        this.value = a1;
    }
    Za.prototype.reset = function() {
        this.key = -1;
    };
    Za.prototype.next = function() {
        return -1 === this.key ? (this.key = 0, !0) : !1;
    };
    Za.prototype.Ad = function() {
        return this.next();
    };
    Za.prototype.first = function() {
        this.key = 0;
        return this.value;
    };
    Za.prototype.any = function(a1) {
        this.key = -1;
        return a1(this.value);
    };
    Za.prototype.all = function(a1) {
        this.key = -1;
        return a1(this.value);
    };
    Za.prototype.each = function(a1) {
        this.key = -1;
        a1(this.value);
        return this;
    };
    Za.prototype.map = function(a1) {
        return new Za(a1(this.value));
    };
    Za.prototype.filter = function(a1) {
        return a1(this.value) ? new Za(this.value) : Ya;
    };
    Za.prototype.de = function() {
        this.value = null;
    };
    Za.prototype.toString = function() {
        return "SingletonIterator(" + this.value + ")";
    };
    ma.Object.defineProperties(Za.prototype, {
        iterator: {
            get: function() {
                return this;
            }
        },
        count: {
            get: function() {
                return 1;
            }
        }
    });
    Za.prototype.first = Za.prototype.first;
    Za.prototype.hasNext = Za.prototype.Ad;
    Za.prototype.next = Za.prototype.next;
    Za.prototype.reset = Za.prototype.reset;
    Za.className = "SingletonIterator";
    function $a(a1) {
        this.Cb = a1;
        this.qf = null;
        a1.Sa = null;
        this.qa = a1.Ja;
        this.Za = -1;
    }
    $a.prototype.reset = function() {
        var a1 = this.Cb;
        a1.Sa = null;
        this.qa = a1.Ja;
        this.Za = -1;
    };
    $a.prototype.next = function() {
        var a1 = this.Cb;
        if (a1.Ja !== this.qa && 0 > this.key) return !1;
        a1 = a1.s;
        var b = a1.length, c = ++this.Za, d = this.qf;
        if (null !== d) for(; c < b;){
            var e = a1[c];
            if (d(e)) return this.key = this.Za = c, this.value = e, !0;
            c++;
        }
        else {
            if (c < b) return this.key = c, this.value = a1[c], !0;
            this.de();
        }
        return !1;
    };
    $a.prototype.Ad = function() {
        return this.next();
    };
    $a.prototype.first = function() {
        var a1 = this.Cb;
        this.qa = a1.Ja;
        this.Za = 0;
        a1 = a1.s;
        var b = a1.length, c = this.qf;
        if (null !== c) {
            for(var d = 0; d < b;){
                var e = a1[d];
                if (c(e)) return this.key = this.Za = d, this.value = e;
                d++;
            }
            return null;
        }
        return 0 < b ? (a1 = a1[0], this.key = 0, this.value = a1) : null;
    };
    $a.prototype.any = function(a1) {
        var b = this.Cb;
        b.Sa = null;
        this.Za = -1;
        b = b.s;
        for(var c = b.length, d = this.qf, e = 0; e < c; e++){
            var f = b[e];
            if ((null === d || d(f)) && a1(f)) return !0;
        }
        return !1;
    };
    $a.prototype.all = function(a1) {
        var b = this.Cb;
        b.Sa = null;
        this.Za = -1;
        b = b.s;
        for(var c = b.length, d = this.qf, e = 0; e < c; e++){
            var f = b[e];
            if ((null === d || d(f)) && !a1(f)) return !1;
        }
        return !0;
    };
    $a.prototype.each = function(a1) {
        var b = this.Cb;
        b.Sa = null;
        this.Za = -1;
        b = b.s;
        for(var c = b.length, d = this.qf, e = 0; e < c; e++){
            var f = b[e];
            (null === d || d(f)) && a1(f);
        }
        return this;
    };
    $a.prototype.map = function(a1) {
        var b = this.Cb;
        b.Sa = null;
        this.Za = -1;
        var c = [];
        b = b.s;
        for(var d = b.length, e = this.qf, f = 0; f < d; f++){
            var g = b[f];
            (null === e || e(g)) && c.push(a1(g));
        }
        a1 = new F;
        a1.s = c;
        a1.yb();
        return a1.iterator;
    };
    $a.prototype.filter = function(a1) {
        var b = this.Cb;
        b.Sa = null;
        this.Za = -1;
        var c = [];
        b = b.s;
        for(var d = b.length, e = this.qf, f = 0; f < d; f++){
            var g = b[f];
            (null === e || e(g)) && a1(g) && c.push(g);
        }
        a1 = new F;
        a1.s = c;
        a1.yb();
        return a1.iterator;
    };
    $a.prototype.de = function() {
        this.key = -1;
        this.value = null;
        this.qa = -1;
        this.qf = null;
        this.Cb.Sa = this;
    };
    $a.prototype.toString = function() {
        return "ListIterator@" + this.Za + "/" + this.Cb.count;
    };
    ma.Object.defineProperties($a.prototype, {
        iterator: {
            get: function() {
                return this;
            }
        },
        predicate: {
            get: function() {
                return this.qf;
            },
            set: function(a1) {
                this.qf = a1;
            }
        },
        count: {
            get: function() {
                var a1 = this.qf;
                if (null !== a1) {
                    for(var b = 0, c = this.Cb.s, d = c.length, e = 0; e < d; e++)a1(c[e]) && b++;
                    return b;
                }
                return this.Cb.s.length;
            }
        }
    });
    $a.prototype.first = $a.prototype.first;
    $a.prototype.hasNext = $a.prototype.Ad;
    $a.prototype.next = $a.prototype.next;
    $a.prototype.reset = $a.prototype.reset;
    $a.className = "ListIterator";
    function ab(a1) {
        this.Cb = a1;
        a1.Hg = null;
        this.qa = a1.Ja;
        this.Za = a1.s.length;
    }
    ab.prototype.reset = function() {
        var a1 = this.Cb;
        a1.Hg = null;
        this.qa = a1.Ja;
        this.Za = a1.s.length;
    };
    ab.prototype.next = function() {
        var a1 = this.Cb;
        if (a1.Ja !== this.qa && 0 > this.key) return !1;
        var b = --this.Za;
        if (0 <= b) return this.key = b, this.value = a1.s[b], !0;
        this.de();
        return !1;
    };
    ab.prototype.Ad = function() {
        return this.next();
    };
    ab.prototype.first = function() {
        var a1 = this.Cb;
        this.qa = a1.Ja;
        var b = a1.s;
        this.Za = a1 = b.length - 1;
        return 0 <= a1 ? (b = b[a1], this.key = a1, this.value = b) : null;
    };
    ab.prototype.any = function(a1) {
        var b = this.Cb;
        b.Hg = null;
        b = b.s;
        var c = b.length;
        this.Za = c;
        for(--c; 0 <= c; c--)if (a1(b[c])) return !0;
        return !1;
    };
    ab.prototype.all = function(a1) {
        var b = this.Cb;
        b.Hg = null;
        b = b.s;
        var c = b.length;
        this.Za = c;
        for(--c; 0 <= c; c--)if (!a1(b[c])) return !1;
        return !0;
    };
    ab.prototype.each = function(a1) {
        var b = this.Cb;
        b.Hg = null;
        b = b.s;
        var c = b.length;
        this.Za = c;
        for(--c; 0 <= c; c--)a1(b[c]);
        return this;
    };
    ab.prototype.map = function(a1) {
        var b = this.Cb;
        b.Hg = null;
        var c = [];
        b = b.s;
        var d = b.length;
        this.Za = d;
        for(--d; 0 <= d; d--)c.push(a1(b[d]));
        a1 = new F;
        a1.s = c;
        a1.yb();
        return a1.iterator;
    };
    ab.prototype.filter = function(a1) {
        var b = this.Cb;
        b.Hg = null;
        var c = [];
        b = b.s;
        var d = b.length;
        this.Za = d;
        for(--d; 0 <= d; d--){
            var e = b[d];
            a1(e) && c.push(e);
        }
        a1 = new F;
        a1.s = c;
        a1.yb();
        return a1.iterator;
    };
    ab.prototype.de = function() {
        this.key = -1;
        this.value = null;
        this.qa = -1;
        this.Cb.Hg = this;
    };
    ab.prototype.toString = function() {
        return "ListIteratorBackwards(" + this.Za + "/" + this.Cb.count + ")";
    };
    ma.Object.defineProperties(ab.prototype, {
        iterator: {
            get: function() {
                return this;
            }
        },
        count: {
            get: function() {
                return this.Cb.s.length;
            }
        }
    });
    ab.prototype.first = ab.prototype.first;
    ab.prototype.hasNext = ab.prototype.Ad;
    ab.prototype.next = ab.prototype.next;
    ab.prototype.reset = ab.prototype.reset;
    ab.className = "ListIteratorBackwards";
    function F(a1) {
        Qa(this);
        this._isFrozen = !1;
        this.s = [];
        this.Ja = 0;
        this.Hg = this.Sa = null;
        "string" === typeof a1 && C("Error: Since 2.0 List/Map/Set constructors no longer take an argument that enforces type.");
        void 0 !== a1 && this.addAll(a1);
    }
    t = F.prototype;
    t.yb = function() {
        var a1 = this.Ja;
        a1++;
        999999999 < a1 && (a1 = 0);
        this.Ja = a1;
    };
    t.freeze = function() {
        this._isFrozen = !0;
        return this;
    };
    t.ka = function() {
        this._isFrozen = !1;
        return this;
    };
    t.toString = function() {
        return "List()#" + bb(this);
    };
    t.add = function(a1) {
        if (null === a1) return this;
        this._isFrozen && va(this, a1);
        this.s.push(a1);
        this.yb();
        return this;
    };
    t.push = function(a1) {
        this.add(a1);
    };
    t.addAll = function(a1) {
        if (null === a1) return this;
        this._isFrozen && va(this);
        var b = this.s;
        if (Aa(a1)) for(var c = a1.length, d = 0; d < c; d++)b.push(a1[d]);
        else for(a1 = a1.iterator; a1.next();)b.push(a1.value);
        this.yb();
        return this;
    };
    t.clear = function() {
        this._isFrozen && va(this);
        this.s.length = 0;
        this.yb();
    };
    t.contains = function(a1) {
        return null === a1 ? !1 : -1 !== this.s.indexOf(a1);
    };
    t.has = function(a1) {
        return this.contains(a1);
    };
    t.indexOf = function(a1) {
        return null === a1 ? -1 : this.s.indexOf(a1);
    };
    t.M = function(a1) {
        var b = this.s;
        (0 > a1 || a1 >= b.length) && xa(a1, "0 <= i < length", F, "elt:i");
        return b[a1];
    };
    t.get = function(a1) {
        return this.M(a1);
    };
    t.cd = function(a1, b) {
        var c = this.s;
        (0 > a1 || a1 >= c.length) && xa(a1, "0 <= i < length", F, "setElt:i");
        this._isFrozen && va(this, a1);
        c[a1] = b;
    };
    t.set = function(a1, b) {
        this.cd(a1, b);
    };
    t.first = function() {
        var a1 = this.s;
        return 0 === a1.length ? null : a1[0];
    };
    t.kc = function() {
        var a1 = this.s, b = a1.length;
        return 0 < b ? a1[b - 1] : null;
    };
    t.pop = function() {
        this._isFrozen && va(this);
        var a1 = this.s;
        return 0 < a1.length ? a1.pop() : null;
    };
    F.prototype.any = function(a1) {
        for(var b = this.s, c = b.length, d = 0; d < c; d++)if (a1(b[d])) return !0;
        return !1;
    };
    F.prototype.all = function(a1) {
        for(var b = this.s, c = b.length, d = 0; d < c; d++)if (!a1(b[d])) return !1;
        return !0;
    };
    F.prototype.each = function(a1) {
        for(var b = this.s, c = b.length, d = 0; d < c; d++)a1(b[d]);
        return this;
    };
    F.prototype.map = function(a1) {
        for(var b = new F, c = [], d = this.s, e = d.length, f = 0; f < e; f++)c.push(a1(d[f]));
        b.s = c;
        b.yb();
        return b;
    };
    F.prototype.filter = function(a1) {
        for(var b = new F, c = [], d = this.s, e = d.length, f = 0; f < e; f++){
            var g = d[f];
            a1(g) && c.push(g);
        }
        b.s = c;
        b.yb();
        return b;
    };
    t = F.prototype;
    t.Hb = function(a1, b) {
        0 > a1 && xa(a1, ">= 0", F, "insertAt:i");
        this._isFrozen && va(this, a1);
        var c = this.s;
        a1 >= c.length ? c.push(b) : c.splice(a1, 0, b);
        this.yb();
    };
    t.remove = function(a1) {
        if (null === a1) return !1;
        this._isFrozen && va(this, a1);
        var b = this.s;
        a1 = b.indexOf(a1);
        if (-1 === a1) return !1;
        a1 === b.length - 1 ? b.pop() : b.splice(a1, 1);
        this.yb();
        return !0;
    };
    t.delete = function(a1) {
        return this.remove(a1);
    };
    t.mb = function(a1) {
        var b = this.s;
        (0 > a1 || a1 >= b.length) && xa(a1, "0 <= i < length", F, "removeAt:i");
        this._isFrozen && va(this, a1);
        a1 === b.length - 1 ? b.pop() : b.splice(a1, 1);
        this.yb();
    };
    t.removeRange = function(a1, b) {
        var c = this.s, d = c.length;
        if (0 > a1) a1 = 0;
        else if (a1 >= d) return this;
        if (0 > b) return this;
        b >= d && (b = d - 1);
        if (a1 > b) return this;
        this._isFrozen && va(this);
        for(var e = a1, f = b + 1; f < d;)c[e++] = c[f++];
        c.length = d - (b - a1 + 1);
        this.yb();
        return this;
    };
    F.prototype.copy = function() {
        var a1 = new F, b = this.s;
        0 < b.length && (a1.s = Array.prototype.slice.call(b));
        return a1;
    };
    t = F.prototype;
    t.Fa = function() {
        for(var a1 = this.s, b = this.count, c = Array(b), d = 0; d < b; d++)c[d] = a1[d];
        return c;
    };
    t.Iv = function() {
        for(var a1 = new H, b = this.s, c = this.count, d = 0; d < c; d++)a1.add(b[d]);
        return a1;
    };
    t.sort = function(a1) {
        this._isFrozen && va(this);
        this.s.sort(a1);
        this.yb();
        return this;
    };
    t.zi = function(a1, b, c) {
        var d = this.s, e = d.length;
        void 0 === b && (b = 0);
        void 0 === c && (c = e);
        this._isFrozen && va(this);
        var f = c - b;
        if (1 >= f) return this;
        (0 > b || b >= e - 1) && xa(b, "0 <= from < length", F, "sortRange:from");
        if (2 === f) return c = d[b], e = d[b + 1], 0 < a1(c, e) && (d[b] = e, d[b + 1] = c, this.yb()), this;
        if (0 === b) {
            if (c >= e) d.sort(a1);
            else for(b = d.slice(0, c), b.sort(a1), a1 = 0; a1 < c; a1++)d[a1] = b[a1];
        } else if (c >= e) for(c = d.slice(b), c.sort(a1), a1 = b; a1 < e; a1++)d[a1] = c[a1 - b];
        else for(e = d.slice(b, c), e.sort(a1), a1 = b; a1 < c; a1++)d[a1] = e[a1 - b];
        this.yb();
        return this;
    };
    t.reverse = function() {
        this._isFrozen && va(this);
        this.s.reverse();
        this.yb();
        return this;
    };
    ma.Object.defineProperties(F.prototype, {
        _dataArray: {
            get: function() {
                return this.s;
            }
        },
        count: {
            get: function() {
                return this.s.length;
            }
        },
        size: {
            get: function() {
                return this.s.length;
            }
        },
        length: {
            get: function() {
                return this.s.length;
            }
        },
        iterator: {
            get: function() {
                if (0 >= this.s.length) return Ya;
                var a1 = this.Sa;
                return null !== a1 ? (a1.reset(), a1) : new $a(this);
            }
        },
        iteratorBackwards: {
            get: function() {
                if (0 >= this.s.length) return Ya;
                var a1 = this.Hg;
                return null !== a1 ? (a1.reset(), a1) : new ab(this);
            }
        }
    });
    F.prototype.reverse = F.prototype.reverse;
    F.prototype.sortRange = F.prototype.zi;
    F.prototype.sort = F.prototype.sort;
    F.prototype.toSet = F.prototype.Iv;
    F.prototype.toArray = F.prototype.Fa;
    F.prototype.removeRange = F.prototype.removeRange;
    F.prototype.removeAt = F.prototype.mb;
    F.prototype["delete"] = F.prototype.delete;
    F.prototype.remove = F.prototype.remove;
    F.prototype.insertAt = F.prototype.Hb;
    F.prototype.pop = F.prototype.pop;
    F.prototype.last = F.prototype.kc;
    F.prototype.first = F.prototype.first;
    F.prototype.set = F.prototype.set;
    F.prototype.setElt = F.prototype.cd;
    F.prototype.get = F.prototype.get;
    F.prototype.elt = F.prototype.M;
    F.prototype.indexOf = F.prototype.indexOf;
    F.prototype.has = F.prototype.has;
    F.prototype.contains = F.prototype.contains;
    F.prototype.clear = F.prototype.clear;
    F.prototype.addAll = F.prototype.addAll;
    F.prototype.push = F.prototype.push;
    F.prototype.add = F.prototype.add;
    F.prototype.thaw = F.prototype.ka;
    F.prototype.freeze = F.prototype.freeze;
    F.className = "List";
    function cb(a1) {
        this.eg = a1;
        a1.Sa = null;
        this.qa = a1.Ja;
        this.sa = null;
    }
    cb.prototype.reset = function() {
        var a1 = this.eg;
        a1.Sa = null;
        this.qa = a1.Ja;
        this.sa = null;
    };
    cb.prototype.next = function() {
        var a1 = this.eg;
        if (a1.Ja !== this.qa && null === this.key) return !1;
        var b = this.sa;
        b = null === b ? a1.ea : b.va;
        if (null !== b) return this.sa = b, this.value = b.value, this.key = b.key, !0;
        this.de();
        return !1;
    };
    cb.prototype.Ad = function() {
        return this.next();
    };
    cb.prototype.first = function() {
        var a1 = this.eg;
        this.qa = a1.Ja;
        a1 = a1.ea;
        if (null !== a1) {
            this.sa = a1;
            var b = a1.value;
            this.key = a1.key;
            return this.value = b;
        }
        return null;
    };
    cb.prototype.any = function(a1) {
        var b = this.eg;
        this.sa = b.Sa = null;
        for(b = b.ea; null !== b;){
            if (a1(b.value)) return !0;
            b = b.va;
        }
        return !1;
    };
    cb.prototype.all = function(a1) {
        var b = this.eg;
        this.sa = b.Sa = null;
        for(b = b.ea; null !== b;){
            if (!a1(b.value)) return !1;
            b = b.va;
        }
        return !0;
    };
    cb.prototype.each = function(a1) {
        var b = this.eg;
        this.sa = b.Sa = null;
        for(b = b.ea; null !== b;)a1(b.value), b = b.va;
        return this;
    };
    cb.prototype.map = function(a1) {
        var b = this.eg;
        b.Sa = null;
        var c = new F;
        for(b = b.ea; null !== b;)c.add(a1(b.value)), b = b.va;
        return c.iterator;
    };
    cb.prototype.filter = function(a1) {
        var b = this.eg;
        b.Sa = null;
        var c = new F;
        for(b = b.ea; null !== b;){
            var d = b.value;
            a1(d) && c.add(d);
            b = b.va;
        }
        return c.iterator;
    };
    cb.prototype.de = function() {
        this.value = this.key = null;
        this.qa = -1;
        this.eg.Sa = this;
    };
    cb.prototype.toString = function() {
        return null !== this.sa ? "SetIterator@" + this.sa.value : "SetIterator";
    };
    ma.Object.defineProperties(cb.prototype, {
        iterator: {
            get: function() {
                return this;
            }
        },
        count: {
            get: function() {
                return this.eg.Tb;
            }
        }
    });
    cb.prototype.first = cb.prototype.first;
    cb.prototype.hasNext = cb.prototype.Ad;
    cb.prototype.next = cb.prototype.next;
    cb.prototype.reset = cb.prototype.reset;
    cb.className = "SetIterator";
    function H(a1) {
        Qa(this);
        this._isFrozen = !1;
        this.Ub = {};
        this.Tb = 0;
        this.Sa = null;
        this.Ja = 0;
        this.kf = this.ea = null;
        "string" === typeof a1 && C("Error: Since 2.0 List/Map/Set constructors no longer take an argument that enforces type.");
        void 0 !== a1 && this.addAll(a1);
    }
    t = H.prototype;
    t.yb = function() {
        var a1 = this.Ja;
        a1++;
        999999999 < a1 && (a1 = 0);
        this.Ja = a1;
    };
    t.freeze = function() {
        this._isFrozen = !0;
        return this;
    };
    t.ka = function() {
        this._isFrozen = !1;
        return this;
    };
    t.toString = function() {
        return "Set()#" + bb(this);
    };
    t.add = function(a1) {
        if (null === a1) return this;
        this._isFrozen && va(this, a1);
        var b = a1;
        za(a1) && (b = fb(a1));
        void 0 === this.Ub[b] && (this.Tb++, a1 = new ib(a1, a1), this.Ub[b] = a1, b = this.kf, null === b ? this.ea = a1 : (a1.kl = b, b.va = a1), this.kf = a1, this.yb());
        return this;
    };
    t.addAll = function(a1) {
        if (null === a1) return this;
        this._isFrozen && va(this);
        if (Aa(a1)) for(var b = a1.length, c = 0; c < b; c++)this.add(a1[c]);
        else for(a1 = a1.iterator; a1.next();)this.add(a1.value);
        return this;
    };
    t.contains = function(a1) {
        if (null === a1) return !1;
        var b = a1;
        return za(a1) && (b = bb(a1), void 0 === b) ? !1 : void 0 !== this.Ub[b];
    };
    t.has = function(a1) {
        return this.contains(a1);
    };
    t.Sy = function(a1) {
        if (null === a1) return !0;
        for(a1 = a1.iterator; a1.next();)if (!this.contains(a1.value)) return !1;
        return !0;
    };
    t.Ty = function(a1) {
        if (null === a1) return !0;
        for(a1 = a1.iterator; a1.next();)if (this.contains(a1.value)) return !0;
        return !1;
    };
    t.first = function() {
        var a1 = this.ea;
        return null === a1 ? null : a1.value;
    };
    H.prototype.any = function(a1) {
        for(var b = this.ea; null !== b;){
            if (a1(b.value)) return !0;
            b = b.va;
        }
        return !1;
    };
    H.prototype.all = function(a1) {
        for(var b = this.ea; null !== b;){
            if (!a1(b.value)) return !1;
            b = b.va;
        }
        return !0;
    };
    H.prototype.each = function(a1) {
        for(var b = this.ea; null !== b;)a1(b.value), b = b.va;
        return this;
    };
    H.prototype.map = function(a1) {
        for(var b = new H, c = this.ea; null !== c;)b.add(a1(c.value)), c = c.va;
        return b;
    };
    H.prototype.filter = function(a1) {
        for(var b = new H, c = this.ea; null !== c;){
            var d = c.value;
            a1(d) && b.add(d);
            c = c.va;
        }
        return b;
    };
    t = H.prototype;
    t.remove = function(a1) {
        if (null === a1) return !1;
        this._isFrozen && va(this, a1);
        var b = a1;
        if (za(a1) && (b = bb(a1), void 0 === b)) return !1;
        a1 = this.Ub[b];
        if (void 0 === a1) return !1;
        var c = a1.va, d = a1.kl;
        null !== c && (c.kl = d);
        null !== d && (d.va = c);
        this.ea === a1 && (this.ea = c);
        this.kf === a1 && (this.kf = d);
        delete this.Ub[b];
        this.Tb--;
        this.yb();
        return !0;
    };
    t.delete = function(a1) {
        return this.remove(a1);
    };
    t.gp = function(a1) {
        if (null === a1) return this;
        this._isFrozen && va(this);
        if (Aa(a1)) for(var b = a1.length, c = 0; c < b; c++)this.remove(a1[c]);
        else for(a1 = a1.iterator; a1.next();)this.remove(a1.value);
        return this;
    };
    t.pA = function(a1) {
        if (null === a1 || 0 === this.count) return this;
        this._isFrozen && va(this);
        var b = new H;
        b.addAll(a1);
        a1 = [];
        for(var c = this.iterator; c.next();){
            var d = c.value;
            b.contains(d) || a1.push(d);
        }
        this.gp(a1);
        return this;
    };
    t.clear = function() {
        this._isFrozen && va(this);
        this.Ub = {};
        this.Tb = 0;
        null !== this.Sa && this.Sa.reset();
        this.kf = this.ea = null;
        this.yb();
    };
    H.prototype.copy = function() {
        var a1 = new H, b = this.Ub, c;
        for(c in b)a1.add(b[c].value);
        return a1;
    };
    H.prototype.Fa = function() {
        var a1 = Array(this.Tb), b = this.Ub, c = 0, d;
        for(d in b)a1[c] = b[d].value, c++;
        return a1;
    };
    H.prototype.Hv = function() {
        var a1 = new F, b = this.Ub, c;
        for(c in b)a1.add(b[c].value);
        return a1;
    };
    function Qa(a1) {
        a1.__gohashid = jb++;
    }
    function fb(a1) {
        var b = a1.__gohashid;
        void 0 === b && (b = jb++, a1.__gohashid = b);
        return b;
    }
    function bb(a1) {
        return a1.__gohashid;
    }
    ma.Object.defineProperties(H.prototype, {
        count: {
            get: function() {
                return this.Tb;
            }
        },
        size: {
            get: function() {
                return this.Tb;
            }
        },
        iterator: {
            get: function() {
                if (0 >= this.Tb) return Ya;
                var a1 = this.Sa;
                return null !== a1 ? (a1.reset(), a1) : new cb(this);
            }
        }
    });
    H.prototype.toList = H.prototype.Hv;
    H.prototype.toArray = H.prototype.Fa;
    H.prototype.clear = H.prototype.clear;
    H.prototype.retainAll = H.prototype.pA;
    H.prototype.removeAll = H.prototype.gp;
    H.prototype["delete"] = H.prototype.delete;
    H.prototype.remove = H.prototype.remove;
    H.prototype.first = H.prototype.first;
    H.prototype.containsAny = H.prototype.Ty;
    H.prototype.containsAll = H.prototype.Sy;
    H.prototype.has = H.prototype.has;
    H.prototype.contains = H.prototype.contains;
    H.prototype.addAll = H.prototype.addAll;
    H.prototype.add = H.prototype.add;
    H.prototype.thaw = H.prototype.ka;
    H.prototype.freeze = H.prototype.freeze;
    var jb = 1;
    H.className = "Set";
    H.uniqueHash = Qa;
    H.hashIdUnique = fb;
    H.hashId = bb;
    function kb(a1) {
        this.ma = a1;
        this.qa = a1.Ja;
        this.sa = null;
    }
    kb.prototype.reset = function() {
        this.qa = this.ma.Ja;
        this.sa = null;
    };
    kb.prototype.next = function() {
        var a1 = this.ma;
        if (a1.Ja !== this.qa && null === this.key) return !1;
        var b = this.sa;
        b = null === b ? a1.ea : b.va;
        if (null !== b) return this.sa = b, this.value = this.key = a1 = b.key, !0;
        this.de();
        return !1;
    };
    kb.prototype.Ad = function() {
        return this.next();
    };
    kb.prototype.first = function() {
        var a1 = this.ma;
        this.qa = a1.Ja;
        a1 = a1.ea;
        return null !== a1 ? (this.sa = a1, this.value = this.key = a1 = a1.key) : null;
    };
    kb.prototype.any = function(a1) {
        var b = this.ma;
        this.sa = null;
        for(b = b.ea; null !== b;){
            if (a1(b.key)) return !0;
            b = b.va;
        }
        return !1;
    };
    kb.prototype.all = function(a1) {
        var b = this.ma;
        this.sa = null;
        for(b = b.ea; null !== b;){
            if (!a1(b.key)) return !1;
            b = b.va;
        }
        return !0;
    };
    kb.prototype.each = function(a1) {
        var b = this.ma;
        this.sa = null;
        for(b = b.ea; null !== b;)a1(b.key), b = b.va;
        return this;
    };
    kb.prototype.map = function(a1) {
        var b = this.ma;
        this.sa = null;
        var c = new F;
        for(b = b.ea; null !== b;)c.add(a1(b.key)), b = b.va;
        return c.iterator;
    };
    kb.prototype.filter = function(a1) {
        var b = this.ma;
        this.sa = null;
        var c = new F;
        for(b = b.ea; null !== b;){
            var d = b.key;
            a1(d) && c.add(d);
            b = b.va;
        }
        return c.iterator;
    };
    kb.prototype.de = function() {
        this.value = this.key = null;
        this.qa = -1;
    };
    kb.prototype.toString = function() {
        return null !== this.sa ? "MapKeySetIterator@" + this.sa.value : "MapKeySetIterator";
    };
    ma.Object.defineProperties(kb.prototype, {
        iterator: {
            get: function() {
                return this;
            }
        },
        count: {
            get: function() {
                return this.ma.Tb;
            }
        }
    });
    kb.prototype.first = kb.prototype.first;
    kb.prototype.hasNext = kb.prototype.Ad;
    kb.prototype.next = kb.prototype.next;
    kb.prototype.reset = kb.prototype.reset;
    kb.className = "MapKeySetIterator";
    function lb(a1) {
        H.call(this);
        Qa(this);
        this._isFrozen = !0;
        this.ma = a1;
    }
    la(lb, H);
    t = lb.prototype;
    t.freeze = function() {
        return this;
    };
    t.ka = function() {
        return this;
    };
    t.toString = function() {
        return "MapKeySet(" + this.ma.toString() + ")";
    };
    t.add = function() {
        C("This Set is read-only: " + this.toString());
    };
    t.contains = function(a1) {
        return this.ma.contains(a1);
    };
    t.has = function(a1) {
        return this.contains(a1);
    };
    t.remove = function() {
        C("This Set is read-only: " + this.toString());
    };
    t.delete = function(a1) {
        return this.remove(a1);
    };
    t.clear = function() {
        C("This Set is read-only: " + this.toString());
    };
    t.first = function() {
        var a1 = this.ma.ea;
        return null !== a1 ? a1.key : null;
    };
    lb.prototype.any = function(a1) {
        for(var b = this.ma.ea; null !== b;){
            if (a1(b.key)) return !0;
            b = b.va;
        }
        return !1;
    };
    lb.prototype.all = function(a1) {
        for(var b = this.ma.ea; null !== b;){
            if (!a1(b.key)) return !1;
            b = b.va;
        }
        return !0;
    };
    lb.prototype.each = function(a1) {
        for(var b = this.ma.ea; null !== b;)a1(b.key), b = b.va;
        return this;
    };
    lb.prototype.map = function(a1) {
        for(var b = new H, c = this.ma.ea; null !== c;)b.add(a1(c.key)), c = c.va;
        return b;
    };
    lb.prototype.filter = function(a1) {
        for(var b = new H, c = this.ma.ea; null !== c;){
            var d = c.key;
            a1(d) && b.add(d);
            c = c.va;
        }
        return b;
    };
    lb.prototype.copy = function() {
        return new lb(this.ma);
    };
    lb.prototype.Iv = function() {
        var a1 = new H, b = this.ma.Ub, c;
        for(c in b)a1.add(b[c].key);
        return a1;
    };
    lb.prototype.Fa = function() {
        var a1 = this.ma.Ub, b = Array(this.ma.Tb), c = 0, d;
        for(d in a1)b[c] = a1[d].key, c++;
        return b;
    };
    lb.prototype.Hv = function() {
        var a1 = new F, b = this.ma.Ub, c;
        for(c in b)a1.add(b[c].key);
        return a1;
    };
    ma.Object.defineProperties(lb.prototype, {
        count: {
            get: function() {
                return this.ma.Tb;
            }
        },
        size: {
            get: function() {
                return this.ma.Tb;
            }
        },
        iterator: {
            get: function() {
                return 0 >= this.ma.Tb ? Ya : new kb(this.ma);
            }
        }
    });
    lb.prototype.toList = lb.prototype.Hv;
    lb.prototype.toArray = lb.prototype.Fa;
    lb.prototype.toSet = lb.prototype.Iv;
    lb.prototype.first = lb.prototype.first;
    lb.prototype.clear = lb.prototype.clear;
    lb.prototype["delete"] = lb.prototype.delete;
    lb.prototype.remove = lb.prototype.remove;
    lb.prototype.has = lb.prototype.has;
    lb.prototype.contains = lb.prototype.contains;
    lb.prototype.add = lb.prototype.add;
    lb.prototype.thaw = lb.prototype.ka;
    lb.prototype.freeze = lb.prototype.freeze;
    lb.className = "MapKeySet";
    function mb(a1) {
        this.ma = a1;
        a1.jf = null;
        this.qa = a1.Ja;
        this.sa = null;
    }
    mb.prototype.reset = function() {
        var a1 = this.ma;
        a1.jf = null;
        this.qa = a1.Ja;
        this.sa = null;
    };
    mb.prototype.next = function() {
        var a1 = this.ma;
        if (a1.Ja !== this.qa && null === this.key) return !1;
        var b = this.sa;
        b = null === b ? a1.ea : b.va;
        if (null !== b) return this.sa = b, this.value = b.value, this.key = b.key, !0;
        this.de();
        return !1;
    };
    mb.prototype.Ad = function() {
        return this.next();
    };
    mb.prototype.first = function() {
        var a1 = this.ma;
        this.qa = a1.Ja;
        a1 = a1.ea;
        if (null !== a1) {
            this.sa = a1;
            var b = a1.value;
            this.key = a1.key;
            return this.value = b;
        }
        return null;
    };
    mb.prototype.any = function(a1) {
        var b = this.ma;
        this.sa = b.jf = null;
        for(b = b.ea; null !== b;){
            if (a1(b.value)) return !0;
            b = b.va;
        }
        return !1;
    };
    mb.prototype.all = function(a1) {
        var b = this.ma;
        this.sa = b.jf = null;
        for(b = b.ea; null !== b;){
            if (!a1(b.value)) return !1;
            b = b.va;
        }
        return !0;
    };
    mb.prototype.each = function(a1) {
        var b = this.ma;
        this.sa = b.jf = null;
        for(b = b.ea; null !== b;)a1(b.value), b = b.va;
        return this;
    };
    mb.prototype.map = function(a1) {
        var b = this.ma;
        this.sa = b.jf = null;
        var c = new F;
        for(b = b.ea; null !== b;)c.add(a1(b.value)), b = b.va;
        return c.iterator;
    };
    mb.prototype.filter = function(a1) {
        var b = this.ma;
        this.sa = b.jf = null;
        var c = new F;
        for(b = b.ea; null !== b;){
            var d = b.value;
            a1(d) && c.add(d);
            b = b.va;
        }
        return c.iterator;
    };
    mb.prototype.de = function() {
        this.value = this.key = null;
        this.qa = -1;
        this.ma.jf = this;
    };
    mb.prototype.toString = function() {
        return null !== this.sa ? "MapValueSetIterator@" + this.sa.value : "MapValueSetIterator";
    };
    ma.Object.defineProperties(mb.prototype, {
        iterator: {
            get: function() {
                return this;
            }
        },
        count: {
            get: function() {
                return this.ma.Tb;
            }
        }
    });
    mb.prototype.first = mb.prototype.first;
    mb.prototype.hasNext = mb.prototype.Ad;
    mb.prototype.next = mb.prototype.next;
    mb.prototype.reset = mb.prototype.reset;
    mb.className = "MapValueSetIterator";
    function ib(a1, b) {
        this.key = a1;
        this.value = b;
        this.kl = this.va = null;
    }
    ib.prototype.toString = function() {
        return "{" + this.key + ":" + this.value + "}";
    };
    ib.className = "KeyValuePair";
    function nb(a1) {
        this.ma = a1;
        a1.Sa = null;
        this.qa = a1.Ja;
        this.sa = null;
    }
    nb.prototype.reset = function() {
        var a1 = this.ma;
        a1.Sa = null;
        this.qa = a1.Ja;
        this.sa = null;
    };
    nb.prototype.next = function() {
        var a1 = this.ma;
        if (a1.Ja !== this.qa && null === this.key) return !1;
        var b = this.sa;
        b = null === b ? a1.ea : b.va;
        if (null !== b) return this.sa = b, this.key = b.key, this.value = b.value, !0;
        this.de();
        return !1;
    };
    nb.prototype.Ad = function() {
        return this.next();
    };
    nb.prototype.first = function() {
        var a1 = this.ma;
        this.qa = a1.Ja;
        a1 = a1.ea;
        return null !== a1 ? (this.sa = a1, this.key = a1.key, this.value = a1.value, a1) : null;
    };
    nb.prototype.any = function(a1) {
        var b = this.ma;
        this.sa = b.Sa = null;
        for(b = b.ea; null !== b;){
            if (a1(b)) return !0;
            b = b.va;
        }
        return !1;
    };
    nb.prototype.all = function(a1) {
        var b = this.ma;
        this.sa = b.Sa = null;
        for(b = b.ea; null !== b;){
            if (!a1(b)) return !1;
            b = b.va;
        }
        return !0;
    };
    nb.prototype.each = function(a1) {
        var b = this.ma;
        this.sa = b.Sa = null;
        for(b = b.ea; null !== b;)a1(b), b = b.va;
        return this;
    };
    nb.prototype.map = function(a1) {
        var b = this.ma;
        this.sa = b.Sa = null;
        var c = new F;
        for(b = b.ea; null !== b;)c.add(a1(b)), b = b.va;
        return c.iterator;
    };
    nb.prototype.filter = function(a1) {
        var b = this.ma;
        this.sa = b.Sa = null;
        var c = new F;
        for(b = b.ea; null !== b;)a1(b) && c.add(b), b = b.va;
        return c.iterator;
    };
    nb.prototype.de = function() {
        this.value = this.key = null;
        this.qa = -1;
        this.ma.Sa = this;
    };
    nb.prototype.toString = function() {
        return null !== this.sa ? "MapIterator@" + this.sa : "MapIterator";
    };
    ma.Object.defineProperties(nb.prototype, {
        iterator: {
            get: function() {
                return this;
            }
        },
        count: {
            get: function() {
                return this.ma.Tb;
            }
        }
    });
    nb.prototype.first = nb.prototype.first;
    nb.prototype.hasNext = nb.prototype.Ad;
    nb.prototype.next = nb.prototype.next;
    nb.prototype.reset = nb.prototype.reset;
    nb.className = "MapIterator";
    function ob(a1) {
        Qa(this);
        this._isFrozen = !1;
        this.Ub = {};
        this.Tb = 0;
        this.jf = this.Sa = null;
        this.Ja = 0;
        this.kf = this.ea = null;
        "string" === typeof a1 && C("Error: Since 2.0 List/Map/Set constructors no longer take an argument that enforces type.");
        void 0 !== a1 && this.addAll(a1);
    }
    t = ob.prototype;
    t.yb = function() {
        var a1 = this.Ja;
        a1++;
        999999999 < a1 && (a1 = 0);
        this.Ja = a1;
    };
    t.freeze = function() {
        this._isFrozen = !0;
        return this;
    };
    t.ka = function() {
        this._isFrozen = !1;
        return this;
    };
    t.toString = function() {
        return "Map()#" + bb(this);
    };
    t.add = function(a1, b) {
        this._isFrozen && va(this, a1);
        var c = a1;
        za(a1) && (c = fb(a1));
        var d = this.Ub[c];
        void 0 === d ? (this.Tb++, a1 = new ib(a1, b), this.Ub[c] = a1, c = this.kf, null === c ? this.ea = a1 : (a1.kl = c, c.va = a1), this.kf = a1, this.yb()) : d.value = b;
        return this;
    };
    t.set = function(a1, b) {
        return this.add(a1, b);
    };
    t.addAll = function(a1) {
        if (null === a1) return this;
        if (Aa(a1)) for(var b = a1.length, c = 0; c < b; c++){
            var d = a1[c];
            this.add(d.key, d.value);
        }
        else if (a1 instanceof ob) for(a1 = a1.iterator; a1.next();)this.add(a1.key, a1.value);
        else for(a1 = a1.iterator; a1.next();)b = a1.value, this.add(b.key, b.value);
        return this;
    };
    t.first = function() {
        return this.ea;
    };
    ob.prototype.any = function(a1) {
        for(var b = this.ea; null !== b;){
            if (a1(b)) return !0;
            b = b.va;
        }
        return !1;
    };
    ob.prototype.all = function(a1) {
        for(var b = this.ea; null !== b;){
            if (!a1(b)) return !1;
            b = b.va;
        }
        return !0;
    };
    ob.prototype.each = function(a1) {
        for(var b = this.ea; null !== b;)a1(b), b = b.va;
        return this;
    };
    ob.prototype.map = function(a1) {
        for(var b = new ob, c = this.ea; null !== c;)b.add(c.key, a1(c)), c = c.va;
        return b;
    };
    ob.prototype.filter = function(a1) {
        for(var b = new ob, c = this.ea; null !== c;)a1(c) && b.add(c.key, c.value), c = c.va;
        return b;
    };
    t = ob.prototype;
    t.contains = function(a1) {
        var b = a1;
        return za(a1) && (b = bb(a1), void 0 === b) ? !1 : void 0 !== this.Ub[b];
    };
    t.has = function(a1) {
        return this.contains(a1);
    };
    t.I = function(a1) {
        var b = a1;
        if (za(a1) && (b = bb(a1), void 0 === b)) return null;
        a1 = this.Ub[b];
        return void 0 === a1 ? null : a1.value;
    };
    t.get = function(a1) {
        return this.I(a1);
    };
    t.remove = function(a1) {
        if (null === a1) return !1;
        this._isFrozen && va(this, a1);
        var b = a1;
        if (za(a1) && (b = bb(a1), void 0 === b)) return !1;
        a1 = this.Ub[b];
        if (void 0 === a1) return !1;
        var c = a1.va, d = a1.kl;
        null !== c && (c.kl = d);
        null !== d && (d.va = c);
        this.ea === a1 && (this.ea = c);
        this.kf === a1 && (this.kf = d);
        delete this.Ub[b];
        this.Tb--;
        this.yb();
        return !0;
    };
    t.delete = function(a1) {
        return this.remove(a1);
    };
    t.clear = function() {
        this._isFrozen && va(this);
        this.Ub = {};
        this.Tb = 0;
        null !== this.Sa && this.Sa.reset();
        null !== this.jf && this.jf.reset();
        this.kf = this.ea = null;
        this.yb();
    };
    ob.prototype.copy = function() {
        var a1 = new ob, b = this.Ub, c;
        for(c in b){
            var d = b[c];
            a1.add(d.key, d.value);
        }
        return a1;
    };
    ob.prototype.Fa = function() {
        var a1 = this.Ub, b = Array(this.Tb), c = 0, d;
        for(d in a1){
            var e = a1[d];
            b[c] = new ib(e.key, e.value);
            c++;
        }
        return b;
    };
    ob.prototype.Lf = function() {
        return new lb(this);
    };
    ma.Object.defineProperties(ob.prototype, {
        count: {
            get: function() {
                return this.Tb;
            }
        },
        size: {
            get: function() {
                return this.Tb;
            }
        },
        iterator: {
            get: function() {
                if (0 >= this.count) return Ya;
                var a1 = this.Sa;
                return null !== a1 ? (a1.reset(), a1) : new nb(this);
            }
        },
        iteratorKeys: {
            get: function() {
                return 0 >= this.count ? Ya : new kb(this);
            }
        },
        iteratorValues: {
            get: function() {
                if (0 >= this.count) return Ya;
                var a1 = this.jf;
                return null !== a1 ? (a1.reset(), a1) : new mb(this);
            }
        }
    });
    ob.prototype.toKeySet = ob.prototype.Lf;
    ob.prototype.toArray = ob.prototype.Fa;
    ob.prototype.clear = ob.prototype.clear;
    ob.prototype["delete"] = ob.prototype.delete;
    ob.prototype.remove = ob.prototype.remove;
    ob.prototype.get = ob.prototype.get;
    ob.prototype.getValue = ob.prototype.I;
    ob.prototype.has = ob.prototype.has;
    ob.prototype.contains = ob.prototype.contains;
    ob.prototype.first = ob.prototype.first;
    ob.prototype.addAll = ob.prototype.addAll;
    ob.prototype.set = ob.prototype.set;
    ob.prototype.add = ob.prototype.add;
    ob.prototype.thaw = ob.prototype.ka;
    ob.prototype.freeze = ob.prototype.freeze;
    ob.className = "Map";
    function J(a1, b) {
        void 0 === a1 ? this.y = this.x = 0 : "number" === typeof a1 && "number" === typeof b ? (this.x = a1, this.y = b) : C("Invalid arguments to Point constructor: " + a1 + ", " + b);
        this._isFrozen = !1;
    }
    var pb, qb, rb, sb, tb;
    J.prototype.assign = function(a1) {
        this.x = a1.x;
        this.y = a1.y;
        return this;
    };
    J.prototype.h = function(a1, b) {
        this.x = a1;
        this.y = b;
        return this;
    };
    J.prototype.sg = function(a1, b) {
        this.x = a1;
        this.y = b;
        return this;
    };
    J.prototype.set = function(a1) {
        this.x = a1.x;
        this.y = a1.y;
        return this;
    };
    J.prototype.copy = function() {
        var a1 = new J;
        a1.x = this.x;
        a1.y = this.y;
        return a1;
    };
    t = J.prototype;
    t.ja = function() {
        this._isFrozen = !0;
        Object.freeze(this);
        return this;
    };
    t.J = function() {
        return this._isFrozen || Object.isFrozen(this) ? this : this.copy().freeze();
    };
    t.freeze = function() {
        this._isFrozen = !0;
        return this;
    };
    t.ka = function() {
        Object.isFrozen(this) && C("cannot thaw constant: " + this);
        this._isFrozen = !1;
        return this;
    };
    function ub(a1) {
        if ("string" === typeof a1) {
            a1 = a1.split(" ");
            for(var b = 0, c = 0; "" === a1[b];)b++;
            var d = a1[b++];
            d && (c = parseFloat(d));
            for(var e = 0; "" === a1[b];)b++;
            (d = a1[b++]) && (e = parseFloat(d));
            return new J(c, e);
        }
        return new J;
    }
    function vb(a1) {
        return a1.x.toString() + " " + a1.y.toString();
    }
    t.toString = function() {
        return "Point(" + this.x + "," + this.y + ")";
    };
    t.D = function(a1) {
        return a1 instanceof J ? this.x === a1.x && this.y === a1.y : !1;
    };
    t.hi = function(a1, b) {
        return this.x === a1 && this.y === b;
    };
    t.Xa = function(a1) {
        return K.B(this.x, a1.x) && K.B(this.y, a1.y);
    };
    t.add = function(a1) {
        this.x += a1.x;
        this.y += a1.y;
        return this;
    };
    t.re = function(a1) {
        this.x -= a1.x;
        this.y -= a1.y;
        return this;
    };
    t.offset = function(a1, b) {
        this.x += a1;
        this.y += b;
        return this;
    };
    J.prototype.rotate = function(a1) {
        if (0 === a1) return this;
        var b = this.x, c = this.y;
        if (0 === b && 0 === c) return this;
        360 <= a1 ? a1 -= 360 : 0 > a1 && (a1 += 360);
        if (90 === a1) {
            a1 = 0;
            var d = 1;
        } else 180 === a1 ? (a1 = -1, d = 0) : 270 === a1 ? (a1 = 0, d = -1) : (d = a1 * Math.PI / 180, a1 = Math.cos(d), d = Math.sin(d));
        this.x = a1 * b - d * c;
        this.y = d * b + a1 * c;
        return this;
    };
    t = J.prototype;
    t.scale = function(a1, b) {
        this.x *= a1;
        this.y *= b;
        return this;
    };
    t.Bf = function(a1) {
        var b = a1.x - this.x;
        a1 = a1.y - this.y;
        return b * b + a1 * a1;
    };
    t.zd = function(a1, b) {
        a1 -= this.x;
        b -= this.y;
        return a1 * a1 + b * b;
    };
    t.normalize = function() {
        var a1 = this.x, b = this.y, c = Math.sqrt(a1 * a1 + b * b);
        0 < c && (this.x = a1 / c, this.y = b / c);
        return this;
    };
    t.ab = function(a1) {
        return wb(a1.x - this.x, a1.y - this.y);
    };
    t.direction = function(a1, b) {
        return wb(a1 - this.x, b - this.y);
    };
    function wb(a1, b) {
        if (0 === a1) return 0 < b ? 90 : 0 > b ? 270 : 0;
        if (0 === b) return 0 < a1 ? 0 : 180;
        if (isNaN(a1) || isNaN(b)) return 0;
        var c = 180 * Math.atan(Math.abs(b / a1)) / Math.PI;
        0 > a1 ? c = 0 > b ? c + 180 : 180 - c : 0 > b && (c = 360 - c);
        return c;
    }
    t.Ry = function(a1, b) {
        return K.El(a1.x, a1.y, b.x, b.y, this.x, this.y);
    };
    t.fA = function(a1, b, c, d) {
        K.qh(a1, b, c, d, this.x, this.y, this);
        return this;
    };
    t.gA = function(a1, b) {
        K.qh(a1.x, a1.y, b.x, b.y, this.x, this.y, this);
        return this;
    };
    t.uA = function(a1, b, c, d) {
        K.Mo(this.x, this.y, a1, b, c, d, this);
        return this;
    };
    t.vA = function(a1, b) {
        K.Mo(this.x, this.y, a1.x, a1.y, b.width, b.height, this);
        return this;
    };
    t.xi = function(a1, b) {
        this.x = a1.x + b.x * a1.width + b.offsetX;
        this.y = a1.y + b.y * a1.height + b.offsetY;
        return this;
    };
    t.yi = function(a1, b, c, d, e) {
        this.x = a1 + e.x * c + e.offsetX;
        this.y = b + e.y * d + e.offsetY;
        return this;
    };
    t.transform = function(a1) {
        a1.Ga(this);
        return this;
    };
    function xb(a1, b) {
        b.Cd(a1);
        return a1;
    }
    function yb(a1, b, c, d, e, f) {
        var g = e - c, h = f - d, k = g * g + h * h;
        c -= a1;
        d -= b;
        var l = -c * g - d * h;
        if (0 >= l || l >= k) return g = e - a1, h = f - b, Math.min(c * c + d * d, g * g + h * h);
        a1 = g * d - h * c;
        return a1 * a1 / k;
    }
    function zb(a1, b, c, d) {
        a1 = c - a1;
        b = d - b;
        return a1 * a1 + b * b;
    }
    function Ab(a1, b, c, d) {
        a1 = c - a1;
        b = d - b;
        if (0 === a1) return 0 < b ? 90 : 0 > b ? 270 : 0;
        if (0 === b) return 0 < a1 ? 0 : 180;
        if (isNaN(a1) || isNaN(b)) return 0;
        d = 180 * Math.atan(Math.abs(b / a1)) / Math.PI;
        0 > a1 ? d = 0 > b ? d + 180 : 180 - d : 0 > b && (d = 360 - d);
        return d;
    }
    t.w = function() {
        return isFinite(this.x) && isFinite(this.y);
    };
    J.alloc = function() {
        var a1 = Bb.pop();
        return void 0 === a1 ? new J : a1;
    };
    J.allocAt = function(a1, b) {
        var c = Bb.pop();
        if (void 0 === c) return new J(a1, b);
        c.x = a1;
        c.y = b;
        return c;
    };
    J.free = function(a1) {
        Bb.push(a1);
    };
    J.prototype.isReal = J.prototype.w;
    J.prototype.setSpot = J.prototype.yi;
    J.prototype.setRectSpot = J.prototype.xi;
    J.prototype.snapToGridPoint = J.prototype.vA;
    J.prototype.snapToGrid = J.prototype.uA;
    J.prototype.projectOntoLineSegmentPoint = J.prototype.gA;
    J.prototype.projectOntoLineSegment = J.prototype.fA;
    J.intersectingLineSegments = function(a1, b, c, d, e, f, g, h) {
        return K.Ql(a1, b, c, d, e, f, g, h);
    };
    J.prototype.compareWithLineSegmentPoint = J.prototype.Ry;
    J.compareWithLineSegment = function(a1, b, c, d, e, f) {
        return K.El(a1, b, c, d, e, f);
    };
    J.prototype.direction = J.prototype.direction;
    J.prototype.directionPoint = J.prototype.ab;
    J.prototype.normalize = J.prototype.normalize;
    J.prototype.distanceSquared = J.prototype.zd;
    J.prototype.distanceSquaredPoint = J.prototype.Bf;
    J.prototype.scale = J.prototype.scale;
    J.prototype.rotate = J.prototype.rotate;
    J.prototype.offset = J.prototype.offset;
    J.prototype.subtract = J.prototype.re;
    J.prototype.add = J.prototype.add;
    J.prototype.equalsApprox = J.prototype.Xa;
    J.prototype.equalTo = J.prototype.hi;
    J.prototype.equals = J.prototype.D;
    J.prototype.set = J.prototype.set;
    J.prototype.setTo = J.prototype.sg;
    var Bb = [];
    J.className = "Point";
    J.parse = ub;
    J.stringify = vb;
    J.distanceLineSegmentSquared = yb;
    J.distanceSquared = zb;
    J.direction = Ab;
    J.Origin = pb = new J(0, 0).ja();
    J.InfiniteTopLeft = qb = new J(-Infinity, -Infinity).ja();
    J.InfiniteBottomRight = rb = new J(Infinity, Infinity).ja();
    J.SixPoint = sb = new J(6, 6).ja();
    J.NoPoint = tb = new J(NaN, NaN).ja();
    J.parse = ub;
    J.stringify = vb;
    J.distanceLineSegmentSquared = yb;
    J.distanceSquared = zb;
    J.direction = Ab;
    function L(a1, b) {
        void 0 === a1 ? this.height = this.width = 0 : "number" === typeof a1 && (0 <= a1 || isNaN(a1)) && "number" === typeof b && (0 <= b || isNaN(b)) ? (this.width = a1, this.height = b) : C("Invalid arguments to Size constructor: " + a1 + ", " + b);
        this._isFrozen = !1;
    }
    var Cb, Gb, Hb, Ib, Jb, Kb, Lb;
    L.prototype.assign = function(a1) {
        this.width = a1.width;
        this.height = a1.height;
        return this;
    };
    L.prototype.h = function(a1, b) {
        this.width = a1;
        this.height = b;
        return this;
    };
    L.prototype.sg = function(a1, b) {
        this.width = a1;
        this.height = b;
        return this;
    };
    L.prototype.set = function(a1) {
        this.width = a1.width;
        this.height = a1.height;
        return this;
    };
    L.prototype.copy = function() {
        var a1 = new L;
        a1.width = this.width;
        a1.height = this.height;
        return a1;
    };
    t = L.prototype;
    t.ja = function() {
        this._isFrozen = !0;
        Object.freeze(this);
        return this;
    };
    t.J = function() {
        return this._isFrozen || Object.isFrozen(this) ? this : this.copy().freeze();
    };
    t.freeze = function() {
        this._isFrozen = !0;
        return this;
    };
    t.ka = function() {
        Object.isFrozen(this) && C("cannot thaw constant: " + this);
        this._isFrozen = !1;
        return this;
    };
    function Mb(a1) {
        if ("string" === typeof a1) {
            a1 = a1.split(" ");
            for(var b = 0, c = 0; "" === a1[b];)b++;
            var d = a1[b++];
            d && (c = parseFloat(d));
            for(var e = 0; "" === a1[b];)b++;
            (d = a1[b++]) && (e = parseFloat(d));
            return new L(c, e);
        }
        return new L;
    }
    function Nb(a1) {
        return a1.width.toString() + " " + a1.height.toString();
    }
    t.toString = function() {
        return "Size(" + this.width + "," + this.height + ")";
    };
    t.D = function(a1) {
        return a1 instanceof L ? this.width === a1.width && this.height === a1.height : !1;
    };
    t.hi = function(a1, b) {
        return this.width === a1 && this.height === b;
    };
    t.Xa = function(a1) {
        return K.B(this.width, a1.width) && K.B(this.height, a1.height);
    };
    t.Bc = function(a1, b) {
        a1 = this.width + a1;
        this.width = 0 <= a1 ? a1 : 0;
        b = this.height + b;
        this.height = 0 <= b ? b : 0;
        return this;
    };
    t.w = function() {
        return isFinite(this.width) && isFinite(this.height);
    };
    L.alloc = function() {
        var a1 = Ob.pop();
        return void 0 === a1 ? new L : a1;
    };
    L.free = function(a1) {
        Ob.push(a1);
    };
    L.prototype.isReal = L.prototype.w;
    L.prototype.inflate = L.prototype.Bc;
    L.prototype.equalsApprox = L.prototype.Xa;
    L.prototype.equalTo = L.prototype.hi;
    L.prototype.equals = L.prototype.D;
    L.prototype.set = L.prototype.set;
    L.prototype.setTo = L.prototype.sg;
    var Ob = [];
    L.className = "Size";
    L.parse = Mb;
    L.stringify = Nb;
    L.ZeroSize = Cb = new L(0, 0).ja();
    L.OneSize = Gb = new L(1, 1).ja();
    L.SixSize = Hb = new L(6, 6).ja();
    L.EightSize = Ib = new L(8, 8).ja();
    L.TenSize = Jb = new L(10, 10).ja();
    L.InfiniteSize = Kb = new L(Infinity, Infinity).ja();
    L.NoSize = Lb = new L(NaN, NaN).ja();
    L.parse = Mb;
    L.stringify = Nb;
    function N(a1, b, c, d) {
        void 0 === a1 ? this.height = this.width = this.y = this.x = 0 : "number" === typeof a1 && "number" === typeof b && "number" === typeof c && (0 <= c || isNaN(c)) && "number" === typeof d && (0 <= d || isNaN(d)) ? (this.x = a1, this.y = b, this.width = c, this.height = d) : a1 instanceof J ? (c = a1.x, a1 = a1.y, b instanceof J ? (d = b.x, b = b.y, this.x = Math.min(c, d), this.y = Math.min(a1, b), this.width = Math.abs(c - d), this.height = Math.abs(a1 - b)) : b instanceof L ? (this.x = c, this.y = a1, this.width = b.width, this.height = b.height) : C("Incorrect second argument supplied to Rect constructor " + b)) : C("Invalid arguments to Rect constructor: " + a1 + ", " + b + ", " + c + ", " + d);
        this._isFrozen = !1;
    }
    t = N.prototype;
    t.assign = function(a1) {
        this.x = a1.x;
        this.y = a1.y;
        this.width = a1.width;
        this.height = a1.height;
        return this;
    };
    t.h = function(a1, b, c, d) {
        this.x = a1;
        this.y = b;
        this.width = c;
        this.height = d;
        return this;
    };
    function Pb(a1, b, c) {
        a1.width = b;
        a1.height = c;
    }
    t.sg = function(a1, b, c, d) {
        this.x = a1;
        this.y = b;
        this.width = c;
        this.height = d;
        return this;
    };
    t.set = function(a1) {
        this.x = a1.x;
        this.y = a1.y;
        this.width = a1.width;
        this.height = a1.height;
        return this;
    };
    t.dd = function(a1) {
        this.x = a1.x;
        this.y = a1.y;
        return this;
    };
    t.tA = function(a1) {
        this.width = a1.width;
        this.height = a1.height;
        return this;
    };
    N.prototype.copy = function() {
        var a1 = new N;
        a1.x = this.x;
        a1.y = this.y;
        a1.width = this.width;
        a1.height = this.height;
        return a1;
    };
    t = N.prototype;
    t.ja = function() {
        this._isFrozen = !0;
        Object.freeze(this);
        return this;
    };
    t.J = function() {
        return this._isFrozen || Object.isFrozen(this) ? this : this.copy().freeze();
    };
    t.freeze = function() {
        this._isFrozen = !0;
        return this;
    };
    t.ka = function() {
        Object.isFrozen(this) && C("cannot thaw constant: " + this);
        this._isFrozen = !1;
        return this;
    };
    function Qb(a1) {
        if ("string" === typeof a1) {
            a1 = a1.split(" ");
            for(var b = 0, c = 0; "" === a1[b];)b++;
            var d = a1[b++];
            d && (c = parseFloat(d));
            for(var e = 0; "" === a1[b];)b++;
            (d = a1[b++]) && (e = parseFloat(d));
            for(var f = 0; "" === a1[b];)b++;
            (d = a1[b++]) && (f = parseFloat(d));
            for(var g = 0; "" === a1[b];)b++;
            (d = a1[b++]) && (g = parseFloat(d));
            return new N(c, e, f, g);
        }
        return new N;
    }
    function Rb(a1) {
        return a1.x.toString() + " " + a1.y.toString() + " " + a1.width.toString() + " " + a1.height.toString();
    }
    t.toString = function() {
        return "Rect(" + this.x + "," + this.y + "," + this.width + "," + this.height + ")";
    };
    t.D = function(a1) {
        return a1 instanceof N ? this.x === a1.x && this.y === a1.y && this.width === a1.width && this.height === a1.height : !1;
    };
    t.hi = function(a1, b, c, d) {
        return this.x === a1 && this.y === b && this.width === c && this.height === d;
    };
    t.Xa = function(a1) {
        return K.B(this.x, a1.x) && K.B(this.y, a1.y) && K.B(this.width, a1.width) && K.B(this.height, a1.height);
    };
    function Ub(a1, b) {
        return K.$(a1.x, b.x) && K.$(a1.y, b.y) && K.$(a1.width, b.width) && K.$(a1.height, b.height);
    }
    t.ca = function(a1) {
        return this.x <= a1.x && this.x + this.width >= a1.x && this.y <= a1.y && this.y + this.height >= a1.y;
    };
    t.Re = function(a1) {
        return this.x <= a1.x && a1.x + a1.width <= this.x + this.width && this.y <= a1.y && a1.y + a1.height <= this.y + this.height;
    };
    t.contains = function(a1, b, c, d) {
        void 0 === c && (c = 0);
        void 0 === d && (d = 0);
        return this.x <= a1 && a1 + c <= this.x + this.width && this.y <= b && b + d <= this.y + this.height;
    };
    t.offset = function(a1, b) {
        this.x += a1;
        this.y += b;
        return this;
    };
    t.Bc = function(a1, b) {
        return Vb(this, b, a1, b, a1);
    };
    t.Bo = function(a1) {
        return Vb(this, a1.top, a1.right, a1.bottom, a1.left);
    };
    t.Fv = function(a1) {
        return Vb(this, -a1.top, -a1.right, -a1.bottom, -a1.left);
    };
    t.Hz = function(a1, b, c, d) {
        return Vb(this, a1, b, c, d);
    };
    function Vb(a1, b, c, d, e) {
        var f = a1.width;
        c + e <= -f ? (a1.x += f / 2, a1.width = 0) : (a1.x -= e, a1.width += c + e);
        c = a1.height;
        b + d <= -c ? (a1.y += c / 2, a1.height = 0) : (a1.y -= b, a1.height += b + d);
        return a1;
    }
    t.Ex = function(a1) {
        return Wb(this, a1.x, a1.y, a1.width, a1.height);
    };
    t.Uu = function(a1, b, c, d) {
        return Wb(this, a1, b, c, d);
    };
    function Wb(a1, b, c, d, e) {
        var f = Math.max(a1.x, b), g = Math.max(a1.y, c);
        b = Math.min(a1.x + a1.width, b + d);
        c = Math.min(a1.y + a1.height, c + e);
        a1.x = f;
        a1.y = g;
        a1.width = Math.max(0, b - f);
        a1.height = Math.max(0, c - g);
        return a1;
    }
    t.Yc = function(a1) {
        return this.Vu(a1.x, a1.y, a1.width, a1.height);
    };
    t.Vu = function(a1, b, c, d) {
        var e = this.width, f = this.x;
        if (Infinity !== e && Infinity !== c && (e += f, c += a1, isNaN(c) || isNaN(e) || f > c || a1 > e)) return !1;
        a1 = this.height;
        c = this.y;
        return Infinity !== a1 && Infinity !== d && (a1 += c, d += b, isNaN(d) || isNaN(a1) || c > d || b > a1) ? !1 : !0;
    };
    function Xb(a1, b) {
        var c = a1.width, d = a1.x, e = b.x - 10;
        if (d > b.width + 10 + 10 + e || e > c + d) return !1;
        c = a1.height;
        a1 = a1.y;
        d = b.y - 10;
        return a1 > b.height + 10 + 10 + d || d > c + a1 ? !1 : !0;
    }
    t.Ye = function(a1) {
        return Yb(this, a1.x, a1.y, 0, 0);
    };
    t.ed = function(a1) {
        return Yb(this, a1.x, a1.y, a1.width, a1.height);
    };
    t.Kv = function(a1, b, c, d) {
        void 0 === c && (c = 0);
        void 0 === d && (d = 0);
        return Yb(this, a1, b, c, d);
    };
    function Yb(a1, b, c, d, e) {
        var f = Math.min(a1.x, b), g = Math.min(a1.y, c);
        b = Math.max(a1.x + a1.width, b + d);
        c = Math.max(a1.y + a1.height, c + e);
        a1.x = f;
        a1.y = g;
        a1.width = b - f;
        a1.height = c - g;
        return a1;
    }
    t.yi = function(a1, b, c) {
        this.x = a1 - c.offsetX - c.x * this.width;
        this.y = b - c.offsetY - c.y * this.height;
        return this;
    };
    function Zb(a1, b, c, d, e, f, g, h) {
        void 0 === g && (g = 0);
        void 0 === h && (h = 0);
        return a1 <= e && e + g <= a1 + c && b <= f && f + h <= b + d;
    }
    function $b(a1, b, c, d, e, f, g, h) {
        return a1 > g + e || e > c + a1 ? !1 : b > h + f || f > d + b ? !1 : !0;
    }
    t.w = function() {
        return isFinite(this.x) && isFinite(this.y) && isFinite(this.width) && isFinite(this.height);
    };
    t.Mz = function() {
        return 0 === this.width && 0 === this.height;
    };
    N.alloc = function() {
        var a1 = ac.pop();
        return void 0 === a1 ? new N : a1;
    };
    N.allocAt = function(a1, b, c, d) {
        var e = ac.pop();
        return void 0 === e ? new N(a1, b, c, d) : e.h(a1, b, c, d);
    };
    N.free = function(a1) {
        ac.push(a1);
    };
    ma.Object.defineProperties(N.prototype, {
        left: {
            get: function() {
                return this.x;
            },
            set: function(a1) {
                this.x = a1;
            }
        },
        top: {
            get: function() {
                return this.y;
            },
            set: function(a1) {
                this.y = a1;
            }
        },
        right: {
            get: function() {
                return this.x + this.width;
            },
            set: function(a1) {
                this.x += a1 - (this.x + this.width);
            }
        },
        bottom: {
            get: function() {
                return this.y + this.height;
            },
            set: function(a1) {
                this.y += a1 - (this.y + this.height);
            }
        },
        position: {
            get: function() {
                return new J(this.x, this.y);
            },
            set: function(a1) {
                this.x = a1.x;
                this.y = a1.y;
            }
        },
        size: {
            get: function() {
                return new L(this.width, this.height);
            },
            set: function(a1) {
                this.width = a1.width;
                this.height = a1.height;
            }
        },
        center: {
            get: function() {
                return new J(this.x + this.width / 2, this.y + this.height / 2);
            },
            set: function(a1) {
                this.x = a1.x - this.width / 2;
                this.y = a1.y - this.height / 2;
            }
        },
        centerX: {
            get: function() {
                return this.x + this.width / 2;
            },
            set: function(a1) {
                this.x = a1 - this.width / 2;
            }
        },
        centerY: {
            get: function() {
                return this.y + this.height / 2;
            },
            set: function(a1) {
                this.y = a1 - this.height / 2;
            }
        }
    });
    N.prototype.isEmpty = N.prototype.Mz;
    N.prototype.isReal = N.prototype.w;
    N.intersectsLineSegment = function(a1, b, c, d, e, f, g, h) {
        return K.Fx(a1, b, c, d, e, f, g, h);
    };
    N.prototype.setSpot = N.prototype.yi;
    N.prototype.union = N.prototype.Kv;
    N.prototype.unionRect = N.prototype.ed;
    N.prototype.unionPoint = N.prototype.Ye;
    N.prototype.intersects = N.prototype.Vu;
    N.prototype.intersectsRect = N.prototype.Yc;
    N.prototype.intersect = N.prototype.Uu;
    N.prototype.intersectRect = N.prototype.Ex;
    N.prototype.grow = N.prototype.Hz;
    N.prototype.subtractMargin = N.prototype.Fv;
    N.prototype.addMargin = N.prototype.Bo;
    N.prototype.inflate = N.prototype.Bc;
    N.prototype.offset = N.prototype.offset;
    N.prototype.contains = N.prototype.contains;
    N.prototype.containsRect = N.prototype.Re;
    N.prototype.containsPoint = N.prototype.ca;
    N.prototype.equalsApprox = N.prototype.Xa;
    N.prototype.equalTo = N.prototype.hi;
    N.prototype.equals = N.prototype.D;
    N.prototype.setSize = N.prototype.tA;
    N.prototype.setPoint = N.prototype.dd;
    N.prototype.set = N.prototype.set;
    N.prototype.setTo = N.prototype.sg;
    var bc = null, cc = null, ac = [];
    N.className = "Rect";
    N.parse = Qb;
    N.stringify = Rb;
    N.contains = Zb;
    N.intersects = $b;
    N.ZeroRect = bc = new N(0, 0, 0, 0).ja();
    N.NoRect = cc = new N(NaN, NaN, NaN, NaN).ja();
    N.parse = Qb;
    N.stringify = Rb;
    N.contains = Zb;
    N.intersects = $b;
    function dc(a1, b, c, d) {
        void 0 === a1 ? this.left = this.bottom = this.right = this.top = 0 : void 0 === b ? this.left = this.bottom = this.right = this.top = a1 : void 0 === c ? (this.top = a1, this.right = b, this.bottom = a1, this.left = b) : void 0 !== d ? (this.top = a1, this.right = b, this.bottom = c, this.left = d) : C("Invalid arguments to Margin constructor: " + a1 + ", " + b + ", " + c + ", " + d);
        this._isFrozen = !1;
    }
    dc.prototype.assign = function(a1) {
        this.top = a1.top;
        this.right = a1.right;
        this.bottom = a1.bottom;
        this.left = a1.left;
        return this;
    };
    dc.prototype.sg = function(a1, b, c, d) {
        this.top = a1;
        this.right = b;
        this.bottom = c;
        this.left = d;
        return this;
    };
    dc.prototype.set = function(a1) {
        this.top = a1.top;
        this.right = a1.right;
        this.bottom = a1.bottom;
        this.left = a1.left;
        return this;
    };
    dc.prototype.copy = function() {
        var a1 = new dc;
        a1.top = this.top;
        a1.right = this.right;
        a1.bottom = this.bottom;
        a1.left = this.left;
        return a1;
    };
    t = dc.prototype;
    t.ja = function() {
        this._isFrozen = !0;
        Object.freeze(this);
        return this;
    };
    t.J = function() {
        return this._isFrozen || Object.isFrozen(this) ? this : this.copy().freeze();
    };
    t.freeze = function() {
        this._isFrozen = !0;
        return this;
    };
    t.ka = function() {
        Object.isFrozen(this) && C("cannot thaw constant: " + this);
        this._isFrozen = !1;
        return this;
    };
    function ic(a1) {
        if ("string" === typeof a1) {
            a1 = a1.split(" ");
            for(var b = 0, c = NaN; "" === a1[b];)b++;
            var d = a1[b++];
            d && (c = parseFloat(d));
            if (isNaN(c)) return new dc;
            for(var e = NaN; "" === a1[b];)b++;
            (d = a1[b++]) && (e = parseFloat(d));
            if (isNaN(e)) return new dc(c);
            for(var f = NaN; "" === a1[b];)b++;
            (d = a1[b++]) && (f = parseFloat(d));
            if (isNaN(f)) return new dc(c, e);
            for(var g = NaN; "" === a1[b];)b++;
            (d = a1[b++]) && (g = parseFloat(d));
            return isNaN(g) ? new dc(c, e) : new dc(c, e, f, g);
        }
        return new dc;
    }
    function jc(a1) {
        return a1.top.toString() + " " + a1.right.toString() + " " + a1.bottom.toString() + " " + a1.left.toString();
    }
    t.toString = function() {
        return "Margin(" + this.top + "," + this.right + "," + this.bottom + "," + this.left + ")";
    };
    t.D = function(a1) {
        return a1 instanceof dc ? this.top === a1.top && this.right === a1.right && this.bottom === a1.bottom && this.left === a1.left : !1;
    };
    t.hi = function(a1, b, c, d) {
        return this.top === a1 && this.right === b && this.bottom === c && this.left === d;
    };
    t.Xa = function(a1) {
        return K.B(this.top, a1.top) && K.B(this.right, a1.right) && K.B(this.bottom, a1.bottom) && K.B(this.left, a1.left);
    };
    t.w = function() {
        return isFinite(this.top) && isFinite(this.right) && isFinite(this.bottom) && isFinite(this.left);
    };
    dc.alloc = function() {
        var a1 = kc.pop();
        return void 0 === a1 ? new dc : a1;
    };
    dc.free = function(a1) {
        kc.push(a1);
    };
    dc.prototype.isReal = dc.prototype.w;
    dc.prototype.equalsApprox = dc.prototype.Xa;
    dc.prototype.equalTo = dc.prototype.hi;
    dc.prototype.equals = dc.prototype.D;
    dc.prototype.set = dc.prototype.set;
    dc.prototype.setTo = dc.prototype.sg;
    var lc = null, mc = null, kc = [];
    dc.className = "Margin";
    dc.parse = ic;
    dc.stringify = jc;
    dc.ZeroMargin = lc = new dc(0, 0, 0, 0).ja();
    dc.TwoMargin = mc = new dc(2, 2, 2, 2).ja();
    dc.parse = ic;
    dc.stringify = jc;
    function O(a1, b, c, d) {
        void 0 === a1 ? this.offsetY = this.offsetX = this.y = this.x = 0 : (void 0 === b && (b = 0), void 0 === c && (c = 0), void 0 === d && (d = 0), this.x = a1, this.y = b, this.offsetX = c, this.offsetY = d);
        this._isFrozen = !1;
    }
    var rc, sc, tc, uc, vc, wc, yc, zc, Ac, Bc, Cc, Dc, Ec, Fc, Gc, Ic, Jc, Kc, Lc, Mc, Nc, Oc, Pc, Qc, Rc, Sc, Wc, Xc, Yc, Zc, $c, ad, bd, cd, dd, gd;
    O.prototype.assign = function(a1) {
        this.x = a1.x;
        this.y = a1.y;
        this.offsetX = a1.offsetX;
        this.offsetY = a1.offsetY;
        return this;
    };
    O.prototype.sg = function(a1, b, c, d) {
        this.x = a1;
        this.y = b;
        this.offsetX = c;
        this.offsetY = d;
        return this;
    };
    O.prototype.set = function(a1) {
        this.x = a1.x;
        this.y = a1.y;
        this.offsetX = a1.offsetX;
        this.offsetY = a1.offsetY;
        return this;
    };
    O.prototype.copy = function() {
        var a1 = new O;
        a1.x = this.x;
        a1.y = this.y;
        a1.offsetX = this.offsetX;
        a1.offsetY = this.offsetY;
        return a1;
    };
    t = O.prototype;
    t.ja = function() {
        this._isFrozen = !0;
        Object.freeze(this);
        return this;
    };
    t.J = function() {
        return this._isFrozen || Object.isFrozen(this) ? this : this.copy().freeze();
    };
    t.freeze = function() {
        this._isFrozen = !0;
        return this;
    };
    t.ka = function() {
        Object.isFrozen(this) && C("cannot thaw constant: " + this);
        this._isFrozen = !1;
        return this;
    };
    function hd(a1, b) {
        a1.x = NaN;
        a1.y = NaN;
        a1.offsetX = b;
        return a1;
    }
    function id(a1) {
        if ("string" === typeof a1) {
            a1 = a1.trim();
            if ("None" === a1) return rc;
            if ("TopLeft" === a1) return sc;
            if ("Top" === a1 || "TopCenter" === a1 || "MiddleTop" === a1) return tc;
            if ("TopRight" === a1) return uc;
            if ("Left" === a1 || "LeftCenter" === a1 || "MiddleLeft" === a1) return vc;
            if ("Center" === a1) return wc;
            if ("Right" === a1 || "RightCenter" === a1 || "MiddleRight" === a1) return yc;
            if ("BottomLeft" === a1) return zc;
            if ("Bottom" === a1 || "BottomCenter" === a1 || "MiddleBottom" === a1) return Ac;
            if ("BottomRight" === a1) return Bc;
            if ("TopSide" === a1) return Cc;
            if ("LeftSide" === a1) return Dc;
            if ("RightSide" === a1) return Ec;
            if ("BottomSide" === a1) return Fc;
            if ("TopBottomSides" === a1) return Gc;
            if ("LeftRightSides" === a1) return Ic;
            if ("TopLeftSides" === a1) return Jc;
            if ("TopRightSides" === a1) return Kc;
            if ("BottomLeftSides" === a1) return Lc;
            if ("BottomRightSides" === a1) return Mc;
            if ("NotTopSide" === a1) return Nc;
            if ("NotLeftSide" === a1) return Oc;
            if ("NotRightSide" === a1) return Pc;
            if ("NotBottomSide" === a1) return Qc;
            if ("AllSides" === a1) return Rc;
            if ("Default" === a1) return Sc;
            a1 = a1.split(" ");
            for(var b = 0, c = 0; "" === a1[b];)b++;
            var d = a1[b++];
            void 0 !== d && 0 < d.length && (c = parseFloat(d));
            for(var e = 0; "" === a1[b];)b++;
            d = a1[b++];
            void 0 !== d && 0 < d.length && (e = parseFloat(d));
            for(var f = 0; "" === a1[b];)b++;
            d = a1[b++];
            void 0 !== d && 0 < d.length && (f = parseFloat(d));
            for(var g = 0; "" === a1[b];)b++;
            d = a1[b++];
            void 0 !== d && 0 < d.length && (g = parseFloat(d));
            return new O(c, e, f, g);
        }
        return new O;
    }
    function jd(a1) {
        return a1.sb() ? a1.x.toString() + " " + a1.y.toString() + " " + a1.offsetX.toString() + " " + a1.offsetY.toString() : a1.toString();
    }
    t.toString = function() {
        return this.sb() ? 0 === this.offsetX && 0 === this.offsetY ? "Spot(" + this.x + "," + this.y + ")" : "Spot(" + this.x + "," + this.y + "," + this.offsetX + "," + this.offsetY + ")" : this.D(rc) ? "None" : this.D(sc) ? "TopLeft" : this.D(tc) ? "Top" : this.D(uc) ? "TopRight" : this.D(vc) ? "Left" : this.D(wc) ? "Center" : this.D(yc) ? "Right" : this.D(zc) ? "BottomLeft" : this.D(Ac) ? "Bottom" : this.D(Bc) ? "BottomRight" : this.D(Cc) ? "TopSide" : this.D(Dc) ? "LeftSide" : this.D(Ec) ? "RightSide" : this.D(Fc) ? "BottomSide" : this.D(Gc) ? "TopBottomSides" : this.D(Ic) ? "LeftRightSides" : this.D(Jc) ? "TopLeftSides" : this.D(Kc) ? "TopRightSides" : this.D(Lc) ? "BottomLeftSides" : this.D(Mc) ? "BottomRightSides" : this.D(Nc) ? "NotTopSide" : this.D(Oc) ? "NotLeftSide" : this.D(Pc) ? "NotRightSide" : this.D(Qc) ? "NotBottomSide" : this.D(Rc) ? "AllSides" : this.D(Sc) ? "Default" : "None";
    };
    t.D = function(a1) {
        return a1 instanceof O ? (this.x === a1.x || isNaN(this.x) && isNaN(a1.x)) && (this.y === a1.y || isNaN(this.y) && isNaN(a1.y)) && this.offsetX === a1.offsetX && this.offsetY === a1.offsetY : !1;
    };
    t.gv = function() {
        return new O(.5 - (this.x - .5), .5 - (this.y - .5), -this.offsetX, -this.offsetY);
    };
    t.Hf = function(a1) {
        if (!this.$c()) return !1;
        if (!a1.$c()) {
            if (a1.D(Wc)) a1 = Dc;
            else if (a1.D(Xc)) a1 = Ec;
            else if (a1.D(Yc)) a1 = Cc;
            else if (a1.D(Zc)) a1 = Fc;
            else return !1;
        }
        a1 = a1.offsetY;
        return (this.offsetY & a1) === a1;
    };
    t.sb = function() {
        return !isNaN(this.x) && !isNaN(this.y);
    };
    t.Mc = function() {
        return isNaN(this.x) || isNaN(this.y);
    };
    t.$c = function() {
        return isNaN(this.x) && isNaN(this.y) && 1 === this.offsetX && 0 !== this.offsetY;
    };
    t.xs = function() {
        return isNaN(this.x) && isNaN(this.y) && 0 === this.offsetX && 0 === this.offsetY;
    };
    t.Yb = function() {
        return isNaN(this.x) && isNaN(this.y) && -1 === this.offsetX && 0 === this.offsetY;
    };
    O.alloc = function() {
        var a1 = kd.pop();
        return void 0 === a1 ? new O : a1;
    };
    O.free = function(a1) {
        kd.push(a1);
    };
    O.prototype.isDefault = O.prototype.Yb;
    O.prototype.isNone = O.prototype.xs;
    O.prototype.isSide = O.prototype.$c;
    O.prototype.isNoSpot = O.prototype.Mc;
    O.prototype.isSpot = O.prototype.sb;
    O.prototype.includesSide = O.prototype.Hf;
    O.prototype.opposite = O.prototype.gv;
    O.prototype.equals = O.prototype.D;
    O.prototype.set = O.prototype.set;
    O.prototype.setTo = O.prototype.sg;
    var kd = [];
    O.className = "Spot";
    O.parse = id;
    O.stringify = jd;
    O.None = rc = hd(new O(0, 0, 0, 0), 0).ja();
    O.Default = Sc = hd(new O(0, 0, -1, 0), -1).ja();
    O.TopLeft = sc = new O(0, 0, 0, 0).ja();
    O.TopCenter = tc = new O(.5, 0, 0, 0).ja();
    O.TopRight = uc = new O(1, 0, 0, 0).ja();
    O.LeftCenter = vc = new O(0, .5, 0, 0).ja();
    O.Center = wc = new O(.5, .5, 0, 0).ja();
    O.RightCenter = yc = new O(1, .5, 0, 0).ja();
    O.BottomLeft = zc = new O(0, 1, 0, 0).ja();
    O.BottomCenter = Ac = new O(.5, 1, 0, 0).ja();
    O.BottomRight = Bc = new O(1, 1, 0, 0).ja();
    O.MiddleTop = $c = tc;
    O.MiddleLeft = ad = vc;
    O.MiddleRight = bd = yc;
    O.MiddleBottom = cd = Ac;
    O.Top = Yc = tc;
    O.Left = Wc = vc;
    O.Right = Xc = yc;
    O.Bottom = Zc = Ac;
    O.TopSide = Cc = hd(new O(0, 0, 1, 1), 1).ja();
    O.LeftSide = Dc = hd(new O(0, 0, 1, 2), 1).ja();
    O.RightSide = Ec = hd(new O(0, 0, 1, 4), 1).ja();
    O.BottomSide = Fc = hd(new O(0, 0, 1, 8), 1).ja();
    O.TopBottomSides = Gc = hd(new O(0, 0, 1, 9), 1).ja();
    O.LeftRightSides = Ic = hd(new O(0, 0, 1, 6), 1).ja();
    O.TopLeftSides = Jc = hd(new O(0, 0, 1, 3), 1).ja();
    O.TopRightSides = Kc = hd(new O(0, 0, 1, 5), 1).ja();
    O.BottomLeftSides = Lc = hd(new O(0, 0, 1, 10), 1).ja();
    O.BottomRightSides = Mc = hd(new O(0, 0, 1, 12), 1).ja();
    O.NotTopSide = Nc = hd(new O(0, 0, 1, 14), 1).ja();
    O.NotLeftSide = Oc = hd(new O(0, 0, 1, 13), 1).ja();
    O.NotRightSide = Pc = hd(new O(0, 0, 1, 11), 1).ja();
    O.NotBottomSide = Qc = hd(new O(0, 0, 1, 7), 1).ja();
    O.AllSides = Rc = hd(new O(0, 0, 1, 15), 1).ja();
    dd = new O(.156, .156).ja();
    gd = new O(.844, .844).ja();
    O.parse = id;
    O.stringify = jd;
    function ld() {
        this.m11 = 1;
        this.m21 = this.m12 = 0;
        this.m22 = 1;
        this.dy = this.dx = 0;
    }
    ld.prototype.set = function(a1) {
        this.m11 = a1.m11;
        this.m12 = a1.m12;
        this.m21 = a1.m21;
        this.m22 = a1.m22;
        this.dx = a1.dx;
        this.dy = a1.dy;
        return this;
    };
    ld.prototype.setTransform = function(a1, b, c, d, e, f) {
        this.m11 = a1;
        this.m12 = b;
        this.m21 = c;
        this.m22 = d;
        this.dx = e;
        this.dy = f;
        return this;
    };
    ld.prototype.copy = function() {
        var a1 = new ld;
        a1.m11 = this.m11;
        a1.m12 = this.m12;
        a1.m21 = this.m21;
        a1.m22 = this.m22;
        a1.dx = this.dx;
        a1.dy = this.dy;
        return a1;
    };
    ld.prototype.toString = function() {
        return "Transform(" + this.m11 + "," + this.m12 + "," + this.m21 + "," + this.m22 + "," + this.dx + "," + this.dy + ")";
    };
    ld.prototype.D = function(a1) {
        return this.m11 === a1.m11 && this.m12 === a1.m12 && this.m21 === a1.m21 && this.m22 === a1.m22 && this.dx === a1.dx && this.dy === a1.dy;
    };
    ld.prototype.vs = function() {
        return 0 === this.dx && 0 === this.dy && 1 === this.m11 && 0 === this.m12 && 0 === this.m21 && 1 === this.m22;
    };
    ld.prototype.reset = function() {
        this.m11 = 1;
        this.m21 = this.m12 = 0;
        this.m22 = 1;
        this.dy = this.dx = 0;
        return this;
    };
    ld.prototype.multiply = function(a1) {
        var b = this.m11 * a1.m11 + this.m21 * a1.m12, c = this.m12 * a1.m11 + this.m22 * a1.m12, d = this.m11 * a1.m21 + this.m21 * a1.m22, e = this.m12 * a1.m21 + this.m22 * a1.m22;
        this.dx = this.m11 * a1.dx + this.m21 * a1.dy + this.dx;
        this.dy = this.m12 * a1.dx + this.m22 * a1.dy + this.dy;
        this.m11 = b;
        this.m12 = c;
        this.m21 = d;
        this.m22 = e;
        return this;
    };
    ld.prototype.bv = function(a1) {
        var b = 1 / (a1.m11 * a1.m22 - a1.m12 * a1.m21), c = a1.m22 * b, d = -a1.m12 * b, e = -a1.m21 * b, f = a1.m11 * b, g = b * (a1.m21 * a1.dy - a1.m22 * a1.dx);
        a1 = b * (a1.m12 * a1.dx - a1.m11 * a1.dy);
        b = this.m11 * c + this.m21 * d;
        c = this.m12 * c + this.m22 * d;
        d = this.m11 * e + this.m21 * f;
        e = this.m12 * e + this.m22 * f;
        this.dx = this.m11 * g + this.m21 * a1 + this.dx;
        this.dy = this.m12 * g + this.m22 * a1 + this.dy;
        this.m11 = b;
        this.m12 = c;
        this.m21 = d;
        this.m22 = e;
        return this;
    };
    ld.prototype.Uj = function() {
        var a1 = 1 / (this.m11 * this.m22 - this.m12 * this.m21), b = -this.m12 * a1, c = -this.m21 * a1, d = this.m11 * a1, e = a1 * (this.m21 * this.dy - this.m22 * this.dx), f = a1 * (this.m12 * this.dx - this.m11 * this.dy);
        this.m11 = this.m22 * a1;
        this.m12 = b;
        this.m21 = c;
        this.m22 = d;
        this.dx = e;
        this.dy = f;
        return this;
    };
    ld.prototype.rotate = function(a1, b, c) {
        360 <= a1 ? a1 -= 360 : 0 > a1 && (a1 += 360);
        if (0 === a1) return this;
        this.translate(b, c);
        if (90 === a1) {
            a1 = 0;
            var d = 1;
        } else 180 === a1 ? (a1 = -1, d = 0) : 270 === a1 ? (a1 = 0, d = -1) : (d = a1 * Math.PI / 180, a1 = Math.cos(d), d = Math.sin(d));
        var e = this.m12 * a1 + this.m22 * d, f = this.m11 * -d + this.m21 * a1, g = this.m12 * -d + this.m22 * a1;
        this.m11 = this.m11 * a1 + this.m21 * d;
        this.m12 = e;
        this.m21 = f;
        this.m22 = g;
        this.translate(-b, -c);
        return this;
    };
    t = ld.prototype;
    t.translate = function(a1, b) {
        this.dx += this.m11 * a1 + this.m21 * b;
        this.dy += this.m12 * a1 + this.m22 * b;
        return this;
    };
    t.scale = function(a1, b) {
        void 0 === b && (b = a1);
        this.m11 *= a1;
        this.m12 *= a1;
        this.m21 *= b;
        this.m22 *= b;
        return this;
    };
    t.Ga = function(a1) {
        var b = a1.x, c = a1.y;
        return a1.h(b * this.m11 + c * this.m21 + this.dx, b * this.m12 + c * this.m22 + this.dy);
    };
    t.Cd = function(a1) {
        var b = 1 / (this.m11 * this.m22 - this.m12 * this.m21), c = a1.x, d = a1.y;
        return a1.h(c * this.m22 * b + d * -this.m21 * b + b * (this.m21 * this.dy - this.m22 * this.dx), c * -this.m12 * b + d * this.m11 * b + b * (this.m12 * this.dx - this.m11 * this.dy));
    };
    t.Eu = function(a1) {
        var b = 1 / (this.m11 * this.m22 - this.m12 * this.m21), c = 1.25 * a1.x, d = 1.2 * a1.y;
        return a1.h(c * this.m22 * b + d * -this.m21 * b + b * (this.m21 * this.dy - this.m22 * this.dx), c * -this.m12 * b + d * this.m11 * b + b * (this.m12 * this.dx - this.m11 * this.dy));
    };
    t.op = function(a1) {
        var b = a1.x, c = a1.y, d = b + a1.width, e = c + a1.height, f = this.m11, g = this.m12, h = this.m21, k = this.m22, l = this.dx, m = this.dy, n = b * f + c * h + l, p = b * g + c * k + m, q = d * f + c * h + l, r = d * g + c * k + m;
        c = b * f + e * h + l;
        b = b * g + e * k + m;
        f = d * f + e * h + l;
        d = d * g + e * k + m;
        e = Math.min(n, q);
        n = Math.max(n, q);
        q = Math.min(p, r);
        p = Math.max(p, r);
        e = Math.min(e, c);
        n = Math.max(n, c);
        q = Math.min(q, b);
        p = Math.max(p, b);
        e = Math.min(e, f);
        n = Math.max(n, f);
        q = Math.min(q, d);
        p = Math.max(p, d);
        a1.h(e, q, n - e, p - q);
        return a1;
    };
    ld.alloc = function() {
        var a1 = md.pop();
        return void 0 === a1 ? new ld : a1;
    };
    ld.free = function(a1) {
        md.push(a1);
    };
    ld.prototype.transformRect = ld.prototype.op;
    ld.prototype.transformPoint = ld.prototype.Ga;
    ld.prototype.scale = ld.prototype.scale;
    ld.prototype.translate = ld.prototype.translate;
    ld.prototype.rotate = ld.prototype.rotate;
    ld.prototype.invert = ld.prototype.Uj;
    ld.prototype.multiplyInverted = ld.prototype.bv;
    ld.prototype.multiply = ld.prototype.multiply;
    ld.prototype.reset = ld.prototype.reset;
    ld.prototype.isIdentity = ld.prototype.vs;
    ld.prototype.equals = ld.prototype.D;
    ld.prototype.setTransform = ld.prototype.setTransform;
    ld.prototype.set = ld.prototype.set;
    var md = [];
    ld.className = "Transform";
    ld.xF = "54a702f3e53909c447824c6706603faf4c";
    var K = {
        AA: "7da71ca0ad381e90",
        wg: (Math.sqrt(2) - 1) / 3 * 4,
        Uv: null,
        sqrt: function(a1) {
            if (0 >= a1) return 0;
            var b = K.Uv;
            if (null === b) {
                b = [];
                for(var c = 0; 2E3 >= c; c++)b[c] = Math.sqrt(c);
                K.Uv = b;
            }
            return 1 > a1 ? (c = 1 / a1, 2E3 >= c ? 1 / b[c | 0] : Math.sqrt(a1)) : 2E3 >= a1 ? b[a1 | 0] : Math.sqrt(a1);
        },
        B: function(a1, b) {
            a1 -= b;
            return .5 > a1 && -0.5 < a1;
        },
        $: function(a1, b) {
            a1 -= b;
            return 5E-8 > a1 && -0.00000005 < a1;
        },
        Zb: function(a1, b, c, d, e, f, g) {
            0 >= e && (e = 1E-6);
            if (a1 < c) {
                var h = a1;
                var k = c;
            } else h = c, k = a1;
            if (b < d) {
                var l = b;
                var m = d;
            } else l = d, m = b;
            if (a1 === c) return l <= g && g <= m && a1 - e <= f && f <= a1 + e;
            if (b === d) return h <= f && f <= k && b - e <= g && g <= b + e;
            k += e;
            h -= e;
            if (h <= f && f <= k && (m += e, l -= e, l <= g && g <= m)) {
                if (k - h > m - l) {
                    if (a1 - c > e || c - a1 > e) {
                        if (f = (d - b) / (c - a1) * (f - a1) + b, f - e <= g && g <= f + e) return !0;
                    } else return !0;
                } else if (b - d > e || d - b > e) {
                    if (g = (c - a1) / (d - b) * (g - b) + a1, g - e <= f && f <= g + e) return !0;
                } else return !0;
            }
            return !1;
        },
        bs: function(a1, b, c, d, e, f, g, h, k, l, m, n) {
            if (K.Zb(a1, b, g, h, n, c, d) && K.Zb(a1, b, g, h, n, e, f)) return K.Zb(a1, b, g, h, n, l, m);
            var p = (a1 + c) / 2, q = (b + d) / 2, r = (c + e) / 2, u = (d + f) / 2;
            e = (e + g) / 2;
            f = (f + h) / 2;
            d = (p + r) / 2;
            c = (q + u) / 2;
            r = (r + e) / 2;
            u = (u + f) / 2;
            var w = (d + r) / 2, v = (c + u) / 2;
            return K.bs(a1, b, p, q, d, c, w, v, k, l, m, n) || K.bs(w, v, r, u, e, f, g, h, k, l, m, n);
        },
        ax: function(a1, b, c, d, e, f, g, h, k) {
            var l = (c + e) / 2, m = (d + f) / 2;
            k.h((((a1 + c) / 2 + l) / 2 + (l + (e + g) / 2) / 2) / 2, (((b + d) / 2 + m) / 2 + (m + (f + h) / 2) / 2) / 2);
            return k;
        },
        My: function(a1, b, c, d, e, f, g, h) {
            var k = (c + e) / 2, l = (d + f) / 2;
            return Ab(((a1 + c) / 2 + k) / 2, ((b + d) / 2 + l) / 2, (k + (e + g) / 2) / 2, (l + (f + h) / 2) / 2);
        },
        Cl: function(a1, b, c, d, e, f, g, h, k, l) {
            if (K.Zb(a1, b, g, h, k, c, d) && K.Zb(a1, b, g, h, k, e, f)) Yb(l, a1, b, 0, 0), Yb(l, g, h, 0, 0);
            else {
                var m = (a1 + c) / 2, n = (b + d) / 2, p = (c + e) / 2, q = (d + f) / 2;
                e = (e + g) / 2;
                f = (f + h) / 2;
                d = (m + p) / 2;
                c = (n + q) / 2;
                p = (p + e) / 2;
                q = (q + f) / 2;
                var r = (d + p) / 2, u = (c + q) / 2;
                K.Cl(a1, b, m, n, d, c, r, u, k, l);
                K.Cl(r, u, p, q, e, f, g, h, k, l);
            }
            return l;
        },
        Qe: function(a1, b, c, d, e, f, g, h, k, l) {
            if (K.Zb(a1, b, g, h, k, c, d) && K.Zb(a1, b, g, h, k, e, f)) 0 === l.length && (l.push(a1), l.push(b)), l.push(g), l.push(h);
            else {
                var m = (a1 + c) / 2, n = (b + d) / 2, p = (c + e) / 2, q = (d + f) / 2;
                e = (e + g) / 2;
                f = (f + h) / 2;
                d = (m + p) / 2;
                c = (n + q) / 2;
                p = (p + e) / 2;
                q = (q + f) / 2;
                var r = (d + p) / 2, u = (c + q) / 2;
                K.Qe(a1, b, m, n, d, c, r, u, k, l);
                K.Qe(r, u, p, q, e, f, g, h, k, l);
            }
            return l;
        },
        jv: function(a1, b, c, d, e, f, g, h, k, l) {
            if (K.Zb(a1, b, e, f, l, c, d)) return K.Zb(a1, b, e, f, l, h, k);
            var m = (a1 + c) / 2, n = (b + d) / 2;
            c = (c + e) / 2;
            d = (d + f) / 2;
            var p = (m + c) / 2, q = (n + d) / 2;
            return K.jv(a1, b, m, n, p, q, g, h, k, l) || K.jv(p, q, c, d, e, f, g, h, k, l);
        },
        OA: function(a1, b, c, d, e, f, g) {
            g.h(((a1 + c) / 2 + (c + e) / 2) / 2, ((b + d) / 2 + (d + f) / 2) / 2);
            return g;
        },
        iv: function(a1, b, c, d, e, f, g, h) {
            if (K.Zb(a1, b, e, f, g, c, d)) Yb(h, a1, b, 0, 0), Yb(h, e, f, 0, 0);
            else {
                var k = (a1 + c) / 2, l = (b + d) / 2;
                c = (c + e) / 2;
                d = (d + f) / 2;
                var m = (k + c) / 2, n = (l + d) / 2;
                K.iv(a1, b, k, l, m, n, g, h);
                K.iv(m, n, c, d, e, f, g, h);
            }
            return h;
        },
        cp: function(a1, b, c, d, e, f, g, h) {
            if (K.Zb(a1, b, e, f, g, c, d)) 0 === h.length && (h.push(a1), h.push(b)), h.push(e), h.push(f);
            else {
                var k = (a1 + c) / 2, l = (b + d) / 2;
                c = (c + e) / 2;
                d = (d + f) / 2;
                var m = (k + c) / 2, n = (l + d) / 2;
                K.cp(a1, b, k, l, m, n, g, h);
                K.cp(m, n, c, d, e, f, g, h);
            }
            return h;
        },
        Do: function(a1, b, c, d, e, f, g, h, k, l, m, n, p, q) {
            if (K.Zb(a1, b, g, h, p, c, d) && K.Zb(a1, b, g, h, p, e, f)) {
                if (!K.Ql(a1, b, g, h, k, l, m, n)) return !1;
                p = (a1 - g) * (l - n) - (b - h) * (k - m);
                if (0 === p) return !1;
                q.h(((a1 * h - b * g) * (k - m) - (a1 - g) * (k * n - l * m)) / p, ((a1 * h - b * g) * (l - n) - (b - h) * (k * n - l * m)) / p);
                return !0;
            }
            var r = (a1 + c) / 2, u = (b + d) / 2, w = (c + e) / 2, v = (d + f) / 2;
            e = (e + g) / 2;
            f = (f + h) / 2;
            d = (r + w) / 2;
            c = (u + v) / 2;
            w = (w + e) / 2;
            v = (v + f) / 2;
            var y = (d + w) / 2, z = (c + v) / 2, A = Infinity, B = !1, D = 0, M = 0;
            K.Do(a1, b, r, u, d, c, y, z, k, l, m, n, p, q) && (a1 = (q.x - k) * (q.x - k) + (q.y - l) * (q.y - l), a1 < A && (A = a1, B = !0, D = q.x, M = q.y));
            K.Do(y, z, w, v, e, f, g, h, k, l, m, n, p, q) && (q.x - k) * (q.x - k) + (q.y - l) * (q.y - l) < A && (B = !0, D = q.x, M = q.y);
            B && (q.x = D, q.y = M);
            return B;
        },
        Eo: function(a1, b, c, d, e, f, g, h, k, l, m, n, p) {
            var q = 0;
            if (K.Zb(a1, b, g, h, p, c, d) && K.Zb(a1, b, g, h, p, e, f)) {
                p = (a1 - g) * (l - n) - (b - h) * (k - m);
                if (0 === p) return q;
                var r = ((a1 * h - b * g) * (k - m) - (a1 - g) * (k * n - l * m)) / p, u = ((a1 * h - b * g) * (l - n) - (b - h) * (k * n - l * m)) / p;
                if (r >= m) return q;
                if ((k > m ? k - m : m - k) < (l > n ? l - n : n - l)) {
                    if (b < h ? (k = b, a1 = h) : (k = h, a1 = b), u < k || u > a1) return q;
                } else if (a1 < g ? (k = a1, a1 = g) : k = g, r < k || r > a1) return q;
                0 < p ? q++ : 0 > p && q--;
            } else {
                r = (a1 + c) / 2;
                u = (b + d) / 2;
                var w = (c + e) / 2, v = (d + f) / 2;
                e = (e + g) / 2;
                f = (f + h) / 2;
                d = (r + w) / 2;
                c = (u + v) / 2;
                w = (w + e) / 2;
                v = (v + f) / 2;
                var y = (d + w) / 2, z = (c + v) / 2;
                q += K.Eo(a1, b, r, u, d, c, y, z, k, l, m, n, p);
                q += K.Eo(y, z, w, v, e, f, g, h, k, l, m, n, p);
            }
            return q;
        },
        qh: function(a1, b, c, d, e, f, g) {
            if (K.$(a1, c)) {
                b < d ? (c = b, b = d) : c = d;
                if (f < c) return g.h(a1, c), !1;
                if (f > b) return g.h(a1, b), !1;
                g.h(a1, f);
                return !0;
            }
            if (K.$(b, d)) {
                a1 < c ? (d = a1, a1 = c) : d = c;
                if (e < d) return g.h(d, b), !1;
                if (e > a1) return g.h(a1, b), !1;
                g.h(e, b);
                return !0;
            }
            e = ((a1 - e) * (a1 - c) + (b - f) * (b - d)) / ((c - a1) * (c - a1) + (d - b) * (d - b));
            if (-0.000005 > e) return g.h(a1, b), !1;
            if (1.000005 < e) return g.h(c, d), !1;
            g.h(a1 + e * (c - a1), b + e * (d - b));
            return !0;
        },
        Ve: function(a1, b, c, d, e, f, g, h, k) {
            if (K.B(a1, c) && K.B(b, d)) return k.h(a1, b), !1;
            if (K.$(e, g)) return K.$(a1, c) ? (K.qh(a1, b, c, d, e, f, k), !1) : K.qh(a1, b, c, d, e, (d - b) / (c - a1) * (e - a1) + b, k);
            h = (h - f) / (g - e);
            if (K.$(a1, c)) {
                c = h * (a1 - e) + f;
                b < d ? (e = b, b = d) : e = d;
                if (c < e) return k.h(a1, e), !1;
                if (c > b) return k.h(a1, b), !1;
                k.h(a1, c);
                return !0;
            }
            g = (d - b) / (c - a1);
            if (K.$(h, g)) return K.qh(a1, b, c, d, e, f, k), !1;
            e = (g * a1 - h * e + f - b) / (g - h);
            if (K.$(g, 0)) {
                a1 < c ? (d = a1, a1 = c) : d = c;
                if (e < d) return k.h(d, b), !1;
                if (e > a1) return k.h(a1, b), !1;
                k.h(e, b);
                return !0;
            }
            return K.qh(a1, b, c, d, e, g * (e - a1) + b, k);
        },
        MA: function(a1, b, c, d, e) {
            return K.Ve(c.x, c.y, d.x, d.y, a1.x, a1.y, b.x, b.y, e);
        },
        KA: function(a1, b, c, d, e, f, g, h, k, l) {
            function m(c, d) {
                var e = (c - a1) * (c - a1) + (d - b) * (d - b);
                e < n && (n = e, k.h(c, d));
            }
            var n = Infinity;
            m(k.x, k.y);
            var p = 0, q = 0, r = 0, u = 0;
            e < g ? (p = e, q = g) : (p = g, q = e);
            f < h ? (r = e, u = g) : (r = g, u = e);
            p = (q - p) / 2 + l;
            l = (u - r) / 2 + l;
            e = (e + g) / 2;
            f = (f + h) / 2;
            if (0 === p || 0 === l) return k;
            if (.5 > (c > a1 ? c - a1 : a1 - c)) {
                p = 1 - (c - e) * (c - e) / (p * p);
                if (0 > p) return k;
                p = Math.sqrt(p);
                d = -l * p + f;
                m(c, l * p + f);
                m(c, d);
            } else {
                c = (d - b) / (c - a1);
                d = 1 / (p * p) + c * c / (l * l);
                h = 2 * c * (b - c * a1) / (l * l) - 2 * c * f / (l * l) - 2 * e / (p * p);
                p = h * h - 4 * d * (2 * c * a1 * f / (l * l) - 2 * b * f / (l * l) + f * f / (l * l) + e * e / (p * p) - 1 + (b - c * a1) * (b - c * a1) / (l * l));
                if (0 > p) return k;
                p = Math.sqrt(p);
                l = (-h + p) / (2 * d);
                m(l, c * l - c * a1 + b);
                p = (-h - p) / (2 * d);
                m(p, c * p - c * a1 + b);
            }
            return k;
        },
        Ff: function(a1, b, c, d, e, f, g, h, k) {
            var l = 1E21, m = a1, n = b;
            if (K.Ve(a1, b, a1, d, e, f, g, h, k)) {
                var p = (k.x - e) * (k.x - e) + (k.y - f) * (k.y - f);
                p < l && (l = p, m = k.x, n = k.y);
            }
            K.Ve(c, b, c, d, e, f, g, h, k) && (p = (k.x - e) * (k.x - e) + (k.y - f) * (k.y - f), p < l && (l = p, m = k.x, n = k.y));
            K.Ve(a1, b, c, b, e, f, g, h, k) && (b = (k.x - e) * (k.x - e) + (k.y - f) * (k.y - f), b < l && (l = b, m = k.x, n = k.y));
            K.Ve(a1, d, c, d, e, f, g, h, k) && (a1 = (k.x - e) * (k.x - e) + (k.y - f) * (k.y - f), a1 < l && (l = a1, m = k.x, n = k.y));
            k.h(m, n);
            return 1E21 > l;
        },
        ts: function(a1, b, c) {
            return K.Fx(a1.x, a1.y, a1.width, a1.height, b.x, b.y, c.x, c.y);
        },
        Fx: function(a1, b, c, d, e, f, g, h) {
            var k = a1 + c, l = b + d;
            return e === g ? (f < h ? (g = f, f = h) : g = h, a1 <= e && e <= k && g <= l && f >= b) : f === h ? (e < g ? (h = e, e = g) : h = g, b <= f && f <= l && h <= k && e >= a1) : Zb(a1, b, c, d, e, f) || Zb(a1, b, c, d, g, h) || K.Ql(a1, b, k, b, e, f, g, h) || K.Ql(k, b, k, l, e, f, g, h) || K.Ql(k, l, a1, l, e, f, g, h) || K.Ql(a1, l, a1, b, e, f, g, h) ? !0 : !1;
        },
        Ql: function(a1, b, c, d, e, f, g, h) {
            return a1 === c && b === d && e === g && f === h ? a1 === e && b === f : 0 >= K.El(a1, b, c, d, e, f) * K.El(a1, b, c, d, g, h) && 0 >= K.El(e, f, g, h, a1, b) * K.El(e, f, g, h, c, d);
        },
        El: function(a1, b, c, d, e, f) {
            c -= a1;
            d -= b;
            a1 = e - a1;
            b = f - b;
            f = a1 * d - b * c;
            0 === f && (f = a1 * c + b * d, 0 < f && (f = (a1 - c) * c + (b - d) * d, 0 > f && (f = 0)));
            return f;
        },
        ap: function(a1) {
            0 > a1 && (a1 += 360);
            360 <= a1 && (a1 -= 360);
            return a1;
        },
        jx: function(a1, b, c, d, e, f) {
            var g = Math.PI;
            f || (d *= g / 180, e *= g / 180);
            var h = d > e ? -1 : 1;
            f = [];
            var k = g / 2, l = d;
            d = Math.min(2 * g, Math.abs(e - d));
            if (1E-5 > d) return k = l + h * Math.min(d, k), h = a1 + c * Math.cos(l), l = b + c * Math.sin(l), a1 += c * Math.cos(k), b += c * Math.sin(k), c = (h + a1) / 2, k = (l + b) / 2, f.push([
                h,
                l,
                c,
                k,
                c,
                k,
                a1,
                b
            ]), f;
            for(; 1E-5 < d;)e = l + h * Math.min(d, k), f.push(K.Vy(c, l, e, a1, b)), d -= Math.abs(e - l), l = e;
            return f;
        },
        Vy: function(a1, b, c, d, e) {
            var f = (c - b) / 2, g = a1 * Math.cos(f), h = a1 * Math.sin(f), k = -h, l = g * g + k * k, m = l + g * g + k * h;
            l = 4 / 3 * (Math.sqrt(2 * l * m) - m) / (g * h - k * g);
            h = g - l * k;
            g = k + l * g;
            k = -g;
            l = f + b;
            f = Math.cos(l);
            l = Math.sin(l);
            return [
                d + a1 * Math.cos(b),
                e + a1 * Math.sin(b),
                d + h * f - g * l,
                e + h * l + g * f,
                d + h * f - k * l,
                e + h * l + k * f,
                d + a1 * Math.cos(c),
                e + a1 * Math.sin(c)
            ];
        },
        Mo: function(a1, b, c, d, e, f, g) {
            c = Math.floor((a1 - c) / e) * e + c;
            d = Math.floor((b - d) / f) * f + d;
            var h = c;
            c + e - a1 < e / 2 && (h = c + e);
            a1 = d;
            d + f - b < f / 2 && (a1 = d + f);
            g.h(h, a1);
            return g;
        },
        vx: function(a1, b) {
            var c = Math.max(a1, b);
            a1 = Math.min(a1, b);
            var d;
            do b = c % a1, c = d = a1, a1 = b;
            while (0 < b);
            return d;
        },
        $y: function(a1, b, c, d) {
            var e = 0 > c, f = 0 > d;
            if (a1 < b) {
                var g = 1;
                var h = 0;
            } else g = 0, h = 1;
            var k = 0 === g ? a1 : b;
            var l = 0 === g ? c : d;
            if (0 === g ? e : f) l = -l;
            g = h;
            c = 0 === g ? c : d;
            if (0 === g ? e : f) c = -c;
            return K.az(k, 0 === g ? a1 : b, l, c, 0, 0);
        },
        az: function(a1, b, c, d, e, f) {
            if (0 < d) {
                if (0 < c) {
                    e = a1 * a1;
                    f = b * b;
                    a1 *= c;
                    var g = b * d, h = -f + g, k = -f + Math.sqrt(a1 * a1 + g * g);
                    b = h;
                    for(var l = 0; 9999999999 > l; ++l){
                        b = .5 * (h + k);
                        if (b === h || b === k) break;
                        var m = a1 / (b + e), n = g / (b + f);
                        m = m * m + n * n - 1;
                        if (0 < m) h = b;
                        else if (0 > m) k = b;
                        else break;
                    }
                    c = e * c / (b + e) - c;
                    d = f * d / (b + f) - d;
                    c = Math.sqrt(c * c + d * d);
                } else c = Math.abs(d - b);
            } else d = a1 * a1 - b * b, f = a1 * c, f < d ? (d = f / d, f = b * Math.sqrt(Math.abs(1 - d * d)), c = a1 * d - c, c = Math.sqrt(c * c + f * f)) : c = Math.abs(c - a1);
            return c;
        },
        Ze: new Ta,
        tm: new Ta,
        Mf: new Ta,
        Nf: 0,
        um: 100
    };
    K.za = K.AA;
    function P(a1) {
        Qa(this);
        this.l = 2;
        void 0 === a1 && (a1 = P.o);
        this.na = a1;
        this.Ec = this.Dc = this.pd = this.od = 0;
        a1 === P.o ? this.ee = new F : (null === P.V && (P.V = (new F).freeze()), this.ee = P.V);
        this.$p = this.ee.Ja;
        this.Hp = (new N).freeze();
        this.xm = this.sk = null;
        this.ym = NaN;
        this.fg = sc;
        this.gg = Bc;
        this.Qk = this.Rk = NaN;
        this.Uf = nd;
    }
    P.prototype.copy = function() {
        var a1 = new P;
        a1.l = this.l & -2;
        a1.na = this.na;
        a1.od = this.od;
        a1.pd = this.pd;
        a1.Dc = this.Dc;
        a1.Ec = this.Ec;
        if (this.na === P.o) {
            for(var b = this.ee.s, c = a1.ee, d = 0; d < b.length; d++)c.add(b[d].copy());
            a1.ee = c;
        } else a1.ee = this.ee;
        a1.$p = this.$p;
        a1.Hp.assign(this.Hp);
        a1.sk = this.sk;
        a1.xm = this.xm;
        a1.ym = this.ym;
        a1.fg = this.fg.J();
        a1.gg = this.gg.J();
        a1.Rk = this.Rk;
        a1.Qk = this.Qk;
        a1.Uf = this.Uf;
        return a1;
    };
    P.prototype.ja = function() {
        this.freeze();
        Object.freeze(this);
        return this;
    };
    P.prototype.freeze = function() {
        this._isFrozen = !0;
        if (this.type !== P.o) return this;
        var a1 = this.figures;
        a1.freeze();
        a1 = a1.s;
        for(var b = a1.length, c = 0; c < b; c++)a1[c].freeze();
        return this;
    };
    P.prototype.ka = function() {
        Object.isFrozen(this) && C("cannot thaw constant: " + this);
        this._isFrozen = !1;
        if (this.type !== P.o) return this;
        var a1 = this.figures;
        a1.ka();
        a1 = a1.s;
        for(var b = a1.length, c = 0; c < b; c++)a1[c].ka();
        return this;
    };
    P.prototype.Xa = function(a1) {
        if (!(a1 instanceof P)) return !1;
        if (this.type !== a1.type) return this.type === P.j && a1.type === P.o ? od(this, a1) : a1.type === P.j && this.type === P.o ? od(a1, this) : !1;
        if (this.type === P.o) {
            var b = this.figures.s;
            a1 = a1.figures.s;
            var c = b.length;
            if (c !== a1.length) return !1;
            for(var d = 0; d < c; d++)if (!b[d].Xa(a1[d])) return !1;
            return !0;
        }
        return K.B(this.startX, a1.startX) && K.B(this.startY, a1.startY) && K.B(this.endX, a1.endX) && K.B(this.endY, a1.endY);
    };
    function od(a1, b) {
        return a1.type !== P.j || b.type !== P.o ? !1 : 1 === b.figures.count && (b = b.figures.M(0), 1 === b.segments.count && K.B(a1.startX, b.startX) && K.B(a1.startY, b.startY) && (b = b.segments.M(0), b.type === pd && K.B(a1.endX, b.endX) && K.B(a1.endY, b.endY))) ? !0 : !1;
    }
    P.ia = function(a1) {
        return a1.toString();
    };
    P.prototype.qb = function(a1) {
        a1.classType === P && (this.type = a1);
    };
    P.prototype.toString = function(a1) {
        void 0 === a1 && (a1 = -1);
        switch(this.type){
            case P.j:
                return 0 > a1 ? "M" + this.startX.toString() + " " + this.startY.toString() + "L" + this.endX.toString() + " " + this.endY.toString() : "M" + this.startX.toFixed(a1) + " " + this.startY.toFixed(a1) + "L" + this.endX.toFixed(a1) + " " + this.endY.toFixed(a1);
            case P.u:
                var b = new N(this.startX, this.startY, 0, 0);
                b.Kv(this.endX, this.endY, 0, 0);
                return 0 > a1 ? "M" + b.x.toString() + " " + b.y.toString() + "H" + b.right.toString() + "V" + b.bottom.toString() + "H" + b.left.toString() + "z" : "M" + b.x.toFixed(a1) + " " + b.y.toFixed(a1) + "H" + b.right.toFixed(a1) + "V" + b.bottom.toFixed(a1) + "H" + b.left.toFixed(a1) + "z";
            case P.F:
                b = new N(this.startX, this.startY, 0, 0);
                b.Kv(this.endX, this.endY, 0, 0);
                if (0 > a1) return a1 = b.left.toString() + " " + (b.y + b.height / 2).toString(), "M" + a1 + "A" + (b.width / 2).toString() + " " + (b.height / 2).toString() + " 0 0 1 " + (b.right.toString() + " " + (b.y + b.height / 2).toString()) + "A" + (b.width / 2).toString() + " " + (b.height / 2).toString() + " 0 0 1 " + a1;
                var c = b.left.toFixed(a1) + " " + (b.y + b.height / 2).toFixed(a1);
                return "M" + c + "A" + (b.width / 2).toFixed(a1) + " " + (b.height / 2).toFixed(a1) + " 0 0 1 " + (b.right.toFixed(a1) + " " + (b.y + b.height / 2).toFixed(a1)) + "A" + (b.width / 2).toFixed(a1) + " " + (b.height / 2).toFixed(a1) + " 0 0 1 " + c;
            case P.o:
                b = "";
                c = this.figures.s;
                for(var d = c.length, e = 0; e < d; e++){
                    var f = c[e];
                    0 < e && (b += " x ");
                    f.isFilled && (b += "F ");
                    b += f.toString(a1);
                }
                return b;
            default:
                return this.type.toString();
        }
    };
    P.nb = function(a1) {
        a1 = a1.split(/[Xx]/);
        for(var b = a1.length, c = "", d = 0; d < b; d++){
            var e = a1[d];
            c = null !== e.match(/[Ff]/) ? 0 === d ? c + e : c + ("X" + (" " === e[0] ? "" : " ") + e) : c + ((0 === d ? "" : "X ") + "F" + (" " === e[0] ? "" : " ") + e);
        }
        return c;
    };
    P.parse = function(a1, b) {
        function c() {
            return u >= A - 1 ? !0 : null !== l[u + 1].match(B);
        }
        function d() {
            u++;
            return l[u];
        }
        function e(a1) {
            var b = parseFloat(d()), c = parseFloat(d());
            w === w.toLowerCase() && (b = z.x + b, c = z.y + c);
            a1.h(b, c);
        }
        function f() {
            e(z);
            return z;
        }
        function g() {
            e(y);
            return y;
        }
        function h() {
            var a1 = v.toLowerCase();
            return "c" !== a1 && "s" !== a1 && "q" !== a1 && "t" !== a1 ? z : new J(2 * z.x - y.x, 2 * z.y - y.y);
        }
        void 0 === b && (b = !1);
        var k = /([UuBbMmZzLlHhVvCcSsQqTtAaFfXx])([UuBbMmZzLlHhVvCcSsQqTtAaFfXx])/gm;
        a1 = a1.replace(/,/gm, " ");
        a1 = a1.replace(k, "$1 $2");
        a1 = a1.replace(k, "$1 $2");
        a1 = a1.replace(/([UuBbMmZzLlHhVvCcSsQqTtAaFfXx])([^s])/gm, "$1 $2");
        a1 = a1.replace(/([^s])([UuBbMmZzLlHhVvCcSsQqTtAaFfXx])/gm, "$1 $2");
        a1 = a1.replace(/([0-9])([+\-])/gm, "$1 $2");
        a1 = a1.replace(/[\s\r\t\n]+/gm, " ");
        a1 = a1.replace(/^\s+|\s+$/g, "");
        var l = a1.split(" ");
        for(a1 = 0; a1 < l.length; a1++){
            var m = l[a1];
            if (null !== m.match(/(\.[0-9]*)(\.)/gm)) {
                k = Ea();
                for(var n = "", p = !1, q = 0; q < m.length; q++){
                    var r = m[q];
                    "." !== r || p ? "." === r ? (k.push(n), n = ".") : n += r : (p = !0, n += r);
                }
                k.push(n);
                l.splice(a1, 1);
                for(m = 0; m < k.length; m++)l.splice(a1 + m, 0, k[m]);
                a1 += k.length - 1;
                Ga(k);
            }
        }
        var u = -1, w = "", v = "";
        k = new J(0, 0);
        var y = new J(0, 0), z = new J(0, 0), A = l.length;
        a1 = qd(null);
        p = n = m = !1;
        q = !0;
        r = null;
        for(var B = /[UuBbMmZzLlHhVvCcSsQqTtAaFfXx]/; !(u >= A - 1);)if (v = w, w = d(), "" !== w) switch(w.toUpperCase()){
            case "X":
                q = !0;
                n = m = !1;
                break;
            case "M":
                r = f();
                null === a1.nc || !0 === q ? (wd(a1, r.x, r.y, m, !n, p), q = !1) : a1.moveTo(r.x, r.y);
                for(k.assign(z); !c();)r = f(), a1.lineTo(r.x, r.y);
                break;
            case "L":
                for(; !c();)r = f(), a1.lineTo(r.x, r.y);
                break;
            case "H":
                for(; !c();)z = new J((w === w.toLowerCase() ? z.x : 0) + parseFloat(d()), z.y), a1.lineTo(z.x, z.y);
                break;
            case "V":
                for(; !c();)z = new J(z.x, (w === w.toLowerCase() ? z.y : 0) + parseFloat(d())), a1.lineTo(z.x, z.y);
                break;
            case "C":
                for(; !c();){
                    r = new J;
                    e(r);
                    var D = g(), M = f();
                    xd(a1, r.x, r.y, D.x, D.y, M.x, M.y);
                }
                break;
            case "S":
                for(; !c();)r = h(), D = g(), M = f(), xd(a1, r.x, r.y, D.x, D.y, M.x, M.y);
                break;
            case "Q":
                for(; !c();)r = g(), D = f(), yd(a1, r.x, r.y, D.x, D.y);
                break;
            case "T":
                for(; !c();)y = r = h(), D = f(), yd(a1, r.x, r.y, D.x, D.y);
                break;
            case "B":
                for(; !c();){
                    r = parseFloat(d());
                    D = parseFloat(d());
                    M = parseFloat(d());
                    var S = parseFloat(d()), R = parseFloat(d()), I = R, G = !1;
                    c() || (I = parseFloat(d()), c() || (G = 0 !== parseFloat(d())));
                    w === w.toLowerCase() && (M += z.x, S += z.y);
                    a1.arcTo(r, D, M, S, R, I, G);
                }
                break;
            case "A":
                for(; !c();)r = Math.abs(parseFloat(d())), D = Math.abs(parseFloat(d())), M = parseFloat(d()), R = S = !1, G = I = 0, I = d(), 1 === I.length ? (S = !!parseFloat(I), R = !!parseFloat(d()), I = parseFloat(d())) : 2 === I.length ? (S = !!parseFloat(I[0]), R = !!parseFloat(I[1]), I = parseFloat(d())) : (S = !!parseFloat(I[0]), R = !!parseFloat(I[1]), I = parseFloat(I.slice(2))), G = parseFloat(d()), w === w.toLowerCase() && (I = z.x + I, G = z.y + G), z.h(I, G), zd(a1, r, D, M, S, R, I, G);
                break;
            case "Z":
                Ad(a1);
                z.assign(k);
                break;
            case "F":
                r = "";
                for(D = 1; l[u + D];)if ("0" === l[u + D]) p = !0, D++;
                else if (null !== l[u + D].match(/[Uu]/)) D++;
                else if (null === l[u + D].match(B)) D++;
                else {
                    r = l[u + D];
                    break;
                }
                r.match(/[Mm]/) ? m = !0 : 0 < a1.nc.segments.length && (a1.nc.isFilled = !0);
                break;
            case "U":
                r = "";
                for(D = 1; l[u + D];)if (null !== l[u + D].match(/[Ff]/)) D++;
                else if (null === l[u + D].match(B)) D++;
                else {
                    r = l[u + D];
                    break;
                }
                r.match(/[Mm]/) ? n = !0 : a1.nc.isShadowed = !1;
        }
        k = a1.ns;
        Bd = a1;
        if (b) for(b = k.figures.iterator; b.next();)b.value.isFilled = !0;
        return k;
    };
    P.Ha = function(a1, b) {
        for(var c = a1.length, d = J.alloc(), e = 0; e < c; e++){
            var f = a1[e];
            d.x = f[0];
            d.y = f[1];
            b.Ga(d);
            f[0] = d.x;
            f[1] = d.y;
            d.x = f[2];
            d.y = f[3];
            b.Ga(d);
            f[2] = d.x;
            f[3] = d.y;
            d.x = f[4];
            d.y = f[5];
            b.Ga(d);
            f[4] = d.x;
            f[5] = d.y;
            d.x = f[6];
            d.y = f[7];
            b.Ga(d);
            f[6] = d.x;
            f[7] = d.y;
        }
        J.free(d);
    };
    P.prototype.Zu = function() {
        if (this._isInvalidBounds) return !0;
        if (this.type === P.o) {
            if (this.$p !== this.figures.Ja) return !0;
            for(var a1 = this.figures.s, b = a1.length, c = 0; c < b; c++)if (a1[c].Zu()) return !0;
        }
        return !1;
    };
    P.prototype.computeBounds = function() {
        this._isInvalidBounds = !1;
        this.xm = this.sk = null;
        this.ym = NaN;
        if (this.type === P.o) {
            this.$p = this.figures.Ja;
            for(var a1 = this.figures.s, b = a1.length, c = 0; c < b; c++){
                var d = a1[c];
                d._isInvalidBounds = !1;
                var e = d.segments;
                d.rr = e.Ja;
                d = e.s;
                e = d.length;
                for(var f = 0; f < e; f++){
                    var g = d[f];
                    g._isInvalidBounds = !1;
                    g.ae = null;
                }
            }
        }
        a1 = this.Hp;
        a1.ka();
        isNaN(this.Rk) || isNaN(this.Qk) ? a1.h(0, 0, 0, 0) : a1.h(0, 0, this.Rk, this.Qk);
        Cd(this, a1, !1);
        Yb(a1, 0, 0, 0, 0);
        a1.freeze();
    };
    P.prototype.ix = function() {
        var a1 = new N;
        Cd(this, a1, !0);
        return a1;
    };
    function Cd(a1, b, c) {
        switch(a1.type){
            case P.j:
            case P.u:
            case P.F:
                c ? b.h(a1.od, a1.pd, 0, 0) : Yb(b, a1.od, a1.pd, 0, 0);
                Yb(b, a1.Dc, a1.Ec, 0, 0);
                break;
            case P.o:
                var d = a1.figures;
                a1 = d.s;
                d = d.length;
                for(var e = 0; e < d; e++){
                    var f = a1[e];
                    c && 0 === e ? b.h(f.startX, f.startY, 0, 0) : Yb(b, f.startX, f.startY, 0, 0);
                    for(var g = f.segments.s, h = g.length, k = f.startX, l = f.startY, m = 0; m < h; m++){
                        var n = g[m];
                        switch(n.type){
                            case pd:
                            case Dd:
                                k = n.endX;
                                l = n.endY;
                                Yb(b, k, l, 0, 0);
                                break;
                            case Ed:
                                K.Cl(k, l, n.point1X, n.point1Y, n.point2X, n.point2Y, n.endX, n.endY, .5, b);
                                k = n.endX;
                                l = n.endY;
                                break;
                            case Kd:
                                K.iv(k, l, n.point1X, n.point1Y, n.endX, n.endY, .5, b);
                                k = n.endX;
                                l = n.endY;
                                break;
                            case Ld:
                            case Md:
                                var p = n.type === Ld ? Nd(n, f) : Od(n, f, k, l), q = p.length;
                                if (0 === q) {
                                    k = n.type === Ld ? n.centerX : n.endX;
                                    l = n.type === Ld ? n.centerY : n.endY;
                                    Yb(b, k, l, 0, 0);
                                    break;
                                }
                                n = null;
                                for(var r = 0; r < q; r++)n = p[r], K.Cl(n[0], n[1], n[2], n[3], n[4], n[5], n[6], n[7], .5, b);
                                null !== n && (k = n[6], l = n[7]);
                                break;
                            default:
                                C("Unknown Segment type: " + n.type);
                        }
                    }
                }
                break;
            default:
                C("Unknown Geometry type: " + a1.type);
        }
    }
    P.prototype.normalize = function() {
        this._isFrozen && va(this);
        var a1 = this.ix();
        this.offset(-a1.x, -a1.y);
        return new J(-a1.x, -a1.y);
    };
    P.prototype.offset = function(a1, b) {
        this._isFrozen && va(this);
        this.transform(1, 0, 0, 1, a1, b);
        return this;
    };
    P.prototype.scale = function(a1, b) {
        this._isFrozen && va(this);
        this.transform(a1, 0, 0, b, 0, 0);
        return this;
    };
    P.prototype.rotate = function(a1, b, c) {
        this._isFrozen && va(this);
        void 0 === b && (b = 0);
        void 0 === c && (c = 0);
        var d = ld.alloc();
        d.reset();
        d.rotate(a1, b, c);
        this.transform(d.m11, d.m12, d.m21, d.m22, d.dx, d.dy);
        ld.free(d);
        return this;
    };
    t = P.prototype;
    t.transform = function(a1, b, c, d, e, f) {
        switch(this.type){
            case P.j:
            case P.u:
            case P.F:
                var g = this.od;
                var h = this.pd;
                this.od = g * a1 + h * c + e;
                this.pd = g * b + h * d + f;
                g = this.Dc;
                h = this.Ec;
                this.Dc = g * a1 + h * c + e;
                this.Ec = g * b + h * d + f;
                break;
            case P.o:
                for(var k = this.figures.s, l = k.length, m = 0; m < l; m++){
                    var n = k[m];
                    g = n.startX;
                    h = n.startY;
                    n.startX = g * a1 + h * c + e;
                    n.startY = g * b + h * d + f;
                    n = n.segments.s;
                    for(var p = n.length, q = 0; q < p; q++){
                        var r = n[q];
                        switch(r.type){
                            case pd:
                            case Dd:
                                g = r.endX;
                                h = r.endY;
                                r.endX = g * a1 + h * c + e;
                                r.endY = g * b + h * d + f;
                                break;
                            case Ed:
                                g = r.point1X;
                                h = r.point1Y;
                                r.point1X = g * a1 + h * c + e;
                                r.point1Y = g * b + h * d + f;
                                g = r.point2X;
                                h = r.point2Y;
                                r.point2X = g * a1 + h * c + e;
                                r.point2Y = g * b + h * d + f;
                                g = r.endX;
                                h = r.endY;
                                r.endX = g * a1 + h * c + e;
                                r.endY = g * b + h * d + f;
                                break;
                            case Kd:
                                g = r.point1X;
                                h = r.point1Y;
                                r.point1X = g * a1 + h * c + e;
                                r.point1Y = g * b + h * d + f;
                                g = r.endX;
                                h = r.endY;
                                r.endX = g * a1 + h * c + e;
                                r.endY = g * b + h * d + f;
                                break;
                            case Ld:
                                g = r.centerX;
                                h = r.centerY;
                                r.centerX = g * a1 + h * c + e;
                                r.centerY = g * b + h * d + f;
                                0 !== b && (g = 180 * Math.atan2(b, a1) / Math.PI, 0 > g && (g += 360), r.startAngle += g);
                                0 > a1 && (r.startAngle = 180 - r.startAngle, r.sweepAngle = -r.sweepAngle);
                                0 > d && (r.startAngle = -r.startAngle, r.sweepAngle = -r.sweepAngle);
                                r.radiusX *= Math.sqrt(a1 * a1 + c * c);
                                void 0 !== r.radiusY && (r.radiusY *= Math.sqrt(b * b + d * d));
                                break;
                            case Md:
                                g = r.endX;
                                h = r.endY;
                                r.endX = g * a1 + h * c + e;
                                r.endY = g * b + h * d + f;
                                if (0 === r.radiusX || 0 === r.radiusY) break;
                                0 !== b && (g = 180 * Math.atan2(b, a1) / Math.PI, 0 > g && (g += 360), r.xAxisRotation += g);
                                0 > a1 && (r.xAxisRotation = 180 - r.xAxisRotation, r.isClockwiseArc = !r.isClockwiseArc);
                                0 > d && (r.xAxisRotation = -r.xAxisRotation, r.isClockwiseArc = !r.isClockwiseArc);
                                r.radiusX *= Math.sqrt(a1 * a1 + c * c);
                                r.radiusY *= Math.sqrt(b * b + d * d);
                                break;
                            default:
                                C("Unknown Segment type: " + r.type);
                        }
                    }
                }
        }
        this._isInvalidBounds = !0;
        return this;
    };
    t.ca = function(a1, b) {
        void 0 === b && (b = 0);
        var c = this.od, d = this.pd, e = this.Dc, f = this.Ec;
        switch(this.type){
            case P.j:
                return K.Zb(c, d, e, f, b, a1.x, a1.y);
            case P.u:
                var g = N.allocAt(Math.min(c, e) - b, Math.min(d, f) - b, Math.abs(e - c) + 2 * b, Math.abs(f - d) + 2 * b);
                a1 = g.ca(a1);
                N.free(g);
                return a1;
            case P.F:
                g = Math.min(c, e) - b;
                var h = Math.min(d, f) - b;
                c = (Math.abs(e - c) + 2 * b) / 2;
                b = (Math.abs(f - d) + 2 * b) / 2;
                if (0 >= c || 0 >= b) return !1;
                g = a1.x - (g + c);
                h = a1.y - (h + b);
                return 1 >= g * g / (c * c) + h * h / (b * b);
            case P.o:
                return Pd(this, a1, b, !0, !1);
            default:
                return !1;
        }
    };
    function Pd(a1, b, c, d, e) {
        var f = b.x;
        b = b.y;
        for(var g = a1.bounds.x - 20, h = 0, k, l, m, n, p = a1.figures.s, q = p.length, r = 0; r < q; r++){
            var u = p[r], w = !u.isEvenOdd;
            if (u.isFilled) {
                if (d && u.ca(f, b, c)) return !0;
                var v = u.segments;
                k = u.startX;
                l = u.startY;
                for(var y = k, z = l, A = v.s, B = 0; B <= v.length; B++){
                    var D = void 0;
                    if (B !== v.length) {
                        D = A[B];
                        var M = D.type;
                        a1 = D.endX;
                        n = D.endY;
                    } else M = pd, a1 = y, n = z;
                    switch(M){
                        case Dd:
                            y = Qd(f, b, g, b, k, l, y, z);
                            if (isNaN(y)) return !0;
                            h += y;
                            y = a1;
                            z = n;
                            break;
                        case pd:
                            k = Qd(f, b, g, b, k, l, a1, n);
                            if (isNaN(k)) return !0;
                            h += k;
                            break;
                        case Ed:
                            m = K.Eo(k, l, D.point1X, D.point1Y, D.point2X, D.point2Y, a1, n, g, b, f, b, .5);
                            h += m;
                            break;
                        case Kd:
                            m = K.Eo(k, l, (k + 2 * D.point1X) / 3, (l + 2 * D.point1Y) / 3, (2 * D.point1X + a1) / 3, (2 * D.point1Y + n) / 3, a1, n, g, b, f, b, .5);
                            h += m;
                            break;
                        case Ld:
                        case Md:
                            M = D.type === Ld ? Nd(D, u) : Od(D, u, k, l);
                            var S = M.length;
                            if (0 === S) {
                                k = Qd(f, b, g, b, k, l, D.type === Ld ? D.centerX : D.endX, D.type === Ld ? D.centerY : D.endY);
                                if (isNaN(k)) return !0;
                                h += k;
                                break;
                            }
                            D = null;
                            for(var R = 0; R < S; R++){
                                D = M[R];
                                if (0 === R) {
                                    m = Qd(f, b, g, b, k, l, D[0], D[1]);
                                    if (isNaN(m)) return !0;
                                    h += m;
                                }
                                m = K.Eo(D[0], D[1], D[2], D[3], D[4], D[5], D[6], D[7], g, b, f, b, .5);
                                h += m;
                            }
                            null !== D && (a1 = D[6], n = D[7]);
                            break;
                        default:
                            C("Unknown Segment type: " + D.type);
                    }
                    k = a1;
                    l = n;
                }
                if (w) {
                    if (0 !== h) return !0;
                } else if (0 !== h % 2) return !0;
                h = 0;
            } else if (u.ca(f, b, e ? c : c + 2)) return !0;
        }
        return !1;
    }
    function Qd(a1, b, c, d, e, f, g, h) {
        if (K.Zb(e, f, g, h, .05, a1, b)) return NaN;
        var k = (a1 - c) * (f - h);
        if (0 === k) return 0;
        var l = ((a1 * d - b * c) * (e - g) - (a1 - c) * (e * h - f * g)) / k;
        b = (a1 * d - b * c) * (f - h) / k;
        if (l >= a1) return 0;
        if ((e > g ? e - g : g - e) < (f > h ? f - h : h - f)) {
            if (f < h) {
                if (b < f || b > h) return 0;
            } else {
                if (b < h || b > f) return 0;
            }
        } else if (e < g) {
            if (l < e || l > g) return 0;
        } else if (l < g || l > e) return 0;
        return 0 < k ? 1 : -1;
    }
    function Rd(a1, b, c, d) {
        a1 = a1.figures.s;
        for(var e = a1.length, f = 0; f < e; f++)if (a1[f].ca(b, c, d)) return !0;
        return !1;
    }
    t.Pu = function(a1, b) {
        0 > a1 ? a1 = 0 : 1 < a1 && (a1 = 1);
        void 0 === b && (b = new J);
        if (this.type === P.j) return b.h(this.startX + a1 * (this.endX - this.startX), this.startY + a1 * (this.endY - this.startY)), b;
        for(var c = this.flattenedSegments, d = this.flattenedLengths, e = c.length, f = this.flattenedTotalLength * a1, g = 0, h = 0; h < e; h++){
            var k = d[h], l = k.length;
            for(a1 = 0; a1 < l; a1++){
                var m = k[a1];
                if (g + m >= f) return d = f - g, d = 0 === m ? 0 : d / m, c = c[h], h = c[2 * a1], e = c[2 * a1 + 1], b.h(h + (c[2 * a1 + 2] - h) * d, e + (c[2 * a1 + 3] - e) * d), b;
                g += m;
            }
        }
        return b;
    };
    t.wx = function(a1) {
        0 > a1 ? a1 = 0 : 1 < a1 && (a1 = 1);
        if (this.type === P.j) return 180 * Math.atan2(this.endY - this.startY, this.endX - this.startX) / Math.PI;
        for(var b = this.flattenedSegments, c = this.flattenedLengths, d = b.length, e = this.flattenedTotalLength * a1, f = 0, g = 0; g < d; g++){
            var h = c[g], k = h.length;
            for(a1 = 0; a1 < k; a1++){
                var l = h[a1];
                if (f + l >= e) return e = b[g], b = e[2 * a1], c = e[2 * a1 + 1], d = e[2 * a1 + 2], a1 = e[2 * a1 + 3], 1 > Math.abs(d - b) && 1 > Math.abs(a1 - c) ? 0 : 1 > Math.abs(d - b) ? 0 <= a1 - c ? 90 : 270 : 1 > Math.abs(a1 - c) ? 0 <= d - b ? 0 : 180 : 180 * Math.atan2(a1 - c, d - b) / Math.PI;
                f += l;
            }
        }
        return NaN;
    };
    t.Qu = function(a1, b) {
        0 > a1 ? a1 = 0 : 1 < a1 && (a1 = 1);
        void 0 === b && (b = []);
        b.length = 3;
        if (this.type === P.j) return b[0] = this.startX + a1 * (this.endX - this.startX), b[1] = this.startY + a1 * (this.endY - this.startY), b[2] = 180 * Math.atan2(this.endY - this.startY, this.endX - this.startX) / Math.PI, b;
        for(var c = this.flattenedSegments, d = this.flattenedLengths, e = c.length, f = this.flattenedTotalLength * a1, g = 0, h = 0; h < e; h++){
            var k = d[h], l = k.length;
            for(a1 = 0; a1 < l; a1++){
                var m = k[a1];
                if (g + m >= f) return d = f - g, d = 0 === m ? 0 : d / m, m = c[h], c = m[2 * a1], h = m[2 * a1 + 1], e = m[2 * a1 + 2], a1 = m[2 * a1 + 3], b[0] = c + (e - c) * d, b[1] = h + (a1 - h) * d, b[2] = 1 > Math.abs(e - c) && 1 > Math.abs(a1 - h) ? 0 : 1 > Math.abs(e - c) ? 0 <= a1 - h ? 90 : 270 : 1 > Math.abs(a1 - h) ? 0 <= e - c ? 0 : 180 : 180 * Math.atan2(a1 - h, e - c) / Math.PI, b;
                g += m;
            }
        }
        return b;
    };
    t.xx = function(a1) {
        if (this.type === P.j) {
            var b = this.startX, c = this.startY, d = this.endX, e = this.endY;
            if (b !== d || c !== e) {
                var f = a1.x;
                a1 = a1.y;
                if (b === d) {
                    if (c < e) {
                        var g = c;
                        d = e;
                    } else g = e, d = c;
                    return a1 <= g ? g === c ? 0 : 1 : a1 >= d ? d === c ? 0 : 1 : Math.abs(a1 - c) / (d - g);
                }
                if (c === e) return b < d ? g = b : (g = d, d = b), f <= g ? g === b ? 0 : 1 : f >= d ? d === b ? 0 : 1 : Math.abs(f - b) / (d - g);
                g = (d - b) * (d - b) + (e - c) * (e - c);
                var h = J.alloc();
                K.qh(b, c, d, e, f, a1, h);
                a1 = h.x;
                f = h.y;
                J.free(h);
                return Math.sqrt(((a1 - b) * (a1 - b) + (f - c) * (f - c)) / g);
            }
        } else if (this.type === P.u) {
            g = this.startX;
            h = this.startY;
            var k = this.endX;
            e = this.endY;
            if (g !== k || h !== e) {
                b = k - g;
                c = e - h;
                f = 2 * b + 2 * c;
                d = a1.x;
                a1 = a1.y;
                d = Math.min(Math.max(d, g), k);
                a1 = Math.min(Math.max(a1, h), e);
                g = Math.abs(d - g);
                k = Math.abs(d - k);
                h = Math.abs(a1 - h);
                e = Math.abs(a1 - e);
                var l = Math.min(g, k, h, e);
                if (l === h) return d / f;
                if (l === k) return (b + a1) / f;
                if (l === e) return (2 * b + c - d) / f;
                if (l === g) return (2 * b + 2 * c - a1) / f;
            }
        } else {
            b = this.flattenedSegments;
            c = this.flattenedLengths;
            f = this.flattenedTotalLength;
            d = J.alloc();
            e = Infinity;
            h = g = 0;
            k = b.length;
            for(var m = l = 0, n = 0; n < k; n++)for(var p = b[n], q = c[n], r = p.length, u = 0; u < r; u += 2){
                var w = p[u], v = p[u + 1];
                if (0 !== u) {
                    K.qh(l, m, w, v, a1.x, a1.y, d);
                    var y = (d.x - a1.x) * (d.x - a1.x) + (d.y - a1.y) * (d.y - a1.y);
                    y < e && (e = y, g = h, g += Math.sqrt((d.x - l) * (d.x - l) + (d.y - m) * (d.y - m)));
                    h += q[(u - 2) / 2];
                }
                l = w;
                m = v;
            }
            J.free(d);
            a1 = g / f;
            return 0 > a1 ? 0 : 1 < a1 ? 1 : a1;
        }
        return 0;
    };
    function Sd(a1) {
        if (null === a1.sk) {
            var b = a1.sk = [], c = a1.xm = [], d = [], e = [];
            if (a1.type === P.j) d.push(a1.startX), d.push(a1.startY), d.push(a1.endX), d.push(a1.endY), b.push(d), e.push(Math.sqrt((a1.startX - a1.endX) * (a1.startX - a1.endX) + (a1.startY - a1.endY) * (a1.startY - a1.endY))), c.push(e);
            else if (a1.type === P.u) d.push(a1.startX), d.push(a1.startY), d.push(a1.endX), d.push(a1.startY), d.push(a1.endX), d.push(a1.endY), d.push(a1.startX), d.push(a1.endY), d.push(a1.startX), d.push(a1.startY), b.push(d), e.push(Math.abs(a1.startX - a1.endX)), e.push(Math.abs(a1.startY - a1.endY)), e.push(Math.abs(a1.startX - a1.endX)), e.push(Math.abs(a1.startY - a1.endY)), c.push(e);
            else if (a1.type === P.F) {
                var f = new Wd;
                f.startX = a1.endX;
                f.startY = (a1.startY + a1.endY) / 2;
                var g = new Xd(Ld);
                g.startAngle = 0;
                g.sweepAngle = 360;
                g.centerX = (a1.startX + a1.endX) / 2;
                g.centerY = (a1.startY + a1.endY) / 2;
                g.radiusX = Math.abs(a1.startX - a1.endX) / 2;
                g.radiusY = Math.abs(a1.startY - a1.endY) / 2;
                f.add(g);
                a1 = Nd(g, f);
                e = a1.length;
                if (0 === e) d.push(g.centerX), d.push(g.centerY);
                else {
                    g = f.startX;
                    f = f.startY;
                    for(var h = 0; h < e; h++){
                        var k = a1[h];
                        K.Qe(g, f, k[2], k[3], k[4], k[5], k[6], k[7], .5, d);
                        g = k[6];
                        f = k[7];
                    }
                }
                b.push(d);
                c.push(Yd(d));
            } else for(a1 = a1.figures.iterator; a1.next();){
                e = a1.value;
                d = [];
                d.push(e.startX);
                d.push(e.startY);
                g = e.startX;
                f = e.startY;
                h = g;
                k = f;
                for(var l = e.segments.s, m = l.length, n = 0; n < m; n++){
                    var p = l[n];
                    switch(p.type){
                        case Dd:
                            4 <= d.length && (b.push(d), c.push(Yd(d)));
                            d = [];
                            d.push(p.endX);
                            d.push(p.endY);
                            g = p.endX;
                            f = p.endY;
                            h = g;
                            k = f;
                            break;
                        case pd:
                            d.push(p.endX);
                            d.push(p.endY);
                            g = p.endX;
                            f = p.endY;
                            break;
                        case Ed:
                            K.Qe(g, f, p.point1X, p.point1Y, p.point2X, p.point2Y, p.endX, p.endY, .5, d);
                            g = p.endX;
                            f = p.endY;
                            break;
                        case Kd:
                            K.cp(g, f, p.point1X, p.point1Y, p.endX, p.endY, .5, d);
                            g = p.endX;
                            f = p.endY;
                            break;
                        case Ld:
                            var q = Nd(p, e), r = q.length;
                            if (0 === r) {
                                d.push(p.centerX);
                                d.push(p.centerY);
                                g = p.centerX;
                                f = p.centerY;
                                break;
                            }
                            for(var u = 0; u < r; u++){
                                var w = q[u];
                                K.Qe(g, f, w[2], w[3], w[4], w[5], w[6], w[7], .5, d);
                                g = w[6];
                                f = w[7];
                            }
                            break;
                        case Md:
                            q = Od(p, e, g, f);
                            r = q.length;
                            u = p.endX;
                            w = p.endY;
                            if (0 === r) {
                                d.push(u);
                                d.push(w);
                                g = u;
                                f = w;
                                break;
                            }
                            for(u = 0; u < r; u++)w = q[u], K.Qe(g, f, w[2], w[3], w[4], w[5], w[6], w[7], .5, d), g = w[6], f = w[7];
                            break;
                        default:
                            C("Segment not of valid type: " + p.type);
                    }
                    p.isClosed && (d.push(h), d.push(k));
                }
                4 <= d.length && (b.push(d), c.push(Yd(d)));
            }
        }
    }
    function Yd(a1) {
        for(var b = [], c = 0, d = 0, e = a1.length, f = 0; f < e; f += 2){
            var g = a1[f], h = a1[f + 1];
            0 !== f && b.push(Math.sqrt(zb(c, d, g, h)));
            c = g;
            d = h;
        }
        return b;
    }
    t.add = function(a1) {
        this.ee.add(a1);
        return this;
    };
    t.om = function(a1, b, c, d, e, f, g, h) {
        this._isFrozen && va(this);
        this.fg = new O(a1, b, e, f).freeze();
        this.gg = new O(c, d, g, h).freeze();
        return this;
    };
    ma.Object.defineProperties(P.prototype, {
        _isFrozen: {
            get: function() {
                return 0 !== (this.l & 1);
            },
            set: function(a1) {
                this.l = a1 ? this.l | 1 : this.l & -2;
            }
        },
        _isInvalidBounds: {
            get: function() {
                return 0 !== (this.l & 2);
            },
            set: function(a1) {
                this.l = a1 ? this.l | 2 : this.l & -3;
            }
        },
        flattenedSegments: {
            get: function() {
                Sd(this);
                return this.sk;
            }
        },
        flattenedLengths: {
            get: function() {
                Sd(this);
                return this.xm;
            }
        },
        flattenedTotalLength: {
            get: function() {
                var a1 = this.ym;
                if (isNaN(a1)) {
                    if (this.type === P.j) {
                        a1 = Math.abs(this.endX - this.startX);
                        var b = Math.abs(this.endY - this.startY);
                        a1 = Math.sqrt(a1 * a1 + b * b);
                    } else if (this.type === P.u) a1 = 2 * Math.abs(this.endX - this.startX) + 2 * Math.abs(this.endY - this.startY);
                    else {
                        b = this.flattenedLengths;
                        for(var c = b.length, d = a1 = 0; d < c; d++)for(var e = b[d], f = e.length, g = 0; g < f; g++)a1 += e[g];
                    }
                    this.ym = a1;
                }
                return a1;
            }
        },
        type: {
            get: function() {
                return this.na;
            },
            set: function(a1) {
                this.na !== a1 && (this._isFrozen && va(this, a1), this.na = a1, a1 === P.o ? this.ee = new F : (null === P.V && (P.V = (new F).freeze()), this.ee = P.V), this._isInvalidBounds = !0);
            }
        },
        startX: {
            get: function() {
                return this.od;
            },
            set: function(a1) {
                this.od !== a1 && (this._isFrozen && va(this, a1), this.od = a1, this._isInvalidBounds = !0);
            }
        },
        startY: {
            get: function() {
                return this.pd;
            },
            set: function(a1) {
                this.pd !== a1 && (this._isFrozen && va(this, a1), this.pd = a1, this._isInvalidBounds = !0);
            }
        },
        endX: {
            get: function() {
                return this.Dc;
            },
            set: function(a1) {
                this.Dc !== a1 && (this._isFrozen && va(this, a1), this.Dc = a1, this._isInvalidBounds = !0);
            }
        },
        endY: {
            get: function() {
                return this.Ec;
            },
            set: function(a1) {
                this.Ec !== a1 && (this._isFrozen && va(this, a1), this.Ec = a1, this._isInvalidBounds = !0);
            }
        },
        figures: {
            get: function() {
                return this.ee;
            },
            set: function(a1) {
                this.ee !== a1 && (this._isFrozen && va(this, a1), this.ee = a1, this._isInvalidBounds = !0);
            }
        },
        spot1: {
            get: function() {
                return this.fg;
            },
            set: function(a1) {
                this._isFrozen && va(this, a1);
                this.fg = a1.J();
            }
        },
        spot2: {
            get: function() {
                return this.gg;
            },
            set: function(a1) {
                this._isFrozen && va(this, a1);
                this.gg = a1.J();
            }
        },
        defaultStretch: {
            get: function() {
                return this.Uf;
            },
            set: function(a1) {
                this._isFrozen && va(this, a1);
                this.Uf = a1;
            }
        },
        bounds: {
            get: function() {
                this.Zu() && this.computeBounds();
                return this.Hp;
            }
        }
    });
    P.prototype.setSpots = P.prototype.om;
    P.prototype.add = P.prototype.add;
    P.prototype.getFractionForPoint = P.prototype.xx;
    P.prototype.getPointAndAngleAlongPath = P.prototype.Qu;
    P.prototype.getAngleAlongPath = P.prototype.wx;
    P.prototype.getPointAlongPath = P.prototype.Pu;
    P.prototype.containsPoint = P.prototype.ca;
    P.prototype.transform = P.prototype.transform;
    P.prototype.rotate = P.prototype.rotate;
    P.prototype.scale = P.prototype.scale;
    P.prototype.offset = P.prototype.offset;
    P.prototype.normalize = P.prototype.normalize;
    P.prototype.computeBoundsWithoutOrigin = P.prototype.ix;
    P.prototype.equalsApprox = P.prototype.Xa;
    P.className = "Geometry";
    P.j = new E(P, "Line", 0);
    P.u = new E(P, "Rectangle", 1);
    P.F = new E(P, "Ellipse", 2);
    P.o = new E(P, "Path", 3);
    P.V = null;
    P.hb = "UuBbMmZzLlHhVvCcSsQqTtAaFfXx";
    P.className = "Geometry";
    P.stringify = P.ia;
    P.fillPath = P.nb;
    P.parse = P.parse;
    P.Line = P.j;
    P.Rectangle = P.u;
    P.Ellipse = P.F;
    P.Path = P.o;
    function Wd(a1, b, c, d, e) {
        Qa(this);
        void 0 === c && (c = !0);
        void 0 === d && (d = !0);
        void 0 === e && (e = !1);
        this.l = 2 | (c ? 4 : 0) | (d ? 8 : 0) | (e ? 16 : 0);
        void 0 !== a1 ? this.od = a1 : this.od = 0;
        void 0 !== b ? this.pd = b : this.pd = 0;
        this.ol = new F;
        this.rr = this.ol.Ja;
        this.fw = null;
    }
    Wd.prototype.copy = function() {
        var a1 = new Wd;
        a1.l = this.l & -2;
        a1.od = this.od;
        a1.pd = this.pd;
        for(var b = this.ol.s, c = b.length, d = a1.ol, e = 0; e < c; e++){
            var f = b[e].copy();
            d.add(f);
        }
        a1.rr = this.rr;
        a1.fw = this.fw;
        return a1;
    };
    t = Wd.prototype;
    t.Xa = function(a1) {
        if (!(a1 instanceof Wd && K.B(this.startX, a1.startX) && K.B(this.startY, a1.startY))) return !1;
        var b = this.segments.s;
        a1 = a1.segments.s;
        var c = b.length;
        if (c !== a1.length) return !1;
        for(var d = 0; d < c; d++)if (!b[d].Xa(a1[d])) return !1;
        return !0;
    };
    t.toString = function(a1) {
        void 0 === a1 && (a1 = -1);
        var b = 0 > a1 ? "M" + this.startX.toString() + " " + this.startY.toString() : "M" + this.startX.toFixed(a1) + " " + this.startY.toFixed(a1);
        for(var c = this.segments.s, d = c.length, e = 0; e < d; e++)b += " " + c[e].toString(a1);
        return b;
    };
    t.freeze = function() {
        this._isFrozen = !0;
        var a1 = this.segments;
        a1.freeze();
        var b = a1.s;
        a1 = a1.length;
        for(var c = 0; c < a1; c++)b[c].freeze();
        return this;
    };
    t.ka = function() {
        this._isFrozen = !1;
        var a1 = this.segments;
        a1.ka();
        a1 = a1.s;
        for(var b = a1.length, c = 0; c < b; c++)a1[c].ka();
        return this;
    };
    t.Zu = function() {
        if (this._isInvalidBounds) return !0;
        var a1 = this.segments;
        if (this.rr !== a1.Ja) return !0;
        a1 = a1.s;
        for(var b = a1.length, c = 0; c < b; c++)if (a1[c]._isInvalidBounds) return !0;
        return !1;
    };
    t.add = function(a1) {
        this.ol.add(a1);
        return this;
    };
    t.ca = function(a1, b, c) {
        for(var d = this.startX, e = this.startY, f = d, g = e, h = this.segments.s, k = h.length, l = 0; l < k; l++){
            var m = h[l];
            switch(m.type){
                case Dd:
                    f = m.endX;
                    g = m.endY;
                    d = m.endX;
                    e = m.endY;
                    break;
                case pd:
                    if (K.Zb(d, e, m.endX, m.endY, c, a1, b)) return !0;
                    d = m.endX;
                    e = m.endY;
                    break;
                case Ed:
                    if (K.bs(d, e, m.point1X, m.point1Y, m.point2X, m.point2Y, m.endX, m.endY, .5, a1, b, c)) return !0;
                    d = m.endX;
                    e = m.endY;
                    break;
                case Kd:
                    if (K.jv(d, e, m.point1X, m.point1Y, m.endX, m.endY, .5, a1, b, c)) return !0;
                    d = m.endX;
                    e = m.endY;
                    break;
                case Ld:
                case Md:
                    var n = m.type === Ld ? Nd(m, this) : Od(m, this, d, e), p = n.length, q = m.type === Ld ? m.centerX : m.endX, r = m.type === Ld ? m.centerY : m.endY;
                    if (0 === p) {
                        if (K.Zb(d, e, q, r, c, a1, b)) return !0;
                        d = q;
                        e = r;
                        break;
                    }
                    q = null;
                    for(r = 0; r < p; r++)if (q = n[r], 0 === r && K.Zb(d, e, q[0], q[1], c, a1, b) || K.bs(q[0], q[1], q[2], q[3], q[4], q[5], q[6], q[7], .5, a1, b, c)) return !0;
                    null !== q && (d = q[6], e = q[7]);
                    break;
                default:
                    C("Unknown Segment type: " + m.type);
            }
            if (m.isClosed && (d !== f || e !== g) && K.Zb(d, e, f, g, c, a1, b)) return !0;
        }
        return !1;
    };
    ma.Object.defineProperties(Wd.prototype, {
        _isFrozen: {
            get: function() {
                return 0 !== (this.l & 1);
            },
            set: function(a1) {
                this.l = a1 ? this.l | 1 : this.l & -2;
            }
        },
        _isInvalidBounds: {
            get: function() {
                return 0 !== (this.l & 2);
            },
            set: function(a1) {
                this.l = a1 ? this.l | 2 : this.l & -3;
            }
        },
        isFilled: {
            get: function() {
                return 0 !== (this.l & 4);
            },
            set: function(a1) {
                this._isFrozen && va(this, a1);
                this.l = a1 ? this.l | 4 : this.l & -5;
            }
        },
        isShadowed: {
            get: function() {
                return 0 !== (this.l & 8);
            },
            set: function(a1) {
                this._isFrozen && va(this, a1);
                this.l = a1 ? this.l | 8 : this.l & -9;
            }
        },
        isEvenOdd: {
            get: function() {
                return 0 !== (this.l & 16);
            },
            set: function(a1) {
                this._isFrozen && va(this, a1);
                this.l = a1 ? this.l | 16 : this.l & -17;
            }
        },
        startX: {
            get: function() {
                return this.od;
            },
            set: function(a1) {
                this._isFrozen && va(this, a1);
                this.od = a1;
                this._isInvalidBounds = !0;
            }
        },
        startY: {
            get: function() {
                return this.pd;
            },
            set: function(a1) {
                this._isFrozen && va(this, a1);
                this.pd = a1;
                this._isInvalidBounds = !0;
            }
        },
        segments: {
            get: function() {
                return this.ol;
            },
            set: function(a1) {
                this._isFrozen && va(this, a1);
                this.ol = a1;
                this._isInvalidBounds = !0;
            }
        }
    });
    Wd.prototype.add = Wd.prototype.add;
    Wd.prototype.equalsApprox = Wd.prototype.Xa;
    Wd.className = "PathFigure";
    function Xd(a1, b, c, d, e, f, g, h) {
        Qa(this);
        void 0 === a1 && (a1 = pd);
        this.na = a1;
        this.l = 2;
        void 0 !== b ? this.Dc = b : this.Dc = 0;
        void 0 !== c ? this.Ec = c : this.Ec = 0;
        void 0 === d && (d = 0);
        void 0 === e && (e = 0);
        void 0 === f && (f = 0);
        void 0 === g && (g = 0);
        a1 === Md ? (a1 = f % 360, 0 > a1 && (a1 += 360), this.Ne = a1, this.Vh = 0, this.Wh = Math.max(d, 0), this.Pg = Math.max(e, 0), "boolean" === typeof g ? g && (this.isLargeArc = !0) : "number" === typeof g && g && (this.isLargeArc = !0), h && (this.isClockwiseArc = !0)) : (this.Ne = d, this.Vh = e, a1 === Ld && (f = Math.max(f, 0)), this.Wh = f, "number" === typeof g ? (a1 === Ld && (g = Math.max(g, 0)), this.Pg = g) : this.Pg = 0);
        this.ae = null;
    }
    Xd.prototype.copy = function() {
        var a1 = new Xd;
        a1.na = this.na;
        a1.l = this.l & -2;
        a1.Dc = this.Dc;
        a1.Ec = this.Ec;
        a1.Ne = this.Ne;
        a1.Vh = this.Vh;
        a1.Wh = this.Wh;
        a1.Pg = this.Pg;
        return a1;
    };
    t = Xd.prototype;
    t.Xa = function(a1) {
        if (!(a1 instanceof Xd) || this.type !== a1.type || this.isClosed !== a1.isClosed) return !1;
        switch(this.type){
            case Dd:
            case pd:
                return K.B(this.endX, a1.endX) && K.B(this.endY, a1.endY);
            case Ed:
                return K.B(this.endX, a1.endX) && K.B(this.endY, a1.endY) && K.B(this.point1X, a1.point1X) && K.B(this.point1Y, a1.point1Y) && K.B(this.point2X, a1.point2X) && K.B(this.point2Y, a1.point2Y);
            case Kd:
                return K.B(this.endX, a1.endX) && K.B(this.endY, a1.endY) && K.B(this.point1X, a1.point1X) && K.B(this.point1Y, a1.point1Y);
            case Ld:
                return K.B(this.startAngle, a1.startAngle) && K.B(this.sweepAngle, a1.sweepAngle) && K.B(this.centerX, a1.centerX) && K.B(this.centerY, a1.centerY) && K.B(this.radiusX, a1.radiusX) && K.B(this.radiusY, a1.radiusY);
            case Md:
                return this.isClockwiseArc === a1.isClockwiseArc && this.isLargeArc === a1.isLargeArc && K.B(this.xAxisRotation, a1.xAxisRotation) && K.B(this.endX, a1.endX) && K.B(this.endY, a1.endY) && K.B(this.radiusX, a1.radiusX) && K.B(this.radiusY, a1.radiusY);
            default:
                return !1;
        }
    };
    t.qb = function(a1) {
        a1.classType === Xd && (this.type = a1);
    };
    t.toString = function(a1) {
        void 0 === a1 && (a1 = -1);
        switch(this.type){
            case Dd:
                a1 = 0 > a1 ? "M" + this.endX.toString() + " " + this.endY.toString() : "M" + this.endX.toFixed(a1) + " " + this.endY.toFixed(a1);
                break;
            case pd:
                a1 = 0 > a1 ? "L" + this.endX.toString() + " " + this.endY.toString() : "L" + this.endX.toFixed(a1) + " " + this.endY.toFixed(a1);
                break;
            case Ed:
                a1 = 0 > a1 ? "C" + this.point1X.toString() + " " + this.point1Y.toString() + " " + this.point2X.toString() + " " + this.point2Y.toString() + " " + this.endX.toString() + " " + this.endY.toString() : "C" + this.point1X.toFixed(a1) + " " + this.point1Y.toFixed(a1) + " " + this.point2X.toFixed(a1) + " " + this.point2Y.toFixed(a1) + " " + this.endX.toFixed(a1) + " " + this.endY.toFixed(a1);
                break;
            case Kd:
                a1 = 0 > a1 ? "Q" + this.point1X.toString() + " " + this.point1Y.toString() + " " + this.endX.toString() + " " + this.endY.toString() : "Q" + this.point1X.toFixed(a1) + " " + this.point1Y.toFixed(a1) + " " + this.endX.toFixed(a1) + " " + this.endY.toFixed(a1);
                break;
            case Ld:
                a1 = 0 > a1 ? "B" + this.startAngle.toString() + " " + this.sweepAngle.toString() + " " + this.centerX.toString() + " " + this.centerY.toString() + " " + this.radiusX.toString() + " " + this.radiusY.toString() : "B" + this.startAngle.toFixed(a1) + " " + this.sweepAngle.toFixed(a1) + " " + this.centerX.toFixed(a1) + " " + this.centerY.toFixed(a1) + " " + this.radiusX.toFixed(a1) + " " + this.radiusY.toFixed(a1);
                break;
            case Md:
                a1 = 0 > a1 ? "A" + this.radiusX.toString() + " " + this.radiusY.toString() + " " + this.xAxisRotation.toString() + " " + (this.isLargeArc ? 1 : 0) + " " + (this.isClockwiseArc ? 1 : 0) + " " + this.endX.toString() + " " + this.endY.toString() : "A" + this.radiusX.toFixed(a1) + " " + this.radiusY.toFixed(a1) + " " + this.xAxisRotation.toFixed(a1) + " " + (this.isLargeArc ? 1 : 0) + " " + (this.isClockwiseArc ? 1 : 0) + " " + this.endX.toFixed(a1) + " " + this.endY.toFixed(a1);
                break;
            default:
                a1 = this.type.toString();
        }
        return a1 + (this.isClosed ? "z" : "");
    };
    t.freeze = function() {
        this._isFrozen = !0;
        return this;
    };
    t.ka = function() {
        this._isFrozen = !1;
        return this;
    };
    t.close = function() {
        this.isClosed = !0;
        return this;
    };
    function Nd(a1, b) {
        if (null !== a1.ae && !1 === b._isInvalidBounds) return a1.ae;
        var c = a1.radiusX, d = a1.radiusY;
        void 0 === d && (d = c);
        if (0 === c || 0 === d) return a1.ae = [], a1.ae;
        b = a1.Ne;
        var e = a1.Vh, f = K.jx(0, 0, c < d ? c : d, a1.startAngle, a1.startAngle + a1.sweepAngle, !1);
        if (c !== d) {
            var g = ld.alloc();
            g.reset();
            c < d ? g.scale(1, d / c) : g.scale(c / d, 1);
            P.Ha(f, g);
            ld.free(g);
        }
        c = f.length;
        for(d = 0; d < c; d++)g = f[d], g[0] += b, g[1] += e, g[2] += b, g[3] += e, g[4] += b, g[5] += e, g[6] += b, g[7] += e;
        a1.ae = f;
        return a1.ae;
    }
    function Od(a1, b, c, d) {
        function e(a1, b, c, d) {
            return (a1 * d < b * c ? -1 : 1) * Math.acos((a1 * c + b * d) / (Math.sqrt(a1 * a1 + b * b) * Math.sqrt(c * c + d * d)));
        }
        if (null !== a1.ae && !1 === b._isInvalidBounds) return a1.ae;
        if (0 === a1.radiusX || 0 === a1.radiusY) return a1.ae = [], a1.ae;
        b = a1.Wh;
        var f = a1.Pg;
        0 === b && (b = 1E-4);
        0 === f && (f = 1E-4);
        var g = Math.PI / 180 * a1.Ne, h = a1.isLargeArc, k = a1.isClockwiseArc, l = a1.Dc, m = a1.Ec, n = Math.cos(g), p = Math.sin(g), q = n * (c - l) / 2 + p * (d - m) / 2;
        g = -p * (c - l) / 2 + n * (d - m) / 2;
        var r = q * q / (b * b) + g * g / (f * f);
        1 < r && (b *= Math.sqrt(r), f *= Math.sqrt(r));
        r = (h === k ? -1 : 1) * Math.sqrt((b * b * f * f - b * b * g * g - f * f * q * q) / (b * b * g * g + f * f * q * q));
        isNaN(r) && (r = 0);
        h = r * b * g / f;
        r = r * -f * q / b;
        isNaN(h) && (h = 0);
        isNaN(r) && (r = 0);
        c = (c + l) / 2 + n * h - p * r;
        d = (d + m) / 2 + p * h + n * r;
        m = e(1, 0, (q - h) / b, (g - r) / f);
        n = (q - h) / b;
        l = (g - r) / f;
        q = (-q - h) / b;
        h = (-g - r) / f;
        g = e(n, l, q, h);
        q = (n * q + l * h) / (Math.sqrt(n * n + l * l) * Math.sqrt(q * q + h * h));
        -1 >= q ? g = Math.PI : 1 <= q && (g = 0);
        !k && 0 < g && (g -= 2 * Math.PI);
        k && 0 > g && (g += 2 * Math.PI);
        k = b > f ? 1 : b / f;
        q = b > f ? f / b : 1;
        b = K.jx(0, 0, b > f ? b : f, m, m + g, !0);
        f = ld.alloc();
        f.reset();
        f.translate(c, d);
        f.rotate(a1.Ne, 0, 0);
        f.scale(k, q);
        P.Ha(b, f);
        ld.free(f);
        a1.ae = b;
        return a1.ae;
    }
    ma.Object.defineProperties(Xd.prototype, {
        _isFrozen: {
            get: function() {
                return 0 !== (this.l & 1);
            },
            set: function(a1) {
                this.l = a1 ? this.l | 1 : this.l & -2;
            }
        },
        _isInvalidBounds: {
            get: function() {
                return 0 !== (this.l & 2);
            },
            set: function(a1) {
                this.l = a1 ? this.l | 2 : this.l & -3;
            }
        },
        isClosed: {
            get: function() {
                return 0 !== (this.l & 8);
            },
            set: function(a1) {
                this.isClosed !== a1 && (this.l = a1 ? this.l | 8 : this.l & -9, this._isInvalidBounds = !0);
            }
        },
        type: {
            get: function() {
                return this.na;
            },
            set: function(a1) {
                this._isFrozen && va(this, a1);
                this.na = a1;
                this._isInvalidBounds = !0;
            }
        },
        endX: {
            get: function() {
                return this.Dc;
            },
            set: function(a1) {
                this._isFrozen && va(this, a1);
                this.Dc = a1;
                this._isInvalidBounds = !0;
            }
        },
        endY: {
            get: function() {
                return this.Ec;
            },
            set: function(a1) {
                this._isFrozen && va(this, a1);
                this.Ec = a1;
                this._isInvalidBounds = !0;
            }
        },
        point1X: {
            get: function() {
                return this.Ne;
            },
            set: function(a1) {
                this._isFrozen && va(this, a1);
                this.Ne = a1;
                this._isInvalidBounds = !0;
            }
        },
        point1Y: {
            get: function() {
                return this.Vh;
            },
            set: function(a1) {
                this._isFrozen && va(this, a1);
                this.Vh = a1;
                this._isInvalidBounds = !0;
            }
        },
        point2X: {
            get: function() {
                return this.Wh;
            },
            set: function(a1) {
                this._isFrozen && va(this, a1);
                this.Wh = a1;
                this._isInvalidBounds = !0;
            }
        },
        point2Y: {
            get: function() {
                return this.Pg;
            },
            set: function(a1) {
                this._isFrozen && va(this, a1);
                this.Pg = a1;
                this._isInvalidBounds = !0;
            }
        },
        centerX: {
            get: function() {
                return this.Ne;
            },
            set: function(a1) {
                this._isFrozen && va(this, a1);
                this.Ne = a1;
                this._isInvalidBounds = !0;
            }
        },
        centerY: {
            get: function() {
                return this.Vh;
            },
            set: function(a1) {
                this._isFrozen && va(this, a1);
                this.Vh = a1;
                this._isInvalidBounds = !0;
            }
        },
        radiusX: {
            get: function() {
                return this.Wh;
            },
            set: function(a1) {
                0 > a1 && xa(a1, ">= zero", Xd, "radiusX");
                this._isFrozen && va(this, a1);
                this.Wh = a1;
                this._isInvalidBounds = !0;
            }
        },
        radiusY: {
            get: function() {
                return this.Pg;
            },
            set: function(a1) {
                0 > a1 && xa(a1, ">= zero", Xd, "radiusY");
                this._isFrozen && va(this, a1);
                this.Pg = a1;
                this._isInvalidBounds = !0;
            }
        },
        startAngle: {
            get: function() {
                return this.Dc;
            },
            set: function(a1) {
                this._isFrozen && va(this, a1);
                a1 %= 360;
                0 > a1 && (a1 += 360);
                this.Dc = a1;
                this._isInvalidBounds = !0;
            }
        },
        sweepAngle: {
            get: function() {
                return this.Ec;
            },
            set: function(a1) {
                this._isFrozen && va(this, a1);
                360 < a1 && (a1 = 360);
                -360 > a1 && (a1 = -360);
                this.Ec = a1;
                this._isInvalidBounds = !0;
            }
        },
        isClockwiseArc: {
            get: function() {
                return 0 !== (this.l & 4);
            },
            set: function(a1) {
                this._isFrozen && va(this, a1);
                this.l = a1 ? this.l | 4 : this.l & -5;
                this._isInvalidBounds = !0;
            }
        },
        isLargeArc: {
            get: function() {
                return 0 !== (this.l & 16);
            },
            set: function(a1) {
                this._isFrozen && va(this, a1);
                this.l = a1 ? this.l | 16 : this.l & -17;
                this._isInvalidBounds = !0;
            }
        },
        xAxisRotation: {
            get: function() {
                return this.Ne;
            },
            set: function(a1) {
                this._isFrozen && va(this, a1);
                a1 %= 360;
                0 > a1 && (a1 += 360);
                this.Ne = a1;
                this._isInvalidBounds = !0;
            }
        }
    });
    Xd.prototype.equalsApprox = Xd.prototype.Xa;
    var Dd = new E(Xd, "Move", 0), pd = new E(Xd, "Line", 1), Ed = new E(Xd, "Bezier", 2), Kd = new E(Xd, "QuadraticBezier", 3), Ld = new E(Xd, "Arc", 4), Md = new E(Xd, "SvgArc", 4);
    Xd.className = "PathSegment";
    Xd.Move = Dd;
    Xd.Line = pd;
    Xd.Bezier = Ed;
    Xd.QuadraticBezier = Kd;
    Xd.Arc = Ld;
    Xd.SvgArc = Md;
    function Zd() {
        this.H = null;
        this.wu = new J(0, 0).freeze();
        this.lt = new J(0, 0).freeze();
        this.Ap = this.Qq = 0;
        this.Bp = 1;
        this.wq = "";
        this.Vr = this.Sp = !1;
        this.Qp = this.Dp = 0;
        this.xg = this.mq = this.sq = !1;
        this.Yp = null;
        this.Qr = 0;
        this.xd = this.Mr = null;
    }
    Zd.prototype.copy = function() {
        var a1 = new Zd;
        return this.clone(a1);
    };
    Zd.prototype.clone = function(a1) {
        a1.H = this.H;
        a1.wu.assign(this.viewPoint);
        a1.lt.assign(this.documentPoint);
        a1.Qq = this.Qq;
        a1.Ap = this.Ap;
        a1.Bp = this.Bp;
        a1.wq = this.wq;
        a1.Sp = this.Sp;
        a1.Vr = this.Vr;
        a1.Dp = this.Dp;
        a1.Qp = this.Qp;
        a1.sq = this.sq;
        a1.mq = this.mq;
        a1.xg = this.xg;
        a1.Yp = this.Yp;
        a1.Qr = this.Qr;
        a1.Mr = this.Mr;
        a1.xd = this.xd;
        return a1;
    };
    Zd.prototype.toString = function() {
        var a1 = "^";
        0 !== this.modifiers && (a1 += "M:" + this.modifiers);
        0 !== this.button && (a1 += "B:" + this.button);
        "" !== this.key && (a1 += "K:" + this.key);
        0 !== this.clickCount && (a1 += "C:" + this.clickCount);
        0 !== this.delta && (a1 += "D:" + this.delta);
        this.handled && (a1 += "h");
        this.bubbles && (a1 += "b");
        null !== this.documentPoint && (a1 += "@" + this.documentPoint.toString());
        return a1;
    };
    Zd.prototype.Ro = function(a1, b) {
        var c = this.diagram;
        if (null === c) return b;
        $d(c, a1, b);
        return b;
    };
    Zd.prototype.Bz = function(a1, b) {
        var c = this.diagram;
        if (null === c) return b;
        $d(c, a1, b);
        b.assign(c.Os(b));
        return b;
    };
    ma.Object.defineProperties(Zd.prototype, {
        diagram: {
            get: function() {
                return this.H;
            },
            set: function(a1) {
                this.H = a1;
            }
        },
        viewPoint: {
            get: function() {
                return this.wu;
            },
            set: function(a1) {
                this.wu.assign(a1);
            }
        },
        documentPoint: {
            get: function() {
                return this.lt;
            },
            set: function(a1) {
                this.lt.assign(a1);
            }
        },
        modifiers: {
            get: function() {
                return this.Qq;
            },
            set: function(a1) {
                this.Qq = a1;
            }
        },
        button: {
            get: function() {
                return this.Ap;
            },
            set: function(a1) {
                this.Ap = a1;
                if (null === this.event) switch(a1){
                    case 0:
                        this.buttons = 1;
                        break;
                    case 1:
                        this.buttons = 4;
                        break;
                    case 2:
                        this.buttons = 2;
                }
            }
        },
        buttons: {
            get: function() {
                return this.Bp;
            },
            set: function(a1) {
                this.Bp = a1;
            }
        },
        key: {
            get: function() {
                return this.wq;
            },
            set: function(a1) {
                this.wq = a1;
            }
        },
        down: {
            get: function() {
                return this.Sp;
            },
            set: function(a1) {
                this.Sp = a1;
            }
        },
        up: {
            get: function() {
                return this.Vr;
            },
            set: function(a1) {
                this.Vr = a1;
            }
        },
        clickCount: {
            get: function() {
                return this.Dp;
            },
            set: function(a1) {
                this.Dp = a1;
            }
        },
        delta: {
            get: function() {
                return this.Qp;
            },
            set: function(a1) {
                this.Qp = a1;
            }
        },
        isMultiTouch: {
            get: function() {
                return this.sq;
            },
            set: function(a1) {
                this.sq = a1;
            }
        },
        handled: {
            get: function() {
                return this.mq;
            },
            set: function(a1) {
                this.mq = a1;
            }
        },
        bubbles: {
            get: function() {
                return this.xg;
            },
            set: function(a1) {
                this.xg = a1;
            }
        },
        event: {
            get: function() {
                return this.Yp;
            },
            set: function(a1) {
                this.Yp = a1;
            }
        },
        isTouchEvent: {
            get: function() {
                var a1 = this.event;
                return null === a1 ? !1 : "touch" === a1.pointerType || "pen" === a1.pointerType;
            }
        },
        timestamp: {
            get: function() {
                return this.Qr;
            },
            set: function(a1) {
                this.Qr = a1;
            }
        },
        targetDiagram: {
            get: function() {
                return this.Mr;
            },
            set: function(a1) {
                this.Mr = a1;
            }
        },
        targetObject: {
            get: function() {
                return this.xd;
            },
            set: function(a1) {
                this.xd = a1;
            }
        },
        control: {
            get: function() {
                return 0 !== (this.modifiers & 1);
            },
            set: function(a1) {
                this.modifiers = a1 ? this.modifiers | 1 : this.modifiers & -2;
            }
        },
        shift: {
            get: function() {
                return 0 !== (this.modifiers & 4);
            },
            set: function(a1) {
                this.modifiers = a1 ? this.modifiers | 4 : this.modifiers & -5;
            }
        },
        alt: {
            get: function() {
                return 0 !== (this.modifiers & 2);
            },
            set: function(a1) {
                this.modifiers = a1 ? this.modifiers | 2 : this.modifiers & -3;
            }
        },
        meta: {
            get: function() {
                return 0 !== (this.modifiers & 8);
            },
            set: function(a1) {
                this.modifiers = a1 ? this.modifiers | 8 : this.modifiers & -9;
            }
        },
        left: {
            get: function() {
                var a1 = this.event;
                return null === a1 || "mousedown" !== a1.type && "mouseup" !== a1.type && "pointerdown" !== a1.type && "pointerup" !== a1.type ? 0 !== (this.buttons & 1) : 0 === this.button;
            },
            set: function(a1) {
                this.buttons = a1 ? this.buttons | 1 : this.buttons & -2;
            }
        },
        right: {
            get: function() {
                var a1 = this.event;
                return null === a1 || "mousedown" !== a1.type && "mouseup" !== a1.type && "pointerdown" !== a1.type && "pointerup" !== a1.type ? 0 !== (this.buttons & 2) : 2 === this.button;
            },
            set: function(a1) {
                this.buttons = a1 ? this.buttons | 2 : this.buttons & -3;
            }
        },
        middle: {
            get: function() {
                var a1 = this.event;
                return null === a1 || "mousedown" !== a1.type && "mouseup" !== a1.type && "pointerdown" !== a1.type && "pointerup" !== a1.type ? 0 !== (this.buttons & 4) : 1 === this.button;
            },
            set: function(a1) {
                this.buttons = a1 ? this.buttons | 4 : this.buttons & -5;
            }
        }
    });
    Zd.prototype.getMultiTouchDocumentPoint = Zd.prototype.Bz;
    Zd.prototype.getMultiTouchViewPoint = Zd.prototype.Ro;
    Zd.className = "InputEvent";
    function ae() {
        this.H = null;
        this.xa = "";
        this.$q = this.Kr = null;
    }
    ae.prototype.copy = function() {
        var a1 = new ae;
        a1.H = this.H;
        a1.xa = this.xa;
        a1.Kr = this.Kr;
        a1.$q = this.$q;
        return a1;
    };
    ae.prototype.toString = function() {
        var a1 = "*" + this.name;
        null !== this.subject && (a1 += ":" + this.subject.toString());
        null !== this.parameter && (a1 += "(" + this.parameter.toString() + ")");
        return a1;
    };
    ma.Object.defineProperties(ae.prototype, {
        diagram: {
            get: function() {
                return this.H;
            },
            set: function(a1) {
                this.H = a1;
            }
        },
        name: {
            get: function() {
                return this.xa;
            },
            set: function(a1) {
                this.xa = a1;
            }
        },
        subject: {
            get: function() {
                return this.Kr;
            },
            set: function(a1) {
                this.Kr = a1;
            }
        },
        parameter: {
            get: function() {
                return this.$q;
            },
            set: function(a1) {
                this.$q = a1;
            }
        }
    });
    ae.className = "DiagramEvent";
    function be() {
        this.Em = ce;
        this.rf = this.Pq = "";
        this.Kn = this.Ln = this.Qn = this.Rn = this.Pn = this.H = this.dc = null;
    }
    be.prototype.clear = function() {
        this.Kn = this.Ln = this.Qn = this.Rn = this.Pn = this.H = this.dc = null;
    };
    be.prototype.copy = function() {
        var a1 = new be;
        a1.Em = this.Em;
        a1.Pq = this.Pq;
        a1.rf = this.rf;
        a1.dc = this.dc;
        a1.H = this.H;
        a1.Pn = this.Pn;
        var b = this.Rn;
        a1.Rn = za(b) && "function" === typeof b.J ? b.J() : b;
        b = this.Qn;
        a1.Qn = za(b) && "function" === typeof b.J ? b.J() : b;
        b = this.Ln;
        a1.Ln = za(b) && "function" === typeof b.J ? b.J() : b;
        b = this.Kn;
        a1.Kn = za(b) && "function" === typeof b.J ? b.J() : b;
        return a1;
    };
    be.prototype.qb = function(a1) {
        a1.classType === be && (this.change = a1);
    };
    be.prototype.toString = function() {
        var a1 = "";
        a1 = this.change === de ? a1 + "* " : this.change === ce ? a1 + (null !== this.model ? "!m" : "!d") : a1 + ((null !== this.model ? "!m" : "!d") + this.change);
        this.propertyName && "string" === typeof this.propertyName && (a1 += " " + this.propertyName);
        this.modelChange && this.modelChange !== this.propertyName && (a1 += " " + this.modelChange);
        a1 += ": ";
        this.change === de ? null !== this.oldValue && (a1 += " " + this.oldValue) : (null !== this.object && (a1 += Ia(this.object)), null !== this.oldValue && (a1 += "  old: " + Ia(this.oldValue)), null !== this.oldParam && (a1 += " " + this.oldParam), null !== this.newValue && (a1 += "  new: " + Ia(this.newValue)), null !== this.newParam && (a1 += " " + this.newParam));
        return a1;
    };
    be.prototype.I = function(a1) {
        return a1 ? this.oldValue : this.newValue;
    };
    be.prototype.Dz = function(a1) {
        return a1 ? this.oldParam : this.newParam;
    };
    be.prototype.canUndo = function() {
        return null !== this.model || null !== this.diagram ? !0 : !1;
    };
    be.prototype.undo = function() {
        this.canUndo() && (null !== this.model ? this.model.changeState(this, !0) : null !== this.diagram && this.diagram.changeState(this, !0));
    };
    be.prototype.canRedo = function() {
        return null !== this.model || null !== this.diagram ? !0 : !1;
    };
    be.prototype.redo = function() {
        this.canRedo() && (null !== this.model ? this.model.changeState(this, !1) : null !== this.diagram && this.diagram.changeState(this, !1));
    };
    ma.Object.defineProperties(be.prototype, {
        model: {
            get: function() {
                return this.dc;
            },
            set: function(a1) {
                this.dc = a1;
            }
        },
        diagram: {
            get: function() {
                return this.H;
            },
            set: function(a1) {
                this.H = a1;
            }
        },
        change: {
            get: function() {
                return this.Em;
            },
            set: function(a1) {
                this.Em = a1;
            }
        },
        modelChange: {
            get: function() {
                return this.Pq;
            },
            set: function(a1) {
                this.Pq = a1;
            }
        },
        propertyName: {
            get: function() {
                return this.rf;
            },
            set: function(a1) {
                this.rf = a1;
            }
        },
        isTransactionFinished: {
            get: function() {
                return this.Em === de && ("CommittedTransaction" === this.rf || "FinishedUndo" === this.rf || "FinishedRedo" === this.rf);
            }
        },
        object: {
            get: function() {
                return this.Pn;
            },
            set: function(a1) {
                this.Pn = a1;
            }
        },
        oldValue: {
            get: function() {
                return this.Rn;
            },
            set: function(a1) {
                this.Rn = a1;
            }
        },
        oldParam: {
            get: function() {
                return this.Qn;
            },
            set: function(a1) {
                this.Qn = a1;
            }
        },
        newValue: {
            get: function() {
                return this.Ln;
            },
            set: function(a1) {
                this.Ln = a1;
            }
        },
        newParam: {
            get: function() {
                return this.Kn;
            },
            set: function(a1) {
                this.Kn = a1;
            }
        }
    });
    be.prototype.redo = be.prototype.redo;
    be.prototype.canRedo = be.prototype.canRedo;
    be.prototype.undo = be.prototype.undo;
    be.prototype.canUndo = be.prototype.canUndo;
    be.prototype.getParam = be.prototype.Dz;
    be.prototype.getValue = be.prototype.I;
    be.prototype.clear = be.prototype.clear;
    var de = new E(be, "Transaction", -1), ce = new E(be, "Property", 0), ee = new E(be, "Insert", 1), fe = new E(be, "Remove", 2);
    be.className = "ChangedEvent";
    be.Transaction = de;
    be.Property = ce;
    be.Insert = ee;
    be.Remove = fe;
    function ge() {
        this.o = (new F).freeze();
        this.xa = "";
        this.j = !1;
    }
    ge.prototype.toString = function(a1) {
        var b = "Transaction: " + this.name + " " + this.changes.count.toString() + (this.isComplete ? "" : ", incomplete");
        if (void 0 !== a1 && 0 < a1) {
            a1 = this.changes.count;
            for(var c = 0; c < a1; c++){
                var d = this.changes.M(c);
                null !== d && (b += "\n  " + d.toString());
            }
        }
        return b;
    };
    ge.prototype.clear = function() {
        var a1 = this.changes;
        a1.ka();
        for(var b = a1.count - 1; 0 <= b; b--){
            var c = a1.M(b);
            null !== c && c.clear();
        }
        a1.clear();
        a1.freeze();
    };
    ge.prototype.canUndo = function() {
        return this.isComplete;
    };
    ge.prototype.undo = function() {
        if (this.canUndo()) for(var a1 = this.changes.count - 1; 0 <= a1; a1--){
            var b = this.changes.M(a1);
            null !== b && b.undo();
        }
    };
    ge.prototype.canRedo = function() {
        return this.isComplete;
    };
    ge.prototype.redo = function() {
        if (this.canRedo()) for(var a1 = this.changes.count, b = 0; b < a1; b++){
            var c = this.changes.M(b);
            null !== c && c.redo();
        }
    };
    ge.prototype.$j = function() {
        if (this.isComplete) {
            var a1 = this.changes;
            a1.ka();
            for(var b = new ob, c = 0; c < a1.count; c++){
                var d = a1.M(c);
                if (null !== d && d.change === ce && d.object) {
                    var e = b.get(d.object);
                    e || (e = new ob, b.set(d.object, e));
                    var f = e.get(d.propertyName);
                    null === f ? e.set(d.propertyName, -1) : (0 < f && a1.cd(f, null), e.set(d.propertyName, c));
                }
            }
            for(c = b = 0; c < a1.count; c++)d = a1.M(c), null !== d && (c > b && a1.cd(b, d), b++);
            for(; a1.length > b;)a1.pop();
            a1.freeze();
        }
    };
    ma.Object.defineProperties(ge.prototype, {
        changes: {
            get: function() {
                return this.o;
            }
        },
        name: {
            get: function() {
                return this.xa;
            },
            set: function(a1) {
                this.xa = a1;
            }
        },
        isComplete: {
            get: function() {
                return this.j;
            },
            set: function(a1) {
                this.j = a1;
            }
        }
    });
    ge.prototype.optimize = ge.prototype.$j;
    ge.prototype.redo = ge.prototype.redo;
    ge.prototype.canRedo = ge.prototype.canRedo;
    ge.prototype.undo = ge.prototype.undo;
    ge.prototype.canUndo = ge.prototype.canUndo;
    ge.prototype.clear = ge.prototype.clear;
    ge.className = "Transaction";
    function he() {
        this.Ot = new H;
        this.Jd = !1;
        this.u = (new F).freeze();
        this.Ce = -1;
        this.o = 999;
        this.Fe = !1;
        this.Mp = null;
        this.bi = 0;
        this.j = !1;
        this.Ie = (new F).freeze();
        this.gl = new F;
        this.st = !0;
        this.Ct = this.qq = this.Ft = this.Et = !1;
    }
    he.prototype.toString = function(a1) {
        var b = "UndoManager " + this.historyIndex + "<" + this.history.count + "<=" + this.maxHistoryLength;
        b += "[";
        for(var c = this.nestedTransactionNames.count, d = 0; d < c; d++)0 < d && (b += " "), b += this.nestedTransactionNames.M(d);
        b += "]";
        if (void 0 !== a1 && 0 < a1) for(c = this.history.count, d = 0; d < c; d++)b += "\n " + this.history.M(d).toString(a1 - 1);
        return b;
    };
    he.prototype.clear = function() {
        var a1 = this.history;
        a1.ka();
        for(var b = a1.count - 1; 0 <= b; b--){
            var c = a1.M(b);
            null !== c && c.clear();
        }
        a1.clear();
        this.Ce = -1;
        a1.freeze();
        this.Fe = !1;
        this.Mp = null;
        this.bi = 0;
        this.Ie.ka();
        this.Ie.clear();
        this.Ie.freeze();
        this.gl.clear();
        this.Ct = this.qq = this.Ft = this.Et = !1;
    };
    he.prototype.copyProperties = function(a1) {
        this.isEnabled = a1.isEnabled;
        this.maxHistoryLength = a1.maxHistoryLength;
        this.checksTransactionLevel = a1.checksTransactionLevel;
    };
    t = he.prototype;
    t.Xw = function(a1) {
        this.Ot.add(a1);
    };
    t.Rx = function(a1) {
        this.Ot.remove(a1);
    };
    t.Ea = function(a1) {
        void 0 === a1 && (a1 = "");
        null === a1 && (a1 = "");
        if (this.isUndoingRedoing) return !1;
        !0 === this.st && (this.st = !1, this.bi++, this.isInternalTransaction || this.Pb("StartingFirstTransaction", a1, this.currentTransaction), 0 < this.bi && this.bi--);
        this.isEnabled && (this.Ie.ka(), this.Ie.add(a1), this.Ie.freeze(), null === this.currentTransaction ? this.gl.add(0) : this.gl.add(this.currentTransaction.changes.count));
        this.bi++;
        var b = 1 === this.transactionLevel;
        b && (this.isInternalTransaction || this.Pb("StartedTransaction", a1, this.currentTransaction));
        return b;
    };
    t.eb = function(a1) {
        void 0 === a1 && (a1 = "");
        return ie(this, !0, a1);
    };
    t.Kf = function() {
        return ie(this, !1, "");
    };
    function ie(a1, b, c) {
        if (a1.isUndoingRedoing) return !1;
        a1.checksTransactionLevel && 1 > a1.transactionLevel && ya("Ending transaction without having started a transaction: " + c);
        var d = 1 === a1.transactionLevel, e = a1.currentTransaction;
        d && b && (a1.isInternalTransaction || a1.Pb("CommittingTransaction", c, e));
        var f = 0;
        if (0 < a1.transactionLevel && (a1.bi--, a1.isEnabled)) {
            var g = a1.Ie.count;
            0 < g && ("" === c && (c = a1.Ie.M(0)), a1.Ie.ka(), a1.Ie.mb(g - 1), a1.Ie.freeze());
            g = a1.gl.count;
            0 < g && (f = a1.gl.M(g - 1), a1.gl.mb(g - 1));
        }
        if (d) {
            if (b) a1.qq = !1, null === e && "" !== c && (e = a1.currentTransaction), a1.isEnabled && null !== e && (e.isComplete || (e.isComplete = !0, e.name = c), a1.lx(), b = a1.history, b.ka(), d = a1.maxHistoryLength, 0 <= d && (0 === d ? b.clear() : b.count >= d && (f = b.M(0), null !== f && f.clear(), b.mb(0), a1.Ce--)), 0 === d || 0 !== b.count && b.get(b.count - 1) === e || (b.add(e), a1.Ce++), b.freeze()), a1.isInternalTransaction || a1.Pb("CommittedTransaction", c, e);
            else {
                a1.Fe = !0;
                try {
                    a1.isEnabled && null !== e && (e.isComplete = !0, e.undo());
                } finally{
                    a1.isInternalTransaction || a1.Pb("RolledBackTransaction", c, e), a1.Fe = !1;
                }
                null !== e && e.clear();
            }
            a1.Mp = null;
            a1.isPendingClear && a1.clear();
            a1.isPendingClear = !1;
            a1.isPendingUnmodified = !1;
            return !0;
        }
        if (a1.isEnabled && !b && null !== e) {
            a1 = f;
            c = e.changes;
            for(e = c.count - 1; e >= a1; e--)b = c.M(e), null !== b && b.undo(), c.ka(), c.mb(e);
            c.freeze();
        }
        return !1;
    }
    t.lx = function() {
        if (!this.isUndoingRedoing && this.canRedo()) {
            var a1 = this.history;
            a1.ka();
            for(var b = a1.count - 1; b > this.historyIndex; b--){
                var c = a1.M(b);
                null !== c && c.clear();
                a1.mb(b);
                this.qq = !0;
            }
            a1.freeze();
        }
    };
    he.prototype.canUndo = function() {
        if (!this.isEnabled || 0 < this.transactionLevel) return !1;
        var a1 = this.transactionToUndo;
        return null !== a1 && a1.canUndo() ? !0 : !1;
    };
    he.prototype.undo = function() {
        if (this.canUndo()) {
            var a1 = this.transactionToUndo;
            try {
                this.Fe = !0, this.Pb("StartingUndo", "Undo", a1), this.Ce--, a1.undo();
            } catch (b) {
                ya("undo error: " + b.toString());
            } finally{
                this.Pb("FinishedUndo", "Undo", a1), this.Fe = !1;
            }
        }
    };
    he.prototype.canRedo = function() {
        if (!this.isEnabled || 0 < this.transactionLevel) return !1;
        var a1 = this.transactionToRedo;
        return null !== a1 && a1.canRedo() ? !0 : !1;
    };
    he.prototype.redo = function() {
        if (this.canRedo()) {
            var a1 = this.transactionToRedo;
            try {
                this.Fe = !0, this.Pb("StartingRedo", "Redo", a1), this.Ce++, a1.redo();
            } catch (b) {
                ya("redo error: " + b.toString());
            } finally{
                this.Pb("FinishedRedo", "Redo", a1), this.Fe = !1;
            }
        }
    };
    he.prototype.Pb = function(a1, b, c) {
        void 0 === c && (c = null);
        var d = new be;
        d.change = de;
        d.propertyName = a1;
        d.object = c;
        d.oldValue = b;
        for(a1 = this.models; a1.next();)b = a1.value, d.model = b, b.cs(d);
    };
    he.prototype.Tu = function(a1) {
        if (this.isEnabled && !this.isUndoingRedoing && !this.skipsEvent(a1)) {
            var b = this.currentTransaction;
            null === b && (this.Mp = b = new ge);
            var c = a1.copy();
            b = b.changes;
            b.ka();
            b.add(c);
            b.freeze();
            this.checksTransactionLevel && 0 >= this.transactionLevel && !this.st && (a1 = a1.diagram, null !== a1 && !1 === a1.pi || ya("Change not within a transaction: " + c.toString()));
        }
    };
    he.prototype.skipsEvent = function(a1) {
        if (null === a1 || 0 > a1.change.value) return !0;
        a1 = a1.object;
        if (null === a1) return !1;
        if (void 0 !== a1.layer) {
            if (a1 = a1.layer, null !== a1 && a1.isTemporary) return !0;
        } else if (a1.isTemporary) return !0;
        return !1;
    };
    ma.Object.defineProperties(he.prototype, {
        models: {
            get: function() {
                return this.Ot.iterator;
            }
        },
        isEnabled: {
            get: function() {
                return this.Jd;
            },
            set: function(a1) {
                this.Jd = a1;
            }
        },
        transactionToUndo: {
            get: function() {
                return 0 <= this.historyIndex && this.historyIndex <= this.history.count - 1 ? this.history.M(this.historyIndex) : null;
            }
        },
        transactionToRedo: {
            get: function() {
                return this.historyIndex < this.history.count - 1 ? this.history.M(this.historyIndex + 1) : null;
            }
        },
        isUndoingRedoing: {
            get: function() {
                return this.Fe;
            }
        },
        history: {
            get: function() {
                return this.u;
            }
        },
        maxHistoryLength: {
            get: function() {
                return this.o;
            },
            set: function(a1) {
                this.o = a1;
            }
        },
        historyIndex: {
            get: function() {
                return this.Ce;
            }
        },
        currentTransaction: {
            get: function() {
                return this.Mp;
            }
        },
        transactionLevel: {
            get: function() {
                return this.bi;
            }
        },
        isInTransaction: {
            get: function() {
                return 0 < this.bi;
            }
        },
        checksTransactionLevel: {
            get: function() {
                return this.j;
            },
            set: function(a1) {
                this.j = a1;
            }
        },
        nestedTransactionNames: {
            get: function() {
                return this.Ie;
            }
        },
        isPendingClear: {
            get: function() {
                return this.Et;
            },
            set: function(a1) {
                this.Et = a1;
            }
        },
        isPendingUnmodified: {
            get: function() {
                return this.Ft;
            },
            set: function(a1) {
                this.Ft = a1;
            }
        },
        isInternalTransaction: {
            get: function() {
                return this.Ct;
            },
            set: function(a1) {
                this.Ct = a1;
            }
        },
        isJustDiscarded: {
            get: function() {
                return this.qq;
            }
        }
    });
    he.prototype.handleChanged = he.prototype.Tu;
    he.prototype.redo = he.prototype.redo;
    he.prototype.undo = he.prototype.undo;
    he.prototype.canUndo = he.prototype.canUndo;
    he.prototype.discardHistoryAfterIndex = he.prototype.lx;
    he.prototype.rollbackTransaction = he.prototype.Kf;
    he.prototype.commitTransaction = he.prototype.eb;
    he.prototype.startTransaction = he.prototype.Ea;
    he.prototype.removeModel = he.prototype.Rx;
    he.prototype.addModel = he.prototype.Xw;
    he.prototype.clear = he.prototype.clear;
    he.className = "UndoManager";
    function je() {
        Qa(this);
        this.H = ke;
        this.xa = "";
        this.Jd = !0;
        this.nb = !1;
        this.vm = null;
        this.yy = new Zd;
        this.Yr = -1;
    }
    je.prototype.toString = function() {
        return "" !== this.name ? this.name + " Tool" : Ha(this.constructor);
    };
    je.prototype.updateAdornments = function() {};
    je.prototype.canStart = function() {
        return this.isEnabled;
    };
    je.prototype.doStart = function() {};
    je.prototype.doActivate = function() {
        this.isActive = !0;
    };
    je.prototype.doDeactivate = function() {
        this.isActive = !1;
    };
    je.prototype.doStop = function() {};
    je.prototype.doCancel = function() {
        this.transactionResult = null;
        this.stopTool();
    };
    je.prototype.stopTool = function() {
        var a1 = this.diagram;
        a1.currentTool === this && (a1.currentTool = null, a1.currentCursor = "");
    };
    je.prototype.doMouseDown = function() {
        !this.isActive && this.canStart() && this.doActivate();
    };
    je.prototype.doMouseMove = function() {};
    je.prototype.doMouseUp = function() {
        this.stopTool();
    };
    je.prototype.doMouseWheel = function() {};
    je.prototype.canStartMultiTouch = function() {
        return !0;
    };
    je.prototype.standardPinchZoomStart = function() {
        var a1 = this.diagram, b = a1.lastInput, c = b.Ro(0, J.allocAt(NaN, NaN)), d = b.Ro(1, J.allocAt(NaN, NaN));
        if (c.w() && d.w() && (this.doCancel(), a1.Pl("hasGestureZoom"))) {
            a1.Bw = a1.scale;
            var e = d.x - c.x, f = d.y - c.y;
            a1.Jw = Math.sqrt(e * e + f * f);
            b.bubbles = !1;
        }
        J.free(c);
        J.free(d);
    };
    je.prototype.standardPinchZoomMove = function() {
        var a1 = this.diagram, b = a1.lastInput, c = b.Ro(0, J.allocAt(NaN, NaN)), d = b.Ro(1, J.allocAt(NaN, NaN));
        if (c.w() && d.w() && (this.doCancel(), a1.Pl("hasGestureZoom"))) {
            var e = d.x - c.x, f = d.y - c.y;
            f = Math.sqrt(e * e + f * f) / a1.Jw;
            e = new J((Math.min(d.x, c.x) + Math.max(d.x, c.x)) / 2, (Math.min(d.y, c.y) + Math.max(d.y, c.y)) / 2);
            f *= a1.Bw;
            var g = a1.commandHandler;
            if (f !== a1.scale && g.canResetZoom(f)) {
                var h = a1.zoomPoint;
                a1.zoomPoint = e;
                g.resetZoom(f);
                a1.zoomPoint = h;
            }
            b.bubbles = !1;
        }
        J.free(c);
        J.free(d);
    };
    je.prototype.doKeyDown = function() {
        "Esc" === this.diagram.lastInput.key && this.doCancel();
    };
    je.prototype.doKeyUp = function() {};
    je.prototype.Ea = function(a1) {
        void 0 === a1 && (a1 = this.name);
        this.transactionResult = null;
        return this.diagram.Ea(a1);
    };
    je.prototype.stopTransaction = function() {
        var a1 = this.diagram;
        return null === this.transactionResult ? a1.Kf() : a1.eb(this.transactionResult);
    };
    je.prototype.standardMouseSelect = function() {
        var a1 = this.diagram;
        if (a1.allowSelect) {
            var b = a1.lastInput, c = a1.Nl(b.documentPoint, !1);
            if (null !== c) {
                if (Oa ? b.meta : b.control) {
                    a1.R("ChangingSelection", a1.selection);
                    for(b = c; null !== b && !b.canSelect();)b = b.containingGroup;
                    null !== b && (b.isSelected = !b.isSelected);
                    a1.R("ChangedSelection", a1.selection);
                } else if (b.shift) {
                    if (!c.isSelected) {
                        a1.R("ChangingSelection", a1.selection);
                        for(b = c; null !== b && !b.canSelect();)b = b.containingGroup;
                        null !== b && (b.isSelected = !0);
                        a1.R("ChangedSelection", a1.selection);
                    }
                } else if (!c.isSelected) {
                    for(b = c; null !== b && !b.canSelect();)b = b.containingGroup;
                    null !== b && a1.select(b);
                }
            } else !b.left || (Oa ? b.meta : b.control) || b.shift || a1.clearSelection();
        }
    };
    je.prototype.standardMouseClick = function(a1, b) {
        void 0 === a1 && (a1 = null);
        void 0 === b && (b = function(a1) {
            return !a1.layer.isTemporary;
        });
        var c = this.diagram, d = c.lastInput;
        a1 = c.jc(d.documentPoint, a1, b);
        d.targetObject = a1;
        le(a1, d, c);
        return d.handled;
    };
    function le(a1, b, c) {
        b.handled = !1;
        if (null === a1 || a1.If()) {
            var d = 0;
            b.left ? d = 1 === b.clickCount ? 1 : 2 === b.clickCount ? 2 : 1 : b.right && 1 === b.clickCount && (d = 3);
            var e = "ObjectSingleClicked";
            if (null !== a1) {
                switch(d){
                    case 1:
                        e = "ObjectSingleClicked";
                        break;
                    case 2:
                        e = "ObjectDoubleClicked";
                        break;
                    case 3:
                        e = "ObjectContextClicked";
                }
                0 !== d && c.R(e, a1);
            } else {
                switch(d){
                    case 1:
                        e = "BackgroundSingleClicked";
                        break;
                    case 2:
                        e = "BackgroundDoubleClicked";
                        break;
                    case 3:
                        e = "BackgroundContextClicked";
                }
                0 !== d && c.R(e);
            }
            if (null !== a1) for(; null !== a1;){
                c = null;
                switch(d){
                    case 1:
                        c = a1.click;
                        break;
                    case 2:
                        c = a1.doubleClick ? a1.doubleClick : a1.click;
                        break;
                    case 3:
                        c = a1.contextClick;
                }
                if (null !== c && (c(b, a1), b.handled)) break;
                a1 = a1.panel;
            }
            else {
                a1 = null;
                switch(d){
                    case 1:
                        a1 = c.click;
                        break;
                    case 2:
                        a1 = c.doubleClick ? c.doubleClick : c.click;
                        break;
                    case 3:
                        a1 = c.contextClick;
                }
                null !== a1 && a1(b);
            }
        }
    }
    je.prototype.standardMouseOver = function() {
        var a1 = this.diagram, b = a1.lastInput;
        if (!0 !== a1.animationManager.Ab) {
            var c = a1.skipsUndoManager;
            a1.skipsUndoManager = !0;
            var d = a1.viewportBounds.ca(b.documentPoint) ? a1.jc(b.documentPoint, null, null) : null;
            !b.event || "pointercancel" !== b.event.type && "pointerout" !== b.event.type || (d = null);
            b.targetObject = d;
            var e = !1;
            if (d !== a1.Bk) {
                var f = a1.Bk, g = f;
                a1.Bk = d;
                this.doCurrentObjectChanged(f, d);
                for(b.handled = !1; null !== f;){
                    var h = f.mouseLeave;
                    if (null !== h) {
                        if (d === f) break;
                        if (null !== d && d.rg(f)) break;
                        h(b, f, d);
                        e = !0;
                        if (b.handled) break;
                    }
                    f = f.panel;
                }
                f = g;
                for(b.handled = !1; null !== d;){
                    g = d.mouseEnter;
                    if (null !== g) {
                        if (f === d) break;
                        if (null !== f && f.rg(d)) break;
                        g(b, d, f);
                        e = !0;
                        if (b.handled) break;
                    }
                    d = d.panel;
                }
                d = a1.Bk;
            }
            if (null !== d) {
                f = d;
                for(g = ""; null !== f;){
                    g = f.cursor;
                    if ("" !== g) break;
                    f = f.panel;
                }
                a1.currentCursor = g;
                b.handled = !1;
                for(f = d; null !== f;){
                    d = f.mouseOver;
                    if (null !== d && (d(b, f), e = !0, b.handled)) break;
                    f = f.panel;
                }
            } else this.doUpdateCursor(null), d = a1.mouseOver, null !== d && (d(b), e = !0);
            e && a1.ac();
            a1.skipsUndoManager = c;
        }
    };
    je.prototype.doUpdateCursor = function() {
        var a1 = this.diagram;
        a1 && (a1.currentCursor = "");
    };
    je.prototype.doCurrentObjectChanged = function() {};
    je.prototype.standardMouseWheel = function() {
        var a1 = this.diagram, b = a1.lastInput, c = b.delta;
        if (0 !== c && a1.documentBounds.w()) {
            var d = a1.commandHandler, e = a1.toolManager.mouseWheelBehavior;
            if (null !== d && (e === me && !b.shift || e === se && b.control)) {
                if (0 < c ? d.canIncreaseZoom() : d.canDecreaseZoom()) e = a1.zoomPoint, a1.zoomPoint = b.viewPoint, 0 < c ? d.increaseZoom() : d.decreaseZoom(), a1.zoomPoint = e;
                b.bubbles = !1;
            } else if (e === me && b.shift || e === se && !b.control) {
                d = a1.position.copy();
                var f = b.event;
                e = f.deltaMode;
                var g = f.deltaX;
                f = f.deltaY;
                var h = "pixel";
                if (0 === g && 0 === f || b.shift) !b.shift && a1.allowVerticalScroll ? (c = 3 * c * a1.scrollVerticalLineChange, a1.scroll(h, 0 < c ? "up" : "down", Math.abs(c))) : b.shift && a1.allowHorizontalScroll && (c = 3 * c * a1.scrollHorizontalLineChange, a1.scroll(h, 0 < c ? "left" : "right", Math.abs(c)));
                else {
                    switch(e){
                        case 0:
                            h = "pixel";
                            break;
                        case 1:
                            h = "line";
                            break;
                        case 2:
                            h = "page";
                    }
                    0 !== g && a1.allowHorizontalScroll && (g *= a1.scrollHorizontalLineChange / 16, a1.scroll(h, 0 < g ? "right" : "left", Math.abs(g)));
                    0 !== f && a1.allowVerticalScroll && (f *= a1.scrollVerticalLineChange / 16, a1.scroll(h, 0 < f ? "down" : "up", Math.abs(f)));
                }
                this.doWheelChange(a1, d, b);
            }
        }
    };
    je.prototype.doWheelChange = function(a1, b, c) {
        a1.position.D(b) && 0 === c.event.wheelDeltaX || (c.bubbles = !1);
    };
    je.prototype.standardWaitAfter = function(a1, b) {
        void 0 === b && (b = this.diagram.lastInput);
        this.cancelWaitAfter();
        var c = this, d = b.clone(this.yy);
        this.Yr = ta(function() {
            c.doWaitAfter(d);
        }, a1);
    };
    je.prototype.cancelWaitAfter = function() {
        -1 !== this.Yr && x.clearTimeout(this.Yr);
        this.Yr = -1;
    };
    je.prototype.doWaitAfter = function() {};
    je.prototype.findToolHandleAt = function(a1, b) {
        a1 = this.diagram.jc(a1, function(a1) {
            for(; null !== a1 && !(a1.panel instanceof te);)a1 = a1.panel;
            return a1;
        });
        return null === a1 ? null : a1.part.category === b ? a1 : null;
    };
    je.prototype.isBeyondDragSize = function(a1, b) {
        var c = this.diagram;
        void 0 === a1 && (a1 = c.firstInput.viewPoint);
        void 0 === b && (b = c.lastInput.viewPoint);
        var d = c.toolManager.dragSize, e = d.width;
        d = d.height;
        c.firstInput.isTouchEvent && (e += 6, d += 6);
        return Math.abs(b.x - a1.x) > e || Math.abs(b.y - a1.y) > d;
    };
    ma.Object.defineProperties(je.prototype, {
        diagram: {
            get: function() {
                return this.H;
            },
            set: function(a1) {
                a1 instanceof Q && (this.H = a1);
            }
        },
        name: {
            get: function() {
                return this.xa;
            },
            set: function(a1) {
                this.xa = a1;
            }
        },
        isEnabled: {
            get: function() {
                return this.Jd;
            },
            set: function(a1) {
                this.Jd = a1;
            }
        },
        isActive: {
            get: function() {
                return this.nb;
            },
            set: function(a1) {
                this.nb = a1;
            }
        },
        transactionResult: {
            get: function() {
                return this.vm;
            },
            set: function(a1) {
                this.vm = a1;
            }
        }
    });
    je.prototype.startTransaction = je.prototype.Ea;
    je.className = "Tool";
    function La() {
        je.call(this);
        this.name = "ToolManager";
        this.hb = new F;
        this.ob = new F;
        this.Ib = new F;
        this.F = this.V = 850;
        this.o = new L(2, 2).ja();
        this.Ha = 5E3;
        this.ia = se;
        this.u = ue;
        this.Lp = this.j = null;
        this.zj = -1;
    }
    la(La, je);
    La.prototype.initializeStandardTools = function() {};
    La.prototype.updateAdornments = function(a1) {
        var b = this.currentToolTip;
        if (b instanceof te && this.Lp === a1) {
            var c = b.adornedObject;
            (null !== a1 ? c.part === a1 : null === c) ? this.showToolTip(b, c) : this.hideToolTip();
        }
    };
    La.prototype.doMouseDown = function() {
        var a1 = this.diagram, b = a1.lastInput;
        b.isTouchEvent && this.gestureBehavior === ve && (b.bubbles = !1);
        if (b.isMultiTouch) {
            this.cancelWaitAfter();
            if (this.gestureBehavior === we) {
                b.bubbles = !0;
                return;
            }
            if (this.gestureBehavior === ve) return;
            if (a1.currentTool.canStartMultiTouch()) {
                a1.currentTool.standardPinchZoomStart();
                return;
            }
        }
        for(var c = this.mouseDownTools.length, d = 0; d < c; d++){
            var e = this.mouseDownTools.M(d);
            e.diagram = this.diagram;
            if (e.canStart()) {
                a1.doFocus();
                a1.currentTool = e;
                a1.currentTool === e && (e.isActive || e.doActivate(), e.doMouseDown());
                return;
            }
        }
        1 === a1.lastInput.button && (this.mouseWheelBehavior === se ? this.mouseWheelBehavior = me : this.mouseWheelBehavior === me && (this.mouseWheelBehavior = se));
        this.doActivate();
        this.standardWaitAfter(this.holdDelay, b);
    };
    La.prototype.doMouseMove = function() {
        var a1 = this.diagram, b = a1.lastInput;
        if (b.isMultiTouch) {
            if (this.gestureBehavior === we) {
                b.bubbles = !0;
                return;
            }
            if (this.gestureBehavior === ve) return;
            if (a1.currentTool.canStartMultiTouch()) {
                a1.currentTool.standardPinchZoomMove();
                return;
            }
        }
        if (this.isActive) for(var c = this.mouseMoveTools.length, d = 0; d < c; d++){
            var e = this.mouseMoveTools.M(d);
            e.diagram = this.diagram;
            if (e.canStart()) {
                a1.doFocus();
                a1.currentTool = e;
                a1.currentTool === e && (e.isActive || e.doActivate(), e.doMouseMove());
                return;
            }
        }
        xe(this, a1);
        a1 = b.event;
        null === a1 || "pointermove" !== a1.type && a1.cancelable || (b.bubbles = !0);
    };
    function xe(a1, b) {
        a1.standardMouseOver();
        a1.isBeyondDragSize() && a1.standardWaitAfter(a1.isActive ? a1.holdDelay : a1.hoverDelay, b.lastInput);
    }
    La.prototype.doCurrentObjectChanged = function(a1, b) {
        a1 = this.currentToolTip;
        null === a1 || null !== b && a1 instanceof te && (b === a1 || b.rg(a1)) || this.hideToolTip();
    };
    La.prototype.doWaitAfter = function(a1) {
        var b = this.diagram;
        null !== b.ta && (this.doMouseHover(), this.isActive || this.doToolTip(), a1.isTouchEvent && !b.lastInput.handled && (a1 = a1.copy(), a1.button = 2, a1.buttons = 2, b.lastInput = a1, b.pu = !0, b.doMouseUp()));
    };
    La.prototype.doMouseHover = function() {
        var a1 = this.diagram, b = a1.lastInput;
        null === b.targetObject && (b.targetObject = a1.jc(b.documentPoint, null, null));
        var c = b.targetObject;
        if (null !== c) for(b.handled = !1; null !== c;){
            a1 = this.isActive ? c.mouseHold : c.mouseHover;
            if (null !== a1 && (a1(b, c), b.handled)) break;
            c = c.panel;
        }
        else c = this.isActive ? a1.mouseHold : a1.mouseHover, null !== c && c(b);
    };
    La.prototype.doToolTip = function() {
        var a1 = this.diagram, b = a1.lastInput;
        null === b.targetObject && (b.targetObject = a1.jc(b.documentPoint, null, null));
        b = b.targetObject;
        if (null !== b) {
            if (a1 = this.currentToolTip, !(a1 instanceof te) || b !== a1 && !b.rg(a1)) {
                for(; null !== b;){
                    a1 = b.toolTip;
                    if (null !== a1) {
                        this.showToolTip(a1, b);
                        return;
                    }
                    b = b.panel;
                }
                this.hideToolTip();
            }
        } else b = a1.toolTip, null !== b ? this.showToolTip(b, null) : this.hideToolTip();
    };
    La.prototype.showToolTip = function(a1, b) {
        var c = this.diagram;
        a1 !== this.currentToolTip && this.hideToolTip();
        if (a1 instanceof te) {
            a1.layerName = "Tool";
            a1.selectable = !1;
            a1.scale = 1 / c.scale;
            a1.category = "ToolTip";
            null !== a1.placeholder && (a1.placeholder.scale = c.scale);
            var d = a1.diagram;
            null !== d && d !== c && d.remove(a1);
            c.add(a1);
            null !== b ? a1.adornedObject = b : a1.data = c.model;
            a1.Va();
            this.positionToolTip(a1, b);
        } else a1 instanceof ye && a1 !== this.currentToolTip && a1.show(b, c, this);
        this.currentToolTip = a1;
        -1 !== this.zj && (x.clearTimeout(this.zj), this.zj = -1);
        a1 = this.toolTipDuration;
        if (0 < a1 && Infinity !== a1) {
            var e = this;
            this.zj = ta(function() {
                e.hideToolTip();
            }, a1);
        }
    };
    La.prototype.positionToolTip = function(a1) {
        if (null === a1.placeholder) {
            var b = this.diagram, c = b.lastInput.documentPoint.copy(), d = a1.measuredBounds, e = b.viewportBounds;
            b.lastInput.isTouchEvent && (c.x -= d.width);
            c.x + d.width > e.right && (c.x -= d.width + 5 / b.scale);
            c.x < e.x && (c.x = e.x);
            c.y = c.y + 20 / b.scale + d.height > e.bottom ? c.y - (d.height + 5 / b.scale) : c.y + 20 / b.scale;
            c.y < e.y && (c.y = e.y);
            a1.position = c;
        }
    };
    La.prototype.hideToolTip = function() {
        -1 !== this.zj && (x.clearTimeout(this.zj), this.zj = -1);
        var a1 = this.diagram, b = this.currentToolTip;
        null !== b && (b instanceof te ? (a1.remove(b), null !== this.Lp && this.Lp.Jf(b.category), b.data = null, b.adornedObject = null) : b instanceof ye && null !== b.hide && b.hide(a1, this), this.currentToolTip = null);
    };
    La.prototype.doMouseUp = function() {
        this.cancelWaitAfter();
        var a1 = this.diagram;
        if (this.isActive) for(var b = this.mouseUpTools.length, c = 0; c < b; c++){
            var d = this.mouseUpTools.M(c);
            d.diagram = this.diagram;
            if (d.canStart()) {
                a1.doFocus();
                a1.currentTool = d;
                a1.currentTool === d && (d.isActive || d.doActivate(), d.doMouseUp());
                return;
            }
        }
        a1.doFocus();
        this.doDeactivate();
    };
    La.prototype.doMouseWheel = function() {
        this.standardMouseWheel();
    };
    La.prototype.doKeyDown = function() {
        var a1 = this.diagram;
        null !== a1.commandHandler && a1.commandHandler.doKeyDown();
    };
    La.prototype.doKeyUp = function() {
        var a1 = this.diagram;
        null !== a1.commandHandler && a1.commandHandler.doKeyUp();
    };
    La.prototype.findTool = function(a1) {
        for(var b = this.mouseDownTools.length, c = 0; c < b; c++){
            var d = this.mouseDownTools.M(c);
            if (d.name === a1) return d;
        }
        b = this.mouseMoveTools.length;
        for(c = 0; c < b; c++)if (d = this.mouseMoveTools.M(c), d.name === a1) return d;
        b = this.mouseUpTools.length;
        for(c = 0; c < b; c++)if (d = this.mouseUpTools.M(c), d.name === a1) return d;
        return null;
    };
    La.prototype.replaceTool = function(a1, b) {
        null !== b && (b.diagram = this.diagram);
        for(var c = this.mouseDownTools.length, d = 0; d < c; d++){
            var e = this.mouseDownTools.M(d);
            if (e.name === a1) return null !== b ? this.mouseDownTools.cd(d, b) : this.mouseDownTools.mb(d), e;
        }
        c = this.mouseMoveTools.length;
        for(d = 0; d < c; d++)if (e = this.mouseMoveTools.M(d), e.name === a1) return null !== b ? this.mouseMoveTools.cd(d, b) : this.mouseMoveTools.mb(d), e;
        c = this.mouseUpTools.length;
        for(d = 0; d < c; d++)if (e = this.mouseUpTools.M(d), e.name === a1) return null !== b ? this.mouseUpTools.cd(d, b) : this.mouseUpTools.mb(d), e;
        return null;
    };
    La.prototype.gb = function(a1, b, c) {
        null !== b && (b.name = a1, b.diagram = this.diagram);
        this.findTool(a1) ? this.replaceTool(a1, b) : null !== b && c.add(b);
    };
    ma.Object.defineProperties(La.prototype, {
        mouseWheelBehavior: {
            get: function() {
                return this.ia;
            },
            set: function(a1) {
                this.ia = a1;
            }
        },
        gestureBehavior: {
            get: function() {
                return this.u;
            },
            set: function(a1) {
                this.u = a1;
            }
        },
        currentToolTip: {
            get: function() {
                return this.j;
            },
            set: function(a1) {
                this.j = a1;
                this.Lp = null !== a1 && a1 instanceof te ? a1.adornedPart : null;
            }
        },
        mouseDownTools: {
            get: function() {
                return this.hb;
            }
        },
        mouseMoveTools: {
            get: function() {
                return this.ob;
            }
        },
        mouseUpTools: {
            get: function() {
                return this.Ib;
            }
        },
        hoverDelay: {
            get: function() {
                return this.V;
            },
            set: function(a1) {
                this.V = a1;
            }
        },
        holdDelay: {
            get: function() {
                return this.F;
            },
            set: function(a1) {
                this.F = a1;
            }
        },
        dragSize: {
            get: function() {
                return this.o;
            },
            set: function(a1) {
                this.o = a1.J();
            }
        },
        toolTipDuration: {
            get: function() {
                return this.Ha;
            },
            set: function(a1) {
                this.Ha = a1;
            }
        }
    });
    La.prototype.replaceStandardTool = La.prototype.gb;
    var se = new E(La, "WheelScroll", 0), me = new E(La, "WheelZoom", 1), ze = new E(La, "WheelNone", 2), ue = new E(La, "GestureZoom", 3), ve = new E(La, "GestureCancel", 4), we = new E(La, "GestureNone", 5);
    La.className = "ToolManager";
    La.WheelScroll = se;
    La.WheelZoom = me;
    La.WheelNone = ze;
    La.GestureZoom = ue;
    La.GestureCancel = ve;
    La.GestureNone = we;
    function Ae() {
        je.call(this);
        this.name = "Dragging";
        this.u = this.Sw = this.ob = !0;
        this.o = this.Ha = this.V = this.Oe = null;
        this.Xm = this.Ib = !1;
        this.sl = new J(NaN, NaN);
        this.Er = new J;
        this.hb = !0;
        this.Hk = 100;
        this.Cg = [];
        this.te = (new H).freeze();
        this.ia = new Be;
        this.An = null;
        this.F = "copy";
        this.Oc = "";
        this.Pc = "no-drop";
    }
    var Ce;
    la(Ae, je);
    Ae.prototype.canStart = function() {
        if (!this.isEnabled) return !1;
        var a1 = this.diagram;
        if (a1.isReadOnly && !a1.allowDragOut || !a1.allowMove && !a1.allowCopy && !a1.allowDragOut || !a1.allowSelect) return !1;
        var b = a1.lastInput;
        return !b.left || a1.currentTool !== this && (!this.isBeyondDragSize() || b.isTouchEvent && b.timestamp - a1.firstInput.timestamp < this.Hk) ? !1 : null !== this.findDraggablePart();
    };
    Ae.prototype.findDraggablePart = function() {
        var a1 = this.diagram;
        a1 = a1.Nl(a1.firstInput.documentPoint, !1);
        if (null === a1) return null;
        for(; null !== a1 && !a1.canSelect();)a1 = a1.containingGroup;
        return null !== a1 && (a1.canMove() || a1.canCopy()) ? a1 : null;
    };
    Ae.prototype.standardMouseSelect = function() {
        var a1 = this.diagram;
        if (a1.allowSelect) {
            var b = a1.Nl(a1.firstInput.documentPoint, !1);
            if (null !== b) {
                for(; null !== b && !b.canSelect();)b = b.containingGroup;
                this.currentPart = b;
                null === this.currentPart || this.currentPart.isSelected || (a1.R("ChangingSelection", a1.selection), b = a1.lastInput, (Oa ? b.meta : b.control) || b.shift || a1.clearSelection(!0), this.currentPart.isSelected = !0, a1.R("ChangedSelection", a1.selection));
            }
        }
    };
    Ae.prototype.doActivate = function() {
        var a1 = this.diagram;
        this.An = null;
        null === this.currentPart && this.standardMouseSelect();
        var b = this.currentPart;
        null !== b && (b.canMove() || b.canCopy()) && (a1.Fu(!0), De = null, this.isActive = !0, this.sl.set(a1.position), Ee(this, a1.selection), this.Cg.length = 0, a1.animationManager.Cc(), this.draggedParts = this.computeEffectiveCollection(a1.selection, this.dragOptions), this.Sw = this.diagram.layout.isRealtime, this.diagram.layout.isRealtime = !1, a1.Ms = !0, !0 === a1.Gf("temporaryPixelRatio") && 30 < a1.$w && Fe(a1), Ge(a1, this.draggedParts), this.Ea("Drag"), this.startPoint = a1.firstInput.documentPoint, a1.isMouseCaptured = !0, a1.allowDragOut && (this.isDragOutStarted = !0, this.Xm = !1, De = this, He = this.diagram, this.doSimulatedDragOut()));
    };
    function Ee(a1, b) {
        if (a1.dragsLink) {
            var c = a1.diagram;
            c.allowRelink && (c.model.Vj() && 1 === b.count && b.first() instanceof T ? (a1.draggedLink = b.first(), a1.draggedLink.canRelinkFrom() && a1.draggedLink.canRelinkTo() && a1.draggedLink.Dj(), a1.Oe = c.toolManager.findTool("Relinking"), null === a1.Oe && (a1.Oe = new Ie, a1.Oe.diagram = c), a1.Oe.originalLink = a1.draggedLink) : (a1.draggedLink = null, a1.Oe = null));
        }
    }
    Ae.prototype.computeEffectiveCollection = function(a1, b) {
        return this.diagram.commandHandler.computeEffectiveCollection(a1, b);
    };
    Ae.prototype.Pd = function(a1) {
        return void 0 === a1 ? new Je(pb) : this.isGridSnapEnabled ? new Je(new J(Math.round(1E3 * a1.x) / 1E3, Math.round(1E3 * a1.y) / 1E3)) : new Je(a1.copy());
    };
    Ae.prototype.doDeactivate = function() {
        this.isActive = !1;
        var a1 = this.diagram;
        this.diagram.layout.isRealtime = this.Sw;
        a1.Fu(!1);
        a1.ug();
        Te(this);
        Ue(a1, this.draggedParts);
        this.draggedParts = this.currentPart = this.An = null;
        this.Xm = this.isDragOutStarted = !1;
        if (0 < Ce.count) {
            for(var b = Ce, c = b.length, d = 0; d < c; d++){
                var e = b.M(d);
                Ve(e);
                We(e);
                Te(e);
                e.diagram.ug();
            }
            b.clear();
        }
        Ve(this);
        this.sl.h(NaN, NaN);
        null !== He && (He.currentCursor = "");
        De = He = null;
        We(this);
        a1.isMouseCaptured = !1;
        a1.currentCursor = "";
        a1.Ms = !1;
        this.stopTransaction();
        Xe(a1, !0);
    };
    Ae.prototype.stopTransaction = function() {
        var a1 = this.diagram, b = je.prototype.stopTransaction.call(this);
        b && null !== a1.undoManager.transactionToUndo && a1.undoManager.transactionToUndo.$j();
        return b;
    };
    function Te(a1) {
        var b = a1.diagram, c = b.skipsUndoManager;
        b.skipsUndoManager = !0;
        Ye(a1, b.lastInput, null);
        b.skipsUndoManager = c;
        a1.Cg.length = 0;
    }
    function Ze() {
        var a1 = De;
        We(a1);
        $e(a1);
        var b = a1.diagram;
        a1.sl.w() && (b.position = a1.sl);
        b.ug();
    }
    Ae.prototype.doCancel = function() {
        We(this);
        $e(this);
        var a1 = this.diagram;
        this.sl.w() && (a1.position = this.sl);
        this.stopTool();
    };
    Ae.prototype.doKeyDown = function() {
        var a1 = this.diagram, b = a1.lastInput;
        this.isActive && ("Esc" === b.key ? this.doCancel() : b.key !== a1.previousInput.key && this.doMouseMove());
    };
    Ae.prototype.doKeyUp = function() {
        this.isActive && this.doMouseMove();
    };
    function af(a1, b) {
        if (null === a1.copiedParts) {
            var c = a1.diagram;
            if ((!b || !c.isReadOnly && !c.isModelReadOnly) && null !== a1.draggedParts) {
                var d = c.undoManager;
                d.isEnabled && d.isInTransaction ? null !== d.currentTransaction && 0 < d.currentTransaction.changes.count && (c.undoManager.Kf(), c.Ea("Drag")) : $e(a1);
                c.skipsUndoManager = !b;
                c.partManager.addsToTemporaryLayer = !b;
                a1.startPoint = c.firstInput.documentPoint;
                b = a1.copiesEffectiveCollection ? a1.draggedParts.Lf() : c.selection;
                b = c.Jj(b, c, !0);
                c = new ob;
                for(d = a1.draggedParts.iterator; d.next();){
                    var e = d.key;
                    if (e.Zc() && e.canCopy()) {
                        var f = b.I(e);
                        null !== f && (f.location = e.location, f.Va(), c.add(f, a1.Pd(f.location)));
                    }
                }
                for(b = b.iterator; b.next();)d = b.value, d instanceof T && d.canCopy() && c.add(d, a1.Pd());
                a1.copiedParts = c;
                Ee(a1, c.Lf());
                null !== a1.draggedLink && (c = a1.draggedLink, b = c.routeBounds, bf(c, a1.startPoint.x - (b.x + b.width / 2), a1.startPoint.y - (b.y + b.height / 2)));
                a1.doUpdateCursor(null);
            }
        }
    }
    function We(a1) {
        var b = a1.diagram;
        if (null !== a1.copiedParts) {
            b.Hs(a1.copiedParts.Lf(), !1);
            a1.copiedParts = null;
            if (null !== a1.draggedParts) for(var c = a1.draggedParts.iterator; c.next();)c.key instanceof T && (c.value.point = new J(0, 0));
            a1.doUpdateCursor(null);
        }
        b.skipsUndoManager = !1;
        b.partManager.addsToTemporaryLayer = !1;
        a1.startPoint = b.firstInput.documentPoint;
    }
    function Ve(a1) {
        if (null !== a1.draggedLink) {
            if (a1.dragsLink && null !== a1.Oe) {
                var b = a1.Oe;
                b.diagram.remove(b.temporaryFromNode);
                b.diagram.remove(b.temporaryToNode);
                a1.Oe.originalLink = null;
            }
            a1.draggedLink = null;
            a1.Oe = null;
        }
    }
    function cf(a1, b, c) {
        var d = a1.diagram, e = a1.startPoint, f = J.alloc();
        f.assign(d.lastInput.documentPoint);
        a1.moveParts(b, f.re(e), c);
        J.free(f);
        !0 === d.Gf("temporaryPixelRatio") && null === d.Yh && 30 < d.$w && (Fe(d), d.gk());
    }
    Ae.prototype.moveParts = function(a1, b, c) {
        void 0 === c && (c = !1);
        var d = this.diagram;
        null !== d && df(d, a1, b, this.dragOptions, c);
    };
    function $e(a1) {
        if (null !== a1.draggedParts) {
            for(var b = a1.diagram, c = a1.draggedParts.iterator; c.next();){
                var d = c.key;
                d.Zc() && (d.location = c.value.point);
            }
            for(c = a1.draggedParts.iterator; c.next();)if (d = c.key, d instanceof T && d.suspendsRouting) {
                var e = c.value.point;
                a1.draggedParts.add(d, a1.Pd());
                bf(d, -e.x, -e.y);
            }
            b.bd();
        }
    }
    function nf(a1, b) {
        var c = a1.diagram;
        a1.dragsLink && (null !== a1.draggedLink && (a1.draggedLink.fromNode = null, a1.draggedLink.toNode = null), of(a1, !1));
        var d = a1.findDragOverObject(b), e = c.lastInput;
        e.targetObject = d;
        a1.doUpdateCursor(d);
        var f = c.skipsUndoManager, g = !1;
        try {
            c.skipsUndoManager = !0;
            g = Ye(a1, e, d);
            if (!a1.isActive && null === De) return;
            var h = null !== d ? d.part : null;
            if (null === h || c.handlesDragDropForTopLevelParts && h.isTopLevel && !(h instanceof pf)) {
                var k = c.mouseDragOver;
                null !== k && (k(e), g = !0);
            }
            if (!a1.isActive && null === De) return;
            a1.doDragOver(b, d);
            if (!a1.isActive && null === De) return;
        } finally{
            c.skipsUndoManager = f, g && c.bd();
        }
        a1.An = d;
        c.isReadOnly || !c.allowMove && !c.allowCopy || !c.allowHorizontalScroll && !c.allowVerticalScroll || c.fs(e.viewPoint);
    }
    Ae.prototype.findDragOverObject = function(a1) {
        var b = this;
        return qf(this.diagram, a1, null, function(a1) {
            null === a1 ? a1 = !0 : (a1 = a1.part, a1 = null === a1 || a1 instanceof te || a1.layer.isTemporary || b.draggedParts && b.draggedParts.contains(a1) || b.copiedParts && b.copiedParts.contains(a1) ? !0 : !1);
            return !a1;
        });
    };
    Ae.prototype.doUpdateCursor = function(a1) {
        var b = this.diagram;
        if (null === a1 || this.An !== a1) !this.diagram.currentTool.isActive || this.mayCopy() ? b.currentCursor = this.copyCursor : this.mayMove() ? b.currentCursor = this.moveCursor : this.mayDragOut() && (b.currentCursor = this.nodropCursor);
    };
    function Ye(a1, b, c) {
        var d = !1, e = a1.Cg.length, f = 0 < e ? a1.Cg[0] : null;
        if (c === f) return !1;
        b.handled = !1;
        for(var g = 0; g < e; g++){
            var h = a1.Cg[g], k = h.mouseDragLeave;
            if (null !== k && (k(b, h, c), d = !0, b.handled)) break;
        }
        a1.Cg.length = 0;
        if (!a1.isActive && null === De || null === c) return d;
        b.handled = !1;
        for(e = c; null !== e;)a1.Cg.push(e), e = rf(e);
        e = a1.Cg.length;
        for(c = 0; c < e && (g = a1.Cg[c], h = g.mouseDragEnter, null === h || (h(b, g, f), d = !0, !b.handled)); c++);
        return d;
    }
    function rf(a1) {
        var b = a1.panel;
        return null !== b ? b : a1 instanceof U && !(a1 instanceof pf) && (a1 = a1.containingGroup, null !== a1 && a1.handlesDragDropForMembers) ? a1 : null;
    }
    function sf(a1, b, c) {
        var d = a1.Oe;
        if (null === d) return null;
        var e = a1.diagram.og(b, d.portGravity, function(a1) {
            return d.findValidLinkablePort(a1, c);
        });
        a1 = J.alloc();
        var f = Infinity, g = null;
        for(e = e.iterator; e.next();){
            var h = e.value;
            if (null !== h.part) {
                var k = h.ga(wc, a1);
                k = b.Bf(k);
                k < f && (g = h, f = k);
            }
        }
        J.free(a1);
        return g;
    }
    function of(a1, b) {
        var c = a1.draggedLink;
        if (null !== c && !(2 > c.pointsCount)) {
            var d = a1.diagram;
            if (!d.isReadOnly) {
                var e = a1.Oe;
                if (null !== e) {
                    var f = null, g = null;
                    null === c.fromNode && (f = sf(a1, c.i(0), !1), null !== f && (g = f.part));
                    var h = null, k = null;
                    null === c.toNode && (h = sf(a1, c.i(c.pointsCount - 1), !0), null !== h && (k = h.part));
                    e.isValidLink(g, f, k, h) ? b ? (c.defaultFromPoint = c.i(0), c.defaultToPoint = c.i(c.pointsCount - 1), c.suspendsRouting = !1, c.fromNode = g, null !== f && (c.fromPortId = f.portId), c.toNode = k, null !== h && (c.toPortId = h.portId), c.fromPort !== d.Mx && d.R("LinkRelinked", c, d.Mx), c.toPort !== d.Nx && d.R("LinkRelinked", c, d.Nx)) : tf(e, g, f, k, h) : tf(e, null, null, null, null);
                }
            }
        }
    }
    Ae.prototype.doDragOver = function() {};
    function uf(a1, b) {
        var c = a1.diagram;
        a1.dragsLink && of(a1, !0);
        Te(a1);
        var d = a1.findDragOverObject(b), e = c.lastInput;
        e.targetObject = d;
        if (null !== d) {
            e.handled = !1;
            for(var f = d; null !== f;){
                var g = f.mouseDrop;
                if (null !== g && (g(e, f), e.handled)) break;
                vf(a1, e, f);
                f = rf(f);
            }
        } else f = c.mouseDrop, null !== f && f(e);
        if (a1.isActive || null !== De) {
            for(e = (a1.copiedParts || a1.draggedParts).iterator; e.next();)f = e.key, f instanceof V && f.linksConnected.each(function(a1) {
                a1.suspendsRouting = !1;
            });
            a1.doDropOnto(b, d);
            if (a1.isActive || null !== De) {
                a1 = N.alloc();
                for(b = c.selection.iterator; b.next();)d = b.value, d instanceof V && wf(c, d, a1);
                N.free(a1);
            }
        }
    }
    function vf(a1, b, c) {
        a1 = a1.diagram;
        c = c.part;
        !a1.handlesDragDropForTopLevelParts || !c.isTopLevel || c instanceof pf || (c = a1.mouseDrop, null !== c && c(b));
    }
    function wf(a1, b, c) {
        var d = !1;
        c = b.getAvoidableRect(c);
        a1.viewportBounds.Re(c) && (d = !0);
        a1 = a1.Nu(c, function(a1) {
            return a1.part;
        }, function(a1) {
            return a1 instanceof T;
        }, !0, function(a1) {
            return a1 instanceof T;
        }, d);
        if (0 !== a1.count) for(a1 = a1.iterator; a1.next();)c = a1.value, !c.Td(b) && c.isAvoiding && c.bb();
    }
    Ae.prototype.doDropOnto = function() {};
    Ae.prototype.doMouseMove = function() {
        if (this.isActive) {
            var a1 = this.diagram, b = a1.lastInput;
            this.simulatedMouseMove(b.event, b.documentPoint, b.targetDiagram) || null === this.currentPart || null === this.draggedParts || (this.mayCopy() ? (af(this, !1), Ge(a1, this.copiedParts), cf(this, this.copiedParts, !1), Ue(a1, this.copiedParts)) : this.mayMove() ? (We(this), cf(this, this.draggedParts, !0)) : this.mayDragOut() ? (af(this, !1), cf(this, this.copiedParts, !1)) : We(this), nf(this, a1.lastInput.documentPoint));
        }
    };
    Ae.prototype.doMouseUp = function() {
        if (this.isActive) {
            var a1 = this.diagram, b = a1.lastInput;
            if (!this.simulatedMouseUp(b.event, b.documentPoint, b.targetDiagram)) {
                b = !1;
                var c = this.mayCopy();
                c && null !== this.copiedParts ? (We(this), af(this, !0), Ge(a1, this.copiedParts), cf(this, this.copiedParts, !1), Ue(a1, this.copiedParts), null !== this.copiedParts && (a1.R("ChangingSelection", a1.selection), a1.clearSelection(!0), this.copiedParts.iteratorKeys.each(function(a1) {
                    a1.isSelected = !0;
                }))) : (b = !0, We(this), this.mayMove() && (cf(this, this.draggedParts, !0), nf(this, a1.lastInput.documentPoint)));
                this.Xm = !0;
                uf(this, a1.lastInput.documentPoint);
                if (this.isActive) {
                    var d = c ? this.copiedParts.Lf() : this.draggedParts.Lf();
                    this.copiedParts = null;
                    b && xf(this);
                    a1.Ya();
                    Ue(a1, this.draggedParts);
                    this.transactionResult = c ? "Copy" : "Move";
                    a1.R(c ? "SelectionCopied" : "SelectionMoved", d);
                }
                this.stopTool();
                c && a1.R("ChangedSelection", a1.selection);
            }
        }
    };
    Ae.prototype.simulatedMouseMove = function(a1, b, c) {
        if (null === De) return !1;
        var d = De.diagram;
        c instanceof Q || (c = null);
        var e = He;
        c !== e && (null !== e && e !== d && (e.ug(), De.isDragOutStarted = !1, e = e.toolManager.findTool("Dragging"), null !== e && e.doSimulatedDragLeave()), He = c, null !== c && c !== d && (Ze(), e = c.toolManager.findTool("Dragging"), null !== e && (Ce.contains(e) || Ce.add(e), e.doSimulatedDragEnter())), this.doUpdateCursor(null));
        if (null === c || c === d || !c.allowDrop || c.isReadOnly || !c.allowInsert) return !1;
        d = c.toolManager.findTool("Dragging");
        null !== d && (null !== a1 && (void 0 !== a1.targetTouches && (0 < a1.targetTouches.length ? a1 = a1.targetTouches[0] : 0 < a1.changedTouches.length && (a1 = a1.changedTouches[0])), b = c.getMouse(a1)), c.lastInput.documentPoint = b, c.lastInput.viewPoint = c.np(b), c.lastInput.down = !1, c.lastInput.up = !1, d.doSimulatedDragOver());
        return !0;
    };
    Ae.prototype.simulatedMouseUp = function(a1, b, c) {
        if (null === De) return !1;
        var d = He, e = De.diagram;
        if (null === c) return De.doCancel(), !0;
        if (c !== d) {
            var f = d.toolManager.findTool("Dragging");
            if (null !== d && d !== e && null !== f) return d.ug(), De.isDragOutStarted = !1, f.doSimulatedDragLeave(), !1;
            He = c;
            d = c.toolManager.findTool("Dragging");
            null !== d && (Ze(), Ce.contains(d) || Ce.add(d), d.doSimulatedDragEnter());
        }
        return c !== this.diagram ? (null !== a1 ? (void 0 !== a1.targetTouches && (0 < a1.targetTouches.length ? a1 = a1.targetTouches[0] : 0 < a1.changedTouches.length && (a1 = a1.changedTouches[0])), b = c.getMouse(a1)) : null === b && (b = new J), c.lastInput.documentPoint = b, c.lastInput.viewPoint = c.np(b), c.lastInput.down = !1, c.lastInput.up = !0, a1 = c.toolManager.findTool("Dragging"), null !== a1 && a1.doSimulatedDrop(), a1 = De, null !== a1 && (c = a1.mayCopy(), a1.transactionResult = c ? "Copy" : "Move", a1.stopTool()), !0) : !1;
    };
    function xf(a1) {
        if (null !== a1.draggedParts) for(var b = a1.draggedParts.iterator; b.next();){
            var c = b.key;
            c instanceof V && (c = c.containingGroup, null === c || null === c.placeholder || a1.draggedParts.contains(c) || c.placeholder.v());
        }
    }
    Ae.prototype.mayCopy = function() {
        if (!this.isCopyEnabled) return !1;
        var a1 = this.diagram;
        if (a1.isReadOnly || a1.isModelReadOnly || !a1.allowInsert || !a1.allowCopy || (Oa ? !a1.lastInput.alt : !a1.lastInput.control)) return !1;
        for(a1 = a1.selection.iterator; a1.next();)if (a1.value.canCopy()) return !0;
        return null !== this.draggedLink && this.dragsLink && this.draggedLink.canCopy() ? !0 : !1;
    };
    Ae.prototype.mayDragOut = function() {
        if (!this.isCopyEnabled) return !1;
        var a1 = this.diagram;
        if (!a1.allowDragOut || !a1.allowCopy || a1.allowMove) return !1;
        for(a1 = a1.selection.iterator; a1.next();)if (a1.value.canCopy()) return !0;
        return null !== this.draggedLink && this.dragsLink && this.draggedLink.canCopy() ? !0 : !1;
    };
    Ae.prototype.mayMove = function() {
        var a1 = this.diagram;
        if (a1.isReadOnly || !a1.allowMove) return !1;
        for(a1 = a1.selection.iterator; a1.next();)if (a1.value.canMove()) return !0;
        return null !== this.draggedLink && this.dragsLink && this.draggedLink.canMove() ? !0 : !1;
    };
    Ae.prototype.computeBorder = function(a1, b, c) {
        return this.Xm || null === this.draggedParts || this.draggedParts.contains(a1) ? null : c.assign(b);
    };
    Ae.prototype.Az = function() {
        return De;
    };
    Ae.prototype.mayDragIn = function() {
        var a1 = this.diagram;
        if (!a1.allowDrop || a1.isReadOnly || a1.isModelReadOnly || !a1.allowInsert) return !1;
        var b = De;
        return null === b || b.diagram.model.dataFormat !== a1.model.dataFormat ? !1 : !0;
    };
    Ae.prototype.doSimulatedDragEnter = function() {
        if (this.mayDragIn()) {
            var a1 = this.diagram;
            a1.animationManager.Cc();
            yf(a1);
            a1.animationManager.Cc();
            a1 = De;
            null !== a1 && (a1.diagram.Ms = !1);
            this.doUpdateCursor(null);
        }
    };
    Ae.prototype.doSimulatedDragLeave = function() {
        var a1 = De;
        null !== a1 && a1.doSimulatedDragOut();
        this.doCancel();
    };
    Ae.prototype.doSimulatedDragOver = function() {
        var a1 = this.diagram;
        a1.animationManager.Cm = !0;
        var b = De;
        if (null !== b && null !== b.draggedParts) {
            if (!this.mayDragIn()) return;
            zf(this, b.draggedParts.Lf(), !1, a1.firstInput);
            cf(this, this.copiedParts, !1);
            nf(this, a1.lastInput.documentPoint);
        }
        a1.animationManager.Cm = !1;
    };
    Ae.prototype.doSimulatedDrop = function() {
        var a1 = this.diagram, b = De;
        if (null !== b) {
            var c = b.diagram;
            b.Xm = !0;
            We(this);
            if (!this.mayDragIn()) return;
            a1.animationManager.Cm = !0;
            a1.R("ChangingSelection", a1.selection);
            this.Ea("Drop");
            zf(this, b.draggedParts.Lf(), !0, a1.lastInput);
            cf(this, this.copiedParts, !1);
            var d = new H;
            null !== this.copiedParts && (a1.clearSelection(!0), this.copiedParts.iteratorKeys.each(function(a1) {
                a1.isSelected = !0;
                d.add(a1);
            }));
            uf(this, a1.lastInput.documentPoint);
            a1.Ya();
            null !== this.copiedParts && (this.transactionResult = "ExternalCopy");
            this.copiedParts = null;
            a1.doFocus();
            a1.R("ExternalObjectsDropped", d, c);
            this.stopTransaction();
            a1.R("ChangedSelection", a1.selection);
        }
        a1.animationManager.Cm = !1;
    };
    function zf(a1, b, c, d) {
        if (null === a1.copiedParts) {
            var e = a1.diagram;
            if (!e.isReadOnly && !e.isModelReadOnly) {
                e.skipsUndoManager = !c;
                e.partManager.addsToTemporaryLayer = !c;
                a1.startPoint = d.documentPoint;
                c = e.Jj(b, e, !0);
                var f = N.alloc();
                e = d = Infinity;
                for(var g = -Infinity, h = -Infinity, k = b.iterator; k.next();){
                    var l = k.value;
                    if (l.isVisible()) {
                        var m = l.location;
                        l = m.x;
                        m = m.y;
                        isNaN(l) || isNaN(m) || (l < d && (d = l), m < e && (e = m), l > g && (g = l), m > h && (h = m));
                    }
                }
                Infinity === d ? f.h(0, 0, 0, 0) : f.h(d, e, g - d, h - e);
                d = f.x + f.width / 2;
                e = f.y + f.height / 2;
                N.free(f);
                f = a1.Er;
                g = new ob;
                h = J.alloc();
                for(k = b.iterator; k.next();)l = k.value, l instanceof T && l.canCopy() && (m = c.I(l), null !== m && (m.points = l.points, bf(m, f.x - d, f.y - e), m.suspendsRouting = !0, g.add(m, a1.Pd())));
                for(b = b.iterator; b.next();)l = b.value, l.Zc() && l.canCopy() && (k = c.I(l), null !== k && (l = l.location, h.h(f.x - (d - l.x), f.y - (e - l.y)), k.location = h, k.Va(), g.add(k, a1.Pd(h))));
                J.free(h);
                a1.copiedParts = g;
                Ee(a1, g.Lf());
                null !== a1.draggedLink && (c = a1.draggedLink, b = c.routeBounds, bf(c, a1.startPoint.x - (b.x + b.width / 2), a1.startPoint.y - (b.y + b.height / 2)));
                a1.doUpdateCursor(null);
            }
        }
    }
    Ae.prototype.doSimulatedDragOut = function() {
        var a1 = this.diagram;
        a1.Ms = !1;
        this.mayCopy() || this.mayMove() ? a1.currentCursor = "" : a1.currentCursor = this.nodropCursor;
        this.An = null;
    };
    Ae.prototype.computeMove = function(a1, b, c, d) {
        c = this.diagram;
        return null !== c ? c.computeMove(a1, b, this.dragOptions, d) : new J;
    };
    ma.Object.defineProperties(Ae.prototype, {
        isCopyEnabled: {
            get: function() {
                return this.ob;
            },
            set: function(a1) {
                this.ob = a1;
            }
        },
        copiesEffectiveCollection: {
            get: function() {
                return this.u;
            },
            set: function(a1) {
                this.u = a1;
            }
        },
        dragOptions: {
            get: function() {
                return this.ia;
            },
            set: function(a1) {
                this.ia = a1;
            }
        },
        isGridSnapEnabled: {
            get: function() {
                return this.dragOptions.isGridSnapEnabled;
            },
            set: function(a1) {
                this.dragOptions.isGridSnapEnabled = a1;
            }
        },
        isComplexRoutingRealtime: {
            get: function() {
                return this.hb;
            },
            set: function(a1) {
                this.hb = a1;
            }
        },
        isGridSnapRealtime: {
            get: function() {
                return this.dragOptions.isGridSnapRealtime;
            },
            set: function(a1) {
                this.dragOptions.isGridSnapRealtime = a1;
            }
        },
        gridSnapCellSize: {
            get: function() {
                return this.dragOptions.gridSnapCellSize;
            },
            set: function(a1) {
                this.dragOptions.gridSnapCellSize.D(a1) || (a1 = a1.J(), this.dragOptions.gridSnapCellSize = a1);
            }
        },
        gridSnapCellSpot: {
            get: function() {
                return this.dragOptions.gridSnapCellSpot;
            },
            set: function(a1) {
                this.dragOptions.gridSnapCellSpot.D(a1) || (a1 = a1.J(), this.dragOptions.gridSnapCellSpot = a1);
            }
        },
        gridSnapOrigin: {
            get: function() {
                return this.dragOptions.gridSnapOrigin;
            },
            set: function(a1) {
                this.dragOptions.gridSnapOrigin.D(a1) || (a1 = a1.J(), this.dragOptions.gridSnapOrigin = a1);
            }
        },
        dragsLink: {
            get: function() {
                return this.dragOptions.dragsLink;
            },
            set: function(a1) {
                this.dragOptions.dragsLink = a1;
            }
        },
        dragsTree: {
            get: function() {
                return this.dragOptions.dragsTree;
            },
            set: function(a1) {
                this.dragOptions.dragsTree = a1;
            }
        },
        copyCursor: {
            get: function() {
                return this.F;
            },
            set: function(a1) {
                this.F = a1;
            }
        },
        moveCursor: {
            get: function() {
                return this.Oc;
            },
            set: function(a1) {
                this.Oc = a1;
            }
        },
        nodropCursor: {
            get: function() {
                return this.Pc;
            },
            set: function(a1) {
                this.Pc = a1;
            }
        },
        currentPart: {
            get: function() {
                return this.V;
            },
            set: function(a1) {
                this.V = a1;
            }
        },
        copiedParts: {
            get: function() {
                return this.o;
            },
            set: function(a1) {
                this.o = a1;
            }
        },
        draggedParts: {
            get: function() {
                return this.Ha;
            },
            set: function(a1) {
                this.Ha = a1;
            }
        },
        draggingParts: {
            get: function() {
                return null !== this.copiedParts ? this.copiedParts.Lf() : null !== this.draggedParts ? this.draggedParts.Lf() : this.te;
            }
        },
        draggedLink: {
            get: function() {
                return this.diagram.draggedLink;
            },
            set: function(a1) {
                this.diagram.draggedLink = a1;
            }
        },
        isDragOutStarted: {
            get: function() {
                return this.Ib;
            },
            set: function(a1) {
                this.Ib = a1;
            }
        },
        startPoint: {
            get: function() {
                return this.Er;
            },
            set: function(a1) {
                this.Er.D(a1) || this.Er.assign(a1);
            }
        },
        delay: {
            get: function() {
                return this.Hk;
            },
            set: function(a1) {
                this.Hk = a1;
            }
        }
    });
    Ae.prototype.getDraggingSource = Ae.prototype.Az;
    var De = null, He = null;
    Ae.className = "DraggingTool";
    Ce = new F;
    Ka("draggingTool", function() {
        return this.findTool("Dragging");
    }, function(a1) {
        this.gb("Dragging", a1, this.mouseMoveTools);
    });
    La.prototype.doCancel = function() {
        null !== De && De.doCancel();
        je.prototype.doCancel.call(this);
    };
    function Af() {
        je.call(this);
        this.te = 100;
        this.Ha = !1;
        this.u = "pointer";
        var a1 = new T, b = new Bf;
        b.isPanelMain = !0;
        b.stroke = "blue";
        a1.add(b);
        b = new Bf;
        b.toArrow = "Standard";
        b.fill = "blue";
        b.stroke = "blue";
        a1.add(b);
        a1.layerName = "Tool";
        this.Ci = a1;
        a1 = new V;
        b = new Bf;
        b.portId = "";
        b.figure = "Rectangle";
        b.fill = null;
        b.stroke = "magenta";
        b.strokeWidth = 2;
        b.desiredSize = Gb;
        a1.add(b);
        a1.selectable = !1;
        a1.layerName = "Tool";
        this.Bi = a1;
        this.j = b;
        a1 = new V;
        b = new Bf;
        b.portId = "";
        b.figure = "Rectangle";
        b.fill = null;
        b.stroke = "magenta";
        b.strokeWidth = 2;
        b.desiredSize = Gb;
        a1.add(b);
        a1.selectable = !1;
        a1.layerName = "Tool";
        this.Di = a1;
        this.o = b;
        this.Pc = this.Oc = this.ob = this.hb = this.Ib = null;
        this.ia = !0;
        this.hy = new ob;
        this.Of = this.gj = this.Pf = null;
    }
    la(Af, je);
    Af.prototype.doStop = function() {
        this.diagram.ug();
        this.originalToPort = this.originalToNode = this.originalFromPort = this.originalFromNode = this.originalLink = null;
        this.validPortsCache.clear();
        this.targetPort = null;
    };
    Af.prototype.copyPortProperties = function(a1, b, c, d, e) {
        if (null !== a1 && null !== b && null !== c && null !== d) {
            var f = b.Df(), g = L.alloc();
            g.width = b.naturalBounds.width * f;
            g.height = b.naturalBounds.height * f;
            d.desiredSize = g;
            L.free(g);
            e ? (d.toSpot = b.toSpot, d.toEndSegmentLength = b.toEndSegmentLength) : (d.fromSpot = b.fromSpot, d.fromEndSegmentLength = b.fromEndSegmentLength);
            c.locationSpot = wc;
            f = J.alloc();
            c.location = b.ga(wc, f);
            J.free(f);
            d.angle = b.li();
            null !== this.portTargeted && this.portTargeted(a1, b, c, d, e);
        }
    };
    Af.prototype.setNoTargetPortProperties = function(a1, b, c) {
        null !== b && (b.desiredSize = Gb, b.fromSpot = rc, b.toSpot = rc);
        null !== a1 && (a1.location = this.diagram.lastInput.documentPoint);
        null !== this.portTargeted && this.portTargeted(null, null, a1, b, c);
    };
    Af.prototype.doMouseDown = function() {
        this.isActive && this.doMouseMove();
    };
    Af.prototype.doMouseMove = function() {
        if (this.isActive) {
            var a1 = this.diagram;
            this.targetPort = this.findTargetPort(this.isForwards);
            if (null !== this.targetPort && this.targetPort.part instanceof V) {
                var b = this.targetPort.part;
                this.isForwards ? this.copyPortProperties(b, this.targetPort, this.temporaryToNode, this.temporaryToPort, !0) : this.copyPortProperties(b, this.targetPort, this.temporaryFromNode, this.temporaryFromPort, !1);
            } else this.isForwards ? this.setNoTargetPortProperties(this.temporaryToNode, this.temporaryToPort, !0) : this.setNoTargetPortProperties(this.temporaryFromNode, this.temporaryFromPort, !1);
            (a1.allowHorizontalScroll || a1.allowVerticalScroll) && a1.fs(a1.lastInput.viewPoint);
        }
    };
    Af.prototype.findValidLinkablePort = function(a1, b) {
        if (null === a1) return null;
        var c = a1.part;
        if (!(c instanceof V)) return null;
        for(; null !== a1;){
            var d = b ? a1.toLinkable : a1.fromLinkable;
            if (!0 === d && (null !== a1.portId || a1 instanceof V) && (b ? this.isValidTo(c, a1) : this.isValidFrom(c, a1))) return a1;
            if (!1 === d) break;
            a1 = a1.panel;
        }
        return null;
    };
    Af.prototype.findTargetPort = function(a1) {
        var b = this.diagram, c = b.lastInput.documentPoint, d = this.portGravity;
        0 >= d && (d = .1);
        var e = this, f = b.og(c, d, function(b) {
            return e.findValidLinkablePort(b, a1);
        }, null, !0);
        d = Infinity;
        b = null;
        for(f = f.iterator; f.next();){
            var g = f.value, h = g.part;
            if (h instanceof V) {
                var k = g.ga(wc, J.alloc()), l = c.x - k.x, m = c.y - k.y;
                J.free(k);
                k = l * l + m * m;
                k < d && (l = this.validPortsCache.I(g), null !== l ? l && (b = g, d = k) : a1 && this.isValidLink(this.originalFromNode, this.originalFromPort, h, g) || !a1 && this.isValidLink(h, g, this.originalToNode, this.originalToPort) ? (this.validPortsCache.add(g, !0), b = g, d = k) : this.validPortsCache.add(g, !1));
            }
        }
        return null !== b && (c = b.part, c instanceof V && (null === c.layer || c.layer.allowLink)) ? b : null;
    };
    Af.prototype.isValidFrom = function(a1, b) {
        if (null === a1 || null === b) return this.isUnconnectedLinkValid;
        if (this.diagram.currentTool === this && (null !== a1.layer && !a1.layer.allowLink || !0 !== b.fromLinkable)) return !1;
        var c = b.fromMaxLinks;
        if (Infinity > c) {
            if (null !== this.originalLink && a1 === this.originalFromNode && b === this.originalFromPort) return !0;
            b = b.portId;
            null === b && (b = "");
            if (a1.Lo(b).count >= c) return !1;
        }
        return !0;
    };
    Af.prototype.isValidTo = function(a1, b) {
        if (null === a1 || null === b) return this.isUnconnectedLinkValid;
        if (this.diagram.currentTool === this && (null !== a1.layer && !a1.layer.allowLink || !0 !== b.toLinkable)) return !1;
        var c = b.toMaxLinks;
        if (Infinity > c) {
            if (null !== this.originalLink && a1 === this.originalToNode && b === this.originalToPort) return !0;
            b = b.portId;
            null === b && (b = "");
            if (a1.Sd(b).count >= c) return !1;
        }
        return !0;
    };
    Af.prototype.isInSameNode = function(a1, b) {
        if (null === a1 || null === b) return !1;
        if (a1 === b) return !0;
        a1 = a1.part;
        b = b.part;
        return null !== a1 && a1 === b;
    };
    Af.prototype.isLinked = function(a1, b) {
        if (null === a1 || null === b) return !1;
        var c = a1.part;
        if (!(c instanceof V)) return !1;
        a1 = a1.portId;
        null === a1 && (a1 = "");
        var d = b.part;
        if (!(d instanceof V)) return !1;
        b = b.portId;
        null === b && (b = "");
        for(b = d.Sd(b); b.next();)if (d = b.value, d.fromNode === c && d.fromPortId === a1) return !0;
        return !1;
    };
    Af.prototype.isValidLink = function(a1, b, c, d) {
        if (!this.isValidFrom(a1, b) || !this.isValidTo(c, d) || !(null === b || null === d || (b.fromLinkableSelfNode && d.toLinkableSelfNode || !this.isInSameNode(b, d)) && (b.fromLinkableDuplicates && d.toLinkableDuplicates || !this.isLinked(b, d))) || null !== this.originalLink && (null !== a1 && this.isLabelDependentOnLink(a1, this.originalLink) || null !== c && this.isLabelDependentOnLink(c, this.originalLink)) || null !== a1 && null !== c && (null === a1.data && null !== c.data || null !== a1.data && null === c.data) || !this.isValidCycle(a1, c, this.originalLink)) return !1;
        if (null !== a1) {
            var e = a1.linkValidation;
            if (null !== e && !e(a1, b, c, d, this.originalLink)) return !1;
        }
        if (null !== c && (e = c.linkValidation, null !== e && !e(a1, b, c, d, this.originalLink))) return !1;
        e = this.linkValidation;
        return null !== e ? e(a1, b, c, d, this.originalLink) : !0;
    };
    Af.prototype.isLabelDependentOnLink = function(a1, b) {
        if (null === a1) return !1;
        var c = a1.labeledLink;
        if (null === c) return !1;
        if (c === b) return !0;
        var d = new H;
        d.add(a1);
        return Cf(this, c, b, d);
    };
    function Cf(a1, b, c, d) {
        if (b === c) return !0;
        var e = b.fromNode;
        if (null !== e && e.isLinkLabel && (d.add(e), Cf(a1, e.labeledLink, c, d))) return !0;
        b = b.toNode;
        return null !== b && b.isLinkLabel && (d.add(b), Cf(a1, b.labeledLink, c, d)) ? !0 : !1;
    }
    Af.prototype.isValidCycle = function(a1, b, c) {
        void 0 === c && (c = null);
        if (null === a1 || null === b) return this.isUnconnectedLinkValid;
        var d = this.diagram.validCycle;
        if (d !== Df) {
            if (d === Ef) {
                d = c || this.temporaryLink;
                if (null !== d && !d.isTreeLink) return !0;
                for(d = b.linksConnected; d.next();){
                    var e = d.value;
                    if (e !== c && e.isTreeLink && e.toNode === b) return !1;
                }
                return !Ff(this, a1, b, c, !0);
            }
            if (d === Gf) {
                d = c || this.temporaryLink;
                if (null !== d && !d.isTreeLink) return !0;
                for(d = a1.linksConnected; d.next();)if (e = d.value, e !== c && e.isTreeLink && e.fromNode === a1) return !1;
                return !Ff(this, a1, b, c, !0);
            }
            if (d === Hf) return a1 === b ? a1 = !0 : (d = new H, d.add(b), a1 = If(this, d, a1, b, c)), !a1;
            if (d === Jf) return !Ff(this, a1, b, c, !1);
            if (d === Kf) return a1 === b ? a1 = !0 : (d = new H, d.add(b), a1 = Sf(this, d, a1, b, c)), !a1;
        }
        return !0;
    };
    function Ff(a1, b, c, d, e) {
        if (b === c) return !0;
        if (null === b || null === c) return !1;
        for(var f = b.linksConnected; f.next();){
            var g = f.value;
            if (g !== d && (!e || g.isTreeLink) && g.toNode === b && (g = g.fromNode, g !== b && Ff(a1, g, c, d, e))) return !0;
        }
        return !1;
    }
    function If(a1, b, c, d, e) {
        if (c === d) return !0;
        if (null === c || null === d || b.contains(c)) return !1;
        b.add(c);
        for(var f = c.linksConnected; f.next();){
            var g = f.value;
            if (g !== e && g.toNode === c && (g = g.fromNode, g !== c && If(a1, b, g, d, e))) return !0;
        }
        return !1;
    }
    function Sf(a1, b, c, d, e) {
        if (c === d) return !0;
        if (null === c || null === d || b.contains(c)) return !1;
        b.add(c);
        for(var f = c.linksConnected; f.next();){
            var g = f.value;
            if (g !== e) {
                var h = g.fromNode;
                g = g.toNode;
                h = h === c ? g : h;
                if (h !== c && Sf(a1, b, h, d, e)) return !0;
            }
        }
        return !1;
    }
    ma.Object.defineProperties(Af.prototype, {
        portGravity: {
            get: function() {
                return this.te;
            },
            set: function(a1) {
                0 <= a1 && (this.te = a1);
            }
        },
        isUnconnectedLinkValid: {
            get: function() {
                return this.Ha;
            },
            set: function(a1) {
                this.Ha = a1;
            }
        },
        linkingCursor: {
            get: function() {
                return this.u;
            },
            set: function(a1) {
                this.u = a1;
            }
        },
        temporaryLink: {
            get: function() {
                return this.Ci;
            },
            set: function(a1) {
                this.Ci = a1;
            }
        },
        temporaryFromNode: {
            get: function() {
                return this.Bi;
            },
            set: function(a1) {
                if (this.Bi = a1) this.j = a1.port;
            }
        },
        temporaryFromPort: {
            get: function() {
                return this.j;
            },
            set: function(a1) {
                if (null !== this.j) {
                    var b = this.j.panel;
                    if (null !== b) {
                        var c = b.O.indexOf(this.j);
                        b.mb(c);
                        b.Hb(c, a1);
                    }
                }
                this.j = a1;
            }
        },
        temporaryToNode: {
            get: function() {
                return this.Di;
            },
            set: function(a1) {
                if (this.Di = a1) this.o = a1.port;
            }
        },
        temporaryToPort: {
            get: function() {
                return this.o;
            },
            set: function(a1) {
                if (null !== this.o) {
                    var b = this.o.panel;
                    if (null !== b) {
                        var c = b.O.indexOf(this.o);
                        b.mb(c);
                        b.Hb(c, a1);
                    }
                }
                this.o = a1;
            }
        },
        originalLink: {
            get: function() {
                return this.Ib;
            },
            set: function(a1) {
                this.Ib = a1;
            }
        },
        originalFromNode: {
            get: function() {
                return this.hb;
            },
            set: function(a1) {
                this.hb = a1;
            }
        },
        originalFromPort: {
            get: function() {
                return this.ob;
            },
            set: function(a1) {
                this.ob = a1;
            }
        },
        originalToNode: {
            get: function() {
                return this.Oc;
            },
            set: function(a1) {
                this.Oc = a1;
            }
        },
        originalToPort: {
            get: function() {
                return this.Pc;
            },
            set: function(a1) {
                this.Pc = a1;
            }
        },
        isForwards: {
            get: function() {
                return this.ia;
            },
            set: function(a1) {
                this.ia = a1;
            }
        },
        validPortsCache: {
            get: function() {
                return this.hy;
            }
        },
        targetPort: {
            get: function() {
                return this.Pf;
            },
            set: function(a1) {
                this.Pf = a1;
            }
        },
        linkValidation: {
            get: function() {
                return this.gj;
            },
            set: function(a1) {
                this.gj = a1;
            }
        },
        portTargeted: {
            get: function() {
                return this.Of;
            },
            set: function(a1) {
                this.Of = a1;
            }
        }
    });
    Af.className = "LinkingBaseTool";
    function Tf() {
        Af.call(this);
        this.name = "Linking";
        this.V = {};
        this.F = null;
        this.K = Uf;
        this.Xd = null;
    }
    la(Tf, Af);
    Tf.prototype.canStart = function() {
        if (!this.isEnabled) return !1;
        var a1 = this.diagram;
        return a1.isReadOnly || a1.isModelReadOnly || !a1.allowLink || !a1.model.ws() || !a1.lastInput.left || a1.currentTool !== this && !this.isBeyondDragSize() ? !1 : null !== this.findLinkablePort();
    };
    Tf.prototype.findLinkablePort = function() {
        var a1 = this.diagram, b = this.startObject;
        null === b && (b = a1.jc(a1.firstInput.documentPoint, null, null));
        if (null === b) return null;
        a1 = b.part;
        if (!(a1 instanceof V)) return null;
        var c = this.direction;
        if (c === Uf || c === Vf) {
            var d = this.findValidLinkablePort(b, !1);
            if (null !== d || this.startObject === a1 && (d = a1.port, this.findValidLinkablePort(d, !1))) return this.isForwards = !0, d;
        }
        if (c === Uf || c === Wf) {
            if (b = this.findValidLinkablePort(b, !0), null !== b || this.startObject === a1 && (b = a1.port, this.findValidLinkablePort(b, !0))) return this.isForwards = !1, b;
        }
        return null;
    };
    Tf.prototype.doActivate = function() {
        var a1 = this.diagram, b = this.findLinkablePort();
        null === b ? this.stopTool() : (this.Ea(this.name), a1.isMouseCaptured = !0, a1.currentCursor = this.linkingCursor, this.isForwards ? (null !== this.temporaryToNode && (this.temporaryToNode.location = a1.lastInput.documentPoint), this.originalFromPort = b, b = this.originalFromPort.part, b instanceof V && (this.originalFromNode = b), this.copyPortProperties(this.originalFromNode, this.originalFromPort, this.temporaryFromNode, this.temporaryFromPort, !1)) : (null !== this.temporaryFromNode && (this.temporaryFromNode.location = a1.lastInput.documentPoint), this.originalToPort = b, b = this.originalToPort.part, b instanceof V && (this.originalToNode = b), this.copyPortProperties(this.originalToNode, this.originalToPort, this.temporaryToNode, this.temporaryToPort, !0)), a1.add(this.temporaryFromNode), this.temporaryFromNode && this.temporaryFromNode.Va(), a1.add(this.temporaryToNode), this.temporaryToNode && this.temporaryToNode.Va(), null !== this.temporaryLink && (null !== this.temporaryFromNode && (this.temporaryLink.fromNode = this.temporaryFromNode), null !== this.temporaryToNode && (this.temporaryLink.toNode = this.temporaryToNode), this.temporaryLink.isTreeLink = this.isNewTreeLink(), this.temporaryLink.bb(), a1.add(this.temporaryLink)), this.isActive = !0);
    };
    Tf.prototype.doDeactivate = function() {
        this.isActive = !1;
        var a1 = this.diagram;
        a1.remove(this.temporaryLink);
        a1.remove(this.temporaryFromNode);
        a1.remove(this.temporaryToNode);
        a1.isMouseCaptured = !1;
        a1.currentCursor = "";
        this.stopTransaction();
    };
    Tf.prototype.doStop = function() {
        Af.prototype.doStop.call(this);
        this.startObject = null;
    };
    Tf.prototype.doMouseUp = function() {
        if (this.isActive) {
            var a1 = this.diagram, b = this.transactionResult = null, c = null, d = null, e = null, f = null;
            try {
                var g = this.targetPort = this.findTargetPort(this.isForwards);
                if (null !== g) {
                    var h = g.part;
                    h instanceof V && (this.isForwards ? (null !== this.originalFromNode && (b = this.originalFromNode, c = this.originalFromPort), d = h, e = g) : (b = h, c = g, null !== this.originalToNode && (d = this.originalToNode, e = this.originalToPort)));
                } else this.isForwards ? null !== this.originalFromNode && this.isUnconnectedLinkValid && (b = this.originalFromNode, c = this.originalFromPort) : null !== this.originalToNode && this.isUnconnectedLinkValid && (d = this.originalToNode, e = this.originalToPort);
                null !== b || null !== d ? (f = this.insertLink(b, c, d, e), null !== f ? (null === g && (this.isForwards ? f.defaultToPoint = a1.lastInput.documentPoint : f.defaultFromPoint = a1.lastInput.documentPoint), a1.allowSelect && (a1.R("ChangingSelection", a1.selection), a1.clearSelection(!0), f.isSelected = !0), this.transactionResult = this.name, a1.R("LinkDrawn", f)) : this.doNoLink(b, c, d, e)) : this.isForwards ? this.doNoLink(this.originalFromNode, this.originalFromPort, null, null) : this.doNoLink(null, null, this.originalToNode, this.originalToPort);
            } finally{
                this.stopTool(), f && a1.allowSelect && a1.R("ChangedSelection", a1.selection);
            }
        }
    };
    Tf.prototype.isNewTreeLink = function() {
        var a1 = this.archetypeLinkData;
        if (null === a1) return !0;
        if (a1 instanceof T) return a1.isTreeLink;
        var b = this.diagram;
        if (null === b) return !0;
        a1 = b.partManager.getLinkCategoryForData(a1);
        b = b.partManager.findLinkTemplateForCategory(a1);
        return null !== b ? b.isTreeLink : !0;
    };
    Tf.prototype.insertLink = function(a1, b, c, d) {
        return this.diagram.partManager.insertLink(a1, b, c, d);
    };
    Tf.prototype.doNoLink = function() {};
    ma.Object.defineProperties(Tf.prototype, {
        archetypeLinkData: {
            get: function() {
                return this.V;
            },
            set: function(a1) {
                this.V = a1;
            }
        },
        archetypeLabelNodeData: {
            get: function() {
                return this.F;
            },
            set: function(a1) {
                this.F = a1;
            }
        },
        direction: {
            get: function() {
                return this.K;
            },
            set: function(a1) {
                this.K = a1;
            }
        },
        startObject: {
            get: function() {
                return this.Xd;
            },
            set: function(a1) {
                this.Xd = a1;
            }
        }
    });
    var Uf = new E(Tf, "Either", 0), Vf = new E(Tf, "ForwardsOnly", 0), Wf = new E(Tf, "BackwardsOnly", 0);
    Tf.className = "LinkingTool";
    Tf.Either = Uf;
    Tf.ForwardsOnly = Vf;
    Tf.BackwardsOnly = Wf;
    function Ie() {
        Af.call(this);
        this.name = "Relinking";
        var a1 = new Bf;
        a1.figure = "Diamond";
        a1.desiredSize = Ib;
        a1.fill = "lightblue";
        a1.stroke = "dodgerblue";
        a1.cursor = this.linkingCursor;
        a1.segmentIndex = 0;
        this.V = a1;
        a1 = new Bf;
        a1.figure = "Diamond";
        a1.desiredSize = Ib;
        a1.fill = "lightblue";
        a1.stroke = "dodgerblue";
        a1.cursor = this.linkingCursor;
        a1.segmentIndex = -1;
        this.Xd = a1;
        this.F = null;
        this.Ew = new N;
    }
    la(Ie, Af);
    Ie.prototype.updateAdornments = function(a1) {
        if (null !== a1 && a1 instanceof T) {
            var b = "RelinkFrom", c = null;
            if (a1.isSelected && !this.diagram.isReadOnly) {
                var d = a1.selectionObject;
                null !== d && a1.canRelinkFrom() && a1.actualBounds.w() && a1.isVisible() && d.actualBounds.w() && d.Ed() && (c = a1.Oj(b), null === c && (c = this.makeAdornment(d, !1), a1.bh(b, c)));
            }
            null === c && a1.Jf(b);
            b = "RelinkTo";
            c = null;
            a1.isSelected && !this.diagram.isReadOnly && (d = a1.selectionObject, null !== d && a1.canRelinkTo() && a1.actualBounds.w() && a1.isVisible() && d.actualBounds.w() && d.Ed() && (c = a1.Oj(b), null === c ? (c = this.makeAdornment(d, !0), a1.bh(b, c)) : c.v()));
            null === c && a1.Jf(b);
        }
    };
    Ie.prototype.makeAdornment = function(a1, b) {
        var c = new te;
        c.type = W.Link;
        b = b ? this.toHandleArchetype : this.fromHandleArchetype;
        null !== b && c.add(b.copy());
        c.adornedObject = a1;
        return c;
    };
    Ie.prototype.canStart = function() {
        if (!this.isEnabled) return !1;
        var a1 = this.diagram;
        if (a1.isReadOnly || a1.isModelReadOnly || !a1.allowRelink || !a1.model.ws() || !a1.lastInput.left) return !1;
        var b = this.findToolHandleAt(a1.firstInput.documentPoint, "RelinkFrom");
        null === b && (b = this.findToolHandleAt(a1.firstInput.documentPoint, "RelinkTo"));
        return null !== b;
    };
    Ie.prototype.doActivate = function() {
        var a1 = this.diagram;
        if (null === this.originalLink) {
            var b = this.handle;
            null === b && (b = this.findToolHandleAt(a1.firstInput.documentPoint, "RelinkFrom"), null === b && (b = this.findToolHandleAt(a1.firstInput.documentPoint, "RelinkTo")));
            if (null === b) return;
            var c = b.part;
            if (!(c instanceof te && c.adornedPart instanceof T)) return;
            this.handle = b;
            this.isForwards = null === c || "RelinkTo" === c.category;
            this.originalLink = c.adornedPart;
        }
        this.Ea(this.name);
        a1.isMouseCaptured = !0;
        a1.currentCursor = this.linkingCursor;
        this.originalFromPort = this.originalLink.fromPort;
        this.originalFromNode = this.originalLink.fromNode;
        this.originalToPort = this.originalLink.toPort;
        this.originalToNode = this.originalLink.toNode;
        this.Ew.set(this.originalLink.actualBounds);
        null !== this.originalLink && 0 < this.originalLink.pointsCount && (null === this.originalLink.fromNode && (null !== this.temporaryFromPort && (this.temporaryFromPort.desiredSize = Cb), null !== this.temporaryFromNode && (this.temporaryFromNode.location = this.originalLink.i(0))), null === this.originalLink.toNode && (null !== this.temporaryToPort && (this.temporaryToPort.desiredSize = Cb), null !== this.temporaryToNode && (this.temporaryToNode.location = this.originalLink.i(this.originalLink.pointsCount - 1))));
        this.copyPortProperties(this.originalFromNode, this.originalFromPort, this.temporaryFromNode, this.temporaryFromPort, !1);
        this.copyPortProperties(this.originalToNode, this.originalToPort, this.temporaryToNode, this.temporaryToPort, !0);
        a1.add(this.temporaryFromNode);
        a1.add(this.temporaryToNode);
        null !== this.temporaryLink && (null !== this.temporaryFromNode && (this.temporaryLink.fromNode = this.temporaryFromNode), null !== this.temporaryToNode && (this.temporaryLink.toNode = this.temporaryToNode), this.copyLinkProperties(this.originalLink, this.temporaryLink), this.temporaryLink.bb(), a1.add(this.temporaryLink));
        this.isActive = !0;
    };
    Ie.prototype.copyLinkProperties = function(a1, b) {
        if (null !== a1 && null !== b) {
            b.adjusting = a1.adjusting;
            b.corner = a1.corner;
            var c = a1.curve;
            if (c === Xf || c === Yf) c = Zf;
            b.curve = c;
            b.curviness = a1.curviness;
            b.isTreeLink = a1.isTreeLink;
            b.points = a1.points;
            b.routing = a1.routing;
            b.smoothness = a1.smoothness;
            b.fromSpot = a1.fromSpot;
            b.fromEndSegmentLength = a1.fromEndSegmentLength;
            b.fromShortLength = a1.fromShortLength;
            b.toSpot = a1.toSpot;
            b.toEndSegmentLength = a1.toEndSegmentLength;
            b.toShortLength = a1.toShortLength;
        }
    };
    Ie.prototype.doDeactivate = function() {
        this.isActive = !1;
        var a1 = this.diagram;
        a1.remove(this.temporaryLink);
        a1.remove(this.temporaryFromNode);
        a1.remove(this.temporaryToNode);
        a1.isMouseCaptured = !1;
        a1.currentCursor = "";
        this.stopTransaction();
    };
    Ie.prototype.doStop = function() {
        Af.prototype.doStop.call(this);
        this.handle = null;
    };
    Ie.prototype.doMouseUp = function() {
        if (this.isActive) {
            var a1 = this.diagram;
            this.transactionResult = null;
            var b = this.originalFromNode, c = this.originalFromPort, d = this.originalToNode, e = this.originalToPort, f = this.originalLink;
            try {
                this.targetPort = this.findTargetPort(this.isForwards);
                if (null !== this.targetPort) {
                    var g = this.targetPort.part;
                    g instanceof V && (this.isForwards ? (d = g, e = this.targetPort) : (b = g, c = this.targetPort));
                } else this.isUnconnectedLinkValid ? this.isForwards ? e = d = null : c = b = null : f = null;
                null !== f ? (this.reconnectLink(f, this.isForwards ? d : b, this.isForwards ? e : c, this.isForwards), null === this.targetPort && (this.isForwards ? f.defaultToPoint = a1.lastInput.documentPoint : f.defaultFromPoint = a1.lastInput.documentPoint, f.bb()), this.transactionResult = this.name, a1.R("LinkRelinked", f, this.isForwards ? this.originalToPort : this.originalFromPort)) : this.doNoRelink(this.originalLink, this.isForwards);
                this.originalLink.Wo(this.Ew);
            } finally{
                this.stopTool();
            }
        }
    };
    Ie.prototype.reconnectLink = function(a1, b, c, d) {
        c = null !== c && null !== c.portId ? c.portId : "";
        d ? (a1.toNode = b, a1.toPortId = c) : (a1.fromNode = b, a1.fromPortId = c);
        return !0;
    };
    Ie.prototype.doNoRelink = function() {};
    function tf(a1, b, c, d, e) {
        null !== b ? (a1.copyPortProperties(b, c, a1.temporaryFromNode, a1.temporaryFromPort, !1), a1.diagram.add(a1.temporaryFromNode)) : a1.diagram.remove(a1.temporaryFromNode);
        null !== d ? (a1.copyPortProperties(d, e, a1.temporaryToNode, a1.temporaryToPort, !0), a1.diagram.add(a1.temporaryToNode)) : a1.diagram.remove(a1.temporaryToNode);
    }
    ma.Object.defineProperties(Ie.prototype, {
        fromHandleArchetype: {
            get: function() {
                return this.V;
            },
            set: function(a1) {
                this.V = a1;
            }
        },
        toHandleArchetype: {
            get: function() {
                return this.Xd;
            },
            set: function(a1) {
                this.Xd = a1;
            }
        },
        handle: {
            get: function() {
                return this.F;
            },
            set: function(a1) {
                if (null !== a1 && !(a1.part instanceof te)) throw Error("new handle is not in an Adornment: " + a1);
                this.F = a1;
            }
        }
    });
    Ie.className = "RelinkingTool";
    Ka("linkingTool", function() {
        return this.findTool("Linking");
    }, function(a1) {
        this.gb("Linking", a1, this.mouseMoveTools);
    });
    Ka("relinkingTool", function() {
        return this.findTool("Relinking");
    }, function(a1) {
        this.gb("Relinking", a1, this.mouseDownTools);
    });
    function $f() {
        je.call(this);
        this.name = "LinkReshaping";
        var a1 = new Bf;
        a1.figure = "Rectangle";
        a1.desiredSize = Hb;
        a1.fill = "lightblue";
        a1.stroke = "dodgerblue";
        this.o = a1;
        a1 = new Bf;
        a1.figure = "Diamond";
        a1.desiredSize = Ib;
        a1.fill = "lightblue";
        a1.stroke = "dodgerblue";
        a1.cursor = "move";
        this.u = a1;
        this.F = 3;
        this.Ss = this.j = null;
        this.Fw = new J;
        this.Xq = new F;
    }
    la($f, je);
    $f.prototype.Ru = function(a1) {
        return a1 && 0 !== a1.reshapingBehavior.value ? a1.reshapingBehavior : ag;
    };
    $f.prototype.nm = function(a1, b) {
        a1.reshapingBehavior = b;
    };
    $f.prototype.updateAdornments = function(a1) {
        if (null !== a1 && a1 instanceof T) {
            var b = null;
            if (a1.isSelected && !this.diagram.isReadOnly) {
                var c = a1.path;
                null !== c && a1.canReshape() && a1.actualBounds.w() && a1.isVisible() && c.actualBounds.w() && c.Ed() && (b = a1.Oj(this.name), null === b || b.Aw !== a1.pointsCount || b.Uw !== a1.resegmentable) && (b = this.makeAdornment(c), null !== b && (b.Aw = a1.pointsCount, b.Uw = a1.resegmentable, a1.bh(this.name, b)));
            }
            null === b && a1.Jf(this.name);
        }
    };
    $f.prototype.makeAdornment = function(a1) {
        var b = a1.part, c = b.pointsCount, d = b.isOrthogonal, e = null;
        if (null !== b.points && 1 < c) {
            e = new te;
            e.type = W.Link;
            c = b.firstPickIndex;
            var f = b.lastPickIndex, g = d ? 1 : 0;
            if (b.resegmentable && b.computeCurve() !== bg) for(var h = c + g; h < f - g; h++){
                var k = this.makeResegmentHandle(a1, h);
                null !== k && (k.segmentIndex = h, k.segmentFraction = .5, k.fromMaxLinks = 999, e.add(k));
            }
            for(g = c + 1; g < f; g++)if (h = this.makeHandle(a1, g), null !== h) {
                h.segmentIndex = g;
                if (g !== c) {
                    if (g === c + 1 && d) {
                        k = b.i(c);
                        var l = b.i(c + 1);
                        K.B(k.x, l.x) && K.B(k.y, l.y) && (l = b.i(c - 1));
                        K.B(k.x, l.x) ? (this.nm(h, cg), h.cursor = "n-resize") : K.B(k.y, l.y) && (this.nm(h, dg), h.cursor = "w-resize");
                    } else g === f - 1 && d ? (k = b.i(f - 1), l = b.i(f), K.B(k.x, l.x) && K.B(k.y, l.y) && (k = b.i(f + 1)), K.B(k.x, l.x) ? (this.nm(h, cg), h.cursor = "n-resize") : K.B(k.y, l.y) && (this.nm(h, dg), h.cursor = "w-resize")) : g !== f && (this.nm(h, eg), h.cursor = "move");
                }
                e.add(h);
            }
            e.adornedObject = a1;
        }
        return e;
    };
    $f.prototype.makeHandle = function() {
        var a1 = this.handleArchetype;
        return null === a1 ? null : a1.copy();
    };
    $f.prototype.makeResegmentHandle = function() {
        var a1 = this.midHandleArchetype;
        return null === a1 ? null : a1.copy();
    };
    $f.prototype.canStart = function() {
        if (!this.isEnabled) return !1;
        var a1 = this.diagram;
        return !a1.isReadOnly && a1.allowReshape && a1.lastInput.left ? null !== this.findToolHandleAt(a1.firstInput.documentPoint, this.name) : !1;
    };
    $f.prototype.doActivate = function() {
        var a1 = this.diagram;
        null === this.handle && (this.handle = this.findToolHandleAt(a1.firstInput.documentPoint, this.name));
        if (null !== this.handle) {
            var b = this.handle.part.adornedPart;
            if (b instanceof T) {
                this.Ss = b;
                a1.isMouseCaptured = !0;
                this.Ea(this.name);
                if (b.resegmentable && 999 === this.handle.fromMaxLinks) {
                    var c = b.points.copy(), d = this.getResegmentingPoint();
                    c.Hb(this.handle.segmentIndex + 1, d);
                    b.isOrthogonal && c.Hb(this.handle.segmentIndex + 1, d);
                    b.points = c;
                    b.Xb();
                    b.updateAdornments();
                    this.handle = this.findToolHandleAt(a1.firstInput.documentPoint, this.name);
                    if (null === this.handle) {
                        this.doDeactivate();
                        return;
                    }
                }
                this.Fw = b.i(this.handle.segmentIndex);
                this.Xq = b.points.copy();
                this.isActive = !0;
            }
        }
    };
    $f.prototype.doDeactivate = function() {
        this.stopTransaction();
        this.Ss = this.handle = null;
        this.isActive = this.diagram.isMouseCaptured = !1;
    };
    $f.prototype.stopTransaction = function() {
        var a1 = this.diagram, b = je.prototype.stopTransaction.call(this);
        b && null !== a1.undoManager.transactionToUndo && a1.undoManager.transactionToUndo.$j();
        return b;
    };
    $f.prototype.doCancel = function() {
        var a1 = this.adornedLink;
        null !== a1 && (a1.points = this.Xq);
        this.stopTool();
    };
    $f.prototype.getResegmentingPoint = function() {
        return this.handle.ga(wc);
    };
    $f.prototype.doMouseMove = function() {
        var a1 = this.diagram;
        this.isActive && (a1 = this.computeReshape(a1.lastInput.documentPoint), this.reshape(a1));
    };
    $f.prototype.doMouseUp = function() {
        var a1 = this.diagram;
        if (this.isActive) {
            var b = this.computeReshape(a1.lastInput.documentPoint);
            this.reshape(b);
            b = this.adornedLink;
            if (null !== b && b.resegmentable) {
                var c = this.handle.segmentIndex, d = b.i(c - 1), e = b.i(c), f = b.i(c + 1);
                if (b.isOrthogonal) {
                    if (c > b.firstPickIndex + 1 && c < b.lastPickIndex - 1) {
                        var g = b.i(c - 2);
                        if (Math.abs(d.x - e.x) < this.resegmentingDistance && Math.abs(d.y - e.y) < this.resegmentingDistance && (fg(this, g, d, e, f, !0) || fg(this, g, d, e, f, !1))) {
                            var h = b.points.copy();
                            fg(this, g, d, e, f, !0) ? (h.cd(c - 2, new J(g.x, (f.y + g.y) / 2)), h.cd(c + 1, new J(f.x, (f.y + g.y) / 2))) : (h.cd(c - 2, new J((f.x + g.x) / 2, g.y)), h.cd(c + 1, new J((f.x + g.x) / 2, f.y)));
                            h.mb(c);
                            h.mb(c - 1);
                            b.points = h;
                            b.Xb();
                        } else g = b.i(c + 2), Math.abs(e.x - f.x) < this.resegmentingDistance && Math.abs(e.y - f.y) < this.resegmentingDistance && (fg(this, d, e, f, g, !0) || fg(this, d, e, f, g, !1)) && (h = b.points.copy(), fg(this, d, e, f, g, !0) ? (h.cd(c - 1, new J(d.x, (d.y + g.y) / 2)), h.cd(c + 2, new J(g.x, (d.y + g.y) / 2))) : (h.cd(c - 1, new J((d.x + g.x) / 2, d.y)), h.cd(c + 2, new J((d.x + g.x) / 2, g.y))), h.mb(c + 1), h.mb(c), b.points = h, b.Xb());
                    }
                } else g = J.alloc(), K.qh(d.x, d.y, f.x, f.y, e.x, e.y, g) && g.Bf(e) < this.resegmentingDistance * this.resegmentingDistance && (d = b.points.copy(), d.mb(c), b.points = d, b.Xb()), J.free(g);
            }
            a1.Ya();
            this.transactionResult = this.name;
            a1.R("LinkReshaped", this.adornedLink, this.Xq);
        }
        this.stopTool();
    };
    function fg(a1, b, c, d, e, f) {
        return f ? Math.abs(b.y - c.y) < a1.resegmentingDistance && Math.abs(c.y - d.y) < a1.resegmentingDistance && Math.abs(d.y - e.y) < a1.resegmentingDistance : Math.abs(b.x - c.x) < a1.resegmentingDistance && Math.abs(c.x - d.x) < a1.resegmentingDistance && Math.abs(d.x - e.x) < a1.resegmentingDistance;
    }
    $f.prototype.reshape = function(a1) {
        var b = this.adornedLink;
        b.uh();
        var c = this.handle.segmentIndex, d = this.Ru(this.handle);
        if (b.isOrthogonal) {
            if (c === b.firstPickIndex + 1) c = b.firstPickIndex + 1, d === cg ? (b.L(c, b.i(c - 1).x, a1.y), b.L(c + 1, b.i(c + 2).x, a1.y)) : d === dg && (b.L(c, a1.x, b.i(c - 1).y), b.L(c + 1, a1.x, b.i(c + 2).y));
            else if (c === b.lastPickIndex - 1) c = b.lastPickIndex - 1, d === cg ? (b.L(c - 1, b.i(c - 2).x, a1.y), b.L(c, b.i(c + 1).x, a1.y)) : d === dg && (b.L(c - 1, a1.x, b.i(c - 2).y), b.L(c, a1.x, b.i(c + 1).y));
            else {
                d = c;
                var e = b.i(d), f = b.i(d - 1), g = b.i(d + 1);
                K.B(f.x, e.x) && K.B(e.y, g.y) ? (K.B(f.x, b.i(d - 2).x) && !K.B(f.y, b.i(d - 2).y) ? (b.m(d, a1.x, f.y), c++, d++) : b.L(d - 1, a1.x, f.y), K.B(g.y, b.i(d + 2).y) && !K.B(g.x, b.i(d + 2).x) ? b.m(d + 1, g.x, a1.y) : b.L(d + 1, g.x, a1.y)) : K.B(f.y, e.y) && K.B(e.x, g.x) ? (K.B(f.y, b.i(d - 2).y) && !K.B(f.x, b.i(d - 2).x) ? (b.m(d, f.x, a1.y), c++, d++) : b.L(d - 1, f.x, a1.y), K.B(g.x, b.i(d + 2).x) && !K.B(g.y, b.i(d + 2).y) ? b.m(d + 1, a1.x, g.y) : b.L(d + 1, a1.x, g.y)) : K.B(f.x, e.x) && K.B(e.x, g.x) ? (K.B(f.x, b.i(d - 2).x) && !K.B(f.y, b.i(d - 2).y) ? (b.m(d, a1.x, f.y), c++, d++) : b.L(d - 1, a1.x, f.y), K.B(g.x, b.i(d + 2).x) && !K.B(g.y, b.i(d + 2).y) ? b.m(d + 1, a1.x, g.y) : b.L(d + 1, a1.x, g.y)) : K.B(f.y, e.y) && K.B(e.y, g.y) && (K.B(f.y, b.i(d - 2).y) && !K.B(f.x, b.i(d - 2).x) ? (b.m(d, f.x, a1.y), c++, d++) : b.L(d - 1, f.x, a1.y), K.B(g.y, b.i(d + 2).y) && !K.B(g.x, b.i(d + 2).x) ? b.m(d + 1, g.x, a1.y) : b.L(d + 1, g.x, a1.y));
                b.L(c, a1.x, a1.y);
            }
        } else b.L(c, a1.x, a1.y), d = b.fromNode, e = b.fromPort, null !== d && (f = d.findVisibleNode(), null !== f && f !== d && (d = f, e = d.port)), 1 === c && b.computeSpot(!0, e).Mc() && (f = e.ga(wc, J.alloc()), d = b.getLinkPointFromPoint(d, e, f, a1, !0, J.alloc()), b.L(0, d.x, d.y), J.free(f), J.free(d)), d = b.toNode, e = b.toPort, null !== d && (f = d.findVisibleNode(), null !== f && f !== d && (d = f, e = d.port)), c === b.pointsCount - 2 && b.computeSpot(!1, e).Mc() && (c = e.ga(wc, J.alloc()), a1 = b.getLinkPointFromPoint(d, e, c, a1, !1, J.alloc()), b.L(b.pointsCount - 1, a1.x, a1.y), J.free(c), J.free(a1));
        b.zf();
    };
    $f.prototype.computeReshape = function(a1) {
        var b = this.adornedLink, c = this.handle.segmentIndex;
        switch(this.Ru(this.handle)){
            case eg:
                return a1;
            case cg:
                return new J(b.i(c).x, a1.y);
            case dg:
                return new J(a1.x, b.i(c).y);
            default:
            case ag:
                return b.i(c);
        }
    };
    ma.Object.defineProperties($f.prototype, {
        handleArchetype: {
            get: function() {
                return this.o;
            },
            set: function(a1) {
                this.o = a1;
            }
        },
        midHandleArchetype: {
            get: function() {
                return this.u;
            },
            set: function(a1) {
                this.u = a1;
            }
        },
        handle: {
            get: function() {
                return this.j;
            },
            set: function(a1) {
                if (null !== a1 && !(a1.part instanceof te)) throw Error("new handle is not in an Adornment: " + a1);
                this.j = a1;
            }
        },
        adornedLink: {
            get: function() {
                return this.Ss;
            }
        },
        resegmentingDistance: {
            get: function() {
                return this.F;
            },
            set: function(a1) {
                this.F = a1;
            }
        },
        originalPoint: {
            get: function() {
                return this.Fw;
            }
        },
        originalPoints: {
            get: function() {
                return this.Xq;
            }
        }
    });
    $f.prototype.setReshapingBehavior = $f.prototype.nm;
    $f.prototype.getReshapingBehavior = $f.prototype.Ru;
    var ag = new E($f, "None", 0), dg = new E($f, "Horizontal", 1), cg = new E($f, "Vertical", 2), eg = new E($f, "All", 3);
    $f.className = "LinkReshapingTool";
    $f.None = ag;
    $f.Horizontal = dg;
    $f.Vertical = cg;
    $f.All = eg;
    Ka("linkReshapingTool", function() {
        return this.findTool("LinkReshaping");
    }, function(a1) {
        this.gb("LinkReshaping", a1, this.mouseDownTools);
    });
    function gg() {
        je.call(this);
        this.name = "Resizing";
        this.o = new L(1, 1).freeze();
        this.j = new L(9999, 9999).freeze();
        this.yg = new L(NaN, NaN).freeze();
        this.V = !1;
        this.ia = !0;
        this.ue = null;
        var a1 = new Bf;
        a1.alignmentFocus = wc;
        a1.figure = "Rectangle";
        a1.desiredSize = Hb;
        a1.fill = "lightblue";
        a1.stroke = "dodgerblue";
        a1.strokeWidth = 1;
        a1.cursor = "pointer";
        this.F = a1;
        this.u = null;
        this.Wq = new J;
        this.Dw = new L;
        this.Sn = new J;
        this.qt = new L(0, 0);
        this.pt = new L(Infinity, Infinity);
        this.ot = new L(1, 1);
    }
    la(gg, je);
    gg.prototype.updateAdornments = function(a1) {
        if (!(null === a1 || a1 instanceof T)) {
            if (a1.isSelected && !this.diagram.isReadOnly) {
                var b = a1.resizeObject, c = a1.Oj(this.name);
                if (null !== b && a1.canResize() && a1.actualBounds.w() && a1.isVisible() && b.actualBounds.w() && b.Ed()) {
                    if (null === c || c.adornedObject !== b) c = this.makeAdornment(b);
                    if (null !== c) {
                        b = b.li();
                        hg(a1) && this.updateResizeHandles(c, b);
                        a1.bh(this.name, c);
                        return;
                    }
                }
            }
            a1.Jf(this.name);
        }
    };
    gg.prototype.makeAdornment = function(a1) {
        var b = a1.part.resizeAdornmentTemplate;
        if (null === b) {
            b = new te;
            b.type = W.Spot;
            b.locationSpot = wc;
            var c = new ig;
            c.isPanelMain = !0;
            b.add(c);
            b.add(this.makeHandle(a1, sc));
            b.add(this.makeHandle(a1, uc));
            b.add(this.makeHandle(a1, Bc));
            b.add(this.makeHandle(a1, zc));
            b.add(this.makeHandle(a1, $c));
            b.add(this.makeHandle(a1, bd));
            b.add(this.makeHandle(a1, cd));
            b.add(this.makeHandle(a1, ad));
        } else if (jg(b), b = b.copy(), null === b) return null;
        b.adornedObject = a1;
        return b;
    };
    gg.prototype.makeHandle = function(a1, b) {
        a1 = this.handleArchetype;
        if (null === a1) return null;
        a1 = a1.copy();
        a1.alignment = b;
        return a1;
    };
    gg.prototype.updateResizeHandles = function(a1, b) {
        if (null !== a1) {
            if (!a1.alignment.Yb() && ("pointer" === a1.cursor || 0 < a1.cursor.indexOf("resize"))) a: {
                var c = a1.alignment;
                c.Mc() && (c = wc);
                if (0 >= c.x) b = 0 >= c.y ? b + 225 : 1 <= c.y ? b + 135 : b + 180;
                else if (1 <= c.x) 0 >= c.y ? b += 315 : 1 <= c.y && (b += 45);
                else if (0 >= c.y) b += 270;
                else if (1 <= c.y) b += 90;
                else break a;
                0 > b ? b += 360 : 360 <= b && (b -= 360);
                a1.cursor = 22.5 > b ? "e-resize" : 67.5 > b ? "se-resize" : 112.5 > b ? "s-resize" : 157.5 > b ? "sw-resize" : 202.5 > b ? "w-resize" : 247.5 > b ? "nw-resize" : 292.5 > b ? "n-resize" : 337.5 > b ? "ne-resize" : "e-resize";
            }
            else if (a1 instanceof W) for(a1 = a1.elements; a1.next();)this.updateResizeHandles(a1.value, b);
        }
    };
    gg.prototype.canStart = function() {
        if (!this.isEnabled) return !1;
        var a1 = this.diagram;
        return !a1.isReadOnly && a1.allowResize && a1.lastInput.left ? null !== this.findToolHandleAt(a1.firstInput.documentPoint, this.name) : !1;
    };
    gg.prototype.doActivate = function() {
        var a1 = this.diagram;
        null === this.handle && (this.handle = this.findToolHandleAt(a1.firstInput.documentPoint, this.name));
        null !== this.handle && (this.adornedObject = this.handle.part.adornedObject, null !== this.adornedObject && (a1.isMouseCaptured = !0, a1.animationManager.Cc(), this.Ea(this.name), this.Wq.set(this.adornedObject.ga(this.handle.alignment.gv())), this.Sn.set(this.adornedObject.part.location), this.Dw.set(this.adornedObject.desiredSize), this.ot = this.computeCellSize(), this.qt = this.computeMinSize(), this.pt = this.computeMaxSize(), this.isActive = !0));
    };
    gg.prototype.doDeactivate = function() {
        var a1 = this.diagram;
        this.stopTransaction();
        this.ue = this.handle = null;
        this.isActive = a1.isMouseCaptured = !1;
    };
    gg.prototype.stopTransaction = function() {
        var a1 = this.diagram, b = je.prototype.stopTransaction.call(this);
        b && null !== a1.undoManager.transactionToUndo && a1.undoManager.transactionToUndo.$j();
        return b;
    };
    gg.prototype.doCancel = function() {
        null !== this.adornedObject && (this.adornedObject.desiredSize = this.originalDesiredSize, this.adornedObject.part.location = this.originalLocation);
        this.stopTool();
    };
    gg.prototype.doMouseMove = function() {
        var a1 = this.diagram;
        if (this.isActive) {
            var b = this.qt, c = this.pt, d = this.ot, e = this.adornedObject.ps(a1.lastInput.documentPoint, J.alloc()), f = this.computeReshape();
            b = this.computeResize(e, this.handle.alignment, b, c, d, f);
            this.resize(b);
            a1.bd();
            J.free(e);
        }
    };
    gg.prototype.doMouseUp = function() {
        var a1 = this.diagram;
        if (this.isActive) {
            var b = this.qt, c = this.pt, d = this.ot, e = this.adornedObject.ps(a1.lastInput.documentPoint, J.alloc()), f = this.computeReshape();
            b = this.computeResize(e, this.handle.alignment, b, c, d, f);
            this.resize(b);
            J.free(e);
            a1.Ya();
            this.transactionResult = this.name;
            a1.R("PartResized", this.adornedObject, this.originalDesiredSize);
        }
        this.stopTool();
    };
    gg.prototype.resize = function(a1) {
        var b = this.diagram, c = this.adornedObject;
        if (null !== c) {
            c.desiredSize = a1.size;
            a1 = c.part;
            a1.Va();
            c = c.ga(this.handle.alignment.gv());
            if (a1 instanceof pf) {
                var d = new F;
                d.add(a1);
                if (!this.dragsMembers && null === a1.placeholder) {
                    var e = new Be;
                    e.dragsMembers = !1;
                }
                b.moveParts(d, this.oppositePoint.copy().re(c), !0, e);
            } else a1.location = a1.location.copy().re(c).add(this.oppositePoint);
            b.bd();
        }
    };
    gg.prototype.computeResize = function(a1, b, c, d, e, f) {
        b.Mc() && (b = wc);
        var g = this.adornedObject.naturalBounds, h = g.x, k = g.y, l = g.x + g.width, m = g.y + g.height, n = 1;
        if (!f) {
            n = g.width;
            var p = g.height;
            0 >= n && (n = 1);
            0 >= p && (p = 1);
            n = p / n;
        }
        p = J.alloc();
        K.Mo(a1.x, a1.y, h, k, e.width, e.height, p);
        a1 = g.copy();
        0 >= b.x ? 0 >= b.y ? (a1.x = Math.max(p.x, l - d.width), a1.x = Math.min(a1.x, l - c.width), a1.width = Math.max(l - a1.x, c.width), a1.y = Math.max(p.y, m - d.height), a1.y = Math.min(a1.y, m - c.height), a1.height = Math.max(m - a1.y, c.height), f || (1 <= a1.height / a1.width ? (a1.height = Math.max(Math.min(n * a1.width, d.height), c.height), a1.width = a1.height / n) : (a1.width = Math.max(Math.min(a1.height / n, d.width), c.width), a1.height = n * a1.width), a1.x = l - a1.width, a1.y = m - a1.height)) : 1 <= b.y ? (a1.x = Math.max(p.x, l - d.width), a1.x = Math.min(a1.x, l - c.width), a1.width = Math.max(l - a1.x, c.width), a1.height = Math.max(Math.min(p.y - k, d.height), c.height), f || (1 <= a1.height / a1.width ? (a1.height = Math.max(Math.min(n * a1.width, d.height), c.height), a1.width = a1.height / n) : (a1.width = Math.max(Math.min(a1.height / n, d.width), c.width), a1.height = n * a1.width), a1.x = l - a1.width)) : (a1.x = Math.max(p.x, l - d.width), a1.x = Math.min(a1.x, l - c.width), a1.width = l - a1.x, f || (a1.height = Math.max(Math.min(n * a1.width, d.height), c.height), a1.width = a1.height / n, a1.y = k + .5 * (m - k - a1.height))) : 1 <= b.x ? 0 >= b.y ? (a1.width = Math.max(Math.min(p.x - h, d.width), c.width), a1.y = Math.max(p.y, m - d.height), a1.y = Math.min(a1.y, m - c.height), a1.height = Math.max(m - a1.y, c.height), f || (1 <= a1.height / a1.width ? (a1.height = Math.max(Math.min(n * a1.width, d.height), c.height), a1.width = a1.height / n) : (a1.width = Math.max(Math.min(a1.height / n, d.width), c.width), a1.height = n * a1.width), a1.y = m - a1.height)) : 1 <= b.y ? (a1.width = Math.max(Math.min(p.x - h, d.width), c.width), a1.height = Math.max(Math.min(p.y - k, d.height), c.height), f || (1 <= a1.height / a1.width ? (a1.height = Math.max(Math.min(n * a1.width, d.height), c.height), a1.width = a1.height / n) : (a1.width = Math.max(Math.min(a1.height / n, d.width), c.width), a1.height = n * a1.width))) : (a1.width = Math.max(Math.min(p.x - h, d.width), c.width), f || (a1.height = Math.max(Math.min(n * a1.width, d.height), c.height), a1.width = a1.height / n, a1.y = k + .5 * (m - k - a1.height))) : 0 >= b.y ? (a1.y = Math.max(p.y, m - d.height), a1.y = Math.min(a1.y, m - c.height), a1.height = m - a1.y, f || (a1.width = Math.max(Math.min(a1.height / n, d.width), c.width), a1.height = n * a1.width, a1.x = h + .5 * (l - h - a1.width))) : 1 <= b.y && (a1.height = Math.max(Math.min(p.y - k, d.height), c.height), f || (a1.width = Math.max(Math.min(a1.height / n, d.width), c.width), a1.height = n * a1.width, a1.x = h + .5 * (l - h - a1.width)));
        J.free(p);
        return a1;
    };
    gg.prototype.computeReshape = function() {
        var a1 = kg;
        this.adornedObject instanceof Bf && (a1 = lg(this.adornedObject));
        return !(a1 === mg || this.diagram.lastInput.shift);
    };
    gg.prototype.computeMinSize = function() {
        var a1 = this.adornedObject.minSize.copy(), b = this.minSize;
        !isNaN(b.width) && b.width > a1.width && (a1.width = b.width);
        !isNaN(b.height) && b.height > a1.height && (a1.height = b.height);
        return a1;
    };
    gg.prototype.computeMaxSize = function() {
        var a1 = this.adornedObject.maxSize.copy(), b = this.maxSize;
        !isNaN(b.width) && b.width < a1.width && (a1.width = b.width);
        !isNaN(b.height) && b.height < a1.height && (a1.height = b.height);
        return a1;
    };
    gg.prototype.computeCellSize = function() {
        var a1 = new L(NaN, NaN), b = this.adornedObject.part;
        null !== b && (b = b.resizeCellSize, !isNaN(b.width) && 0 < b.width && (a1.width = b.width), !isNaN(b.height) && 0 < b.height && (a1.height = b.height));
        b = this.cellSize;
        isNaN(a1.width) && !isNaN(b.width) && 0 < b.width && (a1.width = b.width);
        isNaN(a1.height) && !isNaN(b.height) && 0 < b.height && (a1.height = b.height);
        b = this.diagram;
        (isNaN(a1.width) || isNaN(a1.height)) && b && (b = b.grid, null !== b && b.visible && this.isGridSnapEnabled && (b = b.gridCellSize, isNaN(a1.width) && !isNaN(b.width) && 0 < b.width && (a1.width = b.width), isNaN(a1.height) && !isNaN(b.height) && 0 < b.height && (a1.height = b.height)));
        if (isNaN(a1.width) || 0 === a1.width || Infinity === a1.width) a1.width = 1;
        if (isNaN(a1.height) || 0 === a1.height || Infinity === a1.height) a1.height = 1;
        return a1;
    };
    ma.Object.defineProperties(gg.prototype, {
        handleArchetype: {
            get: function() {
                return this.F;
            },
            set: function(a1) {
                this.F = a1;
            }
        },
        handle: {
            get: function() {
                return this.u;
            },
            set: function(a1) {
                if (null !== a1 && !(a1.part instanceof te)) throw Error("new handle is not in an Adornment: " + a1);
                this.u = a1;
            }
        },
        adornedObject: {
            get: function() {
                return this.ue;
            },
            set: function(a1) {
                if (null !== a1 && a1.part instanceof te) throw Error("new handle must not be in an Adornment: " + a1);
                this.ue = a1;
            }
        },
        minSize: {
            get: function() {
                return this.o;
            },
            set: function(a1) {
                if (!this.o.D(a1)) {
                    var b = a1.width;
                    isNaN(b) && (b = 0);
                    a1 = a1.height;
                    isNaN(a1) && (a1 = 0);
                    this.o.h(b, a1);
                }
            }
        },
        maxSize: {
            get: function() {
                return this.j;
            },
            set: function(a1) {
                if (!this.j.D(a1)) {
                    var b = a1.width;
                    isNaN(b) && (b = Infinity);
                    a1 = a1.height;
                    isNaN(a1) && (a1 = Infinity);
                    this.j.h(b, a1);
                }
            }
        },
        cellSize: {
            get: function() {
                return this.yg;
            },
            set: function(a1) {
                this.yg.D(a1) || this.yg.assign(a1);
            }
        },
        isGridSnapEnabled: {
            get: function() {
                return this.V;
            },
            set: function(a1) {
                this.V = a1;
            }
        },
        dragsMembers: {
            get: function() {
                return this.ia;
            },
            set: function(a1) {
                this.ia = a1;
            }
        },
        oppositePoint: {
            get: function() {
                return this.Wq;
            },
            set: function(a1) {
                this.Wq.D(a1) || this.Wq.assign(a1);
            }
        },
        originalDesiredSize: {
            get: function() {
                return this.Dw;
            }
        },
        originalLocation: {
            get: function() {
                return this.Sn;
            }
        }
    });
    gg.className = "ResizingTool";
    Ka("resizingTool", function() {
        return this.findTool("Resizing");
    }, function(a1) {
        this.gb("Resizing", a1, this.mouseDownTools);
    });
    function ng() {
        je.call(this);
        this.name = "Rotating";
        this.ia = 45;
        this.V = 2;
        this.Sn = new J;
        this.ue = null;
        var a1 = new Bf;
        a1.figure = "Ellipse";
        a1.desiredSize = Ib;
        a1.fill = "lightblue";
        a1.stroke = "dodgerblue";
        a1.strokeWidth = 1;
        a1.cursor = "pointer";
        this.o = a1;
        this.j = null;
        this.Cw = 0;
        this.jr = new J(NaN, NaN);
        this.u = 0;
        this.F = 50;
    }
    la(ng, je);
    ng.prototype.updateAdornments = function(a1) {
        if (null !== a1) {
            if (a1.ph()) {
                var b = a1.rotateObject;
                if (b === a1 || b === a1.path || b.isPanelMain) return;
            }
            if (a1.isSelected && !this.diagram.isReadOnly && (b = a1.rotateObject, null !== b && a1.canRotate() && a1.actualBounds.w() && a1.isVisible() && b.actualBounds.w() && b.Ed())) {
                var c = a1.Oj(this.name);
                if (null === c || c.adornedObject !== b) c = this.makeAdornment(b);
                if (null !== c) {
                    c.angle = b.li();
                    null === c.placeholder && (c.location = this.computeAdornmentLocation(b));
                    a1.bh(this.name, c);
                    return;
                }
            }
            a1.Jf(this.name);
        }
    };
    ng.prototype.makeAdornment = function(a1) {
        var b = a1.part.rotateAdornmentTemplate;
        if (null === b) {
            b = new te;
            b.type = W.Position;
            b.locationSpot = wc;
            var c = this.handleArchetype;
            null !== c && b.add(c.copy());
        } else if (jg(b), b = b.copy(), null === b) return null;
        b.adornedObject = a1;
        return b;
    };
    ng.prototype.canStart = function() {
        if (!this.isEnabled) return !1;
        var a1 = this.diagram;
        return !a1.isReadOnly && a1.allowRotate && a1.lastInput.left ? null !== this.findToolHandleAt(a1.firstInput.documentPoint, this.name) : !1;
    };
    ng.prototype.doActivate = function() {
        var a1 = this.diagram;
        if (null === this.adornedObject) {
            null === this.handle && (this.handle = this.findToolHandleAt(a1.firstInput.documentPoint, this.name));
            if (null === this.handle) return;
            this.adornedObject = this.handle.part.adornedObject;
        }
        null !== this.adornedObject && (a1.isMouseCaptured = !0, a1.delaysLayout = !0, this.Ea(this.name), this.Cw = this.adornedObject.angle, this.jr = this.computeRotationPoint(this.adornedObject), this.Sn = this.adornedObject.part.location.copy(), this.isActive = !0);
    };
    ng.prototype.computeRotationPoint = function(a1) {
        var b = a1.part, c = b.locationObject;
        return b.rotationSpot.sb() ? a1.ga(b.rotationSpot) : a1 === b || a1 === c ? c.ga(b.locationSpot) : a1.ga(wc);
    };
    ng.prototype.computeAdornmentLocation = function(a1) {
        var b = this.rotationPoint;
        b.w() || (b = this.computeRotationPoint(a1));
        b = a1.ps(b);
        var c = this.handleAngle;
        0 > c ? c += 360 : 360 <= c && (c -= 360);
        c = Math.round(45 * Math.round(c / 45));
        var d = this.handleDistance;
        0 === c ? b.x = a1.naturalBounds.width + d : 45 === c ? (b.x = a1.naturalBounds.width + d, b.y = a1.naturalBounds.height + d) : 90 === c ? b.y = a1.naturalBounds.height + d : 135 === c ? (b.x = -d, b.y = a1.naturalBounds.height + d) : 180 === c ? b.x = -d : 225 === c ? (b.x = -d, b.y = -d) : 270 === c ? b.y = -d : 315 === c && (b.x = a1.naturalBounds.width + d, b.y = -d);
        return a1.ga(b);
    };
    ng.prototype.doDeactivate = function() {
        var a1 = this.diagram;
        this.stopTransaction();
        this.ue = this.handle = null;
        this.jr = new J(NaN, NaN);
        this.isActive = a1.isMouseCaptured = !1;
    };
    ng.prototype.stopTransaction = function() {
        var a1 = this.diagram, b = je.prototype.stopTransaction.call(this);
        b && null !== a1.undoManager.transactionToUndo && a1.undoManager.transactionToUndo.$j();
        return b;
    };
    ng.prototype.doCancel = function() {
        this.diagram.delaysLayout = !1;
        this.rotate(this.originalAngle);
        this.stopTool();
    };
    ng.prototype.doMouseMove = function() {
        var a1 = this.diagram;
        this.isActive && (a1 = this.computeRotate(a1.lastInput.documentPoint), this.rotate(a1));
    };
    ng.prototype.doMouseUp = function() {
        var a1 = this.diagram;
        if (this.isActive) {
            a1.delaysLayout = !1;
            var b = this.computeRotate(a1.lastInput.documentPoint);
            this.rotate(b);
            a1.Ya();
            this.transactionResult = this.name;
            a1.R("PartRotated", this.adornedObject, this.originalAngle);
        }
        this.stopTool();
    };
    ng.prototype.rotate = function(a1) {
        var b = this.adornedObject;
        if (null !== b) {
            b.angle = a1;
            b = b.part;
            b.Va();
            var c = b.locationObject, d = b.rotateObject;
            if (c === d || c.rg(d)) c = this.Sn.copy(), b.location = c.re(this.rotationPoint).rotate(a1 - this.originalAngle).add(this.rotationPoint);
            this.diagram.bd();
        }
    };
    ng.prototype.computeRotate = function(a1) {
        a1 = this.rotationPoint.ab(a1) - this.handleAngle;
        var b = this.adornedObject.panel;
        null !== b && (a1 -= b.li());
        360 <= a1 ? a1 -= 360 : 0 > a1 && (a1 += 360);
        b = Math.min(Math.abs(this.snapAngleMultiple), 180);
        var c = Math.min(Math.abs(this.snapAngleEpsilon), b / 2);
        !this.diagram.lastInput.shift && 0 < b && 0 < c && (a1 % b < c ? a1 = Math.floor(a1 / b) * b : a1 % b > b - c && (a1 = (Math.floor(a1 / b) + 1) * b));
        360 <= a1 ? a1 -= 360 : 0 > a1 && (a1 += 360);
        return a1;
    };
    ma.Object.defineProperties(ng.prototype, {
        handleArchetype: {
            get: function() {
                return this.o;
            },
            set: function(a1) {
                this.o = a1;
            }
        },
        handle: {
            get: function() {
                return this.j;
            },
            set: function(a1) {
                if (null !== a1 && !(a1.part instanceof te)) throw Error("new handle is not in an Adornment: " + a1);
                this.j = a1;
            }
        },
        adornedObject: {
            get: function() {
                return this.ue;
            },
            set: function(a1) {
                if (null !== a1 && a1.part instanceof te) throw Error("new handle must not be in an Adornment: " + a1);
                this.ue = a1;
            }
        },
        snapAngleMultiple: {
            get: function() {
                return this.ia;
            },
            set: function(a1) {
                this.ia = a1;
            }
        },
        snapAngleEpsilon: {
            get: function() {
                return this.V;
            },
            set: function(a1) {
                this.V = a1;
            }
        },
        originalAngle: {
            get: function() {
                return this.Cw;
            }
        },
        rotationPoint: {
            get: function() {
                return this.jr;
            },
            set: function(a1) {
                this.jr = a1.copy();
            }
        },
        handleAngle: {
            get: function() {
                return this.u;
            },
            set: function(a1) {
                this.u = a1;
            }
        },
        handleDistance: {
            get: function() {
                return this.F;
            },
            set: function(a1) {
                this.F = a1;
            }
        }
    });
    ng.className = "RotatingTool";
    Ka("rotatingTool", function() {
        return this.findTool("Rotating");
    }, function(a1) {
        this.gb("Rotating", a1, this.mouseDownTools);
    });
    function og() {
        je.call(this);
        this.name = "ClickSelecting";
    }
    la(og, je);
    og.prototype.canStart = function() {
        return !this.isEnabled || this.isBeyondDragSize() ? !1 : !0;
    };
    og.prototype.doMouseUp = function() {
        this.isActive && (this.standardMouseSelect(), !this.standardMouseClick() && this.diagram.lastInput.isTouchEvent && this.diagram.toolManager.doToolTip());
        this.stopTool();
    };
    og.className = "ClickSelectingTool";
    function pg() {
        je.call(this);
        this.name = "Action";
        this.nk = null;
    }
    la(pg, je);
    pg.prototype.canStart = function() {
        if (!this.isEnabled) return !1;
        var a1 = this.diagram, b = a1.lastInput, c = a1.jc(b.documentPoint, function(a1) {
            for(; null !== a1.panel && !a1.isActionable;)a1 = a1.panel;
            return a1;
        });
        if (null !== c) {
            if (!c.isActionable) return !1;
            this.nk = c;
            a1.Bk = a1.jc(b.documentPoint, null, null);
            return !0;
        }
        return !1;
    };
    pg.prototype.doMouseDown = function() {
        if (this.isActive) {
            var a1 = this.diagram.lastInput, b = this.nk;
            null !== b && (a1.targetObject = b, null !== b.actionDown && b.actionDown(a1, b));
        } else this.canStart() && this.doActivate();
    };
    pg.prototype.doMouseMove = function() {
        if (this.isActive) {
            var a1 = this.diagram.lastInput, b = this.nk;
            null !== b && (a1.targetObject = b, null !== b.actionMove && b.actionMove(a1, b));
        }
    };
    pg.prototype.doMouseUp = function() {
        if (this.isActive) {
            var a1 = this.diagram.lastInput, b = this.nk;
            if (null === b) return;
            a1.targetObject = b;
            null !== b.actionUp && b.actionUp(a1, b);
            this.standardMouseClick(function(a1) {
                for(; null !== a1.panel && (!a1.isActionable || a1 !== b);)a1 = a1.panel;
                return a1;
            }, function(a1) {
                return a1 === b;
            });
        }
        this.stopTool();
    };
    pg.prototype.doCancel = function() {
        var a1 = this.diagram.lastInput, b = this.nk;
        null !== b && (a1.targetObject = b, null !== b.actionCancel && b.actionCancel(a1, b), this.stopTool());
    };
    pg.prototype.doStop = function() {
        this.nk = null;
    };
    pg.className = "ActionTool";
    function qg() {
        je.call(this);
        this.name = "ClickCreating";
        this.Ri = null;
        this.o = !0;
        this.j = !1;
        this.mw = new J(0, 0);
    }
    la(qg, je);
    qg.prototype.canStart = function() {
        if (!this.isEnabled || null === this.archetypeNodeData) return !1;
        var a1 = this.diagram;
        if (a1.isReadOnly || a1.isModelReadOnly || !a1.allowInsert || !a1.lastInput.left || this.isBeyondDragSize()) return !1;
        if (this.isDoubleClick) {
            if (1 === a1.lastInput.clickCount && (this.mw = a1.lastInput.viewPoint.copy()), 2 !== a1.lastInput.clickCount || this.isBeyondDragSize(this.mw)) return !1;
        } else if (1 !== a1.lastInput.clickCount) return !1;
        return a1.currentTool !== this && null !== a1.Nl(a1.lastInput.documentPoint, !0) ? !1 : !0;
    };
    qg.prototype.doMouseUp = function() {
        var a1 = this.diagram;
        this.isActive && this.insertPart(a1.lastInput.documentPoint);
        this.stopTool();
    };
    qg.prototype.insertPart = function(a1) {
        var b = this.diagram, c = this.archetypeNodeData;
        if (null === c) return null;
        var d = null;
        try {
            b.R("ChangingSelection", b.selection);
            this.Ea(this.name);
            if (c instanceof U) c.Zc() && (jg(c), d = c.copy(), null !== d && b.add(d));
            else if (null !== c) {
                var e = b.model.copyNodeData(c);
                za(e) && (b.model.xf(e), d = b.Lc(e));
            }
            if (null !== d) {
                var f = J.allocAt(a1.x, a1.y);
                this.isGridSnapEnabled && zg(this.diagram, d, a1, f);
                d.location = f;
                b.allowSelect && (b.clearSelection(!0), d.isSelected = !0);
                J.free(f);
            }
            b.Ya();
            this.transactionResult = this.name;
            b.R("PartCreated", d);
        } finally{
            this.stopTransaction(), b.R("ChangedSelection", b.selection);
        }
        return d;
    };
    ma.Object.defineProperties(qg.prototype, {
        archetypeNodeData: {
            get: function() {
                return this.Ri;
            },
            set: function(a1) {
                this.Ri = a1;
            }
        },
        isDoubleClick: {
            get: function() {
                return this.o;
            },
            set: function(a1) {
                this.o = a1;
            }
        },
        isGridSnapEnabled: {
            get: function() {
                return this.j;
            },
            set: function(a1) {
                this.j = a1;
            }
        }
    });
    qg.className = "ClickCreatingTool";
    function Ag() {
        je.call(this);
        this.name = "DragSelecting";
        this.Hk = 175;
        this.o = !1;
        var a1 = new U;
        a1.layerName = "Tool";
        a1.selectable = !1;
        var b = new Bf;
        b.name = "SHAPE";
        b.figure = "Rectangle";
        b.fill = null;
        b.stroke = "magenta";
        a1.add(b);
        this.j = a1;
    }
    la(Ag, je);
    Ag.prototype.canStart = function() {
        if (!this.isEnabled) return !1;
        var a1 = this.diagram;
        if (!a1.allowSelect) return !1;
        var b = a1.lastInput;
        return !b.left || a1.currentTool !== this && (!this.isBeyondDragSize() || b.timestamp - a1.firstInput.timestamp < this.delay || null !== a1.Nl(b.documentPoint, !0)) ? !1 : !0;
    };
    Ag.prototype.doActivate = function() {
        var a1 = this.diagram;
        this.isActive = !0;
        a1.isMouseCaptured = !0;
        a1.skipsUndoManager = !0;
        a1.add(this.box);
        this.doMouseMove();
    };
    Ag.prototype.doDeactivate = function() {
        var a1 = this.diagram;
        a1.ug();
        a1.remove(this.box);
        a1.skipsUndoManager = !1;
        this.isActive = a1.isMouseCaptured = !1;
    };
    Ag.prototype.doMouseMove = function() {
        var a1 = this.diagram;
        if (this.isActive && null !== this.box) {
            var b = this.computeBoxBounds(), c = this.box.fb("SHAPE");
            null === c && (c = this.box.Qb());
            var d = L.alloc().h(b.width, b.height);
            c.desiredSize = d;
            this.box.lm(b.x, b.y, !1);
            L.free(d);
            (a1.allowHorizontalScroll || a1.allowVerticalScroll) && a1.fs(a1.lastInput.viewPoint);
        }
    };
    Ag.prototype.doMouseUp = function() {
        if (this.isActive) {
            var a1 = this.diagram;
            a1.remove(this.box);
            try {
                a1.currentCursor = "wait", a1.R("ChangingSelection", a1.selection), this.selectInRect(this.computeBoxBounds()), a1.R("ChangedSelection", a1.selection);
            } finally{
                a1.currentCursor = "";
            }
        }
        this.stopTool();
    };
    Ag.prototype.computeBoxBounds = function() {
        var a1 = this.diagram;
        return new N(a1.firstInput.documentPoint, a1.lastInput.documentPoint);
    };
    Ag.prototype.selectInRect = function(a1) {
        var b = this.diagram, c = b.lastInput;
        a1 = b.ux(a1, this.isPartialInclusion);
        if (Oa ? c.meta : c.control) {
            if (c.shift) for(a1 = a1.iterator; a1.next();)b = a1.value, b.isSelected && (b.isSelected = !1);
            else for(a1 = a1.iterator; a1.next();)b = a1.value, b.isSelected = !b.isSelected;
        } else if (c.shift) for(a1 = a1.iterator; a1.next();)b = a1.value, b.isSelected || (b.isSelected = !0);
        else {
            c = new F;
            for(b = b.selection.iterator; b.next();){
                var d = b.value;
                a1.contains(d) || c.add(d);
            }
            for(b = c.iterator; b.next();)b.value.isSelected = !1;
            for(a1 = a1.iterator; a1.next();)b = a1.value, b.isSelected || (b.isSelected = !0);
        }
    };
    ma.Object.defineProperties(Ag.prototype, {
        delay: {
            get: function() {
                return this.Hk;
            },
            set: function(a1) {
                this.Hk = a1;
            }
        },
        isPartialInclusion: {
            get: function() {
                return this.o;
            },
            set: function(a1) {
                this.o = a1;
            }
        },
        box: {
            get: function() {
                return this.j;
            },
            set: function(a1) {
                this.j = a1;
            }
        }
    });
    Ag.className = "DragSelectingTool";
    function Bg() {
        je.call(this);
        this.name = "Panning";
        this.Wt = new J;
        this.xy = new J;
        this.xg = !1;
        var a1 = this;
        this.Kw = function() {
            var b = a1.diagram;
            null !== b && b.removeEventListener(x.document, "scroll", a1.Kw, !1);
            a1.stopTool();
        };
    }
    la(Bg, je);
    Bg.prototype.canStart = function() {
        if (!this.isEnabled) return !1;
        var a1 = this.diagram;
        return !a1.allowHorizontalScroll && !a1.allowVerticalScroll || !a1.lastInput.left || a1.currentTool !== this && !this.isBeyondDragSize() ? !1 : !0;
    };
    Bg.prototype.doActivate = function() {
        var a1 = this.diagram;
        this.xg ? (a1.lastInput.bubbles = !0, a1.addEventListener(x.document, "scroll", this.Kw, !1)) : (a1.currentCursor = "move", a1.isMouseCaptured = !0, this.Wt.assign(a1.position));
        this.isActive = !0;
    };
    Bg.prototype.doDeactivate = function() {
        var a1 = this.diagram;
        a1.currentCursor = "";
        this.isActive = a1.isMouseCaptured = !1;
    };
    Bg.prototype.doCancel = function() {
        var a1 = this.diagram;
        a1.position = this.Wt;
        a1.isMouseCaptured = !1;
        this.stopTool();
    };
    Bg.prototype.doMouseMove = function() {
        this.move();
    };
    Bg.prototype.doMouseUp = function() {
        this.move();
        this.stopTool();
    };
    Bg.prototype.move = function() {
        var a1 = this.diagram;
        if (this.isActive && a1) {
            if (this.xg) a1.lastInput.bubbles = !0;
            else {
                var b = a1.position, c = a1.firstInput.documentPoint, d = a1.lastInput.documentPoint, e = b.x + c.x - d.x;
                c = b.y + c.y - d.y;
                a1.allowHorizontalScroll || (e = b.x);
                a1.allowVerticalScroll || (c = b.y);
                a1.position = this.xy.h(e, c);
            }
        }
    };
    ma.Object.defineProperties(Bg.prototype, {
        bubbles: {
            get: function() {
                return this.xg;
            },
            set: function(a1) {
                this.xg = a1;
            }
        },
        originalPosition: {
            get: function() {
                return this.Wt;
            }
        }
    });
    Bg.className = "PanningTool";
    Ka("clickCreatingTool", function() {
        return this.findTool("ClickCreating");
    }, function(a1) {
        this.gb("ClickCreating", a1, this.mouseUpTools);
    });
    Ka("clickSelectingTool", function() {
        return this.findTool("ClickSelecting");
    }, function(a1) {
        this.gb("ClickSelecting", a1, this.mouseUpTools);
    });
    Ka("panningTool", function() {
        return this.findTool("Panning");
    }, function(a1) {
        this.gb("Panning", a1, this.mouseMoveTools);
    });
    Ka("dragSelectingTool", function() {
        return this.findTool("DragSelecting");
    }, function(a1) {
        this.gb("DragSelecting", a1, this.mouseMoveTools);
    });
    Ka("actionTool", function() {
        return this.findTool("Action");
    }, function(a1) {
        this.gb("Action", a1, this.mouseDownTools);
    });
    function ye() {
        this.F = this.u = this.j = this.o = null;
    }
    ma.Object.defineProperties(ye.prototype, {
        mainElement: {
            get: function() {
                return this.u;
            },
            set: function(a1) {
                this.u = a1;
            }
        },
        show: {
            get: function() {
                return this.o;
            },
            set: function(a1) {
                this.o !== a1 && (this.o = a1);
            }
        },
        hide: {
            get: function() {
                return this.j;
            },
            set: function(a1) {
                this.j !== a1 && (this.j = a1);
            }
        },
        valueFunction: {
            get: function() {
                return this.F;
            },
            set: function(a1) {
                this.F = a1;
            }
        }
    });
    ye.className = "HTMLInfo";
    function Cg(a1, b, c) {
        this.text = a1;
        this.hx = b;
        this.visible = c;
    }
    Cg.className = "ContextMenuButtonInfo";
    function Dg() {
        je.call(this);
        this.name = "ContextMenu";
        this.o = this.gt = this.j = null;
        this.yw = new J;
        this.it = null;
        this.Dt = !1;
        var a1 = this;
        this.su = function() {
            a1.stopTool();
        };
    }
    la(Dg, je);
    function Eg(a1) {
        var b = new ye;
        b.show = function(a1, b, c) {
            c.showDefaultContextMenu();
        };
        b.hide = function(a1, b) {
            b.hideDefaultContextMenu();
        };
        Fg = b;
        a1.su = function() {
            a1.stopTool();
        };
        b = ua("div");
        var c = ua("div");
        b.style.cssText = "top: 0px;z-index:10002;position: fixed;display: none;text-align: center;left: 25%;width: 50%;background-color: #F5F5F5;padding: 16px;border: 16px solid #444;border-radius: 10px;margin-top: 10px";
        c.style.cssText = "z-index:10001;position: fixed;display: none;top: 0;left: 0;width: 100%;height: 100%;background-color: black;opacity: 0.8;";
        var d = ua("style");
        x.document.getElementsByTagName("head")[0].appendChild(d);
        d.sheet.insertRule(".goCXul { list-style: none; }", 0);
        d.sheet.insertRule(".goCXli {font:700 1.5em Helvetica, Arial, sans-serif;position: relative;min-width: 60px; }", 0);
        d.sheet.insertRule(".goCXa {color: #444;display: inline-block;padding: 4px;text-decoration: none;margin: 2px;border: 1px solid gray;border-radius: 10px; }", 0);
        d = a1.diagram;
        null !== d && (d.addEventListener(b, "contextmenu", Gg, !1), d.addEventListener(b, "selectstart", Gg, !1), d.addEventListener(c, "contextmenu", Gg, !1));
        b.className = "goCXforeground";
        c.className = "goCXbackground";
        x.document.body && (x.document.body.appendChild(b), x.document.body.appendChild(c));
        Hg = b;
        Ig = c;
        Jg = !0;
    }
    function Gg(a1) {
        a1.preventDefault();
        return !1;
    }
    Dg.prototype.canStart = function() {
        if (!this.isEnabled) return !1;
        var a1 = this.diagram;
        return this.isBeyondDragSize() || !a1.lastInput.right || 1 < a1.lastInput.clickCount ? !1 : a1.lastInput.isTouchEvent && null !== this.defaultTouchContextMenu || null !== this.findObjectWithContextMenu() ? !0 : !1;
    };
    Dg.prototype.doStart = function() {
        this.yw.set(this.diagram.firstInput.documentPoint);
    };
    Dg.prototype.doStop = function() {
        this.hideContextMenu();
        this.currentObject = null;
    };
    Dg.prototype.findObjectWithContextMenu = function(a1) {
        void 0 === a1 && (a1 = null);
        var b = this.diagram, c = b.lastInput, d = null;
        a1 instanceof Q || (a1 instanceof Y ? d = a1 : d = b.jc(c.documentPoint, null, function(a1) {
            return !a1.layer.isTemporary;
        }));
        if (null !== d) {
            for(a1 = d; null !== a1;){
                if (null !== a1.contextMenu) return a1;
                a1 = a1.panel;
            }
            if (b.lastInput.isTouchEvent && this.defaultTouchContextMenu) return d.part;
        } else if (null !== b.contextMenu) return b;
        return null;
    };
    Dg.prototype.doActivate = function() {};
    Dg.prototype.doMouseDown = function() {
        je.prototype.doMouseDown.call(this);
        if (this.isActive && this.currentContextMenu instanceof te) {
            var a1 = this.diagram.toolManager.findTool("Action");
            null !== a1 && a1.canStart() && (a1.doActivate(), a1.doMouseDown(), a1.doDeactivate());
        }
        this.diagram.toolManager.mouseDownTools.contains(this) && Kg(this);
    };
    Dg.prototype.doMouseUp = function() {
        if (this.isActive && this.currentContextMenu instanceof te) {
            var a1 = this.diagram.toolManager.findTool("Action");
            null !== a1 && a1.canStart() && (a1.doActivate(), a1.doCancel(), a1.doDeactivate());
        }
        Kg(this);
    };
    function Kg(a1) {
        var b = a1.diagram;
        if (a1.isActive) {
            var c = a1.currentContextMenu;
            if (null !== c) {
                var d = null;
                c instanceof ye || (d = b.jc(b.lastInput.documentPoint, null, null), null !== d && d.rg(c) && a1.standardMouseClick(null, null));
                a1.maybeStopTool(d);
            }
        } else a1.canStart() && (Lg(a1, !0), a1.isActive || a1.stopTool());
    }
    Dg.prototype.maybeStopTool = function() {
        this.stopTool();
        this.canStart() && (this.diagram.currentTool = this, this.doMouseUp());
    };
    function Lg(a1, b, c) {
        void 0 === c && (c = null);
        if (!a1.Dt && (a1.Dt = !0, b && a1.standardMouseSelect(), b = a1.standardMouseClick(), a1.Dt = !1, !b)) {
            a1.isActive = !0;
            b = Fg;
            null === c && (c = a1.findObjectWithContextMenu());
            if (null !== c) {
                var d = c.contextMenu;
                null !== d ? (a1.currentObject = c instanceof Y ? c : null, a1.showContextMenu(d, a1.currentObject)) : null !== b && a1.showContextMenu(b, a1.currentObject);
            } else null !== b && a1.showContextMenu(b, null);
            a1.currentContextMenu instanceof te && !a1.currentContextMenu.visible && a1.stopTool();
        }
    }
    Dg.prototype.doMouseMove = function() {
        var a1 = this.diagram.toolManager.findTool("Action");
        null !== a1 && a1.doMouseMove();
        this.isActive && this.diagram.toolManager.doMouseMove();
    };
    Dg.prototype.showContextMenu = function(a1, b) {
        var c = this.diagram;
        a1 !== this.currentContextMenu && this.hideContextMenu();
        if (a1 instanceof te) {
            a1.layerName = "Tool";
            a1.selectable = !1;
            a1.scale = 1 / c.scale;
            a1.category = this.name;
            null !== a1.placeholder && (a1.placeholder.scale = c.scale);
            var d = a1.diagram;
            null !== d && d !== c && d.remove(a1);
            c.add(a1);
            null !== b ? a1.adornedObject = b : a1.data = c.model;
            a1.Va();
            this.positionContextMenu(a1, b);
        } else a1 instanceof ye && a1.show(b, c, this);
        this.currentContextMenu = a1;
    };
    Dg.prototype.positionContextMenu = function(a1) {
        if (null === a1.placeholder) {
            var b = this.diagram, c = b.lastInput.documentPoint.copy(), d = a1.measuredBounds, e = b.viewportBounds;
            b.lastInput.isTouchEvent && (c.x -= d.width);
            c.x + d.width > e.right && (c.x -= d.width + 5 / b.scale);
            c.x < e.x && (c.x = e.x);
            c.y + d.height > e.bottom && (c.y -= d.height + 5 / b.scale);
            c.y < e.y && (c.y = e.y);
            a1.position = c;
        }
    };
    Dg.prototype.hideContextMenu = function() {
        var a1 = this.diagram, b = this.currentContextMenu;
        null !== b && (b instanceof te ? (a1.remove(b), null !== this.gt && this.gt.Jf(b.category), b.data = null, b.adornedObject = null) : b instanceof ye && (null !== b.hide ? b.hide(a1, this) : null !== b.mainElement && (b.mainElement.style.display = "none")), this.currentContextMenu = null, this.standardMouseOver());
    };
    function Mg(a1) {
        var b = new F;
        b.add(new Cg("Copy", function(a1) {
            a1.commandHandler.copySelection();
        }, function(a1) {
            return a1.commandHandler.canCopySelection();
        }));
        b.add(new Cg("Cut", function(a1) {
            a1.commandHandler.cutSelection();
        }, function(a1) {
            return a1.commandHandler.canCutSelection();
        }));
        b.add(new Cg("Delete", function(a1) {
            a1.commandHandler.deleteSelection();
        }, function(a1) {
            return a1.commandHandler.canDeleteSelection();
        }));
        b.add(new Cg("Paste", function(b) {
            b.commandHandler.pasteSelection(a1.mouseDownPoint);
        }, function(b) {
            return b.commandHandler.canPasteSelection(a1.mouseDownPoint);
        }));
        b.add(new Cg("Select All", function(a1) {
            a1.commandHandler.selectAll();
        }, function(a1) {
            return a1.commandHandler.canSelectAll();
        }));
        b.add(new Cg("Undo", function(a1) {
            a1.commandHandler.undo();
        }, function(a1) {
            return a1.commandHandler.canUndo();
        }));
        b.add(new Cg("Redo", function(a1) {
            a1.commandHandler.redo();
        }, function(a1) {
            return a1.commandHandler.canRedo();
        }));
        b.add(new Cg("Scroll To Part", function(a1) {
            a1.commandHandler.scrollToPart();
        }, function(a1) {
            return a1.commandHandler.canScrollToPart();
        }));
        b.add(new Cg("Zoom To Fit", function(a1) {
            a1.commandHandler.zoomToFit();
        }, function(a1) {
            return a1.commandHandler.canZoomToFit();
        }));
        b.add(new Cg("Reset Zoom", function(a1) {
            a1.commandHandler.resetZoom();
        }, function(a1) {
            return a1.commandHandler.canResetZoom();
        }));
        b.add(new Cg("Group Selection", function(a1) {
            a1.commandHandler.groupSelection();
        }, function(a1) {
            return a1.commandHandler.canGroupSelection();
        }));
        b.add(new Cg("Ungroup Selection", function(a1) {
            a1.commandHandler.ungroupSelection();
        }, function(a1) {
            return a1.commandHandler.canUngroupSelection();
        }));
        b.add(new Cg("Edit Text", function(a1) {
            a1.commandHandler.editTextBlock();
        }, function(a1) {
            return a1.commandHandler.canEditTextBlock();
        }));
        return b;
    }
    Dg.prototype.showDefaultContextMenu = function() {
        var a1 = this.diagram;
        null === this.it && (this.it = Mg(this));
        Hg.innerHTML = "";
        Ig.addEventListener("pointerdown", this.su, !1);
        var b = this, c = ua("ul");
        c.className = "goCXul";
        Hg.appendChild(c);
        c.innerHTML = "";
        for(var d = this.it.iterator; d.next();){
            var e = d.value, f = e.visible;
            if ("function" === typeof e.hx && ("function" !== typeof f || f(a1))) {
                f = ua("li");
                f.className = "goCXli";
                var g = ua("a");
                g.className = "goCXa";
                g.href = "#";
                g.ky = e.hx;
                g.addEventListener("pointerdown", function(c) {
                    this.ky(a1);
                    b.stopTool();
                    c.preventDefault();
                    return !1;
                }, !1);
                g.textContent = e.text;
                f.appendChild(g);
                c.appendChild(f);
            }
        }
        Hg.style.display = "block";
        Ig.style.display = "block";
    };
    Dg.prototype.hideDefaultContextMenu = function() {
        if (null !== this.currentContextMenu && this.currentContextMenu === Fg) {
            Hg.style.display = "none";
            Ig.style.display = "none";
            var a1 = this.diagram;
            null !== a1 && a1.removeEventListener(Ig, "pointerdown", this.su, !1);
            this.currentContextMenu = null;
        }
    };
    ma.Object.defineProperties(Dg.prototype, {
        currentContextMenu: {
            get: function() {
                return this.j;
            },
            set: function(a1) {
                this.j = a1;
                this.gt = a1 instanceof te ? a1.adornedPart : null;
            }
        },
        defaultTouchContextMenu: {
            get: function() {
                !1 === Jg && null === Fg && Ng && Eg(this);
                return Fg;
            },
            set: function(a1) {
                null === a1 && (Jg = !0);
                Fg = a1;
            }
        },
        currentObject: {
            get: function() {
                return this.o;
            },
            set: function(a1) {
                this.o = a1;
            }
        },
        mouseDownPoint: {
            get: function() {
                return this.yw;
            }
        }
    });
    var Fg = null, Jg = !1, Ig = null, Hg = null;
    Dg.className = "ContextMenuTool";
    Ka("contextMenuTool", function() {
        return this.findTool("ContextMenu");
    }, function(a1) {
        this.gb("ContextMenu", a1, this.mouseUpTools);
    });
    function Og() {
        je.call(this);
        this.name = "TextEditing";
        this.Zh = new Pg;
        this.ia = null;
        this.V = Qg;
        this.vj = null;
        this.qa = Rg;
        this.u = 1;
        this.F = !0;
        this.o = null;
        this.j = new ye;
        this.jt = null;
        Sg(this, this.j);
    }
    la(Og, je);
    function Sg(a1, b) {
        if (Ng) {
            var c = ua("textarea");
            a1.jt = c;
            c.addEventListener("input", function() {
                if (null !== a1.textBlock) {
                    var b = a1.Lx(this.value);
                    this.style.width = 20 + b.measuredBounds.width * this.wA + "px";
                    this.rows = b.lineCount;
                }
            }, !1);
            c.addEventListener("keydown", function(b) {
                if (!b.isComposing && null !== a1.textBlock) {
                    var c = b.key;
                    "Enter" === c ? (!1 === a1.textBlock.isMultiline && b.preventDefault(), a1.acceptText(Tg)) : "Tab" === c ? (a1.acceptText(Ug), b.preventDefault()) : "Escape" === c && (a1.doCancel(), null !== a1.diagram && a1.diagram.doFocus());
                }
            }, !1);
            c.addEventListener("focus", function() {
                if (null !== a1.currentTextEditor && a1.state !== Rg) {
                    var b = a1.jt;
                    a1.qa === Vg && (a1.qa = Wg);
                    "function" === typeof b.select && a1.selectsTextOnActivate && (b.select(), b.setSelectionRange(0, 9999));
                }
            }, !1);
            c.addEventListener("blur", function() {
                if (null !== a1.currentTextEditor && a1.state !== Rg) {
                    var b = a1.jt;
                    "function" === typeof b.focus && b.focus();
                    "function" === typeof b.select && a1.selectsTextOnActivate && (b.select(), b.setSelectionRange(0, 9999));
                }
            }, !1);
            b.valueFunction = function() {
                return c.value;
            };
            b.mainElement = c;
            b.show = function(a1, b, f) {
                if (a1 instanceof Pg && f instanceof Og) {
                    if (f.state === Xg) c.style.border = "3px solid red", c.focus();
                    else {
                        var d = a1.ga(wc), e = b.position, k = b.scale, l = a1.Df() * k;
                        l < f.minimumEditorScale && (l = f.minimumEditorScale);
                        var m = a1.naturalBounds.width * l + 6, n = a1.naturalBounds.height * l + 2, p = (d.x - e.x) * k;
                        d = (d.y - e.y) * k;
                        e = a1.verticalAlignment;
                        k = (a1.lineHeight + a1.spacingAbove + a1.spacingBelow) * a1.lineCount * l;
                        n = e.y * n - e.y * k + e.offsetY - (.5 * n - .5 * k) - k / 2;
                        c.value = a1.text;
                        b.div.style.font = a1.font;
                        c.style.position = "absolute";
                        c.style.zIndex = "100";
                        c.style.font = "inherit";
                        c.style.fontSize = 100 * l + "%";
                        c.style.lineHeight = "normal";
                        c.style.width = m + "px";
                        c.style.left = (p - m / 2 | 0) - 1 + "px";
                        c.style.top = (d + n | 0) - 1 + "px";
                        c.style.textAlign = a1.textAlign;
                        c.style.margin = "0";
                        c.style.padding = "1px";
                        c.style.border = "0";
                        c.style.outline = "none";
                        c.style.whiteSpace = "pre-wrap";
                        c.style.overflow = "hidden";
                        c.rows = a1.lineCount;
                        c.wA = l;
                        c.className = "goTXarea";
                        b.div.appendChild(c);
                        c.focus();
                        f.selectsTextOnActivate && (c.select(), c.setSelectionRange(0, 9999));
                    }
                }
            };
            b.hide = function(a1) {
                a1.div.removeChild(c);
            };
        }
    }
    Og.prototype.canStart = function() {
        if (!this.isEnabled) return !1;
        var a1 = this.diagram;
        if (null === a1 || a1.isReadOnly || Yg && Yg !== this && (Yg.acceptText(Zg), Yg && Yg !== this) || !a1.lastInput.left || this.isBeyondDragSize()) return !1;
        var b = a1.jc(a1.lastInput.documentPoint);
        if (!(null !== b && b instanceof Pg && b.editable && b.part.canEdit())) return !1;
        b = b.part;
        return null === b || this.starting === Qg && !b.isSelected || this.starting === $g && 2 > a1.lastInput.clickCount ? !1 : !0;
    };
    Og.prototype.doStart = function() {
        Yg = this;
        null !== this.textBlock && this.doActivate();
    };
    Og.prototype.doActivate = function() {
        if (!this.isActive) {
            var a1 = this.diagram;
            if (null !== a1) {
                var b = this.textBlock;
                null === b && (b = a1.jc(a1.lastInput.documentPoint));
                if (null !== b && b instanceof Pg && (this.textBlock = b, null !== b.part)) {
                    a1.animationManager.Cc();
                    this.isActive = !0;
                    this.qa = Vg;
                    var c = this.defaultTextEditor;
                    null !== b.textEditor && (c = b.textEditor);
                    this.Zh = this.textBlock.copy();
                    var d = new N(this.textBlock.ga(sc), this.textBlock.ga(Bc));
                    a1.tv(d);
                    c.show(b, a1, this);
                    this.currentTextEditor = c;
                }
            }
        }
    };
    Og.prototype.doCancel = function() {
        this.stopTool();
    };
    Og.prototype.doMouseUp = function() {
        this.canStart() && this.doActivate();
    };
    Og.prototype.doMouseDown = function() {
        this.isActive && this.acceptText(Zg);
    };
    Og.prototype.acceptText = function(a1) {
        switch(a1){
            case Zg:
                if (this.qa === ah) this.currentTextEditor instanceof HTMLElement && this.currentTextEditor.focus();
                else if (this.qa === Vg || this.qa === Xg || this.qa === Wg) this.qa = bh, ch(this);
                break;
            case dh:
            case Tg:
            case Ug:
                if (Tg !== a1 || !0 !== this.textBlock.isMultiline) {
                    if (this.qa === Vg || this.qa === Xg || this.qa === Wg) this.qa = bh, ch(this);
                }
        }
    };
    function ch(a1) {
        var b = a1.textBlock, c = a1.diagram, d = a1.currentTextEditor;
        if (null !== b && null !== d) {
            var e = b.text, f = "";
            null !== d.valueFunction && (f = d.valueFunction());
            a1.isValidText(b, e, f) ? (a1.Ea(a1.name), a1.qa = ah, a1.transactionResult = a1.name, b.text = f, a1.doSuccess(e, f), null !== c && c.R("TextEdited", b, e), a1.stopTransaction(), a1.stopTool(), null !== c && c.doFocus()) : (a1.qa = Xg, a1.doError(e, f));
        }
    }
    Og.prototype.doError = function(a1, b) {
        var c = this.textBlock;
        null !== c.errorFunction && c.errorFunction(this, a1, b);
        (a1 = this.currentTextEditor) && a1.show(c, this.diagram, this);
    };
    Og.prototype.doSuccess = function(a1, b) {
        var c = this.textBlock;
        null !== c.textEdited && c.textEdited(c, a1, b);
    };
    Og.prototype.doDeactivate = function() {
        var a1 = this.diagram;
        null !== a1 && (this.qa = Rg, null !== this.currentTextEditor && this.currentTextEditor.hide(a1, this), this.textBlock = null, this.isActive = !1);
    };
    Og.prototype.doStop = function() {
        Yg = null;
    };
    Og.prototype.isValidText = function(a1, b, c) {
        var d = this.textValidation;
        if (null !== d && !d(a1, b, c)) return !1;
        d = a1.textValidation;
        return null === d || d(a1, b, c) ? !0 : !1;
    };
    Og.prototype.Lx = function(a1) {
        var b = this.Zh;
        b.text = a1;
        b.measure(this.textBlock.Ih, Infinity);
        return b;
    };
    ma.Object.defineProperties(Og.prototype, {
        textBlock: {
            get: function() {
                return this.ia;
            },
            set: function(a1) {
                this.ia = a1;
            }
        },
        currentTextEditor: {
            get: function() {
                return this.o;
            },
            set: function(a1) {
                this.o = a1;
            }
        },
        defaultTextEditor: {
            get: function() {
                return this.j;
            },
            set: function(a1) {
                this.j = a1;
            }
        },
        starting: {
            get: function() {
                return this.V;
            },
            set: function(a1) {
                this.V = a1;
            }
        },
        textValidation: {
            get: function() {
                return this.vj;
            },
            set: function(a1) {
                this.vj = a1;
            }
        },
        minimumEditorScale: {
            get: function() {
                return this.u;
            },
            set: function(a1) {
                this.u = a1;
            }
        },
        selectsTextOnActivate: {
            get: function() {
                return this.F;
            },
            set: function(a1) {
                this.F = a1;
            }
        },
        state: {
            get: function() {
                return this.qa;
            },
            set: function(a1) {
                this.qa !== a1 && (this.qa = a1);
            }
        }
    });
    Og.prototype.measureTemporaryTextBlock = Og.prototype.Lx;
    var dh = new E(Og, "LostFocus", 0), Zg = new E(Og, "MouseDown", 1), Ug = new E(Og, "Tab", 2), Tg = new E(Og, "Enter", 3), eh = new E(Og, "SingleClick", 0), Qg = new E(Og, "SingleClickSelected", 1), $g = new E(Og, "DoubleClick", 2), Rg = new E(Og, "StateNone", 0), Vg = new E(Og, "StateActive", 1), Wg = new E(Og, "StateEditing", 2), bh = new E(Og, "StateValidating", 3), Xg = new E(Og, "StateInvalid", 4), ah = new E(Og, "StateValidated", 5), Yg = null;
    Og.className = "TextEditingTool";
    Og.LostFocus = dh;
    Og.MouseDown = Zg;
    Og.Tab = Ug;
    Og.Enter = Tg;
    Og.SingleClick = eh;
    Og.SingleClickSelected = Qg;
    Og.DoubleClick = $g;
    Og.StateNone = Rg;
    Og.StateActive = Vg;
    Og.StateEditing = Wg;
    Og.StateValidating = bh;
    Og.StateInvalid = Xg;
    Og.StateValidated = ah;
    Ka("textEditingTool", function() {
        return this.findTool("TextEditing");
    }, function(a1) {
        this.gb("TextEditing", a1, this.mouseUpTools);
    });
    function fh(a1) {
        gh || (hh(), gh = !0);
        this.H = ke;
        this.Nk = this.Ab = this.uq = this.cc = !1;
        this.Qw = !0;
        this.Ok = ih;
        this.Cm = !1;
        this.Gh = this.Jd = !0;
        this.Dg = 600;
        this.cw = this.Ow = !1;
        this.Zd = new H;
        this.ce = new jh;
        this.ce.Yd = this;
        this.Ei = new H;
        this.ou = new H;
        this.Rr = new H;
        this.nr = new H;
        a1 && Object.assign(this, a1);
    }
    fh.prototype.Xe = function(a1) {
        this.H = a1;
    };
    fh.prototype.canStart = function() {
        return !0;
    };
    function kh(a1, b) {
        a1.Jd && a1.canStart(b) && (a1.Zd.add(b), a1.defaultAnimation.isAnimating && a1.Cc(), lh(a1.H), a1.Ab = !0);
    }
    function mh(a1) {
        if (a1.Jd && a1.Ab) {
            var b = a1.ce, c = a1.H, d = a1.Zd.contains("Model");
            d && (a1.Nk = !0, a1.Ok === ih ? (b.isViewportUnconstrained = !0, b.vc.clear(), b.add(c, "position", c.position.copy().offset(0, -200), c.position), b.add(c, "opacity", 0, 1)) : a1.Ok === nh && b.vc.clear(), a1.Qw = a1.Ok === oh && c.cu.D(c.pa) ? !0 : !1, c.R("InitialAnimationStarting", a1));
            d && !a1.Gh || 0 === b.vc.count ? (a1.Zd.clear(), a1.Ab = !1, b.vc.clear(), ph(b, c), a1.Nk = !1, c.N()) : (a1.Zd.clear(), c.kg = !1, d = b.vc.get(c), c.autoScale !== qh && null !== d && (delete d.start.scale, delete d.end.scale), x.requestAnimationFrame(function() {
                !1 === a1.Ab || b.cc || (c.Gf("temporaryPixelRatio") && Fe(c), rh(c), a1.Ab = !1, b.start(), b.cc && (sh(a1), c.Ya(), th(b, 0), yf(c, !0), uh(a1), c.R("AnimationStarting", a1)));
            }));
        }
    }
    function vh(a1) {
        return a1.Zd.contains("Trigger") && 1 === a1.Zd.count;
    }
    function wh(a1, b, c, d) {
        a1.isTicking || vh(a1) || b instanceof T && (null !== b.fromNode || null !== b.toNode) || a1.ce.add(b, "position", c, d, !1);
    }
    t = fh.prototype;
    t.fv = function(a1) {
        return this.ce.fv(a1);
    };
    t.Xu = function(a1) {
        return this.ce.Xu(a1);
    };
    function Hh(a1, b) {
        function c() {
            0 < e.Rr.count && (d.addAll(e.Rr), e.Rr.clear(), e.cc = !0);
            if (!1 !== e.cc && 0 !== d.count) {
                e.ou.addAll(d);
                for(var a1 = e.ou.iterator; a1.next();){
                    var b = a1.value;
                    if (!1 !== b.cc) {
                        a: if (0 < b.xl.count) var h = !0;
                        else {
                            for(h = b.vc.iterator; h.next();){
                                var k = h.key;
                                if (k instanceof Y && null !== k.diagram || k instanceof Q) {
                                    h = !0;
                                    break a;
                                }
                            }
                            h = !1;
                        }
                        h ? Ih(b, !1) : b.Wk = !0;
                    }
                }
                e.ou.clear();
                !1 !== e.cc && (sh(e), yf(e.H), uh(e));
                x.requestAnimationFrame(c);
            }
        }
        var d = a1.Ei, e = a1;
        a1.cc ? a1.Rr.add(b) : (a1.cc = !0, d.add(b), x.requestAnimationFrame(function() {
            c();
        }));
    }
    function Jh(a1) {
        for(a1 = a1.Ei.iterator; a1.next();)a1.value.Wk = !1;
    }
    function sh(a1) {
        if (!a1.uq) {
            var b = a1.H;
            a1.Ow = b.skipsUndoManager;
            a1.cw = b.skipsModelSourceBindings;
            b.skipsUndoManager = !0;
            b.skipsModelSourceBindings = !0;
            a1.uq = !0;
        }
    }
    function uh(a1) {
        var b = a1.H;
        b.skipsUndoManager = a1.Ow;
        b.skipsModelSourceBindings = a1.cw;
        a1.uq = !1;
    }
    t.Cc = function(a1) {
        var b = this.ce;
        !0 === this.Ab && (this.Nk = this.Ab = !1, this.Zd.clear(), 0 < b.vc.count && this.H.ac());
        if (this.cc) {
            if (b.Ll(!0), b.vc.clear(), ph(b, null), !0 === a1) for(a1 = this.Ei.Fa(), b = 0; b < a1.length; b++)a1[b].Ll(!0);
        } else b.vc.clear(), ph(b, this.H);
    };
    t.Ll = function(a1) {
        a1 === this.defaultAnimation && this.defaultAnimation.vc.clear();
        this.Ei.remove(a1);
        0 === this.Ei.count && (this.cc = !1, this.H.ac());
        a1 === this.defaultAnimation && (this.defaultAnimation.vc.clear(), this.H.R("AnimationFinished", this));
    };
    t.Cj = function(a1, b) {
        this.Ab && (this.Zd.contains("Expand Tree") || this.Zd.contains("Expand SubGraph")) && (this.ce.Cj(a1, b), Kh(this, a1));
    };
    t.Aj = function(a1, b) {
        this.Ab && (this.Zd.contains("Collapse Tree") || this.Zd.contains("Collapse SubGraph")) && (this.ce.Aj(a1, b), Lh(this.ce, b, "position", b.position, b.position), Kh(this, a1));
    };
    function Mh(a1, b, c) {
        !a1.Ab || b.D(c) || vh(a1) || (a1.H.pi || (b = c.copy()), Lh(a1.ce, a1.H, "position", b, c));
    }
    function Nh(a1, b, c) {
        b.fd && (b.Tg = c, a1.nr.add(b));
    }
    function Kh(a1, b) {
        for(b = b.findLinksConnected(); b.next();){
            var c = b.value;
            c.fd && (c.Tg = c.points.copy(), a1.nr.add(c));
        }
    }
    function Oh(a1, b, c, d, e) {
        null === a1 && (a1 = [
            0,
            0,
            0,
            0
        ]);
        null === b && (b = [
            0,
            0,
            0,
            0
        ]);
        var f = a1[0], g = a1[1], h = a1[2];
        a1 = a1[3];
        var k = b[0], l = b[1], m = b[2];
        b = b[3];
        if (0 === h || 100 === h) f = k, g = l;
        else if (0 === m || 100 === m) k = f, l = g;
        180 < Math.abs(k - f) && (k > f ? f += 360 : k += 360);
        f = e(c, f, k - f, d) % 360;
        g = e(c, g, l - g, d);
        h = e(c, h, m - h, d);
        c = e(c, a1, b - a1, d);
        return "hsla(" + f + ", " + g + "%, " + h + "%, " + c + ")";
    }
    function hh() {
        function a1(a1, b, e, f, g, h) {
            a1.position = new J(f(g, b.x, e.x - b.x, h), f(g, b.y, e.y - b.y, h));
        }
        var b = new ob;
        b.add("position:diagram", a1);
        b.add("position", a1);
        b.add("position:part", function(a1, b, e, f, g, h) {
            g < h ? a1.lm(f(g, b.x, e.x - b.x, h), f(g, b.y, e.y - b.y, h), !1) : a1.position = new J(f(g, b.x, e.x - b.x, h), f(g, b.y, e.y - b.y, h));
        });
        b.add("location", function(a1, b, e, f, g, h) {
            g < h ? a1.lm(f(g, b.x, e.x - b.x, h), f(g, b.y, e.y - b.y, h), !0) : a1.location = new J(f(g, b.x, e.x - b.x, h), f(g, b.y, e.y - b.y, h));
        });
        b.add("position:placeholder", function(a1, b, e, f, g, h) {
            g < h ? a1.lm(f(g, b.x, e.x - b.x, h), f(g, b.y, e.y - b.y, h), !1) : a1.position = new J(f(g, b.x, e.x - b.x, h), f(g, b.y, e.y - b.y, h));
        });
        b.add("position:nodeCollapse", function(a1, b, e, f, g, h) {
            var c = a1.actualBounds, d = e.actualBounds;
            e = d.x + d.width / 2 - c.width / 2;
            c = d.y + d.height / 2 - c.height / 2;
            g < h ? a1.lm(f(g, b.x, e - b.x, h), f(g, b.y, c - b.y, h), !1) : a1.position = new J(f(g, b.x, e - b.x, h), f(g, b.y, c - b.y, h));
        });
        b.add("desiredSize", function(a1, b, e, f, g, h) {
            a1.desiredSize = new N(f(g, b.width, e.width - b.width, h), f(g, b.height, e.height - b.height, h));
        });
        b.add("width", function(a1, b, e, f, g, h) {
            a1.width = f(g, b, e - b, h);
        });
        b.add("height", function(a1, b, e, f, g, h) {
            a1.height = f(g, b, e - b, h);
        });
        b.add("fill", function(a1, b, e, f, g, h) {
            a1.fill = Oh(b, e, g, h, f);
        });
        b.add("stroke", function(a1, b, e, f, g, h) {
            a1.stroke = Oh(b, e, g, h, f);
        });
        b.add("strokeWidth", function(a1, b, e, f, g, h) {
            a1.strokeWidth = f(g, b, e - b, h);
        });
        b.add("strokeDashOffset", function(a1, b, e, f, g, h) {
            a1.strokeDashOffset = f(g, b, e - b, h);
        });
        b.add("background", function(a1, b, e, f, g, h) {
            a1.background = Oh(b, e, g, h, f);
        });
        b.add("areaBackground", function(a1, b, e, f, g, h) {
            a1.areaBackground = Oh(b, e, g, h, f);
        });
        b.add("opacity", function(a1, b, e, f, g, h) {
            a1.opacity = f(g, b, e - b, h);
        });
        b.add("scale", function(a1, b, e, f, g, h) {
            a1.scale = f(g, b, e - b, h);
        });
        b.add("angle", function(a1, b, e, f, g, h) {
            a1.angle = f(g, b, e - b, h);
        });
        Ph = b;
    }
    ma.Object.defineProperties(fh.prototype, {
        animationReasons: {
            get: function() {
                return this.Zd;
            }
        },
        isEnabled: {
            get: function() {
                return this.Jd;
            },
            set: function(a1) {
                (this.Jd = a1) && this.Ei.each(function(a1) {
                    a1.isAnimating || Infinity !== a1.runCount || a1.start();
                });
            }
        },
        duration: {
            get: function() {
                return this.Dg;
            },
            set: function(a1) {
                1 > a1 && xa(a1, ">= 1", fh, "duration");
                this.Dg = a1;
            }
        },
        isAnimating: {
            get: function() {
                return this.cc;
            }
        },
        isTicking: {
            get: function() {
                return this.uq;
            }
        },
        isInitial: {
            get: function() {
                return this.Gh;
            },
            set: function(a1) {
                this.Gh = a1;
            }
        },
        defaultAnimation: {
            get: function() {
                return this.ce;
            }
        },
        activeAnimations: {
            get: function() {
                return this.Ei;
            }
        },
        initialAnimationStyle: {
            get: function() {
                return this.Ok;
            },
            set: function(a1) {
                this.Ok = a1;
            }
        }
    });
    fh.prototype.stopAnimation = fh.prototype.Cc;
    var Ph = null, gh = !1, ih = new E(fh, "Default", 1), oh = new E(fh, "AnimateLocations", 2), nh = new E(fh, "None", 3);
    fh.className = "AnimationManager";
    fh.defineAnimationEffect = function(a1, b) {
        gh || (hh(), gh = !0);
        Ph.add(a1, b);
    };
    fh.Default = ih;
    fh.AnimateLocations = oh;
    fh.None = nh;
    function jh(a1) {
        this.uu = this.Nw = this.Yd = this.H = null;
        this.Wk = this.cc = this.j = !1;
        this.bn = this.Qd = 0;
        this.Kp = this.nt = Qh;
        this.Vk = this.fo = !1;
        this.bu = 1;
        this.$t = 0;
        this.Gd = this.Dg = NaN;
        this.gw = 0;
        this.cn = null;
        this.o = pb;
        this.vc = new ob;
        this.St = new ob;
        this.xl = new H;
        this.Tt = new H;
        this.dw = Rh;
        a1 && Object.assign(this, a1);
    }
    jh.prototype.suspend = function() {
        this.Wk = !0;
    };
    jh.prototype.advanceTo = function(a1, b) {
        b && (this.Wk = !1);
        this.fo && a1 >= this.Gd && (this.Vk = !0, a1 -= this.Gd);
        this.gw = a1;
        Ih(this, !0);
        sh(this.Yd);
        yf(this.H);
        uh(this.Yd);
        this.H.redraw();
    };
    function ph(a1, b) {
        a1.St.clear();
        a1.Vk = !1;
        a1.$t = 0;
        a1.Gd = NaN;
        0 < a1.xl.count && a1.xl.clear();
        0 < a1.Tt.count && a1.Tt.clear();
        if (null !== b) for(a1 = b.links; a1.next();)a1.value.Tg = null;
    }
    t = jh.prototype;
    t.start = function() {
        if (0 === this.vc.count || this.cc) return this;
        for(var a1 = this.H, b = this.vc.iterator; b.next();){
            var c = b.key;
            null === a1 && (c instanceof Q ? a1 = c : c instanceof Y && (a1 = c.diagram));
        }
        if (null !== a1) this.H = a1, this.Yd = a1.animationManager;
        else return this;
        b = this.Yd;
        if (!1 === b.isEnabled) return this;
        this.Gd = isNaN(this.Dg) ? b.duration : this.Dg;
        this.Kp = this.nt;
        b.Nk && b.Ok === ih && this === b.defaultAnimation && (this.Kp = Sh, this.Gd = isNaN(this.Dg) ? 600 === b.duration ? 900 : b.duration : this.Dg);
        this.dw = a1.scrollMode;
        this.isViewportUnconstrained && (a1.sj = Th);
        sh(b);
        this.xl.each(function(b) {
            b.data = null;
            a1.add(b);
        });
        uh(b);
        this.cc = !0;
        this.Qd = +new Date;
        this.bn = this.Qd + this.Gd;
        Hh(b, this);
        return this;
    };
    t.Iy = function(a1, b) {
        if (!a1.Zc()) return this;
        this.xl.add(a1);
        this.H = b;
        return this;
    };
    t.add = function(a1, b, c, d, e) {
        if ("position" === b && c.Xa(d)) return this;
        null === this.H && (a1 instanceof Q ? this.H = a1 : a1 instanceof Y && null !== a1.diagram && (this.H = a1.diagram));
        if (a1 instanceof U) {
            if (!a1.isAnimated) return this;
            "position" === b && (b = "position:part");
        }
        Lh(this, a1, b, c, d, e);
        return this;
    };
    function Lh(a1, b, c, d, e, f) {
        var g = a1.vc;
        b instanceof Q && "position" === c && (c = "position:diagram");
        if ("fill" === c || "stroke" === c || "background" === c || "areaBackground" === c) Uh(d), Vh(), d = [
            Wh.j,
            Wh.u,
            Wh.o,
            Wh.F
        ], Uh(e), Vh(), e = [
            Wh.j,
            Wh.u,
            Wh.o,
            Wh.F
        ];
        if (g.contains(b)) {
            var h = g.I(b);
            var k = h.start;
            var l = h.end;
            void 0 === k[c] && (k[c] = Xh(d));
            l[c] = Xh(e);
        } else k = {}, l = {}, k[c] = Xh(d), l[c] = Xh(e), h = k.position, b instanceof Y && h instanceof J && !h.w() && b.diagram.animationManager.Zd.contains("Expand SubGraph") && h.assign(l.position), h = new Yh(k, l, f), g.add(b, h);
        g = k[c];
        g instanceof J && !g.w() && g.assign(a1.o);
        f && 0 === c.indexOf("position:") && b instanceof U ? h.Ku.location = Xh(b.location) : f && (h.Ku[c] = Xh(d));
    }
    function Xh(a1) {
        return a1 instanceof J ? a1.copy() : a1 instanceof L ? a1.copy() : a1;
    }
    t.fv = function(a1) {
        if (!this.cc) return !1;
        a1 = this.vc.I(a1);
        return null !== a1 && a1.nv;
    };
    t.Xu = function(a1) {
        if (!this.cc) return !1;
        a1 = this.vc.I(a1);
        return null !== a1 && (a1.start.position || a1.start.location);
    };
    function Ih(a1, b) {
        if (!a1.Wk || b) {
            var c = a1.Yd;
            if (!1 !== a1.cc) {
                var d = +new Date, e = d > a1.bn ? a1.Gd : d - a1.Qd;
                b && (e = a1.gw, e < a1.Gd ? (a1.Qd = +new Date - e, a1.bn = a1.Qd + a1.Gd) : e = a1.Gd);
                sh(c);
                th(a1, e);
                yf(a1.H, !0);
                uh(c);
                d > a1.bn && (a1.fo && !a1.Vk ? (a1.Qd = +new Date, a1.bn = a1.Qd + a1.Gd, a1.Vk = !0) : a1.Ll(!1));
            }
        }
    }
    function th(a1, b) {
        for(var c = a1.Gd, d = a1.vc.iterator, e = a1.Vk; d.next();){
            var f = d.key;
            if (!(f instanceof Y && null === f.diagram)) {
                var g = d.value, h = e ? g.end : g.start;
                g = e ? g.start : g.end;
                var k = Ph, l;
                for(l in g)"position" === l && (g["position:placeholder"] || g["position:nodeCollapse"]) || null === k.get(l) || k.get(l)(f, h[l], g[l], a1.Kp, b, c, a1);
            }
        }
    }
    t.stop = function() {
        if (!this.cc) return this;
        this.Ll(!0);
        return this;
    };
    t.Ll = function(a1) {
        null !== this.uu && this.uu.io.remove(this.Nw);
        if (this.cc) {
            var b = this.H, c = this.Yd;
            this.Wk = this.cc = c.Nk = !1;
            sh(c);
            for(var d = this.vc, e = this.xl.iterator; e.next();)b.remove(e.value);
            for(e = this.Tt.iterator; e.next();)e.value.v();
            e = this.fo;
            d = d.iterator;
            for(var f = Ph; d.next();){
                var g = d.key, h = d.value, k = e ? h.end : h.start, l = e ? h.start : h.end, m = h.Ku, n;
                for(n in l)if (null !== f.get(n)) {
                    var p = n;
                    !h.Hu || "position:nodeCollapse" !== p && "position:placeholder" !== p || (p = "position");
                    f.get(p)(g, k[n], void 0 !== m[n] ? m[n] : h.Hu ? k[n] : l[n], this.Kp, this.Gd, this.Gd, this);
                }
                h.Hu && void 0 !== m.location && g instanceof U && (g.location = m.location);
                h.nv && g instanceof U && g.$b(!1);
            }
            b.zs.clear();
            Xe(b, !1);
            b.Ya();
            b.N();
            yf(b, !0);
            if (c.defaultAnimation === this) {
                for(n = c.nr.iterator; n.next();)e = n.value, null !== e.Tg && (e.points = e.Tg, e.Tg = null);
                c.nr.clear();
            }
            yf(b, !0);
            this.isViewportUnconstrained && (b.scrollMode = this.dw);
            uh(c);
            this.$t++;
            !a1 && this.bu > this.$t ? (this.Vk = !1, this.start()) : (this.cn && this.cn(this), ph(this, null), c.Ll(this), b.ac());
        }
    };
    t.Cj = function(a1, b) {
        var c = b.actualBounds, d = null;
        b instanceof pf && (d = b.placeholder);
        null !== d ? (c = d.ga(sc), d = d.padding, c.x += d.left, c.y += d.top, this.add(a1, "position", c, a1.position, !1)) : this.add(a1, "position", new J(c.x + c.width / 2, c.y + c.height / 2), a1.position, !1);
        this.add(a1, "scale", .01, a1.scale, !1);
        if (a1 instanceof pf) for(a1 = a1.memberParts; a1.next();)d = a1.value, d instanceof V && this.Cj(d, b);
    };
    t.Aj = function(a1, b) {
        if (a1.isVisible()) {
            var c = null;
            b instanceof pf && (c = b.placeholder);
            if (null !== c) {
                var d = c.ga(sc);
                c = c.padding;
                d.x += c.left;
                d.y += c.top;
                this.add(a1, "position:placeholder", a1.position, d, !0);
            } else this.add(a1, "position:nodeCollapse", a1.position, b, !0);
            this.add(a1, "scale", a1.scale, .01, !0);
            d = this.vc;
            d.contains(a1) && (d.I(a1).nv = !0);
            if (a1 instanceof pf) for(a1 = a1.memberParts; a1.next();)d = a1.value, d instanceof V && this.Aj(d, b);
        }
    };
    t.Ez = function(a1) {
        var b = this.St.get(a1);
        null === b && (b = {}, this.St.add(a1, b));
        return b;
    };
    ma.Object.defineProperties(jh.prototype, {
        duration: {
            get: function() {
                return this.Dg;
            },
            set: function(a1) {
                1 > a1 && xa(a1, ">= 1", jh, "duration");
                this.Dg = a1;
            }
        },
        reversible: {
            get: function() {
                return this.fo;
            },
            set: function(a1) {
                this.fo = a1;
            }
        },
        runCount: {
            get: function() {
                return this.bu;
            },
            set: function(a1) {
                0 < a1 ? this.bu = a1 : C("Animation.runCount value must be a positive integer.");
            }
        },
        finished: {
            get: function() {
                return this.cn;
            },
            set: function(a1) {
                this.cn !== a1 && (this.cn = a1);
            }
        },
        easing: {
            get: function() {
                return this.nt;
            },
            set: function(a1) {
                this.nt = a1;
            }
        },
        isViewportUnconstrained: {
            get: function() {
                return this.j;
            },
            set: function(a1) {
                this.j = a1;
            }
        },
        isAnimating: {
            get: function() {
                return this.cc;
            }
        }
    });
    jh.prototype.getTemporaryState = jh.prototype.Ez;
    jh.prototype.stop = jh.prototype.stop;
    jh.prototype.add = jh.prototype.add;
    jh.prototype.addTemporaryPart = jh.prototype.Iy;
    function Qh(a1, b, c, d) {
        a1 /= d / 2;
        return 1 > a1 ? c / 2 * a1 * a1 + b : -c / 2 * (--a1 * (a1 - 2) - 1) + b;
    }
    function Sh(a1, b, c, d) {
        return a1 === d ? b + c : c * (-Math.pow(2, -10 * a1 / d) + 1) + b;
    }
    jh.className = "Animation";
    jh.EaseLinear = function(a1, b, c, d) {
        return c * a1 / d + b;
    };
    jh.EaseInOutQuad = Qh;
    jh.EaseInQuad = function(a1, b, c, d) {
        return c * (a1 /= d) * a1 + b;
    };
    jh.EaseOutQuad = function(a1, b, c, d) {
        return -c * (a1 /= d) * (a1 - 2) + b;
    };
    jh.EaseInExpo = function(a1, b, c, d) {
        return 0 === a1 ? b : c * Math.pow(2, 10 * (a1 / d - 1)) + b;
    };
    jh.EaseOutExpo = Sh;
    function Yh(a1, b, c) {
        this.start = a1;
        this.end = b;
        this.Ku = {};
        this.Hu = c;
        this.nv = !1;
    }
    Yh.className = "AnimationState";
    function Zh(a1, b, c) {
        this.xd = null;
        this.rf = a1;
        this.ro = c || $h;
        this.tk = null;
        void 0 !== b && (this.tk = b, void 0 === c && (this.ro = ai));
    }
    Zh.prototype.copy = function() {
        var a1 = new Zh(this.rf);
        a1.ro = this.ro;
        var b = this.tk;
        if (null !== b) {
            var c = {};
            void 0 !== b.duration && (c.duration = b.duration);
            void 0 !== b.finished && (c.finished = b.finished);
            void 0 !== b.easing && (c.easing = b.easing);
            a1.tk = c;
        }
        return a1;
    };
    function bi(a1, b) {
        a1 = a1.tk;
        null !== a1 && (a1.duration && (b.duration = a1.duration), a1.finished && (b.finished = a1.finished), a1.easing && (b.easing = a1.easing));
    }
    ma.Object.defineProperties(Zh.prototype, {
        propertyName: {
            get: function() {
                return this.rf;
            },
            set: function(a1) {
                this.rf = a1;
            }
        },
        animationSettings: {
            get: function() {
                return this.tk;
            },
            set: function(a1) {
                this.tk = a1;
            }
        },
        startCondition: {
            get: function() {
                return this.ro;
            },
            set: function(a1) {
                this.ro = a1;
            }
        }
    });
    var $h = new E(Zh, "Default", 1), ai = new E(Zh, "Immediate", 2), ci = new E(Zh, "Bundled", 3);
    Zh.className = "AnimationTrigger";
    Zh.Default = $h;
    Zh.Immediate = ai;
    Zh.Bundled = ci;
    function di(a1) {
        Qa(this);
        this.H = null;
        this.Pa = new F;
        this.xa = "";
        this.pb = 1;
        this.o = !1;
        this.j = this.Uh = this.u = this.Oi = this.Ni = this.Mi = this.Li = this.Ji = this.Ki = this.Ii = this.Qi = this.Hi = this.Pi = this.Gi = this.Fi = !0;
        this.Yq = [];
        a1 && Object.assign(this, a1);
    }
    t = di.prototype;
    t.clear = function() {
        for(var a1 = this.Pa, b = 0; b < a1.length; b++){
            var c = a1.s[b];
            c.Ig = null;
            ei(c);
        }
        a1.clear();
        this.Yq.length = 0;
    };
    t.Xe = function(a1) {
        this.H = a1;
    };
    t.toString = function(a1) {
        void 0 === a1 && (a1 = 0);
        var b = 'Layer "' + this.name + '"';
        if (0 >= a1) return b;
        for(var c = 0, d = 0, e = 0, f = 0, g = 0, h = this.Pa.iterator; h.next();){
            var k = h.value;
            k instanceof pf ? e++ : k instanceof V ? d++ : k instanceof T ? f++ : k instanceof te ? g++ : c++;
        }
        h = "";
        0 < c && (h += c + " Parts ");
        0 < d && (h += d + " Nodes ");
        0 < e && (h += e + " Groups ");
        0 < f && (h += f + " Links ");
        0 < g && (h += g + " Adornments ");
        if (1 < a1) for(a1 = this.Pa.iterator; a1.next();)c = a1.value, h += "\n    " + c.toString(), d = c.data, null !== d && bb(d) && (h += " #" + bb(d)), c instanceof V ? h += " " + Ia(d) : c instanceof T && (h += " " + Ia(c.fromNode) + " " + Ia(c.toNode));
        return b + " " + this.Pa.count + ": " + h;
    };
    t.jc = function(a1, b, c) {
        void 0 === b && (b = null);
        void 0 === c && (c = null);
        if (!1 === this.Uh) return null;
        var d = !1;
        null !== this.diagram && this.diagram.viewportBounds.ca(a1) && (d = !0);
        for(var e = J.alloc(), f = this.Pa.s, g = f.length; g--;){
            var h = f[g];
            if ((!0 !== d || !1 !== hg(h)) && h.isVisible() && (e.assign(a1), xb(e, h.oe), h = h.jc(e, b, c), null !== h && (null !== b && (h = b(h)), null !== h && (null === c || c(h))))) return J.free(e), h;
        }
        J.free(e);
        return null;
    };
    t.ji = function(a1, b, c, d) {
        void 0 === b && (b = null);
        void 0 === c && (c = null);
        d instanceof F || d instanceof H || (d = new H);
        if (!1 === this.Uh) return d;
        var e = !1;
        null !== this.diagram && this.diagram.viewportBounds.ca(a1) && (e = !0);
        for(var f = J.alloc(), g = this.Pa.s, h = g.length; h--;){
            var k = g[h];
            if ((!0 !== e || !1 !== hg(k)) && k.isVisible()) {
                f.assign(a1);
                xb(f, k.oe);
                var l = k;
                k.ji(f, b, c, d) && (null !== b && (l = b(l)), null === l || null !== c && !c(l) || d.add(l));
            }
        }
        J.free(f);
        return d;
    };
    t.Cf = function(a1, b, c, d, e) {
        void 0 === b && (b = null);
        void 0 === c && (c = null);
        void 0 === d && (d = !1);
        e instanceof F || e instanceof H || (e = new H);
        if (!1 === this.Uh) return e;
        var f = !1;
        null !== this.diagram && this.diagram.viewportBounds.Re(a1) && (f = !0);
        for(var g = this.Pa.s, h = g.length; h--;){
            var k = g[h];
            if ((!0 !== f || !1 !== hg(k)) && k.isVisible()) {
                var l = k;
                k.Cf(a1, b, c, d, e) && (null !== b && (l = b(l)), null === l || null !== c && !c(l) || e.add(l));
            }
        }
        return e;
    };
    t.Nu = function(a1, b, c, d, e, f, g) {
        if (!1 === this.Uh) return e;
        for(var h = this.Pa.s, k = h.length; k--;){
            var l = h[k];
            if ((!0 !== g || !1 !== hg(l)) && f(l) && l.isVisible()) {
                var m = l;
                l.Cf(a1, b, c, d, e) && (null !== b && (m = b(m)), null === m || null !== c && !c(m) || e.add(m));
            }
        }
        return e;
    };
    t.og = function(a1, b, c, d, e, f) {
        void 0 === c && (c = null);
        void 0 === d && (d = null);
        void 0 === e && (e = !0);
        if (!1 !== e && !0 !== e) {
            if (e instanceof F || e instanceof H) f = e;
            e = !0;
        }
        f instanceof F || f instanceof H || (f = new H);
        if (!1 === this.Uh) return f;
        var g = !1;
        null !== this.diagram && this.diagram.viewportBounds.ca(a1) && (g = !0);
        for(var h = J.alloc(), k = J.alloc(), l = this.Pa.s, m = l.length; m--;){
            var n = l[m];
            if ((!0 !== g || !1 !== hg(n)) && n.isVisible()) {
                h.assign(a1);
                xb(h, n.oe);
                k.h(a1.x + b, a1.y);
                xb(k, n.oe);
                var p = n;
                n.og(h, k, c, d, e, f) && (null !== c && (p = c(p)), null === p || null !== d && !d(p) || f.add(p));
            }
        }
        J.free(h);
        J.free(k);
        return f;
    };
    t.Fd = function(a1, b) {
        if (this.visible) {
            var c = this.Pa.s, d = c.length;
            if (0 !== d) {
                a1 = Ea();
                for(var e = Ea(), f = 0; f < d; f++){
                    var g = c[f];
                    g.vw = f;
                    if (g instanceof T) {
                        if (!1 === g.fd) continue;
                    } else if (g instanceof te && null !== g.adornedPart) continue;
                    var h = g.actualBounds;
                    g.isVisible() && Xb(h, b) ? (g.Fd(!0), a1.push(g)) : (g.Fd(!1), null !== g.adornments && 0 < g.adornments.count && e.push(g));
                }
                for(b = 0; b < a1.length; b++)for(c = a1[b], fi(c), c = c.adornments; c.next();)d = c.value, d.measure(Infinity, Infinity), d.arrange(), d.Fd(!0);
                for(b = 0; b < e.length; b++)fi(e[b]);
                Ga(a1);
                Ga(e);
            }
        }
    };
    function gi(a1, b) {
        var c = 1;
        1 !== a1.pb && (c = b.globalAlpha, b.globalAlpha = c * a1.pb);
        return c;
    }
    t.hc = function(a1, b, c) {
        if (this.visible && 0 !== this.pb && (void 0 === c && (c = !0), c || !this.isTemporary)) {
            c = this.Pa.s;
            var d = c.length;
            if (0 !== d) {
                if (a1.isTemporary) for(var e = 0; e < d; e++)c[e].Fj();
                e = gi(this, a1);
                var f = this.Yq;
                f.length = 0;
                for(var g = b.scale, h = N.alloc(), k = 0; k < d; k++)this.Nj(a1, c[k], b, f, g, h, !0);
                N.free(h);
                if (a1.isTemporary) for(b = 0; b < d; b++)c[b].Fj();
                a1.globalAlpha = e;
            }
        }
    };
    function hi(a1, b, c, d, e) {
        if (a1.visible && 0 !== a1.pb && (e || !a1.isTemporary)) {
            e = a1.Pa.s;
            var f = e.length;
            if (0 !== f) {
                var g = gi(a1, b), h = a1.Yq;
                h.length = 0;
                for(var k = c.scale, l = N.alloc(), m = 0; m < f; m++){
                    var n = e[m];
                    d.contains(n) && a1.Nj(b, n, c, h, k, l, !1);
                }
                N.free(l);
                b.globalAlpha = g;
            }
        }
    }
    t.Nj = function(a1, b, c, d, e, f, g) {
        if (g && !hg(b)) a1.Gs(b);
        else {
            if (null !== d && b instanceof T && (b.isOrthogonal && d.push(b), !1 === b.fd)) {
                a1.Gs(b);
                return;
            }
            g = !1;
            for(d = b.containingGroup; null !== d;)g ? null !== d.tb && f.Ex(d.tb) : null !== d.tb && (g = !0, f.assign(d.tb)), d = d.containingGroup;
            var h = b.actualBounds;
            d = !1;
            if (g && b.isVisible()) {
                if (!f.Yc(h)) {
                    a1.Gs(b);
                    return;
                }
                d = !f.Re(h);
            }
            d && (a1.save(), a1 instanceof ii ? a1.ak = f.copy() : (a1.beginPath(), a1.rect(f.x, f.y, f.width, f.height), a1.clip()));
            h.width * e > c.Nq || h.height * e > c.Nq ? b.hc(a1, c) : (e = b.actualBounds, f = b.naturalBounds, 0 === e.width || 0 === e.height || isNaN(e.x) || isNaN(e.y) || !b.isVisible() || (c = b.transform, null !== b.areaBackground && (ji(b, a1, b.areaBackground, !0, !0, f, e), a1.fillRect(e.x, e.y, e.width, e.height)), null === b.areaBackground && null === b.background && (ji(b, a1, "rgba(0,0,0,0.3)", !0, !1, f, e), a1.fillRect(e.x, e.y, e.width, e.height)), null !== b.background && (a1.transform(c.m11, c.m12, c.m21, c.m22, c.dx, c.dy), ji(b, a1, b.background, !0, !1, f, e), a1.fillRect(0, 0, f.width / 2, f.height / 2), c.vs() || (b = 1 / (c.m11 * c.m22 - c.m12 * c.m21), a1.transform(c.m22 * b, -c.m12 * b, -c.m21 * b, c.m11 * b, b * (c.m21 * c.dy - c.m22 * c.dx), b * (c.m12 * c.dx - c.m11 * c.dy))))));
            d && (a1.restore(), a1.Vc(!0));
        }
    };
    t.g = function(a1, b, c, d, e) {
        var f = this.diagram;
        null !== f && f.cb(ce, a1, this, b, c, d, e);
    };
    t.oi = function(a1, b, c) {
        var d = this.Pa;
        b.Ig = this;
        null === this && ei(b);
        if (a1 >= d.count) a1 = d.count;
        else if (d.M(a1) === b) return -1;
        d.Hb(a1, b);
        b.Uo(c);
        d = this.diagram;
        null !== d && (c ? d.N() : d.oi(b));
        ki(this, a1, b);
        return a1;
    };
    t.qc = function(a1, b, c) {
        if (!c && b.layer !== this && null !== b.layer) return b.layer.qc(a1, b, c);
        var d = this.Pa;
        if (0 > a1 || a1 >= d.length) {
            if (a1 = d.indexOf(b), 0 > a1) return -1;
        } else if (d.M(a1) !== b && (a1 = d.indexOf(b), 0 > a1)) return -1;
        b.Vo(c);
        d.mb(a1);
        d = this.diagram;
        null !== d && (c ? d.N() : d.qc(b));
        b.Ig = null;
        ei(b);
        return a1;
    };
    function ki(a1, b, c) {
        b = li(a1, b, c);
        if (c instanceof pf && null !== c && isNaN(c.zOrder)) {
            if (0 !== c.memberParts.count) {
                for(var d = -1, e = a1.Pa.s, f = e.length, g = 0; g < f; g++){
                    var h = e[g];
                    if (h === c && (b = g, 0 <= d)) break;
                    if (0 > d && h.containingGroup === c && (d = g, 0 <= b)) break;
                }
                !(0 > d) && d < b && (e = a1.Pa, e.mb(b), e.Hb(d, c));
            }
            b = c.containingGroup;
            null !== b && ki(a1, -1, b);
        }
        null !== c.svg && c.svg.remove();
    }
    function li(a1, b, c) {
        var d = c.zOrder;
        if (isNaN(d)) return b;
        a1 = a1.Pa;
        var e = a1.count;
        if (1 >= e) return b;
        0 > b && (b = a1.indexOf(c));
        if (0 > b) return -1;
        for(var f = b - 1, g = NaN; 0 <= f;){
            g = a1.M(f).zOrder;
            if (!isNaN(g)) break;
            f--;
        }
        for(var h = b + 1, k = NaN; h < e;){
            k = a1.M(h).zOrder;
            if (!isNaN(k)) break;
            h++;
        }
        if (!isNaN(g) && g > d) for(;;){
            if (-1 === f || g <= d) {
                f++;
                if (f === b) break;
                a1.mb(b);
                a1.Hb(f, c);
                return f;
            }
            for(g = NaN; 0 <= --f && (g = a1.M(f).zOrder, isNaN(g)););
        }
        else if (!isNaN(k) && k < d) for(;;){
            if (h === e || k >= d) {
                h--;
                if (h === b) break;
                a1.mb(b);
                a1.Hb(h, c);
                return h;
            }
            for(k = NaN; ++h < e && (k = a1.M(h).zOrder, isNaN(k)););
        }
        return b;
    }
    ma.Object.defineProperties(di.prototype, {
        parts: {
            get: function() {
                return this.Pa.iterator;
            }
        },
        partsBackwards: {
            get: function() {
                return this.Pa.iteratorBackwards;
            }
        },
        diagram: {
            get: function() {
                return this.H;
            }
        },
        name: {
            get: function() {
                return this.xa;
            },
            set: function(a1) {
                var b = this.xa;
                if (b !== a1) {
                    var c = this.diagram;
                    if (null !== c) for("" === b && C("Cannot rename default Layer to: " + a1), c = c.layers; c.next();)c.value.name === a1 && C("Layer.name is already present in this diagram: " + a1);
                    this.xa = a1;
                    this.g("name", b, a1);
                    for(a1 = this.Pa.iterator; a1.next();)a1.value.layerName = this.xa;
                }
            }
        },
        opacity: {
            get: function() {
                return this.pb;
            },
            set: function(a1) {
                var b = this.pb;
                b !== a1 && ((0 > a1 || 1 < a1) && xa(a1, "0 <= value <= 1", di, "opacity"), this.pb = a1, this.g("opacity", b, a1), a1 = this.diagram, null !== a1 && a1.N());
            }
        },
        isTemporary: {
            get: function() {
                return this.o;
            },
            set: function(a1) {
                var b = this.o;
                if (b !== a1) {
                    if (this.o = a1) this.isInDocumentBounds = !1;
                    this.g("isTemporary", b, a1);
                }
            }
        },
        visible: {
            get: function() {
                return this.u;
            },
            set: function(a1) {
                var b = this.u;
                if (b !== a1) {
                    this.u = a1;
                    this.g("visible", b, a1);
                    for(b = this.Pa.iterator; b.next();)b.value.$b(a1);
                    a1 = this.diagram;
                    null !== a1 && a1.N();
                }
            }
        },
        pickable: {
            get: function() {
                return this.Uh;
            },
            set: function(a1) {
                var b = this.Uh;
                b !== a1 && (this.Uh = a1, this.g("pickable", b, a1));
            }
        },
        isInDocumentBounds: {
            get: function() {
                return this.j;
            },
            set: function(a1) {
                this.j !== a1 && (this.j = a1, null !== this.diagram && this.diagram.Ya());
            }
        },
        allowCopy: {
            get: function() {
                return this.Fi;
            },
            set: function(a1) {
                var b = this.Fi;
                b !== a1 && (this.Fi = a1, this.g("allowCopy", b, a1));
            }
        },
        allowDelete: {
            get: function() {
                return this.Gi;
            },
            set: function(a1) {
                var b = this.Gi;
                b !== a1 && (this.Gi = a1, this.g("allowDelete", b, a1));
            }
        },
        allowTextEdit: {
            get: function() {
                return this.Pi;
            },
            set: function(a1) {
                var b = this.Pi;
                b !== a1 && (this.Pi = a1, this.g("allowTextEdit", b, a1));
            }
        },
        allowGroup: {
            get: function() {
                return this.Hi;
            },
            set: function(a1) {
                var b = this.Hi;
                b !== a1 && (this.Hi = a1, this.g("allowGroup", b, a1));
            }
        },
        allowUngroup: {
            get: function() {
                return this.Qi;
            },
            set: function(a1) {
                var b = this.Qi;
                b !== a1 && (this.Qi = a1, this.g("allowUngroup", b, a1));
            }
        },
        allowLink: {
            get: function() {
                return this.Ii;
            },
            set: function(a1) {
                var b = this.Ii;
                b !== a1 && (this.Ii = a1, this.g("allowLink", b, a1));
            }
        },
        allowRelink: {
            get: function() {
                return this.Ki;
            },
            set: function(a1) {
                var b = this.Ki;
                b !== a1 && (this.Ki = a1, this.g("allowRelink", b, a1));
            }
        },
        allowMove: {
            get: function() {
                return this.Ji;
            },
            set: function(a1) {
                var b = this.Ji;
                b !== a1 && (this.Ji = a1, this.g("allowMove", b, a1));
            }
        },
        allowReshape: {
            get: function() {
                return this.Li;
            },
            set: function(a1) {
                var b = this.Li;
                b !== a1 && (this.Li = a1, this.g("allowReshape", b, a1));
            }
        },
        allowResize: {
            get: function() {
                return this.Mi;
            },
            set: function(a1) {
                var b = this.Mi;
                b !== a1 && (this.Mi = a1, this.g("allowResize", b, a1));
            }
        },
        allowRotate: {
            get: function() {
                return this.Ni;
            },
            set: function(a1) {
                var b = this.Ni;
                b !== a1 && (this.Ni = a1, this.g("allowRotate", b, a1));
            }
        },
        allowSelect: {
            get: function() {
                return this.Oi;
            },
            set: function(a1) {
                var b = this.Oi;
                b !== a1 && (this.Oi = a1, this.g("allowSelect", b, a1));
            }
        }
    });
    di.prototype.findObjectsNear = di.prototype.og;
    di.prototype.findObjectsIn = di.prototype.Cf;
    di.prototype.findObjectsAt = di.prototype.ji;
    di.prototype.findObjectAt = di.prototype.jc;
    di.className = "Layer";
    function Q(a1, b) {
        mi || (ni(), mi = !0);
        Qa(this);
        ke = this;
        this.wb = !0;
        this.Ka = null;
        this.ya = this.Aa = 0;
        this.ta = null;
        if (Ng) {
            var c = this, d = function() {
                c.removeEventListener(x.document, "DOMContentLoaded", d, !1);
                c.setRTL();
            };
            null !== x.document.body ? this.setRTL() : c.addEventListener(x.document, "DOMContentLoaded", d, !1);
        }
        this.nl = null;
        oi.add("Model", pi);
        var e = this;
        this.Ib = function(a1) {
            var b = e.partManager;
            if (a1.model === b.diagram.model && b.diagram.aa) {
                b.diagram.aa = !1;
                try {
                    var c = a1.change;
                    "" === a1.modelChange && c === ce && b.updateDataBindings(a1.object, a1.propertyName);
                } finally{
                    b.diagram.aa = !0;
                }
            }
        };
        this.Oc = function(a1) {
            e.partManager.doModelChanged(a1);
        };
        this.gu = this.ju = null;
        qi(this);
        this.model = ri();
        this.Wg = !0;
        si(this);
        this.layout = new ti;
        this.Wg = !1;
        this.bk = this.dk = this.ek = this.ck = this.ui = this.aA = this.Zj = this.Ov = null;
        this.gk = function() {};
        this.preventDefault = null;
        this.qn = !1;
        this.Yf = new ui;
        void 0 !== a1 && ("string" === typeof a1 || x.Element && a1 instanceof Element ? vi(this, a1) : b = a1);
        this.wb = !1;
        b && this.mm(b);
        return this;
    }
    var wi, ke;
    function qi(a1) {
        a1.Yd = new fh;
        a1.Yd.Xe(a1);
        a1.Eb = 17;
        a1.Gw = !1;
        a1.sn = !1;
        a1.au = "default";
        a1.Wa = new F;
        a1.pj = new ob;
        a1.ml = "default";
        a1.Tx();
        a1.Sx();
        a1.pb = 1;
        a1.pa = new J(NaN, NaN).freeze();
        a1.cu = new J(NaN, NaN);
        a1.Ca = 1;
        a1.Op = 1;
        a1.yt = new J(NaN, NaN).freeze();
        a1.zt = NaN;
        a1.Nt = 1E-4;
        a1.Lt = 100;
        a1.Bb = new ld;
        a1.yu = new J(NaN, NaN).freeze();
        a1.tt = new N(NaN, NaN, NaN, NaN).freeze();
        a1.rj = new dc(0, 0, 0, 0).freeze();
        a1.sj = Rh;
        a1.mu = !1;
        a1.Yt = null;
        a1.eu = null;
        a1.yh = qh;
        a1.yk = Sc;
        a1.Fg = qh;
        a1.oq = Sc;
        a1.xt = sc;
        a1.At = sc;
        a1.Fc = !0;
        a1.on = !1;
        a1.De = new H;
        a1.Eh = new ob;
        a1.Wm = !0;
        a1.tp = 250;
        a1.uk = -1;
        a1.wp = new dc(16, 16, 16, 16).freeze();
        a1.kg = !1;
        a1.Ik = !1;
        a1.en = !0;
        a1.aq = new Zd;
        a1.aq.diagram = a1;
        a1.Qg = new Zd;
        a1.Qg.diagram = a1;
        a1.cj = new Zd;
        a1.cj.diagram = a1;
        a1.zg = null;
        a1.pf = null;
        a1.pu = !1;
        xi(a1);
        a1.ai = new H;
        a1.Gt = !0;
        a1.tu = yi;
        a1.pw = !1;
        a1.vu = Df;
        a1.ht = "auto";
        a1.Np = "auto";
        a1.zh = null;
        a1.Fh = null;
        a1.Bh = null;
        a1.Qh = null;
        a1.Oh = null;
        a1.Nh = null;
        a1.Pt = null;
        a1.Lh = null;
        a1.wt = !1;
        a1.Mh = null;
        a1.Ph = null;
        a1.$h = null;
        a1.Ch = null;
        a1.Qt = !1;
        a1.Xt = {};
        a1.oj = [
            null,
            null
        ];
        a1.Wg = !1;
        a1.Iw = !1;
        a1.nu = !1;
        a1.kt = !1;
        a1.rw = !0;
        a1.ld = !1;
        a1.$i = !1;
        a1.Tw = !0;
        a1.Ce = -2;
        a1.Og = new ob;
        a1.Wn = new F;
        a1.Gg = !1;
        a1.Jd = !0;
        a1.Ts = !0;
        a1.Fi = !0;
        a1.Gi = !0;
        a1.Us = !1;
        a1.Vs = !0;
        a1.Pi = !0;
        a1.Hi = !0;
        a1.Qi = !0;
        a1.Xs = !0;
        a1.Ii = !0;
        a1.Ki = !0;
        a1.Ji = !0;
        a1.Li = !0;
        a1.Mi = !0;
        a1.Ni = !0;
        a1.Oi = !0;
        a1.Ys = !0;
        a1.$s = !0;
        a1.qw = !1;
        a1.Uk = !1;
        a1.ln = !0;
        a1.mn = !0;
        a1.Ws = !0;
        a1.Zs = !0;
        a1.hu = 16;
        a1.lu = 16;
        a1.pr = !1;
        a1.fu = !1;
        a1.ku = 0;
        a1.iu = 0;
        a1.zb = new dc(5).freeze();
        a1.Hw = (new H).freeze();
        a1.Mt = 999999999;
        a1.nw = (new H).freeze();
        a1.Zi = !0;
        a1.Ee = !0;
        a1.vd = !0;
        a1.Be = !1;
        a1.gf = !1;
        a1.xh = !0;
        a1.hf = !1;
        a1.sy = new H;
        a1.ow = new H;
        a1.Xh = null;
        a1.aw = new L(8, 8);
        a1.bw = 999;
        a1.Bw = 1;
        a1.Jw = 0;
        a1.gc = {
            scale: 1,
            position: new J,
            bounds: new N,
            Py: new L,
            bA: new L,
            Oz: !1
        };
        a1.gc.canvasSize = a1.gc.Py;
        a1.gc.newCanvasSize = a1.gc.bA;
        a1.gc.isScroll = !1;
        a1.Rw = new N(NaN, NaN, NaN, NaN).freeze();
        a1.vo = new L(NaN, NaN).freeze();
        a1.Rp = new N(NaN, NaN, NaN, NaN).freeze();
        a1.Ht = !1;
        a1.Lg = new ob;
        var b = new V, c = new Pg;
        c.bind(new Gi("text", "", Ia));
        b.add(c);
        a1.ny = b;
        a1.Lg.add("", b);
        b = new V;
        c = new Pg;
        c.stroke = "brown";
        c.bind(new Gi("text", "", Ia));
        b.add(c);
        a1.Lg.add("Comment", b);
        b = new V;
        b.selectable = !1;
        b.avoidable = !1;
        c = new Bf;
        c.figure = "Ellipse";
        c.fill = "black";
        c.stroke = null;
        c.desiredSize = new L(3, 3).ja();
        b.add(c);
        a1.Lg.add("LinkLabel", b);
        a1.Yi = new ob;
        b = new pf;
        b.selectionObjectName = "GROUPPANEL";
        b.type = W.Vertical;
        c = new Pg;
        c.font = "bold 12pt sans-serif";
        c.bind(new Gi("text", "", Ia));
        b.add(c);
        c = new W(W.Auto);
        c.name = "GROUPPANEL";
        var d = new Bf;
        d.figure = "Rectangle";
        d.fill = "rgba(128,128,128,0.2)";
        d.stroke = "black";
        c.add(d);
        d = new ig;
        d.padding = new dc(5, 5, 5, 5).ja();
        c.add(d);
        b.add(c);
        a1.ly = b;
        a1.Yi.add("", b);
        a1.Kh = new ob;
        b = new T;
        c = new Bf;
        c.isPanelMain = !0;
        b.add(c);
        c = new Bf;
        c.toArrow = "Standard";
        c.fill = "black";
        c.stroke = null;
        c.strokeWidth = 0;
        b.add(c);
        a1.my = b;
        a1.Kh.add("", b);
        b = new T;
        c = new Bf;
        c.isPanelMain = !0;
        c.stroke = "brown";
        b.add(c);
        a1.Kh.add("Comment", b);
        b = new te;
        b.type = W.Auto;
        c = new Bf;
        c.fill = null;
        c.stroke = "dodgerblue";
        c.strokeWidth = 3;
        b.add(c);
        c = new ig;
        c.margin = new dc(1.5, 1.5, 1.5, 1.5).ja();
        b.add(c);
        a1.Rt = b;
        a1.vt = b;
        b = new te;
        b.type = W.Link;
        c = new Bf;
        c.isPanelMain = !0;
        c.fill = null;
        c.stroke = "dodgerblue";
        c.strokeWidth = 3;
        b.add(c);
        a1.Jt = b;
        a1.fe = null;
        a1.lq = !1;
        a1.Bk = null;
        a1.partManager = new pi;
        a1.toolManager = new La;
        a1.toolManager.initializeStandardTools();
        a1.defaultTool = a1.toolManager;
        a1.currentTool = a1.defaultTool;
        a1.mt = null;
        a1.Vm = new Be;
        a1.Ut = null;
        a1.Vt = null;
        a1.Lr = !1;
        a1.commandHandler = Ii();
        a1.cq = null;
        a1.eq = tb;
        a1.Pw = !1;
        a1.Nb = 1;
        a1.Yh = null;
        a1.Nq = 1;
        a1.Rq = 0;
        a1.zw = [
            0,
            0,
            0,
            0,
            0
        ];
        a1.Sq = 0;
        a1.xq = 1;
        a1.tw = 0;
        a1.uw = new J;
        a1.zy = 500;
        a1.vp = new J;
        a1.vq = !1;
    }
    Q.prototype.clear = function() {
        this.animationManager.Cc();
        this.model.clear();
        Ji = null;
        Ki = "";
        Li(this, !1);
        this.Wn.clear();
        Mi();
        this.Og.clear();
        this.Xh = null;
        this.Ya();
        this.Va();
        this.N();
    };
    function Li(a1, b) {
        a1.animationManager.Cc(!0);
        a1.Hw = (new H).freeze();
        a1.nw = (new H).freeze();
        var c = a1.skipsUndoManager, d = null !== a1.dc && void 0 !== a1.dc;
        d && (a1.skipsUndoManager = !0);
        var e = null;
        null !== a1.fe && (e = a1.fe.part, null !== e && a1.remove(e));
        var f = [], g = a1.Wa.length;
        if (b) {
            for(b = 0; b < g; b++)for(var h = a1.Wa.s[b].parts; h.next();){
                var k = h.value;
                k !== e && null === k.data && f.push(k);
            }
            for(b = 0; b < f.length; b++)a1.remove(f[b]);
        }
        for(b = 0; b < g; b++)a1.Wa.s[b].clear();
        a1.partManager.clear();
        a1.De.clear();
        a1.Eh.clear();
        a1.ai.clear();
        a1.Bk = null;
        a1.Wn.clear();
        Mi();
        a1.Og.clear();
        Fa = [];
        null !== e && (a1.add(e), a1.partManager.parts.remove(e));
        d && (a1.skipsUndoManager = c);
        return f;
    }
    function Ii() {
        return null;
    }
    Q.prototype.reset = function() {
        this.clear();
        this.wb = !0;
        qi(this);
        Ni(this);
        this.Wg = !0;
        si(this);
        this.layout = new ti;
        this.Wg = !1;
        this.model = ri();
        this.model.undoManager = new he;
        this.wb = this.qn = !1;
        this.N();
    };
    Q.prototype.setRTL = function(a1) {
        a1 = void 0 === a1 ? this.div : a1;
        null === a1 && (a1 = x.document.body);
        var b = ua("div");
        b.dir = "rtl";
        b.style.cssText = "font-size: 14px; width: 1px; height: 1px; position: absolute; top: -1000px; overflow: scroll;";
        b.textContent = "A";
        a1.appendChild(b);
        var c = "reverse";
        0 < b.scrollLeft ? c = "default" : (b.scrollLeft = 1, 0 === b.scrollLeft && (c = "negative"));
        a1.removeChild(b);
        this.au = c;
    };
    Q.prototype.setScrollWidth = function(a1) {
        a1 = void 0 === a1 ? this.div : a1;
        null === a1 && (a1 = x.document.body);
        var b = 0;
        if (Ng) {
            var c = Oi;
            b = wi;
            null === c && (c = Oi = ua("p"), c.style.width = "100%", c.style.height = "200px", c.style.boxSizing = "content-box", b = wi = ua("div"), b.style.position = "absolute", b.style.visibility = "hidden", b.style.width = "200px", b.style.height = "150px", b.style.boxSizing = "content-box", b.appendChild(c));
            b.style.overflow = "hidden";
            a1.appendChild(b);
            var d = c.offsetWidth;
            b.style.overflow = "scroll";
            c = c.offsetWidth;
            d === c && (c = b.clientWidth);
            a1.removeChild(b);
            b = d - c;
            0 !== b || Oa || (b = 11);
        }
        this.Eb = b;
        this.Gw = !0;
    };
    Q.prototype.qb = function(a1) {
        a1.classType === Q && (this.autoScale = a1);
    };
    Q.prototype.toString = function(a1) {
        void 0 === a1 && (a1 = 0);
        var b = "";
        this.div && this.div.id && (b = this.div.id);
        b = 'Diagram "' + b + '"';
        if (0 >= a1) return b;
        for(var c = this.Wa.iterator; c.next();)b += "\n  " + c.value.toString(a1 - 1);
        return b;
    };
    function vi(a1, b) {
        if (Ng) {
            void 0 !== b && null !== b || C("Diagram setup requires an argument DIV.");
            null !== a1.Ka && C("Diagram has already completed setup.");
            "string" === typeof b ? a1.Ka = x.document.getElementById(b) : b instanceof HTMLDivElement ? a1.Ka = b : C("No DIV or DIV id supplied: " + b);
            null === a1.Ka && C("Invalid DIV id; could not get element with id: " + b);
            void 0 !== a1.Ka.H && C("Invalid div id; div already has a Diagram associated with it.");
            if (!a1.nl && x.ResizeObserver) {
                var c = sa(function() {
                    a1.ac();
                }, 250);
                a1.nl = new x.ResizeObserver(function() {
                    c();
                });
                a1.nl.observe(a1.Ka);
            }
            "static" === x.getComputedStyle(a1.Ka, null).position && (a1.Ka.style.position = "relative");
            b = 5;
            var d = "rgba(2" + b + "5, 255, 255, 0)";
            b--;
            a1.Ka.style["-webkit-tap-highlight-color"] = d;
            a1.Ka.innerHTML = "";
            a1.Ka.H = a1;
            a1.Ka.goDiagram = a1;
            a1.Ka.go = x.go;
            var e = new Pi(a1);
            void 0 !== e.style && (e.style.position = "absolute", e.style.top = "0px", e.style.left = "0px", "rtl" === x.getComputedStyle(a1.Ka, null).getPropertyValue("direction") && (a1.sn = !0), e.style.zIndex = "2", e.style.userSelect = "none", e.style.MozUserSelect = "none", e.style.touchAction = "none", e.style.letterSpacing = "normal !important", e.style.wordSpacing = "normal !important");
            a1.ta = e;
            a1.ib = e.context;
            d = a1.ib;
            a1.Nb = a1.computePixelRatio();
            a1.viewSize.w() || (a1.Aa = a1.Ka.clientWidth || 1, a1.ya = a1.Ka.clientHeight || 1);
            Qi(a1, a1.Aa, a1.ya);
            a1.Ka.insertBefore(e.Oa, a1.Ka.firstChild);
            e = new Pi(null);
            e.width = 1;
            e.height = 1;
            a1.jw = e;
            a1.oy = e.context;
            if (Ng) {
                e = ua("div");
                var f = ua("div");
                e.style.position = "absolute";
                e.style.overflow = "auto";
                e.style.width = a1.Aa + "px";
                e.style.height = a1.ya + "px";
                e.style.zIndex = "1";
                f.style.position = "absolute";
                f.style.width = "1px";
                f.style.height = "1px";
                a1.Ka.appendChild(e);
                e.appendChild(f);
                e.onscroll = Ri;
                e.addEventListener("pointerdown", Si);
                e.H = a1;
                e.uy = !0;
                e.vy = !0;
                a1.ju = e;
                a1.gu = f;
            }
            a1.gk = sa(function() {
                a1.Yh = null;
                a1.N();
            }, 300);
            a1.Ov = sa(function() {
                rh(a1);
            }, 250);
            a1.preventDefault = function(a1) {
                a1.preventDefault();
                return !1;
            };
            a1.Zj = function(b) {
                if (a1.isEnabled) {
                    var c = Ti(a1, b, !0);
                    c.bubbles = !0;
                    var d = 0, e = 0;
                    c.delta = 0;
                    void 0 !== b.deltaX ? (0 !== b.deltaX && (d = 0 < b.deltaX ? 1 : -1), 0 !== b.deltaY && (e = 0 < b.deltaY ? 1 : -1), c.delta = Math.abs(b.deltaX) > Math.abs(b.deltaY) ? -d : -e) : void 0 !== b.wheelDeltaX ? (0 !== b.wheelDeltaX && (d = 0 < b.wheelDeltaX ? -1 : 1), 0 !== b.wheelDeltaY && (e = 0 < b.wheelDeltaY ? -1 : 1), c.delta = Math.abs(b.wheelDeltaX) > Math.abs(b.wheelDeltaY) ? -d : -e) : void 0 !== b.wheelDelta && 0 !== b.wheelDelta && (c.delta = 0 < b.wheelDelta ? 1 : -1);
                    a1.doMouseWheel();
                    Ui(c, b);
                }
            };
            a1.aA = function(b) {
                a1.isEnabled && (a1.Uk = !1, Ti(a1, b, !0), b = a1.currentTool, b.cancelWaitAfter(), b.standardMouseOver());
            };
            a1.ui = function(b) {
                if (a1.isEnabled) {
                    a1.Uk = !0;
                    var c = a1.Xt;
                    void 0 === c[b.pointerId] && (c[b.pointerId] = b);
                    c = a1.oj;
                    var d = !1;
                    if (null === c[0] || c[0].pointerId !== b.pointerId && c[0].pointerType === b.pointerType) {
                        if (null !== c[1] && c[1].pointerId === b.pointerId) c[1] = b, d = !0;
                        else if (null === c[0]) c[0] = b;
                        else if (null === c[1]) c[1] = b, d = !0;
                        else {
                            b.preventDefault();
                            return;
                        }
                    } else c[0] = b;
                    if (c = "touch" === b.pointerType || "pen" === b.pointerType) a1.pu = !1, a1.vq = !0;
                    var e = d;
                    d = Vi(a1, b, !0, !1, !0, e);
                    Wi(a1, b, d);
                    d.targetDiagram = Xi(b, b.target);
                    d.targetObject = null;
                    e || d.clone(a1.aq);
                    e = a1.uw;
                    c = c ? 25 : 10;
                    b.timeStamp - a1.tw < a1.zy && !(Math.abs(e.x - b.screenX) > c || Math.abs(e.y - b.screenY) > c) ? a1.xq++ : a1.xq = 1;
                    d.clickCount = a1.xq;
                    a1.tw = b.timeStamp;
                    a1.uw.sg(b.screenX, b.screenY);
                    a1.doMouseDown();
                    1 === b.button ? b.preventDefault() : Ui(d, b);
                }
            };
            a1.ck = function(b) {
                if (a1.isEnabled) {
                    a1.Uk = !0;
                    var c = a1.oj;
                    if (null === c[0] || c[0].pointerId !== b.pointerId && c[0].pointerType === b.pointerType) {
                        if (null !== c[1] && c[1].pointerId === b.pointerId) {
                            c[1] = b;
                            return;
                        }
                        if (null === c[0]) c[0] = b;
                        else return;
                    } else c[0] = b;
                    if (c[0].pointerId === b.pointerId) {
                        c = Vi(a1, b, !1, !1, !1, null !== c[1]);
                        var d = x.document.elementFromPoint(b.clientX, b.clientY) || null;
                        null !== d && void 0 !== d.shadowRoot && null !== d.shadowRoot && (d = d.shadowRoot.elementFromPoint(b.clientX, b.clientY));
                        var e = a1, f = b;
                        d && d.H && (f = b, e = d.H);
                        c.targetDiagram = e;
                        Wi(a1, f, c);
                        c.targetObject = null;
                        a1.doMouseMove();
                        Ui(c, b);
                    }
                }
            };
            a1.ek = function(b) {
                if (a1.isEnabled) {
                    a1.Uk = !0;
                    var c = "touch" === b.pointerType || "pen" === b.pointerType, d = a1.Xt;
                    if (c && a1.pu) delete d[b.pointerId], b.preventDefault();
                    else if (d = a1.oj, null === d[0] || d[0].pointerId !== b.pointerId && d[0].pointerType === b.pointerType) null !== d[1] && d[1].pointerId === b.pointerId && (d[1] = null);
                    else {
                        d[0] = null;
                        d = Vi(a1, b, !1, !0, !0, !1);
                        var e = x.document.elementFromPoint(b.clientX, b.clientY) || null;
                        null !== e && void 0 !== e.shadowRoot && null !== e.shadowRoot && (e = e.shadowRoot.elementFromPoint(b.clientX, b.clientY));
                        null !== e && e.H instanceof Q && e.H !== a1 && Wi(e.H, b, d);
                        null === e && (e = b.target);
                        Wi(a1, b, d);
                        d.clickCount = a1.xq;
                        d.targetDiagram = Xi(b, e);
                        d.targetObject = null;
                        a1.doMouseUp();
                        Ui(d, b);
                        c && (a1.vq = !1);
                    }
                }
            };
            a1.dk = function(b) {
                if (a1.isEnabled) {
                    a1.Uk = !1;
                    var c = a1.Xt;
                    c[b.pointerId] && delete c[b.pointerId];
                    c = a1.oj;
                    null !== c[0] && c[0].pointerId === b.pointerId && (c[0] = null);
                    null !== c[1] && c[1].pointerId === b.pointerId && (c[1] = null);
                    "touch" !== b.pointerType && "pen" !== b.pointerType && (b = a1.currentTool, b.cancelWaitAfter(), b.standardMouseOver());
                }
            };
            a1.bk = function(b) {
                var c = a1.oj;
                null !== c[0] && c[0].pointerId === b.pointerId ? (c[0] = null, a1.vq = !1) : null !== c[1] && c[1].pointerId === b.pointerId && (c[1] = null);
            };
            a1.Up = d.Z["d" + Yi[1] + Yi[2] + "wI" + Zi.slice(1, 5)]["b" + $i.slice(1, b)](d.Z, aj, b, b);
            d.Vc(!0);
            bj(a1);
            "svg" === a1.ml && (b = a1.pj.get("svg"), a1.Ka.appendChild(b.Oa), a1.ib = b.context);
        }
    }
    Q.prototype.addEventListener = function(a1, b, c, d) {
        a1.addEventListener(b, c, {
            capture: d,
            passive: !1
        });
    };
    Q.prototype.removeEventListener = function(a1, b, c, d) {
        a1.removeEventListener(b, c, {
            capture: d
        });
    };
    function bj(a1) {
        var b = a1.ta.Oa;
        b instanceof HTMLCanvasElement || (b = a1.div);
        a1.addEventListener(b, "pointerdown", a1.ui, !1);
        a1.addEventListener(b, "pointermove", a1.ck, !1);
        a1.addEventListener(b, "pointerup", a1.ek, !1);
        a1.addEventListener(b, "pointerout", a1.dk, !1);
        a1.addEventListener(b, "pointercancel", a1.bk, !1);
        a1.addEventListener(b, "pointerenter", a1.bz, !1);
        a1.addEventListener(b, "pointerleave", a1.cz, !1);
        a1.addEventListener(b, "wheel", a1.Zj, !1);
        a1.addEventListener(b, "keydown", a1.Qz, !1);
        a1.addEventListener(b, "keyup", a1.Rz, !1);
        a1.addEventListener(b, "blur", a1.Ny, !1);
        a1.addEventListener(b, "focus", a1.Oy, !1);
        a1.addEventListener(b, "selectstart", function(a1) {
            a1.preventDefault();
            return !1;
        }, !1);
        a1.addEventListener(b, "contextmenu", function(a1) {
            a1.preventDefault();
            return !1;
        }, !1);
        a1.addEventListener(x, "resize", a1.Ov, !1);
    }
    function Fe(a1) {
        30 < a1.Rq && (a1.Yh = 1);
    }
    function Xe(a1, b) {
        null !== a1.Yh && (a1.Yh = null, b && a1.gk(), Wa && Wa.nx || (a1.Rq = 0, a1.zw = [
            0,
            0,
            0,
            0,
            0
        ], a1.Sq = 0));
    }
    Q.prototype.computePixelRatio = function() {
        return null !== this.Yh ? this.Yh : x.devicePixelRatio || 1;
    };
    Q.prototype.doMouseMove = function() {
        this.currentTool.doMouseMove();
    };
    Q.prototype.doMouseDown = function() {
        this.currentTool.doMouseDown();
    };
    Q.prototype.doMouseUp = function() {
        this.currentTool.doMouseUp();
    };
    Q.prototype.doMouseWheel = function() {
        this.currentTool.doMouseWheel();
    };
    Q.prototype.doKeyDown = function() {
        this.currentTool.doKeyDown();
    };
    Q.prototype.doKeyUp = function() {
        this.currentTool.doKeyUp();
    };
    Q.prototype.doFocus = function() {
        this.focus();
    };
    Q.prototype.focus = function() {
        if (this.ta) {
            if (this.scrollsPageOnFocus) this.ta.focus();
            else {
                var a1 = x.scrollX || x.pageXOffset, b = x.scrollY || x.pageYOffset;
                this.ta.focus();
                x.scrollTo(a1, b);
            }
        }
    };
    Q.prototype.Oy = function() {
        this.H.R("GainedFocus");
    };
    Q.prototype.Ny = function() {
        this.H.R("LostFocus");
    };
    function rh(a1) {
        if (null !== a1.ta) {
            var b = a1.Ka;
            if (null !== b && 0 !== b.clientWidth && 0 !== b.clientHeight) {
                a1.Gw || a1.setScrollWidth();
                var c = a1.gf ? a1.Eb : 0, d = a1.Be ? a1.Eb : 0, e = a1.Nb;
                a1.Nb = a1.computePixelRatio();
                a1.Nb !== e && (a1.on = !0, a1.ac());
                if (b.clientWidth !== a1.Aa + c || b.clientHeight !== a1.ya + d) a1.Ee = !0, a1.Fc = !0, b = a1.layout, null !== b && b.isViewportSized && a1.autoScale === qh && (a1.Ik = !0, b.C()), a1.ld || a1.ac();
            }
        }
    }
    function si(a1) {
        var b = new di;
        b.name = "Background";
        a1.zl(b);
        b = new di;
        b.name = "";
        a1.zl(b);
        b = new di;
        b.name = "Foreground";
        a1.zl(b);
        b = new di;
        b.name = "Adornment";
        b.isTemporary = !0;
        b.isInDocumentBounds = !1;
        a1.zl(b);
        b = new di;
        b.name = "Tool";
        b.isTemporary = !0;
        b.isInDocumentBounds = !0;
        a1.zl(b);
        b = new di;
        b.name = "Grid";
        b.allowSelect = !1;
        b.pickable = !1;
        b.isTemporary = !0;
        b.isInDocumentBounds = !1;
        a1.Ww(b, a1.Pj("Background"));
    }
    function cj(a1) {
        var b = new W(W.Grid);
        b.name = "GRID";
        var c = new Bf;
        c.figure = "LineH";
        c.stroke = "lightgray";
        c.strokeWidth = .5;
        c.interval = 1;
        b.add(c);
        c = new Bf;
        c.figure = "LineH";
        c.stroke = "gray";
        c.strokeWidth = .5;
        c.interval = 5;
        b.add(c);
        c = new Bf;
        c.figure = "LineH";
        c.stroke = "gray";
        c.strokeWidth = 1;
        c.interval = 10;
        b.add(c);
        c = new Bf;
        c.figure = "LineV";
        c.stroke = "lightgray";
        c.strokeWidth = .5;
        c.interval = 1;
        b.add(c);
        c = new Bf;
        c.figure = "LineV";
        c.stroke = "gray";
        c.strokeWidth = .5;
        c.interval = 5;
        b.add(c);
        c = new Bf;
        c.figure = "LineV";
        c.stroke = "gray";
        c.strokeWidth = 1;
        c.interval = 10;
        b.add(c);
        c = new U;
        c.add(b);
        c.layerName = "Grid";
        c.zOrder = 0;
        c.isInDocumentBounds = !1;
        c.isAnimated = !1;
        c.pickable = !1;
        c.locationObjectName = "GRID";
        a1.add(c);
        a1.partManager.parts.remove(c);
        b.visible = !1;
        return b;
    }
    function Ri() {
        this.H.fu ? this.H.fu = !1 : this.H.isEnabled ? this.H.kx(this) : dj(this.H);
    }
    function Si(a1) {
        this.H.isEnabled ? (this.H.ku = a1.target.scrollTop, this.H.iu = a1.target.scrollLeft) : dj(this.H);
    }
    Q.prototype.kx = function(a1) {
        if (null !== this.ta) {
            var b = this.ju, c = this.gu;
            this.pr = !0;
            var d = this.documentBounds, e = this.viewportBounds, f = this.rj, g = d.x - f.left, h = d.y - f.top, k = d.width + f.left + f.right, l = d.height + f.top + f.bottom, m = d.right + f.right;
            f = d.bottom + f.bottom;
            var n = e.x;
            d = e.y;
            var p = e.width, q = e.height, r = e.right, u = e.bottom;
            e = this.scale;
            var w = a1.scrollLeft;
            if (this.sn) switch(this.au){
                case "negative":
                    w = w + a1.scrollWidth - a1.clientWidth;
                    break;
                case "reverse":
                    w = a1.scrollWidth - w - a1.clientWidth;
            }
            var v = w;
            p < k || q < l ? (w = J.allocAt(this.position.x, this.position.y), this.allowHorizontalScroll && this.iu !== v && (w.x = v / e + g, this.iu = v), this.allowVerticalScroll && this.ku !== a1.scrollTop && (w.y = a1.scrollTop / e + h, this.ku = a1.scrollTop), this.position = w, J.free(w), this.Ee = this.pr = !1) : (w = J.alloc(), a1.uy && this.allowHorizontalScroll && (g < n && (this.position = w.h(v + g, this.position.y)), m > r && (this.position = w.h(-(b.scrollWidth - this.Aa) + v - this.Aa / e + m, this.position.y))), a1.vy && this.allowVerticalScroll && (h < d && (this.position = w.h(this.position.x, a1.scrollTop + h)), f > u && (this.position = w.h(this.position.x, -(b.scrollHeight - this.ya) + a1.scrollTop - this.ya / e + f))), J.free(w), this.vd = !0, this.Ee = this.pr = !1, d = this.documentBounds, e = this.viewportBounds, m = d.right, r = e.right, f = d.bottom, u = e.bottom, g = d.x, n = e.x, h = d.y, d = e.y, p >= k && g >= n && m <= r && (c.style.width = "1px"), q >= l && h >= d && f <= u && (c.style.height = "1px"));
        }
    };
    Q.prototype.computeBounds = function(a1) {
        void 0 === a1 && (a1 = new N);
        lh(this);
        return ej(this, a1);
    };
    function ej(a1, b) {
        if (a1.fixedBounds.w()) return b.assign(a1.fixedBounds), b.Bo(a1.zb), b;
        for(var c = !0, d = a1.Wa.s, e = d.length, f = 0; f < e; f++){
            var g = d[f];
            if (g.visible && g.isInDocumentBounds) {
                g = g.Pa.s;
                for(var h = g.length, k = 0; k < h; k++){
                    var l = g[k];
                    l.isInDocumentBounds && l.isVisible() && (l = l.actualBounds, l.w() && (c ? (c = !1, b.assign(l)) : b.ed(l)));
                }
            }
        }
        c && b.h(0, 0, 0, 0);
        b.Bo(a1.zb);
        return b;
    }
    Q.prototype.computePartsBounds = function(a1, b) {
        void 0 === b && (b = !1);
        var c = null;
        if (Aa(a1)) for(var d = 0; d < a1.length; d++){
            var e = a1[d];
            !b && e instanceof T || (e.Va(), null === c ? c = e.actualBounds.copy() : c.ed(e.actualBounds));
        }
        else for(a1 = a1.iterator; a1.next();)d = a1.value, !b && d instanceof T || (d.Va(), null === c ? c = d.actualBounds.copy() : c.ed(d.actualBounds));
        return null === c ? new N(NaN, NaN, 0, 0) : c;
    };
    function fj(a1, b) {
        if ((b || a1.hf) && !a1.wb && null !== a1.ta && a1.documentBounds.w()) {
            a1.wb = !0;
            if (b) {
                var c = a1.initialPosition;
                if (c.w()) {
                    a1.wb = !1;
                    a1.position = c;
                    return;
                }
                c = J.alloc();
                c.xi(a1.documentBounds, a1.initialDocumentSpot);
                var d = a1.viewportBounds;
                d = N.allocAt(0, 0, d.width, d.height);
                var e = J.alloc();
                e.xi(d, a1.initialViewportSpot);
                e.h(c.x - e.x, c.y - e.y);
                a1.position = e;
                N.free(d);
                J.free(e);
                J.free(c);
            }
            c = a1.yh;
            b && a1.Fg !== qh && (c = a1.Fg);
            var f = c !== qh ? gj(a1, c) : a1.scale;
            c = a1.pa.x;
            d = a1.pa.y;
            e = a1.Aa / f;
            var g = a1.ya / f, h = a1.yk, k = a1.oq;
            b && !h.sb() && (k.sb() || k.Yb()) && (h = k.Yb() ? wc : k);
            hj(a1, a1.documentBounds, e, g, h, b);
            b = a1.scale;
            a1.scale = f;
            a1.wb = !1;
            f = a1.viewportBounds;
            if (!(K.B(f.x, c) && K.B(f.y, d) && K.B(f.width, e) && K.B(f.height, g))) a1.onViewportBoundsChanged(new N(c, d, e, g), f, b, !1);
        }
    }
    function gj(a1, b) {
        var c = a1.Op;
        if (null === a1.ta) return c;
        a1.Va();
        var d = a1.documentBounds;
        if (!d.w()) return c;
        var e = d.width;
        d = d.height;
        var f = a1.Aa + (a1.gf ? a1.Eb : 0), g = a1.ya + (a1.Be ? a1.Eb : 0), h = f / e, k = g / d;
        return b === ij ? (b = Math.min(k, h), b > c && (b = c), b < a1.minScale && (b = a1.minScale), b > a1.maxScale && (b = a1.maxScale), b) : b === jj ? (b = k > h ? (g - a1.Eb) / d : (f - a1.Eb) / e, b > c && (b = c), b < a1.minScale && (b = a1.minScale), b > a1.maxScale && (b = a1.maxScale), b) : a1.scale;
    }
    Q.prototype.zoomToFit = function() {
        var a1 = this.sj;
        this.sj = Rh;
        this.scale = gj(this, ij);
        a1 !== Rh && (fj(this, !1), hj(this, this.documentBounds, this.Aa / this.Ca, this.ya / this.Ca, this.yk, !1));
        this.sj = a1;
    };
    t = Q.prototype;
    t.BA = function(a1, b) {
        void 0 === b && (b = ij);
        var c = a1.width, d = a1.height;
        if (!(0 === c || 0 === d || isNaN(c) && isNaN(d))) {
            var e = 1;
            if (b === ij || b === jj) {
                if (isNaN(c)) e = this.viewportBounds.height * this.scale / d;
                else if (isNaN(d)) e = this.viewportBounds.width * this.scale / c;
                else {
                    e = this.Aa;
                    var f = this.ya;
                    e = b === jj ? f / d > e / c ? (f - (this.Be ? this.Eb : 0)) / d : (e - (this.gf ? this.Eb : 0)) / c : Math.min(f / d, e / c);
                }
            }
            this.scale = e;
            this.position = new J(a1.x, a1.y);
        }
    };
    t.Jy = function(a1, b) {
        this.Va();
        var c = this.documentBounds, d = this.viewportBounds;
        this.position = new J(c.x + (a1.x * c.width + a1.offsetX) - (b.x * d.width - b.offsetX), c.y + (a1.y * c.height + a1.offsetY) - (b.y * d.height - b.offsetY));
    };
    t.zz = function(a1) {
        if (a1 instanceof Y) {
            this.cq = a1;
            var b = J.alloc();
            this.eq = this.np(a1.ga(sc, b));
            J.free(b);
        } else this.cq = null, this.eq = tb;
    };
    function hj(a1, b, c, d, e, f) {
        var g = J.allocAt(a1.pa.x, a1.pa.y), h = g.x, k = g.y;
        if (null !== a1.cq) {
            var l = J.alloc();
            l = a1.cq.ga(sc, l);
            h = l.x - a1.eq.x / a1.scale;
            k = l.y - a1.eq.y / a1.scale;
            e = rc;
            J.free(l);
        }
        if (f || a1.scrollMode === Rh) e.sb() && (c > b.width && (h = b.x + (e.x * b.width + e.offsetX) - (e.x * c - e.offsetX)), d > b.height && (k = b.y + (e.y * b.height + e.offsetY) - (e.y * d - e.offsetY))), e = a1.rj, f = c - b.width, c < b.width + e.left + e.right ? (h = Math.min(h + c / 2, b.right + Math.max(f, e.right) - c / 2), h = Math.max(h, b.left - Math.max(f, e.left) + c / 2), h -= c / 2) : h > b.left ? h = b.left : h < b.right - c && (h = b.right - c), c = d - b.height, d < b.height + e.top + e.bottom ? (k = Math.min(k + d / 2, b.bottom + Math.max(c, e.bottom) - d / 2), k = Math.max(k, b.top - Math.max(c, e.top) + d / 2), k -= d / 2) : k > b.top ? k = b.top : k < b.bottom - d && (k = b.bottom - d);
        g.x = isFinite(h) ? h : -a1.zb.left;
        g.y = isFinite(k) ? k : -a1.zb.top;
        null !== a1.positionComputation && (b = a1.positionComputation(a1, g), g.x = b.x, g.y = b.y);
        Mh(a1.Yd, a1.pa, g);
        a1.pa.h(g.x, g.y);
        Ni(a1);
        J.free(g);
    }
    t.Nl = function(a1, b) {
        void 0 === b && (b = !0);
        if (b) {
            if (a1 = qf(this, a1, function(a1) {
                return a1.part;
            }, function(a1) {
                return a1.canSelect();
            }), a1 instanceof U) return a1;
        } else if (a1 = qf(this, a1, function(a1) {
            return a1.part;
        }), a1 instanceof U) return a1;
        return null;
    };
    t.jc = function(a1, b, c) {
        void 0 === b && (b = null);
        void 0 === c && (c = null);
        lh(this);
        for(var d = this.Wa.iteratorBackwards; d.next();){
            var e = d.value;
            if (e.visible && (e = e.jc(a1, b, c), null !== e)) return e;
        }
        return null;
    };
    function qf(a1, b, c, d) {
        void 0 === c && (c = null);
        void 0 === d && (d = null);
        lh(a1);
        for(a1 = a1.Wa.iteratorBackwards; a1.next();){
            var e = a1.value;
            if (e.visible && !e.isTemporary && (e = e.jc(b, c, d), null !== e)) return e;
        }
        return null;
    }
    t.lz = function(a1, b, c) {
        void 0 === b && (b = !0);
        return kj(this, a1, function(a1) {
            return a1.part;
        }, b ? function(a1) {
            return a1 instanceof U && a1.canSelect();
        } : null, c);
    };
    function kj(a1, b, c, d, e) {
        void 0 === c && (c = null);
        void 0 === d && (d = null);
        e instanceof F || e instanceof H || (e = new H);
        lh(a1);
        for(a1 = a1.Wa.iteratorBackwards; a1.next();){
            var f = a1.value;
            f.visible && !f.isTemporary && f.ji(b, c, d, e);
        }
        return e;
    }
    t.ji = function(a1, b, c, d) {
        void 0 === b && (b = null);
        void 0 === c && (c = null);
        d instanceof F || d instanceof H || (d = new H);
        lh(this);
        for(var e = this.Wa.iteratorBackwards; e.next();){
            var f = e.value;
            f.visible && f.ji(a1, b, c, d);
        }
        return d;
    };
    t.ux = function(a1, b, c, d) {
        void 0 === b && (b = !1);
        void 0 === c && (c = !0);
        return lj(this, a1, function(a1) {
            return a1 instanceof U && (!c || a1.canSelect());
        }, b, d);
    };
    t.Cf = function(a1, b, c, d, e) {
        void 0 === b && (b = null);
        void 0 === c && (c = null);
        void 0 === d && (d = !1);
        e instanceof F || e instanceof H || (e = new H);
        lh(this);
        for(var f = this.Wa.iteratorBackwards; f.next();){
            var g = f.value;
            g.visible && g.Cf(a1, b, c, d, e);
        }
        return e;
    };
    t.Nu = function(a1, b, c, d, e, f) {
        var g = new H;
        lh(this);
        for(var h = this.Wa.iteratorBackwards; h.next();){
            var k = h.value;
            k.visible && k.Nu(a1, b, c, d, g, e, f);
        }
        return g;
    };
    function lj(a1, b, c, d, e) {
        var f = null;
        void 0 === f && (f = null);
        void 0 === c && (c = null);
        void 0 === d && (d = !1);
        e instanceof F || e instanceof H || (e = new H);
        lh(a1);
        for(a1 = a1.Wa.iteratorBackwards; a1.next();){
            var g = a1.value;
            g.visible && !g.isTemporary && g.Cf(b, f, c, d, e);
        }
        return e;
    }
    t.mz = function(a1, b, c, d, e) {
        void 0 === c && (c = !0);
        void 0 === d && (d = !0);
        return mj(this, a1, b, function(a1) {
            return a1 instanceof U && (!d || a1.canSelect());
        }, c, e);
    };
    t.og = function(a1, b, c, d, e, f) {
        void 0 === c && (c = null);
        void 0 === d && (d = null);
        void 0 === e && (e = !0);
        if (!1 !== e && !0 !== e) {
            if (e instanceof F || e instanceof H) f = e;
            e = !0;
        }
        f instanceof F || f instanceof H || (f = new H);
        lh(this);
        for(var g = this.Wa.iteratorBackwards; g.next();){
            var h = g.value;
            h.visible && h.og(a1, b, c, d, e, f);
        }
        return f;
    };
    function mj(a1, b, c, d, e, f) {
        var g = null;
        void 0 === g && (g = null);
        void 0 === d && (d = null);
        void 0 === e && (e = !0);
        if (!1 !== e && !0 !== e) {
            if (e instanceof F || e instanceof H) f = e;
            e = !0;
        }
        f instanceof F || f instanceof H || (f = new H);
        lh(a1);
        for(a1 = a1.Wa.iteratorBackwards; a1.next();){
            var h = a1.value;
            h.visible && !h.isTemporary && h.og(b, c, g, d, e, f);
        }
        return f;
    }
    Q.prototype.acceptEvent = function(a1) {
        return Ti(this, a1, a1 instanceof MouseEvent);
    };
    function Ti(a1, b, c) {
        var d = a1.Qg;
        a1.Qg = a1.cj;
        a1.cj = d;
        d.diagram = a1;
        d.event = b;
        c ? Wi(a1, b, d) : (d.viewPoint = a1.Qg.viewPoint, d.documentPoint = a1.Qg.documentPoint);
        a1 = 0;
        b.ctrlKey && (a1 += 1);
        b.altKey && (a1 += 2);
        b.shiftKey && (a1 += 4);
        b.metaKey && (a1 += 8);
        d.modifiers = a1;
        d.button = b.button;
        void 0 !== b.buttons && (d.buttons = b.buttons);
        Oa && 0 === b.button && b.ctrlKey && (d.button = 2);
        d.down = !1;
        d.up = !1;
        d.clickCount = 1;
        d.delta = 0;
        d.handled = !1;
        d.bubbles = !1;
        d.timestamp = b.timeStamp;
        d.isMultiTouch = !1;
        d.targetDiagram = Xi(b, b.target);
        d.targetObject = null;
        return d;
    }
    function Xi(a1, b) {
        if (null === b) return null;
        if (b = b.H) return b;
        (b = a1.path) || "function" !== typeof a1.composedPath || (b = a1.composedPath());
        return b && b[0] && b[0].H ? b[0].H : null;
    }
    function Vi(a1, b, c, d, e, f) {
        var g = a1.Qg;
        a1.Qg = a1.cj;
        a1.cj = g;
        g.diagram = a1;
        g.clickCount = 1;
        a1 = g.delta = 0;
        b.ctrlKey && (a1 += 1);
        b.altKey && (a1 += 2);
        b.shiftKey && (a1 += 4);
        b.metaKey && (a1 += 8);
        g.modifiers = a1;
        g.event = b;
        g.timestamp = b.timeStamp;
        g.button = b.button;
        g.buttons = b.buttons;
        Oa && 0 === b.button && b.ctrlKey && (g.button = 2);
        g.down = c;
        g.up = d;
        g.handled = !1;
        g.bubbles = e;
        g.isMultiTouch = f;
        return g;
    }
    function Ui(a1, b) {
        if (a1.bubbles) return !0;
        void 0 !== b.stopPropagation && b.stopPropagation();
        !1 !== b.cancelable && b.preventDefault();
        b.cancelBubble = !0;
        return !1;
    }
    Q.prototype.Qz = function(a1) {
        var b = this.H;
        if (!this.H.isEnabled) return !1;
        var c = Ti(b, a1, !1);
        c.key = String.fromCharCode(a1.which);
        c.down = !0;
        switch(a1.which){
            case 8:
                c.key = "Backspace";
                break;
            case 33:
                c.key = "PageUp";
                break;
            case 34:
                c.key = "PageDown";
                break;
            case 35:
                c.key = "End";
                break;
            case 36:
                c.key = "Home";
                break;
            case 37:
                c.key = "Left";
                break;
            case 38:
                c.key = "Up";
                break;
            case 39:
                c.key = "Right";
                break;
            case 40:
                c.key = "Down";
                break;
            case 45:
                c.key = "Insert";
                break;
            case 46:
                c.key = "Del";
                break;
            case 48:
                c.key = "0";
                break;
            case 187:
            case 61:
            case 107:
                c.key = "Add";
                break;
            case 189:
            case 173:
            case 109:
                c.key = "Subtract";
                break;
            case 27:
                c.key = "Esc";
        }
        b.doKeyDown();
        return Ui(c, a1);
    };
    Q.prototype.Rz = function(a1) {
        var b = this.H;
        if (!b.isEnabled) return !1;
        var c = Ti(b, a1, !1);
        c.key = String.fromCharCode(a1.which);
        c.up = !0;
        switch(a1.which){
            case 8:
                c.key = "Backspace";
                break;
            case 33:
                c.key = "PageUp";
                break;
            case 34:
                c.key = "PageDown";
                break;
            case 35:
                c.key = "End";
                break;
            case 36:
                c.key = "Home";
                break;
            case 37:
                c.key = "Left";
                break;
            case 38:
                c.key = "Up";
                break;
            case 39:
                c.key = "Right";
                break;
            case 40:
                c.key = "Down";
                break;
            case 45:
                c.key = "Insert";
                break;
            case 46:
                c.key = "Del";
        }
        b.doKeyUp();
        return Ui(c, a1);
    };
    Q.prototype.bz = function(a1) {
        var b = this.H;
        if (!b.isEnabled) return !1;
        var c = Ti(b, a1, !0);
        null !== b.mouseEnter && b.mouseEnter(c);
        b.currentTool.standardMouseOver();
        return Ui(c, a1);
    };
    Q.prototype.cz = function(a1) {
        var b = this.H;
        if (!b.isEnabled) return !1;
        var c = Ti(b, a1, !0);
        null !== b.mouseLeave && b.mouseLeave(c);
        return Ui(c, a1);
    };
    Q.prototype.getMouse = function(a1) {
        var b = this.ta;
        if (null === b) return new J(0, 0);
        var c = b.getBoundingClientRect();
        b = a1.clientX - this.Aa / c.width * c.left;
        a1 = a1.clientY - this.ya / c.height * c.top;
        return null !== this.Bb ? xb(new J(b, a1), this.Bb) : new J(b, a1);
    };
    function Wi(a1, b, c) {
        var d = a1.ta, e = a1.Aa, f = a1.ya, g = 0, h = 0;
        null !== d && (d = d.getBoundingClientRect(), g = b.clientX - e / d.width * d.left, h = b.clientY - f / d.height * d.top);
        c.viewPoint.h(g, h);
        null !== a1.Bb ? (b = J.allocAt(g, h), a1.Bb.Cd(b), c.documentPoint.assign(b), J.free(b)) : c.documentPoint.h(g, h);
    }
    function $d(a1, b, c) {
        if (null !== a1.oj[0]) {
            b = a1.oj[b];
            var d = a1.ta;
            null !== d && (d = d.getBoundingClientRect(), c.h(b.clientX - a1.Aa / d.width * d.left, b.clientY - a1.ya / d.height * d.top));
        }
    }
    Q.prototype.Ya = function() {
        this.Zi || (this.Zi = !0, this.ac(!1));
    };
    function nj(a1) {
        a1.ld || lh(a1);
        a1.Va();
    }
    Q.prototype.redraw = function() {
        this.wb || this.ld || (this.N(), this.bd());
    };
    t = Q.prototype;
    t.Pz = function() {
        return this.kg;
    };
    t.Xy = function(a1) {
        void 0 === a1 && (a1 = null);
        var b = this.animationManager, c = b.isEnabled;
        b.Cc();
        b.isEnabled = !1;
        yf(this);
        this.hf = !1;
        this.cu = new J(NaN, NaN);
        b.isEnabled = c;
        this.ld = !0;
        var d = this;
        null !== a1 && ta(function() {
            d.ld = !1;
            kh(b, "Model");
            a1(d);
        }, 1);
    };
    t.ac = function(a1) {
        void 0 === a1 && (a1 = !1);
        if (!0 !== this.kg && !(this.wb || !1 === a1 && this.ld)) {
            this.kg = !0;
            var b = this;
            x.requestAnimationFrame(function() {
                b.kg && b.bd();
            });
        }
    };
    t.bd = function() {
        if (!this.en || this.kg) this.en && (this.en = !1), yf(this);
    };
    function oj(a1, b, c) {
        !a1.Ee || a1.wb || a1.animationManager.defaultAnimation.isAnimating || dj(a1) || (b && lh(a1), c && fj(a1, !1));
    }
    function yf(a1, b) {
        if (!a1.ld && (a1.kg = !1, null !== a1.Ka || a1.vo.w())) {
            a1.ld = !0;
            var c = a1.animationManager, d = a1.Wn;
            if (!c.isAnimating && 0 !== d.length) {
                for(var e = d.s, f = e.length, g = 0; g < f; g++){
                    var h = e[g];
                    pj(h, !1);
                    h.v();
                }
                d.clear();
            }
            d = a1.ow;
            0 < d.count && (d.each(function(a1) {
                a1.Nv();
            }), d.clear());
            e = d = !1;
            c.defaultAnimation.isAnimating && (e = !0, d = a1.skipsUndoManager, a1.skipsUndoManager = !0);
            c.Ab || rh(a1);
            oj(a1, !1, !0);
            null !== a1.fe && (a1.fe.visible && !a1.lq && (qj(a1), a1.lq = !0), !a1.fe.visible && a1.lq && (a1.lq = !1));
            lh(a1);
            f = !1;
            if (!a1.hf || a1.xh) a1.hf ? rj(a1, !a1.Ik) : (a1.Ea("Initial Layout"), !1 === c.isEnabled && c.Cc(), rj(a1, !1)), f = !0;
            a1.Ik = !1;
            lh(a1);
            a1.nu || nj(a1);
            oj(a1, !0, !1);
            g = !1;
            f ? (c = N.alloc(), c.assign(a1.viewportBounds), a1.hf || (g = a1.hf = !0, a1.skipsUndoManager || (a1.undoManager.isPendingClear = !0), a1.undoManager.isPendingUnmodified = !0, sj(a1)), a1.R("LayoutCompleted"), oj(a1, !0, !1), N.free(c)) : c.Nk && c.Qw && (a1.Fg !== qh ? a1.scale = gj(a1, a1.Fg) : a1.yh !== qh ? a1.scale = gj(a1, a1.yh) : (c = a1.initialScale, isFinite(c) && 0 < c && (a1.scale = c)), fj(a1, !0));
            f && g && a1.eb("Initial Layout");
            lh(a1);
            b || a1.hc(a1.ib);
            e && (a1.skipsUndoManager = d);
            a1.ld = !1;
        }
    }
    function sj(a1) {
        if (a1.Fg !== qh) a1.scale = gj(a1, a1.Fg);
        else if (a1.yh !== qh) a1.scale = gj(a1, a1.yh);
        else {
            var b = a1.initialScale;
            isFinite(b) && 0 < b && (a1.scale = b);
        }
        fj(a1, !0);
        b = a1.Wa.s;
        a1.Fd(b, b.length, a1, a1.viewportBounds);
        a1.R("InitialLayoutCompleted");
        a1.cu.assign(a1.pa);
        qj(a1);
    }
    function lh(a1) {
        if (0 !== a1.De.count && (a1.ld || !a1.animationManager.isTicking)) {
            for(var b = 0; 23 > b; b++){
                var c = a1.De.iterator;
                if (null === c || 0 === a1.De.count) break;
                a1.De = new H;
                a1.Nv(c, a1.De);
            }
            a1.nodes.each(function(a1) {
                a1 instanceof pf && 0 !== (a1.U & 65536) !== !1 && (a1.U = a1.U ^ 65536);
            });
        }
    }
    t.Nv = function(a1, b) {
        for(a1.reset(); a1.next();){
            var c = a1.value;
            !c.Zc() || c instanceof pf || (c.si() ? (c.measure(Infinity, Infinity), c.arrange()) : b.add(c));
        }
        for(a1.reset(); a1.next();)c = a1.value, c instanceof pf && c.isVisible() && tj(this, c);
        for(a1.reset(); a1.next();)c = a1.value, c instanceof T && c.isVisible() && (c.si() ? (c.measure(Infinity, Infinity), c.arrange()) : b.add(c));
        for(a1.reset(); a1.next();)c = a1.value, c instanceof te && c.isVisible() && (c.si() ? (c.measure(Infinity, Infinity), c.arrange()) : b.add(c));
    };
    function tj(a1, b) {
        for(var c = Ea(), d = Ea(), e = b.memberParts; e.next();){
            var f = e.value;
            f.isVisible() && (f instanceof pf ? (uj(f) || vj(f) || wj(f)) && tj(a1, f) : f instanceof T ? f.fromNode === b || f.toNode === b ? d.push(f) : c.push(f) : (f.measure(Infinity, Infinity), f.arrange()));
        }
        a1 = c.length;
        for(e = 0; e < a1; e++)f = c[e], f.measure(Infinity, Infinity), f.arrange();
        Ga(c);
        b.measure(Infinity, Infinity);
        b.arrange();
        a1 = d.length;
        for(b = 0; b < a1; b++)c = d[b], c.measure(Infinity, Infinity), c.arrange();
        Ga(d);
    }
    t.Fd = function(a1, b, c, d) {
        if (this.vd || this.animationManager.isAnimating) for(var e = 0; e < b; e++)a1[e].Fd(c, d);
    };
    t.hc = function(a1) {
        if (null !== this.Ka) {
            if (null === this.ta && C("No canvas specified"), "svg" === this.ml) {
                if (null !== this.Ka) {
                    var b = this.animationManager;
                    if (!b.Ab && (!b.isAnimating || b.isTicking)) {
                        xj(this);
                        var c = this.Aa, d = this.ya;
                        a1.Gv.resize(c, d, c, d);
                        c = this.Wa.s;
                        d = c.length;
                        this.Fd(c, d, this, this.viewportBounds);
                        if (this.Fc || b.isAnimating) {
                            b = this.pa;
                            var e = this.Ca, f = Math.round(b.x * e) / e, g = Math.round(b.y * e) / e, h = this.Bb;
                            h.reset();
                            1 !== e && h.scale(e);
                            0 === b.x && 0 === b.y || h.translate(-f, -g);
                            a1.ti = null;
                            yj(a1, h.m11, h.m12, h.m21, h.m22, h.dx, h.dy);
                            1 !== this.pb && (a1.globalAlpha = this.pb);
                            zj(this, a1);
                            b = this.Nb;
                            this.ta.context.setTransform(b, 0, 0, b, 0, 0);
                            this.ta.context.clearRect(0, 0, this.Aa, this.ya);
                            for(b = 0; b < d; b++)c[b].hc(a1, this);
                            a1 = !1;
                            this.Yf ? Aj(this.Yf, this) && (a1 = this.Up()) : a1 = !0;
                            a1 && (ld.prototype.Cd = ld.prototype.Eu);
                            this.Fc = this.vd = !1;
                        }
                    }
                }
            } else a: if (f = this.animationManager, !f.Ab && (!f.isAnimating || f.isTicking) && (c = new Date, xj(this), "0" !== this.Ka.style.opacity)) {
                d = a1 !== this.ib;
                b = this.Wa.s;
                e = b.length;
                this.Fd(b, e, this, this.viewportBounds);
                if (d) a1.Vc(!0), this.vd = !0;
                else if (!this.Fc && !f.isAnimating) break a;
                f = this.Bb;
                f.reset();
                g = this.Nb;
                h = this.pa;
                var k = this.Ca, l = Math.round(h.x * k) / k, m = Math.round(h.y * k) / k;
                1 !== k && f.scale(k);
                0 === h.x && 0 === h.y || f.translate(-l, -m);
                a1.setTransform(g, 0, 0, g, 0, 0);
                a1.clearRect(0, 0, this.Aa, this.ya);
                1 !== this.pb && (a1.globalAlpha = this.pb);
                zj(this, a1);
                for(h = 0; h < e; h++)a1.setTransform(g, 0, 0, g, 0, 0), a1.transform(f.m11, f.m12, f.m21, f.m22, f.dx, f.dy), a1.yc(), b[h].hc(a1, this);
                b = !1;
                this.Yf ? Aj(this.Yf, this) && (b = this.Up()) : b = !0;
                b && (ld.prototype.Cd = ld.prototype.Eu);
                d ? (this.ib.Vc(!0), this.vd = !0) : this.Fc = this.vd = !1;
                b = +new Date - +c;
                d = Wa && Wa.nx;
                c = this.zw;
                if (d || null === this.Yh) {
                    c[this.Sq] = b;
                    this.Sq = (this.Sq + 1) % c.length;
                    for(e = b = 0; e < c.length; e++)b += c[e];
                    this.Rq = b / c.length;
                }
                1 !== this.pb && (a1.globalAlpha = 1);
                if (d) for(a1.setTransform(1, 0, 0, 1, 0, 0), d = 0; d < c.length; d++)a1.fillText(c[d].toString(), 20, 150 + +(20 * d));
            }
        }
    };
    function Bj(a1, b, c, d, e, f, g, h, k, l) {
        if (null !== a1.Ka) {
            null === a1.ta && C("No canvas specified");
            void 0 === g && (g = null);
            void 0 === h && (h = null);
            void 0 === k && (k = !1);
            void 0 === l && (l = !1);
            xj(a1);
            a1.ib.Vc(!0);
            a1.vd = !0;
            a1.$i = !0;
            var m = a1.Ca;
            a1.Ca = e;
            var n = a1.Wa.s, p = n.length;
            try {
                var q = new N(f.x, f.y, d.width / e, d.height / e), r = q.copy();
                r.Bo(c);
                qj(a1, r);
                lh(a1);
                a1.Fd(n, p, a1, q);
                b.setTransform(1, 0, 0, 1, 0, 0);
                b.clearRect(0, 0, d.width, d.height);
                null !== h && "" !== h && (b.fillStyle = h, b.ox(0, 0, d.width, d.height));
                var u = a1.Nb;
                b.scale(u, u);
                var w = ld.alloc();
                w.reset();
                w.translate(c.left, c.top);
                w.scale(e);
                0 === f.x && 0 === f.y || w.translate(-f.x, -f.y);
                b.setTransform(w.m11, w.m12, w.m21, w.m22, w.dx, w.dy);
                b.yc();
                b instanceof ii && yj(b, w.m11, w.m12, w.m21, w.m22, w.dx, w.dy);
                ld.free(w);
                zj(a1, b);
                b.globalAlpha = a1.pb;
                var v = a1.Pj("Grid");
                if (g) {
                    var y = new H, z = g.iterator;
                    for(z.reset(); z.next();){
                        var A = z.value;
                        A instanceof U && (l || A.layer !== v) && (A.Fj(), y.add(A));
                    }
                    for(l = 0; l < p; l++)hi(n[l], b, a1, y, k);
                    y.each(function(a1) {
                        return a1.Fj();
                    });
                } else for(y = 0; y < p; y++){
                    var B = n[y];
                    B === v ? l && B.hc(b, a1, !0) : B.hc(b, a1, k);
                }
                a1.$i = !1;
                a1.Yf && Aj(a1.Yf, a1) && a1.Up();
            } finally{
                a1.Ca = m, a1.ib.Vc(!0), a1.vd = !0, a1.Fd(n, p, a1, a1.viewportBounds), qj(a1), a1.ib instanceof ii && (a1.ib.Mj.PA(), a1.redraw());
            }
        }
    }
    t.Gf = function(a1) {
        return this.Rg[a1];
    };
    t.Xx = function(a1, b) {
        "minDrawingLength" === a1 && (this.Nq = b);
        this.Rg[a1] = b;
        this.redraw();
    };
    t.Tx = function() {
        this.Rg = new Ta;
        this.Rg.drawShadows = !0;
        this.Rg.textGreeking = !0;
        this.Rg.viewportOptimizations = Oa || Na ? !1 : !0;
        this.Rg.temporaryPixelRatio = !0;
        this.Rg.pictureRatioOptimization = !0;
        this.Nq = this.Rg.minDrawingLength = 1;
    };
    function zj(a1, b) {
        a1 = a1.Rg;
        null !== a1 && (void 0 !== a1.imageSmoothingEnabled && b.Wx(!!a1.imageSmoothingEnabled), a1 = a1.defaultFont, void 0 !== a1 && null !== a1 && (b.font = a1));
    }
    t.Pl = function(a1) {
        return this.nn[a1];
    };
    t.sA = function(a1, b) {
        this.nn[a1] = b;
    };
    t.Sx = function() {
        this.nn = new Ta;
        this.nn.extraTouchArea = 10;
        this.nn.extraTouchThreshold = 10;
        this.nn.hasGestureZoom = !0;
    };
    t.set = function(a1) {
        Object.assign(this, a1);
        return this;
    };
    t.Du = function(a1) {
        return this.mm(a1);
    };
    t.mm = function(a1) {
        Cj(this, a1);
        return this;
    };
    function Cj(a1, b) {
        var c = a1 instanceof W, d = a1 instanceof Q, e;
        for(e in b){
            "" === e && C("Setting properties requires non-empty property names");
            var f = a1, g = e;
            if (c || d) {
                var h = e.indexOf(".");
                if (0 < h) {
                    var k = e.substring(0, h);
                    if (c) f = a1.fb(k);
                    else if (f = a1[k], void 0 === f || null === f) f = a1.toolManager[k];
                    za(f) ? g = e.substr(h + 1) : C("Unable to find object named: " + k + " in " + a1.toString() + " when trying to set property: " + e);
                }
            }
            if ("_" !== g[0] && !Ja(f, g)) {
                if (d && "ModelChanged" === g) {
                    a1.Yw(b[g]);
                    continue;
                } else if (d && "Changed" === g) {
                    a1.Pe(b[g]);
                    continue;
                } else if (d && Ja(a1.toolManager, g)) f = a1.toolManager;
                else if (d && Dj(a1, g)) {
                    a1.Bj(g, b[g]);
                    continue;
                } else if (a1 instanceof Z && "Changed" === g) {
                    a1.Pe(b[g]);
                    continue;
                } else C('Trying to set undefined property "' + g + '" on object: ' + f.toString());
            }
            f[g] = b[e];
            "_" === g[0] && f instanceof Y && f.Vw(g);
        }
    }
    t.bx = function() {
        if (0 !== this.Eh.count && !(1 < this.undoManager.transactionLevel)) {
            for(; 0 < this.Eh.count;){
                var a1 = this.Eh;
                this.Eh = new ob;
                for(a1 = a1.iterator; a1.next();){
                    var b = a1.key;
                    b.Wo(a1.value);
                    b.rc();
                }
            }
            this.N();
        }
    };
    t.N = function(a1) {
        if (void 0 === a1) this.Fc = !0, this.ac();
        else {
            var b = this.viewportBounds;
            a1.w() && b.Yc(a1) && (this.Fc = !0, this.ac());
        }
        this.R("InvalidateDraw");
    };
    Q.prototype.invalidateViewport = function(a1, b) {
        if (!0 !== this.Fc) {
            if (this.Fc = !0, "svg" === this.ml) this.bd();
            else {
                var c = !0 === this.Gf("temporaryPixelRatio");
                if (!0 === this.Gf("viewportOptimizations") && this.scrollMode !== Th && this.rj.hi(0, 0, 0, 0) && b.width === a1.width && b.height === a1.height) {
                    var d = this.scale, e = Math.max(a1.y, b.y), f = Math.min(a1.y + a1.height, b.y + b.height);
                    if (0 < Math.max(0, Math.min(a1.x + a1.width, b.x + b.width) - Math.max(a1.x, b.x)) * d && 0 < Math.max(0, f - e) * d) {
                        if (!(this.ld || (this.kg = !1, null === this.Ka || (this.ld = !0, this.documentBounds.w() || (d = N.alloc(), Ej(this, this.computeBounds(d)), N.free(d)), d = this.ta, null === d || d instanceof Fj)))) {
                            var g = this.Nb;
                            e = this.Aa * g;
                            var h = this.ya * g, k = this.scale * g;
                            f = Math.round(Math.round(b.x * k) - Math.round(a1.x * k));
                            b = Math.round(Math.round(b.y * k) - Math.round(a1.y * k));
                            k = this.jw;
                            a1 = this.oy;
                            k.width !== e && (k.width = e);
                            k.height !== h && (k.height = h);
                            a1.clearRect(0, 0, e, h);
                            k = 190 * g;
                            var l = 70 * g, m = Math.max(f, 0), n = Math.max(b, 0), p = Math.floor(e - m), q = Math.floor(h - n);
                            a1.drawImage(d.Oa, m, n, p, q, 0, 0, p, q);
                            Aj(this.Yf, this) && a1.clearRect(0, 0, k, l);
                            d = Ea();
                            a1 = Ea();
                            q = Math.abs(f);
                            p = Math.abs(b);
                            var r = 0 === m ? 0 : e - q;
                            m = J.allocAt(r, 0);
                            q = J.allocAt(q + r, h);
                            a1.push(new N(Math.min(m.x, q.x), Math.min(m.y, q.y), Math.abs(m.x - q.x), Math.abs(m.y - q.y)));
                            var u = this.Bb;
                            u.reset();
                            u.scale(g, g);
                            1 !== this.Ca && u.scale(this.Ca);
                            g = this.pa;
                            (0 !== g.x || 0 !== g.y) && isFinite(g.x) && isFinite(g.y) && u.translate(-g.x, -g.y);
                            xb(m, u);
                            xb(q, u);
                            d.push(new N(Math.min(m.x, q.x), Math.min(m.y, q.y), Math.abs(m.x - q.x), Math.abs(m.y - q.y)));
                            r = 0 === n ? 0 : h - p;
                            m.h(0, r);
                            q.h(e, p + r);
                            a1.push(new N(Math.min(m.x, q.x), Math.min(m.y, q.y), Math.abs(m.x - q.x), Math.abs(m.y - q.y)));
                            xb(m, u);
                            xb(q, u);
                            d.push(new N(Math.min(m.x, q.x), Math.min(m.y, q.y), Math.abs(m.x - q.x), Math.abs(m.y - q.y)));
                            Aj(this.Yf, this) && (e = 0 < f ? 0 : -f, h = 0 < b ? 0 : -b, m.h(e, h), q.h(k + e, l + h), a1.push(new N(Math.min(m.x, q.x), Math.min(m.y, q.y), Math.abs(m.x - q.x), Math.abs(m.y - q.y))), xb(m, u), xb(q, u), d.push(new N(Math.min(m.x, q.x), Math.min(m.y, q.y), Math.abs(m.x - q.x), Math.abs(m.y - q.y))));
                            J.free(m);
                            J.free(q);
                            oj(this, !1, !0);
                            null === this.Ka && C("No div specified");
                            null === this.ta && C("No canvas specified");
                            if (!this.animationManager.Ab && (e = this.ib, this.Fc)) {
                                xj(this);
                                h = this.Nb;
                                e.setTransform(1, 0, 0, 1, 0, 0);
                                e.clearRect(0, 0, this.Aa * h, this.ya * h);
                                e.drawImage(this.jw.Oa, 0 < f ? 0 : Math.round(-f), 0 < b ? 0 : Math.round(-b));
                                f = this.pa;
                                g = this.Ca;
                                k = Math.round(f.x * g) / g;
                                l = Math.round(f.y * g) / g;
                                b = this.Bb;
                                b.reset();
                                1 !== g && b.scale(g);
                                0 === f.x && 0 === f.y || b.translate(-k, -l);
                                e.save();
                                e.beginPath();
                                f = a1.length;
                                for(g = 0; g < f; g++)k = a1[g], 0 !== k.width && 0 !== k.height && e.rect(Math.floor(k.x), Math.floor(k.y), Math.ceil(k.width), Math.ceil(k.height));
                                e.clip();
                                e.setTransform(h, 0, 0, h, 0, 0);
                                e.transform(b.m11, b.m12, b.m21, b.m22, b.dx, b.dy);
                                e.yc();
                                b = this.Wa.s;
                                f = b.length;
                                this.Fd(b, f, this, this.viewportBounds);
                                zj(this, e);
                                e.globalAlpha = this.pb;
                                for(h = 0; h < f; h++)if (g = b[h], k = d, g.visible && 0 !== g.pb) {
                                    l = gi(g, e);
                                    n = g.Yq;
                                    n.length = 0;
                                    m = this.scale;
                                    p = N.alloc();
                                    q = g.Pa.s;
                                    u = q.length;
                                    r = k.length;
                                    for(var w = 0; w < u; w++){
                                        var v = q[w], y = Gj(v, v.actualBounds);
                                        a: {
                                            for(var z = 2 / m, A = 4 / m, B = 0; B < r; B++){
                                                var D = k[B];
                                                if (0 !== D.width && 0 !== D.height && y.Vu(D.x - z, D.y - z, D.width + A, D.height + A)) {
                                                    y = !0;
                                                    break a;
                                                }
                                            }
                                            y = !1;
                                        }
                                        y && g.Nj(e, v, this, n, m, p, !0);
                                    }
                                    N.free(p);
                                    e.globalAlpha = l;
                                }
                                e.restore();
                                e.Vc(!0);
                                this.Yf && Aj(this.Yf, this) && this.Up();
                                this.Fc = this.vd = !1;
                                this.gk();
                            }
                            Ga(d);
                            Ga(a1);
                            this.ld = !1;
                        }
                    } else this.bd();
                    c && (Fe(this), this.bd(), Xe(this, !0));
                } else c ? (Fe(this), this.bd(), Xe(this, !0)) : this.bd();
            }
        }
    };
    function xj(a1) {
        !1 !== a1.on && (a1.on = !1, Qi(a1, a1.Aa, a1.ya));
    }
    function Qi(a1, b, c) {
        Ni(a1);
        var d = a1.Nb;
        a1.ta.resize(b * d, c * d, b, c) && (a1.Fc = !0, a1.ib.Vc(!0));
    }
    function dj(a1) {
        var b = a1.ta;
        if (null === b || a1.vo.w()) return !0;
        var c = a1.Aa, d = a1.ya, e = a1.Ka, f = !1, g = a1.gf ? a1.Eb : 0, h = a1.Be ? a1.Eb : 0, k = e.clientWidth || c + g, l = e.clientHeight || d + h, m = a1.viewportBounds;
        e = m.x;
        var n = m.y, p = m.width, q = m.height;
        if (k !== c + g || l !== d + h) a1.gf = !1, a1.Be = !1, h = g = 0, a1.Aa = k, a1.ya = l, f = a1.on = !0, Ni(a1);
        if (!a1.hf || !a1.viewportBounds.w()) return !0;
        var r = a1.ju, u = a1.gu;
        a1.Ee = !1;
        if (!(f || a1.gf || a1.Be || a1.ln || a1.mn)) return !0;
        var w = a1.documentBounds, v = 0, y = 0, z = 0, A = 0, B = m.width, D = m.height, M = a1.rj;
        a1.contentAlignment.sb() ? (w.width > B && (v = M.left, y = M.right), w.height > D && (z = M.top, A = M.bottom)) : (v = M.left, y = M.right, z = M.top, A = M.bottom);
        var S = w.width + v + y, R = w.height + z + A;
        M = a1.scale;
        var I = S > k / M, G = R > l / M;
        if (!(f || a1.gf || a1.Be || I || G)) return !0;
        v = w.x - v;
        k = m.x;
        y = w.right + y;
        l = m.right + g;
        z = w.y - z;
        var ca = m.y;
        w = w.bottom + A;
        m = m.bottom + h;
        var X = "1px";
        A = "1px";
        a1.scrollMode === Rh && (I || G) && (I && a1.hasHorizontalScrollbar && a1.allowHorizontalScroll && (I = 1, v + 1 < k && (I = Math.max((k - v) * M + a1.Aa, I)), y > l + 1 && (I = Math.max((y - l) * M + a1.Aa, I)), B + g + 1 < S && (I = Math.max((S - B) * M + a1.Aa, I)), X = I.toString() + "px"), G && a1.hasVerticalScrollbar && a1.allowVerticalScroll && (I = 1, z + 1 < ca && (I = Math.max((ca - z) * M + a1.ya, I)), w > m + 1 && (I = Math.max((w - m) * M + a1.ya, I)), D + h + 1 < R && (I = Math.max((R - D) * M + a1.ya, I)), A = I.toString() + "px"));
        I = "1px" !== X;
        G = "1px" !== A;
        I && G || !I && !G || (G && (l -= a1.Eb), I && (m -= a1.Eb), S < B + g || !a1.hasHorizontalScrollbar || !a1.allowHorizontalScroll || (g = 1, v + 1 < k && (g = Math.max((k - v) * M + a1.Aa, g)), y > l + 1 && (g = Math.max((y - l) * M + a1.Aa, g)), B + 1 < S && (g = Math.max((S - B) * M + a1.Aa, g)), X = g.toString() + "px"), I = "1px" !== X, g = a1.ya, I !== a1.Be && (g = I ? a1.ya - a1.Eb : a1.ya + a1.Eb), R < D + h || !a1.hasVerticalScrollbar || !a1.allowVerticalScroll || (h = 1, z + 1 < ca && (h = Math.max((ca - z) * M + g, h)), w > m + 1 && (h = Math.max((w - m) * M + g, h)), D + 1 < R && (h = Math.max((R - D) * M + g, h)), A = h.toString() + "px"), G = "1px" !== A);
        if (a1.pr && I === a1.Be && G === a1.gf) return c === a1.Aa && d === a1.ya || a1.bd(), !1;
        I !== a1.Be && ("1px" === X ? a1.ya = a1.ya + a1.Eb : a1.ya = Math.max(a1.ya - a1.Eb, 1), f = !0);
        a1.Be = I;
        u.style.width = X;
        G !== a1.gf && ("1px" === A ? a1.Aa = a1.Aa + a1.Eb : a1.Aa = Math.max(a1.Aa - a1.Eb, 1), f = !0, a1.sn && (h = J.alloc(), G ? (b.style.left = a1.Eb + "px", a1.position = h.h(a1.pa.x + a1.Eb / a1.scale, a1.pa.y)) : (b.style.left = "0px", a1.position = h.h(a1.pa.x - a1.Eb / a1.scale, a1.pa.y)), J.free(h)));
        f && Ni(a1);
        a1.gf = G;
        u.style.height = A;
        a1.fu = !0;
        f && (a1.on = !0);
        b = r.scrollLeft;
        a1.hasHorizontalScrollbar && a1.allowHorizontalScroll && (B + 1 < S ? b = (a1.position.x - v) * M : v + 1 < k ? b = r.scrollWidth - r.clientWidth : y > l + 1 && (b = a1.position.x * M));
        if (a1.sn) switch(a1.au){
            case "negative":
                b = -(r.scrollWidth - b - r.clientWidth);
                break;
            case "reverse":
                b = r.scrollWidth - b - r.clientWidth;
        }
        r.scrollLeft = b;
        a1.hasVerticalScrollbar && a1.allowVerticalScroll && (D + 1 < R ? r.scrollTop = (a1.position.y - z) * M : z + 1 < ca ? r.scrollTop = r.scrollHeight - r.clientHeight : w > m + 1 && (r.scrollTop = a1.position.y * M));
        k = a1.Aa;
        l = a1.ya;
        r.style.width = k + (a1.gf ? a1.Eb : 0) + "px";
        r.style.height = l + (a1.Be ? a1.Eb : 0) + "px";
        return c !== k || d !== l || a1.animationManager.Ab ? (c = N.allocAt(e, n, p, q), a1.onViewportBoundsChanged(c, a1.viewportBounds, M, f), N.free(c), !1) : !0;
    }
    t = Q.prototype;
    t.add = function(a1) {
        var b = a1.diagram;
        if (b !== this && (null !== b && C("Cannot add part " + a1.toString() + " to " + this.toString() + ". It is already a part of " + b.toString()), b = this.Pj(a1.layerName), null === b && (b = this.Pj("")), null === b && C('Cannot add a Part when unable find a Layer named "' + a1.layerName + '" and there is no default Layer'), a1.layer !== b)) {
            var c = b.oi(99999999, a1, a1.diagram === this);
            0 <= c && this.cb(ee, "parts", b, null, a1, null, c);
            b.isTemporary || this.Ya();
            a1.C(1);
            c = a1.layerChanged;
            null !== c && c(a1, null, b);
        }
    };
    t.oi = function(a1) {
        this.partManager.oi(a1);
        var b = this;
        Hj(a1, function(a1) {
            Ij(b, a1);
        });
        (a1 instanceof te || a1 instanceof pf && null !== a1.placeholder) && a1.v();
        null !== a1.data && Hj(a1, function(a1) {
            Jj(b.partManager, a1);
        });
        !0 !== vj(a1) && !0 !== wj(a1) || this.De.add(a1);
        Kj(a1, !0, this);
        Lj(a1) ? (a1.actualBounds.w() && this.N(Gj(a1, a1.actualBounds)), this.Ya()) : a1.isVisible() && a1.actualBounds.w() && this.N(Gj(a1, a1.actualBounds));
        this.ac();
    };
    t.qc = function(a1) {
        a1.Dj();
        this.partManager.qc(a1);
        var b = this;
        null !== a1.data && Hj(a1, function(a1) {
            Mj(b.partManager, a1, b);
        });
        this.De.remove(a1);
        Lj(a1) ? (a1.actualBounds.w() && this.N(Gj(a1, a1.actualBounds)), this.Ya()) : a1.isVisible() && a1.actualBounds.w() && this.N(Gj(a1, a1.actualBounds));
        this.ac();
    };
    t.remove = function(a1) {
        Nj(this, a1, !0);
    };
    function Nj(a1, b, c) {
        var d = b.layer;
        null !== d && d.diagram === a1 && (b.isSelected = !1, b.isHighlighted = !1, b.C(2), c && b.Kj(), c = d.qc(-1, b, !1), 0 <= c && a1.cb(fe, "parts", d, b, null, c, null), a1 = b.layerChanged, null !== a1 && a1(b, d, null));
    }
    t.Hs = function(a1, b) {
        void 0 === b && (b = !1);
        if (Aa(a1)) for(var c = a1.length, d = 0; d < c; d++){
            var e = a1[d];
            b && !e.canDelete() || this.remove(e);
        }
        else for(c = new H, c.addAll(a1), a1 = c.iterator; a1.next();)c = a1.value, b && !c.canDelete() || this.remove(c);
    };
    t.Jj = function(a1, b, c) {
        void 0 === c && (c = !1);
        return this.partManager.Jj(a1, b, c);
    };
    Q.prototype.moveParts = function(a1, b, c, d) {
        void 0 === c && (c = !1);
        void 0 === d && (d = Oj(this));
        if (null !== this.toolManager) {
            var e = new ob;
            if (null !== a1) {
                if (Aa(a1)) for(var f = 0; f < a1.length; f++)Pj(this, e, a1[f], c, d);
                else for(a1 = a1.iterator; a1.next();)Pj(this, e, a1.value, c, d);
            } else {
                for(a1 = this.parts; a1.next();)Pj(this, e, a1.value, c, d);
                for(a1 = this.nodes; a1.next();)Pj(this, e, a1.value, c, d);
                for(a1 = this.links; a1.next();)Pj(this, e, a1.value, c, d);
            }
            df(this, e, b, d, c);
        }
    };
    function Pj(a1, b, c, d, e, f) {
        if (!b.contains(c) && (void 0 === f && (f = !1), !d || f || c.canMove() || c.canCopy())) {
            if (void 0 === e && (e = Oj(a1)), c instanceof V) {
                b.add(c, a1.Pd(e, c, c.location));
                if (c instanceof pf && (null !== c.placeholder || e.dragsMembers)) for(f = c.memberParts; f.next();)Pj(a1, b, f.value, d, e, e.groupsAlwaysMove);
                for(f = c.linksConnected; f.next();){
                    var g = f.value;
                    if (!b.contains(g)) {
                        var h = g.fromNode, k = g.toNode;
                        null !== h && b.contains(h) && null !== k && b.contains(k) && Pj(a1, b, g, d, e);
                    }
                }
                if (e.dragsTree) for(c = c.Ou(); c.next();)Pj(a1, b, c.value, d, e);
            } else if (c instanceof T) for(b.add(c, a1.Pd(e, c)), c = c.labelNodes; c.next();)Pj(a1, b, c.value, d, e);
            else c instanceof te || b.add(c, a1.Pd(e, c, c.location));
        }
    }
    function df(a1, b, c, d, e) {
        if (null !== b && 0 !== b.count) {
            var f = J.alloc(), g = J.alloc();
            g.assign(c);
            isNaN(g.x) && (g.x = 0);
            isNaN(g.y) && (g.y = 0);
            (c = a1.Lr) || Ge(a1, b);
            for(var h = Ea(), k = Ea(), l = b.iterator, m = J.alloc(); l.next();){
                var n = l.key, p = l.value;
                if (n.Zc()) {
                    var q = Qj(a1, n, b);
                    if (null !== q) h.push(new Rj(n, p, q));
                    else if (!e || n.canMove()) q = p.point, f.assign(q), a1.computeMove(n, f.add(g), d, m), n.location = m, void 0 === p.shifted && (p.shifted = new J), p.shifted.assign(m.re(q));
                } else l.key instanceof T && k.push(l.sa);
            }
            J.free(m);
            e = h.length;
            for(l = 0; l < e; l++)n = h[l], f.assign(n.info.point), void 0 === n.Su.shifted && (n.Su.shifted = new J), n.node.location = f.add(n.Su.shifted);
            e = J.alloc();
            l = J.alloc();
            n = k.length;
            for(p = 0; p < n; p++){
                var r = k[p];
                q = r.key;
                if (q instanceof T) {
                    if (q.suspendsRouting) {
                        q.Tg = null;
                        m = q.fromNode;
                        var u = q.toNode;
                        if (null !== a1.draggedLink && d.dragsLink) {
                            if (u = r.value.point, null === q.dragComputation) b.add(q, a1.Pd(d, q, g)), bf(q, g.x - u.x, g.y - u.y);
                            else {
                                r = J.allocAt(0, 0);
                                (m = q.i(0)) && m.w() && r.assign(m);
                                var w = m = J.alloc().assign(r).add(g);
                                d.isGridSnapEnabled && (d.isGridSnapRealtime || a1.lastInput.up) && (w = J.alloc(), zg(a1, q, m, w, d));
                                m.assign(q.dragComputation(q, m, w)).re(r);
                                b.add(q, a1.Pd(d, q, m));
                                bf(q, m.x - u.x, m.y - u.y);
                                J.free(r);
                                J.free(m);
                                w !== m && J.free(w);
                            }
                        } else null !== m && (e.assign(m.location), w = b.I(m), null !== w && e.re(w.point)), null !== u && (l.assign(u.location), w = b.I(u), null !== w && l.re(w.point)), null !== m && null !== u ? e.Xa(l) ? (m = r.value.point, u = f, u.assign(e), u.re(m), b.add(q, a1.Pd(d, q, e)), bf(q, u.x, u.y)) : (q.suspendsRouting = !1, q.bb()) : (r = r.value.point, m = null !== m ? e : null !== u ? l : g, b.add(q, a1.Pd(d, q, m)), bf(q, m.x - r.x, m.y - r.y));
                    } else if (null === q.fromNode || null === q.toNode) m = r.value.point, b.add(q, a1.Pd(d, q, g)), bf(q, g.x - m.x, g.y - m.y);
                }
            }
            J.free(f);
            J.free(g);
            J.free(e);
            J.free(l);
            Ga(h);
            Ga(k);
            c || (lh(a1), Ue(a1, b));
        }
    }
    Q.prototype.computeMove = function(a1, b, c, d) {
        void 0 === d && (d = new J);
        d.assign(b);
        if (null === a1) return d;
        var e = b, f = c.isGridSnapEnabled;
        f && (c.isGridSnapRealtime || this.lastInput.up) && (e = J.alloc(), zg(this, a1, b, e, c));
        c = null !== a1.dragComputation ? a1.dragComputation(a1, b, e) : e;
        var g = a1.minLocation, h = g.x;
        isNaN(h) && (h = f ? Math.round(1E3 * a1.location.x) / 1E3 : a1.location.x);
        g = g.y;
        isNaN(g) && (g = f ? Math.round(1E3 * a1.location.y) / 1E3 : a1.location.y);
        var k = a1.maxLocation, l = k.x;
        isNaN(l) && (l = f ? Math.round(1E3 * a1.location.x) / 1E3 : a1.location.x);
        k = k.y;
        isNaN(k) && (k = f ? Math.round(1E3 * a1.location.y) / 1E3 : a1.location.y);
        d.h(Math.max(h, Math.min(c.x, l)), Math.max(g, Math.min(c.y, k)));
        e !== b && J.free(e);
        return d;
    };
    function Oj(a1) {
        var b = a1.toolManager.findTool("Dragging");
        return null !== b ? b.dragOptions : a1.Vm;
    }
    function zg(a1, b, c, d, e) {
        void 0 === e && (e = Oj(a1));
        d.assign(c);
        if (null !== b) {
            var f = a1.grid;
            b = e.gridSnapCellSize;
            a1 = b.width;
            b = b.height;
            var g = e.gridSnapOrigin, h = g.x;
            g = g.y;
            e = e.gridSnapCellSpot;
            if (null !== f) {
                var k = f.gridCellSize;
                isNaN(a1) && (a1 = k.width);
                isNaN(b) && (b = k.height);
                f = f.gridOrigin;
                isNaN(h) && (h = f.x);
                isNaN(g) && (g = f.y);
            }
            f = J.allocAt(0, 0);
            f.yi(0, 0, a1, b, e);
            K.Mo(c.x, c.y, h + f.x, g + f.y, a1, b, d);
            J.free(f);
        }
    }
    function Ge(a1, b) {
        if (null !== b) for(a1.Lr = !0, a1 = b.iterator; a1.next();)b = a1.key, b instanceof T && (b.suspendsRouting = !0);
    }
    function Ue(a1, b) {
        if (null !== b) {
            for(b = b.iterator; b.next();){
                var c = b.key;
                c instanceof T && (c.suspendsRouting = !1, Sj(c) && c.bb());
            }
            a1.Lr = !1;
        }
    }
    function Qj(a1, b, c) {
        b = b.containingGroup;
        if (null !== b) {
            a1 = Qj(a1, b, c);
            if (null !== a1) return a1;
            a1 = c.I(b);
            if (null !== a1) return a1;
        }
        return null;
    }
    t = Q.prototype;
    t.Pd = function(a1, b, c) {
        if (void 0 === c) return new Je(pb);
        var d = a1.isGridSnapEnabled;
        a1.groupsSnapMembers || null === b.containingGroup || (d = !1);
        return d ? new Je(new J(Math.round(1E3 * c.x) / 1E3, Math.round(1E3 * c.y) / 1E3)) : new Je(c.copy());
    };
    function Tj(a1, b, c) {
        null !== b.diagram && b.diagram !== a1 && C("Cannot share a Layer with another Diagram: " + b + " of " + b.diagram);
        null === c ? null !== b.diagram && C("Cannot add an existing Layer to this Diagram again: " + b) : (c.diagram !== a1 && C("Existing Layer must be in this Diagram: " + c + " not in " + c.diagram), b === c && C("Cannot move a Layer before or after itself: " + b));
        if (b.diagram !== a1) {
            b = b.name;
            a1 = a1.Wa;
            c = a1.count;
            for(var d = 0; d < c; d++)a1.M(d).name === b && C("Cannot add Layer with the name '" + b + "'; a Layer with the same name is already present in this Diagram.");
        }
    }
    t.zl = function(a1) {
        Tj(this, a1, null);
        a1.Xe(this);
        var b = this.Wa, c = b.count - 1;
        if (!a1.isTemporary) for(; 0 <= c && b.M(c).isTemporary;)c--;
        b.Hb(c + 1, a1);
        null !== this.dc && this.cb(ee, "layers", this, null, a1, null, c + 1);
        this.N();
        this.Ya();
        return this;
    };
    t.Ww = function(a1, b) {
        Tj(this, a1, b);
        a1.Xe(this);
        var c = this.Wa, d = c.indexOf(a1);
        0 <= d && (c.remove(a1), null !== this.dc && this.cb(fe, "layers", this, a1, null, d, null));
        var e = c.count, f;
        for(f = 0; f < e; f++)if (c.M(f) === b) {
            c.Hb(f, a1);
            break;
        }
        null !== this.dc && this.cb(ee, "layers", this, null, a1, null, f);
        this.N();
        0 > d && this.Ya();
        return this;
    };
    t.Cy = function(a1, b) {
        Tj(this, a1, b);
        a1.Xe(this);
        var c = this.Wa, d = c.indexOf(a1);
        0 <= d && (c.remove(a1), null !== this.dc && this.cb(fe, "layers", this, a1, null, d, null));
        var e = c.count, f;
        for(f = 0; f < e; f++)if (c.M(f) === b) {
            c.Hb(f + 1, a1);
            break;
        }
        null !== this.dc && this.cb(ee, "layers", this, null, a1, null, f + 1);
        this.N();
        0 > d && this.Ya();
        return this;
    };
    t.kA = function(a1) {
        a1.diagram !== this && C("Cannot remove a Layer from another Diagram: " + a1 + " of " + a1.diagram);
        if ("" !== a1.name) {
            var b = this.Wa, c = b.indexOf(a1);
            if (b.remove(a1)) {
                for(b = a1.Pa.copy().iterator; b.next();){
                    var d = b.value, e = d.layerName;
                    e !== a1.name ? d.layerName = e : d.layerName = "";
                }
                null !== this.dc && this.cb(fe, "layers", this, a1, null, c, null);
                this.N();
                this.Ya();
            }
        }
    };
    t.Pj = function(a1) {
        for(var b = this.layers; b.next();){
            var c = b.value;
            if (c.name === a1) return c;
        }
        return null;
    };
    t.Yw = function(a1) {
        null === this.pf && (this.pf = new F);
        this.pf.add(a1);
        this.model.Pe(a1);
        return this;
    };
    t.mA = function(a1) {
        null !== this.pf && (this.pf.remove(a1), 0 === this.pf.count && (this.pf = null));
        this.model.hk(a1);
    };
    t.Pe = function(a1) {
        null === this.zg && (this.zg = new F);
        this.zg.add(a1);
        return this;
    };
    t.hk = function(a1) {
        null !== this.zg && (this.zg.remove(a1), 0 === this.zg.count && (this.zg = null));
    };
    t.cs = function(a1) {
        this.skipsUndoManager || this.model.skipsUndoManager || this.model.undoManager.Tu(a1);
        a1.change !== de && (this.isModified = !0);
        if (null !== this.zg) for(var b = this.zg, c = b.length, d = 0; d < c; d++)b.M(d)(a1);
    };
    t.cb = function(a1, b, c, d, e, f, g) {
        void 0 === f && (f = null);
        void 0 === g && (g = null);
        var h = new be;
        h.diagram = this;
        h.change = a1;
        h.propertyName = b;
        h.object = c;
        h.oldValue = d;
        h.oldParam = f;
        h.newValue = e;
        h.newParam = g;
        this.cs(h);
    };
    t.g = function(a1, b, c, d, e) {
        this.cb(ce, a1, this, b, c, d, e);
    };
    Q.prototype.changeState = function(a1, b) {
        if (null !== a1 && a1.diagram === this) {
            var c = this.skipsModelSourceBindings;
            try {
                this.skipsModelSourceBindings = !0;
                var d = a1.change;
                if (d === ce) {
                    var e = a1.object;
                    Uj(e, a1.propertyName, a1.I(b));
                    if (e instanceof Y) {
                        var f = e.part;
                        null !== f && f.Xb();
                    }
                    this.isModified = !0;
                } else if (d === ee) {
                    var g = a1.object, h = a1.newParam, k = a1.newValue;
                    if (g instanceof W) {
                        if ("number" === typeof h && k instanceof Y) {
                            b ? g.qc(h) : g.Hb(h, k);
                            var l = g.part;
                            null !== l && l.Xb();
                        } else "number" === typeof h && k instanceof Vj && (k.isRow ? Wj(g, h, b ? void 0 : k) : Xj(g, h, b ? void 0 : k));
                    } else if (g instanceof di) {
                        var m = !0 === a1.oldParam;
                        "number" === typeof h && k instanceof U && (b ? (k.isSelected = !1, k.isHighlighted = !1, k.Xb(), g.qc(m ? h : -1, k, m)) : g.oi(h, k, m));
                    } else g instanceof Q ? "number" === typeof h && k instanceof di && (b ? this.Wa.mb(h) : (k.Xe(this), this.Wa.Hb(h, k))) : C("unknown ChangedEvent.Insert object: " + a1.toString());
                    this.isModified = !0;
                } else if (d === fe) {
                    var n = a1.object, p = a1.oldParam, q = a1.oldValue;
                    if (n instanceof W) "number" === typeof p && q instanceof Y ? b ? n.Hb(p, q) : n.qc(p) : "number" === typeof p && q instanceof Vj && (q.isRow ? Wj(n, p, b ? q : void 0) : Xj(n, p, b ? q : void 0));
                    else if (n instanceof di) {
                        var r = !0 === a1.newParam;
                        "number" === typeof p && q instanceof U && (b ? 0 > n.Pa.indexOf(q) && n.oi(p, q, r) : (q.isSelected = !1, q.isHighlighted = !1, q.Xb(), n.qc(r ? p : -1, q, r)));
                    } else n instanceof Q ? "number" === typeof p && q instanceof di && (b ? (q.Xe(this), this.Wa.Hb(p, q)) : this.Wa.mb(p)) : C("unknown ChangedEvent.Remove object: " + a1.toString());
                    this.isModified = !0;
                } else d !== de && C("unknown ChangedEvent: " + a1.toString());
            } finally{
                this.skipsModelSourceBindings = c;
            }
        }
    };
    Q.prototype.Ea = function(a1) {
        return this.undoManager.Ea(a1);
    };
    Q.prototype.eb = function(a1) {
        return this.undoManager.eb(a1);
    };
    Q.prototype.Kf = function() {
        return this.undoManager.Kf();
    };
    Q.prototype.commit = function(a1, b) {
        void 0 === b && (b = "");
        var c = this.skipsUndoManager;
        null === b && (this.skipsUndoManager = !0, b = "");
        this.undoManager.Ea(b);
        var d = !1;
        try {
            a1(this), d = !0;
        } finally{
            d ? this.undoManager.eb(b) : this.undoManager.Kf(), this.skipsUndoManager = c;
        }
    };
    Q.prototype.updateAllTargetBindings = function(a1) {
        this.partManager.updateAllTargetBindings(a1);
    };
    Q.prototype.qp = function() {
        this.partManager.qp();
    };
    function Yj(a1, b, c) {
        var d = a1.animationManager;
        if (a1.wb || a1.ld) a1.Ca = c, Ni(a1), a1.N(), a1.Ee = !0, d.Ab && (vh(d) || d.ce.add(d.H, "scale", b, a1.Ca));
        else if (null === a1.ta) a1.Ca = c, Ni(a1);
        else {
            a1.wb = !0;
            var e = a1.viewportBounds.copy(), f = a1.Aa, g = a1.ya, h = a1.zoomPoint.x, k = a1.zoomPoint.y, l = a1.contentAlignment;
            isNaN(h) && (l.$c() ? l.Hf(Dc) ? h = 0 : l.Hf(Ec) && (h = f - 1) : h = l.sb() ? l.x * (f - 1) : f / 2);
            isNaN(k) && (l.$c() ? l.Hf(Cc) ? k = 0 : l.Hf(Fc) && (k = g - 1) : k = l.sb() ? l.y * (g - 1) : g / 2);
            null === a1.scaleComputation || a1.animationManager.defaultAnimation.isAnimating || (c = a1.scaleComputation(a1, c));
            c < a1.minScale && (c = a1.minScale);
            c > a1.maxScale && (c = a1.maxScale);
            f = J.allocAt(a1.pa.x + h / b - h / c, a1.pa.y + k / b - k / c);
            a1.position = f;
            J.free(f);
            a1.Ca = c;
            Ni(a1);
            a1.wb = !1;
            a1.onViewportBoundsChanged(e, a1.viewportBounds, b, !1);
            fj(a1, !1);
            d.Ab && (vh(d) || d.ce.add(d.H, "scale", b, a1.Ca));
        }
    }
    Q.prototype.onViewportBoundsChanged = function(a1, b, c, d) {
        if (!a1.D(b)) {
            void 0 === d && (d = !1);
            d || (this.Ee = !0);
            this.vd = !0;
            var e = this.layout;
            null === e || !e.isViewportSized || this.autoScale !== qh || a1.width === b.width && a1.height === b.height || e.C();
            e = this.currentTool;
            !0 === this.Uk && e instanceof La && (this.lastInput.documentPoint = this.Os(this.lastInput.viewPoint), xe(e, this));
            this.wb || this.invalidateViewport(a1, b);
            qj(this);
            this.gc.scale = c;
            this.gc.position.x = a1.x;
            this.gc.position.y = a1.y;
            this.gc.bounds.assign(a1);
            this.gc.canvasSize.width = Math.round(a1.width * c);
            this.gc.canvasSize.height = Math.round(a1.height * c);
            this.gc.newCanvasSize.width = this.Aa;
            this.gc.newCanvasSize.height = this.ya;
            this.gc.isScroll = d;
            this.R("ViewportBoundsChanged", this.gc, a1);
            this.isVirtualized && this.links.each(function(a1) {
                a1.isAvoiding && a1.actualBounds.Yc(b) && a1.bb();
            });
        }
    };
    function qj(a1, b) {
        var c = a1.fe;
        if (null !== c && c.visible) {
            for(var d = L.alloc(), e = 1, f = 1, g = c.O.s, h = g.length, k = 0; k < h; k++){
                var l = g[k], m = Math.abs(l.interval);
                2 > m || (Zj(l.figure) ? f = f * m / K.vx(f, m) : e = e * m / K.vx(e, m));
            }
            g = c.gridCellSize;
            d.h(f * g.width, e * g.height);
            if (void 0 !== b) e = b.width, f = b.height, a1 = b.x, g = b.y;
            else {
                b = N.alloc();
                a1 = a1.viewportBounds;
                b.h(a1.x, a1.y, a1.width, a1.height);
                if (!b.w()) {
                    N.free(b);
                    return;
                }
                e = b.width;
                f = b.height;
                a1 = b.x;
                g = b.y;
                N.free(b);
            }
            c.width = e + 2 * d.width;
            c.height = f + 2 * d.height;
            b = J.alloc();
            K.Mo(a1, g, 0, 0, d.width, d.height, b);
            b.offset(-d.width, -d.height);
            L.free(d);
            c.part.location = b;
            J.free(b);
        }
    }
    Q.prototype.clearSelection = function(a1) {
        void 0 === a1 && (a1 = !1);
        var b = this.selection;
        if (0 !== b.count) {
            a1 || this.R("ChangingSelection", b);
            for(var c = b.Fa(), d = c.length, e = 0; e < d; e++)c[e].isSelected = !1;
            b.ka();
            b.clear();
            b.freeze();
            a1 || this.R("ChangedSelection", b);
        }
    };
    Q.prototype.select = function(a1) {
        null !== a1 && a1.diagram === this && (!a1.isSelected || 1 < this.selection.count) && (this.R("ChangingSelection", this.selection), this.clearSelection(!0), a1.isSelected = !0, this.R("ChangedSelection", this.selection));
    };
    Q.prototype.rA = function(a1) {
        this.R("ChangingSelection", this.selection);
        this.clearSelection(!0);
        if (Aa(a1)) for(var b = a1.length, c = 0; c < b; c++){
            var d = a1[c];
            d instanceof U || C("Diagram.selectCollection given something that is not a Part: " + d);
            d.isSelected = !0;
        }
        else for(a1 = a1.iterator; a1.next();)b = a1.value, b instanceof U || C("Diagram.selectCollection given something that is not a Part: " + b), b.isSelected = !0;
        this.R("ChangedSelection", this.selection);
    };
    Q.prototype.clearHighlighteds = function() {
        var a1 = this.highlighteds;
        if (0 < a1.count) {
            for(var b = a1.Fa(), c = b.length, d = 0; d < c; d++)b[d].isHighlighted = !1;
            a1.ka();
            a1.clear();
            a1.freeze();
        }
    };
    t = Q.prototype;
    t.Iz = function(a1) {
        null !== a1 && a1.diagram === this && (!a1.isHighlighted || 1 < this.highlighteds.count) && (this.clearHighlighteds(), a1.isHighlighted = !0);
    };
    t.Jz = function(a1) {
        a1 = (new H).addAll(a1);
        for(var b = this.highlighteds.copy().gp(a1).iterator; b.next();)b.value.isHighlighted = !1;
        for(a1 = a1.iterator; a1.next();)b = a1.value, b instanceof U || C("Diagram.highlightCollection given something that is not a Part: " + b), b.isHighlighted = !0;
    };
    t.scroll = function(a1, b, c) {
        void 0 === c && (c = 1);
        var d = "up" === b || "down" === b, e = 0, f = J.alloc();
        if ("pixel" === a1) e = c;
        else if ("line" === a1) e = c * (d ? this.scrollVerticalLineChange : this.scrollHorizontalLineChange);
        else if ("page" === a1) a1 = d ? this.viewportBounds.height : this.viewportBounds.width, a1 *= this.scale, 0 !== a1 && (e = c * Math.max(a1 - (d ? this.scrollVerticalLineChange : this.scrollHorizontalLineChange), 0));
        else {
            if ("document" === a1) {
                e = this.documentBounds;
                c = this.viewportBounds;
                "up" === b ? this.position = f.h(c.x, e.y) : "left" === b ? this.position = f.h(e.x, c.y) : "down" === b ? this.position = f.h(c.x, e.bottom - c.height) : "right" === b && (this.position = f.h(e.right - c.width, c.y));
                J.free(f);
                return;
            }
            C("scrolling unit must be 'pixel', 'line', 'page', or 'document', not: " + a1);
        }
        e /= this.scale;
        c = this.position;
        "up" === b ? this.position = f.h(c.x, c.y - e) : "down" === b ? this.position = f.h(c.x, c.y + e) : "left" === b ? this.position = f.h(c.x - e, c.y) : "right" === b ? this.position = f.h(c.x + e, c.y) : C("scrolling direction must be 'up', 'down', 'left', or 'right', not: " + b);
        J.free(f);
    };
    t.tv = function(a1) {
        var b = this.viewportBounds;
        b.Re(a1) || (a1 = a1.center, a1.x -= b.width / 2, a1.y -= b.height / 2, this.position = a1);
    };
    t.ds = function(a1) {
        var b = this.viewportBounds;
        a1 = a1.center;
        a1.x -= b.width / 2;
        a1.y -= b.height / 2;
        this.position = a1;
    };
    t.np = function(a1) {
        var b = this.Bb;
        b.reset();
        1 !== this.Ca && b.scale(this.Ca);
        var c = this.pa;
        (0 !== c.x || 0 !== c.y) && isFinite(c.x) && isFinite(c.y) && b.translate(-c.x, -c.y);
        return a1.copy().transform(this.Bb);
    };
    t.zA = function(a1) {
        var b = this.Bb, c = a1.x, d = a1.y, e = c + a1.width, f = d + a1.height, g = b.m11, h = b.m12, k = b.m21, l = b.m22, m = b.dx, n = b.dy, p = c * g + d * k + m;
        b = c * h + d * l + n;
        var q = e * g + d * k + m;
        a1 = e * h + d * l + n;
        d = c * g + f * k + m;
        c = c * h + f * l + n;
        g = e * g + f * k + m;
        e = e * h + f * l + n;
        f = Math.min(p, q);
        p = Math.max(p, q);
        q = Math.min(b, a1);
        b = Math.max(b, a1);
        f = Math.min(f, d);
        p = Math.max(p, d);
        q = Math.min(q, c);
        b = Math.max(b, c);
        f = Math.min(f, g);
        p = Math.max(p, g);
        q = Math.min(q, e);
        b = Math.max(b, e);
        return new N(f, q, p - f, b - q);
    };
    t.Os = function(a1) {
        var b = this.Bb;
        b.reset();
        1 !== this.Ca && b.scale(this.Ca);
        var c = this.pa;
        (0 !== c.x || 0 !== c.y) && isFinite(c.x) && isFinite(c.y) && b.translate(-c.x, -c.y);
        return xb(a1.copy(), this.Bb);
    };
    function ak(a1) {
        var b = a1.isModified;
        a1.Tw !== b && (a1.Tw = b, a1.R("Modified"));
    }
    function bk(a1) {
        a1 = oi.get(a1);
        return null !== a1 ? new a1 : new pi;
    }
    Q.prototype.doModelChanged = function(a1) {
        var b = this;
        if (a1.model === this.model) {
            var c = a1.change, d = a1.propertyName;
            if (c === de && "S" === d[0]) {
                if ("StartingFirstTransaction" === d) {
                    var e = this;
                    a1 = this.toolManager;
                    a1.mouseDownTools.each(function(a1) {
                        return a1.diagram = e;
                    });
                    a1.mouseMoveTools.each(function(a1) {
                        return a1.diagram = e;
                    });
                    a1.mouseUpTools.each(function(a1) {
                        return a1.diagram = e;
                    });
                    this.ld || this.hf || (this.Ik = !0, this.en && (this.kg = !0));
                } else "StartingUndo" === d || "StartingRedo" === d ? (a1 = this.animationManager, a1.defaultAnimation.isAnimating && !this.skipsUndoManager && a1.Cc(), this.R("ChangingSelection", this.selection)) : "StartedTransaction" === d && (a1 = this.animationManager, a1.defaultAnimation.isAnimating && !this.skipsUndoManager && a1.Cc());
            } else if (this.aa) {
                this.aa = !1;
                try {
                    if ("" === a1.modelChange && c === de) {
                        if ("FinishedUndo" === d || "FinishedRedo" === d) this.R("ChangedSelection", this.selection), lh(this);
                        var f = this.animationManager;
                        "RolledBackTransaction" === d && f.Cc();
                        this.bx();
                        this.Ik = !0;
                        this.bd();
                        0 !== this.undoManager.transactionLevel && 1 !== this.undoManager.transactionLevel || mh(f);
                        "CommittedTransaction" === d && this.undoManager.isJustDiscarded && (this.Ce = Math.min(this.Ce, this.undoManager.historyIndex - 1));
                        "CommittedTransaction" !== d && "RolledBackTransaction" !== d || !this.undoManager.isPendingUnmodified || setTimeout(function() {
                            b.isModified = !1;
                        }, 1);
                        var g = a1.isTransactionFinished;
                        g && (ak(this), this.zs.clear(), Jh(this.animationManager));
                        if (!this.Qt && g && this.lastInput.targetDiagram) {
                            this.Qt = !0;
                            var h = this;
                            ta(function() {
                                h.currentTool.standardMouseOver();
                                h.Qt = !1;
                            }, 10);
                        }
                    }
                } finally{
                    this.aa = !0;
                }
            }
        }
    };
    function Ij(a1, b) {
        b = b.O.s;
        for(var c = b.length, d = 0; d < c; d++)ck(a1, b[d]);
    }
    function ck(a1, b) {
        if (b instanceof dk) {
            var c = b.element;
            if (null !== c && c instanceof HTMLImageElement) {
                c.Bg instanceof H && c.Bg.add(a1);
                var d = b.Eg;
                null !== d && !0 === d.rq && null !== b.diagram && b.diagram.Wn.add(b);
                if (c.gn) {
                    if (c = c.getAttribute("src") || "", d = a1.Og.I(c), null === d) d = [], d.push(b), a1.Og.add(c, d);
                    else {
                        for(a1 = 0; a1 < d.length; a1++)if (d[a1] === b) return;
                        d.push(b);
                    }
                }
            }
        }
    }
    function ek(a1, b) {
        if (b instanceof dk) {
            var c = b.element;
            if (null !== c && c instanceof HTMLImageElement && c.gn) {
                var d = c.getAttribute("src") || "", e = a1.Og.I(d);
                if (null !== e) {
                    for(var f = 0; f < e.length; f++)if (e[f] === b) {
                        e.splice(f, 1);
                        0 === e.length && (a1.Og.remove(d), c.Eq && c.removeEventListener("load", c.Eq), c.Xp && c.removeEventListener("error", c.Xp), delete c.Eq, delete c.Xp, c.Bg instanceof H && c.Bg.remove(a1), Mi(d));
                        break;
                    }
                }
            }
        }
    }
    Q.prototype.Wd = function() {
        this.partManager.Wd();
    };
    Q.prototype.Aj = function(a1, b) {
        this.Yd.Aj(a1, b);
    };
    Q.prototype.Cj = function(a1, b) {
        this.Yd.Cj(a1, b);
    };
    Q.prototype.findPartForKey = function(a1) {
        return this.partManager.findPartForKey(a1);
    };
    Q.prototype.Wb = function(a1) {
        return this.partManager.Wb(a1);
    };
    Q.prototype.findLinkForKey = function(a1) {
        return this.partManager.findLinkForKey(a1);
    };
    t = Q.prototype;
    t.Lc = function(a1) {
        return this.partManager.Lc(a1);
    };
    t.ii = function(a1) {
        return this.partManager.ii(a1);
    };
    t.Kc = function(a1) {
        return this.partManager.Kc(a1);
    };
    t.ls = function(a1) {
        for(var b = [], c = 0; c < arguments.length; ++c)b[c] = arguments[c];
        return this.partManager.ls.apply(this.partManager, b instanceof Array ? b : da(ba(b)));
    };
    t.ks = function(a1) {
        for(var b = [], c = 0; c < arguments.length; ++c)b[c] = arguments[c];
        return this.partManager.ks.apply(this.partManager, b instanceof Array ? b : da(ba(b)));
    };
    function Ni(a1) {
        var b = a1.pa, c = a1.Ca;
        a1.Rw.h(b.x, b.y, Math.max(a1.Aa, 0) / c, Math.max(a1.ya, 0) / c);
        a1.vd = !0;
    }
    function Ej(a1, b) {
        a1.Zi = !1;
        var c = a1.Rp;
        c.D(b) || (c = c.copy(), a1.Rp.assign(b), fj(a1, !1), a1.R("DocumentBoundsChanged", void 0, c), a1.Ee = !0, a1.N());
    }
    t.Va = function() {
        if (this.Zi) {
            var a1 = N.alloc();
            Ej(this, this.computeBounds(a1));
            N.free(a1);
        }
    };
    t.rz = function() {
        for(var a1 = new H, b = this.nodes; b.next();){
            var c = b.value;
            c.isTopLevel && a1.add(c);
        }
        for(b = this.links; b.next();)c = b.value, c.isTopLevel && a1.add(c);
        return a1.iterator;
    };
    t.qz = function() {
        return this.ai.iterator;
    };
    t.Uz = function(a1) {
        lh(this);
        a1 && fk(this, !0);
        this.ld ? rj(this, !1) : (this.Ik = !0, yf(this));
    };
    function fk(a1, b) {
        for(var c = a1.ai.iterator; c.next();)gk(a1, c.value, b);
        a1.layout && (b ? a1.layout.isValidLayout = !1 : a1.layout.C());
    }
    function gk(a1, b, c) {
        if (null !== b) {
            for(var d = b.fl.iterator; d.next();)gk(a1, d.value, c);
            null !== b.layout && (c ? b.layout.isValidLayout = !1 : b.layout.C());
        }
    }
    function rj(a1, b) {
        if (a1.xh && !a1.kt) {
            var c = a1.aa;
            a1.aa = !0;
            var d = a1.undoManager.transactionLevel, e = a1.layout, f = a1.animationManager;
            try {
                0 === d && (a1.undoManager.isInternalTransaction = !0, a1.Ea("Layout"));
                1 >= d && !f.defaultAnimation.isAnimating && !f.Ab && (b || kh(f, "Layout"));
                a1.xh = !1;
                for(var g = a1.ai.iterator; g.next();)hk(a1, g.value, b, d);
                e.isValidLayout || (!b || e.isRealtime || null === e.isRealtime || 0 === d ? (e.doLayout(a1), lh(a1), e.isValidLayout = !0) : a1.xh = !0);
            } finally{
                b = a1.undoManager.isInternalTransaction, 0 === d && (a1.eb("Layout"), a1.undoManager.isInternalTransaction = !1), !b || 0 !== d && 1 !== d || mh(f), a1.aa = c;
            }
        }
    }
    function hk(a1, b, c, d) {
        if (null !== b) {
            for(var e = b.fl.iterator; e.next();)hk(a1, e.value, c, d);
            e = b.layout;
            null === e || e.isValidLayout || (!c || e.isRealtime || 0 === d ? (b.rh = !b.location.w(), e.doLayout(b), b.C(32), tj(a1, b), e.isValidLayout = !0) : a1.xh = !0);
        }
    }
    t.yz = function() {
        for(var a1 = new F, b = this.nodes; b.next();){
            var c = b.value;
            c.isTopLevel && null === c.kh() && a1.add(c);
        }
        return a1.iterator;
    };
    function xi(a1) {
        function b(a1) {
            var b = a1.toLowerCase(), e = new F;
            c.add(a1, e);
            c.add(b, e);
            d.add(a1, a1);
            d.add(b, a1);
        }
        var c = new ob, d = new ob;
        b("InitialAnimationStarting");
        b("AnimationStarting");
        b("AnimationFinished");
        b("BackgroundSingleClicked");
        b("BackgroundDoubleClicked");
        b("BackgroundContextClicked");
        b("ClipboardChanged");
        b("ClipboardPasted");
        b("DocumentBoundsChanged");
        b("ExternalObjectsDropped");
        b("GainedFocus");
        b("InitialLayoutCompleted");
        b("LayoutCompleted");
        b("LinkDrawn");
        b("LinkRelinked");
        b("LinkReshaped");
        b("LostFocus");
        b("Modified");
        b("ObjectSingleClicked");
        b("ObjectDoubleClicked");
        b("ObjectContextClicked");
        b("PartCreated");
        b("PartResized");
        b("PartRotated");
        b("SelectionMoved");
        b("SelectionCopied");
        b("SelectionDeleting");
        b("SelectionDeleted");
        b("SelectionGrouped");
        b("SelectionUngrouped");
        b("ChangingSelection");
        b("ChangedSelection");
        b("SubGraphCollapsed");
        b("SubGraphExpanded");
        b("TextEdited");
        b("TreeCollapsed");
        b("TreeExpanded");
        b("ViewportBoundsChanged");
        b("InvalidateDraw");
        a1.iw = c;
        a1.hw = d;
    }
    function Dj(a1, b) {
        var c = a1.hw.I(b);
        return null !== c ? c : a1.hw.I(b.toLowerCase());
    }
    function ik(a1, b) {
        var c = a1.iw.I(b);
        if (null !== c) return c;
        c = a1.iw.I(b.toLowerCase());
        if (null !== c) return c;
        C("Unknown DiagramEvent name: " + b);
    }
    t.Bj = function(a1, b) {
        a1 = ik(this, a1);
        null !== a1 && a1.add(b);
        return this;
    };
    t.$l = function(a1, b) {
        a1 = ik(this, a1);
        null !== a1 && a1.remove(b);
    };
    t.R = function(a1, b, c) {
        var d = ik(this, a1), e = new ae;
        e.diagram = this;
        a1 = Dj(this, a1);
        null !== a1 && (e.name = a1);
        void 0 !== b && (e.subject = b);
        void 0 !== c && (e.parameter = c);
        b = d.length;
        if (1 === b) d.M(0)(e);
        else if (0 !== b) for(d = d.Fa(), c = 0; c < b; c++)(0, d[c])(e);
    };
    function jk(a1) {
        if (a1.animationManager.isTicking) return !1;
        var b = a1.currentTool;
        return b === a1.toolManager.findTool("Dragging") ? !a1.Lr || b.isComplexRoutingRealtime : !0;
    }
    t.Xj = function(a1, b) {
        return kk(this, !1, null, b || null).Xj(a1.x, a1.y, a1.width, a1.height);
    };
    Q.prototype.computeOccupiedArea = function(a1) {
        return this.isVirtualized ? this.viewportBounds.copy() : this.Zi ? ej(this, a1) : a1.assign(this.documentBounds);
    };
    function kk(a1, b, c, d) {
        var e = a1.Xh;
        null === e && (a1.Xh = e = new lk(a1.avoidanceCellSize));
        if (e.us || e.group !== c || e.Yx !== d) {
            e.Hx = Math.max(e.Ns + 1, Math.floor(a1.avoidanceLimit / a1.avoidanceCellSize.width));
            e.Ix = Math.max(e.Ns + 1, Math.floor(a1.avoidanceLimit / a1.avoidanceCellSize.height));
            null !== c && (c = mk(a1, c));
            if (null === c) {
                b = N.alloc();
                a1.computeOccupiedArea(b);
                b.Bc(100, 100);
                e.initialize(b);
                for(var f = a1.nodes; f.next();){
                    var g = f.value, h = g.layer;
                    null !== h && h.visible && !h.isTemporary && vk(a1, g, d, b);
                }
                N.free(b);
            } else {
                0 < c.memberParts.count && (b = a1.computePartsBounds(c.memberParts, !1), b.Bc(20, 20), e.initialize(b));
                b = N.alloc();
                for(f = c.memberParts; f.next();)g = f.value, g instanceof V && vk(a1, g, d, b);
                N.free(b);
            }
            e.group = c;
            e.Yx = d;
            e.us = !1;
        } else b && zk(e);
        return e;
    }
    function mk(a1, b) {
        return b.avoidable && !b.isLinkLabel ? b : null !== b.containingGroup ? mk(a1, b.containingGroup) : null;
    }
    function vk(a1, b, c, d) {
        if (b !== c && b.isVisible()) {
            if (b.avoidable && !b.isLinkLabel) {
                b = b.getAvoidableRect(d);
                a1 = a1.Xh;
                var e = b.x, f = b.y;
                if (Ak(a1, e, f)) for(c = (f - a1.Od) / a1.tc | 0, d = Math.min((e + b.width - a1.Nd) / a1.sc | 0, a1.di), b = Math.min((f + b.height - a1.Od) / a1.tc | 0, a1.ei), e = (e - a1.Nd) / a1.sc | 0; e <= d; e++)if (f = a1.bc[e], f.fill) f.fill(Bk, c, b + 1);
                else for(var g = c; g <= b; g++)f[g] = Bk;
            } else if (b instanceof pf) for(b = b.memberParts; b.next();)e = b.value, e instanceof V && vk(a1, e, c, d);
        }
    }
    function Ck(a1, b) {
        null === a1.Xh || a1.Xh.us || void 0 !== b && (!b.avoidable || b.isLinkLabel) || (a1.Xh.us = !0);
    }
    Q.prototype.fs = function(a1) {
        this.vp.assign(a1);
        this.computeAutoScrollPosition(this.vp).Xa(this.position) ? this.ug() : Dk(this);
    };
    function Dk(a1) {
        -1 === a1.uk && (a1.uk = ta(function() {
            if (-1 !== a1.uk && (a1.ug(), null !== a1.lastInput.event)) {
                var b = a1.computeAutoScrollPosition(a1.vp);
                b.Xa(a1.position) || (a1.position = b, a1.lastInput.documentPoint = a1.Os(a1.vp), a1.doMouseMove(), a1.Zi = !0, b = N.alloc(), a1.computeBounds(b), b.ed(a1.documentBounds), Ej(a1, b), N.free(b), a1.Fc = !0, a1.bd(), Dk(a1));
            }
        }, a1.tp));
    }
    Q.prototype.ug = function() {
        -1 !== this.uk && (x.clearTimeout(this.uk), this.uk = -1);
    };
    Q.prototype.computeAutoScrollPosition = function(a1) {
        var b = this.position, c = this.wp;
        if (0 >= c.top && 0 >= c.left && 0 >= c.right && 0 >= c.bottom) return b;
        var d = this.viewportBounds, e = this.scale;
        d = N.allocAt(0, 0, d.width * e, d.height * e);
        var f = J.allocAt(0, 0);
        if (a1.x >= d.x && a1.x < d.x + c.left && this.allowHorizontalScroll) {
            var g = Math.max(this.scrollHorizontalLineChange, 1);
            g |= 0;
            f.x -= g;
            a1.x < d.x + c.left / 2 && (f.x -= g);
            a1.x < d.x + c.left / 4 && (f.x -= 4 * g);
        } else a1.x <= d.x + d.width && a1.x > d.x + d.width - c.right && this.allowHorizontalScroll && (g = Math.max(this.scrollHorizontalLineChange, 1), g |= 0, f.x += g, a1.x > d.x + d.width - c.right / 2 && (f.x += g), a1.x > d.x + d.width - c.right / 4 && (f.x += 4 * g));
        a1.y >= d.y && a1.y < d.y + c.top && this.allowVerticalScroll ? (g = Math.max(this.scrollVerticalLineChange, 1), g |= 0, f.y -= g, a1.y < d.y + c.top / 2 && (f.y -= g), a1.y < d.y + c.top / 4 && (f.y -= 4 * g)) : a1.y <= d.y + d.height && a1.y > d.y + d.height - c.bottom && this.allowVerticalScroll && (g = Math.max(this.scrollVerticalLineChange, 1), g |= 0, f.y += g, a1.y > d.y + d.height - c.bottom / 2 && (f.y += g), a1.y > d.y + d.height - c.bottom / 4 && (f.y += 4 * g));
        f.Xa(pb) || (b = new J(b.x + f.x / e, b.y + f.y / e));
        N.free(d);
        J.free(f);
        return b;
    };
    t = Q.prototype;
    t.Bs = function() {
        return null;
    };
    t.av = function() {
        return null;
    };
    t.$r = function(a1, b) {
        this.pj.add(a1, b);
    };
    t.Fu = function(a1) {
        (this.Pw = a1) || this.nodes.each(function(a1) {
            a1 instanceof pf && (a1.Zp = null);
        });
    };
    function Ek(a1, b, c) {
        function d() {
            var a1 = +new Date;
            f = !0;
            for(g.reset(); g.next();)if (!g.value[0].$k) {
                f = !1;
                break;
            }
            f || a1 - l > k ? b(c, e, h) : x.requestAnimationFrame(d);
        }
        for(var e = c.callback, f = !0, g = a1.Og.iterator; g.next();)if (!g.value[0].$k) {
            f = !1;
            break;
        }
        if ("function" !== typeof e || f) return b(c, e, a1);
        var h = a1, k = c.callbackTimeout || 300, l = +new Date;
        x.requestAnimationFrame(function() {
            d();
        });
        return null;
    }
    t.Wz = function(a1) {
        if (!Ng) return null;
        void 0 === a1 && (a1 = {});
        a1.returnType = "Image";
        return this.Jx(a1);
    };
    t.Jx = function(a1) {
        void 0 === a1 && (a1 = {});
        return Ek(this, this.Xz, a1);
    };
    t.Xz = function(a1, b, c) {
        var d = Fk(c, a1, "canvas", null);
        if (null === d) return null;
        c = d.Z.canvas;
        var e = null;
        if (null !== c) switch(e = a1.returnType, void 0 === e ? e = "string" : e = e.toLowerCase(), e){
            case Zi + "data":
                e = d.getImageData(0, 0, c.width, c.height);
                break;
            case Zi:
                d = (a1.document || document).createElement("img");
                d.src = c.toDataURL(a1.type, a1.details);
                e = d;
                break;
            case "blob":
                "function" !== typeof b && C('Error: Diagram.makeImageData called with "returnType: toBlob", but no required "callback" function property defined.');
                if ("function" === typeof c.toBlob) return c.toBlob(b, a1.type, a1.details), "toBlob";
                b(null);
                return null;
            default:
                e = c.toDataURL(a1.type, a1.details);
        }
        return "function" === typeof b ? (b(e), null) : e;
    };
    function Fk(a1, b, c, d) {
        a1.animationManager.Cc();
        a1.bd();
        if (null === a1.ta) return null;
        "object" !== typeof b && C("properties argument must be an Object.");
        var e = b.size || null, f = b.scale || null;
        void 0 !== b.scale && isNaN(b.scale) && (f = "NaN");
        var g = b.maxSize;
        void 0 === b.maxSize && (g = "SVG" === c ? new L(Infinity, Infinity) : new L(2E3, 2E3));
        var h = b.position || null, k = b.parts || null, l = void 0 === b.padding ? 1 : b.padding, m = b.background || null, n = b.omitTemporary;
        void 0 === n && (n = !0);
        var p = b.document || document, q = b.elementFinished || null, r = b.showTemporary;
        void 0 === r && (r = !n);
        b = b.showGrid;
        void 0 === b && (b = r);
        null !== e && isNaN(e.width) && isNaN(e.height) && (e = null);
        "number" === typeof l ? l = new dc(l) : l instanceof dc || C("MakeImage padding must be a Margin or a number.");
        l.left = Math.max(l.left, 0);
        l.right = Math.max(l.right, 0);
        l.top = Math.max(l.top, 0);
        l.bottom = Math.max(l.bottom, 0);
        a1.ib.Vc(!0);
        n = new Pi(null, p, void 0, !0);
        var u = n.context;
        if (!(e || f || k || h)) {
            n.width = a1.Aa + Math.ceil(l.left + l.right);
            n.height = a1.ya + Math.ceil(l.top + l.bottom);
            if ("SVG" === c) {
                if (null === d) return null;
                d.resize(n.width, n.height, n.width, n.height);
                d.ownerDocument = p;
                d.gs = q;
                Bj(a1, d.context, l, new L(n.width, n.height), a1.Ca, a1.pa, k, m, r, b);
                return d.context;
            }
            a1.Wm = !1;
            Bj(a1, u, l, new L(n.width, n.height), a1.Ca, a1.pa, k, m, r, b);
            a1.Wm = !0;
            return n.context;
        }
        var w = a1.Op, v = a1.documentBounds.copy();
        v.Fv(a1.zb);
        if (r) for(var y = a1.Wa.s, z = y.length, A = 0; A < z; A++){
            var B = y[A];
            if (B.visible && B.isTemporary) {
                B = B.Pa.s;
                for(var D = B.length, M = 0; M < D; M++){
                    var S = B[M];
                    S.isInDocumentBounds && S.isVisible() && (S = S.actualBounds, S.w() && v.ed(S));
                }
            }
        }
        y = new J(v.x, v.y);
        if (null !== k) {
            z = new N(0, 0, 0, 0);
            A = !0;
            B = k.iterator;
            for(B.reset(); B.next();)D = B.value, D instanceof U && (M = D.layer, null !== M && !M.visible || null !== M && !r && M.isTemporary || !D.isVisible() || (D = D.actualBounds, D.w() && (A ? (A = !1, z.assign(D)) : z.ed(D))));
            v.width = z.width;
            v.height = z.height;
            y.x = z.x;
            y.y = z.y;
        }
        null !== h && h.w() && (y = h, f || (f = w));
        z = h = 0;
        null !== l && (h = l.left + l.right, z = l.top + l.bottom);
        A = B = 0;
        null !== e && (B = e.width, A = e.height, isFinite(B) && (B = Math.max(0, B - h)), isFinite(A) && (A = Math.max(0, A - z)));
        null !== e && null !== f ? ("NaN" === f && (f = w), e.w() ? (e = B, v = A) : isNaN(A) ? (e = B, v = v.height * f) : (e = v.width * f, v = A)) : null !== e ? e.w() ? (f = Math.min(B / v.width, A / v.height), e = B, v = A) : isNaN(A) ? (f = B / v.width, e = B, v = v.height * f) : (f = A / v.height, e = v.width * f, v = A) : null !== f ? "NaN" === f && g.w() ? (f = Math.min((g.width - h) / v.width, (g.height - z) / v.height), f > w ? (f = w, e = v.width, v = v.height) : (e = g.width, v = g.height)) : (e = v.width * f, v = v.height * f) : (f = w, e = v.width, v = v.height);
        null !== l ? (e += h, v += z) : l = new dc(0);
        null !== g && (w = g.width, g = g.height, isNaN(w) && (w = 2E3), isNaN(g) && (g = 2E3), isFinite(w) && (e = Math.min(e, w)), isFinite(g) && (v = Math.min(v, g)));
        n.width = Math.ceil(e);
        n.height = Math.ceil(v);
        if ("SVG" === c) {
            if (null === d) return null;
            d.resize(n.width, n.height, n.width, n.height);
            d.ownerDocument = p;
            d.gs = q;
            Bj(a1, d.context, l, new L(Math.ceil(e), Math.ceil(v)), f, y, k, m, r, b);
            return d.context;
        }
        a1.Wm = !1;
        Bj(a1, u, l, new L(Math.ceil(e), Math.ceil(v)), f, y, k, m, r, b);
        a1.Wm = !0;
        return n.context;
    }
    ma.Object.defineProperties(Q.prototype, {
        renderer: {
            get: function() {
                return this.ml;
            },
            set: function(a1) {
                this instanceof Gk || ("" === a1 && (a1 = "default"), a1 = a1.toLowerCase(), a1 !== this.ml && (this.ml = a1, "default" === a1 || "canvas" === a1 ? (a1 = this.pj.get("svg"), null !== a1 && a1.Oa.remove(), this.ta && (this.ib = this.ta.context)) : "svg" === a1 ? (this.pj.contains("svg") ? a1 = this.pj.get("svg") : (a1 = new Fj(this, x.document), this.$r("svg", a1)), null !== this.div && this.div.appendChild(a1.Oa), this.ib = a1.context, this.ta && (this.ta.context.setTransform(this.Nb, 0, 0, this.Nb, 0, 0), this.ta.context.clearRect(0, 0, this.Aa, this.ya))) : "debug" !== a1 || this.pj.contains("SVG") || (a1 = new Fj(this, x.document), this.$r("SVG", a1), a1.Oa.style.backgroundColor = "whitesmoke", null !== this.div && this.div.after(a1.Oa)), this.gk()));
            }
        },
        div: {
            get: function() {
                return this.Ka;
            },
            set: function(a1) {
                if (this.Ka !== a1) {
                    var b = this.Ka;
                    null !== b ? (b.H = void 0, b.goDiagram = void 0, b.go = void 0, b.innerHTML = "", null !== this.ta && (b = this.ta.Oa, this.removeEventListener(b, "pointermove", this.ck, !1), this.removeEventListener(b, "pointerdown", this.ui, !1), this.removeEventListener(b, "pointerup", this.ek, !1), this.removeEventListener(b, "pointerout", this.dk, !1), this.removeEventListener(b, "pointercancel", this.bk, !1), this.ta.mx()), this.nl && (this.nl.disconnect(), this.nl = null), b = this.toolManager, null !== b && (b.mouseDownTools.each(function(a1) {
                        a1.cancelWaitAfter();
                    }), b.mouseMoveTools.each(function(a1) {
                        a1.cancelWaitAfter();
                    }), b.mouseUpTools.each(function(a1) {
                        a1.cancelWaitAfter();
                    })), b.cancelWaitAfter(), this.currentTool.doCancel(), this.ta = null, this.removeEventListener(x, "resize", this.Ov, !1), this.removeEventListener(x, "wheel", this.Zj, !0), ke === this && (ke = null)) : null === this.ui && (this.hf = !1);
                    this.Ka = null;
                    if (null !== a1) {
                        if (b = a1.H) b.div = null;
                        vi(this, a1);
                        this.gk();
                    }
                }
            }
        },
        $w: {
            get: function() {
                return this.Rq;
            }
        },
        pi: {
            get: function() {
                return this.hf;
            }
        },
        draggedLink: {
            get: function() {
                return this.mt;
            },
            set: function(a1) {
                this.mt !== a1 && (this.mt = a1, null !== a1 && (this.Ut = a1.fromPort, this.Vt = a1.toPort));
            }
        },
        Mx: {
            get: function() {
                return this.Ut;
            },
            set: function(a1) {
                this.Ut = a1;
            }
        },
        Nx: {
            get: function() {
                return this.Vt;
            },
            set: function(a1) {
                this.Vt = a1;
            }
        },
        animationManager: {
            get: function() {
                return this.Yd;
            }
        },
        undoManager: {
            get: function() {
                return this.dc.undoManager;
            }
        },
        skipsUndoManager: {
            get: function() {
                return this.Wg;
            },
            set: function(a1) {
                this.Wg = a1;
                this.dc.skipsUndoManager = a1;
            }
        },
        delaysLayout: {
            get: function() {
                return this.kt;
            },
            set: function(a1) {
                this.kt = a1;
            }
        },
        opacity: {
            get: function() {
                return this.pb;
            },
            set: function(a1) {
                var b = this.pb;
                b !== a1 && ((0 > a1 || 1 < a1) && xa(a1, "0 <= value <= 1", Q, "opacity"), this.pb = a1, this.g("opacity", b, a1), this.N());
            }
        },
        validCycle: {
            get: function() {
                return this.vu;
            },
            set: function(a1) {
                var b = this.vu;
                b !== a1 && (this.vu = a1, this.g("validCycle", b, a1));
            }
        },
        layers: {
            get: function() {
                return this.Wa.iterator;
            }
        },
        isModelReadOnly: {
            get: function() {
                var a1 = this.dc;
                return null === a1 ? !1 : a1.isReadOnly;
            },
            set: function(a1) {
                var b = this.dc;
                null !== b && (b.isReadOnly = a1);
            }
        },
        isReadOnly: {
            get: function() {
                return this.Gg;
            },
            set: function(a1) {
                var b = this.Gg;
                b !== a1 && (this.Gg = a1, this.g("isReadOnly", b, a1));
            }
        },
        isEnabled: {
            get: function() {
                return this.Jd;
            },
            set: function(a1) {
                var b = this.Jd;
                b !== a1 && (this.Jd = a1, this.g("isEnabled", b, a1));
            }
        },
        allowClipboard: {
            get: function() {
                return this.Ts;
            },
            set: function(a1) {
                var b = this.Ts;
                b !== a1 && (this.Ts = a1, this.g("allowClipboard", b, a1));
            }
        },
        allowCopy: {
            get: function() {
                return this.Fi;
            },
            set: function(a1) {
                var b = this.Fi;
                b !== a1 && (this.Fi = a1, this.g("allowCopy", b, a1));
            }
        },
        allowDelete: {
            get: function() {
                return this.Gi;
            },
            set: function(a1) {
                var b = this.Gi;
                b !== a1 && (this.Gi = a1, this.g("allowDelete", b, a1));
            }
        },
        allowDragOut: {
            get: function() {
                return this.Us;
            },
            set: function(a1) {
                var b = this.Us;
                b !== a1 && (this.Us = a1, this.g("allowDragOut", b, a1));
            }
        },
        allowDrop: {
            get: function() {
                return this.Vs;
            },
            set: function(a1) {
                var b = this.Vs;
                b !== a1 && (this.Vs = a1, this.g("allowDrop", b, a1));
            }
        },
        allowTextEdit: {
            get: function() {
                return this.Pi;
            },
            set: function(a1) {
                var b = this.Pi;
                b !== a1 && (this.Pi = a1, this.g("allowTextEdit", b, a1));
            }
        },
        allowGroup: {
            get: function() {
                return this.Hi;
            },
            set: function(a1) {
                var b = this.Hi;
                b !== a1 && (this.Hi = a1, this.g("allowGroup", b, a1));
            }
        },
        allowUngroup: {
            get: function() {
                return this.Qi;
            },
            set: function(a1) {
                var b = this.Qi;
                b !== a1 && (this.Qi = a1, this.g("allowUngroup", b, a1));
            }
        },
        allowInsert: {
            get: function() {
                return this.Xs;
            },
            set: function(a1) {
                var b = this.Xs;
                b !== a1 && (this.Xs = a1, this.g("allowInsert", b, a1));
            }
        },
        allowLink: {
            get: function() {
                return this.Ii;
            },
            set: function(a1) {
                var b = this.Ii;
                b !== a1 && (this.Ii = a1, this.g("allowLink", b, a1));
            }
        },
        allowRelink: {
            get: function() {
                return this.Ki;
            },
            set: function(a1) {
                var b = this.Ki;
                b !== a1 && (this.Ki = a1, this.g("allowRelink", b, a1));
            }
        },
        allowMove: {
            get: function() {
                return this.Ji;
            },
            set: function(a1) {
                var b = this.Ji;
                b !== a1 && (this.Ji = a1, this.g("allowMove", b, a1));
            }
        },
        allowReshape: {
            get: function() {
                return this.Li;
            },
            set: function(a1) {
                var b = this.Li;
                b !== a1 && (this.Li = a1, this.g("allowReshape", b, a1));
            }
        },
        allowResize: {
            get: function() {
                return this.Mi;
            },
            set: function(a1) {
                var b = this.Mi;
                b !== a1 && (this.Mi = a1, this.g("allowResize", b, a1));
            }
        },
        allowRotate: {
            get: function() {
                return this.Ni;
            },
            set: function(a1) {
                var b = this.Ni;
                b !== a1 && (this.Ni = a1, this.g("allowRotate", b, a1));
            }
        },
        allowSelect: {
            get: function() {
                return this.Oi;
            },
            set: function(a1) {
                var b = this.Oi;
                b !== a1 && (this.Oi = a1, this.g("allowSelect", b, a1));
            }
        },
        allowUndo: {
            get: function() {
                return this.Ys;
            },
            set: function(a1) {
                var b = this.Ys;
                b !== a1 && (this.Ys = a1, this.g("allowUndo", b, a1));
            }
        },
        allowZoom: {
            get: function() {
                return this.$s;
            },
            set: function(a1) {
                var b = this.$s;
                b !== a1 && (this.$s = a1, this.g("allowZoom", b, a1));
            }
        },
        hasVerticalScrollbar: {
            get: function() {
                return this.mn;
            },
            set: function(a1) {
                var b = this.mn;
                b !== a1 && (this.mn = a1, this.Ee = !0, this.N(), this.g("hasVerticalScrollbar", b, a1), fj(this, !1));
            }
        },
        hasHorizontalScrollbar: {
            get: function() {
                return this.ln;
            },
            set: function(a1) {
                var b = this.ln;
                b !== a1 && (this.ln = a1, this.Ee = !0, this.N(), this.g("hasHorizontalScrollbar", b, a1), fj(this, !1));
            }
        },
        allowHorizontalScroll: {
            get: function() {
                return this.Ws;
            },
            set: function(a1) {
                var b = this.Ws;
                b !== a1 && (this.Ws = a1, this.g("allowHorizontalScroll", b, a1), fj(this, !1));
            }
        },
        allowVerticalScroll: {
            get: function() {
                return this.Zs;
            },
            set: function(a1) {
                var b = this.Zs;
                b !== a1 && (this.Zs = a1, this.g("allowVerticalScroll", b, a1), fj(this, !1));
            }
        },
        scrollHorizontalLineChange: {
            get: function() {
                return this.hu;
            },
            set: function(a1) {
                var b = this.hu;
                b !== a1 && (0 > a1 && xa(a1, ">= 0", Q, "scrollHorizontalLineChange"), this.hu = a1, this.g("scrollHorizontalLineChange", b, a1));
            }
        },
        scrollVerticalLineChange: {
            get: function() {
                return this.lu;
            },
            set: function(a1) {
                var b = this.lu;
                b !== a1 && (0 > a1 && xa(a1, ">= 0", Q, "scrollVerticalLineChange"), this.lu = a1, this.g("scrollVerticalLineChange", b, a1));
            }
        },
        lastInput: {
            get: function() {
                return this.cj;
            },
            set: function(a1) {
                this.cj = a1;
            }
        },
        previousInput: {
            get: function() {
                return this.Qg;
            },
            set: function(a1) {
                this.Qg = a1;
            }
        },
        firstInput: {
            get: function() {
                return this.aq;
            },
            set: function(a1) {
                this.aq = a1;
            }
        },
        currentCursor: {
            get: function() {
                return this.ht;
            },
            set: function(a1) {
                "" === a1 && (a1 = this.Np);
                if (this.ht !== a1) {
                    var b = this.ta, c = this.Ka;
                    if (null !== b && null !== c) {
                        this.ht = a1;
                        var d = b.style.cursor;
                        b.style.cursor = a1;
                        c.style.cursor = a1;
                        b.style.cursor === d && (b.style.cursor = "-webkit-" + a1, c.style.cursor = "-webkit-" + a1, b.style.cursor === d && (b.style.cursor = "-moz-" + a1, c.style.cursor = "-moz-" + a1, b.style.cursor === d && (b.style.cursor = a1, c.style.cursor = a1)));
                    }
                }
            }
        },
        defaultCursor: {
            get: function() {
                return this.Np;
            },
            set: function(a1) {
                "" === a1 && (a1 = "auto");
                var b = this.Np;
                b !== a1 && (this.Np = a1, this.g("defaultCursor", b, a1));
            }
        },
        click: {
            get: function() {
                return this.zh;
            },
            set: function(a1) {
                var b = this.zh;
                b !== a1 && (this.zh = a1, this.g("click", b, a1));
            }
        },
        doubleClick: {
            get: function() {
                return this.Fh;
            },
            set: function(a1) {
                var b = this.Fh;
                b !== a1 && (this.Fh = a1, this.g("doubleClick", b, a1));
            }
        },
        contextClick: {
            get: function() {
                return this.Bh;
            },
            set: function(a1) {
                var b = this.Bh;
                b !== a1 && (this.Bh = a1, this.g("contextClick", b, a1));
            }
        },
        mouseOver: {
            get: function() {
                return this.Qh;
            },
            set: function(a1) {
                var b = this.Qh;
                b !== a1 && (this.Qh = a1, this.g("mouseOver", b, a1));
            }
        },
        mouseHover: {
            get: function() {
                return this.Oh;
            },
            set: function(a1) {
                var b = this.Oh;
                b !== a1 && (this.Oh = a1, this.g("mouseHover", b, a1));
            }
        },
        mouseHold: {
            get: function() {
                return this.Nh;
            },
            set: function(a1) {
                var b = this.Nh;
                b !== a1 && (this.Nh = a1, this.g("mouseHold", b, a1));
            }
        },
        mouseDragOver: {
            get: function() {
                return this.Pt;
            },
            set: function(a1) {
                var b = this.Pt;
                b !== a1 && (this.Pt = a1, this.g("mouseDragOver", b, a1));
            }
        },
        mouseDrop: {
            get: function() {
                return this.Lh;
            },
            set: function(a1) {
                var b = this.Lh;
                b !== a1 && (this.Lh = a1, this.g("mouseDrop", b, a1));
            }
        },
        handlesDragDropForTopLevelParts: {
            get: function() {
                return this.wt;
            },
            set: function(a1) {
                var b = this.wt;
                b !== a1 && (this.wt = a1, this.g("handlesDragDropForTopLevelParts", b, a1));
            }
        },
        mouseEnter: {
            get: function() {
                return this.Mh;
            },
            set: function(a1) {
                var b = this.Mh;
                b !== a1 && (this.Mh = a1, this.g("mouseEnter", b, a1));
            }
        },
        mouseLeave: {
            get: function() {
                return this.Ph;
            },
            set: function(a1) {
                var b = this.Ph;
                b !== a1 && (this.Ph = a1, this.g("mouseLeave", b, a1));
            }
        },
        toolTip: {
            get: function() {
                return this.$h;
            },
            set: function(a1) {
                var b = this.$h;
                b !== a1 && (this.$h = a1, this.g("toolTip", b, a1));
            }
        },
        contextMenu: {
            get: function() {
                return this.Ch;
            },
            set: function(a1) {
                var b = this.Ch;
                b !== a1 && (this.Ch = a1, this.g("contextMenu", b, a1));
            }
        },
        commandHandler: {
            get: function() {
                return this.nb;
            },
            set: function(a1) {
                this.nb !== a1 && (this.nb = a1, a1.Xe(this));
            }
        },
        toolManager: {
            get: function() {
                return this.te;
            },
            set: function(a1) {
                this.te !== a1 && (this.te = a1, a1.diagram = this);
            }
        },
        defaultTool: {
            get: function() {
                return this.ob;
            },
            set: function(a1) {
                var b = this.ob;
                b !== a1 && (this.ob = a1, a1.diagram = this, this.currentTool === b && (this.currentTool = a1));
            }
        },
        currentTool: {
            get: function() {
                return this.hb;
            },
            set: function(a1) {
                var b = this.hb;
                b && (b.isActive && b.doDeactivate(), b.cancelWaitAfter(), b.doStop());
                null === a1 && (a1 = this.defaultTool);
                null !== a1 && (this.hb = a1, a1.diagram = this, a1.doStart());
            }
        },
        selection: {
            get: function() {
                return this.Hw;
            }
        },
        maxSelectionCount: {
            get: function() {
                return this.Mt;
            },
            set: function(a1) {
                var b = this.Mt;
                if (b !== a1) {
                    if (0 <= a1 && !isNaN(a1)) {
                        if (this.Mt = a1, this.g("maxSelectionCount", b, a1), !this.undoManager.isUndoingRedoing && (a1 = this.selection.count - a1, 0 < a1)) {
                            this.R("ChangingSelection", this.selection);
                            b = this.selection.Fa();
                            for(var c = 0; c < a1; c++)b[c].isSelected = !1;
                            this.R("ChangedSelection", this.selection);
                        }
                    } else xa(a1, ">= 0", Q, "maxSelectionCount");
                }
            }
        },
        nodeSelectionAdornmentTemplate: {
            get: function() {
                return this.Rt;
            },
            set: function(a1) {
                var b = this.Rt;
                b !== a1 && (this.Rt = a1, this.g("nodeSelectionAdornmentTemplate", b, a1));
            }
        },
        groupSelectionAdornmentTemplate: {
            get: function() {
                return this.vt;
            },
            set: function(a1) {
                var b = this.vt;
                b !== a1 && (this.vt = a1, this.g("groupSelectionAdornmentTemplate", b, a1));
            }
        },
        linkSelectionAdornmentTemplate: {
            get: function() {
                return this.Jt;
            },
            set: function(a1) {
                var b = this.Jt;
                b !== a1 && (this.Jt = a1, this.g("linkSelectionAdornmentTemplate", b, a1));
            }
        },
        highlighteds: {
            get: function() {
                return this.nw;
            }
        },
        isModified: {
            get: function() {
                var a1 = this.undoManager;
                return a1.isEnabled ? null !== a1.currentTransaction ? !0 : this.qn && this.Ce !== a1.historyIndex : this.qn;
            },
            set: function(a1) {
                if (this.qn !== a1) {
                    this.qn = a1;
                    var b = this.undoManager;
                    !a1 && b.isEnabled && (this.Ce = b.historyIndex);
                    a1 || ak(this);
                }
            }
        },
        model: {
            get: function() {
                return this.dc;
            },
            set: function(a1) {
                var b = this.dc;
                if (b !== a1) {
                    this.currentTool.doCancel();
                    b && b.undoManager !== a1.undoManager && b.undoManager.isInTransaction && C("Do not replace a Diagram.model while a transaction is in progress.");
                    this.animationManager.Cc(!0);
                    var c = Li(this, !0);
                    this.hf = !1;
                    this.en = !0;
                    this.Ce = -2;
                    this.kg = !1;
                    var d = this.wb;
                    this.wb = !0;
                    kh(this.animationManager, "Model");
                    b && (null !== this.pf && this.pf.each(function(a1) {
                        return b.hk(a1);
                    }), b.hk(this.Oc));
                    this.dc = a1;
                    this.partManager = bk(this.dc.type);
                    for(var e = 0; e < c.length; e++)this.add(c[e]);
                    a1.Pe(this.Ib);
                    this.partManager.addAllModeledParts();
                    a1.hk(this.Ib);
                    a1.Pe(this.Oc);
                    null !== this.pf && this.pf.each(function(b) {
                        return a1.Pe(b);
                    });
                    this.wb = d;
                    this.Ya();
                    this.wb || this.N();
                    b && a1.undoManager.copyProperties(b.undoManager);
                }
            }
        },
        aa: {
            get: function() {
                return this.rw;
            },
            set: function(a1) {
                this.rw = a1;
            }
        },
        zs: {
            get: function() {
                return this.sy;
            }
        },
        skipsModelSourceBindings: {
            get: function() {
                return this.Iw;
            },
            set: function(a1) {
                this.Iw = a1;
            }
        },
        Ms: {
            get: function() {
                return this.nu;
            },
            set: function(a1) {
                this.nu = a1;
            }
        },
        nodeTemplate: {
            get: function() {
                return this.Lg.I("");
            },
            set: function(a1) {
                var b = this.Lg.I("");
                b !== a1 && (this.Lg.add("", a1), this.g("nodeTemplate", b, a1), this.undoManager.isUndoingRedoing || this.Wd());
            }
        },
        nodeTemplateMap: {
            get: function() {
                return this.Lg;
            },
            set: function(a1) {
                var b = this.Lg;
                b !== a1 && (this.Lg = a1, this.g("nodeTemplateMap", b, a1), this.undoManager.isUndoingRedoing || this.Wd());
            }
        },
        groupTemplate: {
            get: function() {
                return this.Yi.I("");
            },
            set: function(a1) {
                var b = this.Yi.I("");
                b !== a1 && (this.Yi.add("", a1), this.g("groupTemplate", b, a1), this.undoManager.isUndoingRedoing || this.Wd());
            }
        },
        groupTemplateMap: {
            get: function() {
                return this.Yi;
            },
            set: function(a1) {
                var b = this.Yi;
                b !== a1 && (this.Yi = a1, this.g("groupTemplateMap", b, a1), this.undoManager.isUndoingRedoing || this.Wd());
            }
        },
        linkTemplate: {
            get: function() {
                return this.Kh.I("");
            },
            set: function(a1) {
                var b = this.Kh.I("");
                b !== a1 && (this.Kh.add("", a1), this.g("linkTemplate", b, a1), this.undoManager.isUndoingRedoing || this.Wd());
            }
        },
        linkTemplateMap: {
            get: function() {
                return this.Kh;
            },
            set: function(a1) {
                var b = this.Kh;
                b !== a1 && (this.Kh = a1, this.g("linkTemplateMap", b, a1), this.undoManager.isUndoingRedoing || this.Wd());
            }
        },
        isMouseCaptured: {
            get: function() {
                return this.qw;
            },
            set: function(a1) {
                var b = this.ta;
                null !== b && (b = b.Oa, b instanceof SVGElement || (a1 ? (this.lastInput.bubbles = !1, this.removeEventListener(b, "pointermove", this.ck, !1), this.removeEventListener(b, "pointerdown", this.ui, !1), this.removeEventListener(b, "pointerup", this.ek, !1), this.removeEventListener(b, "pointerout", this.dk, !1), this.removeEventListener(b, "pointercancel", this.bk, !1), this.addEventListener(x, "pointermove", this.ck, !0), this.addEventListener(x, "pointerdown", this.ui, !0), this.addEventListener(x, "pointerup", this.ek, !0), this.addEventListener(x, "pointerout", this.dk, !0), this.addEventListener(x, "pointercancel", this.bk, !0), this.removeEventListener(b, "wheel", this.Zj, !1), this.addEventListener(x, "wheel", this.Zj, !0), this.addEventListener(x, "selectstart", this.preventDefault, !1)) : (this.removeEventListener(x, "pointermove", this.ck, !0), this.removeEventListener(x, "pointerdown", this.ui, !0), this.removeEventListener(x, "pointerup", this.ek, !0), this.removeEventListener(x, "pointerout", this.dk, !0), this.removeEventListener(x, "pointercancel", this.bk, !0), this.addEventListener(b, "pointermove", this.ck, !1), this.addEventListener(b, "pointerdown", this.ui, !1), this.addEventListener(b, "pointerup", this.ek, !1), this.addEventListener(b, "pointerout", this.dk, !1), this.addEventListener(b, "pointercancel", this.bk, !1), this.removeEventListener(x, "wheel", this.Zj, !0), this.removeEventListener(x, "selectstart", this.preventDefault, !1), this.addEventListener(b, "wheel", this.Zj, !1)), this.qw = a1));
            }
        },
        position: {
            get: function() {
                return this.pa;
            },
            set: function(a1) {
                var b = J.alloc().assign(this.pa);
                if (!b.D(a1)) {
                    var c = this.viewportBounds.copy();
                    this.pa.assign(a1);
                    Mh(this.animationManager, b, this.pa);
                    this.wb || null === this.ta && !this.vo.w() ? Ni(this) : (this.wb = !0, a1 = this.scale, hj(this, this.Rp, this.Aa / a1, this.ya / a1, this.yk, !1), this.wb = !1);
                    if (!this.wb) this.onViewportBoundsChanged(c, this.viewportBounds, this.Ca, !1);
                }
                J.free(b);
            }
        },
        initialPosition: {
            get: function() {
                return this.yt;
            },
            set: function(a1) {
                this.yt.D(a1) || (this.yt = a1.J());
            }
        },
        initialScale: {
            get: function() {
                return this.zt;
            },
            set: function(a1) {
                this.zt !== a1 && (this.zt = a1);
            }
        },
        grid: {
            get: function() {
                null === this.fe && (this.fe = cj(this));
                return this.fe;
            },
            set: function(a1) {
                var b = this.fe;
                if (b !== a1) {
                    null === b && (b = this.fe = cj(this));
                    a1.type !== W.Grid && C("Diagram.grid must be a Panel of type Panel.Grid");
                    var c = b.panel;
                    null !== c && c.remove(b);
                    this.fe = a1;
                    a1.name = "GRID";
                    null !== c && c.add(a1);
                    qj(this);
                    this.N();
                    this.g("grid", b, a1);
                }
            }
        },
        viewportBounds: {
            get: function() {
                return this.Rw;
            }
        },
        viewSize: {
            get: function() {
                return this.vo;
            },
            set: function(a1) {
                var b = this.viewSize;
                b.D(a1) || (this.vo = a1 = a1.J(), this.ya = this.Aa = 0, a1.w() ? (this.Aa = a1.width, this.ya = a1.height) : null !== this.Ka && (this.Aa = this.Ka.clientWidth || 1, this.ya = this.Ka.clientHeight || 1), Ni(this), this.Ya(), this.g("viewSize", b, a1), this.redraw());
            }
        },
        fixedBounds: {
            get: function() {
                return this.tt;
            },
            set: function(a1) {
                var b = this.tt;
                b.D(a1) || (-Infinity !== a1.width && Infinity !== a1.height && -Infinity !== a1.height || C("fixedBounds width/height must not be Infinity"), this.tt = a1 = a1.J(), this.Ya(), this.g("fixedBounds", b, a1));
            }
        },
        scrollMargin: {
            get: function() {
                return this.rj;
            },
            set: function(a1) {
                "number" === typeof a1 && (a1 = new dc(a1));
                var b = this.rj;
                b.D(a1) || (this.rj = a1 = a1.J(), this.g("scrollMargin", b, a1), this.gk());
            }
        },
        scrollMode: {
            get: function() {
                return this.sj;
            },
            set: function(a1) {
                var b = this.sj;
                b !== a1 && (this.sj = a1, a1 === Rh && fj(this, !1), this.g("scrollMode", b, a1), this.Ee = !0, this.N());
            }
        },
        scrollsPageOnFocus: {
            get: function() {
                return this.mu;
            },
            set: function(a1) {
                var b = this.mu;
                b !== a1 && (this.mu = a1, this.g("scrollsPageOnFocus", b, a1));
            }
        },
        positionComputation: {
            get: function() {
                return this.Yt;
            },
            set: function(a1) {
                var b = this.Yt;
                b !== a1 && (this.Yt = a1, fj(this, !1), this.g("positionComputation", b, a1));
            }
        },
        scaleComputation: {
            get: function() {
                return this.eu;
            },
            set: function(a1) {
                var b = this.eu;
                b !== a1 && (this.eu = a1, Yj(this, this.scale, this.scale), this.g("scaleComputation", b, a1));
            }
        },
        documentBounds: {
            get: function() {
                return this.Rp;
            }
        },
        isVirtualized: {
            get: function() {
                return this.Ht;
            },
            set: function(a1) {
                var b = this.Ht;
                b !== a1 && (this.Ht = a1, this.g("isVirtualized", b, a1));
            }
        },
        scale: {
            get: function() {
                return this.Ca;
            },
            set: function(a1) {
                var b = this.Ca;
                b !== a1 && Yj(this, b, a1);
            }
        },
        defaultScale: {
            get: function() {
                return this.Op;
            },
            set: function(a1) {
                this.Op = a1;
            }
        },
        autoScale: {
            get: function() {
                return this.yh;
            },
            set: function(a1) {
                var b = this.yh;
                b !== a1 && (this.yh = a1, this.g("autoScale", b, a1), a1 !== qh && fj(this, !1));
            }
        },
        initialAutoScale: {
            get: function() {
                return this.Fg;
            },
            set: function(a1) {
                var b = this.Fg;
                b !== a1 && (this.Fg = a1, this.g("initialAutoScale", b, a1));
            }
        },
        initialViewportSpot: {
            get: function() {
                return this.At;
            },
            set: function(a1) {
                var b = this.At;
                b !== a1 && (a1.sb() || C("initialViewportSpot must be a specific Spot: " + a1), this.At = a1, this.g("initialViewportSpot", b, a1));
            }
        },
        initialDocumentSpot: {
            get: function() {
                return this.xt;
            },
            set: function(a1) {
                var b = this.xt;
                b !== a1 && (a1.sb() || C("initialViewportSpot must be a specific Spot: " + a1), this.xt = a1, this.g("initialDocumentSpot", b, a1));
            }
        },
        minScale: {
            get: function() {
                return this.Nt;
            },
            set: function(a1) {
                var b = this.Nt;
                b !== a1 && (0 < a1 ? (this.Nt = a1, this.g("minScale", b, a1), a1 > this.scale && (this.scale = a1)) : xa(a1, "> 0", Q, "minScale"));
            }
        },
        maxScale: {
            get: function() {
                return this.Lt;
            },
            set: function(a1) {
                var b = this.Lt;
                b !== a1 && (0 < a1 ? (this.Lt = a1, this.g("maxScale", b, a1), a1 < this.scale && (this.scale = a1)) : xa(a1, "> 0", Q, "maxScale"));
            }
        },
        zoomPoint: {
            get: function() {
                return this.yu;
            },
            set: function(a1) {
                this.yu.D(a1) || (this.yu = a1 = a1.J());
            }
        },
        contentAlignment: {
            get: function() {
                return this.yk;
            },
            set: function(a1) {
                var b = this.yk;
                b.D(a1) || (this.yk = a1 = a1.J(), this.g("contentAlignment", b, a1), fj(this, !1));
            }
        },
        initialContentAlignment: {
            get: function() {
                return this.oq;
            },
            set: function(a1) {
                var b = this.oq;
                b.D(a1) || (this.oq = a1 = a1.J(), this.g("initialContentAlignment", b, a1));
            }
        },
        padding: {
            get: function() {
                return this.zb;
            },
            set: function(a1) {
                "number" === typeof a1 && (a1 = new dc(a1));
                var b = this.zb;
                b.D(a1) || (this.zb = a1 = a1.J(), this.Ya(), this.g("padding", b, a1));
            }
        },
        partManager: {
            get: function() {
                return this.Pc;
            },
            set: function(a1) {
                var b = this.Pc;
                b !== a1 && (null !== a1.diagram && C("Cannot share PartManagers between Diagrams: " + a1.toString()), b && b.Xe(null), this.Pc = a1, a1.Xe(this));
            }
        },
        nodes: {
            get: function() {
                return this.partManager.nodes.iterator;
            }
        },
        links: {
            get: function() {
                return this.partManager.links.iterator;
            }
        },
        parts: {
            get: function() {
                return this.partManager.parts.iterator;
            }
        },
        layout: {
            get: function() {
                return this.Sc;
            },
            set: function(a1) {
                var b = this.Sc;
                b !== a1 && (this.Sc = a1, a1.diagram = this, a1.group = null, this.xh = !0, this.g("layout", b, a1), this.ac());
            }
        },
        isTreePathToChildren: {
            get: function() {
                return this.Gt;
            },
            set: function(a1) {
                var b = this.Gt;
                if (b !== a1 && (this.Gt = a1, this.g("isTreePathToChildren", b, a1), !this.undoManager.isUndoingRedoing)) for(a1 = this.nodes; a1.next();)Hk(a1.value);
            }
        },
        treeCollapsePolicy: {
            get: function() {
                return this.tu;
            },
            set: function(a1) {
                var b = this.tu;
                b !== a1 && (a1 !== yi && a1 !== Ik && a1 !== Jk && C("Unknown Diagram.treeCollapsePolicy: " + a1), this.tu = a1, this.g("treeCollapsePolicy", b, a1));
            }
        },
        Ue: {
            get: function() {
                return this.pw;
            },
            set: function(a1) {
                this.pw = a1;
            }
        },
        avoidanceCellSize: {
            get: function() {
                return this.aw;
            },
            set: function(a1) {
                this.Xh = null;
                this.aw = new L(Math.max(1, a1.width), Math.max(1, a1.height));
            }
        },
        avoidanceLimit: {
            get: function() {
                return this.bw;
            },
            set: function(a1) {
                this.bw = Math.max(1, a1);
            }
        },
        autoScrollInterval: {
            get: function() {
                return this.tp;
            },
            set: function(a1) {
                var b = this.tp;
                b !== a1 && (this.tp = a1, this.g("autoScrollInterval", b, a1));
            }
        },
        autoScrollRegion: {
            get: function() {
                return this.wp;
            },
            set: function(a1) {
                "number" === typeof a1 && (a1 = new dc(a1));
                var b = this.wp;
                b.D(a1) || (this.wp = a1 = a1.J(), this.Ya(), this.g("autoScrollRegion", b, a1));
            }
        }
    });
    ma.Object.defineProperties(Q, {
        licenseKey: {
            get: function() {
                return Kk.kc();
            },
            set: function(a1) {
                Kk.add(a1.replace(/\s/g, ""));
            }
        },
        version: {
            get: function() {
                return Lk;
            }
        }
    });
    Q.prototype.makeImageData = Q.prototype.Jx;
    Q.prototype.makeImage = Q.prototype.Wz;
    Q.prototype.cacheGroupExternalLinks = Q.prototype.Fu;
    Q.prototype.addRenderer = Q.prototype.$r;
    Q.prototype.makeSVG = Q.prototype.av;
    Q.prototype.makeSvg = Q.prototype.Bs;
    Q.prototype.stopAutoScroll = Q.prototype.ug;
    Q.prototype.doAutoScroll = Q.prototype.fs;
    Q.prototype.isUnoccupied = Q.prototype.Xj;
    Q.prototype.raiseDiagramEvent = Q.prototype.R;
    Q.prototype.removeDiagramListener = Q.prototype.$l;
    Q.prototype.addDiagramListener = Q.prototype.Bj;
    Q.prototype.findTreeRoots = Q.prototype.yz;
    Q.prototype.layoutDiagram = Q.prototype.Uz;
    Q.prototype.findTopLevelGroups = Q.prototype.qz;
    Q.prototype.findTopLevelNodesAndLinks = Q.prototype.rz;
    Q.prototype.ensureBounds = Q.prototype.Va;
    Q.prototype.findLinksByExample = Q.prototype.ks;
    Q.prototype.findNodesByExample = Q.prototype.ls;
    Q.prototype.findLinkForData = Q.prototype.Kc;
    Q.prototype.findNodeForData = Q.prototype.ii;
    Q.prototype.findPartForData = Q.prototype.Lc;
    Q.prototype.findLinkForKey = Q.prototype.findLinkForKey;
    Q.prototype.findNodeForKey = Q.prototype.Wb;
    Q.prototype.findPartForKey = Q.prototype.findPartForKey;
    Q.prototype.rebuildParts = Q.prototype.Wd;
    Q.prototype.transformViewToDoc = Q.prototype.Os;
    Q.prototype.transformRectDocToView = Q.prototype.zA;
    Q.prototype.transformDocToView = Q.prototype.np;
    Q.prototype.centerRect = Q.prototype.ds;
    Q.prototype.scrollToRect = Q.prototype.tv;
    Q.prototype.scroll = Q.prototype.scroll;
    Q.prototype.highlightCollection = Q.prototype.Jz;
    Q.prototype.highlight = Q.prototype.Iz;
    Q.prototype.selectCollection = Q.prototype.rA;
    Q.prototype.select = Q.prototype.select;
    Q.prototype.updateAllRelationshipsFromData = Q.prototype.qp;
    Q.prototype.updateAllTargetBindings = Q.prototype.updateAllTargetBindings;
    Q.prototype.commit = Q.prototype.commit;
    Q.prototype.rollbackTransaction = Q.prototype.Kf;
    Q.prototype.commitTransaction = Q.prototype.eb;
    Q.prototype.startTransaction = Q.prototype.Ea;
    Q.prototype.raiseChanged = Q.prototype.g;
    Q.prototype.raiseChangedEvent = Q.prototype.cb;
    Q.prototype.removeChangedListener = Q.prototype.hk;
    Q.prototype.addChangedListener = Q.prototype.Pe;
    Q.prototype.removeModelChangedListener = Q.prototype.mA;
    Q.prototype.addModelChangedListener = Q.prototype.Yw;
    Q.prototype.findLayer = Q.prototype.Pj;
    Q.prototype.removeLayer = Q.prototype.kA;
    Q.prototype.addLayerAfter = Q.prototype.Cy;
    Q.prototype.addLayerBefore = Q.prototype.Ww;
    Q.prototype.addLayer = Q.prototype.zl;
    Q.prototype.moveParts = Q.prototype.moveParts;
    Q.prototype.copyParts = Q.prototype.Jj;
    Q.prototype.removeParts = Q.prototype.Hs;
    Q.prototype.remove = Q.prototype.remove;
    Q.prototype.add = Q.prototype.add;
    Q.prototype.clearDelayedGeometries = Q.prototype.bx;
    Q.prototype.setProperties = Q.prototype.mm;
    Q.prototype.attach = Q.prototype.Du;
    Q.prototype.set = Q.prototype.set;
    Q.prototype.resetInputOptions = Q.prototype.Sx;
    Q.prototype.setInputOption = Q.prototype.sA;
    Q.prototype.getInputOption = Q.prototype.Pl;
    Q.prototype.resetRenderingHints = Q.prototype.Tx;
    Q.prototype.setRenderingHint = Q.prototype.Xx;
    Q.prototype.getRenderingHint = Q.prototype.Gf;
    Q.prototype.maybeUpdate = Q.prototype.bd;
    Q.prototype.requestUpdate = Q.prototype.ac;
    Q.prototype.delayInitialization = Q.prototype.Xy;
    Q.prototype.isUpdateRequested = Q.prototype.Pz;
    Q.prototype.invalidateDocumentBounds = Q.prototype.Ya;
    Q.prototype.findObjectsNear = Q.prototype.og;
    Q.prototype.findPartsNear = Q.prototype.mz;
    Q.prototype.findObjectsIn = Q.prototype.Cf;
    Q.prototype.findPartsIn = Q.prototype.ux;
    Q.prototype.findObjectsAt = Q.prototype.ji;
    Q.prototype.findPartsAt = Q.prototype.lz;
    Q.prototype.findObjectAt = Q.prototype.jc;
    Q.prototype.findPartAt = Q.prototype.Nl;
    Q.prototype.focusObject = Q.prototype.zz;
    Q.prototype.alignDocument = Q.prototype.Jy;
    Q.prototype.zoomToRect = Q.prototype.BA;
    Q.prototype.zoomToFit = Q.prototype.zoomToFit;
    Q.prototype.diagramScroll = Q.prototype.kx;
    Q.prototype.focus = Q.prototype.focus;
    var oi = new ob, Oi = null, Ng = void 0 !== x.document, Ji = null, Ki = "", qh = new E(Q, "None", 0), ij = new E(Q, "Uniform", 1), jj = new E(Q, "UniformToFill", 2), Df = new E(Q, "CycleAll", 10), Hf = new E(Q, "CycleNotDirected", 11), Jf = new E(Q, "CycleNotDirectedFast", 12), Kf = new E(Q, "CycleNotUndirected", 13), Ef = new E(Q, "CycleDestinationTree", 14), Gf = new E(Q, "CycleSourceTree", 15), Rh = new E(Q, "DocumentScroll", 1), Th = new E(Q, "InfiniteScroll", 2), yi = new E(Q, "TreeParentCollapsed", 21), Ik = new E(Q, "AllParentsCollapsed", 22), Jk = new E(Q, "AnyParentsCollapsed", 23), Kk = new F, Lk = "2.3.11", Zi = "image", aj = null, mi = !1;
    function ni() {
        if (Ng) {
            var a1 = x.document.createElement("canvas"), b = a1.getContext("2d"), c = Ma("7ca11abfd022028846");
            b[c] = Ma("398c3597c01238");
            for(var d = [
                "5da73c80a36455d7038e4972187c3cae51fd22",
                ra.Dx + "4ae6247590da4bb21c324ba3a84e385776",
                ld.xF + "fb236cdfda5de14c134ba1a95a2d4c7cc6f93c1387",
                K.za
            ], e = 1; 5 > e; e++)b[Ma("7ca11abfd7330390")](Ma(d[e - 1]), 10, 15 * e);
            b[c] = Ma("39f046ebb36e4b");
            for(c = 1; 5 > c; c++)b[Ma("7ca11abfd7330390")](Ma(d[c - 1]), 10, 15 * c);
            if (4 !== d.length || "5" !== d[0][0] || "7" !== d[3][0]) ld.prototype.Cd = ld.prototype.Eu;
            aj = a1;
        }
    }
    Q.className = "Diagram";
    Q.fromDiv = function(a1) {
        var b = a1;
        "string" === typeof a1 && (b = x.document.getElementById(a1));
        return b instanceof HTMLDivElement && b.H instanceof Q ? b.H : null;
    };
    Q.inherit = function(a1, b) {
        function c() {}
        if (Object.getPrototypeOf(a1).prototype) throw Error("Used go.Diagram.inherit defining already defined class \n" + a1);
        c.prototype = b.prototype;
        a1.prototype = new c;
        a1.prototype.constructor = a1;
    };
    Q.useDOM = function(a1) {
        Ng = a1 ? void 0 !== x.document : !1;
    };
    Q.isUsingDOM = function() {
        return Ng;
    };
    Q.None = qh;
    Q.Uniform = ij;
    Q.UniformToFill = jj;
    Q.CycleAll = Df;
    Q.CycleNotDirected = Hf;
    Q.CycleNotDirectedFast = Jf;
    Q.CycleNotUndirected = Kf;
    Q.CycleDestinationTree = Ef;
    Q.CycleSourceTree = Gf;
    Q.DocumentScroll = Rh;
    Q.InfiniteScroll = Th;
    Q.TreeParentCollapsed = yi;
    Q.AllParentsCollapsed = Ik;
    Q.AnyParentsCollapsed = Jk;
    function ui() {
        this.wy = null;
        this.j = "zz@orderNum";
        "63ad05bbe23a1786468a4c741b6d2" === this._tk ? this.Rc = this.j = !0 : this.Rc = null;
    }
    function Aj(a1, b) {
        b.ib.setTransform(b.Nb, 0, 0, b.Nb, 0, 0);
        b.ib.yc();
        if (null === a1.Rc) a: {
            b = "f";
            var c = x[Ma("76a715b2f73f148a")][Ma("72ba13b5")] || "";
            a1.Rc = !0;
            if (Ng) {
                var d = Q[Ma("76a115b6ed251eaf4692")];
                if (d) for(var e = Kk.iterator; e.next();){
                    d = e.value;
                    d = Ma(d).split(Ma("39e9"));
                    if (6 > d.length) break;
                    var f = Ma(d[1]).split(".");
                    if ("7da71ca0" !== d[4]) break;
                    var g = Ma(ra[Ma("6cae19")]).split(".");
                    if (f[0] > g[0] || f[0] === g[0] && f[1] >= g[1]) {
                        var h = x[Ma("74a900bae4370f8b51")][Ma("6fbb13a1c2311e8a57")].toLowerCase();
                        g = h[Ma("73a612b6fb191d")](Ma("3aad1ab6e022098b4dc4"));
                        f = Ma(d[2]);
                        if (-1 < g && (h = h[Ma("73a612b6fb191d")](f.toLowerCase() + "/"), a1.Rc = !(-1 < h && h < g), !a1.Rc)) break;
                        g = c[Ma("76ad18b4f73e")];
                        for(h = c[Ma("73a612b6fb191d")](Ma("35e7")) + 2; h < g; h++)b += c[h];
                        g = b[Ma("73a612b6fb191d")](f);
                        0 > g && f !== Ma("7da71ca0ad381e90") && (g = b[Ma("73a612b6fb191d")](Ma("76a715b2ef3e149757")));
                        0 > g && (g = b[Ma("73a612b6fb191d")](Ma("76a715b2ef3e149757")));
                        0 > g && (g = b[Ma("73a612b6fb191d")](Ma("2bfa41fdb3784bca12")));
                        0 > g && (g = c[Ma("73a612b6fb191d")](Ma("7baa19a6f76c1988428554")));
                        a1.Rc = !(0 <= g && g < b[Ma("73a612b6fb191d")](Ma("35")) || -1 === b[Ma("73a612b6fb191d")](Ma("35")));
                        if (!a1.Rc) break;
                        if (c[Ma("73a612b6fb191d")](Ma("7fb002b6ed25128b4da25b2e")) && (a1.Rc = !(-1 < c[Ma("73a612b6fb191d")](f)), !a1.Rc)) break;
                        g = x[Ma("76a715b2f73f148a")][Ma("69ad17a1e03e")];
                        h = g[Ma("73a612b6fb191d")](Ma("7fb002b6ed25128b4da25b2e"));
                        if (-1 < h && (a1.Rc = !(g[Ma("73a612b6fb191d")](f) > h), !a1.Rc)) break;
                        if ("#" === f[0]) {
                            g = x.document.createElement("div");
                            for(var k = d[0].replace(/[A-Za-z]/g, ""); 4 > k.length;)k += "9";
                            h = k;
                            k = k.substr(k.length - 4);
                            d = "";
                            d += [
                                "gsh",
                                "gsf"
                            ][parseInt(k.substr(0, 1), 10) % 2];
                            d += [
                                "Header",
                                "Background",
                                "Display",
                                "Feedback"
                            ][parseInt(k.substr(0, 1), 10) % 4];
                            g[Ma("79a417a0f0181a8946")] = d;
                            if (x.document[Ma("78a712aa")]) {
                                x.document[Ma("78a712aa")][Ma("7bb806b6ed32388c4a875b")](g);
                                k = x.getComputedStyle(g).getPropertyValue(Ma("78a704b7e62456904c9b12701b6532a8"));
                                var l = x.getComputedStyle(g).getPropertyValue(Ma("75b817b0ea2202"));
                                x.document[Ma("78a712aa")][Ma("68ad1bbcf533388c4a875b")](g);
                                if (k) {
                                    if (g = x[Ma("77a902b0eb1b1e804a8a")], l === "0." + parseInt(h, 10) % 100 || -1 !== k.indexOf(parseInt(f[1] + f[2], 16)) && -1 !== k.indexOf(parseInt(f[3] + f[4], 16))) {
                                        a1.Rc = !1;
                                        break;
                                    } else if (g && g(Ma("32ae19a1e0331fc94084537c067a67fa59f1386b89d006")).matches) for(d = "." + d, f = 0; f < document.styleSheets.length; f++){
                                        g = document.styleSheets[f].rules || document.styleSheets[f].cssRules;
                                        for(var m in g)if (d === g[m].selectorText) {
                                            a1.Rc = !1;
                                            break a;
                                        }
                                    }
                                }
                            } else a1.Rc = null, a1.Rc = !1;
                        }
                    }
                }
                else {
                    m = c[Ma("76ad18b4f73e")];
                    for(e = c[Ma("73a612b6fb191d")](Ma("35e7")) + 2; e < m; e++)b += c[e];
                    c = b[Ma("73a612b6fb191d")](Ma("7da71ca0ad381e90"));
                    a1.Rc = !(0 <= c && c < b[Ma("73a612b6fb191d")](Ma("35")));
                }
            }
        }
        return 0 < a1.Rc && a1 !== a1.wy ? !0 : !1;
    }
    ui.className = "DiagramHelper";
    function Je(a1) {
        this.j = void 0 === a1 ? new J : a1;
        this.o = new J;
    }
    ma.Object.defineProperties(Je.prototype, {
        point: {
            get: function() {
                return this.j;
            },
            set: function(a1) {
                this.j = a1;
            }
        },
        shifted: {
            get: function() {
                return this.o;
            },
            set: function(a1) {
                this.o = a1;
            }
        }
    });
    var Yi = "DraggingInfo";
    Je.className = "DraggingInfo";
    function Rj(a1, b, c) {
        this.node = a1;
        this.info = b;
        this.Su = c;
    }
    Rj.className = "DraggingNodeInfoPair";
    function Be() {
        this.reset();
    }
    Be.prototype.reset = function() {
        this.isGridSnapEnabled = !1;
        this.isGridSnapRealtime = !0;
        this.gridSnapCellSize = new L(NaN, NaN).freeze();
        this.gridSnapCellSpot = sc;
        this.gridSnapOrigin = new J(NaN, NaN).freeze();
        this.groupsSnapMembers = this.dragsTree = this.dragsLink = !1;
        this.dragsMembers = this.groupsAlwaysMove = !0;
    };
    Be.className = "DraggingOptions";
    function Mk(a1, b) {
        if ("string" === typeof a1 || x.Element && a1 instanceof Element) var c = Q.call(this, a1) || this;
        else c = Q.call(this) || this, b = a1;
        Nk(c);
        b && c.mm(b);
        return c;
    }
    la(Mk, Q);
    function Nk(a1) {
        a1.allowDragOut = !0;
        a1.allowMove = !1;
        a1.isReadOnly = !0;
        a1.contentAlignment = tc;
        a1.layout = new Ok;
    }
    Mk.prototype.reset = function() {
        Q.prototype.reset.call(this);
        Nk(this);
    };
    Mk.className = "Palette";
    function Gk(a1, b) {
        if ("string" === typeof a1 || x.Element && a1 instanceof Element) var c = Q.call(this, a1) || this;
        else c = Q.call(this) || this, b = a1;
        var d = c;
        c.animationManager.isEnabled = !1;
        c.wb = !0;
        c.V = null;
        c.ln = !1;
        c.mn = !1;
        c.F = !0;
        c.u = !0;
        c.ia = 0;
        c.o = !1;
        c.pl = null;
        c.Xx("drawShadows", !1);
        a1 = new U;
        var e = new Bf;
        e.stroke = "magenta";
        e.strokeWidth = 2;
        e.fill = "transparent";
        e.name = "BOXSHAPE";
        a1.selectable = !0;
        a1.selectionAdorned = !1;
        a1.selectionObjectName = "BOXSHAPE";
        a1.locationObjectName = "BOXSHAPE";
        a1.resizeObjectName = "BOXSHAPE";
        a1.cursor = "move";
        a1.add(e);
        c.j = a1;
        c.allowCopy = !1;
        c.allowDelete = !1;
        c.allowSelect = !0;
        c.autoScrollRegion = new dc(0, 0, 0, 0);
        c.pa.h(0, 0);
        c.toolManager.gb("Dragging", new Pk, c.toolManager.mouseMoveTools);
        c.click = function() {
            var a1 = d.observed;
            if (null !== a1) {
                var b = a1.viewportBounds, c = d.lastInput.documentPoint;
                a1.position = new J(c.x - b.width / 2, c.y - b.height / 2);
            }
        };
        c.Pf = function() {
            d.Ya();
            Qk(d);
        };
        c.Xd = function() {
            null !== d.observed && (d.Ya(), d.N());
        };
        c.Ha = function() {
            1 > d.updateDelay ? d.N() : d.o || (d.o = !0, setTimeout(function() {
                return d.redraw();
            }, d.updateDelay));
        };
        c.Of = function() {
            null !== d.observed && Qk(d);
        };
        c.autoScale = ij;
        c.wb = !1;
        b && Object.assign(c, b);
        return c;
    }
    la(Gk, Q);
    Gk.prototype.computePixelRatio = function() {
        return 1;
    };
    Gk.prototype.redraw = function() {
        if (this.o && 1 <= this.updateDelay) {
            this.o = !1;
            var a1 = this.ta, b = this.ib;
            if (null !== a1 && null !== b) {
                xj(this);
                if (null === this.pl) {
                    var c = new Pi(null);
                    c.width = a1.width;
                    c.height = a1.height;
                    this.pl = c;
                }
                try {
                    this.ta = this.pl, this.ib = this.ta.context, this.ib.Vc(!0), this.ib.setTransform(1, 0, 0, 1, 0, 0), this.ib.clearRect(0, 0, this.ta.width, this.ta.height), Rk(this);
                } finally{
                    this.ta = a1, this.ib = b;
                }
            }
        }
        Q.prototype.redraw.call(this);
    };
    Gk.prototype.hc = function() {
        null === this.Ka && C("No div specified");
        null === this.ta && C("No canvas specified");
        if (!(this.ta instanceof Fj) && (fi(this.box), this.Fc)) {
            var a1 = this.observed;
            if (null !== a1 && !a1.animationManager.defaultAnimation.isAnimating && a1.pi) {
                xj(this);
                var b = this.ta;
                a1 = this.ib;
                a1.Vc(!0);
                a1.setTransform(1, 0, 0, 1, 0, 0);
                a1.clearRect(0, 0, b.width, b.height);
                1 > this.updateDelay ? Rk(this) : null !== this.pl && (a1.drawImage(this.pl.Oa, 0, 0), b = this.Bb, b.reset(), 1 !== this.scale && b.scale(this.scale), 0 === this.position.x && 0 === this.position.y || b.translate(-this.position.x, -this.position.y), a1.scale(this.Nb, this.Nb), a1.transform(b.m11, b.m12, b.m21, b.m22, b.dx, b.dy), a1.yc());
                b = this.Wa.s;
                for(var c = b.length, d = 0; d < c; d++)b[d].hc(a1, this);
                this.Fc = this.vd = !1;
            }
        }
    };
    function Rk(a1) {
        var b = a1.observed;
        if (null !== b) {
            var c = a1.drawsTemporaryLayers, d = a1.drawsGrid && c, e = b.grid;
            d && null !== e && e.visible && !isNaN(e.width) && !isNaN(e.height) && (e = N.alloc().assign(a1.viewportBounds).ed(b.viewportBounds), qj(b, e), N.free(e), lh(b));
            var f = a1.Bb;
            f.reset();
            1 !== a1.scale && f.scale(a1.scale);
            0 === a1.position.x && 0 === a1.position.y || f.translate(-a1.position.x, -a1.position.y);
            e = a1.ib;
            e.scale(a1.Nb, a1.Nb);
            e.transform(f.m11, f.m12, f.m21, f.m22, f.dx, f.dy);
            e.yc();
            b = b.Wa.s;
            f = b.length;
            for(var g = 0; g < f; g++){
                var h = b[g], k = a1;
                if (h.visible && 0 !== h.opacity) {
                    var l = h.diagram.grid.part;
                    if (!c && h.isTemporary) d && l.layer === h && (h = gi(h, e), l.hc(e, k), e.globalAlpha = h);
                    else {
                        for(var m = gi(h, e), n = k.scale, p = N.alloc(), q = h.Pa.s, r = q.length, u = 0; u < r; u++){
                            var w = q[u];
                            (d || w !== l) && h.Nj(e, w, k, null, n, p, !1);
                        }
                        N.free(p);
                        e.globalAlpha = m;
                    }
                }
            }
        }
    }
    function Qk(a1) {
        var b = a1.box;
        if (null !== b) {
            var c = a1.observed;
            if (null !== c) {
                a1.Fc = !0;
                c = c.viewportBounds;
                var d = b.selectionObject, e = L.alloc();
                e.h(c.width, c.height);
                d.desiredSize = e;
                L.free(e);
                a1 = 2 / a1.scale;
                d instanceof Bf && (d.strokeWidth = a1);
                b.location = new J(c.x - a1 / 2, c.y - a1 / 2);
                b.isSelected = !0;
            }
        }
    }
    Gk.prototype.computeBounds = function() {
        var a1 = this.observed;
        if (null === a1) return bc;
        var b = a1.documentBounds.copy();
        b.ed(a1.viewportBounds);
        return b;
    };
    Gk.prototype.invalidateViewport = function() {
        !0 !== this.Fc && (this.Fc = !0, this.ac());
    };
    Gk.prototype.onViewportBoundsChanged = function(a1, b, c, d) {
        this.wb || (this.vd = !0, this.N(), this.Ee = !0, this.Ya(), Qk(this), this.gc.scale = c, this.gc.position.x = a1.x, this.gc.position.y = a1.y, this.gc.bounds.assign(a1), this.gc.Oz = d, this.R("ViewportBoundsChanged", this.gc, a1));
    };
    ma.Object.defineProperties(Gk.prototype, {
        observed: {
            get: function() {
                return this.V;
            },
            set: function(a1) {
                var b = this.V;
                a1 instanceof Gk && C("Overview.observed Diagram may not be an Overview itself: " + a1);
                if (b !== a1) {
                    null !== b && (this.remove(this.box), b.$l("ViewportBoundsChanged", this.Pf), b.$l("DocumentBoundsChanged", this.Xd), b.$l("InvalidateDraw", this.Ha), b.$l("AnimationFinished", this.Of));
                    this.V = a1;
                    null !== a1 && (a1.Bj("ViewportBoundsChanged", this.Pf), a1.Bj("DocumentBoundsChanged", this.Xd), a1.Bj("InvalidateDraw", this.Ha), a1.Bj("AnimationFinished", this.Of), this.add(this.box));
                    this.Ya();
                    if (null === a1) {
                        this.pl = null;
                        var c = this.ta, d = this.ib;
                        c && d && (d.setTransform(1, 0, 0, 1, 0, 0), d.clearRect(0, 0, c.width, c.height));
                    } else this.Ha(null), Qk(this), this.N();
                    this.g("observed", b, a1);
                }
            }
        },
        box: {
            get: function() {
                return this.j;
            },
            set: function(a1) {
                var b = this.j;
                b !== a1 && (this.j = a1, this.remove(b), this.add(this.j), Qk(this), this.g("box", b, a1));
            }
        },
        drawsTemporaryLayers: {
            get: function() {
                return this.F;
            },
            set: function(a1) {
                this.F !== a1 && (this.F = a1, this.redraw());
            }
        },
        drawsGrid: {
            get: function() {
                return this.u;
            },
            set: function(a1) {
                this.u !== a1 && (this.u = a1, this.redraw());
            }
        },
        updateDelay: {
            get: function() {
                return this.ia;
            },
            set: function(a1) {
                0 > a1 && (a1 = 0);
                this.ia !== a1 && (this.ia = a1);
            }
        }
    });
    Gk.className = "Overview";
    function Pk() {
        Ae.call(this);
        this.j = null;
    }
    la(Pk, Ae);
    Pk.prototype.canStart = function() {
        if (!this.isEnabled) return !1;
        var a1 = this.diagram;
        if (null === a1 || !a1.allowMove || !a1.allowSelect) return !1;
        var b = a1.observed;
        if (null === b) return !1;
        var c = a1.lastInput;
        if (!c.left || a1.currentTool !== this && (!this.isBeyondDragSize() || c.isTouchEvent && c.timestamp - a1.firstInput.timestamp < this.delay)) return !1;
        null === this.findDraggablePart() && (c = b.viewportBounds, this.j = new J(c.width / 2, c.height / 2), a1 = a1.firstInput.documentPoint, b.position = new J(a1.x - this.j.x, a1.y - this.j.y));
        return !0;
    };
    Pk.prototype.doActivate = function() {
        this.j = null;
        Ae.prototype.doActivate.call(this);
    };
    Pk.prototype.doUpdateCursor = function() {
        var a1 = this.diagram, b = a1.box;
        null !== b && b.cursor && (a1.currentCursor = b.cursor);
    };
    Pk.prototype.moveParts = function() {
        var a1 = this.diagram, b = a1.observed;
        if (null !== b) {
            var c = a1.box;
            if (null !== c) {
                if (null === this.j) {
                    var d = a1.firstInput.documentPoint;
                    c = c.location;
                    this.j = new J(d.x - c.x, d.y - c.y);
                }
                a1 = a1.lastInput.documentPoint;
                b.position = new J(a1.x - this.j.x, a1.y - this.j.y);
            }
        }
    };
    Pk.className = "OverviewDraggingTool";
    function Sk() {
        Qa(this);
        this.H = ke;
        this.Ha = this.u = this.o = !0;
        this.F = this.V = this.nb = this.ia = !1;
        this.ij = this.j = null;
        this.Ib = 1.05;
        this.It = NaN;
        this.sw = null;
        this.zu = NaN;
        this.xu = bc;
        this.hb = !0;
        this.cg = null;
        this.ob = 200;
    }
    Sk.prototype.toString = function() {
        return "CommandHandler";
    };
    Sk.prototype.Xe = function(a1) {
        this.H = a1;
    };
    Sk.prototype.doKeyDown = function() {
        var a1 = this.diagram, b = a1.lastInput, c = Oa ? b.meta : b.control, d = b.shift, e = b.alt, f = b.key;
        !c || "C" !== f && "Insert" !== f ? c && "X" === f || d && "Del" === f ? this.canCutSelection() && this.cutSelection() : c && "V" === f || d && "Insert" === f ? this.canPasteSelection() && this.pasteSelection() : c && "Y" === f || e && d && "Backspace" === f ? this.canRedo() && this.redo() : c && "Z" === f || e && "Backspace" === f ? this.canUndo() && this.undo() : "Del" === f || "Backspace" === f ? this.canDeleteSelection() && this.deleteSelection() : c && "A" === f ? this.canSelectAll() && this.selectAll() : "Esc" === f ? this.canStopCommand() && this.stopCommand() : "Up" === f ? a1.allowVerticalScroll && (c ? a1.scroll("pixel", "up") : a1.scroll("line", "up")) : "Down" === f ? a1.allowVerticalScroll && (c ? a1.scroll("pixel", "down") : a1.scroll("line", "down")) : "Left" === f ? a1.allowHorizontalScroll && (c ? a1.scroll("pixel", "left") : a1.scroll("line", "left")) : "Right" === f ? a1.allowHorizontalScroll && (c ? a1.scroll("pixel", "right") : a1.scroll("line", "right")) : "PageUp" === f ? d && a1.allowHorizontalScroll ? a1.scroll("page", "left") : a1.allowVerticalScroll && a1.scroll("page", "up") : "PageDown" === f ? d && a1.allowHorizontalScroll ? a1.scroll("page", "right") : a1.allowVerticalScroll && a1.scroll("page", "down") : "Home" === f ? c && a1.allowVerticalScroll ? a1.scroll("document", "up") : !c && a1.allowHorizontalScroll && a1.scroll("document", "left") : "End" === f ? c && a1.allowVerticalScroll ? a1.scroll("document", "down") : !c && a1.allowHorizontalScroll && a1.scroll("document", "right") : " " === f ? this.canScrollToPart() && this.scrollToPart() : "Subtract" === f ? this.canDecreaseZoom() && this.decreaseZoom() : "Add" === f ? this.canIncreaseZoom() && this.increaseZoom() : c && "0" === f ? this.canResetZoom() && this.resetZoom() : d && "Z" === f ? this.canZoomToFit() && this.zoomToFit() : c && !d && "G" === f ? this.canGroupSelection() && this.groupSelection() : c && d && "G" === f ? this.canUngroupSelection() && this.ungroupSelection() : "F2" === f || b.event && "F2" === b.event.key ? this.canEditTextBlock() && this.editTextBlock() : "ContextMenu" === f || b.event && "ContextMenu" === b.event.key ? this.canShowContextMenu() && this.showContextMenu() : b.bubbles = !0 : this.canCopySelection() && this.copySelection();
    };
    Sk.prototype.doKeyUp = function() {
        this.diagram.lastInput.bubbles = !0;
    };
    Sk.prototype.stopCommand = function() {
        var a1 = this.diagram, b = a1.currentTool;
        b instanceof La && a1.allowSelect && a1.clearSelection();
        null !== b && b.doCancel();
    };
    Sk.prototype.canStopCommand = function() {
        return !0;
    };
    Sk.prototype.selectAll = function() {
        var a1 = this.diagram;
        a1.N();
        try {
            a1.currentCursor = "wait";
            a1.R("ChangingSelection", a1.selection);
            for(var b = a1.parts; b.next();)b.value.isSelected = !0;
            for(var c = a1.nodes; c.next();)c.value.isSelected = !0;
            for(var d = a1.links; d.next();)d.value.isSelected = !0;
        } finally{
            a1.R("ChangedSelection", a1.selection), a1.currentCursor = "";
        }
    };
    Sk.prototype.canSelectAll = function() {
        return this.diagram.allowSelect;
    };
    Sk.prototype.deleteSelection = function() {
        var a1 = this.diagram;
        try {
            a1.currentCursor = "wait";
            a1.R("ChangingSelection", a1.selection);
            a1.Ea("Delete");
            a1.R("SelectionDeleting", a1.selection);
            for(var b = new H, c = a1.selection.iterator; c.next();)Tk(b, c.value, !0, this.deletesTree ? Infinity : 0, this.deletesConnectedLinks ? null : !1, function(a1) {
                return a1.canDelete();
            });
            a1.Hs(b, !0);
            a1.R("SelectionDeleted", b);
        } finally{
            a1.eb("Delete"), a1.R("ChangedSelection", a1.selection), a1.currentCursor = "";
        }
    };
    Sk.prototype.canDeleteSelection = function() {
        var a1 = this.diagram;
        return a1.isReadOnly || a1.isModelReadOnly || !a1.allowDelete || 0 === a1.selection.count ? !1 : !0;
    };
    Sk.prototype.copySelection = function() {
        var a1 = this.diagram, b = new H;
        for(a1 = a1.selection.iterator; a1.next();)Tk(b, a1.value, !0, this.copiesTree ? Infinity : 0, this.copiesConnectedLinks, function(a1) {
            return a1.canCopy();
        });
        this.copyToClipboard(b);
    };
    Sk.prototype.canCopySelection = function() {
        var a1 = this.diagram;
        return a1.allowCopy && a1.allowClipboard && 0 !== a1.selection.count ? !0 : !1;
    };
    Sk.prototype.cutSelection = function() {
        this.copySelection();
        this.deleteSelection();
    };
    Sk.prototype.canCutSelection = function() {
        var a1 = this.diagram;
        return !a1.isReadOnly && !a1.isModelReadOnly && a1.allowCopy && a1.allowDelete && a1.allowClipboard && 0 !== a1.selection.count ? !0 : !1;
    };
    Sk.prototype.copyToClipboard = function(a1) {
        var b = this.diagram, c = null;
        if (null === a1) Ji = null, Ki = "";
        else {
            c = b.model;
            var d = !1, e = !1, f = null;
            try {
                c.Sl() && (d = c.Ij, c.Ij = this.copiesParentKey), c.Vj() && (e = c.Hj, c.Hj = this.copiesGroupKey), f = b.Jj(a1, null, !0);
            } finally{
                c.Sl() && (c.Ij = d), c.Vj() && (c.Hj = e), c = new F, c.addAll(f), Ji = c, Ki = b.model.dataFormat;
            }
        }
        b.R("ClipboardChanged", c);
    };
    Sk.prototype.pasteFromClipboard = function() {
        var a1 = new H, b = Ji;
        if (null === b) return a1;
        var c = this.diagram;
        if (Ki !== c.model.dataFormat) return a1;
        var d = c.model, e = !1, f = !1, g = null;
        try {
            d.Sl() && (e = d.Ij, d.Ij = this.copiesParentKey), d.Vj() && (f = d.Hj, d.Hj = this.copiesGroupKey), g = c.Jj(b, c, !1);
        } finally{
            for(d.Sl() && (d.Ij = e), d.Vj() && (d.Hj = f), b = g.iterator; b.next();)c = b.value, d = b.key, c.location.w() || (d.location.w() ? c.location = d.location : !c.position.w() && d.position.w() && (c.position = d.position)), a1.add(c);
        }
        return a1;
    };
    Sk.prototype.pasteSelection = function(a1) {
        void 0 === a1 && (a1 = null);
        var b = this.diagram;
        try {
            b.currentCursor = "wait";
            b.R("ChangingSelection", b.selection);
            b.Ea("Paste");
            var c = this.pasteFromClipboard();
            0 < c.count && b.clearSelection(!0);
            for(var d = c.iterator; d.next();)d.value.isSelected = !0;
            if (null !== a1) {
                var e = b.computePartsBounds(b.selection);
                if (e.w()) {
                    var f = this.computeEffectiveCollection(b.selection, b.Vm);
                    df(b, f, new J(a1.x - e.centerX, a1.y - e.centerY), b.Vm, !1);
                }
            }
            b.R("ClipboardPasted", c);
        } finally{
            b.eb("Paste"), b.R("ChangedSelection", b.selection), b.currentCursor = "";
        }
    };
    Sk.prototype.canPasteSelection = function() {
        var a1 = this.diagram;
        return a1.isReadOnly || a1.isModelReadOnly || !a1.allowInsert || !a1.allowClipboard || null === Ji || 0 === Ji.count || Ki !== a1.model.dataFormat ? !1 : !0;
    };
    Sk.prototype.undo = function() {
        this.diagram.undoManager.undo();
    };
    Sk.prototype.canUndo = function() {
        var a1 = this.diagram;
        return a1.isReadOnly || a1.isModelReadOnly ? !1 : a1.allowUndo && a1.undoManager.canUndo();
    };
    Sk.prototype.redo = function() {
        this.diagram.undoManager.redo();
    };
    Sk.prototype.canRedo = function() {
        var a1 = this.diagram;
        return a1.isReadOnly || a1.isModelReadOnly ? !1 : a1.allowUndo && a1.undoManager.canRedo();
    };
    Sk.prototype.decreaseZoom = function(a1) {
        void 0 === a1 && (a1 = 1 / this.zoomFactor);
        var b = this.diagram;
        b.autoScale === qh && (a1 = b.scale * a1, a1 < b.minScale || a1 > b.maxScale || (b.scale = a1));
    };
    Sk.prototype.canDecreaseZoom = function(a1) {
        void 0 === a1 && (a1 = 1 / this.zoomFactor);
        var b = this.diagram;
        if (b.autoScale !== qh) return !1;
        a1 = b.scale * a1;
        return a1 < b.minScale || a1 > b.maxScale ? !1 : b.allowZoom;
    };
    Sk.prototype.increaseZoom = function(a1) {
        void 0 === a1 && (a1 = this.zoomFactor);
        var b = this.diagram;
        b.autoScale === qh && (a1 = b.scale * a1, a1 < b.minScale || a1 > b.maxScale || (b.scale = a1));
    };
    Sk.prototype.canIncreaseZoom = function(a1) {
        void 0 === a1 && (a1 = this.zoomFactor);
        var b = this.diagram;
        if (b.autoScale !== qh) return !1;
        a1 = b.scale * a1;
        return a1 < b.minScale || a1 > b.maxScale ? !1 : b.allowZoom;
    };
    Sk.prototype.resetZoom = function(a1) {
        void 0 === a1 && (a1 = this.defaultScale);
        var b = this.diagram;
        a1 < b.minScale || a1 > b.maxScale || (b.scale = a1);
    };
    Sk.prototype.canResetZoom = function(a1) {
        void 0 === a1 && (a1 = this.defaultScale);
        var b = this.diagram;
        return a1 < b.minScale || a1 > b.maxScale ? !1 : b.allowZoom;
    };
    Sk.prototype.zoomToFit = function() {
        var a1 = this.diagram, b = a1.animationManager;
        b.Cc();
        a1.redraw();
        var c = a1.position, d = a1.scale;
        kh(b, "Zoom To Fit");
        this.isZoomToFitRestoreEnabled && d === this.zu && !isNaN(this.It) && a1.documentBounds.D(this.xu) ? (a1.scale = this.It, a1.position = this.sw, this.zu = NaN, this.xu = bc) : (this.It = d, this.sw = c.copy(), a1.zoomToFit(), this.zu = a1.scale, this.xu = a1.documentBounds.copy());
        mh(b);
    };
    Sk.prototype.canZoomToFit = function() {
        return this.diagram.allowZoom;
    };
    Sk.prototype.scrollToPart = function(a1) {
        void 0 === a1 && (a1 = null);
        var b = this.diagram;
        b.Va();
        if (null === a1) {
            try {
                null !== this.cg && (this.cg.next() ? a1 = this.cg.value : this.cg = null);
            } catch (k) {
                this.cg = null;
            }
            null === a1 && (0 < b.highlighteds.count ? this.cg = b.highlighteds.iterator : 0 < b.selection.count && (this.cg = b.selection.iterator), null !== this.cg && this.cg.next() && (a1 = this.cg.value));
        }
        if (null !== a1) {
            var c = b.animationManager;
            kh(c, "Scroll To Part");
            var d = this.scrollToPartPause;
            if (0 < d) {
                var e = Uk(this, a1, [
                    a1
                ]);
                if (1 === e.length) b.Ea(), b.ds(a1.actualBounds), b.eb("Scroll To Part");
                else {
                    var f = function() {
                        b.Ea();
                        for(var a1 = e.pop(); 0 < e.length && a1 instanceof V && a1.isTreeExpanded && (!(a1 instanceof pf) || a1.isSubGraphExpanded);)a1 = e.pop();
                        0 < e.length ? (a1 instanceof U && b.tv(a1.actualBounds), a1 instanceof V && !a1.isTreeExpanded && (a1.isTreeExpanded = !0), a1 instanceof pf && !a1.isSubGraphExpanded && (a1.isSubGraphExpanded = !0)) : (a1 instanceof U && b.ds(a1.actualBounds), b.$l("LayoutCompleted", g));
                        b.eb("Scroll To Part");
                    }, g = function() {
                        ta(f, (c.isEnabled ? c.duration : 0) + d);
                    };
                    b.Bj("LayoutCompleted", g);
                    f();
                }
            } else {
                var h = b.position.copy();
                b.ds(a1.actualBounds);
                h.Xa(b.position) && c.Cc();
            }
        }
    };
    function Uk(a1, b, c) {
        if (b.isVisible()) return c;
        if (b instanceof te) Uk(a1, b.adornedPart, c);
        else if (b instanceof T) {
            var d = b.fromNode;
            null !== d && Uk(a1, d, c);
            b = b.toNode;
            null !== b && Uk(a1, b, c);
        } else b instanceof V && (d = b.labeledLink, null !== d && Uk(a1, d, c), d = b.pg(), null !== d && (d.isTreeExpanded || d.wasTreeExpanded || c.push(d), Uk(a1, d, c))), b = b.containingGroup, null !== b && (b.isSubGraphExpanded || b.wasSubGraphExpanded || c.push(b), Uk(a1, b, c));
        return c;
    }
    Sk.prototype.canScrollToPart = function(a1) {
        void 0 === a1 && (a1 = null);
        if (null !== a1 && !(a1 instanceof U)) return !1;
        a1 = this.diagram;
        return 0 === a1.selection.count && 0 === a1.highlighteds.count ? !1 : a1.allowHorizontalScroll && a1.allowVerticalScroll;
    };
    Sk.prototype.collapseTree = function(a1) {
        void 0 === a1 && (a1 = null);
        var b = this.diagram;
        try {
            b.Ea("Collapse Tree");
            kh(b.animationManager, "Collapse Tree");
            var c = new F;
            if (null !== a1 && a1.isTreeExpanded) a1.collapseTree(), c.add(a1);
            else if (null === a1) for(var d = b.selection.iterator; d.next();){
                var e = d.value;
                e instanceof V && e.isTreeExpanded && (e.collapseTree(), c.add(e));
            }
            b.R("TreeCollapsed", c);
        } finally{
            b.eb("Collapse Tree");
        }
    };
    Sk.prototype.canCollapseTree = function(a1) {
        void 0 === a1 && (a1 = null);
        var b = this.diagram;
        if (b.isReadOnly) return !1;
        if (null !== a1) {
            if (!(a1 instanceof V && a1.isTreeExpanded)) return !1;
            if (0 < a1.Po().count) return !0;
        } else for(a1 = b.selection.iterator; a1.next();)if (b = a1.value, b instanceof V && b.isTreeExpanded && 0 < b.Po().count) return !0;
        return !1;
    };
    Sk.prototype.expandTree = function(a1) {
        void 0 === a1 && (a1 = null);
        var b = this.diagram;
        try {
            b.Ea("Expand Tree");
            kh(b.animationManager, "Expand Tree");
            var c = new F;
            if (null !== a1 && !a1.isTreeExpanded) a1.expandTree(), c.add(a1);
            else if (null === a1) for(var d = b.selection.iterator; d.next();){
                var e = d.value;
                e instanceof V && !e.isTreeExpanded && (e.expandTree(), c.add(e));
            }
            b.R("TreeExpanded", c);
        } finally{
            b.eb("Expand Tree");
        }
    };
    Sk.prototype.canExpandTree = function(a1) {
        void 0 === a1 && (a1 = null);
        var b = this.diagram;
        if (b.isReadOnly) return !1;
        if (null !== a1) {
            if (!(a1 instanceof V) || a1.isTreeExpanded) return !1;
            if (0 < a1.Po().count) return !0;
        } else for(a1 = b.selection.iterator; a1.next();)if (b = a1.value, b instanceof V && !b.isTreeExpanded && 0 < b.Po().count) return !0;
        return !1;
    };
    Sk.prototype.groupSelection = function() {
        var a1 = this.diagram, b = a1.model;
        if (b.Wj()) {
            var c = this.archetypeGroupData;
            if (null !== c) {
                var d = null;
                try {
                    a1.currentCursor = "wait";
                    a1.R("ChangingSelection", a1.selection);
                    a1.Ea("Group");
                    for(var e = new F, f = a1.selection.iterator; f.next();){
                        var g = f.value;
                        g.Zc() && g.canGroup() && e.add(g);
                    }
                    for(var h = new F, k = e.iterator; k.next();){
                        var l = k.value;
                        f = !1;
                        for(var m = e.iterator; m.next();)if (l.Td(m.value)) {
                            f = !0;
                            break;
                        }
                        f || h.add(l);
                    }
                    if (0 < h.count) {
                        var n = h.first().containingGroup;
                        if (null !== n) for(; null !== n;){
                            e = !1;
                            for(var p = h.iterator; p.next();)if (!p.value.Td(n)) {
                                e = !0;
                                break;
                            }
                            if (e) n = n.containingGroup;
                            else break;
                        }
                        if (c instanceof pf) jg(c), d = c.copy(), null !== d && a1.add(d);
                        else if (b.Yu(c)) {
                            var q = b.copyNodeData(c);
                            za(q) && (b.xf(q), d = a1.ii(q));
                        }
                        if (null !== d) {
                            null !== n && this.isValidMember(n, d) && (d.containingGroup = n);
                            for(var r = h.iterator; r.next();){
                                var u = r.value;
                                this.isValidMember(d, u) && (u.containingGroup = d);
                            }
                            a1.clearSelection(!0);
                            d.isSelected = !0;
                        }
                    }
                    a1.R("SelectionGrouped", d);
                } finally{
                    a1.eb("Group"), a1.R("ChangedSelection", a1.selection), a1.currentCursor = "";
                }
            }
        }
    };
    Sk.prototype.canGroupSelection = function() {
        var a1 = this.diagram;
        if (a1.isReadOnly || a1.isModelReadOnly || !a1.allowInsert || !a1.allowGroup || !a1.model.Wj() || null === this.archetypeGroupData) return !1;
        for(a1 = a1.selection.iterator; a1.next();){
            var b = a1.value;
            if (b.Zc() && b.canGroup()) return !0;
        }
        return !1;
    };
    function Vk(a1) {
        var b = Ea();
        for(a1 = a1.iterator; a1.next();){
            var c = a1.value;
            c instanceof T || b.push(c);
        }
        a1 = new H;
        c = b.length;
        for(var d = 0; d < c; d++){
            for(var e = b[d], f = !0, g = 0; g < c; g++)if (e.Td(b[g])) {
                f = !1;
                break;
            }
            f && a1.add(e);
        }
        Ga(b);
        return a1;
    }
    Sk.prototype.isValidMember = function(a1, b) {
        if (null === b || a1 === b || b instanceof T) return !1;
        if (null !== a1) {
            if (a1 === b || a1.Td(b)) return !1;
            var c = a1.memberValidation;
            if (null !== c && !c(a1, b) || null === a1.data && null !== b.data || null !== a1.data && null === b.data) return !1;
        }
        c = this.memberValidation;
        return null !== c ? c(a1, b) : !0;
    };
    Sk.prototype.ungroupSelection = function(a1) {
        void 0 === a1 && (a1 = null);
        var b = this.diagram, c = b.model;
        if (c.Wj()) try {
            b.currentCursor = "wait";
            b.R("ChangingSelection", b.selection);
            b.Ea("Ungroup");
            var d = new F;
            if (null !== a1) d.add(a1);
            else for(var e = b.selection.iterator; e.next();){
                var f = e.value;
                f instanceof pf && f.canUngroup() && d.add(f);
            }
            var g = new F;
            if (0 < d.count) {
                b.clearSelection(!0);
                for(var h = d.iterator; h.next();){
                    var k = h.value;
                    k.expandSubGraph();
                    var l = k.containingGroup, m = null !== l && null !== l.data ? c.wa(l.data) : void 0;
                    g.addAll(k.memberParts);
                    for(var n = g.iterator; n.next();){
                        var p = n.value;
                        p.isSelected = !0;
                        if (!(p instanceof T)) {
                            var q = p.data;
                            null !== q ? c.lp(q, m) : p.containingGroup = l;
                        }
                    }
                    b.remove(k);
                }
            }
            b.R("SelectionUngrouped", d, g);
        } finally{
            b.eb("Ungroup"), b.R("ChangedSelection", b.selection), b.currentCursor = "";
        }
    };
    Sk.prototype.canUngroupSelection = function(a1) {
        void 0 === a1 && (a1 = null);
        var b = this.diagram;
        if (b.isReadOnly || b.isModelReadOnly || !b.allowDelete || !b.allowUngroup || !b.model.Wj()) return !1;
        if (null !== a1) {
            if (!(a1 instanceof pf)) return !1;
            if (a1.canUngroup()) return !0;
        } else for(a1 = b.selection.iterator; a1.next();)if (b = a1.value, b instanceof pf && b.canUngroup()) return !0;
        return !1;
    };
    Sk.prototype.addTopLevelParts = function(a1, b) {
        var c = !0;
        for(a1 = Vk(a1).iterator; a1.next();){
            var d = a1.value;
            null !== d.containingGroup && (!b || this.isValidMember(null, d) ? d.containingGroup = null : c = !1);
        }
        return c;
    };
    Sk.prototype.collapseSubGraph = function(a1) {
        void 0 === a1 && (a1 = null);
        var b = this.diagram;
        try {
            b.Ea("Collapse SubGraph");
            kh(b.animationManager, "Collapse SubGraph");
            var c = new F;
            if (null !== a1 && a1.isSubGraphExpanded) a1.collapseSubGraph(), c.add(a1);
            else if (null === a1) for(var d = b.selection.iterator; d.next();){
                var e = d.value;
                e instanceof pf && e.isSubGraphExpanded && (e.collapseSubGraph(), c.add(e));
            }
            b.R("SubGraphCollapsed", c);
        } finally{
            b.eb("Collapse SubGraph");
        }
    };
    Sk.prototype.canCollapseSubGraph = function(a1) {
        void 0 === a1 && (a1 = null);
        var b = this.diagram;
        if (b.isReadOnly) return !1;
        if (null !== a1) return a1 instanceof pf && a1.isSubGraphExpanded ? !0 : !1;
        for(a1 = b.selection.iterator; a1.next();)if (b = a1.value, b instanceof pf && b.isSubGraphExpanded) return !0;
        return !1;
    };
    Sk.prototype.expandSubGraph = function(a1) {
        void 0 === a1 && (a1 = null);
        var b = this.diagram;
        try {
            b.Ea("Expand SubGraph");
            kh(b.animationManager, "Expand SubGraph");
            var c = new F;
            if (null !== a1 && !a1.isSubGraphExpanded) a1.expandSubGraph(), c.add(a1);
            else if (null === a1) for(var d = b.selection.iterator; d.next();){
                var e = d.value;
                e instanceof pf && !e.isSubGraphExpanded && (e.expandSubGraph(), c.add(e));
            }
            b.R("SubGraphExpanded", c);
        } finally{
            b.eb("Expand SubGraph");
        }
    };
    Sk.prototype.canExpandSubGraph = function(a1) {
        void 0 === a1 && (a1 = null);
        var b = this.diagram;
        if (b.isReadOnly) return !1;
        if (null !== a1) return a1 instanceof pf && !a1.isSubGraphExpanded ? !0 : !1;
        for(a1 = b.selection.iterator; a1.next();)if (b = a1.value, b instanceof pf && !b.isSubGraphExpanded) return !0;
        return !1;
    };
    Sk.prototype.editTextBlock = function(a1) {
        void 0 === a1 && (a1 = null);
        var b = this.diagram, c = b.toolManager.findTool("TextEditing");
        if (null !== c) {
            if (null === a1) {
                a1 = null;
                for(var d = b.selection.iterator; d.next();){
                    var e = d.value;
                    if (e.canEdit()) {
                        a1 = e;
                        break;
                    }
                }
                if (null === a1) return;
                a1 = a1.Ml(function(a1) {
                    return a1 instanceof Pg && a1.editable;
                });
            }
            null !== a1 && (b.currentTool = null, c.textBlock = a1, b.currentTool = c);
        }
    };
    Sk.prototype.canEditTextBlock = function(a1) {
        void 0 === a1 && (a1 = null);
        var b = this.diagram;
        if (b.isReadOnly || b.isModelReadOnly || !b.allowTextEdit || null === b.toolManager.findTool("TextEditing")) return !1;
        if (null !== a1) {
            if (!(a1 instanceof Pg)) return !1;
            a1 = a1.part;
            if (null !== a1 && a1.canEdit()) return !0;
        } else for(b = b.selection.iterator; b.next();)if (a1 = b.value, a1.canEdit() && (a1 = a1.Ml(function(a1) {
            return a1 instanceof Pg && a1.editable;
        }), null !== a1)) return !0;
        return !1;
    };
    Sk.prototype.showContextMenu = function(a1) {
        var b = this.diagram, c = b.toolManager.findTool("ContextMenu");
        if (null !== c && (void 0 === a1 && (a1 = 0 < b.selection.count ? b.selection.first() : b), a1 = c.findObjectWithContextMenu(a1), null !== a1)) {
            var d = b.lastInput, e = null;
            a1 instanceof Y ? e = a1.ga(wc) : b.viewportBounds.ca(d.documentPoint) || (e = b.viewportBounds, e = new J(e.x + e.width / 2, e.y + e.height / 2));
            null !== e && (d.viewPoint = b.np(e), d.documentPoint = e, d.left = !1, d.right = !0, d.up = !0);
            b.currentTool = c;
            Lg(c, !1, a1);
        }
    };
    Sk.prototype.canShowContextMenu = function(a1) {
        var b = this.diagram, c = b.toolManager.findTool("ContextMenu");
        if (null === c) return !1;
        void 0 === a1 && (a1 = 0 < b.selection.count ? b.selection.first() : b);
        return null === c.findObjectWithContextMenu(a1) ? !1 : !0;
    };
    Sk.prototype.computeEffectiveCollection = function(a1, b) {
        var c = this.diagram, d = c.toolManager.findTool("Dragging"), e = c.currentTool === d;
        void 0 === b && (b = e ? d.dragOptions : c.Vm);
        d = new ob;
        if (null === a1) return d;
        for(var f = a1.iterator; f.next();)Pj(c, d, f.value, e, b);
        if (null !== c.draggedLink && b.dragsLink) return d;
        for(f = a1.iterator; f.next();)a1 = f.value, a1 instanceof T && (b = a1.fromNode, null === b || d.contains(b) ? (b = a1.toNode, null === b || d.contains(b) || d.remove(a1)) : d.remove(a1));
        return d;
    };
    ma.Object.defineProperties(Sk.prototype, {
        diagram: {
            get: function() {
                return this.H;
            }
        },
        copiesClipboardData: {
            get: function() {
                return this.o;
            },
            set: function(a1) {
                this.o = a1;
            }
        },
        copiesConnectedLinks: {
            get: function() {
                return this.u;
            },
            set: function(a1) {
                this.u = a1;
            }
        },
        deletesConnectedLinks: {
            get: function() {
                return this.Ha;
            },
            set: function(a1) {
                this.Ha = a1;
            }
        },
        copiesTree: {
            get: function() {
                return this.ia;
            },
            set: function(a1) {
                this.ia = a1;
            }
        },
        deletesTree: {
            get: function() {
                return this.nb;
            },
            set: function(a1) {
                this.nb = a1;
            }
        },
        copiesParentKey: {
            get: function() {
                return this.V;
            },
            set: function(a1) {
                this.V = a1;
            }
        },
        copiesGroupKey: {
            get: function() {
                return this.F;
            },
            set: function(a1) {
                this.F = a1;
            }
        },
        archetypeGroupData: {
            get: function() {
                return this.j;
            },
            set: function(a1) {
                this.j = a1;
            }
        },
        memberValidation: {
            get: function() {
                return this.ij;
            },
            set: function(a1) {
                this.ij = a1;
            }
        },
        defaultScale: {
            get: function() {
                return this.diagram.defaultScale;
            },
            set: function(a1) {
                this.diagram.defaultScale = a1;
            }
        },
        zoomFactor: {
            get: function() {
                return this.Ib;
            },
            set: function(a1) {
                1 < a1 || C("zoomFactor must be larger than 1.0, not: " + a1);
                this.Ib = a1;
            }
        },
        isZoomToFitRestoreEnabled: {
            get: function() {
                return this.hb;
            },
            set: function(a1) {
                this.hb = a1;
            }
        },
        scrollToPartPause: {
            get: function() {
                return this.ob;
            },
            set: function(a1) {
                this.ob = a1;
            }
        }
    });
    Sk.className = "CommandHandler";
    Ii = function() {
        return new Sk;
    };
    function Y() {
        Qa(this);
        this.l = 30723;
        this.pb = 1;
        this.an = "";
        this.Ma = this.Me = null;
        this.pa = new J(NaN, NaN).freeze();
        this.jd = Lb;
        this.Bb = new ld;
        this.wh = new ld;
        this.Mb = null;
        this.Ca = this.Jk = 1;
        this.Lb = 0;
        this.Kg = lc;
        this.uc = new N(NaN, NaN, NaN, NaN).freeze();
        this.Jb = new N(NaN, NaN, NaN, NaN).freeze();
        this.ec = new N(0, 0, NaN, NaN).freeze();
        this.ba = this.Xn = this.Yn = null;
        this.rk = this.Kb = Sc;
        this.Ag = this.ho = 0;
        this.V = this.tb = this.Dh = this.A = this.Ua = null;
        this.Uc = !1;
        this.io = this.Ng = null;
    }
    var nd, kg, mg, Wk, Xk, Yk, Zk, $k, al, bl;
    Y.prototype.cloneProtected = function(a1) {
        a1.l = this.l | 6144;
        a1.pb = this.pb;
        a1.an = this.an;
        a1.Ma = this.Ma;
        a1.pa.assign(this.pa);
        a1.jd = this.jd.J();
        null !== this.Mb ? a1.Mb = this.Mb.copy() : a1.Mb = null;
        a1.Ca = this.Ca;
        a1.Lb = this.Lb;
        a1.Kg = this.Kg.J();
        a1.uc.assign(this.uc);
        a1.Jb.assign(this.Jb);
        a1.ec.assign(this.ec);
        a1.Xn = this.Xn;
        null !== this.ba && (a1.ba = this.ba.copy());
        a1.Kb = this.Kb.J();
        a1.rk = this.rk.J();
        a1.ho = this.ho;
        a1.Ag = this.Ag;
        null !== this.Ua && (a1.Ua = this.Ua.copy());
        null !== this.A && (a1.A = this.A.oc ? this.A : this.A.copy());
        null !== this.Dh && (a1.Dh = Ba(this.Dh));
        null !== this.tb && (a1.tb = this.tb.copy());
    };
    Y.prototype.Vw = function(a1) {
        var b = this.Dh;
        if (Aa(b)) for(var c = 0; c < b.length; c++){
            if (b[c] === a1) return;
        }
        else this.Dh = b = [];
        b.push(a1);
    };
    Y.prototype.Af = function(a1) {
        a1.Yn = null;
        a1.Ng = null;
        a1.v();
    };
    Y.prototype.clone = function() {
        var a1 = new this.constructor;
        this.cloneProtected(a1);
        if (null !== this.Dh) for(var b = 0; b < this.Dh.length; b++){
            var c = this.Dh[b];
            a1[c] = this[c];
        }
        return a1;
    };
    Y.prototype.copy = function() {
        return this.clone();
    };
    t = Y.prototype;
    t.qb = function(a1) {
        a1.classType === T ? 0 === a1.name.indexOf("Orient") ? this.segmentOrientation = a1 : C("Unknown Link enum value for GraphObject.segmentOrientation property: " + a1) : a1.classType === Y && (this.stretch = a1);
    };
    t.toString = function() {
        return Ha(this.constructor) + "#" + bb(this);
    };
    t.th = function() {
        null !== this.A && (this.A.oc = !0);
    };
    function cl(a1) {
        null === a1.A ? a1.A = new dl : a1.A.oc && (a1.A = a1.A.copy());
    }
    t.Xc = function() {
        if (null === this.ba) {
            var a1 = new el;
            a1.Xi = rc;
            a1.yj = rc;
            a1.Vi = 10;
            a1.wj = 10;
            a1.Wi = 0;
            a1.xj = 0;
            this.ba = a1;
        }
    };
    t.cb = function(a1, b, c, d, e, f, g) {
        var h = this.part;
        if (null !== h && (h.fk(a1, b, c, d, e, f, g), c === this && a1 === ce && fl(this) && gl(this, h, b), f = this.diagram, null === this.animationTriggers || null === f || !f.pi || f.undoManager.isUndoingRedoing || f.animationManager.Cm || (a1 = this.animationTriggers.get(b), null !== a1 && f.animationManager.isEnabled && !f.animationManager.isTicking && (null === this.io && (this.io = new ob), g = 0 === f.undoManager.transactionLevel, a1.startCondition === ai ? g = !0 : a1.startCondition === ci && (g = !1), g ? (f = new jh, bi(a1, f), g = this.io.get(a1), null !== g && g.stop(), this.io.add(a1, f), f.uu = this, f.Nw = a1, f.add(this, b, d, e), f.start()) : (kh(f.animationManager, "Trigger"), f.animationManager.defaultAnimation.add(this, b, d, e)))), this instanceof W && c === h && 0 !== (h.l & 16777216) && null !== h.data)) for(c = this.O.s, d = c.length, e = 0; e < d; e++)h = c[e], h instanceof W && Hj(h, function(a1) {
            null !== a1.data && 0 !== (a1.l & 16777216) && a1.La(b);
        });
    };
    function gl(a1, b, c) {
        var d = a1.ih();
        if (null !== d) for(var e = a1.localBindings.iterator; e.next();){
            var f = e.value, g = null;
            if (null !== f.sourceName) {
                g = hl(f, d, a1);
                if (null === g) continue;
                f.rp(a1, g, c, null);
            } else if (f.isToModel) {
                var h = b.diagram;
                null === h || h.skipsModelSourceBindings || f.rp(a1, h.model.modelData, c, d);
            } else {
                h = d.data;
                if (null === h) continue;
                var k = b.diagram;
                null === k || k.skipsModelSourceBindings || f.rp(a1, h, c, d);
            }
            g === a1 && (h = d.js(f.Ai), null !== h && f.Mv(h, g, c));
        }
    }
    t.js = function(a1) {
        return this.bindingId === a1 ? this : null;
    };
    t.g = function(a1, b, c) {
        this.cb(ce, a1, this, b, c);
    };
    t.Ge = function(a1, b, c, d) {
        var e = this.uc;
        e.h(a1, b, c, d);
        if (1 !== this.Ca || 0 !== this.Lb) {
            null === this.Mb && (this.Mb = new ld);
            var f = this.Mb;
            f.reset();
            this.mo(f, a1, b, c, d);
            f.op(e);
        }
    };
    function il(a1, b, c, d) {
        if (!1 === a1.pickable) return !1;
        d.multiply(a1.transform);
        return c ? a1.Yc(b, d) : a1.fh(b, d);
    }
    t.tx = function(a1, b, c) {
        if (!1 === this.pickable) return !1;
        var d = this.naturalBounds;
        b = a1.Bf(b);
        return c ? yb(a1.x, a1.y, 0, 0, 0, d.height) <= b || yb(a1.x, a1.y, 0, d.height, d.width, d.height) <= b || yb(a1.x, a1.y, d.width, d.height, d.width, 0) <= b || yb(a1.x, a1.y, d.width, 0, 0, 0) <= b : a1.zd(0, 0) <= b && a1.zd(0, d.height) <= b && a1.zd(d.width, 0) <= b && a1.zd(d.width, d.height) <= b;
    };
    t.se = function() {
        return !0;
    };
    t.ca = function(a1) {
        var b = J.alloc();
        b.assign(a1);
        this.transform.Ga(b);
        var c = this.actualBounds;
        if (!c.w()) return J.free(b), !1;
        var d = this.diagram;
        if (null !== d && d.vq) {
            var e = d.Pl("extraTouchThreshold"), f = d.Pl("extraTouchArea"), g = f / 2, h = this.naturalBounds;
            d = this.Df() * d.scale;
            var k = 1 / d;
            if (h.width * d < e && h.height * d < e) return a1 = Zb(c.x - g * k, c.y - g * k, c.width + f * k, c.height + f * k, b.x, b.y), J.free(b), a1;
        }
        e = !1;
        if (this instanceof te || this instanceof Bf ? Zb(c.x - 5, c.y - 5, c.width + 10, c.height + 10, b.x, b.y) : c.ca(b)) this.tb && !this.tb.ca(b) ? e = !1 : null !== this.areaBackground && c.ca(b) ? e = !0 : null !== this.Ma && this.ec.ca(a1) ? e = !0 : e = this.gh(a1);
        J.free(b);
        return e;
    };
    t.gh = function(a1) {
        var b = this.naturalBounds;
        return Zb(0, 0, b.width, b.height, a1.x, a1.y);
    };
    t.Re = function(a1) {
        if (0 === this.angle) return this.actualBounds.Re(a1);
        var b = this.naturalBounds;
        b = N.allocAt(0, 0, b.width, b.height);
        var c = this.transform, d = !1, e = J.allocAt(a1.x, a1.y);
        b.ca(c.Cd(e)) && (e.h(a1.x, a1.bottom), b.ca(c.Cd(e)) && (e.h(a1.right, a1.bottom), b.ca(c.Cd(e)) && (e.h(a1.right, a1.y), b.ca(c.Cd(e)) && (d = !0))));
        J.free(e);
        N.free(b);
        return d;
    };
    t.fh = function(a1, b) {
        if (void 0 === b) return a1.Re(this.actualBounds);
        var c = this.naturalBounds, d = !1, e = J.allocAt(0, 0);
        a1.ca(b.Ga(e)) && (e.h(0, c.height), a1.ca(b.Ga(e)) && (e.h(c.width, c.height), a1.ca(b.Ga(e)) && (e.h(c.width, 0), a1.ca(b.Ga(e)) && (d = !0))));
        J.free(e);
        return d;
    };
    t.Yc = function(a1, b) {
        if (void 0 === b && (b = this.transform, 0 === this.angle)) return a1.Yc(this.actualBounds);
        var c = this.naturalBounds, d = J.allocAt(0, 0), e = J.allocAt(0, c.height), f = J.allocAt(c.width, c.height), g = J.allocAt(c.width, 0), h = !1;
        if (a1.ca(b.Ga(d)) || a1.ca(b.Ga(e)) || a1.ca(b.Ga(f)) || a1.ca(b.Ga(g))) h = !0;
        else {
            c = N.allocAt(0, 0, c.width, c.height);
            var k = J.allocAt(a1.x, a1.y);
            c.ca(b.Cd(k)) ? h = !0 : (k.h(a1.x, a1.bottom), c.ca(b.Cd(k)) ? h = !0 : (k.h(a1.right, a1.bottom), c.ca(b.Cd(k)) ? h = !0 : (k.h(a1.right, a1.y), c.ca(b.Cd(k)) && (h = !0))));
            J.free(k);
            N.free(c);
            !h && (K.ts(a1, d, e) || K.ts(a1, e, f) || K.ts(a1, f, g) || K.ts(a1, g, d)) && (h = !0);
        }
        J.free(d);
        J.free(e);
        J.free(f);
        J.free(g);
        return h;
    };
    t.ga = function(a1, b) {
        void 0 === b && (b = new J);
        if (a1 instanceof O) {
            var c = this.naturalBounds;
            b.h(a1.x * c.width + a1.offsetX, a1.y * c.height + a1.offsetY);
        } else b.set(a1);
        this.oe.Ga(b);
        return b;
    };
    t.mi = function(a1) {
        void 0 === a1 && (a1 = new N);
        var b = this.naturalBounds, c = this.oe, d = J.allocAt(0, 0).transform(c);
        a1.h(d.x, d.y, 0, 0);
        d.h(b.width, 0).transform(c);
        Yb(a1, d.x, d.y, 0, 0);
        d.h(b.width, b.height).transform(c);
        Yb(a1, d.x, d.y, 0, 0);
        d.h(0, b.height).transform(c);
        Yb(a1, d.x, d.y, 0, 0);
        J.free(d);
        return a1;
    };
    t.li = function() {
        var a1 = this.oe;
        1 === a1.m11 && 0 === a1.m12 ? a1 = 0 : (a1 = 180 * Math.atan2(a1.m12, a1.m11) / Math.PI, 0 > a1 && (a1 += 360));
        return a1;
    };
    t.Df = function() {
        if (0 !== (this.l & 4096) === !1) return this.Jk;
        var a1 = this.Ca;
        return null !== this.panel ? a1 * this.panel.Df() : a1;
    };
    t.ps = function(a1, b) {
        void 0 === b && (b = new J);
        b.assign(a1);
        this.oe.Cd(b);
        return b;
    };
    t.qs = function(a1, b, c) {
        return this.Rj(a1.x, a1.y, b.x, b.y, c);
    };
    t.Rj = function(a1, b, c, d, e) {
        var f = this.transform, g = 1 / (f.m11 * f.m22 - f.m12 * f.m21), h = f.m22 * g, k = -f.m12 * g, l = -f.m21 * g, m = f.m11 * g, n = g * (f.m21 * f.dy - f.m22 * f.dx), p = g * (f.m12 * f.dx - f.m11 * f.dy);
        if (null !== this.areaBackground) return f = this.actualBounds, K.Ff(f.left, f.top, f.right, f.bottom, a1, b, c, d, e);
        g = a1 * h + b * l + n;
        a1 = a1 * k + b * m + p;
        b = c * h + d * l + n;
        c = c * k + d * m + p;
        e.h(0, 0);
        d = this.naturalBounds;
        c = K.Ff(0, 0, d.width, d.height, g, a1, b, c, e);
        e.transform(f);
        return c;
    };
    Y.prototype.measure = function(a1, b, c, d) {
        if (!1 !== uj(this)) {
            var e = this.Kg, f = e.right + e.left;
            e = e.top + e.bottom;
            a1 = Math.max(a1 - f, 0);
            b = Math.max(b - e, 0);
            c = Math.max((c || 0) - f, 0);
            d = Math.max((d || 0) - e, 0);
            f = this.angle;
            e = this.desiredSize;
            var g = this.jq();
            90 === f || 270 === f ? (a1 = isFinite(e.height) ? e.height + g : a1, b = isFinite(e.width) ? e.width + g : b) : (a1 = isFinite(e.width) ? e.width + g : a1, b = isFinite(e.height) ? e.height + g : b);
            e = c || 0;
            g = d || 0;
            var h = this instanceof W;
            switch(jl(this, !0)){
                case kg:
                    g = e = 0;
                    h && (b = a1 = Infinity);
                    break;
                case nd:
                    isFinite(a1) && a1 > c && (e = a1);
                    isFinite(b) && b > d && (g = b);
                    break;
                case Wk:
                    isFinite(a1) && a1 > c && (e = a1);
                    g = 0;
                    h && (b = Infinity);
                    break;
                case Xk:
                    isFinite(b) && b > d && (g = b), e = 0, h && (a1 = Infinity);
            }
            h = this.maxSize;
            var k = this.minSize;
            e > h.width && k.width < h.width && (e = h.width);
            g > h.height && k.height < h.height && (g = h.height);
            c = Math.max(e, k.width);
            d = Math.max(g, k.height);
            h.width < c && (c = Math.min(k.width, c));
            h.height < d && (d = Math.min(k.height, d));
            a1 = Math.min(h.width, a1);
            b = Math.min(h.height, b);
            a1 = Math.max(c, a1);
            b = Math.max(d, b);
            if (90 === f || 270 === f) f = a1, a1 = b, b = f, f = c, c = d, d = f;
            this.uc.ka();
            this.Vl(a1, b, c, d);
            this.uc.freeze();
            this.uc.w() || C("Non-real measuredBounds has been set. Object " + this + ", measuredBounds: " + this.uc.toString());
            pj(this, !1);
        }
    };
    Y.prototype.Vl = function() {};
    Y.prototype.Dd = function() {
        return !1;
    };
    Y.prototype.arrange = function(a1, b, c, d, e) {
        this.Tk();
        var f = N.alloc();
        f.assign(this.Jb);
        this.Jb.ka();
        !1 === vj(this) ? this.Jb.h(a1, b, c, d) : this.eh(a1, b, c, d);
        this.Jb.freeze();
        void 0 === e ? this.tb = null : this.tb = e;
        c = !1;
        if (void 0 !== e) c = !0;
        else if (e = this.panel, null !== e && kl(e) && (e = e.panel), null !== e && (e = e.ec, d = this.measuredBounds, null !== this.areaBackground && (d = this.Jb), c = b + d.height, d = a1 + d.width, c = !(0 <= a1 + .05 && d <= e.width + .05 && 0 <= b + .05 && c <= e.height + .05), this instanceof Pg && (a1 = this.naturalBounds, this.Kq > a1.height || this.Db > a1.width))) c = !0;
        this.l = c ? this.l | 256 : this.l & -257;
        this.Jb.w() || C("Non-real actualBounds has been set. Object " + this + ", actualBounds: " + this.Jb.toString());
        this.Wl(f, this.Jb);
        ll(this, !1);
        N.free(f);
    };
    t = Y.prototype;
    t.eh = function() {};
    function ml(a1, b, c, d, e) {
        a1.Jb.h(b, c, d, e);
        if (!a1.desiredSize.w()) {
            var f = a1.uc;
            c = a1.Kg;
            b = c.right + c.left;
            var g = c.top + c.bottom;
            c = f.width + b;
            f = f.height + g;
            d += b;
            e += g;
            b = jl(a1, !0);
            c === d && f === e && (b = kg);
            switch(b){
                case kg:
                    if (c > d || f > e) pj(a1, !0), a1.measure(c > d ? d : c, f > e ? e : f, 0, 0);
                    break;
                case nd:
                    pj(a1, !0);
                    a1.measure(d, e, 0, 0);
                    break;
                case Wk:
                    pj(a1, !0);
                    a1.measure(d, f, 0, 0);
                    break;
                case Xk:
                    pj(a1, !0), a1.measure(c, e, 0, 0);
            }
        }
    }
    t.Wl = function(a1, b) {
        var c = this.part;
        null !== c && null !== c.diagram && (c.selectionObject !== this && c.resizeObject !== this && c.rotateObject !== this || nl(c, !0), this.N(), Ub(a1, b) || (c.oh(), this.On(c)));
    };
    t.On = function(a1) {
        null !== this.portId && (nl(a1, !0), a1 instanceof V && ol(a1, this));
    };
    t.hc = function(a1, b) {
        if (!pl(this, a1, b) && this.visible) {
            var c = this.opacity;
            if (0 !== c) {
                var d = 1;
                1 !== c && (d = a1.globalAlpha, a1.globalAlpha = d * c);
                var e = "";
                "" !== this.filter && (e = a1.filter, a1.filter = this.filter);
                var f = this instanceof W && kl(this), g = this.Jb;
                if (f) {
                    var h = this.Jb, k = this.ec, l = this.areaBackground, m = this.Ma;
                    null === l && null === m || a1.yc();
                    null !== l && (ji(this, a1, l, !0, !0, k, h), l instanceof ql && l.type === rl ? (a1.beginPath(), a1.rect(h.x, h.y, h.width, h.height), a1.ng(l)) : a1.fillRect(h.x, h.y, h.width, h.height));
                    null !== m && (ji(this, a1, m, !0, !1, k, h), m instanceof ql && m.type === rl ? (a1.beginPath(), a1.rect(h.x, h.y, h.width, h.height), a1.ng(m)) : a1.fillRect(h.x, h.y, h.width, h.height));
                    this.hh(a1, b);
                }
                if (!f && (f || 0 !== g.width && 0 !== g.height && !isNaN(g.x) && !isNaN(g.y))) {
                    f = this.transform;
                    h = this.panel;
                    0 !== (this.l & 4096) === !0 && sl(this);
                    l = this.part;
                    k = !1;
                    var n = 0;
                    l && b.Gf("drawShadows") && (k = l.isShadowed) && (m = l.shadowOffset, n = Math.max(m.y, m.x) * b.scale * b.Nb);
                    m = this.Dd();
                    var p;
                    if (!(p = b.$i || !m)) {
                        var q = this.naturalBounds;
                        p = this.wh;
                        var r = p.m11, u = p.m21, w = p.dx, v = p.m12, y = p.m22, z = p.dy, A, B = A = 0;
                        p = A * r + B * u + w;
                        var D = A * v + B * y + z;
                        A = q.width + n;
                        B = 0;
                        var M = A * r + B * u + w;
                        A = A * v + B * y + z;
                        B = Math.min(p, M);
                        var S = Math.min(D, A);
                        var R = Math.max(p + 0, M) - B;
                        var I = Math.max(D + 0, A) - S;
                        p = B;
                        D = S;
                        A = q.width + n;
                        B = q.height + n;
                        M = A * r + B * u + w;
                        A = A * v + B * y + z;
                        B = Math.min(p, M);
                        S = Math.min(D, A);
                        R = Math.max(p + R, M) - B;
                        I = Math.max(D + I, A) - S;
                        p = B;
                        D = S;
                        A = 0;
                        B = q.height + n;
                        M = A * r + B * u + w;
                        A = A * v + B * y + z;
                        B = Math.min(p, M);
                        S = Math.min(D, A);
                        R = Math.max(p + R, M) - B;
                        I = Math.max(D + I, A) - S;
                        p = B;
                        D = S;
                        n = b.viewportBounds;
                        q = n.x;
                        r = n.y;
                        p = !(p > n.width + q || q > R + p || D > n.height + r || r > I + D);
                    }
                    if (p) {
                        p = 0 !== (this.l & 256);
                        a1.clipInsteadOfFill && (p = !1);
                        this instanceof Pg && (a1.font = this.font);
                        if (p) {
                            D = h.se() ? h.naturalBounds : h.actualBounds;
                            R = Math.max(g.x, D.x);
                            I = Math.max(g.y, D.y);
                            n = Math.min(g.right, D.right) - R;
                            q = Math.min(g.bottom, D.bottom) - I;
                            r = this.tb;
                            null !== r && (R = r.x, I = r.y, n = r.width, q = r.height);
                            if (R > g.width + g.x || g.x > D.width + D.x) {
                                1 !== c && (a1.globalAlpha = d);
                                "" !== this.filter && (a1.filter = e);
                                return;
                            }
                            a1.save();
                            a1.beginPath();
                            a1.rect(R, I, n, q);
                            a1.clip();
                        }
                        if (m) {
                            if (!l.isVisible()) {
                                1 !== c && (a1.globalAlpha = d);
                                "" !== this.filter && (a1.filter = e);
                                return;
                            }
                            k && (D = l.shadowOffset, a1.Ev(D.x * b.scale * this.scale * b.Nb, D.y * b.scale * this.scale * b.Nb, l.shadowBlur), tl(a1), a1.shadowColor = l.shadowColor);
                        }
                        k && !0 === this.shadowVisible ? tl(a1) : k && !1 === this.shadowVisible && ul(a1);
                        l = this.naturalBounds;
                        null !== this.areaBackground && (a1.yc(), vl(this, a1, l, g));
                        a1.transform(f.m11, f.m12, f.m21, f.m22, f.dx, f.dy);
                        k && wl(this, h) && null === this.shadowVisible && ul(a1);
                        null !== this.Ma && (a1.yc(), xl(this, a1, l, g));
                        k && (null !== this.Ma || null !== this.areaBackground || wl(this, h)) ? (yl(this, !0), null === this.shadowVisible && ul(a1)) : yl(this, !1);
                        this.hh(a1, b);
                        k && 0 !== (this.l & 512) === !0 && tl(a1);
                        m && k && ul(a1);
                        p && (a1.restore(), a1.Vc(this instanceof W));
                        f.vs() || (b = 1 / (f.m11 * f.m22 - f.m12 * f.m21), a1.transform(f.m22 * b, -f.m12 * b, -f.m21 * b, f.m11 * b, b * (f.m21 * f.dy - f.m22 * f.dx), b * (f.m12 * f.dx - f.m11 * f.dy)));
                    }
                }
                1 !== c && (a1.globalAlpha = d);
                "" !== this.filter && (a1.filter = e);
            }
        }
    };
    function wl(a1, b) {
        if (null === b) return !1;
        kl(b) && (b = b.panel);
        return 0 !== (b.l & 512) || (b.type === W.Auto || b.type === W.Spot) && b.Qb() !== a1;
    }
    t.Dv = function() {};
    function vl(a1, b, c, d) {
        ji(a1, b, a1.areaBackground, !0, !0, c, d);
        a1.areaBackground instanceof ql && a1.areaBackground.type === rl ? (b.beginPath(), b.rect(d.x, d.y, d.width, d.height), b.ng(a1.areaBackground)) : b.fillRect(d.x, d.y, d.width, d.height);
    }
    function xl(a1, b, c, d) {
        var e = a1.jq(), f = c.x, g = c.y, h = c.width + e, k = c.height + e;
        ji(a1, b, a1.Ma, !0, !1, c, d);
        a1.Ma instanceof ql && a1.Ma.type === rl ? (b.beginPath(), b.rect(f - e / 2, g - e / 2, h, k), b.ng(a1.Ma)) : b.fillRect(f - e / 2, g - e / 2, h, k);
    }
    function zl(a1, b, c) {
        for(var d = b.O.s, e = d.length, f = -1, g = 0; g < e; g++)if (d[g] === a1) {
            f = g;
            break;
        }
        a1 = f;
        if (-1 !== a1) {
            if (0 === a1) b.svg.gd ? b.svg.gd.after(c) : b.svg.Ma ? b.svg.Ma.after(c) : b.type === W.Table ? (b = b.svg.getElementsByClassName("gojs-ts"), b = 0 !== b.length ? b[0] : null, null !== b && b.after(c)) : b.svg.prepend(c);
            else {
                for(; 0 !== a1 && !b.M(a1 - 1).Ed();)a1--;
                0 === a1 ? b.svg.prepend(c) : (a1 = b.M(a1 - 1).svg, null !== a1 ? a1.after(c) : b.svg.appendChild(c));
            }
        }
    }
    function pl(a1, b, c) {
        if (!(b instanceof ii)) return !1;
        if (!a1.visible || 0 === a1.opacity || a1.Dd() && !a1.isVisible()) return null !== a1.svg && null !== a1.svg.parentNode && a1.svg.remove(), !0;
        var d = a1.panel, e = a1.mk(b);
        if (a1.jk(b, c, e)) {
            Al(a1, a1.svg);
            if (null !== a1.svg.parentElement) return a1.Dd() && (b.ti = a1.svg), !0;
            a1.Dd() ? (null !== b.ti ? b.ti.after(a1.svg) : b.Mj.prepend(a1.svg), b.ti = a1.svg) : d && zl(a1, d, a1.svg);
            return !0;
        }
        if (a1.Dd() && a1.isShadowed) {
            var f = a1.shadowOffset;
            b.Ev(f.x * c.scale * a1.scale * c.Nb, f.y * c.scale * a1.scale * c.Nb, a1.shadowBlur);
            tl(b);
            b.shadowColor = a1.shadowColor;
        }
        a1 instanceof Pg && (b.font = a1.font);
        b.yd = null;
        var g = a1.transform;
        f = a1 instanceof W;
        var h = a1 instanceof W ? kl(a1) : !1;
        0 !== (a1.l & 4096) === !0 && sl(a1);
        var k = a1.Jb;
        b.rb.ha = [
            1,
            0,
            0,
            1,
            0,
            0
        ];
        b.o = !1;
        e && (b.o = !0, f && h ? (Bl(b, 1, 0, 0, 1, 0, 0), a1.svg = b.ad) : f ? (Bl(b, g.m11, g.m12, g.m21, g.m22, g.dx, g.dy), a1.svg = b.ad) : Bl(b, 1, 0, 0, 1, 0, 0));
        e = a1.naturalBounds;
        if (null !== a1.areaBackground) {
            var l = g.copy().Uj();
            b.rb.ha = [
                l.m11,
                l.m12,
                l.m21,
                l.m22,
                l.dx,
                l.dy
            ];
            vl(a1, b, e, k);
            b.rb.ha = [
                1,
                0,
                0,
                1,
                0,
                0
            ];
            b.yd.gd = b.ad;
            b.yd.prepend(b.ad);
        }
        f || (b.rb.ha = [
            g.m11,
            g.m12,
            g.m21,
            g.m22,
            g.dx,
            g.dy
        ]);
        null !== a1.background && (f ? (h && (b.rb.ha = [
            g.m11,
            g.m12,
            g.m21,
            g.m22,
            g.dx,
            g.dy
        ]), xl(a1, b, e, k), h && (b.rb.ha = [
            1,
            0,
            0,
            1,
            0,
            0
        ])) : (b.rb.ha = [
            g.m11,
            g.m12,
            g.m21,
            g.m22,
            g.dx,
            g.dy
        ], xl(a1, b, e, k)), b.yd.Ma = b.ad, b.yd.prepend(b.ad));
        g = b.yd;
        e = a1.part;
        h = !1;
        e && c.Gf("drawShadows") && (h = e.isShadowed);
        b.clipInsteadOfFill && (h = !1);
        a1.Dd() && h && tl(b);
        h && !0 === a1.shadowVisible ? tl(b) : h && !1 === a1.shadowVisible && ul(b);
        e = a1.panel;
        h && wl(a1, e) && null === a1.shadowVisible && ul(b);
        b.Hl && (l = c.computePixelRatio(), l = "drop-shadow(" + b.shadowOffsetX / l + "px " + b.shadowOffsetY / l + "px " + b.shadowBlur / l / 2 + "px " + b.shadowColor + ")", null !== a1.background && g.Ma.setAttributeNS(null, "filter", l), null !== a1.areaBackground && g.gd.setAttributeNS(null, "filter", l));
        h && (null !== a1.Ma || null !== a1.areaBackground || wl(a1, e)) ? (yl(a1, !0), null === a1.shadowVisible && ul(b)) : yl(a1, !1);
        e = h;
        a1.hh(b, c);
        f && b.nh.pop();
        b.o && b.nh.pop();
        g = b.Gv.gs;
        h = f ? a1.svg : b.yd;
        l = a1.svg;
        if (!f && null !== l && h !== l && l.parentNode === a1.panel.svg) return a1.svg.replaceWith(h), a1.svg = h, null !== h && a1.Zo(b, d, k, h), Cl(b, l), !0;
        a1.svg = h;
        null !== g && null === h && (Dl(b), b.nh.pop());
        if (null === h) return !0;
        a1.Zo(b, d, k, h);
        b.Hl && (c = c.computePixelRatio(), a1.Dv(h, "drop-shadow(" + b.shadowOffsetX / c + "px " + b.shadowOffsetY / c + "px " + b.shadowBlur / c / 2 + "px " + b.shadowColor + ")"));
        e && 0 !== (a1.l & 512) === !0 && tl(b);
        a1.Dd() && ul(b);
        c = a1.Dd() ? a1.opacity * b.globalAlpha : a1.opacity;
        1 !== c && h.setAttributeNS(null, "opacity", c.toString());
        "" !== a1.filter && h.setAttributeNS(null, "filter", a1.filter);
        a1.Dd() ? (b.ti ? b.ti.after(h) : b.Mj.prepend(h), b.ti = h) : null !== d && zl(a1, d, h);
        null !== g && g(a1, h);
        Al(a1, h);
        return !0;
    }
    function Al(a1, b) {
        b = b.dataset;
        a1 instanceof Y && (null !== a1.portId && (b.portId = a1.portId), a1 instanceof W && (isNaN(a1.itemIndex) || (b.itemIndex = a1.itemIndex.toString()), a1 instanceof U && (b.className = Ha(a1), void 0 !== a1.key && (b.key = a1.key.toString()), a1 instanceof T && (null !== a1.fromNode && (b.fromKey = a1.fromNode.key.toString()), "" !== a1.fromPortId && (b.fromPortId = a1.fromPortId), null !== a1.toNode && (b.toKey = a1.toNode.key.toString()), "" !== a1.toPortId && (b.toPortId = a1.toPortId)))));
    }
    t.Zo = function(a1, b, c, d) {
        var e = 0 !== (this.l & 256);
        a1.clipInsteadOfFill && (e = !1);
        if (e) {
            var f = b.se() ? b.naturalBounds : b.actualBounds;
            b = Math.max(c.x, f.x);
            e = Math.max(c.y, f.y);
            var g = Math.min(c.right, f.right) - b;
            c = Math.min(c.bottom, f.bottom) - e;
            f = this.tb;
            null !== f && (b = f.x, e = f.y, g = f.width, c = f.height);
            f = d.getAttribute("clip-path");
            var h = null;
            null !== f && (h = a1.svg.getElementById(f.split("#")[1].slice(0, -1)));
            null === h ? (f = "CLIP" + jb++, h = a1.Ud("clipPath", {
                id: f
            }), b = a1.Ud("rect", {
                x: b,
                y: e,
                width: g,
                height: c
            }), this instanceof W && (e = this.transform.copy().Uj(), b.setAttribute("transform", "matrix(" + e.m11 + ", " + e.m12 + ", " + e.m21 + ", " + e.m22 + ", " + e.dx + ", " + e.dy + ")")), h.appendChild(b), a1.svg.appendChild(h), d.setAttributeNS(null, "clip-path", "url(#" + f + ")")) : (a1 = h.firstElementChild, a1.setAttribute("x", b.toString()), a1.setAttribute("y", e.toString()), a1.setAttribute("width", g.toString()), a1.setAttribute("height", c.toString()));
        } else d.removeAttributeNS(null, "clip-path"), Cl(a1, d);
    };
    function Cl(a1, b) {
        b = b.getAttribute("clip-path");
        null !== b && (a1 = a1.svg.getElementById(b.split("#")[1].slice(0, -1)), null !== a1 && a1.remove());
    }
    function ei(a1) {
        if (null !== a1.svg) {
            var b = a1.svg.innerHTML.match(/url\(#((CLIP|GRAD).+?)\)/g), c = a1.svg.ownerDocument;
            if (null !== b) {
                b = ba(b);
                for(var d = b.next(); !d.done; d = b.next())d = c.getElementById(d.value.split("#")[1].slice(0, -1)), null !== d && d.remove();
            }
            a1.svg.remove();
        }
    }
    t.hh = function() {};
    t.lv = function() {
        this.Uc = !0;
    };
    t.jk = function(a1, b, c) {
        if (this.Uc) return this.lv(), this.Uc = !1;
        b = this.svg;
        if (null === b) return !1;
        if (!this.visible) return b.remove(), !1;
        if ("g" !== b.nodeName && c || "g" === b.nodeName && !c) return !1;
        var d = this.transform, e = this instanceof W ? kl(this) : !1;
        if (!(this instanceof W && e)) {
            if (this instanceof dk) {
                var f = this.at;
                a1.rb.ha = [
                    d.m11,
                    d.m12,
                    d.m21,
                    d.m22,
                    d.dx,
                    d.dy
                ];
                null !== f && El(a1, f[0], f[1], f[2], f[3], f[4], f[5], f[6], f[7]);
                c ? b.lastElementChild.setAttributeNS(null, "transform", Fl(a1)) : b.setAttributeNS(null, "transform", Fl(a1));
            } else if (!c || this instanceof W) b.setAttributeNS(null, "transform", "matrix(" + d.m11 + ", " + d.m12 + ", " + d.m21 + ", " + d.m22 + ", " + d.dx + ", " + d.dy + ")");
            else if (this instanceof Bf) {
                f = b.getElementsByTagName("path");
                for(var g = 0; g < f.length; g++)f[g].setAttributeNS(null, "transform", "matrix(" + d.m11 + ", " + d.m12 + ", " + d.m21 + ", " + d.m22 + ", " + d.dx + ", " + d.dy + ")");
            } else (b.lastElementChild || b).setAttributeNS(null, "transform", "matrix(" + d.m11 + ", " + d.m12 + ", " + d.m21 + ", " + d.m22 + ", " + d.dx + ", " + d.dy + ")");
        }
        f = this.Dd() ? this.opacity * a1.globalAlpha : this.opacity;
        1 === f ? b.removeAttribute("opacity") : b.setAttributeNS(null, "opacity", f.toString());
        a1.rb.ha = [
            1,
            0,
            0,
            1,
            0,
            0
        ];
        if (null !== this.areaBackground || void 0 !== b.gd) f = b.gd, null === this.areaBackground ? (b.gd.remove(), b.gd = void 0) : (g = d.copy().Uj(), a1.rb.ha = [
            g.m11,
            g.m12,
            g.m21,
            g.m22,
            g.dx,
            g.dy
        ], vl(this, a1, this.naturalBounds, this.actualBounds), a1.rb.ha = [
            1,
            0,
            0,
            1,
            0,
            0
        ], b.gd ? (g = b.gd.getAttribute("filter"), null !== g && a1.ad.setAttribute("filter", g), b.gd.replaceWith(a1.ad)) : b.prepend(a1.ad), b.gd = a1.ad), f && Gl(a1, f);
        if (null !== this.background || void 0 !== b.Ma) {
            f = b.Ma;
            if (null === this.background) Gl(a1, b.Ma), b.Ma.remove(), b.Ma = void 0;
            else {
                if (e || c && !(this instanceof W)) a1.rb.ha = [
                    d.m11,
                    d.m12,
                    d.m21,
                    d.m22,
                    d.dx,
                    d.dy
                ];
                xl(this, a1, this.naturalBounds, this.actualBounds);
                b.Ma ? (Gl(a1, b.Ma), c = b.Ma.getAttribute("filter"), null !== c && a1.ad.setAttribute("filter", c), b.Ma.replaceWith(a1.ad)) : b.prepend(a1.ad);
                b.Ma = a1.ad;
            }
            f && Gl(a1, f);
        }
        this.Zo(a1, this.panel, this.actualBounds, b);
        return !0;
    };
    t.mk = function(a1) {
        if (null !== this.background || null !== this.areaBackground) return !0;
        var b = 0 !== (this.l & 256);
        a1.clipInsteadOfFill && (b = !1);
        return b ? !0 : !1;
    };
    function ji(a1, b, c, d, e, f, g) {
        if (null !== c) {
            var h = 1, k = 1;
            if ("string" === typeof c) d ? b.fillStyle = c : b.strokeStyle = c;
            else if (c.type === Hl) d ? b.fillStyle = c.color : b.strokeStyle = c.color;
            else {
                var l = a1.jq();
                h = f.width;
                k = f.height;
                e ? (h = g.width, k = g.height) : d || (h += l, k += l);
                if ((f = b instanceof Il) && c.xe && (c.type === Jl || c.xk === h && c.et === k)) var m = c.xe;
                else {
                    var n = 0, p = 0, q = 0, r = 0, u = 0, w = 0;
                    w = u = 0;
                    e ? (u = g.x, w = g.y) : d || (u -= l / 2, w -= l / 2);
                    n = c.start.x * h + c.start.offsetX;
                    p = c.start.y * k + c.start.offsetY;
                    q = c.end.x * h + c.end.offsetX;
                    r = c.end.y * k + c.end.offsetY;
                    n += u;
                    q += u;
                    p += w;
                    r += w;
                    if (c.type === Kl) m = b.createLinearGradient(n, p, q, r);
                    else if (c.type === rl) w = isNaN(c.endRadius) ? Math.max(h, k) / 2 : c.endRadius, isNaN(c.startRadius) ? (u = 0, w = Math.max(h, k) / 2) : u = c.startRadius, m = b.createRadialGradient(n, p, u, q, r, w);
                    else if (c.type === Jl) try {
                        m = b.createPattern(c.pattern, "repeat");
                    } catch (y) {
                        m = null;
                    }
                    if (c.type !== Jl && (e = c.colorStops, null !== e)) for(e = e.iterator; e.next();)m.addColorStop(e.key, e.value);
                    if (f && (c.xe = m, null !== m && (c.xk = h, c.et = k), null === m && c.type === Jl && -1 !== c.xk)) {
                        c.xk = -1;
                        var v = a1.diagram;
                        null !== v && -1 === c.xk && ta(function() {
                            v.redraw();
                        }, 600);
                    }
                }
                d ? b.fillStyle = m : b.strokeStyle = m;
            }
        }
    }
    t.rg = function(a1) {
        if (a1 instanceof W) a: {
            if (this !== a1 && null !== a1) for(var b = this.panel; null !== b;){
                if (b === a1) {
                    a1 = !0;
                    break a;
                }
                b = b.panel;
            }
            a1 = !1;
        }
        else a1 = !1;
        return a1;
    };
    t.Ed = function() {
        if (!this.visible) return !1;
        var a1 = this.panel;
        return null !== a1 ? a1.Ed() : !0;
    };
    t.If = function() {
        for(var a1 = this instanceof W ? this : this.panel; null !== a1 && a1.isEnabled;)a1 = a1.panel;
        return null === a1;
    };
    function sl(a1) {
        if (0 !== (a1.l & 2048) === !0) {
            var b = a1.Bb;
            b.reset();
            if (!a1.Jb.w() || !a1.uc.w()) {
                Ll(a1, !1);
                return;
            }
            b.translate(a1.Jb.x - a1.uc.x, a1.Jb.y - a1.uc.y);
            if (1 !== a1.scale || 0 !== a1.angle) {
                var c = a1.naturalBounds;
                a1.mo(b, c.x, c.y, c.width, c.height);
            }
            Ll(a1, !1);
            Ml(a1, !0);
        }
        0 !== (a1.l & 4096) === !0 && (b = a1.panel, null === b ? (a1.wh.set(a1.Bb), a1.Jk = a1.scale, Ml(a1, !1)) : null !== b.oe && (c = a1.wh, c.reset(), b.se() ? c.multiply(b.wh) : null !== b.panel && c.multiply(b.panel.wh), c.multiply(a1.Bb), a1.Jk = a1.scale * b.Jk, Ml(a1, !1)));
    }
    t.mo = function(a1, b, c, d, e) {
        1 !== this.Ca && a1.scale(this.Ca);
        if (0 !== this.Lb) {
            var f = J.alloc();
            f.yi(b, c, d, e, wc);
            a1.rotate(this.Lb, f.x, f.y);
            J.free(f);
        }
    };
    t.v = function(a1) {
        if (!uj(this)) {
            void 0 === a1 && (a1 = !1);
            pj(this, !0);
            ll(this, !0);
            var b = this.panel;
            null === b || a1 || b.v();
        }
    };
    t.Tj = function() {
        uj(this) || (pj(this, !0), ll(this, !0));
    };
    function Nl(a1) {
        if (!vj(a1)) {
            var b = a1.panel;
            null !== b ? b.v() : a1.Dd() && (b = a1.diagram, null !== b && (b.De.add(a1), a1 instanceof V && a1.Bd(), b.ac()));
            ll(a1, !0);
        }
    }
    t.Tk = function() {
        0 !== (this.l & 2048) === !1 && (Ll(this, !0), Ml(this, !0));
    };
    t.Wu = function() {
        Ml(this, !0);
    };
    t.N = function() {
        var a1 = this.part;
        null !== a1 && a1.N();
    };
    function jl(a1, b) {
        var c = a1.stretch, d = a1.panel;
        if (null !== d && d.type === W.Table) return Ol(a1, d.Gb(a1.row), d.Fb(a1.column), b);
        if (null !== d && d.type === W.Auto && d.Qb() === a1) return Pl(a1, nd, b);
        if (c === Yk) {
            if (null !== d) {
                if (d.type === W.Spot && d.Qb() === a1) return Pl(a1, nd, b);
                c = d.defaultStretch;
                return c === Yk ? Pl(a1, kg, b) : Pl(a1, c, b);
            }
            return Pl(a1, kg, b);
        }
        return Pl(a1, c, b);
    }
    function Ol(a1, b, c, d) {
        var e = a1.stretch;
        if (e !== Yk) return Pl(a1, e, d);
        var f = e = null;
        switch(b.stretch){
            case Xk:
                f = !0;
                break;
            case nd:
                f = !0;
        }
        switch(c.stretch){
            case Wk:
                e = !0;
                break;
            case nd:
                e = !0;
        }
        b = a1.panel.defaultStretch;
        null === e && (e = b === Wk || b === nd);
        null === f && (f = b === Xk || b === nd);
        return !0 === e && !0 === f ? Pl(a1, nd, d) : !0 === e ? Pl(a1, Wk, d) : !0 === f ? Pl(a1, Xk, d) : Pl(a1, kg, d);
    }
    function Pl(a1, b, c) {
        if (c) return b;
        if (b === kg) return kg;
        c = a1.desiredSize;
        if (c.w()) return kg;
        a1 = a1.angle;
        if (!isNaN(c.width)) {
            if (90 !== a1 && 270 !== a1) {
                if (b === Wk) return kg;
                if (b === nd) return Xk;
            } else {
                if (b === Xk) return kg;
                if (b === nd) return Wk;
            }
        }
        if (!isNaN(c.height)) {
            if (90 !== a1 && 270 !== a1) {
                if (b === Xk) return kg;
                if (b === nd) return Wk;
            } else {
                if (b === Wk) return kg;
                if (b === nd) return Xk;
            }
        }
        return b;
    }
    function yl(a1, b) {
        a1.l = b ? a1.l | 512 : a1.l & -513;
    }
    function fl(a1) {
        return 0 !== (a1.l & 1024);
    }
    function Ql(a1, b) {
        a1.l = b ? a1.l | 1024 : a1.l & -1025;
    }
    function Ll(a1, b) {
        a1.l = b ? a1.l | 2048 : a1.l & -2049;
    }
    function Ml(a1, b) {
        a1.l = b ? a1.l | 4096 : a1.l & -4097;
    }
    function uj(a1) {
        return 0 !== (a1.l & 8192);
    }
    function pj(a1, b) {
        a1.l = b ? a1.l | 8192 : a1.l & -8193;
    }
    function vj(a1) {
        return 0 !== (a1.l & 16384);
    }
    function ll(a1, b) {
        a1.l = b ? a1.l | 16384 : a1.l & -16385;
    }
    t.Fj = function() {
        this.svg = null;
    };
    t.wi = function(a1) {
        this.Me = a1;
        null !== this.svg && this.svg.remove();
    };
    t.Av = function() {};
    t.zv = function(a1) {
        this.pa = a1;
        Nl(this);
        return !0;
    };
    t.lm = function(a1, b) {
        if (this.pa.x !== a1 || this.pa.y !== b) this.pa.h(a1, b), this.Tk();
    };
    t.jq = function() {
        return 0;
    };
    function Rl(a1) {
        var b = a1.part;
        if (b instanceof V && (null !== a1.portId || a1 === b.port)) {
            var c = b.diagram;
            null === c || c.undoManager.isUndoingRedoing || ol(b, a1);
        }
    }
    function Sl(a1) {
        var b = a1.diagram;
        null === b || b.undoManager.isUndoingRedoing || (a1 instanceof W ? a1 instanceof V ? a1.Bd() : a1.pm(a1, function(a1) {
            Rl(a1);
        }) : Rl(a1));
    }
    t.bind = function(a1, b, c, d) {
        var e = null;
        "string" === typeof a1 ? e = new Gi(a1, b, c, d) : e = a1;
        e.xd = this;
        a1 = this.ih();
        null !== a1 && Tl(a1) && C("Cannot add a Binding to a template that has already been copied: " + e);
        null === this.localBindings && (this.localBindings = new F);
        this.localBindings.add(e);
        return this;
    };
    t.set = function(a1) {
        Object.assign(this, a1);
        return this;
    };
    t.Du = function(a1) {
        Ul(this, a1);
        return this;
    };
    t.apply = function(a1) {
        a1(this);
        return this;
    };
    t.mm = function(a1) {
        Cj(this, a1);
        return this;
    };
    t.pz = function() {
        return this.ih();
    };
    t.ih = function() {
        for(var a1 = this instanceof W ? this : this.panel; null !== a1;){
            if (null !== a1.allBindings) return a1;
            a1 = a1.panel;
        }
        return null;
    };
    t.Jv = function(a1) {
        a1.xd = this;
        null === this.animationTriggers && (this.animationTriggers = new ob);
        this.animationTriggers.add(a1.propertyName, a1);
        return this;
    };
    function Vl(a1, b) {
        for(var c = 1; c < arguments.length; ++c);
        c = arguments;
        var d = null, e = null;
        if ("function" === typeof a1) e = a1;
        else if ("string" === typeof a1) {
            var f = Wl.I(a1);
            "function" === typeof f ? (c = Ba(arguments), d = f(c), za(d) || C('GraphObject.make invoked object builder "' + a1 + '", but it did not return an Object')) : e = x.go[a1];
        }
        null === d && (void 0 !== e && null !== e && e.constructor || C("GraphObject.make requires a class function or GoJS class name or name of an object builder, not: " + a1), d = new e);
        e = 1;
        if (d instanceof Q && 1 < c.length) {
            f = d;
            var g = c[1];
            if ("string" === typeof g || g instanceof HTMLDivElement) vi(f, g), e++;
        }
        for(; e < c.length; e++)f = c[e], void 0 === f ? C("Undefined value at argument " + e + " for object being constructed by GraphObject.make: " + d) : Ul(d, f);
        return d;
    }
    function Ul(a1, b) {
        if ("string" === typeof b) {
            if (a1 instanceof Pg) a1.text = b;
            else if (a1 instanceof Bf) a1.figure = b;
            else if (a1 instanceof dk) a1.source = b;
            else if (a1 instanceof W) b = Xl.I(b), null !== b && (a1.type = b);
            else if (a1 instanceof ql) {
                var c = Ra(ql, b);
                null !== c ? a1.type = c : C("Unknown Brush type as an argument to GraphObject.make: " + b);
            } else a1 instanceof P ? (b = Ra(P, b), null !== b && (a1.type = b)) : a1 instanceof Xd && (b = Ra(Xd, b), null !== b && (a1.type = b));
        } else if (b instanceof Y) a1 instanceof W || C("A GraphObject can only be added to a Panel, not to: " + a1), a1.add(b);
        else if (b instanceof Vj) {
            var d;
            b.isRow && "function" === typeof a1.getRowDefinition ? d = a1.getRowDefinition(b.index) : b.isRow || "function" !== typeof a1.getColumnDefinition || (d = a1.getColumnDefinition(b.index));
            d instanceof Vj ? Yl(d, b) : C("A RowColumnDefinition can only be added to an object that implements getRowDefinition/getColumnDefinition, not to: " + a1);
        } else if (b instanceof E) "function" === typeof a1.qb && a1.qb(b);
        else if (b instanceof Zl) a1.type = b;
        else if (b instanceof Gi) a1 instanceof Y ? a1.bind(b) : a1 instanceof Vj ? a1.bind(b) : C("A Binding can only be applied to a GraphObject or RowColumnDefinition, not to: " + a1);
        else if (b instanceof Zh) a1 instanceof Y ? a1.Jv(b) : C("An AnimationTrigger can only be applied to a GraphObject, not to: " + a1);
        else if (b instanceof Wd) a1 instanceof P && a1.type === P.o ? a1.figures.add(b) : C("A PathFigure can only be added to a Path Geometry, not to: " + a1);
        else if (b instanceof Xd) a1 instanceof Wd ? a1.segments.add(b) : C("A PathSegment can only be added to a PathFigure, not to: " + a1);
        else if (b instanceof ti) a1 instanceof Q ? a1.layout = b : a1 instanceof pf ? a1.layout = b : C("A Layout can only be assigned to a Diagram or a Group, not to: " + a1);
        else if (Array.isArray(b)) for(c = 0; c < b.length; c++)Ul(a1, b[c]);
        else if ("object" === typeof b && null !== b) {
            if (a1 instanceof ql) {
                c = new Ta;
                for(var e in b)d = parseFloat(e), isNaN(d) ? c[e] = b[e] : a1.addColorStop(d, b[e]);
                Cj(a1, c);
            } else if (a1 instanceof Vj) {
                void 0 !== b.row ? (e = b.row, (void 0 === e || null === e || Infinity === e || isNaN(e) || 0 > e) && C("Must specify non-negative integer row for RowColumnDefinition " + b + ", not: " + e), a1.isRow = !0, a1.index = e) : void 0 !== b.column && (e = b.column, (void 0 === e || null === e || Infinity === e || isNaN(e) || 0 > e) && C("Must specify non-negative integer column for RowColumnDefinition " + b + ", not: " + e), a1.isRow = !1, a1.index = e);
                e = new Ta;
                for(c in b)"row" !== c && "column" !== c && (e[c] = b[c]);
                Cj(a1, e);
            } else Cj(a1, b);
        } else C('Unknown initializer "' + b + '" for object being constructed by GraphObject.make: ' + a1);
    }
    function $l(a1, b) {
        Wl.add(a1, b);
    }
    function am(a1, b, c) {
        void 0 === c && (c = null);
        var d = a1[1];
        if ("function" === typeof c ? c(d) : "string" === typeof d) return a1.splice(1, 1), d;
        if (void 0 === b) throw Error("no " + ("function" === typeof c ? "satisfactory" : "string") + " argument for GraphObject builder " + a1[0]);
        return b;
    }
    ma.Object.defineProperties(Y.prototype, {
        bindingId: {
            get: function() {
                return null !== this.A ? this.A.yp : -1;
            },
            set: function(a1) {
                this.bindingId !== a1 && (null === this.A && (this.A = new dl), this.A.yp = a1);
            }
        },
        localBindings: {
            get: function() {
                return null !== this.A ? this.A.te : null;
            },
            set: function(a1) {
                this.localBindings !== a1 && (null === this.A && (this.A = new dl), this.A.te = a1);
            }
        },
        srcBindings: {
            get: function() {
                return null !== this.A ? this.A.vm : null;
            },
            set: function(a1) {
                this.srcBindings !== a1 && (null === this.A && (this.A = new dl), this.A.vm = a1);
            }
        },
        shadowVisible: {
            get: function() {
                return null !== this.A ? this.A.Ci : null;
            },
            set: function(a1) {
                var b = this.shadowVisible;
                b !== a1 && (cl(this), this.A.Ci = a1, this.Uc = !0, this.N(), this.g("shadowVisible", b, a1));
            }
        },
        enabledChanged: {
            get: function() {
                return null !== this.A ? this.A.Ib : null;
            },
            set: function(a1) {
                var b = this.enabledChanged;
                b !== a1 && (cl(this), this.A.Ib = a1, this.g("enabledChanged", b, a1));
            }
        },
        segmentOrientation: {
            get: function() {
                return null !== this.Ua ? this.Ua.qr : Zf;
            },
            set: function(a1) {
                var b = this.segmentOrientation;
                b !== a1 && (null === this.Ua && (this.Ua = new bm), this.Ua.qr = a1, this.v(), this.g("segmentOrientation", b, a1), a1 === Zf && (this.angle = 0));
            }
        },
        segmentIndex: {
            get: function() {
                return null !== this.Ua ? this.Ua.u : -Infinity;
            },
            set: function(a1) {
                a1 = Math.round(a1);
                var b = this.segmentIndex;
                b !== a1 && (null === this.Ua && (this.Ua = new bm), this.Ua.u = a1, this.v(), this.g("segmentIndex", b, a1));
            }
        },
        segmentFraction: {
            get: function() {
                return null !== this.Ua ? this.Ua.o : 0;
            },
            set: function(a1) {
                isNaN(a1) ? a1 = 0 : 0 > a1 ? a1 = 0 : 1 < a1 && (a1 = 1);
                var b = this.segmentFraction;
                b !== a1 && (null === this.Ua && (this.Ua = new bm), this.Ua.o = a1, this.v(), this.g("segmentFraction", b, a1));
            }
        },
        segmentOffset: {
            get: function() {
                return null !== this.Ua ? this.Ua.F : pb;
            },
            set: function(a1) {
                var b = this.segmentOffset;
                b.D(a1) || (a1 = a1.J(), null === this.Ua && (this.Ua = new bm), this.Ua.F = a1, this.v(), this.g("segmentOffset", b, a1));
            }
        },
        stretch: {
            get: function() {
                return null !== this.A ? this.A.hg : Yk;
            },
            set: function(a1) {
                var b = this.stretch;
                b !== a1 && (cl(this), this.A.hg = a1, this.v(), this.g("stretch", b, a1));
            }
        },
        name: {
            get: function() {
                return null !== this.A ? this.A.xa : "";
            },
            set: function(a1) {
                var b = this.name;
                b !== a1 && (cl(this), this.A.xa = a1, null !== this.part && (this.part.Rh = null), this.g("name", b, a1));
            }
        },
        opacity: {
            get: function() {
                return this.pb;
            },
            set: function(a1) {
                var b = this.pb;
                b !== a1 && ((0 > a1 || 1 < a1) && xa(a1, "0 <= value <= 1", Y, "opacity"), this.pb = a1, this.g("opacity", b, a1), a1 = this.diagram, b = this.part, null !== a1 && null !== b && a1.N(Gj(b, b.actualBounds)));
            }
        },
        filter: {
            get: function() {
                return this.an;
            },
            set: function(a1) {
                var b = this.an;
                b !== a1 && (this.an = a1, this.Uc = !0, this.g("filter", b, a1), a1 = this.diagram, b = this.part, null !== a1 && null !== b && a1.N(Gj(b, b.actualBounds)));
            }
        },
        visible: {
            get: function() {
                return 0 !== (this.l & 1);
            },
            set: function(a1) {
                var b = 0 !== (this.l & 1);
                b !== a1 && (this.l ^= 1, this.g("visible", b, a1), b = this.panel, null !== b ? b.v() : this.Dd() && this.$b(a1), this.N(), Sl(this));
            }
        },
        pickable: {
            get: function() {
                return 0 !== (this.l & 2);
            },
            set: function(a1) {
                var b = 0 !== (this.l & 2);
                b !== a1 && (this.l ^= 2, this.g("pickable", b, a1));
            }
        },
        fromLinkableDuplicates: {
            get: function() {
                return 0 !== (this.l & 4);
            },
            set: function(a1) {
                var b = 0 !== (this.l & 4);
                b !== a1 && (this.l ^= 4, this.g("fromLinkableDuplicates", b, a1));
            }
        },
        fromLinkableSelfNode: {
            get: function() {
                return 0 !== (this.l & 8);
            },
            set: function(a1) {
                var b = 0 !== (this.l & 8);
                b !== a1 && (this.l ^= 8, this.g("fromLinkableSelfNode", b, a1));
            }
        },
        toLinkableDuplicates: {
            get: function() {
                return 0 !== (this.l & 16);
            },
            set: function(a1) {
                var b = 0 !== (this.l & 16);
                b !== a1 && (this.l ^= 16, this.g("toLinkableDuplicates", b, a1));
            }
        },
        toLinkableSelfNode: {
            get: function() {
                return 0 !== (this.l & 32);
            },
            set: function(a1) {
                var b = 0 !== (this.l & 32);
                b !== a1 && (this.l ^= 32, this.g("toLinkableSelfNode", b, a1));
            }
        },
        isPanelMain: {
            get: function() {
                return 0 !== (this.l & 64);
            },
            set: function(a1) {
                var b = 0 !== (this.l & 64);
                b !== a1 && (this.l ^= 64, this.v(), this.g("isPanelMain", b, a1));
            }
        },
        isActionable: {
            get: function() {
                return 0 !== (this.l & 128);
            },
            set: function(a1) {
                var b = 0 !== (this.l & 128);
                b !== a1 && (this.l ^= 128, this.g("isActionable", b, a1));
            }
        },
        areaBackground: {
            get: function() {
                return null !== this.A ? this.A.gd : null;
            },
            set: function(a1) {
                var b = this.areaBackground;
                b !== a1 && (null !== a1 && cm(a1, "GraphObject.areaBackground"), a1 instanceof ql && a1.freeze(), cl(this), this.A.gd = a1, this.N(), this.g("areaBackground", b, a1));
            }
        },
        background: {
            get: function() {
                return this.Ma;
            },
            set: function(a1) {
                var b = this.Ma;
                b !== a1 && (null !== a1 && cm(a1, "GraphObject.background"), a1 instanceof ql && a1.freeze(), this.Ma = a1, this.N(), this.g("background", b, a1));
            }
        },
        part: {
            get: function() {
                if (this.Dd()) return this;
                if (null !== this.Ng) return this.Ng;
                var a1;
                for(a1 = this.panel; a1;){
                    if (a1 instanceof U) return this.Ng = a1;
                    a1 = a1.panel;
                }
                return null;
            }
        },
        svg: {
            get: function() {
                return this.V;
            },
            set: function(a1) {
                this.V = a1;
            }
        },
        panel: {
            get: function() {
                return this.Me;
            }
        },
        layer: {
            get: function() {
                var a1 = this.part;
                return null !== a1 ? a1.layer : null;
            }
        },
        diagram: {
            get: function() {
                var a1 = this.part;
                return null !== a1 ? a1.diagram : null;
            }
        },
        position: {
            get: function() {
                return this.pa;
            },
            set: function(a1) {
                var b = a1.x, c = a1.y, d = this.pa, e = d.x;
                d = d.y;
                (e === b || isNaN(e) && isNaN(b)) && (d === c || isNaN(d) && isNaN(c)) ? this.Av() : (a1 = a1.copy(), this.zv(a1, e, d) && this.g("position", new J(e, d), a1));
            }
        },
        actualBounds: {
            get: function() {
                return this.Jb;
            }
        },
        scale: {
            get: function() {
                return this.Ca;
            },
            set: function(a1) {
                var b = this.Ca;
                b !== a1 && (0 >= a1 && C("GraphObject.scale for " + this + " must be greater than zero, not: " + a1), this.Ca = a1, this.v(), this.g("scale", b, a1));
            }
        },
        angle: {
            get: function() {
                return this.Lb;
            },
            set: function(a1) {
                var b = this.Lb;
                b !== a1 && (a1 %= 360, 0 > a1 && (a1 += 360), b !== a1 && (this.Lb = a1, Sl(this), this.v(), this.g("angle", b, a1)));
            }
        },
        desiredSize: {
            get: function() {
                return this.jd;
            },
            set: function(a1) {
                var b = a1.width, c = a1.height, d = this.jd, e = d.width, f = d.height;
                (e === b || isNaN(e) && isNaN(b)) && (f === c || isNaN(f) && isNaN(c)) || (this.jd = a1 = a1.J(), this.v(), this instanceof Bf && this.rc(), this.g("desiredSize", d, a1), fl(this) && (a1 = this.part, null !== a1 && (gl(this, a1, "width"), gl(this, a1, "height"))));
            }
        },
        width: {
            get: function() {
                return this.jd.width;
            },
            set: function(a1) {
                var b = this.jd.width;
                b === a1 || isNaN(b) && isNaN(a1) || (b = this.jd, this.jd = a1 = new L(a1, this.jd.height).freeze(), this.v(), this instanceof Bf && this.rc(), this.g("desiredSize", b, a1), fl(this) && (a1 = this.part, null !== a1 && gl(this, a1, "width")));
            }
        },
        height: {
            get: function() {
                return this.jd.height;
            },
            set: function(a1) {
                var b = this.jd.height;
                b === a1 || isNaN(b) && isNaN(a1) || (b = this.jd, this.jd = a1 = new L(this.jd.width, a1).freeze(), this.v(), this instanceof Bf && this.rc(), this.g("desiredSize", b, a1), fl(this) && (a1 = this.part, null !== a1 && gl(this, a1, "height")));
            }
        },
        minSize: {
            get: function() {
                return null !== this.A ? this.A.u : Cb;
            },
            set: function(a1) {
                var b = this.minSize;
                b.D(a1) || (a1 = a1.copy(), isNaN(a1.width) && (a1.width = 0), isNaN(a1.height) && (a1.height = 0), a1.freeze(), cl(this), this.A.u = a1, this.v(), this.g("minSize", b, a1));
            }
        },
        maxSize: {
            get: function() {
                return null !== this.A ? this.A.o : Kb;
            },
            set: function(a1) {
                var b = this.maxSize;
                b.D(a1) || (a1 = a1.copy(), isNaN(a1.width) && (a1.width = Infinity), isNaN(a1.height) && (a1.height = Infinity), a1.freeze(), cl(this), this.A.o = a1, this.v(), this.g("maxSize", b, a1));
            }
        },
        measuredBounds: {
            get: function() {
                return this.uc;
            }
        },
        naturalBounds: {
            get: function() {
                return this.ec;
            }
        },
        margin: {
            get: function() {
                return this.Kg;
            },
            set: function(a1) {
                "number" === typeof a1 && (a1 = new dc(a1));
                var b = this.Kg;
                b.D(a1) || (this.Kg = a1 = a1.J(), this.v(), this.g("margin", b, a1));
            }
        },
        transform: {
            get: function() {
                0 !== (this.l & 2048) === !0 && sl(this);
                return this.Bb;
            }
        },
        oe: {
            get: function() {
                0 !== (this.l & 4096) === !0 && sl(this);
                return this.wh;
            }
        },
        animationTriggers: {
            get: function() {
                return null !== this.A ? this.A.hb : null;
            },
            set: function(a1) {
                this.animationTriggers !== a1 && (cl(this), this.A.hb = a1);
            }
        },
        reshapingBehavior: {
            get: function() {
                return null !== this.A ? this.A.Pf : kg;
            },
            set: function(a1) {
                this.reshapingBehavior !== a1 && (cl(this), this.A.Pf = a1);
            }
        },
        alignment: {
            get: function() {
                return this.Kb;
            },
            set: function(a1) {
                var b = this.Kb;
                b.D(a1) || (a1.Mc() && !a1.Yb() && C("GraphObject.alignment for " + this + " must be a real Spot or Spot.Default, not: " + a1), this.Kb = a1 = a1.J(), Nl(this), this.g("alignment", b, a1));
            }
        },
        column: {
            get: function() {
                return this.Ag;
            },
            set: function(a1) {
                a1 = Math.round(a1);
                var b = this.Ag;
                b !== a1 && (0 > a1 && xa(a1, ">= 0", Y, "column"), this.Ag = a1, this.v(), this.g("column", b, a1), null !== this.svg && this.svg.remove());
            }
        },
        columnSpan: {
            get: function() {
                return null !== this.A ? this.A.ob : 1;
            },
            set: function(a1) {
                a1 = Math.round(a1);
                var b = this.columnSpan;
                b !== a1 && (1 > a1 && xa(a1, ">= 1", Y, "columnSpan"), cl(this), this.A.ob = a1, this.v(), this.g("columnSpan", b, a1));
            }
        },
        row: {
            get: function() {
                return this.ho;
            },
            set: function(a1) {
                a1 = Math.round(a1);
                var b = this.ho;
                b !== a1 && (0 > a1 && xa(a1, ">= 0", Y, "row"), this.ho = a1, this.v(), this.g("row", b, a1), null !== this.svg && this.svg.remove());
            }
        },
        rowSpan: {
            get: function() {
                return null !== this.A ? this.A.Bi : 1;
            },
            set: function(a1) {
                a1 = Math.round(a1);
                var b = this.rowSpan;
                b !== a1 && (1 > a1 && xa(a1, ">= 1", Y, "rowSpan"), cl(this), this.A.Bi = a1, this.v(), this.g("rowSpan", b, a1));
            }
        },
        spanAllocation: {
            get: function() {
                return null !== this.A ? this.A.Di : null;
            },
            set: function(a1) {
                var b = this.spanAllocation;
                b !== a1 && (cl(this), this.A.Di = a1, this.v(), this.g("spanAllocation", b, a1));
            }
        },
        alignmentFocus: {
            get: function() {
                return this.rk;
            },
            set: function(a1) {
                var b = this.rk;
                b.D(a1) || (this.rk = a1 = a1.J(), this.v(), this.g("alignmentFocus", b, a1));
            }
        },
        portId: {
            get: function() {
                return this.Xn;
            },
            set: function(a1) {
                var b = this.Xn;
                if (b !== a1) {
                    var c = this.part;
                    null === c || c instanceof V || C("Cannot set portID on a Link: " + a1);
                    null !== b && null !== c && dm(c, this);
                    this.Xn = a1;
                    null !== a1 && null !== c && (c.Te = !0, em(c, this));
                    this.g("portId", b, a1);
                }
            }
        },
        toSpot: {
            get: function() {
                return null !== this.ba ? this.ba.yj : rc;
            },
            set: function(a1) {
                var b = this.toSpot;
                b.D(a1) || (a1 = a1.J(), this.Xc(), this.ba.yj = a1, this.g("toSpot", b, a1), Rl(this));
            }
        },
        toEndSegmentLength: {
            get: function() {
                return null !== this.ba ? this.ba.wj : 10;
            },
            set: function(a1) {
                var b = this.toEndSegmentLength;
                b !== a1 && (0 > a1 && xa(a1, ">= 0", Y, "toEndSegmentLength"), this.Xc(), this.ba.wj = a1, this.g("toEndSegmentLength", b, a1), Rl(this));
            }
        },
        toShortLength: {
            get: function() {
                return null !== this.ba ? this.ba.xj : 0;
            },
            set: function(a1) {
                var b = this.toShortLength;
                b !== a1 && (this.Xc(), this.ba.xj = a1, this.g("toShortLength", b, a1), Rl(this));
            }
        },
        toLinkable: {
            get: function() {
                return null !== this.ba ? this.ba.Sr : null;
            },
            set: function(a1) {
                var b = this.toLinkable;
                b !== a1 && (this.Xc(), this.ba.Sr = a1, this.g("toLinkable", b, a1));
            }
        },
        toMaxLinks: {
            get: function() {
                return null !== this.ba ? this.ba.Tr : Infinity;
            },
            set: function(a1) {
                var b = this.toMaxLinks;
                b !== a1 && (0 > a1 && xa(a1, ">= 0", Y, "toMaxLinks"), this.Xc(), this.ba.Tr = a1, this.g("toMaxLinks", b, a1));
            }
        },
        fromSpot: {
            get: function() {
                return null !== this.ba ? this.ba.Xi : rc;
            },
            set: function(a1) {
                var b = this.fromSpot;
                b.D(a1) || (a1 = a1.J(), this.Xc(), this.ba.Xi = a1, this.g("fromSpot", b, a1), Rl(this));
            }
        },
        fromEndSegmentLength: {
            get: function() {
                return null !== this.ba ? this.ba.Vi : 10;
            },
            set: function(a1) {
                var b = this.fromEndSegmentLength;
                b !== a1 && (0 > a1 && xa(a1, ">= 0", Y, "fromEndSegmentLength"), this.Xc(), this.ba.Vi = a1, this.g("fromEndSegmentLength", b, a1), Rl(this));
            }
        },
        fromShortLength: {
            get: function() {
                return null !== this.ba ? this.ba.Wi : 0;
            },
            set: function(a1) {
                var b = this.fromShortLength;
                b !== a1 && (this.Xc(), this.ba.Wi = a1, this.g("fromShortLength", b, a1), Rl(this));
            }
        },
        fromLinkable: {
            get: function() {
                return null !== this.ba ? this.ba.gq : null;
            },
            set: function(a1) {
                var b = this.fromLinkable;
                b !== a1 && (this.Xc(), this.ba.gq = a1, this.g("fromLinkable", b, a1));
            }
        },
        fromMaxLinks: {
            get: function() {
                return null !== this.ba ? this.ba.hq : Infinity;
            },
            set: function(a1) {
                var b = this.fromMaxLinks;
                b !== a1 && (0 > a1 && xa(a1, ">= 0", Y, "fromMaxLinks"), this.Xc(), this.ba.hq = a1, this.g("fromMaxLinks", b, a1));
            }
        },
        cursor: {
            get: function() {
                return null !== this.A ? this.A.j : "";
            },
            set: function(a1) {
                var b = this.cursor;
                b !== a1 && (cl(this), this.A.j = a1, this.g("cursor", b, a1));
            }
        },
        click: {
            get: function() {
                return null !== this.A ? this.A.zh : null;
            },
            set: function(a1) {
                var b = this.click;
                b !== a1 && (cl(this), this.A.zh = a1, this.g("click", b, a1));
            }
        },
        doubleClick: {
            get: function() {
                return null !== this.A ? this.A.Fh : null;
            },
            set: function(a1) {
                var b = this.doubleClick;
                b !== a1 && (cl(this), this.A.Fh = a1, this.g("doubleClick", b, a1));
            }
        },
        contextClick: {
            get: function() {
                return null !== this.A ? this.A.Bh : null;
            },
            set: function(a1) {
                var b = this.contextClick;
                b !== a1 && (cl(this), this.A.Bh = a1, this.g("contextClick", b, a1));
            }
        },
        mouseEnter: {
            get: function() {
                return null !== this.A ? this.A.Mh : null;
            },
            set: function(a1) {
                var b = this.mouseEnter;
                b !== a1 && (cl(this), this.A.Mh = a1, this.g("mouseEnter", b, a1));
            }
        },
        mouseLeave: {
            get: function() {
                return null !== this.A ? this.A.Ph : null;
            },
            set: function(a1) {
                var b = this.mouseLeave;
                b !== a1 && (cl(this), this.A.Ph = a1, this.g("mouseLeave", b, a1));
            }
        },
        mouseOver: {
            get: function() {
                return null !== this.A ? this.A.Qh : null;
            },
            set: function(a1) {
                var b = this.mouseOver;
                b !== a1 && (cl(this), this.A.Qh = a1, this.g("mouseOver", b, a1));
            }
        },
        mouseHover: {
            get: function() {
                return null !== this.A ? this.A.Oh : null;
            },
            set: function(a1) {
                var b = this.mouseHover;
                b !== a1 && (cl(this), this.A.Oh = a1, this.g("mouseHover", b, a1));
            }
        },
        mouseHold: {
            get: function() {
                return null !== this.A ? this.A.Nh : null;
            },
            set: function(a1) {
                var b = this.mouseHold;
                b !== a1 && (cl(this), this.A.Nh = a1, this.g("mouseHold", b, a1));
            }
        },
        mouseDragEnter: {
            get: function() {
                return null !== this.A ? this.A.Of : null;
            },
            set: function(a1) {
                var b = this.mouseDragEnter;
                b !== a1 && (cl(this), this.A.Of = a1, this.g("mouseDragEnter", b, a1));
            }
        },
        mouseDragLeave: {
            get: function() {
                return null !== this.A ? this.A.Xd : null;
            },
            set: function(a1) {
                var b = this.mouseDragLeave;
                b !== a1 && (cl(this), this.A.Xd = a1, this.g("mouseDragLeave", b, a1));
            }
        },
        mouseDrop: {
            get: function() {
                return null !== this.A ? this.A.Lh : null;
            },
            set: function(a1) {
                var b = this.mouseDrop;
                b !== a1 && (cl(this), this.A.Lh = a1, this.g("mouseDrop", b, a1));
            }
        },
        actionDown: {
            get: function() {
                return null !== this.A ? this.A.V : null;
            },
            set: function(a1) {
                var b = this.actionDown;
                b !== a1 && (cl(this), this.A.V = a1, this.g("actionDown", b, a1));
            }
        },
        actionMove: {
            get: function() {
                return null !== this.A ? this.A.ia : null;
            },
            set: function(a1) {
                var b = this.actionMove;
                b !== a1 && (cl(this), this.A.ia = a1, this.g("actionMove", b, a1));
            }
        },
        actionUp: {
            get: function() {
                return null !== this.A ? this.A.Ha : null;
            },
            set: function(a1) {
                var b = this.actionUp;
                b !== a1 && (cl(this), this.A.Ha = a1, this.g("actionUp", b, a1));
            }
        },
        actionCancel: {
            get: function() {
                return null !== this.A ? this.A.F : null;
            },
            set: function(a1) {
                var b = this.actionCancel;
                b !== a1 && (cl(this), this.A.F = a1, this.g("actionCancel", b, a1));
            }
        },
        toolTip: {
            get: function() {
                return null !== this.A ? this.A.$h : null;
            },
            set: function(a1) {
                var b = this.toolTip;
                b !== a1 && (cl(this), this.A.$h = a1, this.g("toolTip", b, a1));
            }
        },
        contextMenu: {
            get: function() {
                return null !== this.A ? this.A.Ch : null;
            },
            set: function(a1) {
                var b = this.contextMenu;
                b !== a1 && (cl(this), this.A.Ch = a1, this.g("contextMenu", b, a1));
            }
        }
    });
    Y.prototype.trigger = Y.prototype.Jv;
    Y.prototype.findBindingPanel = Y.prototype.ih;
    Y.prototype.findTemplateBinder = Y.prototype.pz;
    Y.prototype.setProperties = Y.prototype.mm;
    Y.prototype.apply = Y.prototype.apply;
    Y.prototype.attach = Y.prototype.Du;
    Y.prototype.set = Y.prototype.set;
    Y.prototype.isEnabledObject = Y.prototype.If;
    Y.prototype.isVisibleObject = Y.prototype.Ed;
    Y.prototype.isContainedBy = Y.prototype.rg;
    Y.prototype.getNearestIntersectionPoint = Y.prototype.qs;
    Y.prototype.getLocalPoint = Y.prototype.ps;
    Y.prototype.getDocumentScale = Y.prototype.Df;
    Y.prototype.getDocumentAngle = Y.prototype.li;
    Y.prototype.getDocumentBounds = Y.prototype.mi;
    Y.prototype.getDocumentPoint = Y.prototype.ga;
    Y.prototype.intersectsRect = Y.prototype.Yc;
    Y.prototype.containedInRect = Y.prototype.fh;
    Y.prototype.containsRect = Y.prototype.Re;
    Y.prototype.containsPoint = Y.prototype.ca;
    Y.prototype.raiseChanged = Y.prototype.g;
    Y.prototype.raiseChangedEvent = Y.prototype.cb;
    Y.prototype.addCopyProperty = Y.prototype.Vw;
    var Wl = null;
    Y.className = "GraphObject";
    Wl = new ob;
    $l("Button", function() {
        function a1(a1, b) {
            return null !== a1.diagram.jc(a1.documentPoint, function(a1) {
                for(; null !== a1.panel && !a1.isActionable;)a1 = a1.panel;
                return a1;
            }, function(a1) {
                return a1 === b;
            });
        }
        var b = Vl(W, W.Auto, {
            isActionable: !0,
            enabledChanged: function(a1, b) {
                if (a1 instanceof W) {
                    var c = a1.fb("ButtonBorder");
                    null !== c && (c.fill = b ? a1._buttonFillNormal : a1._buttonFillDisabled);
                }
            },
            cursor: "pointer",
            _buttonFillNormal: "#F5F5F5",
            _buttonStrokeNormal: "#BDBDBD",
            _buttonFillOver: "#E0E0E0",
            _buttonStrokeOver: "#9E9E9E",
            _buttonFillPressed: "#BDBDBD",
            _buttonStrokePressed: "#9E9E9E",
            _buttonFillDisabled: "#E5E5E5"
        }, Vl(Bf, {
            name: "ButtonBorder",
            figure: "RoundedRectangle",
            spot1: new O(0, 0, 2.76142374915397, 2.761423749153969),
            spot2: new O(1, 1, -2.76142374915397, -2.761423749153969),
            parameter1: 2,
            parameter2: 2,
            fill: "#F5F5F5",
            stroke: "#BDBDBD"
        }));
        b.mouseEnter = function(a1, b) {
            if (b.If() && b instanceof W && (a1 = b.fb("ButtonBorder"), a1 instanceof Bf)) {
                var c = b._buttonFillOver;
                b._buttonFillNormal = a1.fill;
                a1.fill = c;
                c = b._buttonStrokeOver;
                b._buttonStrokeNormal = a1.stroke;
                a1.stroke = c;
            }
        };
        b.mouseLeave = function(a1, b) {
            b.If() && b instanceof W && (a1 = b.fb("ButtonBorder"), a1 instanceof Bf && (a1.fill = b._buttonFillNormal, a1.stroke = b._buttonStrokeNormal));
        };
        b.actionDown = function(a1, b) {
            if (b.If() && b instanceof W && null !== b._buttonFillPressed && 0 === a1.button) {
                var c = b.fb("ButtonBorder");
                if (c instanceof Bf) {
                    a1 = a1.diagram;
                    var d = a1.skipsUndoManager;
                    a1.skipsUndoManager = !0;
                    var g = b._buttonFillPressed;
                    b._buttonFillOver = c.fill;
                    c.fill = g;
                    g = b._buttonStrokePressed;
                    b._buttonStrokeOver = c.stroke;
                    c.stroke = g;
                    a1.skipsUndoManager = d;
                }
            }
        };
        b.actionUp = function(b, d) {
            if (d.If() && d instanceof W && null !== d._buttonFillPressed && 0 === b.button) {
                var c = d.fb("ButtonBorder");
                if (c instanceof Bf) {
                    var f = b.diagram, g = f.skipsUndoManager;
                    f.skipsUndoManager = !0;
                    a1(b, d) ? (c.fill = d._buttonFillOver, c.stroke = d._buttonStrokeOver) : (c.fill = d._buttonFillNormal, c.stroke = d._buttonStrokeNormal);
                    f.skipsUndoManager = g;
                }
            }
        };
        b.actionCancel = function(b, d) {
            if (d.If() && d instanceof W && null !== d._buttonFillPressed) {
                var c = d.fb("ButtonBorder");
                if (c instanceof Bf) {
                    var f = b.diagram, g = f.skipsUndoManager;
                    f.skipsUndoManager = !0;
                    a1(b, d) ? (c.fill = d._buttonFillOver, c.stroke = d._buttonStrokeOver) : (c.fill = d._buttonFillNormal, c.stroke = d._buttonStrokeNormal);
                    f.skipsUndoManager = g;
                }
            }
        };
        b.actionMove = function(b, d) {
            if (d.If() && d instanceof W && null !== d._buttonFillPressed) {
                var c = b.diagram;
                if (0 === c.firstInput.button && (c.currentTool.standardMouseOver(), a1(b, d) && (b = d.fb("ButtonBorder"), b instanceof Bf))) {
                    var f = c.skipsUndoManager;
                    c.skipsUndoManager = !0;
                    var g = d._buttonFillPressed;
                    b.fill !== g && (b.fill = g);
                    g = d._buttonStrokePressed;
                    b.stroke !== g && (b.stroke = g);
                    c.skipsUndoManager = f;
                }
            }
        };
        return b;
    });
    $l("TreeExpanderButton", function() {
        var a1 = Vl("Button", {
            _treeExpandedFigure: "MinusLine",
            _treeCollapsedFigure: "PlusLine"
        }, Vl(Bf, {
            name: "ButtonIcon",
            figure: "MinusLine",
            stroke: "#424242",
            strokeWidth: 2,
            desiredSize: Ib
        }, new Gi("figure", "isTreeExpanded", function(a1, c) {
            c = c.panel;
            return a1 ? c._treeExpandedFigure : c._treeCollapsedFigure;
        }).bp()), {
            visible: !1
        }, new Gi("visible", "isTreeLeaf", function(a1) {
            return !a1;
        }).bp());
        a1.click = function(a1, c) {
            c = c.part;
            c instanceof te && (c = c.adornedPart);
            if (c instanceof V) {
                var b = c.diagram;
                if (null !== b) {
                    b = b.commandHandler;
                    if (c.isTreeExpanded) {
                        if (!b.canCollapseTree(c)) return;
                    } else if (!b.canExpandTree(c)) return;
                    a1.handled = !0;
                    c.isTreeExpanded ? b.collapseTree(c) : b.expandTree(c);
                }
            }
        };
        return a1;
    });
    $l("SubGraphExpanderButton", function() {
        var a1 = Vl("Button", {
            _subGraphExpandedFigure: "MinusLine",
            _subGraphCollapsedFigure: "PlusLine"
        }, Vl(Bf, {
            name: "ButtonIcon",
            figure: "MinusLine",
            stroke: "#424242",
            strokeWidth: 2,
            desiredSize: Ib
        }, new Gi("figure", "isSubGraphExpanded", function(a1, c) {
            c = c.panel;
            return a1 ? c._subGraphExpandedFigure : c._subGraphCollapsedFigure;
        }).bp()));
        a1.click = function(a1, c) {
            c = c.part;
            c instanceof te && (c = c.adornedPart);
            if (c instanceof pf) {
                var b = c.diagram;
                if (null !== b) {
                    b = b.commandHandler;
                    if (c.isSubGraphExpanded) {
                        if (!b.canCollapseSubGraph(c)) return;
                    } else if (!b.canExpandSubGraph(c)) return;
                    a1.handled = !0;
                    c.isSubGraphExpanded ? b.collapseSubGraph(c) : b.expandSubGraph(c);
                }
            }
        };
        return a1;
    });
    $l("ToolTip", function() {
        return Vl(te, W.Auto, {
            isShadowed: !0,
            shadowColor: "rgba(0, 0, 0, .4)",
            shadowOffset: new J(0, 3),
            shadowBlur: 5
        }, Vl(Bf, {
            name: "Border",
            figure: "RoundedRectangle",
            parameter1: 1,
            parameter2: 1,
            fill: "#F5F5F5",
            stroke: "#F0F0F0",
            spot1: new O(0, 0, 4, 6),
            spot2: new O(1, 1, -4, -4)
        }));
    });
    $l("ContextMenu", function() {
        return Vl(te, W.Vertical, {
            background: "#F5F5F5",
            isShadowed: !0,
            shadowColor: "rgba(0, 0, 0, .4)",
            shadowOffset: new J(0, 3),
            shadowBlur: 5
        }, new Gi("background", "", function(a1) {
            return null !== a1.adornedPart && null !== a1.placeholder ? null : "#F5F5F5";
        }));
    });
    $l("ContextMenuButton", function() {
        var a1 = Vl("Button");
        a1.stretch = Wk;
        var b = a1.fb("ButtonBorder");
        b instanceof Bf && (b.figure = "Rectangle", b.strokeWidth = 0, b.spot1 = new O(0, 0, 2, 3), b.spot2 = new O(1, 1, -2, -2));
        return a1;
    });
    $l("PanelExpanderButton", function(a1) {
        var b = am(a1, "COLLAPSIBLE"), c = Vl("Button", {
            _buttonExpandedFigure: "M0 0 M0 6 L4 2 8 6 M8 8",
            _buttonCollapsedFigure: "M0 0 M0 2 L4 6 8 2 M8 8",
            _buttonFillNormal: "rgba(0, 0, 0, 0)",
            _buttonStrokeNormal: null,
            _buttonFillOver: "rgba(0, 0, 0, .2)",
            _buttonStrokeOver: null,
            _buttonFillPressed: "rgba(0, 0, 0, .4)",
            _buttonStrokePressed: null
        }, Vl(Bf, {
            name: "ButtonIcon",
            strokeWidth: 2
        }, new Gi("geometryString", "visible", function(a1) {
            return a1 ? c._buttonExpandedFigure : c._buttonCollapsedFigure;
        }).bp(b)));
        a1 = c.fb("ButtonBorder");
        a1 instanceof Bf && (a1.stroke = null, a1.fill = "rgba(0, 0, 0, 0)");
        c.click = function(a1, c) {
            var d = c.diagram;
            if (null !== d && !d.isReadOnly) {
                var e = c.ih();
                null === e && (e = c.part);
                null !== e && (c = e.fb(b), null !== c && (a1.handled = !0, d.Ea("Collapse/Expand Panel"), c.visible = !c.visible, d.eb("Collapse/Expand Panel")));
            }
        };
        return c;
    });
    $l("CheckBoxButton", function(a1) {
        var b = am(a1);
        a1 = Vl("Button", {
            desiredSize: new L(14, 14)
        }, Vl(Bf, {
            name: "ButtonIcon",
            geometryString: "M0 0 M0 8.85 L4.9 13.75 16.2 2.45 M16.2 16.2",
            strokeWidth: 2,
            stretch: nd,
            geometryStretch: mg,
            visible: !1
        }, "" !== b ? new Gi("visible", b).Kx() : []));
        a1.click = function(a1, d) {
            if (d instanceof W) {
                var c = a1.diagram;
                if (!(null === c || c.isReadOnly || "" !== b && c.model.isReadOnly)) {
                    a1.handled = !0;
                    var f = d.fb("ButtonIcon");
                    c.Ea("checkbox");
                    f.visible = !f.visible;
                    "function" === typeof d._doClick && d._doClick(a1, d);
                    c.eb("checkbox");
                }
            }
        };
        return a1;
    });
    $l("CheckBox", function(a1) {
        a1 = am(a1);
        a1 = Vl("CheckBoxButton", a1, {
            name: "Button",
            isActionable: !1,
            margin: new dc(0, 1, 0, 0)
        });
        var b = Vl(W, "Horizontal", a1, {
            isActionable: !0,
            cursor: a1.cursor,
            margin: new dc(1),
            _buttonFillNormal: a1._buttonFillNormal,
            _buttonStrokeNormal: a1._buttonStrokeNormal,
            _buttonFillOver: a1._buttonFillOver,
            _buttonStrokeOver: a1._buttonStrokeOver,
            _buttonFillPressed: a1._buttonFillPressed,
            _buttonStrokePressed: a1._buttonStrokePressed,
            _buttonFillDisabled: a1._buttonFillDisabled,
            mouseEnter: a1.mouseEnter,
            mouseLeave: a1.mouseLeave,
            actionDown: a1.actionDown,
            actionUp: a1.actionUp,
            actionCancel: a1.actionCancel,
            actionMove: a1.actionMove,
            click: a1.click,
            _buttonClick: a1.click
        });
        a1.mouseEnter = null;
        a1.mouseLeave = null;
        a1.actionDown = null;
        a1.actionUp = null;
        a1.actionCancel = null;
        a1.actionMove = null;
        a1.click = null;
        return b;
    });
    Y.None = kg = new E(Y, "None", 0);
    Y.Default = Yk = new E(Y, "Default", 0);
    Y.Vertical = Xk = new E(Y, "Vertical", 4);
    Y.Horizontal = Wk = new E(Y, "Horizontal", 5);
    Y.Fill = nd = new E(Y, "Fill", 3);
    Y.Uniform = mg = new E(Y, "Uniform", 1);
    Y.UniformToFill = Zk = new E(Y, "UniformToFill", 2);
    Y.FlipVertical = $k = new E(Y, "FlipVertical", 1);
    Y.FlipHorizontal = al = new E(Y, "FlipHorizontal", 2);
    Y.FlipBoth = bl = new E(Y, "FlipBoth", 3);
    Y.make = Vl;
    Y.getBuilders = function() {
        var a1 = new ob, b;
        for(b in Wl)if (b !== b.toLowerCase()) {
            var c = Wl.I(b);
            "function" === typeof c && a1.add(b, c);
        }
        a1.freeze();
        return a1;
    };
    Y.defineBuilder = $l;
    Y.build = function(a1, b, c) {
        for(var d = [], e = 2; e < arguments.length; ++e)d[e - 2] = arguments[e];
        e = Wl.I(a1);
        if ("function" === typeof e && (d = e([
            a1
        ].concat(d)), d instanceof Y)) return b && d.set(b), d;
        C('GraphObject.build invoked object builder "' + a1 + '", but it did not return an Object');
    };
    Y.takeBuilderArgument = am;
    function dl() {
        this.oc = !1;
        this.xa = "";
        this.yp = -1;
        this.nb = this.vm = this.te = null;
        this.j = "";
        this.hb = this.Di = this.Ib = this.Ch = this.$h = this.F = this.Ha = this.ia = this.V = this.Lh = this.Xd = this.Of = this.Nh = this.Oh = this.Qh = this.Ph = this.Mh = this.Bh = this.Fh = this.zh = null;
        this.u = Cb;
        this.o = Kb;
        this.hg = Yk;
        this.ob = this.Bi = 1;
        this.Pf = kg;
        this.Pc = this.Ci = this.gd = null;
        this.Oc = "category";
    }
    dl.prototype.copy = function() {
        var a1 = new dl;
        a1.xa = this.xa;
        a1.yp = this.yp;
        a1.te = this.te;
        a1.nb = this.nb;
        a1.j = this.j;
        a1.zh = this.zh;
        a1.Fh = this.Fh;
        a1.Bh = this.Bh;
        a1.Mh = this.Mh;
        a1.Ph = this.Ph;
        a1.Qh = this.Qh;
        a1.Oh = this.Oh;
        a1.Nh = this.Nh;
        a1.Of = this.Of;
        a1.Xd = this.Xd;
        a1.Lh = this.Lh;
        a1.V = this.V;
        a1.ia = this.ia;
        a1.Ha = this.Ha;
        a1.F = this.F;
        a1.$h = this.$h;
        a1.Ch = this.Ch;
        a1.Ib = this.Ib;
        a1.Di = this.Di;
        a1.hb = this.hb;
        a1.u = this.u.J();
        a1.o = this.o.J();
        a1.hg = this.hg;
        a1.Bi = this.Bi;
        a1.ob = this.ob;
        a1.Pf = this.Pf;
        a1.gd = this.gd;
        a1.Ci = this.Ci;
        a1.Pc = this.Pc;
        a1.Oc = this.Oc;
        return a1;
    };
    function bm() {
        this.u = -Infinity;
        this.o = 0;
        this.F = pb;
        this.qr = Zf;
        this.j = this.V = "None";
    }
    bm.prototype.copy = function() {
        var a1 = new bm;
        a1.u = this.u;
        a1.o = this.o;
        a1.F = this.F.J();
        a1.qr = this.qr;
        a1.V = this.V;
        a1.j = this.j;
        return a1;
    };
    bm.className = "LinkElementSettings";
    function el() {
        this.yj = this.Xi = Sc;
        this.xj = this.Wi = this.wj = this.Vi = NaN;
        this.Sr = this.gq = null;
        this.Tr = this.hq = Infinity;
    }
    el.prototype.copy = function() {
        var a1 = new el;
        a1.Xi = this.Xi.J();
        a1.yj = this.yj.J();
        a1.Vi = this.Vi;
        a1.wj = this.wj;
        a1.Wi = this.Wi;
        a1.xj = this.xj;
        a1.gq = this.gq;
        a1.Sr = this.Sr;
        a1.hq = this.hq;
        a1.Tr = this.Tr;
        return a1;
    };
    el.className = "LinkSettings";
    function fm() {
        this.ha = [
            1,
            0,
            0,
            1,
            0,
            0
        ];
    }
    fm.prototype.copy = function() {
        var a1 = new fm;
        a1.ha[0] = this.ha[0];
        a1.ha[1] = this.ha[1];
        a1.ha[2] = this.ha[2];
        a1.ha[3] = this.ha[3];
        a1.ha[4] = this.ha[4];
        a1.ha[5] = this.ha[5];
        return a1;
    };
    fm.prototype.translate = function(a1, b) {
        this.ha[4] += this.ha[0] * a1 + this.ha[2] * b;
        this.ha[5] += this.ha[1] * a1 + this.ha[3] * b;
    };
    fm.prototype.scale = function(a1, b) {
        this.ha[0] *= a1;
        this.ha[1] *= a1;
        this.ha[2] *= b;
        this.ha[3] *= b;
    };
    fm.prototype.rotate = function(a1, b, c) {
        360 <= a1 ? a1 -= 360 : 0 > a1 && (a1 += 360);
        if (0 !== a1) {
            this.translate(b, c);
            if (90 === a1) {
                a1 = 0;
                var d = 1;
            } else 180 === a1 ? (a1 = -1, d = 0) : 270 === a1 ? (a1 = 0, d = -1) : (d = a1 * Math.PI / 180, a1 = Math.cos(d), d = Math.sin(d));
            var e = this.ha[1] * a1 + this.ha[3] * d, f = this.ha[0] * -d + this.ha[2] * a1, g = this.ha[1] * -d + this.ha[3] * a1;
            this.ha[0] = this.ha[0] * a1 + this.ha[2] * d;
            this.ha[1] = e;
            this.ha[2] = f;
            this.ha[3] = g;
            this.translate(-b, -c);
        }
    };
    fm.className = "STransform";
    function gm(a1) {
        this.type = a1;
        this.r2 = this.y2 = this.x2 = this.r1 = this.y1 = this.x1 = 0;
        this.gx = [];
        this.pattern = null;
    }
    gm.prototype.addColorStop = function(a1, b) {
        this.gx.push({
            offset: a1,
            color: b
        });
    };
    gm.className = "SGradient";
    function Fj(a1, b, c) {
        this.ownerDocument = a1 = void 0 === b ? x.document : b;
        this.cA = "http://www.w3.org/2000/svg";
        void 0 !== a1 && (this.Oa = this.Ud("svg", {
            width: "1px",
            height: "1px",
            viewBox: "0 0 1 1"
        }), this.style.display = "block", this.style.letterSpacing = "normal", this.style.wordSpacing = "normal", this.Oa.setAttributeNS("http://www.w3.org/2000/xmlns/", "xmlns", "http://www.w3.org/2000/svg"), this.Oa.setAttributeNS("http://www.w3.org/2000/xmlns/", "xmlns:xlink", "http://www.w3.org/1999/xlink"));
        this.gs = null;
        this.context = new ii(this, c);
    }
    Fj.prototype.resize = function(a1, b, c, d) {
        return this.width !== a1 || this.height !== b ? (this.width = a1, this.height = b, this.style.width = c + "px", this.style.height = d + "px", this.Oa.setAttributeNS(null, "width", c + "px"), this.Oa.setAttributeNS(null, "height", d + "px"), this.Oa.setAttributeNS(null, "viewBox", "0 0 " + c + " " + d), this.context.ww.firstElementChild.setAttributeNS(null, "width", c + "px"), this.context.ww.firstElementChild.setAttributeNS(null, "height", d + "px"), !0) : !1;
    };
    Fj.prototype.Ud = function(a1, b, c) {
        a1 = this.ownerDocument.createElementNS(this.cA, a1);
        if (za(b)) for(var d in b)a1.setAttributeNS("href" === d ? "http://www.w3.org/1999/xlink" : "", d, b[d]);
        void 0 !== c && (a1.textContent = c);
        return a1;
    };
    Fj.prototype.getBoundingClientRect = function() {
        return this.Oa.getBoundingClientRect();
    };
    Fj.prototype.focus = function() {
        this.Oa.focus();
    };
    Fj.prototype.mx = function() {
        this.ownerDocument = null;
    };
    ma.Object.defineProperties(Fj.prototype, {
        width: {
            get: function() {
                return this.Oa.width.baseVal.value;
            },
            set: function(a1) {
                this.Oa.setAttribute("width", a1 + "px");
            }
        },
        height: {
            get: function() {
                return this.Oa.height.baseVal.value;
            },
            set: function(a1) {
                this.Oa.setAttribute("height", a1 + "px");
            }
        },
        style: {
            get: function() {
                return this.Oa.style;
            }
        }
    });
    Fj.className = "SVGSurface";
    function ii(a1, b) {
        this.Gv = a1;
        this.svg = a1.Oa;
        this.stack = [];
        this.nh = [];
        this.fillStyle = "#000000";
        this.font = "10px sans-serif";
        this.globalAlpha = 1;
        this.lineCap = "butt";
        this.lineDashOffset = 0;
        this.lineJoin = "miter";
        this.lineWidth = 1;
        this.miterLimit = 10;
        this.shadowBlur = 0;
        this.shadowColor = "rgba(0, 0, 0, 0)";
        this.shadowOffsetY = this.shadowOffsetX = 0;
        this.Hl = !1;
        this.strokeStyle = "#000000";
        this.textAlign = "start";
        this.clipInsteadOfFill = !1;
        this.Vg = this.Ar = this.zr = 0;
        this.yd = this.ad = null;
        this.path = [];
        this.Xl = {};
        this.Bt = !1;
        this.Yg = null;
        this.uj = 0;
        this.rb = new fm;
        this.j = Dl(this);
        this.Mj = Dl(this, "gojs-diagram");
        this.Gl = this.ti = null;
        var c = jb++, d = this.Ud("clipPath", {
            id: "mainClip" + c
        });
        d.appendChild(this.Ud("rect", {
            x: 0,
            y: 0,
            width: a1.width,
            height: a1.height
        }));
        this.ww = d;
        this.svg.appendChild(this.j);
        this.j.appendChild(this.Mj);
        this.svg.appendChild(d);
        this.j.setAttributeNS(null, "clip-path", "url(#mainClip" + c + ")");
        this.eA = {};
        this.isTemporary = !!b;
        this.filter = "";
        this.ak = null;
    }
    function yj(a1, b, c, d, e, f, g) {
        void 0 === a1.Mj ? Bl(a1, b, c, d, e, f, g) : a1.Mj.setAttribute("transform", "matrix(" + b + ", " + c + ", " + d + ", " + e + ", " + f + ", " + g + ")");
    }
    t = ii.prototype;
    t.arc = function(a1, b, c, d, e, f, g, h) {
        var k = 2 * Math.PI, l = k - 1E-6, m = c * Math.cos(d), n = c * Math.sin(d), p = a1 + m, q = b + n, r = f ? 0 : 1;
        d = f ? d - e : e - d;
        (1E-6 < Math.abs(g - p) || 1E-6 < Math.abs(h - q)) && this.path.push([
            "L",
            p,
            +q
        ]);
        0 > d && (d = d % k + k);
        d > l ? (this.path.push([
            "A",
            c,
            c,
            0,
            1,
            r,
            a1 - m,
            b - n
        ]), this.path.push([
            "A",
            c,
            c,
            0,
            1,
            r,
            p,
            q
        ])) : 1E-6 < d && this.path.push([
            "A",
            c,
            c,
            0,
            +(d >= Math.PI),
            r,
            a1 + c * Math.cos(e),
            b + c * Math.sin(e)
        ]);
    };
    t.beginPath = function() {
        this.path = [];
        this.Xl = {
            stroke: "none",
            fill: "none"
        };
    };
    t.Se = function(a1) {
        this.addPath(this.path, this.rb, a1 || 0);
    };
    t.bezierCurveTo = function(a1, b, c, d, e, f) {
        this.path.push([
            "C",
            a1,
            b,
            c,
            d,
            e,
            f
        ]);
    };
    t.clearRect = function() {};
    t.clip = function() {
        this.Xl.clipPath = !0;
    };
    t.closePath = function() {
        this.path.push([
            "z"
        ]);
    };
    t.createLinearGradient = function(a1, b, c, d) {
        var e = new gm("linear");
        e.x1 = a1;
        e.y1 = b;
        e.x2 = c;
        e.y2 = d;
        return e;
    };
    t.createPattern = function(a1) {
        var b = "";
        a1 instanceof HTMLCanvasElement && (b = a1.toDataURL());
        a1 instanceof HTMLImageElement && (b = a1.getAttribute("src"));
        var c = this.eA;
        if (c[b]) return "url(#" + c[b] + ")";
        var d = "PATTERN" + jb++, e = {
            x: 0,
            y: 0,
            width: a1.width,
            height: a1.height,
            href: b
        };
        a1 = this.Ud("pattern", {
            width: a1.width,
            height: a1.height,
            id: d,
            patternUnits: "userSpaceOnUse"
        });
        a1.appendChild(this.Ud(Zi, e));
        this.svg.appendChild(a1);
        c[b] = d;
        return "url(#" + d + ")";
    };
    t.createRadialGradient = function(a1, b, c, d, e, f) {
        var g = new gm("radial");
        g.x1 = a1;
        g.y1 = b;
        g.r1 = c;
        g.x2 = d;
        g.y2 = e;
        g.r2 = f;
        return g;
    };
    function El(a1, b, c, d, e, f, g, h, k) {
        d = h / d;
        e = k / e;
        0 === f && 0 === g || a1.rb.translate(f, g);
        1 === d && 1 === e || a1.rb.scale(d, e);
        0 === b && 0 === c || a1.rb.translate(-b, -c);
    }
    t.drawImage = function(a1, b, c, d, e, f, g, h, k) {
        var l = "";
        a1 instanceof HTMLCanvasElement && (l = a1.toDataURL());
        a1 instanceof HTMLImageElement && (l = a1.getAttribute("src"));
        var m = a1 instanceof HTMLImageElement ? a1.naturalWidth : a1.width;
        a1 = a1 instanceof HTMLImageElement ? a1.naturalHeight : a1.height;
        void 0 === d && (f = b, g = c, h = d = m, k = e = a1);
        d = d || 0;
        e = e || 0;
        h = h || 0;
        k = k || 0;
        El(this, b, c, d, e, f || 0, g || 0, h, k);
        f = {
            x: 0,
            y: 0,
            width: m || d,
            height: a1 || e,
            href: l
        };
        K.$(d, h) && K.$(e, k) ? -1 === l.toLowerCase().indexOf(".svg") && -1 === l.toLowerCase().indexOf("data:image/svg") && (f.preserveAspectRatio = "xMidYMid slice") : f.preserveAspectRatio = "none";
        if (0 !== b || 0 !== c || d !== m || e !== a1) d += b, e += c, f["clip-path"] = "path('M " + b + "," + c + " L " + d + " " + c + " L " + d + " " + e + " L " + b + " " + e + " z')";
        hm(this, Zi, f, this.rb);
        this.addElement(Zi, f);
    };
    t.fill = function(a1) {
        a1 && (this.Xl["fill-rule"] = "evenodd");
        im(this, this.Xl);
    };
    t.ng = function(a1, b) {
        this.clipInsteadOfFill ? this.clip() : this.fill(b);
    };
    t.fillRect = function(a1, b, c, d) {
        a1 = [
            a1,
            b,
            c,
            d
        ];
        a1 = {
            x: a1[0],
            y: a1[1],
            width: a1[2],
            height: a1[3]
        };
        hm(this, "fill", a1, this.rb);
        this.addElement("rect", a1);
    };
    t.ox = function(a1, b, c, d) {
        a1 = {
            x: a1,
            y: b,
            width: c,
            height: d
        };
        hm(this, "fill", a1, this.rb);
        im(this, a1);
        this.svg.prepend(this.Ud("rect", a1));
    };
    t.fillText = function(a1, b, c) {
        a1 = [
            a1,
            b,
            c
        ];
        b = this.textAlign;
        "left" === b ? b = "start" : "right" === b ? b = "end" : "center" === b && (b = "middle");
        b = {
            x: a1[1],
            y: a1[2],
            style: "font: " + this.font,
            "text-anchor": b
        };
        hm(this, "fill", b, this.rb);
        this.addElement("text", b, a1[0]);
    };
    t.lineTo = function(a1, b) {
        this.path.push([
            "L",
            a1,
            b
        ]);
    };
    t.moveTo = function(a1, b) {
        this.path.push([
            "M",
            a1,
            b
        ]);
    };
    t.quadraticCurveTo = function(a1, b, c, d) {
        this.path.push([
            "Q",
            a1,
            b,
            c,
            d
        ]);
    };
    t.rect = function(a1, b, c, d) {
        this.path.push([
            "M",
            a1,
            b
        ], [
            "L",
            a1 + c,
            b
        ], [
            "L",
            a1 + c,
            b + d
        ], [
            "L",
            a1,
            b + d
        ], [
            "z"
        ]);
    };
    t.restore = function() {
        this.rb = this.stack.pop();
        this.path = this.stack.pop();
        var a1 = this.stack.pop();
        this.fillStyle = a1.fillStyle;
        this.font = a1.font;
        this.globalAlpha = a1.globalAlpha;
        this.lineCap = a1.lineCap;
        this.lineDashOffset = a1.lineDashOffset;
        this.lineJoin = a1.lineJoin;
        this.lineWidth = a1.lineWidth;
        this.miterLimit = a1.miterLimit;
        this.shadowBlur = a1.shadowBlur;
        this.shadowColor = a1.shadowColor;
        this.shadowOffsetX = a1.shadowOffsetX;
        this.shadowOffsetY = a1.shadowOffsetY;
        this.strokeStyle = a1.strokeStyle;
        this.textAlign = a1.textAlign;
        this.ak = a1.ak;
    };
    t.save = function() {
        this.stack.push({
            fillStyle: this.fillStyle,
            font: this.font,
            globalAlpha: this.globalAlpha,
            lineCap: this.lineCap,
            lineDashOffset: this.lineDashOffset,
            lineJoin: this.lineJoin,
            lineWidth: this.lineWidth,
            miterLimit: this.miterLimit,
            shadowBlur: this.shadowBlur,
            shadowColor: this.shadowColor,
            shadowOffsetX: this.shadowOffsetX,
            shadowOffsetY: this.shadowOffsetY,
            strokeStyle: this.strokeStyle,
            textAlign: this.textAlign,
            ak: this.ak
        });
        for(var a1 = [], b = 0; b < this.path.length; b++)a1.push(this.path[b]);
        this.stack.push(a1);
        this.stack.push(this.rb.copy());
    };
    t.setTransform = function(a1, b, c, d, e, f) {
        1 === a1 && 0 === b && 0 === c && 1 === d && 0 === e && 0 === f || Bl(this, a1, b, c, d, e, f);
    };
    function Fl(a1) {
        a1 = a1.rb.ha;
        return "matrix(" + a1[0] + ", " + a1[1] + ", " + a1[2] + ", " + a1[3] + ", " + a1[4] + ", " + a1[5] + ")";
    }
    t.scale = function(a1, b) {
        this.rb.scale(a1, b);
    };
    t.translate = function(a1, b) {
        this.rb.translate(a1, b);
    };
    t.transform = function() {};
    t.yc = function() {};
    t.stroke = function() {
        jm(this, this.Xl);
    };
    t.ik = function() {
        this.clipInsteadOfFill || this.stroke();
    };
    t.Ud = function(a1, b, c) {
        return this.Gv.Ud(a1, b, c);
    };
    t.addElement = function(a1, b, c) {
        a1 = this.Ud(a1, b, c);
        null !== this.yd ? this.yd.appendChild(a1) : this.yd = a1;
        return this.ad = a1;
    };
    function hm(a1, b, c, d) {
        "fill" === b ? im(a1, c) : "stroke" === b && jm(a1, c);
        null !== d && (a1 = d.ha, c.transform = "matrix(" + a1[0] + ", " + a1[1] + ", " + a1[2] + ", " + a1[3] + ", " + a1[4] + ", " + a1[5] + ")");
    }
    function im(a1, b) {
        a1.fillStyle instanceof gm ? b.fill = km(a1, a1.fillStyle, !0) : /^rgba\(/.test(a1.fillStyle) ? (a1 = /^\s*rgba\s*\(([^,\s]+)\s*,\s*([^,\s]+)\s*,\s*([^,\s]+)\s*,\s*([^,\s]+)\)\s*$/i.exec(a1.fillStyle), b.fill = "rgb(" + a1[1] + "," + a1[2] + "," + a1[3] + ")", b["fill-opacity"] = a1[4]) : b.fill = a1.fillStyle;
    }
    function lm(a1, b, c) {
        c = c ? "fill" : "stroke";
        a1.fillStyle instanceof gm ? b.setAttributeNS(null, "fill", km(a1, a1.fillStyle, !0)) : /^rgba\(/.test(a1.fillStyle) ? (a1 = /^\s*rgba\s*\(([^,\s]+)\s*,\s*([^,\s]+)\s*,\s*([^,\s]+)\s*,\s*([^,\s]+)\)\s*$/i.exec(a1.fillStyle), b.setAttributeNS(null, c, "rgb(" + a1[1] + "," + a1[2] + "," + a1[3] + ")"), b.setAttributeNS(null, c + "-opacity", a1[4])) : b.setAttributeNS(null, c, a1.fillStyle);
    }
    function jm(a1, b) {
        if (a1.strokeStyle instanceof gm) b.stroke = km(a1, a1.strokeStyle, !1);
        else if (/^rgba\(/.test(a1.strokeStyle)) {
            var c = /^\s*rgba\s*\(([^,\s]+)\s*,\s*([^,\s]+)\s*,\s*([^,\s]+)\s*,\s*([^,\s]+)\)\s*$/i.exec(a1.strokeStyle);
            b.stroke = "rgb(" + c[1] + "," + c[2] + "," + c[3] + ")";
            b["stroke-opacity"] = c[4];
        } else b.stroke = a1.strokeStyle;
        b["stroke-width"] = a1.lineWidth;
        b["stroke-linecap"] = a1.lineCap;
        b["stroke-linejoin"] = a1.lineJoin;
        b["stroke-miterlimit"] = a1.miterLimit;
        a1.Bt && (b["stroke-dasharray"] = a1.Yg.toString(), b["stroke-dashoffset"] = a1.uj);
    }
    function km(a1, b, c) {
        var d = "";
        d = null !== a1.Gl ? a1.Gl.getAttribute(c ? "fill" : "stroke") : null;
        null !== d && -1 !== d.indexOf("GRAD") ? (d = d.split("#")[1].slice(0, -1), c = a1.svg.getElementById(d), null !== c && c.remove()) : d = "GRAD" + jb++;
        if ("linear" === b.type) c = a1.Ud("linearGradient", {
            x1: b.x1,
            x2: b.x2,
            y1: b.y1,
            y2: b.y2,
            id: d,
            gradientUnits: "userSpaceOnUse"
        });
        else if ("radial" === b.type) c = a1.Ud("radialGradient", {
            x1: b.x1,
            x2: b.x2,
            y1: b.y1,
            y2: b.y2,
            r1: b.r1,
            r2: b.r2,
            id: d
        });
        else throw Error("invalid gradient");
        var e = b.gx;
        b = e.length;
        for(var f = [], g = 0; g < b; g++){
            var h = e[g], k = h.color;
            h = {
                offset: h.offset,
                "stop-color": k
            };
            /^rgba\(/.test(k) && (k = /^\s*rgba\s*\(([^,\s]+)\s*,\s*([^,\s]+)\s*,\s*([^,\s]+)\s*,\s*([^,\s]+)\)\s*$/i.exec(k), h["stop-color"] = "rgb(" + k[1] + "," + k[2] + "," + k[3] + ")", h["stop-opacity"] = k[4]);
            f.push(h);
        }
        f.sort(function(a1, b) {
            return a1.offset > b.offset ? 1 : -1;
        });
        for(e = 0; e < b; e++)c.appendChild(a1.Ud("stop", f[e]));
        a1.svg.appendChild(c);
        return "url(#" + d + ")";
    }
    t.addPath = function(a1, b, c) {
        var d = [];
        for(var e = 0; e < a1.length; e++){
            var f = Ba(a1[e]), g = [
                f.shift()
            ];
            if ("A" === g[0]) g.push(f.shift() + "," + f.shift(), f.shift(), f.shift() + "," + f.shift(), f.shift() + "," + f.shift());
            else for(; f.length;)g.push(f.shift() + "," + f.shift());
            d.push(g.join(" "));
        }
        d = d.join(" ");
        a1 = this.Xl;
        if (a1.clipPath) 0 < this.nh.length && this.nh[this.nh.length - 1].setAttributeNS(null, "clip-path", 'path("' + d + '")');
        else if (a1.d = d, hm(this, "", a1, b), null !== this.Gl) {
            if (b = this.Gl, "g" !== b.nodeName) for(var h in a1)"transform" !== h && b.setAttributeNS(null, h, a1[h]);
            else {
                h = b.getElementsByTagName("path");
                for(var k in a1)"transform" !== k && h[c].setAttributeNS(null, k, a1[k]);
            }
        } else this.addElement("path", a1);
    };
    function Bl(a1, b, c, d, e, f, g) {
        var h = new fm;
        h.ha = [
            b,
            c,
            d,
            e,
            f,
            g
        ];
        b = {};
        hm(a1, "g", b, h);
        h = a1.addElement("g", b);
        a1.nh.push(h);
    }
    function Dl(a1, b) {
        var c = {};
        b && (c["class"] = b);
        b = a1.addElement("g", c);
        a1.nh.push(b);
        return b;
    }
    t.Ev = function(a1, b, c) {
        this.zr = a1;
        this.Ar = b;
        this.Vg = c;
    };
    function ul(a1) {
        a1.Hl = !1;
        a1.shadowOffsetX = 0;
        a1.shadowOffsetY = 0;
        a1.shadowBlur = 0;
    }
    function tl(a1) {
        a1.Hl = !0;
        a1.shadowOffsetX = a1.zr;
        a1.shadowOffsetY = a1.Ar;
        a1.shadowBlur = a1.Vg;
    }
    t.hs = function(a1, b) {
        this.Bt = !0;
        this.Yg = a1;
        this.uj = b;
    };
    t.es = function() {
        this.Bt = !1;
    };
    t.Vc = function() {};
    t.Wx = function() {};
    ii.prototype.rotate = function(a1) {
        this.rb.rotate(57.2958 * a1, 0, 0);
    };
    ii.prototype.getImageData = function() {
        return null;
    };
    ii.prototype.measureText = function() {
        return null;
    };
    function Gl(a1, b) {
        b = b.getAttribute("fill");
        null !== b && (b = b.split("#"), 1 !== b.length && (b = a1.svg.getElementById(b[1].slice(0, -1)), null !== b && 1 === a1.svg.innerHTML.match(new RegExp(b.id, "g")).length && b.remove()));
    }
    ii.prototype.Gs = function(a1) {
        null !== a1.svg && a1.svg.parentNode === this.Mj && a1.svg.remove();
    };
    ii.className = "SVGContext";
    Q.prototype.Bs = function(a1) {
        this.pj.contains("SVG") || this.$r("SVG", new Fj(this, x.document));
        var b = new Fj(this, x.document, !0);
        void 0 === a1 && (a1 = new Ta);
        var c = this;
        return Ek(this, function(a1, e) {
            a1 = Fk(c, a1, "SVG", b);
            a1 = null !== a1 ? a1.svg : null;
            return "function" === typeof e ? (e(a1), null) : a1;
        }, a1);
    };
    Q.prototype.makeSvg = Q.prototype.Bs;
    Q.prototype.av = function(a1) {
        return this.Bs(a1);
    };
    Q.prototype.makeSVG = Q.prototype.av;
    function Pi(a1, b, c, d) {
        this.ownerDocument = b = void 0 === b ? x.document : b;
        this.gs = null;
        b = b.createElement("canvas");
        b.tabIndex = 0;
        this.Oa = b;
        this.context = new Il(b, c, d);
        b.H = a1;
    }
    Pi.prototype.resize = function(a1, b, c, d) {
        return this.width !== a1 || this.height !== b ? (this.width = a1, this.height = b, this.style.width = c + "px", this.style.height = d + "px", !0) : !1;
    };
    Pi.prototype.toDataURL = function(a1, b) {
        return this.Oa.toDataURL(a1, b);
    };
    Pi.prototype.getBoundingClientRect = function() {
        return this.Oa.getBoundingClientRect();
    };
    Pi.prototype.focus = function() {
        this.Oa.focus();
    };
    Pi.prototype.mx = function() {
        this.ownerDocument = this.Oa.H = null;
    };
    ma.Object.defineProperties(Pi.prototype, {
        width: {
            get: function() {
                return this.Oa.width;
            },
            set: function(a1) {
                this.Oa.width = a1;
            }
        },
        height: {
            get: function() {
                return this.Oa.height;
            },
            set: function(a1) {
                this.Oa.height = a1;
            }
        },
        style: {
            get: function() {
                return this.Oa.style;
            }
        }
    });
    Pi.className = "CanvasSurface";
    function Il(a1, b, c) {
        this.Z = a1.getContext ? a1.getContext("2d", b) : null;
        null === this.Z && C("Browser does not support HTML Canvas Element");
        this.bt = this.dt = this.ct = "";
        this.Gm = !1;
        this.Vg = this.Ar = this.zr = 0;
        this.Hl = !1;
        this.Dl = new ld;
        this.isTemporary = !!c;
    }
    t = Il.prototype;
    t.Wx = function(a1) {
        this.Z.imageSmoothingEnabled = a1;
    };
    t.arc = function(a1, b, c, d, e, f) {
        this.Z.arc(a1, b, c, d, e, f);
    };
    t.beginPath = function() {
        this.Z.beginPath();
    };
    t.Se = function() {};
    t.bezierCurveTo = function(a1, b, c, d, e, f) {
        this.Z.bezierCurveTo(a1, b, c, d, e, f);
    };
    t.clearRect = function(a1, b, c, d) {
        this.yc();
        this.Z.clearRect(a1, b, c, d);
    };
    t.clip = function() {
        this.Z.clip();
    };
    t.closePath = function() {
        this.Z.closePath();
    };
    t.createLinearGradient = function(a1, b, c, d) {
        return this.Z.createLinearGradient(a1, b, c, d);
    };
    t.createPattern = function(a1, b) {
        return this.Z.createPattern(a1, b);
    };
    t.createRadialGradient = function(a1, b, c, d, e, f) {
        return this.Z.createRadialGradient(a1, b, c, d, e, f);
    };
    t.drawImage = function(a1, b, c, d, e, f, g, h, k) {
        void 0 === d ? this.Z.drawImage(a1, b, c) : this.Z.drawImage(a1, b, c, d, e, f, g, h, k);
    };
    t.fill = function(a1) {
        this.Z.fill(a1 ? "evenodd" : "nonzero");
    };
    t.fillRect = function(a1, b, c, d) {
        this.Z.fillRect(a1, b, c, d);
    };
    t.ox = function(a1, b, c, d) {
        this.Z.fillRect(a1, b, c, d);
    };
    t.fillText = function(a1, b, c) {
        this.Z.fillText(a1, b, c);
    };
    t.getImageData = function(a1, b, c, d) {
        return this.Z.getImageData(a1, b, c, d);
    };
    t.lineTo = function(a1, b) {
        this.Z.lineTo(a1, b);
    };
    t.measureText = function(a1) {
        return this.Z.measureText(a1);
    };
    t.moveTo = function(a1, b) {
        this.Z.moveTo(a1, b);
    };
    t.quadraticCurveTo = function(a1, b, c, d) {
        this.Z.quadraticCurveTo(a1, b, c, d);
    };
    t.rect = function(a1, b, c, d) {
        this.Z.rect(a1, b, c, d);
    };
    t.restore = function() {
        this.Z.restore();
    };
    t.save = function() {
        this.yc();
        this.Z.save();
    };
    Il.prototype.rotate = function(a1) {
        this.Dl.rotate(57.2958 * a1, 0, 0);
    };
    t = Il.prototype;
    t.setTransform = function(a1, b, c, d, e, f) {
        this.Dl.setTransform(a1, b, c, d, e, f);
    };
    t.scale = function(a1, b) {
        this.Dl.scale(a1, b);
    };
    t.translate = function(a1, b) {
        this.Dl.translate(a1, b);
    };
    t.stroke = function() {
        this.Z.stroke();
    };
    t.transform = function(a1, b, c, d, e, f) {
        if (1 !== a1 || 0 !== b || 0 !== c || 1 !== d || 0 !== e || 0 !== f) {
            var g = this.Dl, h = g.m11 * a1 + g.m21 * b;
            a1 = g.m12 * a1 + g.m22 * b;
            b = g.m11 * c + g.m21 * d;
            c = g.m12 * c + g.m22 * d;
            g.dx = g.m11 * e + g.m21 * f + g.dx;
            g.dy = g.m12 * e + g.m22 * f + g.dy;
            g.m11 = h;
            g.m12 = a1;
            g.m21 = b;
            g.m22 = c;
        }
    };
    t.yc = function() {
        var a1 = this.Dl;
        this.Z.setTransform(a1.m11, a1.m12, a1.m21, a1.m22, a1.dx, a1.dy);
    };
    t.ng = function(a1, b) {
        if (a1 instanceof ql && a1.type === rl) {
            var c = a1.xk;
            a1 = a1.et;
            a1 > c ? (this.scale(c / a1, 1), this.translate((a1 - c) / 2, 0)) : c > a1 && (this.scale(1, a1 / c), this.translate(0, (c - a1) / 2));
            this.Gm ? this.clip() : this.fill(b);
            a1 > c ? (this.translate(-(a1 - c) / 2, 0), this.scale(1 / (c / a1), 1)) : c > a1 && (this.translate(0, -(c - a1) / 2), this.scale(1, 1 / (a1 / c)));
        } else this.Gm ? this.clip() : this.fill(b);
    };
    t.ik = function() {
        this.Gm || this.stroke();
    };
    t.Ev = function(a1, b, c) {
        this.zr = a1;
        this.Ar = b;
        this.Vg = c;
    };
    t.hs = function(a1, b) {
        var c = this.Z;
        void 0 !== c.setLineDash && (c.setLineDash(a1), c.lineDashOffset = b);
    };
    t.es = function() {
        var a1 = this.Z;
        void 0 !== a1.setLineDash && (a1.setLineDash(mm), a1.lineDashOffset = 0);
    };
    t.Vc = function(a1) {
        a1 && (this.ct = "");
        this.bt = this.dt = "";
    };
    t.Gs = function() {};
    ma.Object.defineProperties(Il.prototype, {
        fillStyle: {
            get: function() {
                return this.Z.fillStyle;
            },
            set: function(a1) {
                this.bt !== a1 && (this.bt = this.Z.fillStyle = a1);
            }
        },
        font: {
            get: function() {
                return this.Z.font;
            },
            set: function(a1) {
                this.ct !== a1 && (this.ct = this.Z.font = a1);
            }
        },
        globalAlpha: {
            get: function() {
                return this.Z.globalAlpha;
            },
            set: function(a1) {
                this.Z.globalAlpha = a1;
            }
        },
        lineCap: {
            get: function() {
                return this.Z.lineCap;
            },
            set: function(a1) {
                this.Z.lineCap = a1;
            }
        },
        lineDashOffset: {
            get: function() {
                return this.Z.lineDashOffset;
            },
            set: function(a1) {
                this.Z.lineDashOffset = a1;
            }
        },
        lineJoin: {
            get: function() {
                return this.Z.lineJoin;
            },
            set: function(a1) {
                this.Z.lineJoin = a1;
            }
        },
        lineWidth: {
            get: function() {
                return this.Z.lineWidth;
            },
            set: function(a1) {
                this.Z.lineWidth = a1;
            }
        },
        miterLimit: {
            get: function() {
                return this.Z.miterLimit;
            },
            set: function(a1) {
                this.Z.miterLimit = a1;
            }
        },
        shadowBlur: {
            get: function() {
                return this.Z.shadowBlur;
            },
            set: function(a1) {
                this.Z.shadowBlur = a1;
            }
        },
        shadowColor: {
            get: function() {
                return this.Z.shadowColor;
            },
            set: function(a1) {
                this.Z.shadowColor = a1;
            }
        },
        shadowOffsetX: {
            get: function() {
                return this.Z.shadowOffsetX;
            },
            set: function(a1) {
                this.Z.shadowOffsetX = a1;
            }
        },
        shadowOffsetY: {
            get: function() {
                return this.Z.shadowOffsetY;
            },
            set: function(a1) {
                this.Z.shadowOffsetY = a1;
            }
        },
        strokeStyle: {
            get: function() {
                return this.Z.strokeStyle;
            },
            set: function(a1) {
                this.dt !== a1 && (this.dt = this.Z.strokeStyle = a1);
            }
        },
        textAlign: {
            get: function() {
                return this.Z.textAlign;
            },
            set: function(a1) {
                this.Z.textAlign = a1;
            }
        },
        imageSmoothingEnabled: {
            get: function() {
                return this.Z.imageSmoothingEnabled;
            },
            set: function(a1) {
                this.Z.imageSmoothingEnabled = a1;
            }
        },
        filter: {
            get: function() {
                return this.Z.filter;
            },
            set: function(a1) {
                this.Z.filter = "" === a1 ? "none" : a1;
            }
        },
        clipInsteadOfFill: {
            get: function() {
                return this.Gm;
            },
            set: function(a1) {
                this.Gm = a1;
            }
        }
    });
    var mm = Object.freeze([]);
    Il.className = "CanvasSurfaceContext";
    function nm() {
        this.F = this.o = this.u = this.j = 0;
    }
    nm.className = "ColorNumbers";
    function ql(a1, b) {
        om || (pm(), om = !0);
        Qa(this);
        this._isFrozen = !1;
        void 0 === a1 ? (this.na = Hl, this.wk = "black") : "string" === typeof a1 ? (this.na = Hl, this.wk = a1) : (this.na = a1, this.wk = "black");
        a1 = this.na;
        a1 === Kl ? (this.Qd = tc, this.Kk = Ac) : this.Kk = a1 === rl ? this.Qd = wc : this.Qd = rc;
        this.Fr = 0;
        this.Wp = NaN;
        this.xe = this.br = this.we = null;
        this.et = this.xk = 0;
        b && Object.assign(this, b);
    }
    ql.prototype.copy = function() {
        var a1 = new ql;
        a1.na = this.na;
        a1.wk = this.wk;
        a1.Qd = this.Qd.J();
        a1.Kk = this.Kk.J();
        a1.Fr = this.Fr;
        a1.Wp = this.Wp;
        null !== this.we && (a1.we = this.we.copy());
        a1.br = this.br;
        return a1;
    };
    t = ql.prototype;
    t.freeze = function() {
        this._isFrozen = !0;
        null !== this.we && this.we.freeze();
        return this;
    };
    t.ka = function() {
        Object.isFrozen(this) && C("cannot thaw constant: " + this);
        this._isFrozen = !1;
        null !== this.we && this.we.ka();
        return this;
    };
    t.qb = function(a1) {
        a1.classType === ql && (this.type = a1);
    };
    t.toString = function() {
        var a1 = "Brush(";
        if (this.type === Hl) a1 += this.color;
        else if (a1 = this.type === Kl ? a1 + "Linear " : this.type === rl ? a1 + "Radial " : this.type === Jl ? a1 + "Pattern " : a1 + "(unknown) ", a1 += this.start + " " + this.end, null !== this.colorStops) for(var b = this.colorStops.iterator; b.next();)a1 += " " + b.key + ":" + b.value;
        return a1 + ")";
    };
    t.addColorStop = function(a1, b) {
        this._isFrozen && va(this);
        ("number" !== typeof a1 || !isFinite(a1) || 1 < a1 || 0 > a1) && xa(a1, "0 <= loc <= 1", ql, "addColorStop:loc");
        null === this.we && (this.we = new ob);
        this.we.add(a1, b);
        this.na === Hl && (this.type = Kl);
        this.xe = null;
        return this;
    };
    t.Vz = function(a1, b) {
        this._isFrozen && va(this);
        a1 = void 0 === a1 || "number" !== typeof a1 ? .2 : a1;
        b = void 0 === b ? qm : b;
        if (this.type === Hl) Uh(this.color), this.color = rm(a1, b);
        else if ((this.type === Kl || this.type === rl) && null !== this.colorStops) for(var c = this.colorStops.iterator; c.next();)Uh(c.value), this.addColorStop(c.key, rm(a1, b));
        return this;
    };
    function sm(a1, b, c) {
        b = void 0 === b || "number" !== typeof b ? .2 : b;
        c = void 0 === c ? qm : c;
        Uh(a1);
        return rm(b, c);
    }
    t.Wy = function(a1, b) {
        this._isFrozen && va(this);
        a1 = void 0 === a1 || "number" !== typeof a1 ? .2 : a1;
        b = void 0 === b ? qm : b;
        if (this.type === Hl) Uh(this.color), this.color = rm(-a1, b);
        else if ((this.type === Kl || this.type === rl) && null !== this.colorStops) for(var c = this.colorStops.iterator; c.next();)Uh(c.value), this.addColorStop(c.key, rm(-a1, b));
        return this;
    };
    function tm(a1, b, c) {
        b = void 0 === b || "number" !== typeof b ? .2 : b;
        c = void 0 === c ? qm : c;
        Uh(a1);
        return rm(-b, c);
    }
    function um(a1, b, c) {
        Uh(a1);
        a1 = vm.j;
        var d = vm.u, e = vm.o, f = vm.F;
        Uh(b);
        void 0 === c && (c = .5);
        return "rgba(" + Math.round((vm.j - a1) * c + a1) + ", " + Math.round((vm.u - d) * c + d) + ", " + Math.round((vm.o - e) * c + e) + ", " + Math.round((vm.F - f) * c + f) + ")";
    }
    t.Gx = function() {
        if (this.type === Hl) return wm(this.color);
        if ((this.type === Kl || this.type === rl) && null !== this.colorStops) {
            var a1 = this.colorStops;
            if (this.type === rl) return wm(a1.first().value);
            if (null !== a1.get(.5)) return wm(a1.get(.5));
            if (2 === a1.count) return a1 = a1.Fa(), wm(um(a1[0].value, a1[1].value));
            for(var b = a1.iterator, c = -1, d = -1, e = 1, f = 1; b.next();){
                var g = b.key, h = Math.abs(.5 - b.key);
                e > f && h < e ? (c = g, e = h) : f >= e && h < f && (d = g, f = h);
            }
            c > d && (f = c, c = d, d = f, f = e);
            e = d - c;
            return wm(um(a1.get(c), a1.get(d), 1 - f / e));
        }
        return !1;
    };
    function wm(a1) {
        if (!a1) return !1;
        if (a1 instanceof ql) return a1.Gx();
        Uh(a1);
        return 128 > (299 * vm.j + 587 * vm.u + 114 * vm.o) / 1E3;
    }
    function rm(a1, b) {
        switch(b){
            case qm:
                b = 100 * xm(vm.j);
                var c = 100 * xm(vm.u), d = 100 * xm(vm.o);
                ym.j = .4124564 * b + .3575761 * c + .1804375 * d;
                ym.u = .2126729 * b + .7151522 * c + .072175 * d;
                ym.o = .0193339 * b + .119192 * c + .9503041 * d;
                ym.F = vm.F;
                b = zm(ym.j / Am[0]);
                c = zm(ym.u / Am[1]);
                d = zm(ym.o / Am[2]);
                Bm.j = 116 * c - 16;
                Bm.u = 500 * (b - c);
                Bm.o = 200 * (c - d);
                Bm.F = ym.F;
                Bm.j = Math.min(100, Math.max(0, Bm.j + 100 * a1));
                a1 = (Bm.j + 16) / 116;
                b = a1 - Bm.o / 200;
                ym.j = Am[0] * Cm(Bm.u / 500 + a1);
                ym.u = Am[1] * (Bm.j > Dm * Em ? Math.pow(a1, 3) : Bm.j / Dm);
                ym.o = Am[2] * Cm(b);
                ym.F = Bm.F;
                a1 = -0.969266 * ym.j + 1.8760108 * ym.u + .041556 * ym.o;
                b = .0556434 * ym.j + -0.2040259 * ym.u + 1.0572252 * ym.o;
                vm.j = 255 * Fm((3.2404542 * ym.j + -1.5371385 * ym.u + -0.4985314 * ym.o) / 100);
                vm.u = 255 * Fm(a1 / 100);
                vm.o = 255 * Fm(b / 100);
                vm.F = ym.F;
                vm.j = Math.round(vm.j);
                255 < vm.j ? vm.j = 255 : 0 > vm.j && (vm.j = 0);
                vm.u = Math.round(vm.u);
                255 < vm.u ? vm.u = 255 : 0 > vm.u && (vm.u = 0);
                vm.o = Math.round(vm.o);
                255 < vm.o ? vm.o = 255 : 0 > vm.o && (vm.o = 0);
                return "rgba(" + vm.j + ", " + vm.u + ", " + vm.o + ", " + vm.F + ")";
            case Gm:
                return Vh(), Wh.o = Math.min(100, Math.max(0, Wh.o + 100 * a1)), "hsla(" + Wh.j + ", " + Wh.u + "%, " + Wh.o + "%, " + Wh.F + ")";
            default:
                C("Unknown color space: " + b);
        }
    }
    function Uh(a1) {
        om || (pm(), om = !0);
        var b = Hm;
        if (null !== b) {
            b.clearRect(0, 0, 1, 1);
            b.fillStyle = "#000000";
            var c = b.fillStyle;
            b.fillStyle = a1;
            b.fillStyle !== c ? (b.fillRect(0, 0, 1, 1), a1 = b.getImageData(0, 0, 1, 1).data, vm.j = a1[0], vm.u = a1[1], vm.o = a1[2], vm.F = a1[3] / 255) : (b.fillStyle = "#FFFFFF", b.fillStyle = a1, vm.j = 0, vm.u = 0, vm.o = 0, vm.F = 1);
        }
    }
    function Vh() {
        var a1 = vm.j / 255, b = vm.u / 255, c = vm.o / 255, d = Math.max(a1, b, c), e = Math.min(a1, b, c), f = d - e;
        e = (d + e) / 2;
        if (0 === f) var g = a1 = 0;
        else {
            switch(d){
                case a1:
                    g = (b - c) / f % 6;
                    break;
                case b:
                    g = (c - a1) / f + 2;
                    break;
                case c:
                    g = (a1 - b) / f + 4;
            }
            g *= 60;
            0 > g && (g += 360);
            a1 = f / (1 - Math.abs(2 * e - 1));
        }
        Wh.j = Math.round(g);
        Wh.u = Math.round(100 * a1);
        Wh.o = Math.round(100 * e);
        Wh.F = vm.F;
    }
    function xm(a1) {
        a1 /= 255;
        return .04045 >= a1 ? a1 / 12.92 : Math.pow((a1 + .055) / 1.055, 2.4);
    }
    function Fm(a1) {
        return .0031308 >= a1 ? 12.92 * a1 : 1.055 * Math.pow(a1, 1 / 2.4) - .055;
    }
    function zm(a1) {
        return a1 > Em ? Math.pow(a1, 1 / 3) : (Dm * a1 + 16) / 116;
    }
    function Cm(a1) {
        var b = a1 * a1 * a1;
        return b > Em ? b : (116 * a1 - 16) / Dm;
    }
    function cm(a1, b) {
        "string" !== typeof a1 && (a1 instanceof ql || C("Value for " + b + " must be a color string or a Brush, not " + a1));
    }
    function pm() {
        Hm = Ng ? new Pi(null, void 0, {
            willReadFrequently: !0
        }).context : null;
    }
    ma.Object.defineProperties(ql.prototype, {
        type: {
            get: function() {
                return this.na;
            },
            set: function(a1) {
                this._isFrozen && va(this, a1);
                this.na = a1;
                this.start.Mc() && (a1 === Kl ? this.start = tc : a1 === rl && (this.start = wc));
                this.end.Mc() && (a1 === Kl ? this.end = Ac : a1 === rl && (this.end = wc));
                this.xe = null;
            }
        },
        color: {
            get: function() {
                return this.wk;
            },
            set: function(a1) {
                this._isFrozen && va(this, a1);
                this.wk = a1;
                this.xe = null;
            }
        },
        start: {
            get: function() {
                return this.Qd;
            },
            set: function(a1) {
                this._isFrozen && va(this, a1);
                this.Qd = a1.J();
                this.xe = null;
            }
        },
        end: {
            get: function() {
                return this.Kk;
            },
            set: function(a1) {
                this._isFrozen && va(this, a1);
                this.Kk = a1.J();
                this.xe = null;
            }
        },
        startRadius: {
            get: function() {
                return this.Fr;
            },
            set: function(a1) {
                this._isFrozen && va(this, a1);
                0 > a1 && xa(a1, ">= zero", ql, "startRadius");
                this.Fr = a1;
                this.xe = null;
            }
        },
        endRadius: {
            get: function() {
                return this.Wp;
            },
            set: function(a1) {
                this._isFrozen && va(this, a1);
                0 > a1 && xa(a1, ">= zero", ql, "endRadius");
                this.Wp = a1;
                this.xe = null;
            }
        },
        colorStops: {
            get: function() {
                return this.we;
            },
            set: function(a1) {
                this._isFrozen && va(this, a1);
                this.we = a1;
                this.xe = null;
            }
        },
        pattern: {
            get: function() {
                return this.br;
            },
            set: function(a1) {
                this._isFrozen && va(this, a1);
                this.br = a1;
                this.xe = null;
            }
        }
    });
    ql.prototype.isDark = ql.prototype.Gx;
    ql.prototype.darkenBy = ql.prototype.Wy;
    ql.prototype.lightenBy = ql.prototype.Vz;
    ql.prototype.addColorStop = ql.prototype.addColorStop;
    var Em = 216 / 24389, Dm = 24389 / 27, Am = [
        95.047,
        100,
        108.883
    ], Hm = null, vm = new nm, Wh = new nm, ym = new nm, Bm = new nm, om = !1;
    ql.className = "Brush";
    var Hl;
    ql.Solid = Hl = new E(ql, "Solid", 0);
    var Kl;
    ql.Linear = Kl = new E(ql, "Linear", 1);
    var rl;
    ql.Radial = rl = new E(ql, "Radial", 2);
    var Jl;
    ql.Pattern = Jl = new E(ql, "Pattern", 4);
    var qm;
    ql.Lab = qm = new E(ql, "Lab", 5);
    var Gm;
    ql.HSL = Gm = new E(ql, "HSL", 6);
    ql.randomColor = function(a1, b) {
        void 0 === a1 && (a1 = 128);
        void 0 === b && (b = Math.max(a1, 255));
        var c = Math.abs(b - a1);
        b = Math.floor(a1 + Math.random() * c).toString(16);
        var d = Math.floor(a1 + Math.random() * c).toString(16);
        a1 = Math.floor(a1 + Math.random() * c).toString(16);
        2 > b.length && (b = "0" + b);
        2 > d.length && (d = "0" + d);
        2 > a1.length && (a1 = "0" + a1);
        return "#" + b + d + a1;
    };
    ql.isValidColor = function(a1) {
        if ("black" === a1) return !0;
        if ("" === a1) return !1;
        om || (pm(), om = !0);
        var b = Hm;
        if (null === b) return !0;
        b.fillStyle = "#000000";
        var c = b.fillStyle;
        b.fillStyle = a1;
        if (b.fillStyle !== c) return !0;
        b.fillStyle = "#FFFFFF";
        c = b.fillStyle;
        b.fillStyle = a1;
        return b.fillStyle !== c;
    };
    ql.lighten = function(a1) {
        return sm(a1);
    };
    ql.lightenBy = sm;
    ql.darken = function(a1) {
        return tm(a1);
    };
    ql.darkenBy = tm;
    ql.mix = um;
    ql.isDark = wm;
    function Zl() {
        this.xa = "Base";
    }
    Zl.prototype.measure = function() {};
    Zl.prototype.Yz = function(a1, b, c, d, e) {
        a1.measure(b, c, d, e);
    };
    Zl.prototype.arrange = function() {};
    Zl.prototype.Ly = function(a1, b, c, d, e, f) {
        a1.arrange(b, c, d, e, f);
    };
    Zl.prototype.iA = function(a1) {
        a1.Tj();
    };
    Zl.prototype.hc = function() {};
    ma.Object.defineProperties(Zl.prototype, {
        name: {
            get: function() {
                return this.xa;
            },
            set: function(a1) {
                this.xa = a1;
            }
        },
        classType: {
            get: function() {
                return W;
            }
        }
    });
    Zl.prototype.remeasureObject = Zl.prototype.iA;
    Zl.prototype.arrangeElement = Zl.prototype.Ly;
    Zl.prototype.measureElement = Zl.prototype.Yz;
    Zl.className = "PanelLayout";
    function Im() {
        this.xa = "Base";
    }
    la(Im, Zl);
    Im.prototype.measure = function(a1, b, c, d, e, f, g) {
        var h = d.length;
        a1 = Jm(a1);
        for(var k = 0; k < h; k++){
            var l = d[k];
            if (l.visible || l === a1) {
                var m = l.margin, n = m.right + m.left;
                m = m.top + m.bottom;
                l.measure(b, c, f, g);
                var p = l.measuredBounds;
                n = Math.max(p.width + n, 0);
                m = Math.max(p.height + m, 0);
                p = l.position.x;
                var q = l.position.y;
                isFinite(p) || (p = 0);
                isFinite(q) || (q = 0);
                l instanceof Bf && l.isGeometryPositioned && (l = l.strokeWidth / 2, p -= l, q -= l);
                Yb(e, p, q, n, m);
            }
        }
    };
    Im.prototype.arrange = function(a1, b, c) {
        var d = b.length, e = a1.padding;
        a1 = c.x - e.left;
        c = c.y - e.top;
        for(e = 0; e < d; e++){
            var f = b[e], g = f.measuredBounds, h = f.margin, k = f.position.x, l = f.position.y;
            k = isNaN(k) ? -a1 : k - a1;
            l = isNaN(l) ? -c : l - c;
            if (f instanceof Bf && f.isGeometryPositioned) {
                var m = f.strokeWidth / 2;
                k -= m;
                l -= m;
            }
            f.visible && f.arrange(k + h.left, l + h.top, g.width, g.height);
        }
    };
    function Km() {
        this.xa = "Base";
    }
    la(Km, Zl);
    Km.prototype.measure = function(a1, b, c, d, e, f, g) {
        var h = d.length;
        b = Ea();
        f = Jm(a1);
        for(var k = 0; k < h; k++){
            var l = d[k];
            if (l.visible || l === f) {
                var m = jl(l, !1);
                if (m !== kg && m !== Wk) b.push(l);
                else {
                    l.measure(Infinity, c, 0, g);
                    m = l.margin;
                    l = l.measuredBounds;
                    var n = Math.max(l.height + m.top + m.bottom, 0);
                    e.width += Math.max(l.width + m.right + m.left, 0);
                    e.height = Math.max(e.height, n);
                }
            }
        }
        d = b.length;
        a1.desiredSize.height ? c = Math.min(a1.desiredSize.height, a1.maxSize.height) : 0 !== e.height && (c = Math.min(e.height, a1.maxSize.height));
        for(a1 = 0; a1 < d; a1++)if (k = b[a1], k.visible || k === f) m = k.margin, h = m.right + m.left, m = m.top + m.bottom, k.measure(Infinity, c, 0, g), k = k.measuredBounds, m = Math.max(k.height + m, 0), e.width += Math.max(k.width + h, 0), e.height = Math.max(e.height, m);
        Ga(b);
    };
    Km.prototype.arrange = function(a1, b, c) {
        for(var d = b.length, e = a1.padding, f = e.top, g = a1.isOpposite, h = g ? c.width : e.left, k = 0; k < d; k++){
            var l = f, m = b[k];
            if (m.visible) {
                var n = m.measuredBounds, p = m.margin, q = p.top + p.bottom, r = f + e.bottom, u = n.height, w = jl(m, !1);
                if (isNaN(m.desiredSize.height) && w === nd || w === Xk) u = Math.max(c.height - q - r, 0);
                q = u + q + r;
                r = m.alignment;
                r.Yb() && (r = a1.defaultAlignment);
                r.sb() || (r = wc);
                g && (h -= n.width + p.left + p.right);
                m.arrange(h + r.offsetX + p.left, l + r.offsetY + p.top + (c.height * r.y - q * r.y), n.width, u);
                g || (h += n.width + p.left + p.right);
            }
        }
    };
    function Lm() {
        this.xa = "Base";
    }
    la(Lm, Zl);
    Lm.prototype.measure = function(a1, b, c, d, e, f) {
        var g = d.length;
        c = Ea();
        for(var h = Jm(a1), k = 0; k < g; k++){
            var l = d[k];
            if (l.visible || l === h) {
                var m = jl(l, !1);
                if (m !== kg && m !== Xk) c.push(l);
                else {
                    var n = l.margin;
                    m = n.right + n.left;
                    n = n.top + n.bottom;
                    l.measure(b, Infinity, f, 0);
                    l = l.measuredBounds;
                    Pb(e, Math.max(e.width, Math.max(l.width + m, 0)), e.height + Math.max(l.height + n, 0));
                }
            }
        }
        d = c.length;
        if (0 !== d) {
            a1.desiredSize.width ? b = Math.min(a1.desiredSize.width, a1.maxSize.width) : 0 !== e.width && (b = Math.min(e.width, a1.maxSize.width));
            for(a1 = 0; a1 < d; a1++)if (k = c[a1], k.visible || k === h) l = k.margin, g = l.right + l.left, l = l.top + l.bottom, k.measure(b, Infinity, f, 0), k = k.measuredBounds, l = Math.max(k.height + l, 0), e.width = Math.max(e.width, Math.max(k.width + g, 0)), e.height += l;
            Ga(c);
        }
    };
    Lm.prototype.arrange = function(a1, b, c) {
        for(var d = b.length, e = a1.padding, f = e.left, g = a1.isOpposite, h = g ? c.height : e.top, k = 0; k < d; k++){
            var l = f, m = b[k];
            if (m.visible) {
                var n = m.measuredBounds, p = m.margin, q = p.left + p.right, r = f + e.right, u = n.width, w = jl(m, !1);
                if (isNaN(m.desiredSize.width) && w === nd || w === Wk) u = Math.max(c.width - q - r, 0);
                q = u + q + r;
                r = m.alignment;
                r.Yb() && (r = a1.defaultAlignment);
                r.sb() || (r = wc);
                g && (h -= n.height + p.bottom + p.top);
                m.arrange(l + r.offsetX + p.left + (c.width * r.x - q * r.x), h + r.offsetY + p.top, u, n.height);
                g || (h += n.height + p.bottom + p.top);
            }
        }
    };
    function Mm() {
        this.xa = "Base";
    }
    la(Mm, Zl);
    Mm.prototype.measure = function(a1, b, c, d, e, f, g) {
        var h = d.length, k = a1.Qb(), l = k.margin, m = l.right + l.left, n = l.top + l.bottom;
        k.measure(b, c, f, g);
        var p = k.measuredBounds;
        f = p.width;
        g = p.height;
        var q = Math.max(f + m, 0);
        var r = Math.max(g + n, 0);
        var u = a1.isClipping, w = N.allocAt(-l.left, -l.top, q, r), v = N.allocAt(0, 0, f, g);
        Nm(k, v, !0);
        f = v.width;
        g = v.height;
        for(var y = !0, z = Jm(a1), A = 0; A < h; A++){
            var B = d[A];
            p = b;
            var D = c;
            if (B !== k && (B.visible || B === z)) {
                l = B.margin;
                var M = l.left, S = l.top;
                q = l.right + l.left;
                r = l.top + l.bottom;
                l = jl(B, !1);
                switch(l){
                    case nd:
                        p = f;
                        D = g;
                        S = M = r = q = 0;
                        break;
                    case Wk:
                        p = f;
                        M = q = 0;
                        break;
                    case Xk:
                        D = g, S = r = 0;
                }
                B.measure(p, D, 0, 0);
                p = B.measuredBounds;
                q = Math.max(p.width + q, 0);
                r = Math.max(p.height + r, 0);
                l = B.alignment;
                l.Yb() && (l = a1.defaultAlignment);
                l.sb() || (l = wc);
                var R = B.alignmentFocus;
                R.Yb() && (R = wc);
                D = null;
                B instanceof W && "" !== B.$e && (D = B.fb(B.$e), D === B && (D = null));
                M = v.x - M;
                S = v.y - S;
                if (null !== D) {
                    B.arrange(0, 0, p.width, p.height);
                    p = D.actualBounds;
                    p = J.allocAt(p.x + (R.x * p.width - R.offsetX), p.y + (R.y * p.height - R.offsetY));
                    for(D = D.panel; D !== B;)D.transform.Ga(p), D = D.panel;
                    M += l.x * f + l.offsetX - p.x;
                    S += l.y * g + l.offsetY - p.y;
                    J.free(p);
                } else M += l.x * f + l.offsetX - (R.x * p.width + R.offsetX), S += l.y * g + l.offsetY - (R.y * p.height + R.offsetY);
                y ? (y = !1, e.h(M, S, q, r)) : Yb(e, M, S, q, r);
            }
        }
        y ? e.assign(w) : u ? e.Uu(v.x, v.y, v.width, v.height) : Yb(e, w.x, w.y, w.width, w.height);
        N.free(w);
        N.free(v);
        l = k.stretch;
        l === Yk && (l = jl(k, !1));
        switch(l){
            case kg:
                return;
            case nd:
                if (!isFinite(b) && !isFinite(c)) return;
                break;
            case Wk:
                if (!isFinite(b)) return;
                break;
            case Xk:
                if (!isFinite(c)) return;
        }
        p = k.measuredBounds;
        f = p.width;
        g = p.height;
        q = Math.max(f + m, 0);
        r = Math.max(g + n, 0);
        l = k.margin;
        v = N.allocAt(-l.left, -l.top, q, r);
        Nm(k, v, !0);
        f = v.width;
        g = v.height;
        for(b = 0; b < h; b++)c = d[b], c === k || !c.visible && c !== z || (l = c.margin, q = l.right + l.left, r = l.top + l.bottom, p = c.measuredBounds, q = Math.max(p.width + q, 0), r = Math.max(p.height + r, 0), m = c.alignment, m.Yb() && (m = a1.defaultAlignment), m.sb() || (m = wc), c = c.alignmentFocus, c.Yb() && (c = wc), y ? (y = !1, e.h(m.x * f + m.offsetX - (c.x * p.width + c.offsetX) - l.left, m.y * g + m.offsetY - (c.y * p.height + c.offsetY) - l.top, q, r)) : Yb(e, m.x * f + m.offsetX - (c.x * p.width + c.offsetX) - l.left, m.y * g + m.offsetY - (c.y * p.height + c.offsetY) - l.top, q, r));
        y ? e.assign(w) : u ? e.Uu(v.x, v.y, v.width, v.height) : Yb(e, w.x, w.y, w.width, w.height);
        N.free(v);
    };
    Mm.prototype.arrange = function(a1, b, c) {
        var d = b.length, e = a1.Qb(), f = e.measuredBounds, g = f.width, h = f.height, k = a1.padding;
        f = k.left;
        k = k.top;
        var l = f - c.x, m = k - c.y;
        e.arrange(l, m, g, h);
        g = N.allocAt(0, 0, g, h);
        Nm(e, g, !1);
        for(h = 0; h < d; h++){
            var n = b[h];
            if (n !== e) {
                l = n.measuredBounds;
                var p = l.width, q = l.height;
                m = n.alignment;
                m.Yb() && (m = a1.defaultAlignment);
                m.sb() || (m = wc);
                var r = n.alignmentFocus;
                r.Yb() && (r = wc);
                l = null;
                n instanceof W && "" !== n.$e && (l = n.fb(n.$e), l === n && (l = null));
                if (null !== l) {
                    var u = l.actualBounds;
                    r = J.allocAt(u.x + (r.x * u.width - r.offsetX), u.y + (r.y * u.height - r.offsetY));
                    for(l = l.panel; l !== n;)l.transform.Ga(r), l = l.panel;
                    l = m.x * g.width + m.offsetX - r.x;
                    m = m.y * g.height + m.offsetY - r.y;
                    J.free(r);
                } else l = m.x * g.width + m.offsetX - (r.x * p + r.offsetX), m = m.y * g.height + m.offsetY - (r.y * q + r.offsetY);
                l += g.x - c.x;
                m += g.y - c.y;
                n.visible && n.arrange(f + l, k + m, p, q);
            }
        }
        N.free(g);
    };
    function Nm(a1, b, c) {
        var d = null;
        a1 instanceof W && "" !== a1.$e && (d = a1.fb(a1.$e), d === a1 && (d = null));
        if (null !== d) for(c && a1.arrange(0, 0, b.width, b.height), b.assign(d.actualBounds), d = d.panel; d !== a1;)d.transform.op(b), d = d.panel;
    }
    function Om() {
        this.xa = "Base";
    }
    la(Om, Zl);
    Om.prototype.measure = function(a1, b, c, d, e, f, g) {
        var h = d.length, k = a1.Qb(), l = k.margin, m = b, n = c, p = l.right + l.left, q = l.top + l.bottom;
        k.measure(b, c, f, g);
        l = k.measuredBounds;
        var r = 0, u = null;
        k instanceof Bf && (u = k, r = u.strokeWidth * u.scale);
        var w = Math.max(l.width + p, 0);
        l = Math.max(l.height + q, 0);
        var v = Pm(k), y = v.x * w + v.offsetX;
        v = v.y * l + v.offsetY;
        var z = Qm(k), A = z.x * w + z.offsetX;
        z = z.y * l + z.offsetY;
        isFinite(b) && (m = Math.max(Math.abs(y - A) - r, 0));
        isFinite(c) && (n = Math.max(Math.abs(v - z) - r, 0));
        r = L.alloc();
        r.h(0, 0);
        a1 = Jm(a1);
        for(z = 0; z < h; z++)v = d[z], v === k || !v.visible && v !== a1 || (l = v.margin, w = l.right + l.left, y = l.top + l.bottom, v.measure(m, n, 0, 0), l = v.measuredBounds, w = Math.max(l.width + w, 0), l = Math.max(l.height + y, 0), r.h(Math.max(w, r.width), Math.max(l, r.height)));
        if (1 === h) e.width = w, e.height = l, L.free(r);
        else {
            v = Pm(k);
            z = Qm(k);
            h = d = 0;
            z.x !== v.x && z.y !== v.y && (d = r.width / Math.abs(z.x - v.x), h = r.height / Math.abs(z.y - v.y));
            L.free(r);
            r = 0;
            null !== u && (r = u.strokeWidth * u.scale, lg(u) === mg && (d = h = Math.max(d, h)));
            d += Math.abs(v.offsetX) + Math.abs(z.offsetX) + r;
            h += Math.abs(v.offsetY) + Math.abs(z.offsetY) + r;
            u = k.stretch;
            u === Yk && (u = jl(k, !1));
            switch(u){
                case kg:
                    g = f = 0;
                    break;
                case nd:
                    isFinite(b) && (d = b);
                    isFinite(c) && (h = c);
                    break;
                case Wk:
                    isFinite(b) && (d = b);
                    g = 0;
                    break;
                case Xk:
                    f = 0, isFinite(c) && (h = c);
            }
            k.Tj();
            k.measure(d, h, f, g);
            e.width = k.measuredBounds.width + p;
            e.height = k.measuredBounds.height + q;
        }
    };
    Om.prototype.arrange = function(a1, b) {
        var c = b.length, d = a1.Qb(), e = d.measuredBounds, f = N.alloc();
        f.h(0, 0, 1, 1);
        var g = d.margin, h = g.left;
        g = g.top;
        var k = a1.padding, l = k.left;
        k = k.top;
        d.arrange(l + h, k + g, e.width, e.height);
        var m = Pm(d), n = Qm(d), p = m.y * e.height + m.offsetY, q = n.x * e.width + n.offsetX;
        n = n.y * e.height + n.offsetY;
        f.x = m.x * e.width + m.offsetX;
        f.y = p;
        Yb(f, q, n, 0, 0);
        f.x += h + l;
        f.y += g + k;
        for(e = 0; e < c; e++)h = b[e], h !== d && (l = h.measuredBounds, g = h.margin, k = Math.max(l.width + g.right + g.left, 0), m = Math.max(l.height + g.top + g.bottom, 0), p = h.alignment, p.Yb() && (p = a1.defaultAlignment), p.sb() || (p = wc), k = f.width * p.x + p.offsetX - k * p.x + g.left + f.x, g = f.height * p.y + p.offsetY - m * p.y + g.top + f.y, h.visible && (Zb(f.x, f.y, f.width, f.height, k, g, l.width, l.height) ? h.arrange(k, g, l.width, l.height) : h.arrange(k, g, l.width, l.height, new N(f.x, f.y, f.width, f.height))));
        N.free(f);
    };
    function Rm() {
        this.xa = "Base";
        this.name = "Table";
    }
    la(Rm, Zl);
    Rm.prototype.measure = function(a1, b, c, d, e) {
        for(var f = d.length, g = Ea(), h = Ea(), k = 0; k < f; k++){
            var l = d[k], m = l instanceof W ? l : null;
            if (null !== m && kl(m) && l.visible) {
                h.push(m);
                for(var n = m.O.s, p = n.length, q = 0; q < p; q++){
                    var r = n[q];
                    m.type === W.TableRow ? r.row = l.row : m.type === W.TableColumn && (r.column = l.column);
                    g.push(r);
                }
            } else g.push(l);
        }
        f = g.length;
        0 === f && (a1.Gb(0), a1.Fb(0));
        for(var u = [], w = 0; w < f; w++){
            var v = g[w];
            v.visible && (pj(v, !0), ll(v, !0), u[v.row] || (u[v.row] = []), u[v.row][v.column] || (u[v.row][v.column] = []), u[v.row][v.column].push(v));
        }
        Ga(g);
        var y = Ea(), z = Ea(), A = Ea(), B = {
            count: 0
        }, D = {
            count: 0
        }, M = b, S = c, R = a1.rowDefs, I = a1.colDefs, G = null;
        f = R.length;
        for(var ca = 0; ca < f; ca++)G = R[ca], void 0 !== G && (G.actual = 0);
        f = I.length;
        for(var X = 0; X < f; X++)G = I[X], void 0 !== G && (G.actual = 0);
        for(var na = u.length, wa = 0, db = 0; db < na; db++)u[db] && (wa = Math.max(wa, u[db].length));
        var gb = Math.min(a1.topIndex, na - 1), Db = Math.min(a1.leftIndex, wa - 1), eb = 0;
        na = u.length;
        for(var Ke = Jm(a1), Ua = 0; Ua < na; Ua++)if (u[Ua]) {
            wa = u[Ua].length;
            var rd = a1.Gb(Ua);
            rd.actual = 0;
            for(var Eb = rd.pc = 0; Eb < wa; Eb++)if (u[Ua][Eb]) {
                var Le = a1.Fb(Eb);
                void 0 === y[Eb] && (Le.actual = 0, Le.pc = 0, y[Eb] = !0);
                for(var xc = u[Ua][Eb], Tc = xc.length, nc = 0; nc < Tc; nc++){
                    var ec = xc[nc];
                    if (ec.visible || ec === Ke) {
                        var ef = 1 < ec.rowSpan || 1 < ec.columnSpan;
                        ef && (Ua < gb || Eb < Db || z.push(ec));
                        var sd = ec.margin, xh = sd.right + sd.left, oc = sd.top + sd.bottom;
                        var Fb = Ol(ec, rd, Le, !1);
                        var zi = ec.desiredSize, rg = !isNaN(zi.height), Fd = !isNaN(zi.width) && rg;
                        ef || Fb === kg || Fd || Ua < gb || Eb < Db || (void 0 !== B[Eb] || Fb !== nd && Fb !== Wk || (B[Eb] = -1, B.count++), void 0 !== D[Ua] || Fb !== nd && Fb !== Xk || (D[Ua] = -1, D.count++), A.push(ec));
                        ec.measure(Infinity, Infinity, 0, 0);
                        if (!(Ua < gb || Eb < Db)) {
                            var fc = ec.measuredBounds, Lf = Math.max(fc.width + xh, 0), pc = Math.max(fc.height + oc, 0);
                            if (1 === ec.rowSpan && (Fb === kg || Fb === Wk)) {
                                G = a1.Gb(Ua);
                                var ff = G.Wc();
                                eb = Math.max(pc - G.actual, 0);
                                eb + ff > S && (eb = Math.max(S - ff, 0));
                                var nk = 0 === G.oa;
                                G.pc = G.pc + eb;
                                G.actual = G.oa + eb;
                                S = Math.max(S - (eb + (nk ? ff : 0)), 0);
                            }
                            if (1 === ec.columnSpan && (Fb === kg || Fb === Xk)) {
                                G = a1.Fb(Eb);
                                var Ai = G.Wc();
                                eb = Math.max(Lf - G.actual, 0);
                                eb + Ai > M && (eb = Math.max(M - Ai, 0));
                                var Pn = 0 === G.oa;
                                G.pc = G.pc + eb;
                                G.actual = G.oa + eb;
                                M = Math.max(M - (eb + (Pn ? Ai : 0)), 0);
                            }
                            ef && ec.Tj();
                        }
                    }
                }
            }
        }
        Ga(y);
        var Td = 0, ne = 0;
        f = a1.columnCount;
        for(var sg = 0; sg < f; sg++){
            var gf = I[sg];
            void 0 !== gf && (Td += isNaN(gf.Hc) ? gf.pc : gf.Hc, 0 !== gf.pc && (Td += gf.Wc()));
        }
        f = a1.rowCount;
        for(var yh = 0; yh < f; yh++){
            var hf = R[yh];
            void 0 !== hf && (ne += isNaN(hf.Hc) ? hf.pc : hf.Hc, 0 !== hf.pc && (ne += hf.Wc()));
        }
        M = Math.max(b - Td, 0);
        var Ud = S = Math.max(c - ne, 0), Me = M;
        f = A.length;
        for(var gc = 0; gc < f; gc++){
            var Gd = A[gc], ok = a1.Gb(Gd.row), oe = a1.Fb(Gd.column), zh = Gd.measuredBounds, td = Gd.margin, Mf = td.right + td.left, Hd = td.top + td.bottom;
            B[Gd.column] = 0 === oe.pc && void 0 !== B[Gd.column] ? Math.max(zh.width + Mf, B[Gd.column]) : null;
            D[Gd.row] = 0 === ok.pc && void 0 !== D[Gd.row] ? Math.max(zh.height + Hd, D[Gd.row]) : null;
        }
        var tg = 0, Ah = 0, ed;
        for(ed in D)"count" !== ed && (tg += D[ed]);
        for(ed in B)"count" !== ed && (Ah += B[ed]);
        for(var hb = L.alloc(), Bi = 0; Bi < f; Bi++){
            var Sb = A[Bi];
            if (Sb.visible || Sb === Ke) {
                var Va = a1.Gb(Sb.row), Tb = a1.Fb(Sb.column), pe = 0;
                isFinite(Tb.width) ? pe = Tb.width : (isFinite(M) && null !== B[Sb.column] ? 0 === Ah ? pe = Tb.actual + M : pe = B[Sb.column] / Ah * Me : null !== B[Sb.column] ? pe = M : pe = Tb.actual || M, pe = Math.max(0, pe - Tb.Wc()));
                var Ne = 0;
                isFinite(Va.height) ? Ne = Va.height : (isFinite(S) && null !== D[Sb.row] ? 0 === tg ? Ne = Va.actual + S : Ne = D[Sb.row] / tg * Ud : null !== D[Sb.row] ? Ne = S : Ne = Va.actual || S, Ne = Math.max(0, Ne - Va.Wc()));
                hb.h(Math.max(Tb.minimum, Math.min(pe, Tb.maximum)), Math.max(Va.minimum, Math.min(Ne, Va.maximum)));
                Fb = Ol(Sb, Va, Tb, !1);
                switch(Fb){
                    case Wk:
                        hb.height = Math.max(hb.height, Va.actual + S);
                        break;
                    case Xk:
                        hb.width = Math.max(hb.width, Tb.actual + M);
                }
                var Nf = Sb.margin, Qn = Nf.right + Nf.left, pk = Nf.top + Nf.bottom;
                Sb.Tj();
                Sb.measure(hb.width, hb.height, Tb.minimum, Va.minimum);
                var Bh = Sb.measuredBounds, Of = Math.max(Bh.width + Qn, 0), ug = Math.max(Bh.height + pk, 0);
                isFinite(M) && (Of = Math.min(Of, hb.width));
                isFinite(S) && (ug = Math.min(ug, hb.height));
                var hc = 0;
                hc = Va.actual;
                Va.actual = Math.max(Va.actual, ug);
                Va.pc = Math.max(Va.pc, ug);
                eb = Va.actual - hc;
                S = Math.max(S - eb, 0);
                null === D[Sb.row] && (Ud = Math.max(Ud - eb, 0));
                hc = Tb.actual;
                Tb.actual = Math.max(Tb.actual, Of);
                Tb.pc = Math.max(Tb.pc, Of);
                eb = Tb.actual - hc;
                M = Math.max(M - eb, 0);
                null === B[Sb.column] && (Me = Math.max(Me - eb, 0));
            }
        }
        Ga(A);
        var Id = L.alloc(), ud = Ea(), Hc = Ea();
        f = z.length;
        if (0 !== f) {
            for(var jf = 0; jf < na; jf++)if (u[jf]) {
                wa = u[jf].length;
                var Ch = a1.Gb(jf);
                ud[jf] = Ch.actual;
                for(var kf = 0; kf < wa; kf++)if (u[jf][kf]) {
                    var qk = a1.Fb(kf);
                    Hc[kf] = qk.actual;
                }
            }
        }
        for(var Dh = 0; Dh < f; Dh++){
            var Pa = z[Dh];
            if (Pa.visible || Pa === Ke) {
                var fd = a1.Gb(Pa.row), Uc = a1.Fb(Pa.column);
                hb.h(Math.max(Uc.minimum, Math.min(b, Uc.maximum)), Math.max(fd.minimum, Math.min(c, fd.maximum)));
                Fb = Ol(Pa, fd, Uc, !1);
                switch(Fb){
                    case nd:
                        0 !== Hc[Uc.index] && (hb.width = Math.min(hb.width, Hc[Uc.index]));
                        0 !== ud[fd.index] && (hb.height = Math.min(hb.height, ud[fd.index]));
                        break;
                    case Wk:
                        0 !== Hc[Uc.index] && (hb.width = Math.min(hb.width, Hc[Uc.index]));
                        break;
                    case Xk:
                        0 !== ud[fd.index] && (hb.height = Math.min(hb.height, ud[fd.index]));
                }
                isFinite(Uc.width) && (hb.width = Uc.width);
                isFinite(fd.height) && (hb.height = fd.height);
                Id.h(0, 0);
                for(var rk = Uc.minimum, qc = fd.minimum, Oe = 1; Oe < Pa.rowSpan && !(Pa.row + Oe >= a1.rowCount); Oe++)G = a1.Gb(Pa.row + Oe), eb = 0, eb = Fb === nd || Fb === Xk ? Math.max(G.minimum, 0 === ud[Pa.row + Oe] ? G.maximum : Math.min(ud[Pa.row + Oe], G.maximum)) : Math.max(G.minimum, isNaN(G.Hc) ? G.maximum : Math.min(G.Hc, G.maximum)), Id.height += eb, qc += G.minimum;
                for(var Vc = 1; Vc < Pa.columnSpan && !(Pa.column + Vc >= a1.columnCount); Vc++)G = a1.Fb(Pa.column + Vc), eb = 0, eb = Fb === nd || Fb === Wk ? Math.max(G.minimum, 0 === Hc[Pa.column + Vc] ? G.maximum : Math.min(Hc[Pa.column + Vc], G.maximum)) : Math.max(G.minimum, isNaN(G.Hc) ? G.maximum : Math.min(G.Hc, G.maximum)), Id.width += eb, rk += G.minimum;
                hb.width += Id.width;
                hb.height += Id.height;
                var Eh = Pa.margin, lf = Eh.right + Eh.left, Ci = Eh.top + Eh.bottom;
                Pa.measure(hb.width, hb.height, rk, qc);
                for(var Fh = Pa.measuredBounds, Jd = Math.max(Fh.width + lf, 0), Pf = Math.max(Fh.height + Ci, 0), mf = 0, Gh = 0; Gh < Pa.rowSpan && !(Pa.row + Gh >= a1.rowCount); Gh++)G = a1.Gb(Pa.row + Gh), mf += G.total || 0;
                if (mf < Pf) {
                    var Pe = Pf - mf, Vd = Pf - mf;
                    if (null !== Pa.spanAllocation) for(var Qe = Pa.spanAllocation, qe = 0; qe < Pa.rowSpan && !(0 >= Pe) && !(Pa.row + qe >= a1.rowCount); qe++){
                        G = a1.Gb(Pa.row + qe);
                        var Re = G.oa || 0, Qf = Qe(Pa, G, Vd);
                        G.actual = Math.min(G.maximum, Re + Qf);
                        G.oa !== Re && (Pe -= G.oa - Re);
                    }
                    for(; 0 < Pe;){
                        var vd = G.oa || 0;
                        isNaN(G.height) && G.maximum > vd && (G.actual = Math.min(G.maximum, vd + Pe), G.oa !== vd && (Pe -= G.oa - vd));
                        if (0 === G.index) break;
                        G = a1.Gb(G.index - 1);
                    }
                }
                for(var vg = 0, Se = 0; Se < Pa.columnSpan && !(Pa.column + Se >= a1.columnCount); Se++)G = a1.Fb(Pa.column + Se), vg += G.total || 0;
                if (vg < Jd) {
                    var wg = Jd - vg, Rn = Jd - vg;
                    if (null !== Pa.spanAllocation) for(var re = Pa.spanAllocation, Rf = 0; Rf < Pa.columnSpan && !(0 >= wg) && !(Pa.column + Rf >= a1.columnCount); Rf++){
                        G = a1.Fb(Pa.column + Rf);
                        var Di = G.oa || 0, Sn = re(Pa, G, Rn);
                        G.actual = Math.min(G.maximum, Di + Sn);
                        G.oa !== Di && (wg -= G.oa - Di);
                    }
                    for(; 0 < wg;){
                        var sk = G.oa || 0;
                        isNaN(G.width) && G.maximum > sk && (G.actual = Math.min(G.maximum, sk + wg), G.oa !== sk && (wg -= G.oa - sk));
                        if (0 === G.index) break;
                        G = a1.Fb(G.index - 1);
                    }
                }
            }
        }
        Ga(z);
        L.free(Id);
        L.free(hb);
        void 0 !== ud && Ga(ud);
        void 0 !== Hc && Ga(Hc);
        var xg = 0, yg = 0, tk = a1.desiredSize, Fr = a1.maxSize;
        Fb = jl(a1, !0);
        var Ei = ne = Td = 0, Fi = 0;
        f = a1.columnCount;
        for(var uk = 0; uk < f; uk++)void 0 !== I[uk] && (G = a1.Fb(uk), isFinite(G.width) ? (Ei += G.width, Ei += G.Wc()) : Sm(G) === Tm ? (Ei += G.oa, Ei += G.Wc()) : 0 !== G.oa && (Td += G.oa, Td += G.Wc()));
        isFinite(tk.width) ? xg = Math.min(tk.width, Fr.width) : xg = Fb !== kg && isFinite(b) ? b : Td;
        xg = Math.max(xg, a1.minSize.width);
        xg = Math.max(xg - Ei, 0);
        for(var tu = 0 === Td ? 1 : Math.max(xg / Td, 1), wk = 0; wk < f; wk++)void 0 !== I[wk] && (G = a1.Fb(wk), isFinite(G.width) || Sm(G) === Tm || (G.actual = G.oa * tu), G.position = e.width, 0 !== G.oa && (e.width += G.oa, e.width += G.Wc()));
        f = a1.rowCount;
        for(var xk = 0; xk < f; xk++)void 0 !== R[xk] && (G = a1.Gb(xk), isFinite(G.height) ? (Fi += G.height, Fi += G.Wc()) : Sm(G) === Tm ? (Fi += G.oa, Fi += G.Wc()) : 0 !== G.oa && (ne += G.oa, ne += G.Wc()));
        isFinite(tk.height) ? yg = Math.min(tk.height, Fr.height) : yg = Fb !== kg && isFinite(c) ? c : ne;
        yg = Math.max(yg, a1.minSize.height);
        yg = Math.max(yg - Fi, 0);
        for(var uu = 0 === ne ? 1 : Math.max(yg / ne, 1), yk = 0; yk < f; yk++)void 0 !== R[yk] && (G = a1.Gb(yk), isFinite(G.height) || Sm(G) === Tm || (G.actual = G.oa * uu), G.position = e.height, 0 !== G.oa && (e.height += G.oa, e.height += G.Wc()));
        f = h.length;
        for(var Tn = 0; Tn < f; Tn++){
            var Hi = h[Tn], Un = 0, Vn = 0;
            Hi.type === W.TableRow ? (Un = e.width, G = a1.Gb(Hi.row), Vn = G.actual) : (G = a1.Fb(Hi.column), Un = G.actual, Vn = e.height);
            Hi.measuredBounds.h(0, 0, Un, Vn);
            pj(Hi, !1);
        }
        Ga(h);
        a1.inRowsCols = u;
    };
    Rm.prototype.arrange = function(a1, b, c) {
        var d = b.length, e = a1.padding, f = e.left;
        e = e.top;
        var g = a1.inRowsCols;
        if (null !== g) {
            for(var h, k, l = g.length, m = 0, n = 0; n < l; n++)g[n] && (m = Math.max(m, g[n].length));
            k = a1.rowDefs;
            h = a1.colDefs;
            var p = n = 0, q = Math.min(a1.topIndex, l - 1);
            if (0 < k.length) {
                for(; q !== l && (void 0 === k[q] || 0 === k[q].oa);)q++;
                q = Math.max(Math.min(q, l - 1), 0);
                n = -k[q].position;
            }
            var r = Math.min(a1.leftIndex, m - 1);
            if (0 < h.length) {
                for(; r !== m && (void 0 === h[r] || 0 === h[r].oa);)r++;
                r = Math.max(Math.min(r, m - 1), 0);
                p = -h[r].position;
            }
            for(var u = 0, w = 0; u !== l && void 0 === k[u];)u++;
            for(; w !== l && void 0 === h[w];)w++;
            m = a1.part;
            a1.Gb(u);
            a1.Fb(w);
            for(var v = 0; v < b.length; v++){
                var y = b[v];
                if (y instanceof W && y.visible && kl(y)) {
                    if (y.type === W.TableRow) {
                        h = a1.Gb(y.row);
                        var z = a1.Fb(w);
                    } else h = a1.Gb(u), z = a1.Fb(y.column);
                    k = h.position + n + e;
                    0 !== h.oa && (k += h.Ho(Math.max(u, q)));
                    h = z.position + p + f;
                    0 !== z.oa && (h += z.Ho(Math.max(w, r)));
                    z = y.measuredBounds;
                    y.Tk();
                    y.actualBounds.ka();
                    var A = y.actualBounds, B = N.allocAt(A.x, A.y, A.width, A.height);
                    A.x = y.type === W.TableRow ? f : h;
                    A.y = y.type === W.TableColumn ? e : k;
                    A.width = z.width;
                    A.height = z.height;
                    y.actualBounds.freeze();
                    ll(y, !1);
                    Ub(B, A) || null === m || (m.oh(), y.On(m));
                    N.free(B);
                }
            }
            v = L.alloc();
            for(y = 0; y < l; y++)if (g[y]) {
                for(m = g[y].length, z = a1.Gb(y), k = z.position + n + e, 0 !== z.oa && (k += z.Ho(Math.max(u, q))), A = 0; A < m; A++)if (g[y][A]) {
                    B = a1.Fb(A);
                    h = B.position + p + f;
                    0 !== B.oa && (h += B.Ho(Math.max(w, r)));
                    for(var D = g[y][A], M = D.length, S = 0; S < M; S++){
                        var R = D[S], I = R.measuredBounds;
                        v.h(0, 0);
                        for(var G = 1; G < R.rowSpan && !(y + G >= a1.rowCount); G++){
                            var ca = a1.Gb(y + G);
                            0 !== ca.oa && (v.height += ca.total);
                        }
                        for(G = 1; G < R.columnSpan && !(A + G >= a1.columnCount); G++)ca = a1.Fb(A + G), 0 !== ca.oa && (v.width += ca.total);
                        var X = B.oa + v.width, na = z.oa + v.height;
                        G = h;
                        ca = k;
                        var wa = X, db = na, gb = h, Db = k, eb = X, Ke = na;
                        h + X > c.width && (eb = Math.max(c.width - h, 0));
                        k + na > c.height && (Ke = Math.max(c.height - k, 0));
                        var Ua = R.alignment;
                        if (Ua.Yb()) {
                            Ua = a1.defaultAlignment;
                            Ua.sb() || (Ua = wc);
                            var rd = Ua.x;
                            var Eb = Ua.y;
                            var Le = Ua.offsetX;
                            Ua = Ua.offsetY;
                            var xc = B.alignment, Tc = z.alignment;
                            xc.sb() && (rd = xc.x, Le = xc.offsetX);
                            Tc.sb() && (Eb = Tc.y, Ua = Tc.offsetY);
                        } else rd = Ua.x, Eb = Ua.y, Le = Ua.offsetX, Ua = Ua.offsetY;
                        if (isNaN(rd) || isNaN(Eb)) Eb = rd = .5, Ua = Le = 0;
                        xc = I.width;
                        Tc = I.height;
                        var nc = R.margin, ec = nc.left + nc.right, ef = nc.top + nc.bottom, sd = Ol(R, z, B, !1);
                        !isNaN(R.desiredSize.width) || sd !== nd && sd !== Wk || (xc = Math.max(X - ec, 0));
                        !isNaN(R.desiredSize.height) || sd !== nd && sd !== Xk || (Tc = Math.max(na - ef, 0));
                        X = R.maxSize;
                        na = R.minSize;
                        xc = Math.min(X.width, xc);
                        Tc = Math.min(X.height, Tc);
                        xc = Math.max(na.width, xc);
                        Tc = Math.max(na.height, Tc);
                        X = Tc + ef;
                        G += wa * rd - (xc + ec) * rd + Le + nc.left;
                        ca += db * Eb - X * Eb + Ua + nc.top;
                        R.visible && (Zb(gb, Db, eb, Ke, G, ca, I.width, I.height) ? R.arrange(G, ca, xc, Tc) : R.arrange(G, ca, xc, Tc, new N(gb, Db, eb, Ke)));
                    }
                }
            }
            L.free(v);
            for(a1 = 0; a1 < d; a1++)c = b[a1], f = c instanceof W ? c : null, null !== f && kl(f) && (f = c.actualBounds, c.naturalBounds.ka(), c.naturalBounds.h(0, 0, f.width, f.height), c.naturalBounds.freeze());
        }
    };
    function Um() {
        this.xa = "Base";
    }
    la(Um, Zl);
    Um.prototype.measure = function() {};
    Um.prototype.arrange = function() {};
    function Vm() {
        this.xa = "Base";
    }
    la(Vm, Zl);
    Vm.prototype.measure = function() {};
    Vm.prototype.arrange = function() {};
    function Wm() {
        this.xa = "Base";
    }
    la(Wm, Zl);
    Wm.prototype.measure = function(a1, b, c, d, e, f, g) {
        1 < d.length && C("Viewbox Panel cannot contain more than one GraphObject.");
        d = d[0];
        d.Ca = 1;
        d.Tj();
        d.measure(Infinity, Infinity, f, g);
        var h = d.measuredBounds, k = d.margin, l = k.right + k.left;
        k = k.top + k.bottom;
        if (isFinite(b) || isFinite(c)) {
            var m = d.scale, n = h.width;
            h = h.height;
            var p = Math.max(b - l, 0), q = Math.max(c - k, 0), r = 1;
            a1.viewboxStretch === mg ? 0 !== n && 0 !== h && (r = Math.min(p / n, q / h)) : 0 !== n && 0 !== h && (r = Math.max(p / n, q / h));
            0 === r && (r = 1E-4);
            d.Ca *= r;
            m !== d.scale && (pj(d, !0), d.measure(Infinity, Infinity, f, g));
        }
        h = d.measuredBounds;
        e.width = isFinite(b) ? b : Math.max(h.width + l, 0);
        e.height = isFinite(c) ? c : Math.max(h.height + k, 0);
    };
    Wm.prototype.arrange = function(a1, b, c) {
        b = b[0];
        var d = b.measuredBounds, e = b.margin, f = Math.max(d.width + (e.right + e.left), 0);
        e = Math.max(d.height + (e.top + e.bottom), 0);
        var g = b.alignment;
        g.Yb() && (g = a1.defaultAlignment);
        g.sb() || (g = wc);
        b.arrange(c.width * g.x - f * g.x + g.offsetX, c.height * g.y - e * g.y + g.offsetY, d.width, d.height);
    };
    function Xm() {
        this.xa = "Base";
    }
    la(Xm, Zl);
    Xm.prototype.measure = function() {};
    Xm.prototype.arrange = function() {};
    Xm.prototype.hc = function(a1, b, c) {
        c = a1.Df() * c.scale;
        0 >= c && (c = 1);
        var d = a1.gridCellSize, e = d.width;
        d = d.height;
        var f = a1.naturalBounds, g = a1.actualBounds, h = f.width, k = f.height, l = Math.ceil(h / e), m = Math.ceil(k / d), n = a1.gridOrigin, p = n.x;
        n = n.y;
        b.save();
        b.beginPath();
        b.rect(0, 0, h, k);
        b.clip();
        b.Se();
        for(var q = [], r = a1.O.s, u = r.length, w = 0; w < u; w++){
            var v = r[w], y = [];
            q.push(y);
            if (v.visible) {
                var z = v.interval;
                if (!(0 > z)) {
                    v = Zj(v.figure);
                    for(var A = 0; A < u; A++)if (A !== w) {
                        var B = r[A];
                        B.visible && Zj(B.figure) === v && (B = B.interval, B > z && y.push(B));
                    }
                }
            }
        }
        r = a1.O.s;
        u = r.length;
        for(w = 0; w < u; w++){
            var D = r[w];
            if (D.visible && (y = D.interval || 1, v = Math.abs(y), !(2 > e * v * c))) {
                z = D.segmentIndex;
                if (!isFinite(z) || isNaN(z)) z = 0;
                0 > z && (z = v - Math.min(-z, v));
                z = Math.round(z % v);
                v = D.opacity;
                A = 1;
                if (1 !== v) {
                    if (0 === v) continue;
                    A = b.globalAlpha;
                    b.globalAlpha = A * v;
                }
                B = q[w];
                var M = !1, S = D.strokeDashArray;
                null !== S && (M = !0, b.hs(S, D.strokeDashOffset));
                if ("LineV" === D.figure && null !== D.stroke && 0 < D.strokeWidth) {
                    b.lineWidth = D.strokeWidth;
                    ji(a1, b, D.stroke, !1, !1, f, g);
                    b.beginPath();
                    for(S = D = Math.floor((p - e) / e); S <= D + l; S++){
                        var R = S * e + p;
                        0 <= R && R <= h && Ym(S, y, z, B) && (b.moveTo(R, 0), b.lineTo(R, k));
                    }
                    b.stroke();
                    b.Se();
                } else if ("LineH" === D.figure && null !== D.stroke && 0 < D.strokeWidth) {
                    b.lineWidth = D.strokeWidth;
                    ji(a1, b, D.stroke, !1, !1, f, g);
                    b.beginPath();
                    for(S = D = Math.floor((n - d) / d); S <= D + m; S++)R = S * d + n, 0 <= R && R <= k && Ym(S, y, z, B) && (b.moveTo(0, R), b.lineTo(h, R));
                    b.stroke();
                    b.Se();
                } else if ("BarV" === D.figure && null !== D.fill) for(ji(a1, b, D.fill, !0, !1, f, g), D = D.width, isNaN(D) && (D = e), R = S = Math.floor((p - e) / e); R <= S + l; R++){
                    var I = R * e + p;
                    0 <= I + D && I <= h && Ym(R, y, z, B) && b.fillRect(I, 0, D, k);
                }
                else if ("BarH" === D.figure && null !== D.fill) for(ji(a1, b, D.fill, !0, !1, f, g), D = D.height, isNaN(D) && (D = d), R = S = Math.floor((n - d) / d); R <= S + m; R++)I = R * d + n, 0 <= I + D && I <= k && Ym(R, y, z, B) && b.fillRect(0, I, h, D);
                M && b.es();
                1 !== v && (b.globalAlpha = A);
            }
        }
        b.restore();
        b.Vc(!1);
    };
    function Ym(a1, b, c, d) {
        if (0 > b) return a1 % b === c;
        if (a1 % b !== c) return !1;
        b = d.length;
        for(var e = 0; e < b; e++)if (a1 % d[e] === c) return !1;
        return !0;
    }
    function Zm() {
        this.xa = "Base";
    }
    la(Zm, Zl);
    Zm.prototype.measure = function(a1, b, c, d, e) {
        var f = d.length;
        if (a1 instanceof te || a1 instanceof T) {
            var g = null, h = null;
            a1 instanceof T && (g = a1);
            a1 instanceof te && (h = a1, g = h.adornedPart, null === a1.j && (a1.j = []));
            if (g instanceof T) {
                var k = g;
                if (0 === f) Pb(a1.naturalBounds, 0, 0), a1.measuredBounds.h(0, 0, 0, 0);
                else {
                    var l = a1 instanceof te ? null : g.path;
                    b = g.routeBounds;
                    c = a1.jg;
                    c.h(0, 0, b.width, b.height);
                    var m = k.points, n = g.pointsCount;
                    null !== h ? h.Tl(!1) : null !== g && g.Tl(!1);
                    h = b.width;
                    var p = b.height, q = a1.j;
                    q.length = 0;
                    if (null !== l) {
                        $m(a1, h, p, l);
                        var r = l.measuredBounds;
                        c.ed(r);
                        q.push(r);
                    }
                    r = ld.alloc();
                    for(var u = J.alloc(), w = J.alloc(), v = 0; v < f; v++){
                        var y = d[v];
                        if (y !== l) {
                            if (y.isPanelMain && y instanceof Bf) {
                                $m(a1, h, p, y);
                                var z = y.measuredBounds;
                                c.ed(z);
                                q.push(z);
                            } else if (2 > n) y.measure(Infinity, Infinity, 0, 0), z = y.measuredBounds, c.ed(z), q.push(z);
                            else {
                                var A = y.segmentIndex, B = y.segmentFraction, D = y.alignmentFocus;
                                D.Mc() && (D = wc);
                                var M = y.segmentOrientation, S = y.segmentOffset;
                                if (isNaN(A)) {
                                    var R = k.ua;
                                    z = Ea();
                                    R.Qu(B, z);
                                    var I = J.allocAt(z[0], z[1]);
                                    I.add(k.i(0));
                                    R.type === P.j ? I.offset(-R.startX, -R.startY) : (R = R.figures.first(), null !== R && I.offset(-R.startX, -R.startY));
                                    R = z[2];
                                    if (M !== Zf) {
                                        var G = k.computeAngle(y, M, R);
                                        y.Lb = G;
                                    }
                                    G = I.x - b.x;
                                    var ca = I.y - b.y;
                                    J.free(I);
                                    Ga(z);
                                } else if (A < -n || A >= n) z = J.alloc(), k.vg(), k.computeMidPoint(z), R = k.midAngle, M !== Zf && (G = k.computeAngle(y, M, R), y.Lb = G), G = z.x - b.x, ca = z.y - b.y, J.free(z);
                                else {
                                    G = 0;
                                    0 <= A ? (ca = m.M(A), z = A < n - 1 ? m.M(A + 1) : ca) : (G = n + A, ca = m.M(G), z = 0 < G ? m.M(G - 1) : ca);
                                    if (ca.Xa(z)) {
                                        0 <= A ? (R = 0 < A ? m.M(A - 1) : ca, G = A < n - 2 ? m.M(A + 2) : z) : (R = G < n - 1 ? m.M(G + 1) : ca, G = 1 < G ? m.M(G - 2) : z);
                                        I = R.Bf(ca);
                                        var X = z.Bf(G);
                                        R = I > X + 10 ? 0 <= A ? R.ab(ca) : ca.ab(R) : X > I + 10 ? 0 <= A ? z.ab(G) : G.ab(z) : 0 <= A ? R.ab(G) : G.ab(R);
                                    } else R = 0 <= A ? ca.ab(z) : z.ab(ca);
                                    M !== Zf && (G = k.computeAngle(y, M, R), y.Lb = G);
                                    G = ca.x + (z.x - ca.x) * B - b.x;
                                    ca = ca.y + (z.y - ca.y) * B - b.y;
                                }
                                y.measure(Infinity, Infinity, 0, 0);
                                z = y.measuredBounds;
                                I = y.naturalBounds;
                                var na = 0;
                                y instanceof Bf && (na = y.strokeWidth);
                                X = I.width + na;
                                var wa = I.height + na;
                                r.reset();
                                r.translate(-z.x, -z.y);
                                r.scale(y.scale, y.scale);
                                r.rotate(M === Zf ? y.angle : R, X / 2, wa / 2);
                                M !== an && M !== bn || r.rotate(90, X / 2, wa / 2);
                                M !== cn && M !== dn || r.rotate(-90, X / 2, wa / 2);
                                M === en && (45 < R && 135 > R || 225 < R && 315 > R) && r.rotate(-R, X / 2, wa / 2);
                                I = new N(0, 0, X, wa);
                                u.xi(I, D);
                                r.Ga(u);
                                D = -u.x + na / 2 * y.scale;
                                y = -u.y + na / 2 * y.scale;
                                w.assign(S);
                                na = isNaN(S.x);
                                var db = isNaN(S.y);
                                if (na || db) {
                                    X = X / 2 + 3;
                                    wa = wa / 2 + 3;
                                    var gb = 45 <= R && 135 >= R, Db = 225 <= R && 315 >= R;
                                    M === Zf && (gb || Db) ? (w.x = db ? X : S.y, w.y = na ? wa : S.x, gb ? 0 <= A || isNaN(A) && .5 > B || !na || (w.y = -wa) : Db && ((0 <= A || isNaN(A) && .5 > B) && na && (w.y = -wa), db && (w.x = -X))) : (na && (w.x = 0 <= A || isNaN(A) && .5 > B ? X : -X), db && (w.y = -wa), w.rotate(R));
                                } else w.rotate(R);
                                G += w.x;
                                ca += w.y;
                                I.set(z);
                                I.h(G + D, ca + y, z.width, z.height);
                                q.push(I);
                                c.ed(I);
                            }
                        }
                    }
                    if (null !== g) for(d = g.labelNodes; d.next();)d.value.measure(Infinity, Infinity);
                    a1.jg = c;
                    a1.position.h(b.x + c.x, b.y + c.y);
                    Pb(e, c.width || 0, c.height || 0);
                    ld.free(r);
                    J.free(u);
                    J.free(w);
                }
            }
        }
    };
    Zm.prototype.arrange = function(a1, b) {
        var c = b.length;
        if (a1 instanceof te || a1 instanceof T) {
            var d = a1, e = null;
            a1 instanceof te && (e = a1, d = e.adornedPart);
            var f = a1 instanceof te ? null : d.path, g = a1.j;
            if (0 !== g.length) {
                var h = 0;
                if (null !== f && h < g.length) {
                    var k = g[h];
                    h++;
                    f.arrange(k.x - a1.jg.x, k.y - a1.jg.y, k.width, k.height);
                }
                for(k = 0; k < c; k++){
                    var l = b[k];
                    if (l !== f && h < g.length) {
                        var m = g[h];
                        h++;
                        l.arrange(m.x - a1.jg.x, m.y - a1.jg.y, m.width, m.height);
                    }
                }
            }
            b = d.points;
            c = b.count;
            if (2 <= c && a1 instanceof T) for(f = a1.labelNodes; f.next();){
                var n = a1;
                g = f.value;
                h = g.segmentIndex;
                k = g.segmentFraction;
                var p = g.alignmentFocus;
                l = g.segmentOrientation;
                m = g.segmentOffset;
                if (isNaN(h)) {
                    var q = n.ua;
                    var r = Ea();
                    q.Qu(k, r);
                    var u = J.allocAt(r[0], r[1]);
                    u.add(n.i(0));
                    q.type === P.j ? u.offset(-q.startX, -q.startY) : (q = q.figures.first(), u.offset(-q.startX, -q.startY));
                    q = r[2];
                    l !== Zf && (n = n.computeAngle(g, l, q), g.angle = n);
                    n = u.x;
                    var w = u.y;
                    J.free(u);
                    Ga(r);
                } else if (h < -c || h >= c) r = J.alloc(), q = n, w = r, q.vg(), q.computeMidPoint(w), q = n.midAngle, l !== Zf && (n = n.computeAngle(g, l, q), g.angle = n), n = r.x, w = r.y, J.free(r);
                else {
                    u = 0;
                    0 <= h ? (r = b.s[h], w = h < c - 1 ? b.s[h + 1] : r) : (u = c + h, r = b.s[u], w = 0 < u ? b.s[u - 1] : r);
                    if (r.Xa(w)) {
                        0 <= h ? (q = 0 < h ? b.s[h - 1] : r, u = h < c - 2 ? b.s[h + 2] : w) : (q = u < c - 1 ? b.s[u + 1] : r, u = 1 < u ? b.s[u - 2] : w);
                        var v = q.Bf(r), y = w.Bf(u);
                        q = v > y + 10 ? 0 <= h ? q.ab(r) : r.ab(q) : y > v + 10 ? 0 <= h ? w.ab(u) : u.ab(w) : 0 <= h ? q.ab(u) : u.ab(q);
                    } else q = 0 <= h ? r.ab(w) : w.ab(r);
                    l !== Zf && (n = n.computeAngle(g, l, q), g.angle = n);
                    n = r.x + (w.x - r.x) * k;
                    w = r.y + (w.y - r.y) * k;
                }
                if (p.xs()) g.location = new J(n, w);
                else {
                    p.Mc() && (p = wc);
                    r = ld.alloc();
                    r.reset();
                    r.scale(g.scale, g.scale);
                    r.rotate(g.angle, 0, 0);
                    var z = g.naturalBounds;
                    u = N.allocAt(0, 0, z.width, z.height);
                    v = J.alloc();
                    v.xi(u, p);
                    r.Ga(v);
                    p = -v.x;
                    y = -v.y;
                    var A = z.width, B = z.height;
                    z = J.alloc();
                    z.assign(m);
                    var D = isNaN(m.x), M = isNaN(m.y);
                    if (D || M) {
                        A = A / 2 + 3;
                        B = B / 2 + 3;
                        var S = 45 <= q && 135 >= q, R = 225 <= q && 315 >= q;
                        l === Zf && (S || R) ? (z.x = M ? A : m.y, z.y = D ? B : m.x, S ? 0 <= h || isNaN(h) && .5 > k || !D || (z.y = -B) : R && ((0 <= h || isNaN(h) && .5 > k) && D && (z.y = -B), M && (z.x = -A))) : (D && (z.x = 0 <= h || isNaN(h) && .5 > k ? A : -A), M && (z.y = -B), z.rotate(q));
                    } else z.rotate(q);
                    n += z.x;
                    w += z.y;
                    r.op(u);
                    p += u.x;
                    y += u.y;
                    h = J.allocAt(n + p, w + y);
                    g.move(h);
                    J.free(h);
                    J.free(z);
                    J.free(v);
                    N.free(u);
                    ld.free(r);
                }
            }
            null !== e ? e.Tl(!1) : d.Tl(!1);
            d = fn(a1);
            a1.location.h(a1.position.x + d.x, a1.position.y + d.y);
            J.free(d);
        }
    };
    function $m(a1, b, c, d) {
        if (!1 !== uj(d)) {
            var e = d.strokeWidth;
            0 === e && a1 instanceof te && a1.type === W.Link && a1.adornedObject instanceof Bf && (e = a1.adornedObject.strokeWidth);
            e *= d.Ca;
            a1 instanceof T && null !== a1.ua ? (a1 = a1.geometry.bounds, d.Ge(a1.x - e / 2, a1.y - e / 2, a1.width + e, a1.height + e)) : a1 instanceof te && null !== a1.adornedPart.ua ? (a1 = a1.adornedPart.ua.bounds, d.Ge(a1.x - e / 2, a1.y - e / 2, a1.width + e, a1.height + e)) : d.Ge(-(e / 2), -(e / 2), b + e, c + e);
            e = d.desiredSize;
            e.w() || null === d.ua ? d.ec.h(0, 0, e.width, e.height) : d.ec.assign(d.ua.bounds);
            pj(d, !1);
        }
    }
    function gn() {
        this.xa = "Base";
    }
    la(gn, Zl);
    gn.prototype.measure = function(a1, b, c, d, e, f, g) {
        var h = a1.Qb();
        a1.graduatedBounds = [];
        var k = h.margin, l = k.right + k.left, m = k.top + k.bottom;
        h.measure(b, c, f, g);
        var n = h.measuredBounds, p = new N(-k.left, -k.top, Math.max(n.width + l, 0), Math.max(n.height + m, 0));
        a1.graduatedBounds.push(p);
        e.assign(p);
        for(var q = h.geometry, r = h.strokeWidth, u = q.flattenedSegments, w = q.flattenedLengths, v = q.flattenedTotalLength, y = u.length, z = 0, A = 0, B = Ea(), D = 0; D < y; D++){
            var M = u[D], S = [];
            A = z = 0;
            for(var R = M.length, I = 0; I < R; I += 2){
                var G = M[I], ca = M[I + 1];
                if (0 !== I) {
                    var X = 180 * Math.atan2(ca - A, G - z) / Math.PI;
                    0 > X && (X += 360);
                    S.push(X);
                }
                z = G;
                A = ca;
            }
            B.push(S);
        }
        if (null === a1.graduatedIntervals) {
            for(var na = [], wa = a1.O.s, db = wa.length, gb = 0; gb < db; gb++){
                var Db = wa[gb], eb = [];
                na.push(eb);
                if (Db.visible) {
                    var Ke = Db.interval;
                    if (!(0 > Ke)) {
                        for(var Ua = 0; Ua < db; Ua++)if (Ua !== gb) {
                            var rd = wa[Ua];
                            if (rd.visible && Db.constructor === rd.constructor) {
                                var Eb = rd.interval;
                                Eb > Ke && eb.push(Eb);
                            }
                        }
                    }
                }
            }
            a1.graduatedIntervals = na;
        }
        var Le = a1.graduatedIntervals;
        var xc = a1.O.s, Tc = xc.length, nc = 0, ec = 0, ef = v;
        a1.graduatedMarks = [];
        for(var sd, xh = 0; xh < Tc; xh++){
            var oc = xc[xh];
            sd = [];
            if (oc.visible && oc !== h) {
                var Fb = Math.abs(oc.interval), zi = a1.graduatedTickUnit;
                if (!(2 > zi * Fb * v / a1.graduatedRange && null === oc.graduatedSkip)) {
                    var rg = w[0][0], Fd = 0, fc = 0;
                    ec = v * oc.graduatedStart - 1E-4;
                    ef = v * oc.graduatedEnd + 1E-4;
                    var Lf = zi * Fb, pc = a1.graduatedTickBase;
                    if (pc < a1.graduatedMin) {
                        var ff = (a1.graduatedMin - pc) / Lf;
                        ff = 0 === ff % 1 ? ff : Math.floor(ff + 1);
                        pc += ff * Lf;
                    } else pc > a1.graduatedMin + Lf && (pc -= Math.floor((pc - a1.graduatedMin) / Lf) * Lf);
                    for(var nk = Le[xh], Ai = pc, Pn = 1E-6 * a1.graduatedMax, Td = 1; pc <= a1.graduatedMax + Pn; Td++){
                        a: {
                            for(var ne = nk.length, sg = 0; sg < ne; sg++){
                                var gf = (pc - a1.graduatedTickBase) % (nk[sg] * a1.graduatedTickUnit), yh = 1E-6 * a1.graduatedTickUnit;
                                if (gf < yh && gf > -yh) {
                                    var hf = !1;
                                    break a;
                                }
                            }
                            hf = !0;
                        }
                        if (hf && (pc > a1.graduatedMax && (pc = a1.graduatedMax), null === oc.graduatedSkip || oc instanceof Pg && !oc.graduatedSkip(pc, oc) || oc instanceof Bf && !oc.graduatedSkip(pc, oc)) && (nc = (pc - a1.graduatedMin) * v / a1.graduatedRange, nc > v && (nc = v), ec <= nc && nc <= ef)) {
                            for(var Ud = B[Fd][fc], Me = w[Fd][fc]; Fd < w.length;){
                                for(; nc > rg && fc < w[Fd].length - 1;)fc++, Ud = B[Fd][fc], Me = w[Fd][fc], rg += Me;
                                if (nc <= rg) break;
                                Fd++;
                                fc = 0;
                                Ud = B[Fd][fc];
                                Me = w[Fd][fc];
                                rg += Me;
                            }
                            var gc = u[Fd], Gd = gc[2 * fc], ok = gc[2 * fc + 1], oe = (nc - (rg - Me)) / Me, zh = new J(Gd + (gc[2 * fc + 2] - Gd) * oe + r / 2 - q.bounds.x, ok + (gc[2 * fc + 3] - ok) * oe + r / 2 - q.bounds.y);
                            zh.scale(h.scale, h.scale);
                            a: {
                                var td = Ud, Mf = B[Fd];
                                if (!(.5005 > oe && .4995 < oe)) {
                                    var Hd = td;
                                    .5 > oe ? 0 < fc ? Hd = Mf[fc - 1] : K.$(gc[0], gc[gc.length - 2]) && K.$(gc[1], gc[gc.length - 1]) && (Hd = Mf[Mf.length - 1]) : .5 < oe && (fc + 1 < Mf.length ? Hd = Mf[fc + 1] : K.$(gc[0], gc[gc.length - 2]) && K.$(gc[1], gc[gc.length - 1]) && (Hd = Mf[0]));
                                    if (td !== Hd) {
                                        var tg = Math.abs(td - Hd);
                                        180 < tg && (td < Hd ? td += 360 : Hd += 360, tg = Math.abs(td - Hd));
                                        if (5E-4 > oe || .9995 < oe) {
                                            Ud = (td + Hd) / 2 % 360;
                                            break a;
                                        }
                                        if (10 > tg) {
                                            var Ah = 1 - Math.abs(.5 - oe);
                                            Ud = (td * Ah + Hd * (1 - Ah)) % 360;
                                            break a;
                                        }
                                    }
                                }
                                Ud = td;
                            }
                            if (oc instanceof Pg) {
                                var ed = "";
                                null !== oc.graduatedFunction ? (ed = oc.graduatedFunction(pc, oc), ed = null !== ed && void 0 !== ed ? ed.toString() : "") : ed = (+pc.toFixed(2)).toString();
                                "" !== ed && sd.push({
                                    Zl: zh,
                                    angle: Ud,
                                    text: ed
                                });
                            } else sd.push({
                                Zl: zh,
                                angle: Ud
                            });
                        }
                        pc = Ai + Td * Lf;
                    }
                }
            }
            a1.graduatedMarks.push(sd);
        }
        Ga(B);
        var hb = a1.graduatedMarks;
        if (null !== hb) for(var Bi = d.length, Sb = 0; Sb < Bi; Sb++){
            var Va = d[Sb], Tb = hb[Sb];
            if (Va.visible && Va !== h && 0 !== Tb.length) {
                if (Va instanceof Bf) {
                    var pe = a1, Ne = e, Nf = Va.alignmentFocus;
                    Nf.Mc() && (Nf = tc);
                    var Qn = Va.angle;
                    Va.Lb = 0;
                    Va.measure(Infinity, Infinity, 0, 0);
                    Va.Lb = Qn;
                    var pk = Va.measuredBounds, Bh = pk.width, Of = pk.height, ug = N.allocAt(0, 0, Bh, Of), hc = J.alloc();
                    hc.xi(ug, Nf);
                    N.free(ug);
                    for(var Id = -hc.x, ud = -hc.y, Hc = new N, jf = Tb.length, Ch = 0; Ch < jf; Ch++)for(var kf = Tb[Ch], qk = kf.Zl.x, Dh = kf.Zl.y, Pa = kf.angle, fd = 0; 4 > fd; fd++){
                        switch(fd){
                            case 0:
                                hc.h(Id, ud);
                                break;
                            case 1:
                                hc.h(Id + Bh, ud);
                                break;
                            case 2:
                                hc.h(Id, ud + Of);
                                break;
                            case 3:
                                hc.h(Id + Bh, ud + Of);
                        }
                        hc.rotate(Pa + Va.angle);
                        hc.offset(qk, Dh);
                        0 === Ch && 0 === fd ? Hc.h(hc.x, hc.y, 0, 0) : Hc.Ye(hc);
                        hc.offset(-qk, -Dh);
                        hc.rotate(-Pa - Va.angle);
                    }
                    J.free(hc);
                    null !== pe.graduatedBounds && pe.graduatedBounds.push(Hc);
                    Yb(Ne, Hc.x, Hc.y, Hc.width, Hc.height);
                } else if (Va instanceof Pg) {
                    var Uc = a1, rk = e;
                    null === Uc.temporaryTextBlock && (Uc.temporaryTextBlock = new Pg);
                    var qc = Uc.temporaryTextBlock;
                    hn(qc, Va);
                    var Oe = Va.alignmentFocus;
                    Oe.Mc() && (Oe = tc);
                    for(var Vc = Va.segmentOrientation, Eh = Va.segmentOffset, lf = new N, Ci = 0, Fh = 0, Jd = 0, Pf = 0, mf = 0, Gh = Tb.length, Pe = 0; Pe < Gh; Pe++){
                        var Vd = Tb[Pe];
                        Ci = Vd.Zl.x;
                        Fh = Vd.Zl.y;
                        Jd = Vd.angle;
                        mf = Pf = Va.angle;
                        Vc !== Zf && (mf = Vc === jn || Vc === kn ? Jd + Va.angle : Jd, Pf = T.computeAngle(Vc, mf));
                        qc.Lb = Pf;
                        qc.text = Vd.text || "";
                        qc.measure(Infinity, Infinity, 0, 0);
                        var Qe = qc.measuredBounds, qe = qc.naturalBounds, Re = qe.width, Qf = qe.height, vd = ld.alloc();
                        vd.reset();
                        vd.translate(-Qe.x, -Qe.y);
                        vd.scale(qc.scale, qc.scale);
                        vd.rotate(mf, Re / 2, Qf / 2);
                        Vc !== an && Vc !== bn || vd.rotate(90, Re / 2, Qf / 2);
                        Vc !== cn && Vc !== dn || vd.rotate(-90, Re / 2, Qf / 2);
                        Vc === en && (45 < Jd && 135 > Jd || 225 < Jd && 315 > Jd) && vd.rotate(-Jd, Re / 2, Qf / 2);
                        var vg = N.allocAt(0, 0, Re, Qf), Se = J.alloc();
                        Se.xi(vg, Oe);
                        vd.Ga(Se);
                        var wg = -Se.x, Rn = -Se.y, re = J.alloc();
                        re.assign(Eh);
                        isNaN(re.x) && (re.x = Re / 2 + 3);
                        isNaN(re.y) && (re.y = -(Qf / 2 + 3));
                        re.rotate(Jd);
                        Ci += re.x + wg;
                        Fh += re.y + Rn;
                        var Rf = new N(Ci, Fh, Qe.width, Qe.height), Di = new N(Qe.x, Qe.y, Qe.width, Qe.height), Sn = new N(qe.x, qe.y, qe.width, qe.height);
                        Vd.Sz = Pf;
                        Vd.lineCount = qc.lineCount;
                        Vd.lines = [
                            qc.Db,
                            qc.Ih,
                            qc.df,
                            qc.Le,
                            qc.Qc,
                            qc.Rb,
                            qc.ze
                        ];
                        Vd.actualBounds = Rf;
                        Vd.measuredBounds = Di;
                        Vd.naturalBounds = Sn;
                        0 === Pe ? lf.assign(Rf) : lf.ed(Rf);
                        J.free(re);
                        J.free(Se);
                        N.free(vg);
                        ld.free(vd);
                    }
                    null !== Uc.graduatedBounds && Uc.graduatedBounds.push(lf);
                    Yb(rk, lf.x, lf.y, lf.width, lf.height);
                }
                pj(Va, !1);
            }
        }
    };
    gn.prototype.arrange = function(a1, b, c) {
        if (null !== a1.graduatedBounds) {
            var d = a1.Qb(), e = a1.graduatedMarks;
            if (null !== e) {
                var f = a1.graduatedBounds, g = 0, h = f[g];
                g++;
                null !== d && d.arrange(h.x - c.x, h.y - c.y, h.width, h.height);
                for(var k = b.length, l = 0; l < k; l++){
                    var m = b[l];
                    h = e[l];
                    m.visible && m !== d && 0 !== h.length && (h = f[g], g++, m.arrange(h.x - c.x, h.y - c.y, h.width, h.height));
                }
                a1.graduatedBounds = null;
            }
        }
    };
    gn.prototype.hc = function(a1, b, c) {
        var d = c.$i;
        c.$i = !0;
        var e = a1.naturalBounds, f = e.width, g = e.height;
        e = b instanceof ii;
        b.save();
        b.beginPath();
        b.rect(-1, -1, f + 1, g + 1);
        b.clip();
        b.Se();
        f = a1.Qb();
        f.hc(b, c);
        g = a1.Df() * c.scale;
        0 >= g && (g = 1);
        for(var h = f.actualBounds, k = a1.O.s, l = a1.graduatedMarks, m = k.length, n = 0; n < m; n++){
            var p = k[n], q = l[n], r = q.length;
            if (p.visible && p !== f && 0 !== q.length) {
                if (p instanceof Bf) {
                    if (!(2 > a1.graduatedTickUnit * p.interval * f.geometry.flattenedTotalLength / a1.graduatedRange * g && null === p.graduatedSkip)) {
                        var u = p.measuredBounds, w = p.strokeWidth * p.scale, v = p.alignmentFocus;
                        v.Mc() && (v = tc);
                        for(var y = 0; y < r; y++){
                            var z = q[y].Zl, A = q[y].angle, B = v, D = p.Bb;
                            D.reset();
                            D.translate(z.x + h.x, z.y + h.y);
                            D.rotate(A + p.angle, 0, 0);
                            D.translate(-u.width * B.x + B.offsetX + w / 2, -u.height * B.y + B.offsetY + w / 2);
                            D.scale(p.scale, p.scale);
                            Ll(p, !1);
                            p.wh.set(p.Bb);
                            p.Jk = p.scale;
                            Ml(p, !1);
                            p.hc(b, c);
                            e && (a1.svg.appendChild(p.svg), p.svg = null);
                            p.Bb.reset();
                        }
                    }
                } else if (p instanceof Pg) for(null === a1.temporaryTextBlock && (a1.temporaryTextBlock = new Pg), u = a1.temporaryTextBlock, hn(u, p), w = 0; w < r; w++)v = q[w], v.actualBounds && v.measuredBounds && v.naturalBounds && (u.fc = v.text || "", u.Lb = v.Sz || 0, u.Gc = v.lineCount || 0, y = v.lines, void 0 !== y && (u.Db = y[0], u.Ih = y[1], u.df = y[2], u.Le = y[3], u.Qc = y[4], u.Rb = y[5], u.ze = y[6]), v.naturalBounds && (u.ec = v.naturalBounds), v.actualBounds && (y = v.actualBounds, u.arrange(y.x, y.y, y.width, y.height)), y = v.actualBounds, u.arrange(y.x, y.y, y.width, y.height), z = v.measuredBounds, v = v.naturalBounds, A = u.Bb, A.reset(), A.translate(y.x + h.x, y.y + h.y), A.translate(-z.x, -z.y), u.mo(A, v.x, v.y, v.width, v.height), Ll(u, !1), u.wh.set(u.Bb), u.Jk = u.scale, Ml(u, !1), u.Ng = p.part, u.Me = p.panel, u.hc(b, c), u.Me = null, u.Ng = null, e && (a1.svg.appendChild(u.svg), u.svg = null));
            }
        }
        c.$i = d;
        b.restore();
        b.Vc(!0);
    };
    function W(a1, b) {
        Y.call(this);
        this.na = null;
        if (void 0 === a1) this.na = W.Position;
        else if ("string" === typeof a1) {
            var c = Xl.I(a1);
            null !== c && (this.na = c);
        } else a1 instanceof Zl ? this.na = a1 : a1 && (this.na = W.Position, b = a1);
        null === this.na && C("Panel type not specified or PanelLayout not loaded: " + a1);
        this.l = this.l | 4194304 | (this.na === W.Grid ? 1048576 : 0);
        this.O = new F;
        this.zb = lc;
        this.Sm = Sc;
        this.Uf = Yk;
        this.$g = null;
        this.$e = "";
        this.jg = new N(NaN, NaN, NaN, NaN);
        this.T = this.F = null;
        this.wo = mg;
        this.hn = Jb;
        this.jn = pb;
        this.ub = this.ra = null;
        this.yn = NaN;
        this.ge = this.Hh = null;
        b && Object.assign(this, b);
    }
    la(W, Y);
    W.prototype.cloneProtected = function(a1) {
        Y.prototype.cloneProtected.call(this, a1);
        a1.na = this.na;
        a1.zb = this.zb.J();
        a1.Sm = this.Sm.J();
        a1.Uf = this.Uf;
        a1.$e = this.$e;
        a1.jg.assign(this.jg);
        null !== this.T && (a1.T = this.T.copy(a1));
        a1.wo = this.wo;
        a1.hn = this.hn.J();
        a1.jn = this.jn.J();
        null !== this.ra && (a1.ra = this.ra.copy());
        a1.ub = this.ub;
        a1.yn = this.yn;
        a1.Hh = this.Hh;
    };
    W.prototype.Af = function(a1) {
        Y.prototype.Af.call(this, a1);
        a1.O = this.O;
        for(var b = a1.O.s, c = b.length, d = 0; d < c; d++)b[d].Me = a1;
        a1.$g = null;
    };
    W.prototype.copy = function() {
        var a1 = Y.prototype.copy.call(this);
        if (null !== a1) {
            for(var b = this.O.s, c = b.length, d = 0; d < c; d++){
                var e = b[d].copy();
                e.wi(a1);
                e.Ng = null;
                var f = a1.O, g = f.count;
                f.Hb(g, e);
                f = a1.part;
                if (null !== f) {
                    f.Rh = null;
                    null !== e.portId && f instanceof V && (f.Te = !0);
                    var h = a1.diagram;
                    null !== h && h.undoManager.isUndoingRedoing || f.cb(ee, "elements", a1, null, e, null, g);
                }
            }
            return a1;
        }
        return null;
    };
    t = W.prototype;
    t.toString = function() {
        return "Panel(" + this.type.name + ")#" + bb(this);
    };
    t.On = function(a1) {
        Y.prototype.On.call(this, a1);
        for(var b = this.O.s, c = b.length, d = 0; d < c; d++)b[d].On(a1);
    };
    t.hh = function(a1, b) {
        if (this.na === W.Grid) a1.yc(), this.na.hc(this, a1, b);
        else if (this.na === W.Graduated) a1.yc(), this.na.hc(this, a1, b);
        else {
            if (this.na === W.Table) {
                if (a1.yc(), a1 instanceof ii) {
                    var c = a1.yd;
                    a1.yd = Dl(a1, "gojs-ts");
                    ln(this, a1);
                    a1.nh.pop();
                    a1.yd = c;
                } else ln(this, a1);
            }
            (c = this.isClipping && this.na === W.Spot) && a1.save();
            for(var d = this.Qb(), e = this.O.s, f = e.length, g = 0; g < f; g++){
                var h = e[g];
                c && h === d && (a1.clipInsteadOfFill = !0);
                h.hc(a1, b);
                c && h === d && (a1.clipInsteadOfFill = !1);
            }
            c && (a1.restore(), a1.Vc(!0));
        }
    };
    function ln(a1, b) {
        b.lineCap = "butt";
        var c = 0 < a1.rowCount ? a1.rowDefs : null, d = 0 < a1.columnCount ? a1.colDefs : null;
        null !== c && mn(a1, b, !0, c, !0);
        null !== d && mn(a1, b, !1, d, !0);
        null !== c && nn(a1, b, !0, c);
        null !== d && nn(a1, b, !1, d);
        null !== c && mn(a1, b, !0, c, !1);
        null !== d && mn(a1, b, !1, d, !1);
    }
    function nn(a1, b, c, d) {
        for(var e = d.length, f = a1.actualBounds, g = a1.naturalBounds, h = !0, k = 0; k < e; k++){
            var l = d[k];
            if (void 0 !== l && 0 !== l.actual) {
                if (h) h = !1;
                else {
                    if (c) {
                        if (l.position > g.height) continue;
                    } else if (l.position > g.width) continue;
                    var m = l.separatorStrokeWidth;
                    isNaN(m) && (m = c ? a1.defaultRowSeparatorStrokeWidth : a1.defaultColumnSeparatorStrokeWidth);
                    var n = l.separatorStroke;
                    null === n && (n = c ? a1.defaultRowSeparatorStroke : a1.defaultColumnSeparatorStroke);
                    if (0 !== m && null !== n) {
                        ji(a1, b, n, !1, !1, g, f);
                        n = !1;
                        var p = l.separatorDashArray;
                        null === p && (p = c ? a1.defaultRowSeparatorDashArray : a1.defaultColumnSeparatorDashArray);
                        null !== p && (n = !0, b.hs(p, 0));
                        b.beginPath();
                        p = l.position + m;
                        c ? p > g.height && (m -= p - g.height) : p > g.width && (m -= p - g.width);
                        l = l.position + m / 2;
                        b.lineWidth = m;
                        m = a1.zb;
                        c ? (l += m.top, p = g.width - m.right, b.moveTo(m.left, l), b.lineTo(p, l)) : (l += m.left, p = g.height - m.bottom, b.moveTo(l, m.top), b.lineTo(l, p));
                        b.stroke();
                        b.Se();
                        n && b.es();
                    }
                }
            }
        }
    }
    function mn(a1, b, c, d, e) {
        for(var f = d.length, g = a1.actualBounds, h = a1.naturalBounds, k = on(a1, !0), l = on(a1, !1), m = 0; m < f; m++){
            var n = d[m];
            if (void 0 !== n && null !== n.background && n.coversSeparators !== e && 0 !== n.actual) {
                var p = c ? g.height : g.width;
                if (!(n.position > p)) {
                    var q = n.Wc(), r = n.separatorStrokeWidth;
                    isNaN(r) && (r = c ? a1.defaultRowSeparatorStrokeWidth : a1.defaultColumnSeparatorStrokeWidth);
                    var u = n.separatorStroke;
                    null === u && (u = c ? a1.defaultRowSeparatorStroke : a1.defaultColumnSeparatorStroke);
                    if (null === u || n.index === (c ? k : l)) r = 0;
                    q -= r;
                    r = n.position + r;
                    q += n.actual;
                    r + q > p && (q = p - r);
                    0 >= q || (p = a1.zb, ji(a1, b, n.background, !0, !1, h, g), c ? b.fillRect(p.left, r + p.top, g.width - (p.left + p.right), q) : b.fillRect(r + p.left, p.top, q, g.height - (p.top + p.bottom)));
                }
            }
        }
    }
    function on(a1, b) {
        for(var c = b ? a1.rowCount : a1.columnCount, d = 0; d < c; d++){
            var e = b ? a1.rowDefs[d] : a1.colDefs[d];
            if (void 0 !== e) return e.index;
        }
        return 0;
    }
    function Zj(a1) {
        return "LineV" === a1 || "BarV" === a1;
    }
    t.lv = function() {
        for(var a1 = this.O.s, b = a1.length, c = 0; c < b; c++)a1[c].lv();
        this.Uc = !0;
    };
    t.jk = function(a1, b, c) {
        if (!Y.prototype.jk.call(this, a1, b, c)) return !1;
        if (this.type === W.Table) c = this.svg.getElementsByClassName("gojs-ts"), c = 0 !== c.length ? c[0] : null, null !== c && (c.innerHTML = ""), a1.yd = c, ln(this, a1), a1.yd = null;
        else if (this.na === W.Grid || this.na === W.Graduated) return this.svg.innerHTML = "", this.svg.remove(), !1;
        c = this.O.s;
        for(var d = c.length, e = 0; e < d; e++)c[e].hc(a1, b);
        return !0;
    };
    t.mk = function() {
        return !0;
    };
    t.Zo = function(a1, b, c, d) {
        if (!this.isClipping) {
            if (this.Dd() && null !== a1.ak) {
                a1 = a1.ak;
                b = this.O.s;
                for(var e = 0, f = 0, g = 0; g < b.length; g++)if (b[g].Ed()) {
                    var h = b[g].actualBounds;
                    e = 0 === g ? h.x : Math.min(h.x, e);
                    f = 0 === g ? h.y : Math.min(h.y, f);
                }
                d.setAttributeNS(null, "clip-path", "path('M " + (a1.x - c.x - e) + "," + (a1.y - c.y - f) + " l " + a1.width + " 0 l 0 " + a1.height + " l -" + a1.width + " 0 z')");
            } else Y.prototype.Zo.call(this, a1, b, c, d);
        }
    };
    t.Rj = function(a1, b, c, d, e) {
        var f = this.se(), g = this.transform, h = 1 / (g.m11 * g.m22 - g.m12 * g.m21), k = g.m22 * h, l = -g.m12 * h, m = -g.m21 * h, n = g.m11 * h, p = h * (g.m21 * g.dy - g.m22 * g.dx), q = h * (g.m12 * g.dx - g.m11 * g.dy);
        if (null !== this.areaBackground) return g = this.actualBounds, K.Ff(g.left, g.top, g.right, g.bottom, a1, b, c, d, e);
        if (null !== this.background) return f = a1 * k + b * m + p, h = a1 * l + b * n + q, a1 = c * k + d * m + p, k = c * l + d * n + q, e.h(0, 0), c = this.naturalBounds, f = K.Ff(0, 0, c.width, c.height, f, h, a1, k, e), e.transform(g), f;
        f || (k = 1, m = l = 0, n = 1, q = p = 0);
        h = a1 * k + b * m + p;
        a1 = a1 * l + b * n + q;
        k = c * k + d * m + p;
        c = c * l + d * n + q;
        e.h(k, c);
        d = (k - h) * (k - h) + (c - a1) * (c - a1);
        l = !1;
        n = this.O.s;
        q = n.length;
        m = J.alloc();
        p = null;
        b = Infinity;
        var r = null, u = this.isClipping && this.na === W.Spot;
        u && (r = J.alloc(), p = this.Qb(), (l = p.Rj(h, a1, k, c, r)) && (b = (h - r.x) * (h - r.x) + (a1 - r.y) * (a1 - r.y)));
        for(var w = 0; w < q; w++){
            var v = n[w];
            v.visible && v !== p && v.Rj(h, a1, k, c, m) && (l = !0, v = (h - m.x) * (h - m.x) + (a1 - m.y) * (a1 - m.y), v < d && (d = v, e.set(m)));
        }
        u && (b > d && e.set(r), J.free(r));
        J.free(m);
        f && e.transform(g);
        return l;
    };
    t.Fj = function() {
        for(var a1 = this.O.s, b = a1.length, c = 0; c < b; c++)a1[c].Fj();
        Y.prototype.Fj.call(this);
    };
    t.v = function(a1) {
        if (!uj(this)) {
            Y.prototype.v.call(this, a1);
            a1 = null;
            if (this.na === W.Auto || this.na === W.Link) a1 = this.Qb();
            for(var b = this.O.s, c = b.length, d = 0; d < c; d++){
                var e = b[d];
                (e === a1 || e.isPanelMain) && e.v(!0);
                if (!e.desiredSize.w()) {
                    var f = jl(e, !1);
                    (e instanceof ig || e instanceof W || e instanceof Pg || f !== kg) && e.v(!0);
                }
            }
        }
    };
    t.Tj = function() {
        if (!uj(this)) {
            pj(this, !0);
            ll(this, !0);
            for(var a1 = this.O.s, b = a1.length, c = 0; c < b; c++)a1[c].Tj();
        }
    };
    t.Tk = function() {
        if (0 !== (this.l & 2048) === !1) {
            Ll(this, !0);
            Ml(this, !0);
            for(var a1 = this.O.s, b = a1.length, c = 0; c < b; c++)a1[c].Wu();
        }
    };
    t.Wu = function() {
        Ml(this, !0);
        for(var a1 = this.O.s, b = a1.length, c = 0; c < b; c++)a1[c].Wu();
    };
    t.Vl = function(a1, b, c, d) {
        var e = this.jg;
        e.h(0, 0, 0, 0);
        var f = this.desiredSize, g = this.minSize;
        void 0 === c && (c = g.width, d = g.height);
        c = Math.max(c, g.width);
        d = Math.max(d, g.height);
        var h = this.maxSize;
        isNaN(f.width) || (a1 = Math.min(f.width, h.width));
        isNaN(f.height) || (b = Math.min(f.height, h.height));
        a1 = Math.max(c, a1);
        b = Math.max(d, b);
        var k = this.zb;
        a1 = Math.max(a1 - k.left - k.right, 0);
        b = Math.max(b - k.top - k.bottom, 0);
        var l = this.O.s;
        0 !== l.length && this.na.measure(this, a1, b, l, e, c, d);
        a1 = e.width + k.left + k.right;
        k = e.height + k.top + k.bottom;
        isFinite(f.width) && (a1 = f.width);
        isFinite(f.height) && (k = f.height);
        a1 = Math.min(h.width, a1);
        k = Math.min(h.height, k);
        a1 = Math.max(g.width, a1);
        k = Math.max(g.height, k);
        a1 = Math.max(c, a1);
        k = Math.max(d, k);
        Pb(e, a1, k);
        Pb(this.naturalBounds, a1, k);
        this.Ge(0, 0, a1, k);
    };
    t.Qb = function() {
        if (null === this.$g) {
            var a1 = this.O.s, b = a1.length;
            if (0 === b) return null;
            for(var c = 0; c < b; c++){
                var d = a1[c];
                if (!0 === d.isPanelMain) return this.$g = d;
            }
            this.$g = a1[0];
        }
        return this.$g;
    };
    function Jm(a1) {
        return null !== a1.part ? a1.part.locationObject : null;
    }
    t.eh = function(a1, b, c, d) {
        var e = this.O.s;
        this.actualBounds.h(a1, b, c, d);
        if (0 !== e.length) {
            if (!this.desiredSize.w()) {
                a1 = jl(this, !0);
                var f = this.measuredBounds;
                b = f.width;
                f = f.height;
                var g = this.Kg, h = g.left + g.right;
                g = g.top + g.bottom;
                b === c && f === d && (a1 = kg);
                switch(a1){
                    case kg:
                        if (b > c || f > d) this.v(), this.measure(b > c ? c : b, f > d ? d : f, 0, 0);
                        break;
                    case nd:
                        this.v(!0);
                        this.measure(c + h, d + g, 0, 0);
                        break;
                    case Wk:
                        this.v(!0);
                        this.measure(c + h, f + g, 0, 0);
                        break;
                    case Xk:
                        this.v(!0), this.measure(b + h, d + g, 0, 0);
                }
            }
            this.na.arrange(this, e, this.jg);
        }
    };
    t.gh = function(a1) {
        var b = this.naturalBounds, c = Jm(this);
        if (Zb(0, 0, b.width, b.height, a1.x, a1.y)) {
            b = this.O.s;
            for(var d = b.length, e = J.allocAt(0, 0); d--;){
                var f = b[d];
                if (f.visible || f === c) {
                    if (xb(e.set(a1), f.transform), f.ca(e)) return J.free(e), !0;
                }
            }
            J.free(e);
            return null === this.Ma && null === this.areaBackground ? !1 : !0;
        }
        return !1;
    };
    t.js = function(a1) {
        if (this.bindingId === a1) return this;
        for(var b = this.O.s, c = b.length, d = 0; d < c; d++){
            var e = b[d].js(a1);
            if (null !== e) return e;
        }
        return null;
    };
    t.pm = function(a1, b) {
        b(this, a1);
        if (a1 instanceof W) {
            a1 = a1.O.s;
            for(var c = a1.length, d = 0; d < c; d++)this.pm(a1[d], b);
        }
    };
    function Hj(a1, b) {
        pn(a1, a1, b);
    }
    function pn(a1, b, c) {
        c(b);
        b = b.O.s;
        for(var d = b.length, e = 0; e < d; e++){
            var f = b[e];
            f instanceof W && pn(a1, f, c);
        }
    }
    function qn(a1, b) {
        rn(a1, a1, b);
    }
    function rn(a1, b, c) {
        c(b);
        if (b instanceof W) {
            b = b.O.s;
            for(var d = b.length, e = 0; e < d; e++)rn(a1, b[e], c);
        }
    }
    t.Ml = function(a1) {
        return sn(this, this, a1);
    };
    function sn(a1, b, c) {
        if (c(b)) return b;
        if (b instanceof W) {
            b = b.O.s;
            for(var d = b.length, e = 0; e < d; e++){
                var f = sn(a1, b[e], c);
                if (null !== f) return f;
            }
        }
        return null;
    }
    t.fb = function(a1) {
        if (this.name === a1) return this;
        var b = this.O.s, c = b.length;
        null === this.Hh && null === this.itemTemplateMap || (c = tn(this));
        for(var d = 0; d < c; d++){
            var e = b[d];
            if (e instanceof W) {
                var f = e.fb(a1);
                if (null !== f) return f;
            }
            if (e.name === a1) return e;
        }
        return null;
    };
    function un(a1) {
        a1 = a1.O.s;
        for(var b = a1.length, c = 0, d = 0; d < b; d++){
            var e = a1[d];
            e instanceof W ? c = Math.max(c, un(e)) : e instanceof Bf && (c = Math.max(c, e.ig / 2 * e.strokeMiterLimit * e.Df()));
        }
        return c;
    }
    t.se = function() {
        return !(this.type === W.TableRow || this.type === W.TableColumn);
    };
    function kl(a1) {
        return a1.type === W.TableRow || a1.type === W.TableColumn;
    }
    t.jc = function(a1, b, c) {
        if (!1 === this.pickable) return null;
        void 0 === b && (b = null);
        void 0 === c && (c = null);
        if (vj(this)) return null;
        var d = this.naturalBounds, e = 1 / this.Df(), f = this.se(), g = f ? a1 : xb(J.allocAt(a1.x, a1.y), this.transform), h = this.diagram, k = 10, l = 5;
        null !== h && (k = h.Pl("extraTouchArea"), l = k / 2);
        if (Zb(-(l * e), -(l * e), d.width + k * e, d.height + k * e, g.x, g.y)) {
            if (!this.isAtomic) {
                e = this.O.s;
                var m = e.length;
                h = J.alloc();
                l = (k = this.isClipping && this.na === W.Spot) ? this.Qb() : null;
                if (k && (l.se() ? xb(h.set(a1), l.transform) : h.set(a1), !l.ca(h))) return J.free(h), f || J.free(g), null;
                for(var n = Jm(this); m--;){
                    var p = e[m];
                    if (p.visible || p === n) {
                        if (p.se() ? xb(h.set(a1), p.transform) : h.set(a1), !k || p !== l) {
                            var q = null;
                            p instanceof W ? q = p.jc(h, b, c) : !0 === p.pickable && p.ca(h) && (q = p);
                            if (null !== q && (null !== b && (q = b(q)), null !== q && (null === c || c(q)))) return J.free(h), f || J.free(g), q;
                        }
                    }
                }
                J.free(h);
            }
            if (null === this.background && null === this.areaBackground) return f || J.free(g), null;
            a1 = Zb(0, 0, d.width, d.height, g.x, g.y) ? this : null;
            f || J.free(g);
            return a1;
        }
        f || J.free(g);
        return null;
    };
    t.ji = function(a1, b, c, d) {
        if (!1 === this.pickable) return !1;
        void 0 === b && (b = null);
        void 0 === c && (c = null);
        var e = this.naturalBounds, f = this.se(), g = f ? a1 : xb(J.allocAt(a1.x, a1.y), this.transform);
        e = Zb(0, 0, e.width, e.height, g.x, g.y);
        if (kl(this) || e) {
            if (!this.isAtomic) {
                for(var h = this.O.s, k = h.length, l = J.alloc(), m = Jm(this); k--;){
                    var n = h[k];
                    if (n.visible || n === m) {
                        n.se() ? xb(l.set(a1), n.transform) : l.set(a1);
                        var p = n;
                        n = n instanceof W ? n : null;
                        (null !== n ? n.ji(l, b, c, d) : p.ca(l)) && !1 !== p.pickable && (null !== b && (p = b(p)), null === p || null !== c && !c(p) || d.add(p));
                    }
                }
                J.free(l);
            }
            f || J.free(g);
            return e && (null !== this.background || null !== this.areaBackground);
        }
        f || J.free(g);
        return !1;
    };
    t.Cf = function(a1, b, c, d, e, f) {
        if (!1 === this.pickable) return !1;
        void 0 === b && (b = null);
        void 0 === c && (c = null);
        var g = f;
        void 0 === f && (g = ld.alloc(), g.reset());
        g.multiply(this.transform);
        if (this.fh(a1, g)) return vn(this, b, c, e), void 0 === f && ld.free(g), !0;
        if (this.Yc(a1, g)) {
            if (!this.isAtomic) for(var h = Jm(this), k = this.O.s, l = k.length; l--;){
                var m = k[l];
                if (m.visible || m === h) {
                    var n = m.actualBounds, p = this.naturalBounds;
                    if (!(n.x > p.width || n.y > p.height || 0 > n.x + n.width || 0 > n.y + n.height)) {
                        n = m;
                        m = m instanceof W ? m : null;
                        p = ld.alloc();
                        p.set(g);
                        if (null !== m ? m.Cf(a1, b, c, d, e, p) : il(n, a1, d, p)) null !== b && (n = b(n)), null === n || null !== c && !c(n) || e.add(n);
                        ld.free(p);
                    }
                }
            }
            void 0 === f && ld.free(g);
            return d;
        }
        void 0 === f && ld.free(g);
        return !1;
    };
    function vn(a1, b, c, d) {
        for(var e = a1.O.s, f = e.length; f--;){
            var g = e[f];
            if (g.visible) {
                var h = g.actualBounds, k = a1.naturalBounds;
                h.x > k.width || h.y > k.height || 0 > h.x + h.width || 0 > h.y + h.height || (g instanceof W && vn(g, b, c, d), null !== b && (g = b(g)), null === g || null !== c && !c(g) || d.add(g));
            }
        }
    }
    t.og = function(a1, b, c, d, e, f) {
        if (!1 === this.pickable) return !1;
        void 0 === c && (c = null);
        void 0 === d && (d = null);
        var g = this.naturalBounds, h = this.se(), k = h ? a1 : xb(J.allocAt(a1.x, a1.y), this.transform), l = h ? b : xb(J.allocAt(b.x, b.y), this.transform), m = k.Bf(l), n = 0 < k.x && k.x < g.width && 0 < k.y && k.y < g.height || yb(k.x, k.y, 0, 0, 0, g.height) <= m || yb(k.x, k.y, 0, g.height, g.width, g.height) <= m || yb(k.x, k.y, g.width, g.height, g.width, 0) <= m || yb(k.x, k.y, g.width, 0, 0, 0) <= m;
        g = k.zd(0, 0) <= m && k.zd(0, g.height) <= m && k.zd(g.width, 0) <= m && k.zd(g.width, g.height) <= m;
        h || (J.free(k), J.free(l));
        if (n) {
            if (!this.isAtomic) {
                k = J.alloc();
                l = J.alloc();
                m = Jm(this);
                for(var p = this.O.s, q = p.length; q--;){
                    var r = p[q];
                    if (r.visible || r === m) {
                        var u = r.actualBounds, w = this.naturalBounds;
                        if (!h || !(u.x > w.width || u.y > w.height || 0 > u.x + u.width || 0 > u.y + u.height)) {
                            if (r.se() ? (u = r.transform, xb(k.set(a1), u), xb(l.set(b), u)) : (k.set(a1), l.set(b)), u = r, r = r instanceof W ? r : null, null !== r ? r.og(k, l, c, d, e, f) : u.tx(k, l, e)) null !== c && (u = c(u)), null === u || null !== d && !d(u) || f.add(u);
                        }
                    }
                }
                J.free(k);
                J.free(l);
            }
            return e ? n : g;
        }
        return !1;
    };
    function Pm(a1) {
        var b = null;
        a1 instanceof Bf && (b = a1.spot1, b === Sc && (b = null), a1 = a1.geometry, null !== a1 && null === b && (b = a1.spot1));
        null === b && (b = sc);
        return b;
    }
    function Qm(a1) {
        var b = null;
        a1 instanceof Bf && (b = a1.spot2, b === Sc && (b = null), a1 = a1.geometry, null !== a1 && null === b && (b = a1.spot2));
        null === b && (b = Bc);
        return b;
    }
    t.add = function(a1) {
        for(var b = [], c = 0; c < arguments.length; ++c)b[c] = arguments[c];
        for(c = 0; c < b.length; c++)this.Hb(this.O.count, b[c]);
        return this;
    };
    t.M = function(a1) {
        return this.O.M(a1);
    };
    t.Hb = function(a1, b) {
        b instanceof U && C("Cannot add a Part to a Panel: " + b + "; use a Panel instead");
        if (this === b || this.rg(b)) this === b && C("Cannot make a Panel contain itself: " + this.toString()), C("Cannot make a Panel indirectly contain itself: " + this.toString() + " already contains " + b.toString());
        var c = b.panel;
        null !== c && c !== this && C("Cannot add a GraphObject that already belongs to another Panel to this Panel: " + b.toString() + ", already contained by " + c.toString() + ", cannot be shared by this Panel: " + this.toString());
        this.na !== W.Grid || b instanceof Bf || C("Can only add Shapes to a Grid Panel, not: " + b);
        this.na !== W.Graduated || b instanceof Bf || b instanceof Pg || C("Can only add Shapes or TextBlocks to a Graduated Panel, not: " + b);
        b.wi(this);
        b.Ng = null;
        if (null !== this.itemArray) {
            var d = b.data;
            null !== d && "object" === typeof d && (null === this.ge && (this.ge = new ob), this.ge.add(d, b));
        }
        var e = this.O;
        d = -1;
        if (c === this) {
            for(var f = -1, g = this.O.s, h = g.length, k = 0; k < h; k++)if (g[k] === b) {
                f = k;
                break;
            }
            if (-1 !== f) {
                if (f === a1 || f + 1 >= e.count && a1 >= e.count) return;
                e.mb(f);
                d = f;
            } else C("element " + b.toString() + " has panel " + c.toString() + " but is not contained by it.");
        }
        if (0 > a1 || a1 > e.count) a1 = e.count;
        e.Hb(a1, b);
        if (0 === a1 || b.isPanelMain) this.$g = null;
        uj(this) || this.v();
        b.v(!1);
        null !== b.portId ? this.Te = !0 : b instanceof W && !0 === b.Te && (this.Te = !0);
        this.graduatedIntervals = null;
        this.If() || wn(this, b, !1);
        c = this.part;
        null !== c && (c.Rh = null, c.ag = NaN, this.Te && c instanceof V && (c.Te = !0), c.Te && c instanceof V && (c.wc = null), e = this.diagram, null !== e && e.undoManager.isUndoingRedoing || (-1 !== d && c.cb(fe, "elements", this, b, null, d, null), c.cb(ee, "elements", this, null, b, null, a1)));
    };
    function xn(a1, b) {
        a1.l = b ? a1.l | 16777216 : a1.l & -16777217;
    }
    t.remove = function(a1) {
        for(var b = this.O.s, c = b.length, d = -1, e = 0; e < c; e++)if (b[e] === a1) {
            d = e;
            break;
        }
        -1 !== d && this.qc(d, !0);
    };
    t.mb = function(a1) {
        0 <= a1 && this.qc(a1, !0);
    };
    t.qc = function(a1, b) {
        var c = this.O, d = c.M(a1);
        d.Ng = null;
        d.wi(null);
        if (null !== this.ge) {
            var e = d.data;
            "object" === typeof e && this.ge.remove(e);
        }
        c.mb(a1);
        pj(this, !1);
        this.v();
        this.$g === d && (this.$g = null);
        this.graduatedIntervals = null;
        var f = this.part;
        null !== f && (f.Rh = null, f.ag = NaN, f.Xb(), f instanceof V && (d instanceof W ? d.pm(d, function(a1, c) {
            dm(f, c, b);
        }) : dm(f, d, b)), c = this.diagram, null !== c && c.undoManager.isUndoingRedoing || f.cb(fe, "elements", this, d, null, a1, null));
    };
    t.Gb = function(a1) {
        0 > a1 && xa(a1, ">= 0", W, "getRowDefinition:idx");
        a1 = Math.round(a1);
        var b = this.rowDefs;
        if (void 0 === b[a1]) {
            var c = new Vj;
            c.wi(this);
            c.isRow = !0;
            c.index = a1;
            b[a1] = c;
            this.cb(ee, "rowdefs", this, null, c, null, a1);
        }
        return b[a1];
    };
    t.oA = function(a1) {
        0 > a1 && xa(a1, ">= 0", W, "removeRowDefinition:idx");
        if (0 !== this.rowCount) {
            a1 = Math.round(a1);
            var b = this.rowDefs, c = b[a1];
            if (c) {
                b[a1] = void 0;
                for(var d = b.length - 1; 0 <= d && void 0 === b[d--];)b.length--;
                this.cb(fe, "rowdefs", this, c, null, a1, null);
                this.v();
            }
        }
    };
    function Wj(a1, b, c) {
        var d = a1.rowDefs;
        if (!(0 > b)) {
            d[b] = c instanceof Vj ? c : void 0;
            if (!c) for(b = d.length - 1; 0 <= b && void 0 === d[b--];)d.length--;
            a1.v();
        }
    }
    t.Fb = function(a1) {
        0 > a1 && xa(a1, ">= 0", W, "getColumnDefinition:idx");
        a1 = Math.round(a1);
        var b = this.colDefs;
        if (void 0 === b[a1]) {
            var c = new Vj;
            c.wi(this);
            c.isRow = !1;
            c.index = a1;
            b[a1] = c;
            this.cb(ee, "coldefs", this, null, c, null, a1);
        }
        return b[a1];
    };
    t.jA = function(a1) {
        0 > a1 && xa(a1, ">= 0", W, "removeColumnDefinition:idx");
        if (0 !== this.columnCount) {
            a1 = Math.round(a1);
            var b = this.colDefs, c = b[a1];
            if (c) {
                b[a1] = void 0;
                for(var d = b.length - 1; 0 <= d && void 0 === b[d--];)b.length--;
                this.cb(fe, "coldefs", this, c, null, a1, null);
                this.v();
            }
        }
    };
    function Xj(a1, b, c) {
        var d = a1.colDefs;
        if (!(0 > b)) {
            d[b] = c instanceof Vj ? c : void 0;
            if (!c) for(b = d.length - 1; 0 <= b && void 0 === d[b--];)d.length--;
            a1.v();
        }
    }
    t.Gy = function(a1) {
        var b = null;
        a1.isRow ? b = this.Gb(a1.index) : a1.isRow || (b = this.Fb(a1.index));
        b && Yl(b, a1);
        return this;
    };
    t.Hy = function(a1, b) {
        (a1 = this.Gb(a1)) && Yl(a1, new Vj(b));
        return this;
    };
    t.By = function(a1, b) {
        (a1 = this.Fb(a1)) && Yl(a1, new Vj(b));
        return this;
    };
    t.nz = function(a1) {
        if (0 > a1 || this.type !== W.Table || 0 === this.rowCount) return -1;
        for(var b = 0, c = this.rowDefs, d = c.length, e = this.topIndex; e < d; e++){
            var f = c[e];
            if (void 0 !== f && (b += f.total, a1 < b)) break;
        }
        return e;
    };
    t.fz = function(a1) {
        if (0 > a1 || this.type !== W.Table || 0 === this.columnCount) return -1;
        for(var b = 0, c = this.colDefs, d = c.length, e = this.leftIndex; e < d; e++){
            var f = c[e];
            if (void 0 !== f && (b += f.total, a1 < b)) break;
        }
        return e;
    };
    t.Fz = function(a1, b) {
        void 0 === b && (b = new J(NaN, NaN));
        if (this.type !== W.Graduated) return b.h(NaN, NaN), b;
        a1 = Math.min(Math.max(a1, this.graduatedMin), this.graduatedMax);
        var c = this.Qb();
        c.geometry.Pu((a1 - this.graduatedMin) / this.graduatedRange, b);
        return c.transform.Ga(b);
    };
    t.Gz = function(a1) {
        if (this.type !== W.Graduated) return NaN;
        var b = this.Qb();
        b.transform.Cd(a1);
        return b.geometry.xx(a1) * this.graduatedRange + this.graduatedMin;
    };
    function Tl(a1) {
        a1 = a1.allBindings;
        return null !== a1 && a1._isFrozen;
    }
    function jg(a1) {
        var b = a1.allBindings;
        if (null === b) null !== a1.data && C("Template cannot have .data be non-null: " + a1), a1.allBindings = b = new F;
        else if (b._isFrozen) return;
        var c = new F;
        xn(a1, !1);
        a1.pm(a1, function(a1, d) {
            d.th();
            var e = d.localBindings;
            if (null !== e) for(Ql(d, !1), e = e.iterator; e.next();){
                var f = e.value;
                f.mode === yn && Ql(d, !0);
                var g = f.sourceName;
                null !== g && ("/" === g && xn(a1, !0), g = hl(f, a1, d), null !== g && (c.add(g), null === g.srcBindings && (g.srcBindings = new F), g.srcBindings.add(f)));
                b.add(f);
            }
            if (d instanceof W && d.type === W.Table) {
                if (0 < d.rowCount) {
                    for(a1 = d.rowDefs, e = a1.length, f = 0; f < e; f++)if (g = a1[f], void 0 !== g && null !== g.be) for(var h = g.be.iterator; h.next();){
                        var k = h.value;
                        k.xd = g;
                        k.so = 2;
                        k.vl = g.index;
                        b.add(k);
                    }
                }
                if (0 < d.columnCount) {
                    for(d = d.colDefs, a1 = d.length, e = 0; e < a1; e++)if (f = d[e], void 0 !== f && null !== f.be) for(g = f.be.iterator; g.next();)h = g.value, h.xd = f, h.so = 1, h.vl = f.index, b.add(h);
                }
            }
        });
        for(var d = c.iterator; d.next();){
            var e = d.value;
            if (null !== e.srcBindings) {
                Ql(e, !0);
                for(var f = e.srcBindings.iterator; f.next();){
                    var g = f.value;
                    null === e.localBindings && (e.localBindings = new F);
                    e.localBindings.add(g);
                }
            }
            e.srcBindings = null;
        }
        for(d = b.iterator; d.next();)if (e = d.value, f = e.xd, null !== f) {
            e.xd = null;
            var h = e.targetProperty, k = h.indexOf(".");
            0 < k && f instanceof W && (g = h.substring(0, k), h = h.substr(k + 1), k = f.fb(g), null !== k ? (f = k, e.targetProperty = h) : ya('Warning: unable to find GraphObject named "' + g + '" for Binding: ' + e.toString()));
            f instanceof Vj ? (g = bb(f.panel), e.Ai = void 0 === g ? -1 : g, f.panel.bindingId = e.Ai) : f instanceof Y ? (g = bb(f), e.Ai = void 0 === g ? -1 : g, f.bindingId = e.Ai) : C("Unknown type of binding target: " + f);
        }
        b.freeze();
        a1 instanceof U && a1.Zc() && a1.Va();
    }
    t.Uy = function(a1) {
        void 0 === a1 && (a1 = !1);
        var b = this.copy();
        qn(b, function(a1) {
            a1 instanceof W && (a1.allBindings = null, a1.ub = null);
            var b = a1.localBindings;
            null !== b && (a1.localBindings = null, b.each(function(b) {
                a1.bind(b.copy());
            }));
            b = a1.animationTriggers;
            null !== b && (a1.animationTriggers = null, b.each(function(b) {
                a1.Jv(b.value.copy());
            }));
        });
        a1 && jg(b);
        return b;
    };
    t.La = function(a1) {
        var b = this.allBindings;
        if (null !== b) for(void 0 === a1 && (a1 = ""), b = b.iterator; b.next();){
            var c = b.value, d = c.sourceProperty;
            if ("" === a1 || "" === d || d === a1) {
                if (d = c.targetProperty, null !== c.converter || "" !== d) {
                    d = this.data;
                    var e = c.sourceName;
                    if (null !== e) {
                        if ("" === e) d = this;
                        else if ("/" === e) d = this;
                        else if ("." === e) d = this;
                        else if (".." === e) d = this;
                        else {
                            if (d = this.fb(e), null === d) continue;
                        }
                    } else if (c.isToModel) {
                        if (d = this.diagram, null !== d) d = d.model.modelData;
                        else continue;
                    }
                    var f = this, g = c.Ai;
                    if (-1 !== g) {
                        if (f = this.js(g), null === f) continue;
                    } else null !== c.xd && (f = c.xd);
                    "/" === e ? d = f.part : "." === e ? d = f : ".." === e && (d = f.panel);
                    e = c.so;
                    if (0 !== e) {
                        if (!(f instanceof W)) continue;
                        1 === e ? f = f.Fb(c.vl) : 2 === e && (f = f.Gb(c.vl));
                    }
                    void 0 !== f && c.Mv(f, d);
                }
            }
        }
    };
    t.sx = function(a1) {
        return void 0 === a1 || null === a1 || null === this.ge ? null : this.ge.I(a1);
    };
    function zn(a1, b) {
        a1 = a1.O.s;
        for(var c = a1.length, d = b.length, e = 0, f = null; e < c && !(f = a1[e], f instanceof W && null !== f.data);)e++, f = a1[e];
        if (c - e !== d) return !0;
        if (null === f) return 0 < d;
        for(var g = 0; e < c && g < d;){
            f = a1[e];
            if (!(f instanceof W) || f.data !== b[g]) return !0;
            e++;
            g++;
        }
        return !1;
    }
    function tn(a1) {
        if (a1.type === W.Spot || a1.type === W.Auto) return Math.min(a1.O.length, 1);
        if (a1.type === W.Link) {
            a1 = a1.O;
            for(var b = a1.length, c = 0; c < b; c++){
                var d = a1.M(c);
                if (!(d instanceof Bf && d.isPanelMain)) break;
            }
            return c;
        }
        return a1.type === W.Table && 0 < a1.O.length && (a1 = a1.O.M(0), a1.isPanelMain && a1 instanceof W && kl(a1)) ? 1 : 0;
    }
    t.mv = function() {
        for(var a1 = tn(this); this.O.length > a1;)this.qc(this.O.length - 1, !1);
        An(this, this.itemArray);
    };
    function An(a1, b) {
        var c = tn(a1);
        if (null === b || 0 === b.length) for(; a1.O.length > c;)a1.qc(a1.O.length - 1, !1);
        else if (a1.O.length <= c) {
            c = b.length;
            for(var d = 0; d < c; d++)Bn(a1, b[d], d, !0);
        } else {
            d = c;
            for(var e = 0; e < b.length; e++, d++){
                var f = b[e], g = d < a1.O.length ? a1.O.M(d) : null;
                if (g instanceof W) {
                    if (g.data !== f) {
                        var h = Cn(a1, g.data), k = Cn(a1, f), l = k !== h;
                        l || (h = Dn(a1, h), l = Dn(a1, k) !== h);
                        l ? (a1.qc(d, !1), Bn(a1, f, e, !1)) : g.data = f;
                    }
                } else Bn(a1, f, e, !1);
            }
            for(; d < a1.O.length;)a1.qc(d, !1);
            a1.$g = null;
            En(a1, c, 0);
            uj(a1) || a1.v();
            a1.graduatedIntervals = null;
            a1.If() || wn(a1, a1, !1);
            b = a1.part;
            null !== b && (b.Rh = null, b.ag = NaN, a1.Te && b instanceof V && (b.Te = !0), b.Te && b instanceof V && (b.wc = null));
        }
    }
    function Bn(a1, b, c, d) {
        if (!(void 0 === b || null === b || 0 > c)) {
            var e = Cn(a1, b);
            e = Dn(a1, e);
            if (null !== e) {
                jg(e);
                e = e.copy();
                if (0 !== (e.l & 16777216)) {
                    var f = a1.ih();
                    null !== f && xn(f, !0);
                }
                "object" === typeof b && (null === a1.ge && (a1.ge = new ob), a1.ge.add(b, e));
                f = c + tn(a1);
                a1.Hb(f, e);
                d && (e.ub = b, En(a1, f, c), e.ub = null);
                e.data = b;
            }
        }
    }
    function En(a1, b, c) {
        for(a1 = a1.O; b < a1.length;){
            var d = a1.M(b);
            if (d instanceof W) {
                var e = b, f = c;
                d.type === W.TableRow ? d.row = e : d.type === W.TableColumn && (d.column = e);
                d.itemIndex = f;
            }
            b++;
            c++;
        }
    }
    function Cn(a1, b) {
        if (null === b) return "";
        a1 = a1.itemCategoryProperty;
        if ("function" === typeof a1) a1 = a1(b);
        else if ("string" === typeof a1 && "object" === typeof b) {
            if ("" === a1) return "";
            a1 = Fn(b, a1);
        } else return "";
        if (void 0 === a1) return "";
        if ("string" === typeof a1) return a1;
        C("Panel.getCategoryForItemData found a non-string category for " + b + ": " + a1);
    }
    function Dn(a1, b) {
        var c = a1.itemTemplateMap, d = null;
        null !== c && (d = c.I(b));
        null === d && (null !== c && (d = c.I("")), null === d && (Gn || (Gn = !0, ya('No item template Panel found for category "' + b + '" on ' + a1), ya("  Using default item template."), a1 = new W, b = new Pg, b.bind(new Gi("text", "", Ia)), a1.add(b), Hn = a1), d = Hn));
        return d;
    }
    function wn(a1, b, c) {
        var d = b.enabledChanged;
        null !== d && d(b, c);
        if (b instanceof W) {
            b = b.O.s;
            d = b.length;
            for(var e = 0; e < d; e++){
                var f = b[e];
                c && f instanceof W && !f.isEnabled || wn(a1, f, c);
            }
        }
    }
    function In(a1, b) {
        b.name = a1;
        Xl.add(a1, b);
    }
    ma.Object.defineProperties(W.prototype, {
        type: {
            get: function() {
                return this.na;
            },
            set: function(a1) {
                var b = this.na;
                b !== a1 && (this.na = a1, this.isAtomic = this.na === W.Grid, this.v(), this.g("type", b, a1));
            }
        },
        elements: {
            get: function() {
                return this.O.iterator;
            }
        },
        naturalBounds: {
            get: function() {
                return this.ec;
            }
        },
        padding: {
            get: function() {
                return this.zb;
            },
            set: function(a1) {
                "number" === typeof a1 ? (0 > a1 && xa(a1, ">= 0", W, "padding"), a1 = new dc(a1)) : (0 > a1.left && xa(a1.left, ">= 0", W, "padding:value.left"), 0 > a1.right && xa(a1.right, ">= 0", W, "padding:value.right"), 0 > a1.top && xa(a1.top, ">= 0", W, "padding:value.top"), 0 > a1.bottom && xa(a1.bottom, ">= 0", W, "padding:value.bottom"));
                var b = this.zb;
                b.D(a1) || (this.zb = a1 = a1.J(), this.v(), this.g("padding", b, a1));
            }
        },
        defaultAlignment: {
            get: function() {
                return this.Sm;
            },
            set: function(a1) {
                var b = this.Sm;
                b.D(a1) || (this.Sm = a1 = a1.J(), this.v(), this.g("defaultAlignment", b, a1));
            }
        },
        defaultStretch: {
            get: function() {
                return this.Uf;
            },
            set: function(a1) {
                var b = this.Uf;
                b !== a1 && (this.Uf = a1, this.v(), this.g("defaultStretch", b, a1));
            }
        },
        defaultSeparatorPadding: {
            get: function() {
                return null !== this.T ? this.T.Pp : lc;
            },
            set: function(a1) {
                "number" === typeof a1 && (a1 = new dc(a1));
                var b = this.defaultSeparatorPadding;
                b.D(a1) || (a1 = a1.J(), null === this.T && (this.T = new Jn), this.T.Pp = a1, this.v(), this.g("defaultSeparatorPadding", b, a1));
            }
        },
        defaultRowSeparatorStroke: {
            get: function() {
                return null !== this.T ? this.T.ia : null;
            },
            set: function(a1) {
                var b = this.defaultRowSeparatorStroke;
                b !== a1 && (null === a1 || "string" === typeof a1 || a1 instanceof ql) && (a1 instanceof ql && a1.freeze(), null === this.T && (this.T = new Jn), this.T.ia = a1, this.N(), this.g("defaultRowSeparatorStroke", b, a1));
            }
        },
        defaultRowSeparatorStrokeWidth: {
            get: function() {
                return null !== this.T ? this.T.Ha : 1;
            },
            set: function(a1) {
                var b = this.defaultRowSeparatorStrokeWidth;
                b !== a1 && isFinite(a1) && 0 <= a1 && (null === this.T && (this.T = new Jn), this.T.Ha = a1, this.v(), this.g("defaultRowSeparatorStrokeWidth", b, a1));
            }
        },
        defaultRowSeparatorDashArray: {
            get: function() {
                return null !== this.T ? this.T.V : null;
            },
            set: function(a1) {
                var b = this.defaultRowSeparatorDashArray;
                if (b !== a1) {
                    if (null !== a1) {
                        for(var c = a1.length, d = 0, e = 0; e < c; e++){
                            var f = a1[e];
                            "number" === typeof f && 0 <= f && isFinite(f) || C("defaultRowSeparatorDashArray value " + f + " at index " + e + " must be a positive number or zero.");
                            d += f;
                        }
                        if (0 === d) {
                            if (null === b) return;
                            a1 = null;
                        }
                    }
                    null === this.T && (this.T = new Jn);
                    this.T.V = a1;
                    this.N();
                    this.g("defaultRowSeparatorDashArray", b, a1);
                }
            }
        },
        defaultColumnSeparatorStroke: {
            get: function() {
                return null !== this.T ? this.T.u : null;
            },
            set: function(a1) {
                var b = this.defaultColumnSeparatorStroke;
                b !== a1 && (null === a1 || "string" === typeof a1 || a1 instanceof ql) && (a1 instanceof ql && a1.freeze(), null === this.T && (this.T = new Jn), this.T.u = a1, this.N(), this.g("defaultColumnSeparatorStroke", b, a1));
            }
        },
        defaultColumnSeparatorStrokeWidth: {
            get: function() {
                return null !== this.T ? this.T.F : 1;
            },
            set: function(a1) {
                var b = this.defaultColumnSeparatorStrokeWidth;
                b !== a1 && isFinite(a1) && 0 <= a1 && (null === this.T && (this.T = new Jn), this.T.F = a1, this.v(), this.g("defaultColumnSeparatorStrokeWidth", b, a1));
            }
        },
        defaultColumnSeparatorDashArray: {
            get: function() {
                return null !== this.T ? this.T.o : null;
            },
            set: function(a1) {
                var b = this.defaultColumnSeparatorDashArray;
                if (b !== a1) {
                    if (null !== a1) {
                        for(var c = a1.length, d = 0, e = 0; e < c; e++){
                            var f = a1[e];
                            "number" === typeof f && 0 <= f && isFinite(f) || C("defaultColumnSeparatorDashArray value " + f + " at index " + e + " must be a positive number or zero.");
                            d += f;
                        }
                        if (0 === d) {
                            if (null === b) return;
                            a1 = null;
                        }
                    }
                    null === this.T && (this.T = new Jn);
                    this.T.o = a1;
                    this.N();
                    this.g("defaultColumnSeparatorDashArray", b, a1);
                }
            }
        },
        inRowsCols: {
            get: function() {
                return null !== this.T ? this.T.nb : null;
            },
            set: function(a1) {
                null === this.T && (this.T = new Jn);
                this.T.nb = a1;
            }
        },
        viewboxStretch: {
            get: function() {
                return this.wo;
            },
            set: function(a1) {
                var b = this.wo;
                b !== a1 && (this.wo = a1, this.v(), this.g("viewboxStretch", b, a1));
            }
        },
        gridCellSize: {
            get: function() {
                return this.hn;
            },
            set: function(a1) {
                var b = this.hn;
                if (!b.D(a1)) {
                    a1.w() && 0 !== a1.width && 0 !== a1.height || C("Invalid Panel.gridCellSize: " + a1);
                    this.hn = a1.J();
                    var c = this.diagram;
                    null !== c && this === c.grid && qj(c);
                    this.N();
                    this.g("gridCellSize", b, a1);
                }
            }
        },
        gridOrigin: {
            get: function() {
                return this.jn;
            },
            set: function(a1) {
                var b = this.jn;
                if (!b.D(a1)) {
                    a1.w() || C("Invalid Panel.gridOrigin: " + a1);
                    this.jn = a1.J();
                    var c = this.diagram;
                    null !== c && this === c.grid && qj(c);
                    this.N();
                    this.g("gridOrigin", b, a1);
                }
            }
        },
        graduatedMin: {
            get: function() {
                return null !== this.ra ? this.ra.kq : 0;
            },
            set: function(a1) {
                var b = this.graduatedMin;
                b !== a1 && (null === this.ra && (this.ra = new Kn), this.ra.kq = a1, this.v(), this.g("graduatedMin", b, a1), fl(this) && (a1 = this.part, null !== a1 && gl(this, a1, "graduatedRange")));
            }
        },
        graduatedMax: {
            get: function() {
                return null !== this.ra ? this.ra.F : 100;
            },
            set: function(a1) {
                var b = this.graduatedMax;
                b !== a1 && (null === this.ra && (this.ra = new Kn), this.ra.F = a1, this.v(), this.g("graduatedMax", b, a1), fl(this) && (a1 = this.part, null !== a1 && gl(this, a1, "graduatedRange")));
            }
        },
        graduatedRange: {
            get: function() {
                return this.graduatedMax - this.graduatedMin;
            }
        },
        graduatedTickUnit: {
            get: function() {
                return null !== this.ra ? this.ra.ia : 10;
            },
            set: function(a1) {
                var b = this.graduatedTickUnit;
                b !== a1 && 0 < a1 && (null === this.ra && (this.ra = new Kn), this.ra.ia = a1, this.v(), this.g("graduatedTickUnit", b, a1));
            }
        },
        graduatedTickBase: {
            get: function() {
                return null !== this.ra ? this.ra.V : 0;
            },
            set: function(a1) {
                var b = this.graduatedTickBase;
                b !== a1 && (null === this.ra && (this.ra = new Kn), this.ra.V = a1, this.v(), this.g("graduatedTickBase", b, a1));
            }
        },
        graduatedMarks: {
            get: function() {
                return null !== this.ra ? this.ra.u : null;
            },
            set: function(a1) {
                null !== this.ra ? this.ra.u = a1 : null !== a1 && (this.ra = new Kn, this.ra.u = a1);
            }
        },
        graduatedBounds: {
            get: function() {
                return null !== this.ra ? this.ra.j : null;
            },
            set: function(a1) {
                null !== this.ra ? this.ra.j = a1 : null !== a1 && (this.ra = new Kn, this.ra.j = a1);
            }
        },
        graduatedIntervals: {
            get: function() {
                return null !== this.ra ? this.ra.o : null;
            },
            set: function(a1) {
                null !== this.ra ? this.ra.o = a1 : null !== a1 && (this.ra = new Kn, this.ra.o = a1);
            }
        },
        temporaryTextBlock: {
            get: function() {
                return null !== this.ra ? this.ra.Zh : null;
            },
            set: function(a1) {
                null !== this.ra ? this.ra.Zh = a1 : null !== a1 && (this.ra = new Kn, this.ra.Zh = a1);
            }
        },
        panelLayoutState: {
            get: function() {
                return this.F;
            },
            set: function(a1) {
                this.F = a1;
            }
        },
        Te: {
            get: function() {
                return 0 !== (this.l & 8388608);
            },
            set: function(a1) {
                0 !== (this.l & 8388608) !== a1 && (this.l ^= 8388608);
            }
        },
        rowDefs: {
            get: function() {
                null === this.T && (this.T = new Jn);
                return this.T.Pc;
            }
        },
        rowCount: {
            get: function() {
                return null === this.T ? 0 : this.rowDefs.length;
            }
        },
        colDefs: {
            get: function() {
                null === this.T && (this.T = new Jn);
                return this.T.Oc;
            }
        },
        columnCount: {
            get: function() {
                return null === this.T ? 0 : this.colDefs.length;
            }
        },
        rowSizing: {
            get: function() {
                return null !== this.T ? this.T.ob : Ln;
            },
            set: function(a1) {
                var b = this.rowSizing;
                b !== a1 && (null === this.T && (this.T = new Jn), this.T.ob = a1, this.v(), this.g("rowSizing", b, a1));
            }
        },
        columnSizing: {
            get: function() {
                return null !== this.T ? this.T.j : Ln;
            },
            set: function(a1) {
                var b = this.columnSizing;
                b !== a1 && (null === this.T && (this.T = new Jn), this.T.j = a1, this.v(), this.g("columnSizing", b, a1));
            }
        },
        topIndex: {
            get: function() {
                return null !== this.T ? this.T.Ib : 0;
            },
            set: function(a1) {
                var b = this.topIndex;
                b !== a1 && ((!isFinite(a1) || 0 > a1) && C("Panel.topIndex must be greater than zero and a real number, not: " + a1), null === this.T && (this.T = new Jn), this.T.Ib = a1, this.v(), this.g("topIndex", b, a1));
            }
        },
        leftIndex: {
            get: function() {
                return null !== this.T ? this.T.hb : 0;
            },
            set: function(a1) {
                var b = this.leftIndex;
                b !== a1 && ((!isFinite(a1) || 0 > a1) && C("Panel.leftIndex must be greater than zero and a real number, not: " + a1), null === this.T && (this.T = new Jn), this.T.hb = a1, this.v(), this.g("leftIndex", b, a1));
            }
        },
        data: {
            get: function() {
                return this.ub;
            },
            set: function(a1) {
                var b = this.ub;
                if (b !== a1) {
                    var c = this instanceof U && !(this instanceof te);
                    jg(this);
                    this.ub = a1;
                    var d = this.diagram;
                    null !== d && (c ? (c = d.partManager, this instanceof T ? (null !== b && c.bf.remove(b), null !== a1 && c.bf.add(a1, this)) : this instanceof U && (null !== b && c.cf.remove(b), null !== a1 && c.cf.add(a1, this))) : (c = this.panel, null !== c && null !== c.ge && (null !== b && c.ge.remove(b), null !== a1 && c.ge.add(a1, this))));
                    this.g("data", b, a1);
                    null !== d && d.undoManager.isUndoingRedoing || null !== a1 && this.La();
                }
            }
        },
        itemIndex: {
            get: function() {
                return this.yn;
            },
            set: function(a1) {
                var b = this.yn;
                b !== a1 && (this.yn = a1, this.g("itemIndex", b, a1));
            }
        },
        allBindings: {
            get: function() {
                return null !== this.A ? this.A.nb : null;
            },
            set: function(a1) {
                this.localBindings !== a1 && (null === this.A && (this.A = new dl), this.A.nb = a1);
            }
        },
        itemArray: {
            get: function() {
                return this.Hh;
            },
            set: function(a1) {
                var b = this.Hh;
                if (b !== a1 || null !== a1 && zn(this, a1)) {
                    var c = this.diagram;
                    b !== a1 && (null !== c && null !== b && Mj(c.partManager, this, c), this.Hh = a1, null !== c && null !== a1 && Jj(c.partManager, this));
                    this.g("itemArray", b, a1);
                    null !== c && c.undoManager.isUndoingRedoing || An(this, a1);
                }
            }
        },
        itemTemplate: {
            get: function() {
                return null === this.itemTemplateMap ? null : this.itemTemplateMap.I("");
            },
            set: function(a1) {
                if (null === this.itemTemplateMap) {
                    if (null === a1) return;
                    this.itemTemplateMap = new ob;
                }
                var b = this.itemTemplateMap.I("");
                b !== a1 && ((a1 instanceof U || a1.isPanelMain) && C("Panel.itemTemplate must not be a Part or be Panel.isPanelMain: " + a1), this.itemTemplateMap.add("", a1), this.g("itemTemplate", b, a1), a1 = this.diagram, null !== a1 && a1.undoManager.isUndoingRedoing || this.mv());
            }
        },
        itemTemplateMap: {
            get: function() {
                return null !== this.A ? this.A.Pc : null;
            },
            set: function(a1) {
                var b = this.itemTemplateMap;
                if (b !== a1) {
                    for(var c = a1.iterator; c.next(););
                    cl(this);
                    this.A.Pc = a1;
                    this.g("itemTemplateMap", b, a1);
                    a1 = this.diagram;
                    null !== a1 && a1.undoManager.isUndoingRedoing || this.mv();
                }
            }
        },
        itemCategoryProperty: {
            get: function() {
                return null !== this.A ? this.A.Oc : "category";
            },
            set: function(a1) {
                var b = this.itemCategoryProperty;
                b !== a1 && (cl(this), this.A.Oc = a1, this.g("itemCategoryProperty", b, a1));
            }
        },
        isAtomic: {
            get: function() {
                return 0 !== (this.l & 1048576);
            },
            set: function(a1) {
                var b = 0 !== (this.l & 1048576);
                b !== a1 && (this.l ^= 1048576, this.g("isAtomic", b, a1));
            }
        },
        isClipping: {
            get: function() {
                return 0 !== (this.l & 2097152);
            },
            set: function(a1) {
                var b = 0 !== (this.l & 2097152);
                b !== a1 && (this.l ^= 2097152, this instanceof pf && (this.tb = null), this.v(), this.g("isClipping", b, a1));
            }
        },
        isOpposite: {
            get: function() {
                return 0 !== (this.l & 33554432);
            },
            set: function(a1) {
                var b = 0 !== (this.l & 33554432);
                b !== a1 && (this.l ^= 33554432, this.v(), this.g("isOpposite", b, a1));
            }
        },
        isEnabled: {
            get: function() {
                return 0 !== (this.l & 4194304);
            },
            set: function(a1) {
                var b = 0 !== (this.l & 4194304);
                if (b !== a1) {
                    var c = null === this.panel || this.panel.If();
                    this.l ^= 4194304;
                    this.g("isEnabled", b, a1);
                    b = this.diagram;
                    null !== b && b.undoManager.isUndoingRedoing || c && wn(this, this, a1);
                }
            }
        },
        alignmentFocusName: {
            get: function() {
                return this.$e;
            },
            set: function(a1) {
                var b = this.$e;
                b !== a1 && (this.$e = a1, this.v(), this.g("alignmentFocusName", b, a1));
            }
        }
    });
    ma.Object.defineProperties(W, {
        Position: {
            get: function() {
                return Xl.I("Position");
            }
        },
        Horizontal: {
            get: function() {
                return Xl.I("Horizontal");
            }
        },
        Vertical: {
            get: function() {
                return Xl.I("Vertical");
            }
        },
        Spot: {
            get: function() {
                return Xl.I("Spot");
            }
        },
        Auto: {
            get: function() {
                return Xl.I("Auto");
            }
        },
        Table: {
            get: function() {
                return Xl.I("Table");
            }
        },
        Viewbox: {
            get: function() {
                return Xl.I("Viewbox");
            }
        },
        TableRow: {
            get: function() {
                return Xl.I("TableRow");
            }
        },
        TableColumn: {
            get: function() {
                return Xl.I("TableColumn");
            }
        },
        Link: {
            get: function() {
                return Xl.I("Link");
            }
        },
        Grid: {
            get: function() {
                return Xl.I("Grid");
            }
        },
        Graduated: {
            get: function() {
                return Xl.I("Graduated");
            }
        }
    });
    W.prototype.rebuildItemElements = W.prototype.mv;
    W.prototype.findItemPanelForData = W.prototype.sx;
    W.prototype.updateTargetBindings = W.prototype.La;
    W.prototype.copyTemplate = W.prototype.Uy;
    W.prototype.graduatedValueForPoint = W.prototype.Gz;
    W.prototype.graduatedPointForValue = W.prototype.Fz;
    W.prototype.findColumnForLocalX = W.prototype.fz;
    W.prototype.findRowForLocalY = W.prototype.nz;
    W.prototype.addColumnDefinition = W.prototype.By;
    W.prototype.addRowDefinition = W.prototype.Hy;
    W.prototype.addRowColumnDefinition = W.prototype.Gy;
    W.prototype.removeColumnDefinition = W.prototype.jA;
    W.prototype.getColumnDefinition = W.prototype.Fb;
    W.prototype.removeRowDefinition = W.prototype.oA;
    W.prototype.getRowDefinition = W.prototype.Gb;
    W.prototype.removeAt = W.prototype.mb;
    W.prototype.remove = W.prototype.remove;
    W.prototype.insertAt = W.prototype.Hb;
    W.prototype.elt = W.prototype.M;
    W.prototype.add = W.prototype.add;
    W.prototype.findObject = W.prototype.fb;
    W.prototype.findInVisualTree = W.prototype.Ml;
    W.prototype.walkVisualTreeFrom = W.prototype.pm;
    W.prototype.findMainElement = W.prototype.Qb;
    var Gn = !1, Hn = null, Xl = new ob;
    W.className = "Panel";
    W.definePanelLayout = In;
    In("Position", new Im);
    In("Vertical", new Lm);
    In("Auto", new Om);
    In("Link", new Zm);
    function Kn() {
        this.kq = 0;
        this.F = 100;
        this.ia = 10;
        this.V = 0;
        this.Zh = this.o = this.j = this.u = null;
    }
    Kn.prototype.copy = function() {
        var a1 = new Kn;
        a1.kq = this.kq;
        a1.F = this.F;
        a1.ia = this.ia;
        a1.V = this.V;
        a1.u = this.u;
        a1.j = this.j;
        a1.o = this.o;
        a1.Zh = this.Zh;
        return a1;
    };
    Kn.className = "GradPanelSettings";
    function Jn() {
        this.Pc = [];
        this.Oc = [];
        this.j = this.ob = Ln;
        this.hb = this.Ib = 0;
        this.Pp = lc;
        this.Ha = 1;
        this.V = this.ia = null;
        this.F = 1;
        this.nb = this.o = this.u = null;
    }
    Jn.prototype.copy = function(a1) {
        for(var b = new Jn, c = this.Pc, d = c.length, e = b.Pc, f = 0; f < d; f++)if (void 0 !== c[f]) {
            var g = c[f].copy();
            g.wi(a1);
            e[f] = g;
        }
        c = this.Oc;
        d = c.length;
        e = b.Oc;
        for(f = 0; f < d; f++)void 0 !== c[f] && (g = c[f].copy(), g.wi(a1), e[f] = g);
        b.ob = this.ob;
        b.j = this.j;
        b.Ib = this.Ib;
        b.hb = this.hb;
        b.Pp = this.Pp.J();
        b.Ha = this.Ha;
        b.ia = this.ia;
        b.V = this.V;
        b.F = this.F;
        b.u = this.u;
        b.o = this.o;
        b.nb = this.nb;
        return b;
    };
    Jn.className = "TablePanelSettings";
    function Vj(a1) {
        Qa(this);
        this.Me = null;
        this.tq = !0;
        this.Za = 0;
        this.Hc = NaN;
        this.jj = 0;
        this.hj = Infinity;
        this.Kb = Sc;
        this.pa = this.pc = this.oa = 0;
        this.be = null;
        this.no = Mn;
        this.hg = Yk;
        this.ko = this.dg = null;
        this.lo = NaN;
        this.Ma = this.tj = null;
        this.Om = !1;
        a1 && (Object.assign(this, a1), void 0 !== a1.column ? (this.isRow = !1, this.index = a1.column) : void 0 !== a1.row && (this.isRow = !0, this.index = a1.row));
    }
    Vj.prototype.copy = function() {
        var a1 = new Vj;
        a1.tq = this.tq;
        a1.Za = this.Za;
        a1.Hc = this.Hc;
        a1.jj = this.jj;
        a1.hj = this.hj;
        a1.Kb = this.Kb;
        a1.oa = this.oa;
        a1.pc = this.pc;
        a1.pa = this.pa;
        a1.hg = this.hg;
        a1.no = this.no;
        null === this.dg ? a1.dg = null : a1.dg = this.dg.J();
        a1.ko = this.ko;
        a1.lo = this.lo;
        a1.tj = null;
        null !== this.tj && (a1.separatorDashArray = Ba(this.separatorDashArray));
        a1.Ma = this.Ma;
        a1.Om = this.Om;
        a1.be = this.be;
        return a1;
    };
    function Yl(a1, b) {
        b.isRow ? a1.height = b.height : a1.width = b.width;
        a1.minimum = b.minimum;
        a1.maximum = b.maximum;
        a1.alignment = b.alignment;
        a1.stretch = b.stretch;
        a1.sizing = b.sizing;
        a1.dg = null === b.separatorPadding ? null : b.separatorPadding.J();
        a1.separatorStroke = b.separatorStroke;
        a1.separatorStrokeWidth = b.separatorStrokeWidth;
        a1.tj = null;
        b.separatorDashArray && (a1.tj = Ba(b.separatorDashArray));
        a1.background = b.background;
        a1.coversSeparators = b.coversSeparators;
        a1.be = b.be;
    }
    t = Vj.prototype;
    t.qb = function(a1) {
        a1.classType === Vj && (this.sizing = a1);
    };
    t.toString = function() {
        return "RowColumnDefinition " + (this.isRow ? "(Row " : "(Column ") + this.index + ") #" + bb(this);
    };
    t.wi = function(a1) {
        this.Me = a1;
    };
    t.Ho = function(a1) {
        var b = 0, c = this.Me;
        this.index !== a1 && (a1 = this.separatorStroke, null === a1 && null !== c && (a1 = this.isRow ? c.defaultRowSeparatorStroke : c.defaultColumnSeparatorStroke), null !== a1 && (b = this.separatorStrokeWidth, isNaN(b) && (null !== c ? b = this.isRow ? c.defaultRowSeparatorStrokeWidth : c.defaultColumnSeparatorStrokeWidth : b = 0)));
        a1 = this.dg;
        if (null === a1) {
            if (null !== c) a1 = c.defaultSeparatorPadding;
            else return b;
        }
        return b + (this.isRow ? a1.top : a1.left);
    };
    t.Wc = function() {
        var a1 = 0, b = this.Me, c = 0, d = this.isRow;
        if (null !== b && b.type === W.Table) for(var e = d ? b.rowDefs.length : b.colDefs.length, f = 0; f < e; f++){
            var g = d ? b.rowDefs[f] : b.colDefs[f];
            if (void 0 !== g && 0 !== g.oa) {
                c = g.index;
                break;
            }
        }
        this.index !== c && (c = this.separatorStroke, null === c && null !== b && (c = d ? b.defaultRowSeparatorStroke : b.defaultColumnSeparatorStroke), null !== c && (a1 = this.separatorStrokeWidth, isNaN(a1) && (null !== b ? a1 = d ? b.defaultRowSeparatorStrokeWidth : b.defaultColumnSeparatorStrokeWidth : a1 = 0)));
        d = this.dg;
        if (null === d) {
            if (null !== b) d = b.defaultSeparatorPadding;
            else return a1;
        }
        return a1 + (this.isRow ? d.top + d.bottom : d.left + d.right);
    };
    t.Pb = function(a1, b, c) {
        var d = this.Me;
        if (null !== d && (d.cb(ce, a1, this, b, c, void 0, void 0), null !== this.be && (b = d.diagram, null !== b && !b.skipsModelSourceBindings && (d = d.ih(), null !== d && (b = d.data, null !== b))))) for(c = this.be.iterator; c.next();)c.value.rp(this, b, a1, d);
    };
    function Sm(a1) {
        if (a1.sizing === Mn) {
            var b = a1.Me;
            return a1.isRow ? b.rowSizing : b.columnSizing;
        }
        return a1.sizing;
    }
    t.bind = function(a1, b, c, d) {
        var e = null;
        "string" === typeof a1 ? e = new Gi(a1, b, c, d) : e = a1;
        e.xd = this;
        a1 = this.panel;
        null !== a1 && (b = a1.ih(), null !== b && Tl(b) && C("Cannot add a Binding to a RowColumnDefinition that is already frozen: " + e + " on " + a1));
        null === this.be && (this.be = new F);
        this.be.add(e);
        return this;
    };
    ma.Object.defineProperties(Vj.prototype, {
        panel: {
            get: function() {
                return this.Me;
            }
        },
        isRow: {
            get: function() {
                return this.tq;
            },
            set: function(a1) {
                this.tq = a1;
            }
        },
        index: {
            get: function() {
                return this.Za;
            },
            set: function(a1) {
                this.Za = a1;
            }
        },
        height: {
            get: function() {
                return this.Hc;
            },
            set: function(a1) {
                var b = this.Hc;
                b !== a1 && (0 > a1 && xa(a1, ">= 0", Vj, "height"), this.Hc = a1, this.actual = this.oa, null !== this.panel && this.panel.v(), this.Pb("height", b, a1));
            }
        },
        width: {
            get: function() {
                return this.Hc;
            },
            set: function(a1) {
                var b = this.Hc;
                b !== a1 && (0 > a1 && xa(a1, ">= 0", Vj, "width"), this.Hc = a1, this.actual = this.oa, null !== this.panel && this.panel.v(), this.Pb("width", b, a1));
            }
        },
        minimum: {
            get: function() {
                return this.jj;
            },
            set: function(a1) {
                var b = this.jj;
                b !== a1 && ((0 > a1 || !isFinite(a1)) && xa(a1, ">= 0", Vj, "minimum"), this.jj = a1, this.actual = this.oa, null !== this.panel && this.panel.v(), this.Pb("minimum", b, a1));
            }
        },
        maximum: {
            get: function() {
                return this.hj;
            },
            set: function(a1) {
                var b = this.hj;
                b !== a1 && (0 > a1 && xa(a1, ">= 0", Vj, "maximum"), this.hj = a1, this.actual = this.oa, null !== this.panel && this.panel.v(), this.Pb("maximum", b, a1));
            }
        },
        alignment: {
            get: function() {
                return this.Kb;
            },
            set: function(a1) {
                var b = this.Kb;
                b.D(a1) || (this.Kb = a1.J(), null !== this.panel && this.panel.v(), this.Pb("alignment", b, a1));
            }
        },
        stretch: {
            get: function() {
                return this.hg;
            },
            set: function(a1) {
                var b = this.hg;
                b !== a1 && (this.hg = a1, null !== this.panel && this.panel.v(), this.Pb("stretch", b, a1));
            }
        },
        separatorPadding: {
            get: function() {
                return this.dg;
            },
            set: function(a1) {
                "number" === typeof a1 && (a1 = new dc(a1));
                var b = this.dg;
                null !== a1 && null !== b && b.D(a1) || (null !== a1 && (a1 = a1.J()), this.dg = a1, null !== this.panel && this.panel.v(), this.Pb("separatorPadding", b, a1));
            }
        },
        separatorStroke: {
            get: function() {
                return this.ko;
            },
            set: function(a1) {
                var b = this.ko;
                b !== a1 && (null !== a1 && cm(a1, "RowColumnDefinition.separatorStroke"), a1 instanceof ql && a1.freeze(), this.ko = a1, null !== this.panel && this.panel.v(), this.Pb("separatorStroke", b, a1));
            }
        },
        separatorStrokeWidth: {
            get: function() {
                return this.lo;
            },
            set: function(a1) {
                var b = this.lo;
                b !== a1 && (this.lo = a1, null !== this.panel && this.panel.v(), this.Pb("separatorStrokeWidth", b, a1));
            }
        },
        separatorDashArray: {
            get: function() {
                return this.tj;
            },
            set: function(a1) {
                var b = this.tj;
                if (b !== a1) {
                    if (null !== a1) {
                        for(var c = a1.length, d = 0, e = 0; e < c; e++){
                            var f = a1[e];
                            "number" === typeof f && 0 <= f && isFinite(f) || C("separatorDashArray value " + f + " at index " + e + " must be a positive number or zero.");
                            d += f;
                        }
                        if (0 === d) {
                            if (null === b) return;
                            a1 = null;
                        }
                    }
                    this.tj = a1;
                    null !== this.panel && this.panel.N();
                    this.Pb("separatorDashArray", b, a1);
                }
            }
        },
        background: {
            get: function() {
                return this.Ma;
            },
            set: function(a1) {
                var b = this.Ma;
                b !== a1 && (null !== a1 && cm(a1, "RowColumnDefinition.background"), a1 instanceof ql && a1.freeze(), this.Ma = a1, null !== this.panel && this.panel.N(), this.Pb("background", b, a1));
            }
        },
        coversSeparators: {
            get: function() {
                return this.Om;
            },
            set: function(a1) {
                var b = this.Om;
                b !== a1 && (this.Om = a1, null !== this.panel && this.panel.N(), this.Pb("coversSeparators", b, a1));
            }
        },
        sizing: {
            get: function() {
                return this.no;
            },
            set: function(a1) {
                var b = this.no;
                b !== a1 && (this.no = a1, null !== this.panel && this.panel.v(), this.Pb("sizing", b, a1));
            }
        },
        actual: {
            get: function() {
                return this.oa;
            },
            set: function(a1) {
                this.oa = isNaN(this.Hc) ? Math.max(Math.min(this.hj, a1), this.jj) : Math.max(Math.min(this.hj, this.Hc), this.jj);
            }
        },
        measured: {
            get: function() {
                return this.pc;
            },
            set: function(a1) {
                this.pc = a1;
            }
        },
        total: {
            get: function() {
                return this.oa + this.Wc();
            }
        },
        position: {
            get: function() {
                return this.pa;
            },
            set: function(a1) {
                this.pa = a1;
            }
        }
    });
    Vj.prototype.computeEffectiveSpacing = Vj.prototype.Wc;
    Vj.prototype.computeEffectiveSpacingTop = Vj.prototype.Ho;
    var Mn = new E(Vj, "Default", 0), Tm = new E(Vj, "None", 1), Ln = new E(Vj, "ProportionalExtra", 2);
    Vj.className = "RowColumnDefinition";
    Vj.Default = Mn;
    Vj.None = Tm;
    Vj.ProportionalExtra = Ln;
    function Bf(a1, b) {
        Y.call(this);
        this.Rd = this.ua = null;
        this.$m = "None";
        this.xc = this.Ui = "black";
        this.ig = 1;
        this.Na = this.Yg = null;
        this.Un = this.Tn = NaN;
        this.fa = null;
        "string" === typeof a1 ? this.figure = a1 : a1 && Object.assign(this, a1);
        b && Object.assign(this, b);
    }
    la(Bf, Y);
    Bf.prototype.cloneProtected = function(a1) {
        Y.prototype.cloneProtected.call(this, a1);
        a1.ua = this.ua;
        a1.Rd = this.Rd;
        a1.$m = this.$m;
        a1.Ui = this.Ui;
        a1.xc = this.xc;
        a1.ig = this.ig;
        null !== this.Yg && (a1.Yg = Ba(this.Yg));
        null !== this.Na && (a1.Na = this.Na.oc ? this.Na : this.Na.copy());
        a1.Tn = this.Tn;
        a1.Un = this.Un;
        null !== this.fa && (a1.fa = this.fa.copy());
    };
    function Nn(a1) {
        null === a1.Na ? a1.Na = new On : a1.Na.oc && (a1.Na = a1.Na.copy());
    }
    t = Bf.prototype;
    t.th = function() {
        Y.prototype.th.call(this);
        null !== this.Na && (this.Na.oc = !0);
    };
    t.qb = function(a1) {
        a1 === kg || a1 === mg || a1 === Zk || a1 === Yk ? this.geometryStretch = a1 : Y.prototype.qb.call(this, a1);
    };
    t.toString = function() {
        return "Shape(" + ("None" !== this.figure ? this.figure : "None" !== this.toArrow ? this.toArrow : this.fromArrow) + ")#" + bb(this);
    };
    function Wn(a1, b, c, d) {
        var e = c.length;
        if (!(4 > e)) {
            var f = d.measuredBounds, g = Math.max(1, f.width);
            f = f.height;
            for(var h = c[0], k = c[1], l, m, n, p, q, r, u = 0, w = Ea(), v = 2; v < e; v += 2)l = c[v], m = c[v + 1], n = l - h, h = m - k, 0 === n && (n = .001), p = h / n, q = Math.atan2(h, n), r = Math.sqrt(n * n + h * h), w.push([
                n,
                q,
                p,
                r
            ]), u += r, h = l, k = m;
            h = c[0];
            k = c[1];
            n = d.measuredBounds.width;
            d instanceof Bf && (n -= d.strokeWidth);
            1 > n && (n = 1);
            e = c = n;
            l = g / 2;
            m = 0 === l ? !1 : !0;
            v = 0;
            r = w[v];
            n = r[0];
            q = r[1];
            p = r[2];
            r = r[3];
            for(var y = 0; .1 <= u;){
                0 === y && (m ? (e = c, e -= l, u -= l, m = !1) : e = c, 0 === e && (e = 1));
                if (e > u) {
                    Ga(w);
                    return;
                }
                e > r ? (y = e - r, e = r) : y = 0;
                var z = Math.sqrt(e * e / (1 + p * p));
                0 > n && (z = -z);
                h += z;
                k += p * z;
                a1.translate(h, k);
                a1.rotate(q);
                a1.translate(-(g / 2), -(f / 2));
                0 === y && d.hh(a1, b);
                a1.translate(g / 2, f / 2);
                a1.rotate(-q);
                a1.translate(-h, -k);
                u -= e;
                r -= e;
                if (0 !== y) {
                    v++;
                    if (v === w.length) {
                        Ga(w);
                        return;
                    }
                    r = w[v];
                    n = r[0];
                    q = r[1];
                    p = r[2];
                    r = r[3];
                    e = y;
                }
            }
            Ga(w);
        }
    }
    t.hh = function(a1, b) {
        var c = this.xc, d = this.Ui;
        if (null !== c || null !== d) {
            var e = this.ua;
            if (null !== e) {
                a1.yc();
                var f = this.actualBounds, g = this.naturalBounds;
                null !== d && ji(this, a1, d, !0, !1, g, f);
                var h = this.part, k = this.ig;
                null === c || 0 !== k || null === h || !this.isPanelMain && h.Qb() !== this || (k = h.type === W.Link && h instanceof te && "Selection" === h.category && h.adornedObject instanceof Bf && h.adornedPart.Qb() === h.adornedObject ? h.adornedObject.strokeWidth : 0);
                0 === k && (c = null);
                null !== c && 0 !== k && (ji(this, a1, c, !1, !1, g, f), a1.lineWidth = k, a1.lineJoin = this.strokeJoin, a1.lineCap = this.strokeCap, a1.miterLimit = this.strokeMiterLimit);
                f = !1;
                h && b.Gf("drawShadows") && (f = h.isShadowed);
                !1 === a1.Hl && (f = !1);
                h = !0;
                null === c || null !== d && "transparent" !== d || (h = !1);
                g = !1;
                k = this.strokeDashArray;
                null !== k && (g = !0, a1.hs(k, this.strokeDashOffset));
                if (e.type === P.j) a1.beginPath(), a1.moveTo(e.startX, e.startY), a1.lineTo(e.endX, e.endY), null !== c && a1.ik(), a1.Se();
                else if (e.type === P.u) {
                    var l = e.startX;
                    k = e.startY;
                    var m = e.endX, n = e.endY;
                    e = Math.min(l, m);
                    var p = Math.min(k, n);
                    l = Math.abs(m - l);
                    k = Math.abs(n - k);
                    a1.beginPath();
                    a1.rect(e, p, l, k);
                    null !== d && a1.ng(d);
                    null !== c && (h && f && ul(a1), a1.ik(), h && f && tl(a1));
                    a1.Se();
                } else if (e.type === P.F) l = e.startX, k = e.startY, m = e.endX, n = e.endY, e = Math.abs(m - l) / 2, p = Math.abs(n - k) / 2, l = Math.min(l, m) + e, k = Math.min(k, n) + p, a1.beginPath(), a1.moveTo(l, k - p), a1.bezierCurveTo(l + K.wg * e, k - p, l + e, k - K.wg * p, l + e, k), a1.bezierCurveTo(l + e, k + K.wg * p, l + K.wg * e, k + p, l, k + p), a1.bezierCurveTo(l - K.wg * e, k + p, l - e, k + K.wg * p, l - e, k), a1.bezierCurveTo(l - e, k - K.wg * p, l - K.wg * e, k - p, l, k - p), a1.closePath(), null !== d && a1.ng(d), null !== c && (h && f && ul(a1), a1.ik(), h && f && tl(a1)), a1.Se();
                else if (e.type === P.o) for(e = e.figures, k = e.length, p = 0; p < k; p++){
                    l = e.s[p];
                    a1.beginPath();
                    a1.moveTo(l.startX, l.startY);
                    m = l.segments.s;
                    n = m.length;
                    for(var q = null, r = 0; r < n; r++){
                        var u = m[r];
                        switch(u.type){
                            case Dd:
                                a1.moveTo(u.endX, u.endY);
                                break;
                            case pd:
                                a1.lineTo(u.endX, u.endY);
                                break;
                            case Ed:
                                a1.bezierCurveTo(u.point1X, u.point1Y, u.point2X, u.point2Y, u.endX, u.endY);
                                break;
                            case Kd:
                                a1.quadraticCurveTo(u.point1X, u.point1Y, u.endX, u.endY);
                                break;
                            case Ld:
                                if (u.radiusX === u.radiusY) {
                                    var w = Math.PI / 180;
                                    a1.arc(u.point1X, u.point1Y, u.radiusX, u.startAngle * w, (u.startAngle + u.sweepAngle) * w, 0 > u.sweepAngle, null !== q ? q.endX : l.startX, null !== q ? q.endY : l.startY);
                                } else if (q = Nd(u, l), w = q.length, 0 === w) a1.lineTo(u.centerX, u.centerY);
                                else for(var v = 0; v < w; v++){
                                    var y = q[v];
                                    0 === v && a1.lineTo(y[0], y[1]);
                                    a1.bezierCurveTo(y[2], y[3], y[4], y[5], y[6], y[7]);
                                }
                                break;
                            case Md:
                                v = w = 0;
                                if (null !== q && q.type === Ld) {
                                    q = Nd(q, l);
                                    y = q.length;
                                    if (0 === y) {
                                        a1.lineTo(u.endX, u.endY);
                                        break;
                                    }
                                    q = q[y - 1] || null;
                                    null !== q && (w = q[6], v = q[7]);
                                } else w = null !== q ? q.endX : l.startX, v = null !== q ? q.endY : l.startY;
                                q = Od(u, l, w, v);
                                w = q.length;
                                if (0 === w) {
                                    a1.lineTo(u.endX, u.endY);
                                    break;
                                }
                                for(v = 0; v < w; v++)y = q[v], a1.bezierCurveTo(y[2], y[3], y[4], y[5], y[6], y[7]);
                                break;
                            default:
                                C("Segment not of valid type: " + u.type);
                        }
                        u.isClosed && a1.closePath();
                        q = u;
                    }
                    m = l.isFilled;
                    f ? l.isShadowed ? (!0 === m && "transparent" !== d && null !== d && a1.ng(d, l.isEvenOdd), null !== c && (m && h && ul(a1), a1.ik(), m && h && tl(a1))) : (ul(a1), m && "transparent" !== d && null !== d && a1.ng(d, l.isEvenOdd), null !== c && a1.ik(), tl(a1)) : (m && null !== d && a1.ng(d, l.isEvenOdd), null !== c && a1.ik());
                    a1.Se(p);
                }
                g && a1.es();
                if (null !== this.pathPattern) {
                    c = this.pathPattern;
                    c.measure(Infinity, Infinity);
                    d = c.measuredBounds;
                    c.arrange(0, 0, d.width, d.height);
                    f = this.geometry;
                    a1.save();
                    a1.beginPath();
                    d = Ea();
                    if (f.type === P.j) d.push(f.startX), d.push(f.startY), d.push(f.endX), d.push(f.endY), Wn(a1, b, d, c);
                    else if (f.type === P.o) for(f = f.figures.iterator; f.next();){
                        h = f.value;
                        d.length = 0;
                        d.push(h.startX);
                        d.push(h.startY);
                        g = h.startX;
                        e = h.startY;
                        k = g;
                        p = e;
                        l = h.segments.s;
                        m = l.length;
                        for(n = 0; n < m; n++){
                            r = l[n];
                            switch(r.type){
                                case Dd:
                                    Wn(a1, b, d, c);
                                    d.length = 0;
                                    d.push(r.endX);
                                    d.push(r.endY);
                                    g = r.endX;
                                    e = r.endY;
                                    k = g;
                                    p = e;
                                    break;
                                case pd:
                                    d.push(r.endX);
                                    d.push(r.endY);
                                    g = r.endX;
                                    e = r.endY;
                                    break;
                                case Ed:
                                    K.Qe(g, e, r.point1X, r.point1Y, r.point2X, r.point2Y, r.endX, r.endY, .5, d);
                                    g = r.endX;
                                    e = r.endY;
                                    break;
                                case Kd:
                                    K.cp(g, e, r.point1X, r.point1Y, r.endX, r.endY, .5, d);
                                    g = r.endX;
                                    e = r.endY;
                                    break;
                                case Ld:
                                    u = Nd(r, h);
                                    q = u.length;
                                    if (0 === q) {
                                        d.push(r.centerX);
                                        d.push(r.centerY);
                                        g = r.centerX;
                                        e = r.centerY;
                                        break;
                                    }
                                    for(w = 0; w < q; w++)v = u[w], K.Qe(g, e, v[2], v[3], v[4], v[5], v[6], v[7], .5, d), g = v[6], e = v[7];
                                    break;
                                case Md:
                                    u = Od(r, h, g, e);
                                    q = u.length;
                                    if (0 === q) {
                                        d.push(r.endX);
                                        d.push(r.endY);
                                        g = r.endX;
                                        e = r.endY;
                                        break;
                                    }
                                    for(w = 0; w < q; w++)v = u[w], K.Qe(g, e, v[2], v[3], v[4], v[5], v[6], v[7], .5, d), g = v[6], e = v[7];
                                    break;
                                default:
                                    C("Segment not of valid type: " + r.type);
                            }
                            r.isClosed && (d.push(k), d.push(p), Wn(a1, b, d, c));
                        }
                        Wn(a1, b, d, c);
                    }
                    else if (f.type === P.u) d.push(f.startX), d.push(f.startY), d.push(f.endX), d.push(f.startY), d.push(f.endX), d.push(f.endY), d.push(f.startX), d.push(f.endY), d.push(f.startX), d.push(f.startY), Wn(a1, b, d, c);
                    else if (f.type === P.F) {
                        e = new Wd;
                        e.startX = f.endX;
                        e.startY = (f.startY + f.endY) / 2;
                        g = new Xd(Ld);
                        g.startAngle = 0;
                        g.sweepAngle = 360;
                        g.centerX = (f.startX + f.endX) / 2;
                        g.centerY = (f.startY + f.endY) / 2;
                        g.radiusX = Math.abs(f.startX - f.endX) / 2;
                        g.radiusY = Math.abs(f.startY - f.endY) / 2;
                        e.add(g);
                        f = Nd(g, e);
                        h = f.length;
                        if (0 === h) d.push(g.centerX), d.push(g.centerY);
                        else for(g = e.startX, e = e.startY, k = 0; k < h; k++)p = f[k], K.Qe(g, e, p[2], p[3], p[4], p[5], p[6], p[7], .5, d), g = p[6], e = p[7];
                        Wn(a1, b, d, c);
                    }
                    Ga(d);
                    a1.restore();
                    a1.Vc(!1);
                }
            }
        }
    };
    t.jk = function(a1, b, c) {
        if (!Y.prototype.jk.call(this, a1, b, c) || null === this.xc && null === this.Ui || null === this.ua || null !== this.pathPattern || this.geometry.figures.length !== this.svg.getElementsByTagName("path").length) return !1;
        a1.Gl = this.svg;
        this.hh(a1, b);
        a1.Gl = null;
        return !0;
    };
    t.mk = function(a1) {
        return null !== this.geometry && 1 < this.geometry.figures.length || null !== this.pathPattern ? !0 : Y.prototype.mk.call(this, a1);
    };
    t.Dv = function(a1, b) {
        if ("g" !== a1.nodeName) a1.setAttributeNS(null, "filter", b);
        else {
            a1 = a1.getElementsByTagName("path");
            for(var c = 0; c < a1.length; c++)a1[c].setAttributeNS(null, "filter", b);
        }
    };
    t.ga = function(a1, b) {
        void 0 === b && (b = new J);
        if (a1 instanceof O) {
            a1.Mc() && C("getDocumentPoint Spot must be a real, specific Spot, not: " + a1.toString());
            var c = this.naturalBounds, d = this.strokeWidth;
            b.h(a1.x * (c.width + d) - d / 2 + c.x + a1.offsetX, a1.y * (c.height + d) - d / 2 + c.y + a1.offsetY);
        } else b.set(a1);
        this.oe.Ga(b);
        return b;
    };
    t.mi = function(a1) {
        void 0 === a1 && (a1 = new N);
        var b = this.naturalBounds, c = this.oe;
        b = N.allocAt(b.x, b.y, b.width, b.height);
        var d = this.strokeWidth;
        b.Bc(d / 2, d / 2);
        d = J.allocAt(b.x, b.y).transform(c);
        a1.h(d.x, d.y, 0, 0);
        d.h(b.right, b.y).transform(c);
        Yb(a1, d.x, d.y, 0, 0);
        d.h(b.right, b.bottom).transform(c);
        Yb(a1, d.x, d.y, 0, 0);
        d.h(b.x, b.bottom).transform(c);
        Yb(a1, d.x, d.y, 0, 0);
        N.free(b);
        J.free(d);
        return a1;
    };
    t.gh = function(a1, b) {
        var c = this.geometry;
        if (null === c || null === this.fill && null === this.stroke) return !1;
        var d = c.bounds, e = this.strokeWidth / 2;
        c.type !== P.j || b || (e += 2);
        var f = N.alloc();
        f.assign(d);
        f.Bc(e + 2, e + 2);
        if (!f.ca(a1)) return N.free(f), !1;
        d = e + 1E-4;
        if (c.type === P.j) {
            if (null === this.stroke) return !1;
            d = (c.endX - c.startX) * (a1.x - c.startX) + (c.endY - c.startY) * (a1.y - c.startY);
            if (0 > (c.startX - c.endX) * (a1.x - c.endX) + (c.startY - c.endY) * (a1.y - c.endY) || 0 > d) return !1;
            N.free(f);
            return K.Zb(c.startX, c.startY, c.endX, c.endY, e, a1.x, a1.y);
        }
        if (c.type === P.u) {
            b = c.startX;
            var g = c.startY, h = c.endX;
            c = c.endY;
            f.x = Math.min(b, h);
            f.y = Math.min(g, c);
            f.width = Math.abs(h - b);
            f.height = Math.abs(c - g);
            if (null === this.fill) {
                f.Bc(-d, -d);
                if (f.ca(a1)) return N.free(f), !1;
                f.Bc(d, d);
            }
            null !== this.stroke && f.Bc(e, e);
            a1 = f.ca(a1);
            N.free(f);
            return a1;
        }
        if (c.type === P.F) {
            g = c.startX;
            e = c.startY;
            h = c.endX;
            var k = c.endY;
            c = Math.min(g, h);
            b = Math.min(e, k);
            g = Math.abs(h - g) / 2;
            e = Math.abs(k - e) / 2;
            c = a1.x - (c + g);
            b = a1.y - (b + e);
            if (null === this.fill) {
                g -= d;
                e -= d;
                if (0 >= g || 0 >= e || 1 >= c * c / (g * g) + b * b / (e * e)) return N.free(f), !1;
                g += d;
                e += d;
            }
            null !== this.stroke && (g += d, e += d);
            N.free(f);
            return 0 >= g || 0 >= e ? !1 : 1 >= c * c / (g * g) + b * b / (e * e);
        }
        if (c.type === P.o) return N.free(f), null === this.fill ? Rd(c, a1.x, a1.y, e) : Pd(c, a1, e, 1 < this.strokeWidth, b);
        C("Unknown Geometry type: " + c.type);
    };
    t.Vl = function(a1, b, c, d) {
        var e = this.desiredSize, f = this.ig;
        a1 = Math.max(a1, 0);
        b = Math.max(b, 0);
        if (null !== this.Rd) var g = this.geometry.bounds;
        else {
            var h = this.figure, k = Xn[h];
            if (void 0 === k) {
                var l = K.Ze[h];
                "string" === typeof l && (l = K.Ze[l]);
                "function" === typeof l ? (k = l(null, 100, 100), Xn[h] = k) : C("Unsupported Figure: " + h);
            }
            g = k.bounds;
        }
        h = g.width;
        k = g.height;
        l = g.width;
        var m = g.height;
        switch(jl(this, !0)){
            case kg:
                d = c = 0;
                break;
            case nd:
                l = Math.max(a1 - f, 0);
                m = Math.max(b - f, 0);
                break;
            case Wk:
                l = Math.max(a1 - f, 0);
                d = 0;
                break;
            case Xk:
                c = 0, m = Math.max(b - f, 0);
        }
        isFinite(e.width) && (l = e.width);
        isFinite(e.height) && (m = e.height);
        var n = this.maxSize, p = this.minSize;
        c = Math.max(c - f, p.width);
        d = Math.max(d - f, p.height);
        l = Math.min(n.width, l);
        m = Math.min(n.height, m);
        l = isFinite(l) ? Math.max(c, l) : Math.max(h, c);
        m = isFinite(m) ? Math.max(d, m) : Math.max(k, d);
        c = lg(this);
        switch(c){
            case kg:
                break;
            case nd:
                h = l;
                k = m;
                break;
            case mg:
                c = Math.min(l / h, m / k);
                isFinite(c) || (c = 1);
                h *= c;
                k *= c;
                break;
            default:
                C(c + " is not a valid geometryStretch.");
        }
        null !== this.Rd ? (0 === h && (h = .001), 0 === k && (k = .001), c = null !== this.Rd ? this.Rd : this.ua, g = c.bounds, d = h / g.width, g = k / g.height, isFinite(d) || (d = 1), isFinite(g) || (g = 1), this.ua = 1 === d && 1 === g ? c : c.copy().scale(d, g)) : null !== this.ua && K.$(this.ua.Rk, a1 - f) && K.$(this.ua.Qk, b - f) || (this.ua = Bf.makeGeometry(this, h, k));
        g = this.ua.bounds;
        Infinity === a1 || Infinity === b ? this.Ge(g.x - f / 2, g.y - f / 2, 0 === a1 && 0 === h ? 0 : g.width + f, 0 === b && 0 === k ? 0 : g.height + f) : this.Ge(-(f / 2), -(f / 2), l + f, m + f);
        e.w() ? (l = e.width, m = e.height, l = Math.min(n.width, l), m = Math.min(n.height, m), l = Math.max(p.width, l), m = Math.max(p.height, m), this.ec.h(0, 0, l, m)) : this.ec.assign(g);
    };
    function lg(a1) {
        var b = a1.geometryStretch;
        return null !== a1.Rd ? b === Yk ? nd : b : b === Yk ? Xn[a1.figure].defaultStretch : b;
    }
    t.eh = function(a1, b, c, d) {
        ml(this, a1, b, c, d);
    };
    t.qs = function(a1, b, c) {
        return this.Rj(a1.x, a1.y, b.x, b.y, c);
    };
    t.Rj = function(a1, b, c, d, e) {
        var f = this.transform, g = 1 / (f.m11 * f.m22 - f.m12 * f.m21), h = f.m22 * g, k = -f.m12 * g, l = -f.m21 * g, m = f.m11 * g, n = g * (f.m21 * f.dy - f.m22 * f.dx), p = g * (f.m12 * f.dx - f.m11 * f.dy);
        f = a1 * h + b * l + n;
        g = a1 * k + b * m + p;
        h = c * h + d * l + n;
        k = c * k + d * m + p;
        n = this.ig / 2;
        l = this.ua;
        null === l && (this.measure(Infinity, Infinity), l = this.ua);
        var q = l.bounds;
        m = !1;
        if (l.type === P.j) {
            if (1.5 >= this.strokeWidth) m = K.Ve(l.startX, l.startY, l.endX, l.endY, f, g, h, k, e);
            else {
                l.startX === l.endX ? (d = n, m = 0) : (b = (l.endY - l.startY) / (l.endX - l.startX), m = n / Math.sqrt(1 + b * b), d = m * b);
                b = Ea();
                a1 = new J;
                K.Ve(l.startX + d, l.startY + m, l.endX + d, l.endY + m, f, g, h, k, a1) && b.push(a1);
                a1 = new J;
                K.Ve(l.startX - d, l.startY - m, l.endX - d, l.endY - m, f, g, h, k, a1) && b.push(a1);
                a1 = new J;
                K.Ve(l.startX + d, l.startY + m, l.startX - d, l.startY - m, f, g, h, k, a1) && b.push(a1);
                a1 = new J;
                K.Ve(l.endX + d, l.endY + m, l.endX - d, l.endY - m, f, g, h, k, a1) && b.push(a1);
                h = b.length;
                if (0 === h) return Ga(b), !1;
                m = !0;
                k = Infinity;
                for(d = 0; d < h; d++)a1 = b[d], c = (a1.x - f) * (a1.x - f) + (a1.y - g) * (a1.y - g), c < k && (k = c, e.x = a1.x, e.y = a1.y);
                Ga(b);
            }
        } else if (l.type === P.u) m = K.Ff(q.x - n, q.y - n, q.x + q.width + n, q.y + q.height + n, f, g, h, k, e);
        else if (l.type === P.F) {
            b = N.allocAt(q.x, q.y, q.width, q.height).Bc(n, n);
            a: if (0 === b.width) m = K.Ve(b.x, b.y, b.x, b.y + b.height, f, g, h, k, e);
            else if (0 === b.height) m = K.Ve(b.x, b.y, b.x + b.width, b.y, f, g, h, k, e);
            else {
                a1 = b.width / 2;
                l = b.height / 2;
                d = b.x + a1;
                m = b.y + l;
                c = 9999;
                f !== h && (c = (g - k) / (f - h));
                if (9999 > Math.abs(c)) {
                    k = g - m - c * (f - d);
                    if (0 > a1 * a1 * c * c + l * l - k * k) {
                        e.x = NaN;
                        e.y = NaN;
                        m = !1;
                        break a;
                    }
                    n = Math.sqrt(a1 * a1 * c * c + l * l - k * k);
                    h = (-(a1 * a1 * c * k) + a1 * l * n) / (l * l + a1 * a1 * c * c) + d;
                    a1 = (-(a1 * a1 * c * k) - a1 * l * n) / (l * l + a1 * a1 * c * c) + d;
                    l = c * (h - d) + k + m;
                    k = c * (a1 - d) + k + m;
                    Math.abs((f - h) * (f - h)) + Math.abs((g - l) * (g - l)) < Math.abs((f - a1) * (f - a1)) + Math.abs((g - k) * (g - k)) ? (e.x = h, e.y = l) : (e.x = a1, e.y = k);
                } else {
                    h = l * l;
                    k = f - d;
                    h -= h / (a1 * a1) * k * k;
                    if (0 > h) {
                        e.x = NaN;
                        e.y = NaN;
                        m = !1;
                        break a;
                    }
                    k = Math.sqrt(h);
                    h = m + k;
                    k = m - k;
                    Math.abs(h - g) < Math.abs(k - g) ? (e.x = f, e.y = h) : (e.x = f, e.y = k);
                }
                m = !0;
            }
            N.free(b);
        } else if (l.type === P.o) {
            p = J.alloc();
            var r = h - f;
            var u = k - g, w = r * r + u * u, v = f, y = g;
            if (0 < w && q.contains(v, y) && (p.x = v, p.y = y, this.ca(p))) for(0 !== r && .5 > Math.abs(r) ? (u *= .5 / r, r = .5) : 0 !== u && .5 > Math.abs(u) && (r *= .5 / u, u = .5), v -= r, y -= u; q.contains(v, y);)v -= r, y -= u;
            e.x = h;
            e.y = k;
            for(u = 0; u < l.figures.count; u++){
                var z = l.figures.s[u], A = z.isFilled ? v : f, B = z.isFilled ? y : g, D = z.segments;
                q = z.startX;
                r = z.startY;
                for(var M = q, S = r, R = 0; R < D.count; R++){
                    var I = D.s[R], G = I.type;
                    var ca = I.endX;
                    var X = I.endY;
                    var na = !1;
                    switch(G){
                        case Dd:
                            M = ca;
                            S = X;
                            break;
                        case pd:
                            na = Yn(q, r, ca, X, A, B, h, k, p);
                            break;
                        case Ed:
                            na = K.Do(q, r, I.point1X, I.point1Y, I.point2X, I.point2Y, ca, X, A, B, h, k, .6, p);
                            break;
                        case Kd:
                            na = K.Do(q, r, q + 2 / 3 * (I.point1X - q), r + 2 / 3 * (I.point1Y - r), ca + 2 / 3 * (I.point1X - ca), X + 2 / 3 * (I.point1Y - X), ca, X, A, B, h, k, .6, p);
                            break;
                        case Ld:
                        case Md:
                            G = I.type === Ld ? Nd(I, z) : Od(I, z, q, r);
                            var wa = G.length;
                            if (0 === wa) {
                                na = Yn(q, r, I.type === Ld ? I.centerX : I.endX, I.type === Ld ? I.centerY : I.endY, A, B, h, k, p);
                                break;
                            }
                            X = null;
                            for(ca = 0; ca < wa; ca++){
                                X = G[ca];
                                if (0 === ca && Yn(q, r, X[0], X[1], A, B, h, k, p)) {
                                    var db = Zn(A, B, p, w, e);
                                    db < w && (w = db, m = !0);
                                }
                                K.Do(X[0], X[1], X[2], X[3], X[4], X[5], X[6], X[7], A, B, h, k, .6, p) && (db = Zn(A, B, p, w, e), db < w && (w = db, m = !0));
                            }
                            ca = X[6];
                            X = X[7];
                            break;
                        default:
                            C("Unknown Segment type: " + G);
                    }
                    q = ca;
                    r = X;
                    na && (na = Zn(A, B, p, w, e), na < w && (w = na, m = !0));
                    I.isClosed && (ca = M, X = S, Yn(q, r, ca, X, A, B, h, k, p) && (I = Zn(A, B, p, w, e), I < w && (w = I, m = !0)));
                }
            }
            f = c - a1;
            g = d - b;
            h = Math.sqrt(f * f + g * g);
            0 !== h && (f /= h, g /= h);
            e.x -= f * n;
            e.y -= g * n;
            J.free(p);
        } else C("Unknown Geometry type: " + l.type);
        if (!m) return !1;
        this.transform.Ga(e);
        return !0;
    };
    function Zn(a1, b, c, d, e) {
        a1 = c.x - a1;
        b = c.y - b;
        b = a1 * a1 + b * b;
        return b < d ? (e.x = c.x, e.y = c.y, b) : d;
    }
    function Yn(a1, b, c, d, e, f, g, h, k) {
        if (K.$(a1, c) && K.$(b, d) || K.$(e, g) && K.$(f, h)) return !1;
        var l = !1, m = (e - g) * (b - d) - (f - h) * (a1 - c);
        if (0 === m) return !1;
        k.x = ((e * h - f * g) * (a1 - c) - (e - g) * (a1 * d - b * c)) / m;
        k.y = ((e * h - f * g) * (b - d) - (f - h) * (a1 * d - b * c)) / m;
        (a1 > c ? a1 - c : c - a1) < (b > d ? b - d : d - b) ? (a1 = b < d ? b : d, b = b < d ? d : b, (k.y > a1 || K.$(k.y, a1)) && (k.y < b || K.$(k.y, b)) && (l = !0)) : (b = a1 < c ? a1 : c, a1 = a1 < c ? c : a1, (k.x > b || K.$(k.x, b)) && (k.x < a1 || K.$(k.x, a1)) && (l = !0));
        return l;
    }
    t.fh = function(a1, b) {
        if (void 0 === b) return a1.Re(this.actualBounds);
        var c = this.ua;
        null === c && (this.measure(Infinity, Infinity), c = this.ua);
        c = c.bounds;
        var d = this.strokeWidth / 2, e = !1, f = J.alloc();
        f.h(c.x - d, c.y - d);
        a1.ca(b.Ga(f)) && (f.h(c.x - d, c.bottom + d), a1.ca(b.Ga(f)) && (f.h(c.right + d, c.bottom + d), a1.ca(b.Ga(f)) && (f.h(c.right + d, c.y - d), a1.ca(b.Ga(f)) && (e = !0))));
        J.free(f);
        return e;
    };
    t.Yc = function(a1, b) {
        if (this.fh(a1, b) || void 0 === b && (b = this.transform, a1.Re(this.actualBounds))) return !0;
        var c = ld.alloc();
        c.set(b);
        c.Uj();
        var d = a1.left, e = a1.right, f = a1.top;
        a1 = a1.bottom;
        var g = J.alloc();
        g.h(d, f);
        c.Ga(g);
        if (this.gh(g, !0)) return J.free(g), !0;
        g.h(e, f);
        c.Ga(g);
        if (this.gh(g, !0)) return J.free(g), !0;
        g.h(d, a1);
        c.Ga(g);
        if (this.gh(g, !0)) return J.free(g), !0;
        g.h(e, a1);
        c.Ga(g);
        if (this.gh(g, !0)) return J.free(g), !0;
        var h = J.alloc(), k = J.alloc();
        c.set(b);
        c.bv(this.transform);
        c.Uj();
        h.x = e;
        h.y = f;
        h.transform(c);
        g.x = d;
        g.y = f;
        g.transform(c);
        b = !1;
        $n(this, g, h, k) ? b = !0 : (g.x = e, g.y = a1, g.transform(c), $n(this, g, h, k) ? b = !0 : (h.x = d, h.y = a1, h.transform(c), $n(this, g, h, k) ? b = !0 : (g.x = d, g.y = f, g.transform(c), $n(this, g, h, k) && (b = !0))));
        J.free(g);
        ld.free(c);
        J.free(h);
        J.free(k);
        return b;
    };
    function $n(a1, b, c, d) {
        if (!a1.qs(b, c, d)) return !1;
        a1 = b.x;
        b = b.y;
        var e = c.x, f = c.y;
        c = d.x;
        d = d.y;
        if (a1 === e) return b < f ? (a1 = b, b = f) : a1 = f, d >= a1 && d <= b;
        a1 < e ? (d = a1, a1 = e) : d = e;
        return c >= d && c <= a1;
    }
    t.tx = function(a1, b, c) {
        function d(a1, b) {
            for(var c = a1.length, d = 0; d < c; d += 2)if (b.zd(a1[d], a1[d + 1]) > e) return !0;
            return !1;
        }
        if (c && null !== this.fill && this.gh(a1, !0)) return !0;
        var e = a1.Bf(b), f = e;
        1.5 < this.strokeWidth && (e = this.strokeWidth / 2 + Math.sqrt(e), e *= e);
        b = this.ua;
        if (null === b && (this.measure(Infinity, Infinity), b = this.ua, null === b)) return !1;
        if (!c) {
            var g = b.bounds, h = g.x, k = g.y, l = g.x + g.width;
            g = g.y + g.height;
            if (zb(a1.x, a1.y, h, k) <= e && zb(a1.x, a1.y, l, k) <= e && zb(a1.x, a1.y, h, g) <= e && zb(a1.x, a1.y, l, g) <= e) return !0;
        }
        h = b.startX;
        k = b.startY;
        l = b.endX;
        g = b.endY;
        if (b.type === P.j) {
            if (c = (h - l) * (a1.x - l) + (k - g) * (a1.y - g), yb(a1.x, a1.y, h, k, l, g) <= (0 <= (l - h) * (a1.x - h) + (g - k) * (a1.y - k) && 0 <= c ? e : f)) return !0;
        } else {
            if (b.type === P.u) return b = !1, c && (b = yb(a1.x, a1.y, h, k, h, g) <= e || yb(a1.x, a1.y, h, k, l, k) <= e || yb(a1.x, a1.y, l, k, l, g) <= e || yb(a1.x, a1.y, h, g, l, g) <= e), b;
            if (b.type === P.F) {
                b = a1.x - (h + l) / 2;
                f = a1.y - (k + g) / 2;
                var m = Math.abs(l - h) / 2, n = Math.abs(g - k) / 2;
                if (0 === m || 0 === n) return yb(a1.x, a1.y, h, k, l, g) <= e ? !0 : !1;
                if (c) {
                    if (a1 = K.$y(m, n, b, f), a1 * a1 <= e) return !0;
                } else return zb(b, f, -m, 0) >= e || zb(b, f, 0, -n) >= e || zb(b, f, 0, n) >= e || zb(b, f, m, 0) >= e ? !1 : !0;
            } else if (b.type === P.o) {
                l = b.bounds;
                f = l.x;
                h = l.y;
                k = l.x + l.width;
                l = l.y + l.height;
                if (a1.x > k && a1.x < f && a1.y > l && a1.y < h && yb(a1.x, a1.y, f, h, f, l) > e && yb(a1.x, a1.y, f, h, k, h) > e && yb(a1.x, a1.y, k, l, f, l) > e && yb(a1.x, a1.y, k, l, k, h) > e) return !1;
                f = Math.sqrt(e);
                if (c) {
                    if (null === this.fill ? Rd(b, a1.x, a1.y, f) : Pd(b, a1, f, !0, !1)) return !0;
                } else {
                    c = b.figures;
                    for(b = 0; b < c.count; b++){
                        f = c.s[b];
                        g = f.startX;
                        m = f.startY;
                        if (a1.zd(g, m) > e) return !1;
                        h = f.segments.s;
                        k = h.length;
                        for(l = 0; l < k; l++)switch(n = h[l], n.type){
                            case Dd:
                            case pd:
                                g = n.endX;
                                m = n.endY;
                                if (a1.zd(g, m) > e) return !1;
                                break;
                            case Ed:
                                var p = Ea();
                                K.Qe(g, m, n.point1X, n.point1Y, n.point2X, n.point2Y, n.endX, n.endY, .8, p);
                                g = d(p, a1);
                                Ga(p);
                                if (g) return !1;
                                g = n.endX;
                                m = n.endY;
                                if (a1.zd(g, m) > e) return !1;
                                break;
                            case Kd:
                                p = Ea();
                                K.cp(g, m, n.point1X, n.point1Y, n.endX, n.endY, .8, p);
                                g = d(p, a1);
                                Ga(p);
                                if (g) return !1;
                                g = n.endX;
                                m = n.endY;
                                if (a1.zd(g, m) > e) return !1;
                                break;
                            case Ld:
                            case Md:
                                p = n.type === Ld ? Nd(n, f) : Od(n, f, g, m);
                                var q = p.length;
                                if (0 === q) {
                                    g = n.type === Ld ? n.centerX : n.endX;
                                    m = n.type === Ld ? n.centerY : n.endY;
                                    if (a1.zd(g, m) > e) return !1;
                                    break;
                                }
                                n = null;
                                for(var r = Ea(), u = 0; u < q; u++)if (n = p[u], r.length = 0, K.Qe(n[0], n[1], n[2], n[3], n[4], n[5], n[6], n[7], .8, r), d(r, a1)) return Ga(r), !1;
                                Ga(r);
                                null !== n && (g = n[6], m = n[7]);
                                break;
                            default:
                                C("Unknown Segment type: " + n.type);
                        }
                    }
                    return !0;
                }
            }
        }
        return !1;
    };
    t.rc = function() {
        this.ua = null;
    };
    t.jq = function() {
        return this.ig;
    };
    function ao(a1) {
        var b = a1.diagram;
        null !== b && b.undoManager.isUndoingRedoing || (a1.segmentOrientation = jn, "None" !== a1.toArrow ? (a1.segmentIndex = -1, a1.alignmentFocus = bd) : "None" !== a1.fromArrow && (a1.segmentIndex = 0, a1.alignmentFocus = new O(1 - bd.x, bd.y)));
    }
    Bf.makeGeometry = function(a1, b, c) {
        if ("None" !== a1.toArrow) var d = bo[a1.toArrow];
        else "None" !== a1.fromArrow ? d = bo[a1.fromArrow] : (d = K.Ze[a1.figure], "string" === typeof d && (d = K.Ze[d]), void 0 === d && C("Unknown Shape.figure: " + a1.figure), d = d(a1, b, c), d.Rk = b, d.Qk = c);
        if (null === d) {
            var e = K.Ze.Rectangle;
            "function" === typeof e && (d = e(a1, b, c));
        }
        return d;
    };
    function co(a1) {
        var b = bo[a1];
        if (void 0 === b) {
            var c = a1.toLowerCase();
            if ("none" === c) return "None";
            b = bo[c];
            if (void 0 === b) {
                var d = null, e;
                for(e in K.tm)if (e.toLowerCase() === c) {
                    d = e;
                    break;
                }
                if (null !== d) return a1 = P.parse(K.tm[d], !1), bo[d] = a1, c !== d && (bo[c] = d), d;
            }
        }
        return "string" === typeof b ? b : b instanceof P ? a1 : null;
    }
    ma.Object.defineProperties(Bf.prototype, {
        geometry: {
            get: function() {
                return null !== this.ua ? this.ua : this.Rd;
            },
            set: function(a1) {
                var b = this.ua, c = this.Rd;
                if (b !== a1) {
                    null !== a1 ? this.Rd = this.ua = a1.freeze() : this.Rd = this.ua = null;
                    var d = this.part;
                    null !== d && (d.ag = NaN);
                    this.v();
                    this.g("geometry", b || c, a1);
                    fl(this) && (a1 = this.part, null !== a1 && gl(this, a1, "geometryString"));
                }
            }
        },
        geometryString: {
            get: function() {
                return null === this.geometry ? "" : this.geometry.toString();
            },
            set: function(a1) {
                a1 = P.parse(a1);
                var b = a1.normalize();
                this.geometry = a1;
                this.position = a1 = J.allocAt(-b.x, -b.y);
                J.free(a1);
            }
        },
        isGeometryPositioned: {
            get: function() {
                return 0 !== (this.l & 1048576);
            },
            set: function(a1) {
                var b = 0 !== (this.l & 1048576);
                b !== a1 && (this.l ^= 1048576, this.v(), this.g("isGeometryPositioned", b, a1));
            }
        },
        fill: {
            get: function() {
                return this.Ui;
            },
            set: function(a1) {
                var b = this.Ui;
                b !== a1 && (null !== a1 && cm(a1, "Shape.fill"), a1 instanceof ql && a1.freeze(), this.Ui = a1, this.N(), this.g("fill", b, a1));
            }
        },
        stroke: {
            get: function() {
                return this.xc;
            },
            set: function(a1) {
                var b = this.xc;
                b !== a1 && (null !== a1 && cm(a1, "Shape.stroke"), a1 instanceof ql && a1.freeze(), this.xc = a1, this.N(), this.g("stroke", b, a1));
            }
        },
        strokeWidth: {
            get: function() {
                return this.ig;
            },
            set: function(a1) {
                var b = this.ig;
                if (b !== a1) {
                    if (0 <= a1) {
                        this.ig = a1;
                        this.v();
                        var c = this.part;
                        null !== c && (c.ag = NaN);
                        this.g("strokeWidth", b, a1);
                    } else xa(a1, "value >= 0", Bf, "strokeWidth:value");
                }
            }
        },
        strokeCap: {
            get: function() {
                return null !== this.Na ? this.Na.Gr : "butt";
            },
            set: function(a1) {
                var b = this.strokeCap;
                b !== a1 && ("string" !== typeof a1 || "butt" !== a1 && "round" !== a1 && "square" !== a1 ? xa(a1, '"butt", "round", or "square"', Bf, "strokeCap") : (Nn(this), this.Na.Gr = a1, this.N(), this.g("strokeCap", b, a1)));
            }
        },
        strokeJoin: {
            get: function() {
                return null !== this.Na ? this.Na.Hr : "miter";
            },
            set: function(a1) {
                var b = this.strokeJoin;
                b !== a1 && ("string" !== typeof a1 || "miter" !== a1 && "bevel" !== a1 && "round" !== a1 ? xa(a1, '"miter", "bevel", or "round"', Bf, "strokeJoin") : (Nn(this), this.Na.Hr = a1, this.N(), this.g("strokeJoin", b, a1)));
            }
        },
        strokeMiterLimit: {
            get: function() {
                return null !== this.Na ? this.Na.Ir : 10;
            },
            set: function(a1) {
                var b = this.strokeMiterLimit;
                if (b !== a1 && 1 <= a1) {
                    Nn(this);
                    this.Na.Ir = a1;
                    this.N();
                    var c = this.part;
                    null !== c && (c.ag = NaN);
                    this.g("strokeMiterLimit", b, a1);
                }
            }
        },
        strokeDashArray: {
            get: function() {
                return this.Yg;
            },
            set: function(a1) {
                var b = this.Yg;
                if (b !== a1) {
                    if (null !== a1) {
                        for(var c = a1.length, d = 0, e = 0; e < c; e++){
                            var f = a1[e];
                            0 <= f && isFinite(f) || C("strokeDashArray:value " + f + " at index " + e + " must be a positive number or zero.");
                            d += f;
                        }
                        if (0 === d) {
                            if (null === b) return;
                            a1 = null;
                        }
                    }
                    this.Yg = a1;
                    this.N();
                    this.g("strokeDashArray", b, a1);
                }
            }
        },
        strokeDashOffset: {
            get: function() {
                return null !== this.Na ? this.Na.uj : 0;
            },
            set: function(a1) {
                var b = this.strokeDashOffset;
                b !== a1 && 0 <= a1 && (Nn(this), this.Na.uj = a1, this.N(), this.g("strokeDashOffset", b, a1));
            }
        },
        figure: {
            get: function() {
                return this.$m;
            },
            set: function(a1) {
                var b = this.$m;
                if (b !== a1) {
                    var c = K.Ze[a1];
                    "function" === typeof c ? c = a1 : (c = K.Ze[a1.toLowerCase()]) || C("Unknown Shape.figure: " + a1);
                    b !== c && (a1 = this.part, null !== a1 && (a1.ag = NaN), this.$m = c, this.Rd = null, this.rc(), this.v(), this.g("figure", b, c));
                }
            }
        },
        toArrow: {
            get: function() {
                return null !== this.Ua ? this.Ua.V : "None";
            },
            set: function(a1) {
                var b = this.toArrow;
                !0 === a1 ? a1 = "Standard" : !1 === a1 && (a1 = "");
                if (b !== a1) {
                    var c = co(a1);
                    null === c ? C("Unknown Shape.toArrow: " + a1) : b !== c && (null === this.Ua && (this.Ua = new bm), this.Ua.V = c, this.Rd = null, this.rc(), this.v(), ao(this), this.g("toArrow", b, c));
                }
            }
        },
        fromArrow: {
            get: function() {
                return null !== this.Ua ? this.Ua.j : "None";
            },
            set: function(a1) {
                var b = this.fromArrow;
                !0 === a1 ? a1 = "Standard" : !1 === a1 && (a1 = "");
                if (b !== a1) {
                    var c = co(a1);
                    null === c ? C("Unknown Shape.fromArrow: " + a1) : b !== c && (null === this.Ua && (this.Ua = new bm), this.Ua.j = c, this.Rd = null, this.rc(), this.v(), ao(this), this.g("fromArrow", b, c));
                }
            }
        },
        spot1: {
            get: function() {
                return null !== this.Na ? this.Na.fg : Sc;
            },
            set: function(a1) {
                var b = this.spot1;
                b.D(a1) || (a1 = a1.J(), Nn(this), this.Na.fg = a1, this.v(), this.g("spot1", b, a1));
            }
        },
        spot2: {
            get: function() {
                return null !== this.Na ? this.Na.gg : Sc;
            },
            set: function(a1) {
                var b = this.spot2;
                b.D(a1) || (a1 = a1.J(), Nn(this), this.Na.gg = a1, this.v(), this.g("spot2", b, a1));
            }
        },
        parameter1: {
            get: function() {
                return this.Tn;
            },
            set: function(a1) {
                var b = this.Tn;
                b !== a1 && (this.Tn = a1, this.rc(), this.v(), this.g("parameter1", b, a1));
            }
        },
        parameter2: {
            get: function() {
                return this.Un;
            },
            set: function(a1) {
                var b = this.Un;
                b !== a1 && (this.Un = a1, this.rc(), this.v(), this.g("parameter2", b, a1));
            }
        },
        naturalBounds: {
            get: function() {
                return this.ec;
            }
        },
        pathPattern: {
            get: function() {
                return null !== this.Na ? this.Na.ar : null;
            },
            set: function(a1) {
                var b = this.pathPattern;
                b !== a1 && (Nn(this), this.Na.ar = a1, this.N(), this.g("pathPattern", b, a1));
            }
        },
        geometryStretch: {
            get: function() {
                return null !== this.Na ? this.Na.iq : Yk;
            },
            set: function(a1) {
                var b = this.geometryStretch;
                b !== a1 && (Nn(this), this.Na.iq = a1, this.v(), this.g("geometryStretch", b, a1));
            }
        },
        interval: {
            get: function() {
                return null !== this.fa ? this.fa.Sk : 1;
            },
            set: function(a1) {
                var b = this.interval;
                a1 = Math.round(a1);
                if (b !== a1 && 0 !== a1 && isFinite(a1)) {
                    null === this.fa && (this.fa = new eo);
                    this.fa.Sk = a1;
                    var c = this.diagram;
                    null !== c && this.panel === c.grid && qj(c);
                    this.v();
                    c = this.panel;
                    null !== c && (c.graduatedIntervals = null);
                    this.g("interval", b, a1);
                }
            }
        },
        graduatedStart: {
            get: function() {
                return null !== this.fa ? this.fa.u : 0;
            },
            set: function(a1) {
                var b = this.graduatedStart;
                b !== a1 && (0 > a1 ? a1 = 0 : 1 < a1 && (a1 = 1), null === this.fa && (this.fa = new eo), this.fa.u = a1, this.v(), this.g("graduatedStart", b, a1));
            }
        },
        graduatedEnd: {
            get: function() {
                return null !== this.fa ? this.fa.j : 1;
            },
            set: function(a1) {
                var b = this.graduatedEnd;
                b !== a1 && (0 > a1 ? a1 = 0 : 1 < a1 && (a1 = 1), null === this.fa && (this.fa = new eo), this.fa.j = a1, this.v(), this.g("graduatedEnd", b, a1));
            }
        },
        graduatedSkip: {
            get: function() {
                return null !== this.fa ? this.fa.o : null;
            },
            set: function(a1) {
                var b = this.graduatedSkip;
                b !== a1 && (null === this.fa && (this.fa = new eo), this.fa.o = a1, this.v(), this.g("graduatedSkip", b, a1));
            }
        }
    });
    Bf.prototype.intersectsRect = Bf.prototype.Yc;
    Bf.prototype.containedInRect = Bf.prototype.fh;
    Bf.prototype.getNearestIntersectionPoint = Bf.prototype.qs;
    Bf.prototype.getDocumentBounds = Bf.prototype.mi;
    Bf.prototype.getDocumentPoint = Bf.prototype.ga;
    var bo = new Ta, Xn = new Ta;
    Bf.className = "Shape";
    Bf.getFigureGenerators = function() {
        var a1 = new ob, b;
        for(b in K.Ze)b !== b.toLowerCase() && a1.add(b, K.Ze[b]);
        a1.freeze();
        return a1;
    };
    Bf.defineFigureGenerator = function(a1, b) {
        var c = a1.toLowerCase(), d = K.Ze;
        d[a1] = b;
        d[c] = a1;
    };
    Bf.getArrowheadGeometries = function() {
        var a1 = new ob;
        for(d in K.tm)if (void 0 === bo[d]) {
            var b = P.parse(K.tm[d], !1);
            bo[d] = b;
            b = d.toLowerCase();
            b !== d && (bo[b] = d);
        }
        for(var c in bo)if (c !== c.toLowerCase()) {
            var d = bo[c];
            d instanceof P && a1.add(c, d);
        }
        a1.freeze();
        return a1;
    };
    Bf.defineArrowheadGeometry = function(a1, b) {
        var c = null;
        "string" === typeof b ? c = P.parse(b, !1) : c = b;
        b = a1.toLowerCase();
        "none" !== b && a1 !== b || C("Shape.defineArrowheadGeometry name must not be empty or None or all-lower-case: " + a1);
        var d = bo;
        d[a1] = c;
        d[b] = a1;
    };
    function On() {
        this.oc = !1;
        this.Gr = "butt";
        this.Hr = "miter";
        this.Ir = 10;
        this.uj = 0;
        this.ar = null;
        this.iq = Yk;
        this.gg = this.fg = Sc;
    }
    On.prototype.copy = function() {
        var a1 = new On;
        a1.Gr = this.Gr;
        a1.Hr = this.Hr;
        a1.Ir = this.Ir;
        a1.uj = this.uj;
        a1.ar = this.ar;
        a1.iq = this.iq;
        a1.fg = this.fg.J();
        a1.gg = this.gg.J();
        return a1;
    };
    function Pg(a1, b) {
        Y.call(this);
        fo || (go = Ng ? new Pi(null).context : null, fo = !0);
        this.l |= 2097152;
        this.fc = "";
        this.xc = "black";
        this.Ae = "13px sans-serif";
        this.Kq = this.Db = this.Gc = 0;
        this.da = this.fa = this.Fm = null;
        this.Ih = 0;
        this.df = null;
        this.Le = 0;
        this.ze = this.Rb = this.Qc = null;
        "string" === typeof a1 ? this.text = a1 : a1 && Object.assign(this, a1);
        b && Object.assign(this, b);
        return this;
    }
    la(Pg, Y);
    Pg.prototype.cloneProtected = function(a1) {
        Y.prototype.cloneProtected.call(this, a1);
        a1.fc = this.fc;
        a1.xc = this.xc;
        a1.Ae = this.Ae;
        a1.Gc = this.Gc;
        a1.Db = this.Db;
        a1.Kq = this.Kq;
        a1.Fm = this.Fm;
        null !== this.fa && (a1.fa = this.fa.copy());
        null !== this.da && (a1.da = this.da.oc ? this.da : this.da.copy());
        a1.Ih = this.Ih;
        a1.df = this.df;
        a1.Le = this.Le;
        a1.Qc = this.Qc;
        a1.Rb = this.Rb;
        a1.ze = this.ze;
    };
    function ho(a1) {
        null === a1.da ? a1.da = new io : a1.da.oc && (a1.da = a1.da.copy());
    }
    t = Pg.prototype;
    t.th = function() {
        Y.prototype.th.call(this);
        null !== this.da && (this.da.oc = !0);
    };
    function hn(a1, b) {
        a1.l = b.l | 6144;
        a1.pb = b.opacity;
        a1.Ma = b.background;
        a1.areaBackground = b.areaBackground;
        a1.jd = b.desiredSize.J();
        a1.minSize = b.minSize.J();
        a1.maxSize = b.maxSize.J();
        null !== b.Mb ? a1.Mb = b.Mb.copy() : a1.Mb = null;
        a1.Ca = b.scale;
        a1.Lb = b.angle;
        a1.stretch = b.stretch;
        a1.Kg = b.margin.J();
        a1.Kb = b.alignment.J();
        a1.rk = b.alignmentFocus.J();
        a1.segmentFraction = b.segmentFraction;
        a1.segmentOffset = b.segmentOffset.J();
        a1.segmentOrientation = b.segmentOrientation;
        null !== b.tb && (a1.tb = b.tb.copy());
        a1.shadowVisible = b.shadowVisible;
        a1.fc = b.fc;
        a1.xc = b.xc;
        a1.Ae = b.Ae;
        null !== a1.fa && (a1.fa = b.fa.copy());
        null !== b.da && (a1.da = b.da.oc ? b.da : b.da.copy());
        a1.Ih = b.Ih;
    }
    t.qb = function(a1) {
        a1.classType === Pg ? this.wrap = a1 : Y.prototype.qb.call(this, a1);
    };
    t.toString = function() {
        return 22 < this.fc.length ? 'TextBlock("' + this.fc.substring(0, 20) + '"...)' : 'TextBlock("' + this.fc + '")';
    };
    t.v = function() {
        Y.prototype.v.call(this);
    };
    t.hh = function(a1, b) {
        if (null !== this.xc && 0 !== this.fc.length && null !== this.Ae) {
            var c = this.naturalBounds, d = this.actualBounds, e = c.width, f = c.height, g = jo(this), h = a1.textAlign = this.textAlign, k = b.sn;
            "start" === h ? h = k ? "right" : "left" : "end" === h && (h = k ? "left" : "right");
            k = this.isUnderline;
            var l = this.isStrikethrough;
            ji(this, a1, this.xc, !0, !1, c, d);
            (k || l) && ji(this, a1, this.xc, !1, !1, c, d);
            d = 0;
            c = !1;
            var m = this.oe, n = m.dx - (g * m.m21 + m.dx);
            m = m.dy - (g * m.m22 + m.dy);
            var p = b.scale;
            8 > (n * n + m * m) * p * p && (c = !0);
            b.ib !== a1 && (c = !1);
            b.ib instanceof ii && (c = !1);
            !1 === b.Gf("textGreeking") && (c = !1);
            b = this.spacingAbove;
            n = this.spacingBelow;
            switch(this.flip){
                case al:
                    a1.translate(e, 0);
                    a1.scale(-1, 1);
                    break;
                case $k:
                    a1.translate(0, f);
                    a1.scale(1, -1);
                    break;
                case bl:
                    a1.translate(e, f), a1.scale(-1, -1);
            }
            a1.yc();
            m = this.Gc;
            p = (b + g + n) * m;
            f > p && (d = this.verticalAlignment, d = d.y * f - d.y * p + d.offsetY);
            if (1 === m && null !== this.ze) n = this.Db, n > e && (n = e), this.Nj(this.ze, a1, 0, d + b, e, g, n, c, h, k, l);
            else if (null !== this.Qc && null !== this.Rb) for(p = 0; p < m; p++){
                var q = this.Qc[p];
                q > e && (q = e);
                d += b;
                this.Nj(this.Rb[p], a1, 0, d, e, g, q, c, h, k, l);
                d += g + n;
            }
            switch(this.flip){
                case al:
                    a1.scale(-1, 1);
                    a1.translate(-e, 0);
                    break;
                case $k:
                    a1.scale(1, -1);
                    a1.translate(0, -f);
                    break;
                case bl:
                    a1.scale(-1, -1), a1.translate(-e, -f);
            }
        }
    };
    t.Nj = function(a1, b, c, d, e, f, g, h, k, l, m) {
        var n = 0;
        if (h) "left" === k ? n = 0 : "right" === k ? n = e - g : "center" === k && (n = (e - g) / 2), b.fillRect(c + n, d + .25 * f, g, 1);
        else {
            "left" === k ? n = 0 : "right" === k ? n = e : "center" === k && (n = e / 2);
            e = null !== ko ? ko(this, f) : .75 * f;
            b.fillText(a1, c + n, d + e);
            a1 = f / 20 | 0;
            0 === a1 && (a1 = 1);
            "right" === k ? n -= g : "center" === k && (n -= g / 2);
            if (l) {
                h = null !== lo ? lo(this, f) : .8 * f;
                k = c + n;
                l = d + h;
                e = c + n + g;
                h = d + h;
                var p = a1;
                b.beginPath();
                b.lineWidth = p;
                b.moveTo(k, l);
                b.lineTo(e, h);
                b.stroke();
                b.Se();
                b instanceof ii && b.ad.classList.add("gojs-td");
            }
            m && (m = d + f - f / 2.2 | 0, 0 !== a1 % 2 && (m += .5), d = c + n, f = m, c = c + n + g, g = m, n = a1, b.beginPath(), b.lineWidth = n, b.moveTo(d, f), b.lineTo(c, g), b.stroke(), b.Se(), b instanceof ii && b.ad.classList.add("gojs-td"));
        }
    };
    t.jk = function(a1, b, c) {
        if (!Y.prototype.jk.call(this, a1, b, c)) return !1;
        ji(this, a1, this.xc, !0, !1, this.naturalBounds, this.actualBounds);
        if (c) {
            if (0 === this.svg.getElementsByTagName("text").length) return !0;
            b = this.svg.getElementsByClassName("gojs-td");
            for(c = 0; c < b.length; c++)lm(a1, b[c], !1);
        } else b = this.svg, b.innerHTML = this.text, lm(a1, b, !0);
        return !0;
    };
    t.mk = function(a1) {
        return 1 < this.lineCount || this.isUnderline || this.isStrikethrough ? !0 : Y.prototype.mk.call(this, a1);
    };
    t.Dv = function(a1, b) {
        if ("g" !== a1.nodeName) a1.setAttributeNS(null, "filter", b);
        else {
            a1 = a1.getElementsByTagName("text");
            for(var c = 0; c < a1.length; c++)a1[c].setAttributeNS(null, "filter", b);
        }
    };
    t.Vl = function(a1, b, c, d) {
        var e = this.Gc;
        this.Ih = a1;
        this.l &= -16777217;
        var f = this.Ae;
        null !== go && mo !== f && (mo = go.font = f);
        this.Db = this.Le = 0;
        this.ze = this.Rb = this.Qc = this.df = null;
        var g;
        if (isNaN(this.desiredSize.width)) {
            f = this.fc.replace(/\r\n/g, "\n").replace(/\r/g, "\n");
            if (0 === f.length) f = 8;
            else if (this.isMultiline) {
                for(var h = g = 0, k = !1; !k;){
                    var l = f.indexOf("\n", h);
                    -1 === l && (l = f.length, k = !0);
                    h = f.substr(h, l - h);
                    this.formatting === no && (h = h.trim());
                    g = Math.max(g, oo(h));
                    h = l + 1;
                }
                f = g;
            } else g = f.indexOf("\n", 0), 0 <= g && (f = f.substr(0, g)), f = oo(f);
            f = Math.min(f, a1 / this.scale);
        } else f = this.desiredSize.width;
        null !== this.panel && (f = Math.min(f, this.panel.maxSize.width));
        g = po(this, f);
        isNaN(this.desiredSize.height) ? g = Math.min(g, b / this.scale) : g = this.desiredSize.height;
        k = g;
        if (0 !== this.Db && null !== this.Qc && null !== this.Rb && this.overflow === qo && (b = this.Ae, b = this.overflow === qo ? ro(b) : 0, l = this.spacingAbove + this.spacingBelow, l = Math.max(0, jo(this) + l), k = Math.min(this.maxLines - 1, Math.max(Math.floor(k / l + .01) - 1, 0)), !(k + 1 >= this.Rb.length))) {
            this.l |= 16777216;
            l = this.Rb[k];
            for(b = Math.max(1, a1 - b); oo(l) > b && 1 < l.length;)l = l.substr(0, l.length - 1);
            l += so;
            b = oo(l);
            this.Rb[k] = l;
            this.Rb = this.Rb.slice(0, k + 1);
            this.Qc[k] = b;
            this.Qc = this.Qc.slice(0, k + 1);
            this.Le = this.Rb.length;
            this.Db = Math.max(this.Db, b);
            this.Gc = this.Le;
            1 === this.Gc && (this.ze = this.Rb[0]);
        }
        if (this.wrap === to || isNaN(this.desiredSize.width)) f = isNaN(a1) ? this.Db : Math.min(a1, this.Db);
        f = Math.max(c, f);
        g = Math.max(d, g);
        Pb(this.ec, f, g);
        this.Ge(0, 0, f, g);
        null !== this.svg && e !== this.Gc && (this.Uc = !0);
    };
    t.eh = function(a1, b, c, d) {
        ml(this, a1, b, c, d);
    };
    function uo(a1, b, c) {
        if (null === a1.ze) a1.ze = b, a1.Db = c;
        else {
            if (null === a1.Rb || null === a1.Qc) a1.Rb = [], a1.Qc = [], a1.Rb.push(a1.ze), a1.Qc.push(a1.Db);
            a1.Rb.push(b);
            a1.Qc.push(c);
            a1.Rb.length > a1.maxLines && (a1.l |= 16777216);
        }
    }
    function vo(a1, b, c, d) {
        var e = a1.formatting === no;
        e && (b = b.trim());
        var f = 0, g = a1.Ae, h = a1.spacingAbove + a1.spacingBelow;
        h = Math.max(0, jo(a1) + h);
        var k = a1.overflow === qo ? ro(g) : 0;
        if (a1.Gc >= a1.maxLines) null !== d && d.h(0, h);
        else if (g = b, a1.wrap === wo) {
            a1.Le = 1;
            var l = oo(b);
            if (0 === k || l <= c) a1.Db = Math.max(a1.Db, l), uo(a1, b, a1.Db), null !== d && d.h(l, h);
            else {
                f = xo(a1, g);
                g = g.substr(f.length);
                b = xo(a1, g);
                for(l = oo(f + b); 0 < b.length && l <= c;)f += b, g = g.substr(b.length), b = xo(a1, g), l = f + b, e && (l = l.trim()), l = oo(l);
                e && (b = b.trim());
                f += b;
                for(c = Math.max(1, c - k); oo(f) > c && 1 < f.length;)f = f.substr(0, f.length - 1);
                a1.l |= 16777216;
                f += so;
                var m = oo(f);
                a1.Db = m;
                uo(a1, f, m);
                null !== d && d.h(m, h);
            }
        } else {
            k = 0;
            0 === g.length && (k = 1, uo(a1, g, 0));
            for(; 0 < g.length;){
                b = xo(a1, g);
                for(g = g.substr(b.length); oo(b) > c;){
                    var n = 1;
                    l = oo(b.substr(0, n));
                    for(m = 0; l <= c;)n++, m = l, l = oo(b.substr(0, n));
                    if (1 === n) {
                        var p = l;
                        f = Math.max(f, l);
                    } else p = m, f = Math.max(f, m);
                    n--;
                    1 > n && (n = 1);
                    uo(a1, b.substr(0, n), p);
                    k++;
                    b = b.substr(n);
                    if (a1.Gc + k > a1.maxLines) break;
                }
                m = xo(a1, g);
                for(l = oo(b + m); 0 < m.length && l <= c;)b += m, g = g.substr(m.length), m = xo(a1, g), l = b + m, e && (l = l.trim()), l = oo(l);
                e && (b = b.trim());
                if ("" !== b && ("\xad" === b[b.length - 1] && (b = b.substring(0, b.length - 1) + "\u2010"), 0 === m.length ? (n = l, f = Math.max(f, l)) : (n = m = oo(b), f = Math.max(f, m)), uo(a1, b, n), k++, a1.Gc + k > a1.maxLines)) break;
            }
            a1.Le = Math.min(a1.maxLines, k);
            a1.Db = Math.max(a1.Db, f);
            null !== d && d.h(a1.Db, h * a1.Le);
        }
    }
    function xo(a1, b) {
        if (a1.wrap === yo) return b.substr(0, 1);
        for(var c = b.length, d = 0, e = zo; d < c && !e.test(b.charAt(d));)d++;
        for(a1.formatting === Ao && (c = Math.min(c, d + 1)); d < c && e.test(b.charAt(d));)d++;
        return d >= b.length ? b : b.substr(0, d);
    }
    function oo(a1) {
        return null === go ? 8 * a1.length : go.measureText(a1).width;
    }
    function jo(a1) {
        if (null !== a1.df) return a1.df;
        var b = a1.Ae;
        if (null === go) {
            var c = 16;
            return a1.df = c;
        }
        void 0 !== Bo[b] && 5E3 > Co ? c = Bo[b] : (c = 1.3 * go.measureText("M").width, Bo[b] = c, Co++);
        return a1.df = c;
    }
    function ro(a1) {
        if (null === go) return 6;
        if (void 0 !== Do[a1] && 5E3 > Eo) var b = Do[a1];
        else b = go.measureText(so).width, Do[a1] = b, Eo++;
        return b;
    }
    function po(a1, b) {
        var c = a1.fc.replace(/\r\n/g, "\n").replace(/\r/g, "\n"), d = a1.spacingAbove + a1.spacingBelow;
        d = Math.max(0, jo(a1) + d);
        if (0 === c.length) return a1.Db = 0, a1.Gc = 1, d;
        if (!a1.isMultiline) {
            var e = c.indexOf("\n", 0);
            0 <= e && (c = c.substr(0, e));
        }
        e = 0;
        for(var f = a1.Gc = 0, g, h = !1; !h;){
            g = c.indexOf("\n", f);
            -1 === g && (g = c.length, h = !0);
            if (f <= g) {
                f = c.substr(f, g - f);
                if (a1.wrap !== wo) {
                    a1.Le = 0;
                    var k = L.alloc();
                    vo(a1, f, b, k);
                    e += k.height;
                    L.free(k);
                    a1.Gc += a1.Le;
                } else vo(a1, f, b, null), e += d, a1.Gc++;
                a1.Gc === a1.maxLines && (h = !0);
            }
            f = g + 1;
        }
        return a1.Kq = e;
    }
    ma.Object.defineProperties(Pg.prototype, {
        font: {
            get: function() {
                return this.Ae;
            },
            set: function(a1) {
                var b = this.Ae;
                b !== a1 && (this.Ae = a1, this.df = null, this.v(), this.g("font", b, a1));
            }
        },
        text: {
            get: function() {
                return this.fc;
            },
            set: function(a1) {
                var b = this.fc;
                null !== a1 && void 0 !== a1 ? a1 = a1.toString() : a1 = "";
                b !== a1 && (this.fc = a1, this.v(), this.g("text", b, a1), this.Uc = !0);
            }
        },
        textAlign: {
            get: function() {
                return null !== this.da ? this.da.Nr : "start";
            },
            set: function(a1) {
                var b = this.textAlign;
                b === a1 || "start" !== a1 && "end" !== a1 && "left" !== a1 && "right" !== a1 && "center" !== a1 || (ho(this), this.da.Nr = a1, this.N(), this.g("textAlign", b, a1));
            }
        },
        flip: {
            get: function() {
                return null !== this.da ? this.da.Xf : kg;
            },
            set: function(a1) {
                var b = this.flip;
                b !== a1 && (ho(this), this.da.Xf = a1, this.N(), this.g("flip", b, a1));
            }
        },
        verticalAlignment: {
            get: function() {
                return null !== this.da ? this.da.Xr : Yc;
            },
            set: function(a1) {
                var b = this.verticalAlignment;
                b.D(a1) || (a1 = a1.J(), ho(this), this.da.Xr = a1, Nl(this), this.g("verticalAlignment", b, a1));
            }
        },
        naturalBounds: {
            get: function() {
                if (!this.ec.w()) {
                    var a1 = L.alloc();
                    vo(this, this.fc, 999999, a1);
                    var b = a1.width;
                    L.free(a1);
                    a1 = po(this, b);
                    var c = this.desiredSize;
                    isNaN(c.width) || (b = c.width);
                    isNaN(c.height) || (a1 = c.height);
                    Pb(this.ec, b, a1);
                }
                return this.ec;
            }
        },
        isMultiline: {
            get: function() {
                return 0 !== (this.l & 2097152);
            },
            set: function(a1) {
                var b = 0 !== (this.l & 2097152);
                b !== a1 && (this.l ^= 2097152, this.v(), this.g("isMultiline", b, a1));
            }
        },
        isUnderline: {
            get: function() {
                return 0 !== (this.l & 4194304);
            },
            set: function(a1) {
                var b = 0 !== (this.l & 4194304);
                b !== a1 && (this.l ^= 4194304, this.Uc = !0, this.N(), this.g("isUnderline", b, a1));
            }
        },
        isStrikethrough: {
            get: function() {
                return 0 !== (this.l & 8388608);
            },
            set: function(a1) {
                var b = 0 !== (this.l & 8388608);
                b !== a1 && (this.l ^= 8388608, this.Uc = !0, this.N(), this.g("isStrikethrough", b, a1));
            }
        },
        wrap: {
            get: function() {
                return null !== this.da ? this.da.Zr : Fo;
            },
            set: function(a1) {
                var b = this.wrap;
                b !== a1 && (ho(this), this.da.Zr = a1, this.v(), this.g("wrap", b, a1));
            }
        },
        overflow: {
            get: function() {
                return null !== this.da ? this.da.Zq : Go;
            },
            set: function(a1) {
                var b = this.overflow;
                b !== a1 && (ho(this), this.da.Zq = a1, this.v(), this.g("overflow", b, a1));
            }
        },
        isOverflowed: {
            get: function() {
                return 0 !== (this.l & 16777216);
            }
        },
        stroke: {
            get: function() {
                return this.xc;
            },
            set: function(a1) {
                var b = this.xc;
                b !== a1 && (null !== a1 && cm(a1, "TextBlock.stroke"), a1 instanceof ql && a1.freeze(), this.xc = a1, this.N(), this.g("stroke", b, a1));
            }
        },
        lineCount: {
            get: function() {
                return this.Gc;
            }
        },
        lineHeight: {
            get: function() {
                return jo(this);
            }
        },
        editable: {
            get: function() {
                return 0 !== (this.l & 1048576);
            },
            set: function(a1) {
                var b = 0 !== (this.l & 1048576);
                b !== a1 && (this.l ^= 1048576, this.g("editable", b, a1));
            }
        },
        textEditor: {
            get: function() {
                return null !== this.da ? this.da.Pr : null;
            },
            set: function(a1) {
                var b = this.textEditor;
                b !== a1 && (ho(this), this.da.Pr = a1, this.g("textEditor", b, a1));
            }
        },
        errorFunction: {
            get: function() {
                return null !== this.da ? this.da.Hd : null;
            },
            set: function(a1) {
                var b = this.errorFunction;
                b !== a1 && (ho(this), this.da.Hd = a1, this.g("errorFunction", b, a1));
            }
        },
        interval: {
            get: function() {
                return null !== this.fa ? this.fa.Sk : 1;
            },
            set: function(a1) {
                var b = this.interval;
                a1 = Math.round(a1);
                if (b !== a1 && 0 !== a1 && isFinite(a1)) {
                    null === this.fa && (this.fa = new eo);
                    this.fa.Sk = a1;
                    this.v();
                    var c = this.panel;
                    null !== c && (c.graduatedIntervals = null);
                    this.g("interval", b, a1);
                }
            }
        },
        graduatedStart: {
            get: function() {
                return null !== this.fa ? this.fa.u : 0;
            },
            set: function(a1) {
                var b = this.graduatedStart;
                b !== a1 && (0 > a1 ? a1 = 0 : 1 < a1 && (a1 = 1), null === this.fa && (this.fa = new eo), this.fa.u = a1, this.v(), this.g("graduatedStart", b, a1));
            }
        },
        graduatedEnd: {
            get: function() {
                return null !== this.fa ? this.fa.j : 1;
            },
            set: function(a1) {
                var b = this.graduatedEnd;
                b !== a1 && (0 > a1 ? a1 = 0 : 1 < a1 && (a1 = 1), null === this.fa && (this.fa = new eo), this.fa.j = a1, this.v(), this.g("graduatedEnd", b, a1));
            }
        },
        graduatedFunction: {
            get: function() {
                return null !== this.fa ? this.fa.F : null;
            },
            set: function(a1) {
                var b = this.graduatedFunction;
                b !== a1 && (null === this.fa && (this.fa = new eo), this.fa.F = a1, this.v(), this.g("graduatedFunction", b, a1));
            }
        },
        graduatedSkip: {
            get: function() {
                return null !== this.fa ? this.fa.o : null;
            },
            set: function(a1) {
                var b = this.graduatedSkip;
                b !== a1 && (null === this.fa && (this.fa = new eo), this.fa.o = a1, this.v(), this.g("graduatedSkip", b, a1));
            }
        },
        textValidation: {
            get: function() {
                return null !== this.da ? this.da.vj : null;
            },
            set: function(a1) {
                var b = this.textValidation;
                b !== a1 && (ho(this), this.da.vj = a1, this.g("textValidation", b, a1));
            }
        },
        textEdited: {
            get: function() {
                return null !== this.da ? this.da.Or : null;
            },
            set: function(a1) {
                var b = this.textEdited;
                b !== a1 && (ho(this), this.da.Or = a1, this.g("textEdited", b, a1));
            }
        },
        spacingAbove: {
            get: function() {
                return null !== this.da ? this.da.Cr : 0;
            },
            set: function(a1) {
                var b = this.spacingAbove;
                b !== a1 && (ho(this), this.da.Cr = a1, this.v(), this.g("spacingAbove", b, a1));
            }
        },
        spacingBelow: {
            get: function() {
                return null !== this.da ? this.da.Dr : 0;
            },
            set: function(a1) {
                var b = this.spacingBelow;
                b !== a1 && (ho(this), this.da.Dr = a1, this.v(), this.g("spacingBelow", b, a1));
            }
        },
        formatting: {
            get: function() {
                return null !== this.da ? this.da.fq : no;
            },
            set: function(a1) {
                var b = this.formatting;
                b !== a1 && (ho(this), this.da.fq = a1, this.v(), this.g("formatting", b, a1));
            }
        },
        maxLines: {
            get: function() {
                return null !== this.da ? this.da.Iq : Infinity;
            },
            set: function(a1) {
                var b = this.maxLines;
                b !== a1 && (a1 = Math.floor(a1), 0 >= a1 && xa(a1, "> 0", Pg, "maxLines"), ho(this), this.da.Iq = a1, this.v(), this.g("maxLines", b, a1));
            }
        },
        metrics: {
            get: function() {
                return {
                    arrSize: null !== this.Qc ? this.Qc : [
                        this.Db
                    ],
                    arrText: null !== this.Rb ? this.Rb : [
                        this.ze
                    ],
                    maxLineWidth: this.Db,
                    fontHeight: this.df
                };
            }
        },
        choices: {
            get: function() {
                return this.Fm;
            },
            set: function(a1) {
                var b = this.Fm;
                b !== a1 && (this.Fm = a1, this.g("choices", b, a1));
            }
        }
    });
    var ko = null, lo = null, wo = new E(Pg, "None", 0), to = new E(Pg, "WrapFit", 1), Fo = new E(Pg, "WrapDesiredSize", 2), yo = new E(Pg, "WrapBreakAll", 3), Go = new E(Pg, "OverflowClip", 0), qo = new E(Pg, "OverflowEllipsis", 1), no = new E(Pg, "FormatTrim", 0), Ao = new E(Pg, "FormatNone", 0), zo = /[ \u200b\u00ad]/, Bo = new Ta, Co = 0, Do = new Ta, Eo = 0, so = "...", mo = "", go = null, fo = !1;
    Pg.className = "TextBlock";
    function io() {
        this.oc = !1;
        this.Hd = null;
        this.Xf = kg;
        this.fq = no;
        this.Iq = Infinity;
        this.Zq = Go;
        this.Dr = this.Cr = 0;
        this.Nr = "start";
        this.vj = this.Pr = this.Or = null;
        this.Xr = Yc;
        this.Zr = Fo;
    }
    io.prototype.copy = function() {
        var a1 = new io;
        a1.Hd = this.Hd;
        a1.Xf = this.Xf;
        a1.fq = this.fq;
        a1.Iq = this.Iq;
        a1.Zq = this.Zq;
        a1.Cr = this.Cr;
        a1.Dr = this.Dr;
        a1.Nr = this.Nr;
        a1.Or = this.Or;
        a1.Pr = this.Pr;
        a1.vj = this.vj;
        a1.Xr = this.Xr;
        a1.Zr = this.Zr;
        return a1;
    };
    Pg.getEllipsis = function() {
        return so;
    };
    Pg.setEllipsis = function(a1) {
        so = a1;
        Do = new Ta;
        Eo = 0;
    };
    Pg.getBaseline = function() {
        return ko;
    };
    Pg.setBaseline = function(a1) {
        ko = a1;
    };
    Pg.getUnderline = function() {
        return lo;
    };
    Pg.setUnderline = function(a1) {
        lo = a1;
    };
    Pg.isValidFont = function(a1) {
        fo || (go = Ng ? new Pi(null).context : null, fo = !0);
        if (null === go) return !0;
        var b = go.font;
        if (a1 === b || "10px sans-serif" === a1) return !0;
        go.font = "10px sans-serif";
        go.font = a1;
        var c = go.font;
        if ("10px sans-serif" !== c) return go.font = b, !0;
        go.font = "19px serif";
        var d = go.font;
        go.font = a1;
        c = go.font;
        go.font = b;
        return c !== d;
    };
    Pg.FormatNone = Ao;
    Pg.FormatTrim = no;
    Pg.None = wo;
    Pg.OverflowClip = Go;
    Pg.OverflowEllipsis = qo;
    Pg.WrapBreakAll = yo;
    Pg.WrapDesiredSize = Fo;
    Pg.WrapFit = to;
    function eo() {
        this.Sk = 1;
        this.u = 0;
        this.j = 1;
        this.o = this.F = null;
    }
    eo.prototype.copy = function() {
        var a1 = new eo;
        a1.Sk = this.Sk;
        a1.u = this.u;
        a1.j = this.j;
        a1.F = this.F;
        a1.o = this.o;
        return a1;
    };
    eo.className = "GradElementSettings";
    function dk(a1, b) {
        Y.call(this);
        this.Eg = null;
        this.po = "";
        this.Xg = cc;
        this.Mk = nd;
        this.Zg = this.Hd = null;
        this.Lk = wc;
        this.Xf = kg;
        this.ul = null;
        this.pn = !1;
        this.dn = !0;
        this.$k = !1;
        this.at = this.ql = null;
        "string" === typeof a1 ? this.source = a1 : a1 && Object.assign(this, a1);
        b && Object.assign(this, b);
    }
    var Ho;
    la(dk, Y);
    dk.prototype.cloneProtected = function(a1) {
        Y.prototype.cloneProtected.call(this, a1);
        a1.po = this.po;
        a1.element = this.Eg;
        a1.Xg = this.Xg.J();
        a1.Mk = this.Mk;
        a1.Xf = this.Xf;
        a1.Hd = this.Hd;
        a1.Zg = this.Zg;
        a1.Lk = this.Lk.J();
        a1.dn = this.dn;
        a1.ql = this.ql;
    };
    dk.prototype.qb = function(a1) {
        a1 === kg || a1 === mg || a1 === Zk ? this.imageStretch = a1 : Y.prototype.qb.call(this, a1);
    };
    dk.prototype.toString = function() {
        return "Picture(" + this.source + ")#" + bb(this);
    };
    function Mi(a1) {
        void 0 === a1 && (a1 = "");
        "" !== a1 ? Ho[a1] && (delete Ho[a1], Io--) : (Ho = new Ta, Io = 0);
    }
    function Jo(a1, b) {
        b.qy || (b.Eq = function(c) {
            b.rq = !0;
            b.kn = !1;
            var d = b.Bg.copy();
            if (null !== d && void 0 !== d) {
                for(d = d.iterator; d.next();){
                    var e = d.value;
                    e.N();
                    var f = b.getAttribute("src") || "";
                    var g = e.Og.I(f);
                    if (null !== g) for(var h = g.length, k = 0; k < h; k++)f = g[k], e.Wn.add(f), f.Uc = !0, e.ac(), b.gn && (void 0 === b.du && (b.du = c), null !== f.Zg && f.Zg(f, c));
                }
                b.Bg.clear();
            }
            a1.desiredSize.w() || (pj(a1, !1), a1.v());
        }, b.Xp = function(a1) {
            b.kn = a1;
            var c = b.Bg.copy();
            if (null !== c && void 0 !== c) {
                for(c = c.iterator; c.next();){
                    var e = c.value, f = b.getAttribute("src") || "";
                    var g = e.Og.I(f);
                    if (null !== g) {
                        e = g.length;
                        f = Ea();
                        for(var h = 0; h < e; h++)f.push(g[h]);
                        if (b.gn) for(h = 0; h < e; h++)g = f[h], null !== g.Hd && g.Hd(g, a1);
                        Ga(f);
                    }
                }
                b.Bg.clear();
            }
        }, b.addEventListener("load", b.Eq), b.addEventListener("error", b.Xp), b.qy = !0);
    }
    dk.prototype.hA = function() {
        if ("" !== this.source) {
            Mi(this.source);
            var a1 = this.source;
            this.source = "";
            this.source = a1;
        }
    };
    dk.prototype.redraw = function() {
        this.N();
        this.Uc = !0;
    };
    dk.prototype.hh = function(a1, b) {
        var c = this.Eg;
        if (null !== c) {
            var d = c.getAttribute("src");
            if (!(c instanceof HTMLImageElement && (null === d || "" === d) || c.kn instanceof Event && a1 instanceof Il)) {
                var e = a1 instanceof ii;
                d = this.naturalBounds;
                var f = 0, g = 0, h = this.pn, k = h ? +c.width : c.naturalWidth;
                h = h ? +c.height : c.naturalHeight;
                void 0 === k && c.videoWidth && (k = c.videoWidth);
                void 0 === h && c.videoHeight && (h = c.videoHeight);
                k = k || d.width;
                h = h || d.height;
                if (0 !== k && 0 !== h) {
                    var l = k, m = h;
                    this.sourceRect.w() && (f = this.Xg.x, g = this.Xg.y, k = this.Xg.width, h = this.Xg.height);
                    var n = k, p = h, q = this.Mk, r = this.Lk;
                    switch(q){
                        case kg:
                            if (this.sourceRect.w()) break;
                            n >= d.width && (f = f + r.offsetX + (n * r.x - d.width * r.x));
                            p >= d.height && (g = g + r.offsetY + (p * r.y - d.height * r.y));
                            k = Math.min(d.width, n);
                            h = Math.min(d.height, p);
                            break;
                        case nd:
                            n = d.width;
                            p = d.height;
                            break;
                        case mg:
                        case Zk:
                            q === mg ? (q = Math.min(d.height / p, d.width / n), n *= q, p *= q) : q === Zk && (q = Math.max(d.height / p, d.width / n), n *= q, p *= q, n >= d.width && (f = (f + r.offsetX + (n * r.x - d.width * r.x) / n) * k), p >= d.height && (g = (g + r.offsetY + (p * r.y - d.height * r.y) / p) * h), k *= 1 / (n / d.width), h *= 1 / (p / d.height), n = d.width, p = d.height);
                    }
                    q = this.Df() * b.scale;
                    var u = n * q * p * q, w = k * h / u, v = c.__goCache;
                    q = null;
                    var y = Ko;
                    if (!e) {
                        if (c.rq && void 0 !== v && 4 < u && w > y * y) for(null === v.gi && (Lo(v, 4, l, m, c), Lo(v, 16, l, m, c)), e = v.gi, l = e.length, m = 0; m < l; m++)if (e[m].ratio * e[m].ratio < w) q = e[m];
                        else break;
                        if (!b.Wm) {
                            if (null === this.ul) {
                                if (null === this.Eg) this.ul = !1;
                                else {
                                    e = new Pi(null).context;
                                    try {
                                        e.drawImage(this.Eg, 0, 0);
                                    } catch (z) {
                                        this.dn = !1;
                                    }
                                    try {
                                        e.getImageData(0, 0, 1, 1).data[3] && (this.ul = !1), this.ul = !1;
                                    } catch (z) {
                                        this.ul = !0;
                                    }
                                }
                            }
                            if (this.ul) return;
                        }
                    }
                    e = n < d.width ? r.offsetX + (d.width * r.x - n * r.x) : 0;
                    r = p < d.height ? r.offsetY + (d.height * r.y - p * r.y) : 0;
                    switch(this.flip){
                        case al:
                            a1.translate(Math.min(d.width, n), 0);
                            a1.scale(-1, 1);
                            break;
                        case $k:
                            a1.translate(0, Math.min(d.height, p));
                            a1.scale(1, -1);
                            break;
                        case bl:
                            a1.translate(Math.min(d.width, n), Math.min(d.height, p)), a1.scale(-1, -1);
                    }
                    a1.yc();
                    if (b.Gf("pictureRatioOptimization") && !b.$i && void 0 !== v && null !== q && 1 !== q.ratio) {
                        a1.save();
                        b = q.ratio;
                        try {
                            a1.drawImage(q.source, f / b, g / b, Math.min(q.source.width, k / b), Math.min(q.source.height, h / b), e, r, Math.min(d.width, n), Math.min(d.height, p)), a1 instanceof ii && (this.at = [
                                f / b,
                                g / b,
                                Math.min(q.source.width, k / b),
                                Math.min(q.source.height, h / b),
                                e,
                                r,
                                Math.min(d.width, n),
                                Math.min(d.height, p)
                            ]);
                        } catch (z) {
                            this.dn = !1;
                        }
                        a1.restore();
                    } else try {
                        a1.drawImage(c, f, g, k, h, e, r, Math.min(d.width, n), Math.min(d.height, p)), a1 instanceof ii && (this.at = [
                            f,
                            g,
                            k,
                            h,
                            e,
                            r,
                            Math.min(d.width, n),
                            Math.min(d.height, p)
                        ]);
                    } catch (z) {
                        this.dn = !1;
                    }
                    switch(this.flip){
                        case al:
                            a1.scale(-1, 1);
                            a1.translate(-Math.min(d.width, n), 0);
                            break;
                        case $k:
                            a1.scale(1, -1);
                            a1.translate(0, -Math.min(d.height, p));
                            break;
                        case bl:
                            a1.scale(-1, -1), a1.translate(-Math.min(d.width, n), -Math.min(d.height, p));
                    }
                }
            }
        }
    };
    dk.prototype.Vl = function(a1, b, c, d) {
        var e = this.desiredSize, f = jl(this, !0), g = this.Eg, h = this.pn, k = 0, l = 0;
        if (h || !this.$k && g && g.complete) this.$k = !0;
        null === g ? (isFinite(e.width) || (a1 = 0), isFinite(e.height) || (b = 0)) : (k = h ? +g.width : g.naturalWidth, l = h ? +g.height : g.naturalHeight);
        isFinite(e.width) || f === nd || f === Wk ? (isFinite(a1) || (this.sourceRect.w() ? a1 = this.sourceRect.width : null !== g && (a1 = k)), c = 0) : null !== g && !1 !== this.$k && (a1 = this.sourceRect.w() ? this.sourceRect.width : k);
        isFinite(e.height) || f === nd || f === Xk ? (isFinite(b) || (this.sourceRect.w() ? b = this.sourceRect.height : null !== g && (b = l)), d = 0) : null !== g && !1 !== this.$k && (b = this.sourceRect.w() ? this.sourceRect.height : l);
        isFinite(e.width) && (a1 = e.width);
        isFinite(e.height) && (b = e.height);
        e = this.maxSize;
        f = this.minSize;
        c = Math.max(c || 0, f.width);
        d = Math.max(d || 0, f.height);
        a1 = Math.min(e.width, a1);
        b = Math.min(e.height, b);
        a1 = Math.max(c, a1);
        b = Math.max(d, b);
        null === g || g.complete || (isFinite(a1) || (a1 = 0), isFinite(b) || (b = 0));
        Pb(this.ec, a1, b);
        this.Ge(0, 0, a1, b);
    };
    dk.prototype.eh = function(a1, b, c, d) {
        ml(this, a1, b, c, d);
    };
    ma.Object.defineProperties(dk.prototype, {
        element: {
            get: function() {
                return this.Eg;
            },
            set: function(a1) {
                var b = this.Eg;
                this.Uc = !0;
                if (b !== a1) {
                    this.pn = a1 instanceof HTMLCanvasElement;
                    var c = a1 instanceof HTMLImageElement;
                    null === a1 || c || a1 instanceof HTMLVideoElement || this.pn || C("Picture.element must be an instance of Image, Canvas, or Video, not: " + a1);
                    var d = this.diagram;
                    null !== d && ek(d, this);
                    this.Eg = a1;
                    null !== a1 && c && void 0 === a1.Bg && (a1.Bg = new H);
                    null !== d && c && ck(d, this);
                    null !== a1 && (this.pn || !0 === a1.complete ? (a1.gn && (a1.kn instanceof Event && null !== this.Hd ? this.Hd(this, a1.kn) : !0 === a1.rq && !a1.kn && null !== this.Zg && a1.du && this.Zg(this, a1.du)), a1.rq = !0, this.desiredSize.w() || (pj(this, !1), this.v())) : c && Jo(this, a1));
                    this.g("element", b, a1);
                    this.N();
                }
            }
        },
        source: {
            get: function() {
                return this.po;
            },
            set: function(a1) {
                var b = this.po;
                if (b !== a1) {
                    this.Uc = !0;
                    this.po = a1;
                    var c = Ho;
                    if (Ng) {
                        var d = null;
                        if (void 0 !== c[a1]) d = c[a1];
                        else if ("" !== a1) {
                            30 < Io && (Mi(), c = Ho);
                            d = ua("img");
                            d.gn = !0;
                            Jo(this, d);
                            var e = this.ql;
                            null !== e && (d.crossOrigin = e(this));
                            d.src = a1;
                            c[a1] = d;
                            Io++;
                        }
                        this.element = d;
                        null !== d && void 0 === d.__goCache && (d.__goCache = new Mo);
                        this.v();
                        this.N();
                    }
                    this.g("source", b, a1);
                }
            }
        },
        sourceCrossOrigin: {
            get: function() {
                return this.ql;
            },
            set: function(a1) {
                if (this.ql !== a1 && (this.ql = a1, null !== this.element)) {
                    var b = this.element.getAttribute("src");
                    null === a1 && "string" === typeof b ? this.element.crossOrigin = null : null !== a1 && (this.element.crossOrigin = a1(this));
                    this.element.src = b;
                }
            }
        },
        sourceRect: {
            get: function() {
                return this.Xg;
            },
            set: function(a1) {
                var b = this.Xg;
                b.D(a1) || (this.Xg = a1 = a1.J(), this.N(), this.g("sourceRect", b, a1));
            }
        },
        imageStretch: {
            get: function() {
                return this.Mk;
            },
            set: function(a1) {
                var b = this.Mk;
                b !== a1 && (this.Mk = a1, this.N(), this.g("imageStretch", b, a1));
            }
        },
        flip: {
            get: function() {
                return this.Xf;
            },
            set: function(a1) {
                var b = this.Xf;
                b !== a1 && (this.Xf = a1, this.N(), this.g("flip", b, a1));
            }
        },
        imageAlignment: {
            get: function() {
                return this.Lk;
            },
            set: function(a1) {
                var b = this.Lk;
                b.D(a1) || (this.Lk = a1 = a1.J(), this.N(), this.g("imageAlignment", b, a1));
            }
        },
        errorFunction: {
            get: function() {
                return this.Hd;
            },
            set: function(a1) {
                var b = this.Hd;
                b !== a1 && (this.Hd = a1, this.g("errorFunction", b, a1));
            }
        },
        successFunction: {
            get: function() {
                return this.Zg;
            },
            set: function(a1) {
                var b = this.Zg;
                b !== a1 && (this.Zg = a1, this.g("successFunction", b, a1));
            }
        },
        naturalBounds: {
            get: function() {
                return this.ec;
            }
        }
    });
    dk.prototype.redraw = dk.prototype.redraw;
    dk.prototype.reloadSource = dk.prototype.hA;
    var Io = 0, Ko = 4;
    dk.className = "Picture";
    Ho = new Ta;
    dk.clearCache = Mi;
    function Mo() {
        this.gi = null;
    }
    function Lo(a1, b, c, d, e) {
        null === a1.gi && (a1.gi = []);
        var f = new Pi(null), g = f.context, h = 1 / b;
        f.width = c / b;
        f.height = d / b;
        0 !== f.width && 0 !== f.height && (b = new No(f.Oa, b), c = 1, 0 < a1.gi.length && (c = a1.gi[a1.gi.length - 1], e = c.source, c = c.ratio), g.setTransform(h * c, 0, 0, h * c, 0, 0), g.yc(), g.drawImage(e, 0, 0), a1.gi.push(b));
    }
    Mo.className = "PictureCacheArray";
    function No(a1, b) {
        this.source = a1;
        this.ratio = b;
    }
    No.className = "PictureCacheInstance";
    function Oo() {
        this.ns = new P;
        this.nc = null;
    }
    Oo.prototype.reset = function(a1) {
        null !== a1 ? (a1.ka(), this.ns = a1, a1.figures.clear()) : this.ns = new P;
        this.nc = null;
    };
    function wd(a1, b, c, d, e, f) {
        a1.nc = new Wd;
        a1.nc.startX = b;
        a1.nc.startY = c;
        a1.nc.isFilled = d;
        a1.nc.isEvenOdd = f || !1;
        a1.ns.figures.add(a1.nc);
        void 0 !== e && (a1.nc.isShadowed = e);
    }
    function Ad(a1) {
        var b = a1.nc.segments.length;
        0 < b && a1.nc.segments.M(b - 1).close();
    }
    Oo.prototype.moveTo = function(a1, b, c) {
        void 0 === c && (c = !1);
        var d = new Xd(Dd);
        d.endX = a1;
        d.endY = b;
        c && d.close();
        this.nc.segments.add(d);
    };
    Oo.prototype.lineTo = function(a1, b, c) {
        void 0 === c && (c = !1);
        var d = new Xd(pd);
        d.endX = a1;
        d.endY = b;
        c && d.close();
        this.nc.segments.add(d);
    };
    function xd(a1, b, c, d, e, f, g) {
        var h;
        void 0 === h && (h = !1);
        var k = new Xd(Ed);
        k.point1X = b;
        k.point1Y = c;
        k.point2X = d;
        k.point2Y = e;
        k.endX = f;
        k.endY = g;
        h && k.close();
        a1.nc.segments.add(k);
    }
    function yd(a1, b, c, d, e) {
        var f;
        void 0 === f && (f = !1);
        var g = new Xd(Kd);
        g.point1X = b;
        g.point1Y = c;
        g.endX = d;
        g.endY = e;
        f && g.close();
        a1.nc.segments.add(g);
    }
    Oo.prototype.arcTo = function(a1, b, c, d, e, f, g) {
        void 0 === f && (f = 0);
        void 0 === g && (g = !1);
        var h = new Xd(Ld);
        h.startAngle = a1;
        h.sweepAngle = b;
        h.centerX = c;
        h.centerY = d;
        h.radiusX = e;
        h.radiusY = 0 !== f ? f : e;
        g && h.close();
        this.nc.segments.add(h);
    };
    function zd(a1, b, c, d, e, f, g, h) {
        var k;
        void 0 === k && (k = !1);
        b = new Xd(Md, g, h, b, c, d, e, f);
        k && b.close();
        a1.nc.segments.add(b);
    }
    function qd(a1) {
        var b = Bd;
        if (null !== b) return Bd = null, b.reset(a1), b;
        b = new Oo;
        b.reset(a1);
        return b;
    }
    var Bd = null;
    Oo.className = "StreamGeometryContext";
    function Po(a1, b) {
        var c = a1.toLowerCase(), d = K.Ze;
        d[a1] = b;
        d[c] = a1;
    }
    Po("Rectangle", function(a1, b, c) {
        a1 = "r" + b + "," + c;
        var d = K.Mf[a1];
        if (void 0 !== d) return d;
        d = new P(P.u);
        d.endX = b;
        d.endY = c;
        K.Nf < K.um && (K.Mf[a1] = d, K.Nf++);
        return d;
    });
    Po("Square", function(a1, b, c) {
        a1 = "s" + b + "," + c;
        var d = K.Mf[a1];
        if (void 0 !== d) return d;
        d = new P(P.u);
        d.endX = b;
        d.endY = c;
        d.defaultStretch = mg;
        K.Nf < K.um && (K.Mf[a1] = d, K.Nf++);
        return d;
    });
    Po("RoundedRectangle", function(a1, b, c) {
        a1 = a1 ? a1.parameter1 : NaN;
        if (isNaN(a1) || 0 > a1) a1 = 5;
        a1 = Math.min(a1, b / 3);
        a1 = Math.min(a1, c / 3);
        var d = "rr" + b + "," + c + "," + a1, e = K.Mf[d];
        if (void 0 !== e) return e;
        var f = a1 * K.wg;
        e = (new P).add(new Wd(a1, 0, !0).add(new Xd(pd, b - a1, 0)).add(new Xd(Ed, b, a1, b - f, 0, b, f)).add(new Xd(pd, b, c - a1)).add(new Xd(Ed, b - a1, c, b, c - f, b - f, c)).add(new Xd(pd, a1, c)).add(new Xd(Ed, 0, c - a1, f, c, 0, c - f)).add(new Xd(pd, 0, a1)).add(new Xd(Ed, a1, 0, 0, f, f, 0).close()));
        1 < f && (e.spot1 = new O(0, 0, f, f), e.spot2 = new O(1, 1, -f, -f));
        K.Nf < K.um && (K.Mf[d] = e, K.Nf++);
        return e;
    });
    Po("Border", "RoundedRectangle");
    Po("Ellipse", function(a1, b, c) {
        a1 = "e" + b + "," + c;
        var d = K.Mf[a1];
        if (void 0 !== d) return d;
        d = new P(P.F);
        d.endX = b;
        d.endY = c;
        d.spot1 = dd;
        d.spot2 = gd;
        K.Nf < K.um && (K.Mf[a1] = d, K.Nf++);
        return d;
    });
    Po("Circle", function(a1, b, c) {
        a1 = "c" + b + "," + c;
        var d = K.Mf[a1];
        if (void 0 !== d) return d;
        d = new P(P.F);
        d.endX = b;
        d.endY = c;
        d.spot1 = dd;
        d.spot2 = gd;
        d.defaultStretch = mg;
        K.Nf < K.um && (K.Mf[a1] = d, K.Nf++);
        return d;
    });
    Po("TriangleRight", function(a1, b, c) {
        return (new P).add(new Wd(0, 0).add(new Xd(pd, b, .5 * c)).add(new Xd(pd, 0, c).close())).om(0, .25, .5, .75);
    });
    Po("TriangleDown", function(a1, b, c) {
        return (new P).add(new Wd(0, 0).add(new Xd(pd, b, 0)).add(new Xd(pd, .5 * b, c).close())).om(.25, 0, .75, .5);
    });
    Po("TriangleLeft", function(a1, b, c) {
        return (new P).add(new Wd(b, c).add(new Xd(pd, 0, .5 * c)).add(new Xd(pd, b, 0).close())).om(.5, .25, 1, .75);
    });
    Po("TriangleUp", function(a1, b, c) {
        return (new P).add(new Wd(b, c).add(new Xd(pd, 0, c)).add(new Xd(pd, .5 * b, 0).close())).om(.25, .5, .75, 1);
    });
    Po("Triangle", "TriangleUp");
    Po("Diamond", function(a1, b, c) {
        return (new P).add(new Wd(.5 * b, 0).add(new Xd(pd, 0, .5 * c)).add(new Xd(pd, .5 * b, c)).add(new Xd(pd, b, .5 * c).close())).om(.25, .25, .75, .75);
    });
    Po("LineH", function(a1, b, c) {
        a1 = new P(P.j);
        a1.startX = 0;
        a1.startY = c / 2;
        a1.endX = b;
        a1.endY = c / 2;
        return a1;
    });
    Po("LineV", function(a1, b, c) {
        a1 = new P(P.j);
        a1.startX = b / 2;
        a1.startY = 0;
        a1.endX = b / 2;
        a1.endY = c;
        return a1;
    });
    Po("None", "Rectangle");
    Po("BarH", "Rectangle");
    Po("BarV", "Rectangle");
    Po("MinusLine", "LineH");
    Po("PlusLine", function(a1, b, c) {
        return (new P).add(new Wd(0, c / 2, !1).add(new Xd(pd, b, c / 2)).add(new Xd(Dd, b / 2, 0)).add(new Xd(pd, b / 2, c)));
    });
    Po("XLine", function(a1, b, c) {
        return (new P).add(new Wd(0, c, !1).add(new Xd(pd, b, 0)).add(new Xd(Dd, 0, 0)).add(new Xd(pd, b, c)));
    });
    Po("LineRight", function(a1, b, c) {
        return (new P).add(new Wd(.25 * b, 0, !1).add(new Xd(pd, .75 * b, .5 * c)).add(new Xd(pd, .25 * b, c)));
    });
    Po("LineDown", function(a1, b, c) {
        return (new P).add(new Wd(0, .25 * c, !1).add(new Xd(pd, .5 * b, .75 * c)).add(new Xd(pd, b, .25 * c)));
    });
    Po("LineLeft", function(a1, b, c) {
        return (new P).add(new Wd(.75 * b, 0, !1).add(new Xd(pd, .25 * b, .5 * c)).add(new Xd(pd, .75 * b, c)));
    });
    Po("LineUp", function(a1, b, c) {
        return (new P).add(new Wd(0, .75 * c, !1).add(new Xd(pd, .5 * b, .25 * c)).add(new Xd(pd, b, .75 * c)));
    });
    K.tm = {
        "": "",
        Standard: "F1 m 0,0 l 8,4 -8,4 2,-4 z",
        Backward: "F1 m 8,0 l -2,4 2,4 -8,-4 z",
        Triangle: "F1 m 0,0 l 8,4.62 -8,4.62 z",
        BackwardTriangle: "F1 m 8,4 l 0,4 -8,-4 8,-4 0,4 z",
        Boomerang: "F1 m 0,0 l 8,4 -8,4 4,-4 -4,-4 z",
        BackwardBoomerang: "F1 m 8,0 l -8,4 8,4 -4,-4 4,-4 z",
        SidewaysV: "m 0,0 l 8,4 -8,4 0,-1 6,-3 -6,-3 0,-1 z",
        BackwardV: "m 8,0 l -8,4 8,4 0,-1 -6,-3 6,-3 0,-1 z",
        OpenTriangle: "m 0,0 l 8,4 -8,4",
        BackwardOpenTriangle: "m 8,0 l -8,4 8,4",
        OpenTriangleLine: "m 0,0 l 8,4 -8,4 m 8.5,0 l 0,-8",
        BackwardOpenTriangleLine: "m 8,0 l  -8,4 8,4 m -8.5,0 l 0,-8",
        OpenTriangleTop: "m 0,0 l 8,4 m 0,4",
        BackwardOpenTriangleTop: "m 8,0 l -8,4 m 0,4",
        OpenTriangleBottom: "m 0,8 l 8,-4",
        BackwardOpenTriangleBottom: "m 0,4 l 8,4",
        HalfTriangleTop: "F1 m 0,0 l 0,4 8,0 z m 0,8",
        BackwardHalfTriangleTop: "F1 m 8,0 l 0,4 -8,0 z m 0,8",
        HalfTriangleBottom: "F1 m 0,4 l 0,4 8,-4 z",
        BackwardHalfTriangleBottom: "F1 m 8,4 l 0,4 -8,-4 z",
        ForwardSemiCircle: "m 4,0 b 270 180 0 4 4",
        BackwardSemiCircle: "m 4,8 b 90 180 0 -4 4",
        Feather: "m 0,0 l 3,4 -3,4",
        BackwardFeather: "m 3,0 l -3,4 3,4",
        DoubleFeathers: "m 0,0 l 3,4 -3,4 m 3,-8 l 3,4 -3,4",
        BackwardDoubleFeathers: "m 3,0 l -3,4 3,4 m 3,-8 l -3,4 3,4",
        TripleFeathers: "m 0,0 l 3,4 -3,4 m 3,-8 l 3,4 -3,4 m 3,-8 l 3,4 -3,4",
        BackwardTripleFeathers: "m 3,0 l -3,4 3,4 m 3,-8 l -3,4 3,4 m 3,-8 l -3,4 3,4",
        ForwardSlash: "m 0,8 l 5,-8",
        BackSlash: "m 0,0 l 5,8",
        DoubleForwardSlash: "m 0,8 l 4,-8 m -2,8 l 4,-8",
        DoubleBackSlash: "m 0,0 l 4,8 m -2,-8 l 4,8",
        TripleForwardSlash: "m 0,8 l 4,-8 m -2,8 l 4,-8 m -2,8 l 4,-8",
        TripleBackSlash: "m 0,0 l 4,8 m -2,-8 l 4,8 m -2,-8 l 4,8",
        Fork: "m 0,4 l 8,0 m -8,0 l 8,-4 m -8,4 l 8,4",
        BackwardFork: "m 8,4 l -8,0 m 8,0 l -8,-4 m 8,4 l -8,4",
        LineFork: "m 0,0 l 0,8 m 0,-4 l 8,0 m -8,0 l 8,-4 m -8,4 l 8,4",
        BackwardLineFork: "m 8,4 l -8,0 m 8,0 l -8,-4 m 8,4 l -8,4 m 8,-8 l 0,8",
        CircleFork: "F1 m 6,4 b 0 360 -3 0 3 z m 0,0 l 6,0 m -6,0 l 6,-4 m -6,4 l 6,4",
        BackwardCircleFork: "F1 m 0,4 l 6,0 m -6,-4 l 6,4 m -6,4 l 6,-4 m 6,0 b 0 360 -3 0 3",
        CircleLineFork: "F1 m 6,4 b 0 360 -3 0 3 z m 1,-4 l 0,8 m 0,-4 l 6,0 m -6,0 l 6,-4 m -6,4 l 6,4",
        BackwardCircleLineFork: "F1 m 0,4 l 6,0 m -6,-4 l 6,4 m -6,4 l 6,-4 m 0,-4 l 0,8 m 7,-4 b 0 360 -3 0 3",
        Circle: "F1 m 8,4 b 0 360 -4 0 4 z",
        Block: "F1 m 0,0 l 0,8 8,0 0,-8 z",
        StretchedDiamond: "F1 m 0,3 l 5,-3 5,3 -5,3 -5,-3 z",
        Diamond: "F1 m 0,4 l 4,-4 4,4 -4,4 -4,-4 z",
        Chevron: "F1 m 0,0 l 5,0 3,4 -3,4 -5,0 3,-4 -3,-4 z",
        StretchedChevron: "F1 m 0,0 l 8,0 3,4 -3,4 -8,0 3,-4 -3,-4 z",
        NormalArrow: "F1 m 0,2 l 4,0 0,-2 4,4 -4,4 0,-2 -4,0 z",
        X: "m 0,0 l 8,8 m 0,-8 l -8,8",
        TailedNormalArrow: "F1 m 0,0 l 2,0 1,2 3,0 0,-2 2,4 -2,4 0,-2 -3,0 -1,2 -2,0 1,-4 -1,-4 z",
        DoubleTriangle: "F1 m 0,0 l 4,4 -4,4 0,-8 z  m 4,0 l 4,4 -4,4 0,-8 z",
        BigEndArrow: "F1 m 0,0 l 5,2 0,-2 3,4 -3,4 0,-2 -5,2 0,-8 z",
        ConcaveTailArrow: "F1 m 0,2 h 4 v -2 l 4,4 -4,4 v -2 h -4 l 2,-2 -2,-2 z",
        RoundedTriangle: "F1 m 0,1 a 1,1 0 0 1 1,-1 l 7,3 a 0.5,1 0 0 1 0,2 l -7,3 a 1,1 0 0 1 -1,-1 l 0,-6 z",
        SimpleArrow: "F1 m 1,2 l -1,-2 2,0 1,2 -1,2 -2,0 1,-2 5,0 0,-2 2,2 -2,2 0,-2 z",
        AccelerationArrow: "F1 m 0,0 l 0,8 0.2,0 0,-8 -0.2,0 z m 2,0 l 0,8 1,0 0,-8 -1,0 z m 3,0 l 2,0 2,4 -2,4 -2,0 0,-8 z",
        BoxArrow: "F1 m 0,0 l 4,0 0,2 2,0 0,-2 2,4 -2,4 0,-2 -2,0 0,2 -4,0 0,-8 z",
        TriangleLine: "F1 m 8,4 l -8,-4 0,8 8,-4 z m 0.5,4 l 0,-8",
        CircleEndedArrow: "F1 m 10,4 l -2,-3 0,2 -2,0 0,2 2,0 0,2 2,-3 z m -4,0 b 0 360 -3 0 3 z",
        DynamicWidthArrow: "F1 m 0,3 l 2,0 2,-1 2,-2 2,4 -2,4 -2,-2 -2,-1 -2,0 0,-2 z",
        EquilibriumArrow: "m 0,3 l 8,0 -3,-3 m 3,5 l -8,0 3,3",
        FastForward: "F1 m 0,0 l 3.5,4 0,-4 3.5,4 0,-4 1,0 0,8 -1,0 0,-4 -3.5,4 0,-4 -3.5,4 0,-8 z",
        Kite: "F1 m 0,4 l 2,-4 6,4 -6,4 -2,-4 z",
        HalfArrowTop: "F1 m 0,0 l 4,4 4,0 -8,-4 z m 0,8",
        HalfArrowBottom: "F1 m 0,8 l 4,-4 4,0 -8,4 z",
        OpposingDirectionDoubleArrow: "F1 m 0,4 l 2,-4 0,2 4,0 0,-2 2,4 -2,4 0,-2 -4,0 0,2 -2,-4 z",
        PartialDoubleTriangle: "F1 m 0,0 4,3 0,-3 4,4 -4,4 0,-3 -4,3 0,-8 z",
        LineCircle: "F1 m 0,0 l 0,8 m 7 -4 b 0 360 -3 0 3 z",
        DoubleLineCircle: "F1 m 0,0 l 0,8 m 2,-8 l 0,8 m 7 -4 b 0 360 -3 0 3 z",
        TripleLineCircle: "F1 m 0,0 l 0,8 m 2,-8 l 0,8 m 2,-8 l 0,8 m 7 -4 b 0 360 -3 0 3 z",
        CircleLine: "F1 m 6 4 b 0 360 -3 0 3 z m 1,-4 l 0,8",
        DiamondCircle: "F1 m 8,4 l -4,4 -4,-4 4,-4 4,4 m 8,0 b 0 360 -4 0 4 z",
        PlusCircle: "F1 m 8,4 b 0 360 -4 0 4 l -8 0 z m -4 -4 l 0 8",
        OpenRightTriangleTop: "m 8,0 l 0,4 -8,0 m 0,4",
        OpenRightTriangleBottom: "m 8,8 l 0,-4 -8,0",
        Line: "m 0,0 l 0,8",
        DoubleLine: "m 0,0 l 0,8 m 2,0 l 0,-8",
        TripleLine: "m 0,0 l 0,8 m 2,0 l 0,-8 m 2,0 l 0,8",
        PentagonArrow: "F1 m 8,4 l -4,-4 -4,0 0,8 4,0 4,-4 z"
    };
    function Qo() {
        this.oc = !1;
        this.sr = this.Jp = this.yq = null;
        this.ur = "";
        this.er = this.nq = this.tr = null;
        this.gr = "";
        this.fr = Lb;
        this.hr = null;
        this.ir = "";
        this.kr = Sc;
        this.Fq = "";
        this.Gq = sc;
        this.Oq = qb;
        this.Jq = rb;
        this.Tp = null;
        this.Bq = 127;
        this.yr = sb;
        this.xr = "gray";
        this.Vg = 4;
    }
    Qo.prototype.copy = function() {
        var a1 = new Qo;
        a1.yq = this.yq;
        a1.Jp = this.Jp;
        a1.sr = this.sr;
        a1.ur = this.ur;
        a1.tr = this.tr;
        a1.nq = this.nq;
        a1.er = this.er;
        a1.gr = this.gr;
        a1.fr = this.fr.J();
        a1.hr = this.hr;
        a1.ir = this.ir;
        a1.kr = this.kr.J();
        a1.Fq = this.Fq;
        a1.Gq = this.Gq.J();
        a1.Oq = this.Oq.J();
        a1.Jq = this.Jq.J();
        a1.Tp = this.Tp;
        a1.Bq = this.Bq;
        a1.yr = this.yr.J();
        a1.xr = this.xr;
        a1.Vg = this.Vg;
        return a1;
    };
    function U(a1, b) {
        void 0 === a1 || a1 instanceof Zl || "string" === typeof a1 ? W.call(this, a1) : (W.call(this), a1 && (b = a1));
        this.G = 2408959;
        this.Tf = "";
        this.P = null;
        this.Jg = "";
        this.Qf = this.Ug = null;
        this.fc = "";
        this.Ah = this.Ig = null;
        this.ke = new J(NaN, NaN).freeze();
        this.nf = null;
        this.zo = NaN;
        this.vw = -1;
        this.py = new N;
        this.Rh = null;
        this.ag = NaN;
        b && Object.assign(this, b);
    }
    la(U, W);
    U.prototype.cloneProtected = function(a1) {
        W.prototype.cloneProtected.call(this, a1);
        a1.G = this.G & -4097 | 49152;
        a1.Tf = this.Tf;
        null !== this.P && (a1.P = this.P.oc ? this.P : this.P.copy());
        a1.Jg = this.Jg;
        a1.Qf = null;
        a1.fc = this.fc;
        a1.ke.assign(this.ke);
        a1.zo = this.zo;
    };
    t = U.prototype;
    t.Af = function(a1) {
        W.prototype.Af.call(this, a1);
        a1.oh();
        a1.Ug = null;
        a1.nf = null;
        a1.Rh = null;
    };
    t.toString = function() {
        var a1 = Ha(this.constructor) + "#" + bb(this);
        null !== this.data && (a1 += "(" + Ia(this.data) + ")");
        return a1;
    };
    function Ro(a1) {
        null === a1.P ? a1.P = new Qo : a1.P.oc && (a1.P = a1.P.copy());
    }
    t.th = function() {
        W.prototype.th.call(this);
        null !== this.P && (this.P.oc = !0);
    };
    t.fk = function(a1, b, c, d, e, f, g) {
        var h = this.diagram;
        null !== h && (a1 === ee && "elements" === b ? e instanceof W ? Hj(e, function(a1) {
            Jj(h.partManager, a1);
            Ij(h, a1);
        }) : ck(h, e) : a1 === fe && "elements" === b && (e instanceof W ? Hj(e, function(a1) {
            Mj(h.partManager, a1, h);
        }) : ek(h, e)), h.cb(a1, b, c, d, e, f, g));
    };
    t.La = function(a1) {
        W.prototype.La.call(this, a1);
        if (null !== this.data) {
            for(var b = this.O.s, c = b.length, d = 0; d < c; d++){
                var e = b[d];
                e instanceof W && Hj(e, function(a1) {
                    null !== a1.data && a1.La();
                });
            }
            for(b = this.adornments; b.next();)b.value.La(a1);
        }
    };
    U.prototype.updateRelationshipsFromData = function() {
        var a1;
        null !== this.data && (null === (a1 = this.diagram) || void 0 === a1 || a1.partManager.updateRelationshipsFromData(this));
    };
    U.prototype.Oj = function(a1) {
        var b = this.Qf;
        return null === b ? null : b.I(a1);
    };
    U.prototype.bh = function(a1, b) {
        if (null !== b) {
            var c = null, d = this.Qf;
            null !== d && (c = d.I(a1));
            if (c !== b) {
                if (null !== c) {
                    var e = c.diagram;
                    null !== e && e.remove(c);
                }
                null === d && (this.Qf = d = new ob);
                b.Tf !== a1 && (b.category = a1);
                d.add(a1, b);
                a1 = this.diagram;
                null !== a1 && (a1.add(b), a1 = b.adornedObject, null !== a1 && (a1 = a1.ih(), null !== a1 && (b.data = a1.data)));
            }
        }
    };
    U.prototype.Jf = function(a1) {
        var b = this.Qf;
        if (null !== b) {
            var c = b.I(a1);
            if (null !== c) {
                var d = c.diagram;
                null !== d && d.remove(c);
            }
            b.remove(a1);
            0 === b.count && (this.Qf = null);
        }
    };
    U.prototype.Dj = function() {
        var a1 = this.Qf;
        if (null !== a1) {
            var b = Ea();
            for(a1 = a1.iterator; a1.next();)b.push(a1.key);
            a1 = b.length;
            for(var c = 0; c < a1; c++)this.Jf(b[c]);
            Ga(b);
        }
    };
    U.prototype.updateAdornments = function() {
        var a1 = this.diagram;
        if (null !== a1) {
            for(var b = this.adornments; b.next();){
                var c = b.value;
                c.v();
                c.placeholder && c.placeholder.v();
            }
            a: {
                if (this.isSelected && this.selectionAdorned && (b = this.selectionObject, null !== b && this.actualBounds.w() && this.isVisible() && b.Ed() && b.actualBounds.w())) {
                    c = this.Oj("Selection");
                    if (null === c) {
                        c = this.selectionAdornmentTemplate;
                        null === c && (c = this.ph() ? a1.linkSelectionAdornmentTemplate : this instanceof pf ? a1.groupSelectionAdornmentTemplate : a1.nodeSelectionAdornmentTemplate);
                        if (!(c instanceof te)) break a;
                        jg(c);
                        c = c.copy();
                        null !== c && (this.ph() && this.selectionObject === this.path && (c.type = W.Link), c.adornedObject = b);
                    }
                    if (null !== c) {
                        c.type === W.Link && c.v();
                        this.bh("Selection", c);
                        break a;
                    }
                }
                this.Jf("Selection");
            }
            So(this, a1);
            for(b = this.adornments; b.next();)b.value.La();
        }
    };
    U.prototype.Xb = function() {
        var a1 = this.diagram;
        null !== a1 && (a1.vd = !0, 0 !== (this.G & 16384) !== !0 && (this.G |= 16384));
    };
    function fi(a1) {
        0 !== (a1.G & 16384) !== !1 && (a1.updateAdornments(), a1.G &= -16385);
    }
    function So(a1, b) {
        b.toolManager.mouseDownTools.each(function(b) {
            b.isEnabled && b.updateAdornments(a1);
        });
        b.toolManager.updateAdornments(a1);
    }
    function To(a1) {
        if (!1 === wj(a1)) {
            Uo(a1, !0);
            a1.Tk();
            var b = a1.diagram;
            null !== b && (b.De.add(a1), b.ac());
        }
    }
    function Vo(a1) {
        a1.G |= 2097152;
        if (!1 !== wj(a1)) {
            var b = a1.position, c = a1.location;
            c.w() && b.w() || Wo(a1, b, c);
            c = a1.Jb;
            var d = N.alloc().assign(c);
            c.ka();
            c.x = b.x;
            c.y = b.y;
            c.freeze();
            a1.Wl(d, c);
            N.free(d);
            Uo(a1, !1);
        }
    }
    U.prototype.Ge = function(a1, b, c, d) {
        var e = this.uc;
        e.h(a1, b, c, d);
        null === this.Mb && (this.Mb = new ld);
        var f = this.Mb;
        f.reset();
        this.mo(f, a1, b, c, d);
        this.Mb = f;
        f.vs() || f.op(e);
    };
    U.prototype.mo = function(a1, b, c, d, e) {
        1 !== this.Ca && a1.scale(this.Ca);
        if (0 !== this.Lb) {
            var f = wc;
            this.locationSpot.sb() && (f = this.locationSpot);
            var g = J.alloc();
            if (this.locationObject !== this) for(b = this.locationObject, c = b.naturalBounds, g.yi(c.x, c.y, c.width, c.height, f), null !== b.Mb && b.Mb.Ga(g), g.offset(-b.measuredBounds.x, -b.measuredBounds.y), f = b.panel; null !== f && f !== this;)null !== f.Mb && f.Mb.Ga(g), g.offset(-f.measuredBounds.x, -f.measuredBounds.y), f = f.panel;
            else g.yi(b, c, d, e, f);
            a1.rotate(this.Lb, g.x, g.y);
            J.free(g);
        }
    };
    U.prototype.move = function(a1, b) {
        !0 === b ? this.location = a1 : this.position = a1;
    };
    U.prototype.moveTo = function(a1, b, c) {
        a1 = J.allocAt(a1, b);
        this.move(a1, c);
        J.free(a1);
    };
    U.prototype.isVisible = function() {
        if (!this.visible) return !1;
        var a1 = this.layer;
        if (null !== a1) {
            if (!a1.visible) return !1;
            a1 = a1.diagram;
            if (null !== a1 && a1.animationManager.fv(this)) return !0;
        }
        a1 = this.containingGroup;
        return null === a1 || a1.isSubGraphExpanded && a1.isVisible() ? !0 : !1;
    };
    U.prototype.$b = function(a1) {
        var b = this.diagram;
        a1 ? (this.C(4), this.Xb(), null !== b && b.De.add(this)) : (this.C(8), this.Dj());
        this.oh();
        null !== b && (b.Ya(), b.N());
    };
    U.prototype.fb = function(a1) {
        if (this.name === a1) return this;
        var b = this.Rh;
        null === b && (this.Rh = b = new ob);
        if (null !== b.I(a1)) return b.I(a1);
        var c = W.prototype.fb.call(this, a1);
        if (null !== c) return b.set(a1, c), c;
        b.set(a1, null);
        return null;
    };
    function Xo(a1, b, c, d) {
        void 0 === d && (d = new J);
        c = c.Mc() ? wc : c;
        var e = b.naturalBounds;
        d.h(e.width * c.x + c.offsetX, e.height * c.y + c.offsetY);
        if (null === b || b === a1) return d;
        b.transform.Ga(d);
        for(b = b.panel; null !== b && b !== a1;)b.transform.Ga(d), b = b.panel;
        null !== a1.Mb && a1.Mb.Ga(d);
        d.offset(-a1.uc.x, -a1.uc.y);
        return d;
    }
    U.prototype.mi = function(a1) {
        void 0 === a1 && (a1 = new N);
        return a1.assign(this.actualBounds);
    };
    U.prototype.Va = function() {
        this.measure(Infinity, Infinity);
        this.arrange();
    };
    function fn(a1) {
        var b = J.alloc(), c = a1.locationObject, d = c.naturalBounds, e = c instanceof Bf ? c.strokeWidth : 0;
        b.yi(0, 0, d.width + e, d.height + e, a1.locationSpot);
        if (c !== a1) for(b.offset(-e / 2, -e / 2), c.transform.Ga(b), c = c.panel; null !== c && c !== a1;)c.transform.Ga(b), c = c.panel;
        null !== a1.Mb && a1.Mb.Ga(b);
        b.offset(-a1.uc.x, -a1.uc.y);
        return b;
    }
    function Gj(a1, b) {
        var c = a1.py;
        isNaN(a1.ag) && (a1.ag = un(a1));
        var d = a1.ag;
        var e = 2 * d;
        if (!a1.isShadowed) return c.h(b.x - 1 - d, b.y - 1 - d, b.width + 2 + e, b.height + 2 + e), c;
        d = b.x;
        e = b.y;
        var f = b.width;
        b = b.height;
        var g = a1.shadowBlur;
        a1 = a1.shadowOffset;
        f += g;
        b += g;
        d -= g / 2;
        e -= g / 2;
        0 < a1.x ? f += a1.x : (d += a1.x, f -= a1.x);
        0 < a1.y ? b += a1.y : (e += a1.y, b -= a1.y);
        c.h(d - 1, e - 1, f + 2, b + 2);
        return c;
    }
    U.prototype.arrange = function() {
        if (!1 === vj(this)) Vo(this);
        else {
            ll(this, !1);
            var a1 = this.Jb, b = N.alloc();
            b.assign(a1);
            var c = hg(this);
            this.eh(0, 0, this.uc.width, this.uc.height);
            var d = this.position;
            Wo(this, d, this.location);
            a1.ka();
            a1.x = d.x;
            a1.y = d.y;
            a1.freeze();
            this.Wl(b, a1);
            b.D(a1) ? this.Fd(c) : !this.Zc() || K.B(b.width, a1.width) && K.B(b.height, a1.height) || 0 <= this.vw && this.C(16);
            N.free(b);
            Uo(this, !1);
        }
    };
    t = U.prototype;
    t.Wl = function(a1, b) {
        var c = this.diagram;
        if (null !== c) {
            var d = !1;
            if (!1 === c.Zi && a1.w()) {
                var e = N.alloc();
                e.assign(c.documentBounds);
                e.Fv(c.padding);
                a1.x > e.x && a1.y > e.y && a1.right < e.right && a1.bottom < e.bottom && b.x > e.x && b.y > e.y && b.right < e.right && b.bottom < e.bottom && (d = !0);
                N.free(e);
            }
            0 !== (this.G & 65536) !== !0 && a1.D(b) || Kj(this, d, c);
            c.N();
            !a1.w() && !b.w() || Ub(a1, b) || (this instanceof V && !c.undoManager.isUndoingRedoing && this.Bd(), this.oh());
        }
    };
    t.zv = function(a1, b, c) {
        if (this.ph() || !a1.w()) return !1;
        var d = this.diagram;
        null !== d && Yo(this, d, a1, b, c);
        this.pa = a1;
        this.G &= -2097153;
        !this.ke.w() || null !== d && !d.animationManager.isTicking && d.undoManager.isUndoingRedoing || (d = this.ke, this.ke = new J(d.x + (a1.x - b), d.y + (a1.y - c)), this.g("location", d, this.ke.copy()));
        !1 === wj(this) && !1 === vj(this) && (To(this), Vo(this));
        return !0;
    };
    function Yo(a1, b, c, d, e) {
        null === b || a1 instanceof te || (b = b.animationManager, b.Ab && wh(b, a1, new J(d, e), c));
    }
    t.lm = function(a1, b, c) {
        var d = this.ke, e = this.pa;
        if (c) {
            if (d.x === a1 && d.y === b) return;
            wj(this) || vj(this) ? e.h(NaN, NaN) : e.h(e.x + a1 - d.x, e.y + b - d.y);
            d.h(a1, b);
        } else {
            if (e.x === a1 && e.y === b) return;
            d.h(d.x + a1 - e.x, d.y + b - e.y);
            e.h(a1, b);
        }
        To(this);
    };
    t.Av = function() {
        this.G &= -2097153;
        To(this);
    };
    function Wo(a1, b, c) {
        var d = fn(a1), e = a1.diagram, f = c.w(), g = b.w();
        f && g ? 0 !== (a1.G & 2097152) ? Zo(a1, b, c, e, d) : $o(a1, b, c, e, d) : f ? Zo(a1, b, c, e, d) : g && $o(a1, b, c, e, d);
        a1.G |= 2097152;
        J.free(d);
        a1.Tk();
    }
    function Zo(a1, b, c, d, e) {
        var f = b.x, g = b.y;
        b.h(c.x - e.x, c.y - e.y);
        null !== d && (c = d.animationManager, (d = c.defaultAnimation.isAnimating) || !c.Ab || a1 instanceof te || wh(c, a1, new J(f, g), b), d || b.x === f && b.y === g || a1.g("position", new J(f, g), b.copy()));
    }
    function $o(a1, b, c, d, e) {
        var f = c.copy();
        c.h(b.x + e.x, b.y + e.y);
        c.D(f) || null === d || a1.g("location", f, c.copy());
    }
    function Kj(a1, b, c) {
        nl(a1, !1);
        a1 instanceof V && Ck(c, a1);
        a1.layer.isTemporary || b || c.Ya();
        b = a1.Jb;
        var d = c.viewportBounds;
        d.w() ? hg(a1) ? (Xb(b, d) || a1.Fd(!1), a1.updateAdornments()) : a1.isVisible() && b.Yc(d) ? (a1.Fd(!0), a1.updateAdornments()) : a1.Xb() : c.vd = !0;
    }
    t.si = function() {
        return !0;
    };
    t.Zc = function() {
        return !0;
    };
    t.ph = function() {
        return !1;
    };
    t.Dd = function() {
        return !0;
    };
    function ap(a1, b, c, d) {
        b.constructor === a1.constructor || bp || (bp = !0, ya('Should not change the class of the Part when changing category from "' + c + '" to "' + d + '"'), ya("  Old class: " + Ha(a1.constructor) + ", new class: " + Ha(b.constructor) + ", part: " + a1.toString()));
        a1.Dj();
        var e = a1.data;
        c = a1.layerName;
        var f = a1.isSelected, g = a1.isHighlighted, h = !0, k = !0, l = !1;
        a1 instanceof V && (h = a1.isTreeLeaf, k = a1.isTreeExpanded, l = a1.wasTreeExpanded);
        b.Af(a1);
        b.cloneProtected(a1);
        a1.Tf = d;
        null !== a1.svg && (a1.svg.remove(), a1.svg = null, a1.Uc = !0);
        a1.v();
        a1.N();
        b = a1.diagram;
        d = !0;
        null !== b && (d = b.skipsUndoManager, b.skipsUndoManager = !0);
        a1.ub = e;
        a1.G = f ? a1.G | 4096 : a1.G & -4097;
        a1.G = g ? a1.G | 524288 : a1.G & -524289;
        a1 instanceof V && (a1.U = h ? a1.U | 4 : a1.U & -5, a1.U = k ? a1.U | 1 : a1.U & -2, a1.U = l ? a1.U | 2 : a1.U & -3);
        null !== e && a1.La();
        e = a1.layerName;
        e !== c && (a1.Jg = c, a1.layerName = e);
        null !== b && (b.skipsUndoManager = d);
        a1.Zc() && a1.C(64);
    }
    U.prototype.canCopy = function() {
        if (!this.copyable) return !1;
        var a1 = this.layer;
        if (null === a1) return !0;
        if (!a1.allowCopy) return !1;
        a1 = a1.diagram;
        return null === a1 ? !0 : a1.allowCopy ? !0 : !1;
    };
    U.prototype.canDelete = function() {
        if (!this.deletable) return !1;
        var a1 = this.layer;
        if (null === a1) return !0;
        if (!a1.allowDelete) return !1;
        a1 = a1.diagram;
        return null === a1 ? !0 : a1.allowDelete ? !0 : !1;
    };
    U.prototype.canEdit = function() {
        if (!this.textEditable) return !1;
        var a1 = this.layer;
        if (null === a1) return !0;
        if (!a1.allowTextEdit) return !1;
        a1 = a1.diagram;
        return null === a1 ? !0 : a1.allowTextEdit ? !0 : !1;
    };
    U.prototype.canGroup = function() {
        if (!this.groupable) return !1;
        var a1 = this.layer;
        if (null === a1) return !0;
        if (!a1.allowGroup) return !1;
        a1 = a1.diagram;
        return null === a1 ? !0 : a1.allowGroup ? !0 : !1;
    };
    U.prototype.canMove = function() {
        if (!this.movable) return !1;
        var a1 = this.layer;
        if (null === a1) return !0;
        if (!a1.allowMove) return !1;
        a1 = a1.diagram;
        return null === a1 ? !0 : a1.allowMove ? !0 : !1;
    };
    U.prototype.canReshape = function() {
        if (!this.reshapable) return !1;
        var a1 = this.layer;
        if (null === a1) return !0;
        if (!a1.allowReshape) return !1;
        a1 = a1.diagram;
        return null === a1 ? !0 : a1.allowReshape ? !0 : !1;
    };
    U.prototype.canResize = function() {
        if (!this.resizable) return !1;
        var a1 = this.layer;
        if (null === a1) return !0;
        if (!a1.allowResize) return !1;
        a1 = a1.diagram;
        return null === a1 ? !0 : a1.allowResize ? !0 : !1;
    };
    U.prototype.canRotate = function() {
        if (!this.rotatable) return !1;
        var a1 = this.layer;
        if (null === a1) return !0;
        if (!a1.allowRotate) return !1;
        a1 = a1.diagram;
        return null === a1 ? !0 : a1.allowRotate ? !0 : !1;
    };
    U.prototype.canSelect = function() {
        if (!this.selectable) return !1;
        var a1 = this.layer;
        if (null === a1) return !0;
        if (!a1.allowSelect) return !1;
        a1 = a1.diagram;
        return null === a1 ? !0 : a1.allowSelect ? !0 : !1;
    };
    function wj(a1) {
        return 0 !== (a1.G & 32768);
    }
    function Uo(a1, b) {
        a1.G = b ? a1.G | 32768 : a1.G & -32769;
    }
    function nl(a1, b) {
        a1.G = b ? a1.G | 65536 : a1.G & -65537;
    }
    function hg(a1) {
        return 0 !== (a1.G & 131072);
    }
    t = U.prototype;
    t.Fd = function(a1) {
        this.G = a1 ? this.G | 131072 : this.G & -131073;
    };
    function cp(a1, b) {
        a1.G = b ? a1.G | 1048576 : a1.G & -1048577;
    }
    t.oh = function() {
        var a1 = this.containingGroup;
        null !== a1 && (a1.v(), null !== a1.placeholder && a1.placeholder.v(), a1.Bd());
    };
    t.N = function() {
        var a1 = this.diagram;
        null !== a1 && !vj(this) && !wj(this) && this.isVisible() && this.Jb.w() && a1.N(Gj(this, this.Jb));
    };
    t.v = function() {
        W.prototype.v.call(this);
        var a1 = this.diagram;
        null !== a1 && (a1.De.add(this), this instanceof V && null !== this.labeledLink && Nl(this.labeledLink), a1.ac(!0));
    };
    t.Uo = function(a1) {
        a1 || (a1 = this.Ah, null !== a1 && dp(a1, this));
    };
    t.Vo = function(a1) {
        a1 || (a1 = this.Ah, null !== a1 && ep(a1, this));
    };
    t.Kj = function() {
        var a1 = this.data;
        if (null !== a1) {
            var b = this.diagram;
            null !== b && (b = b.model, null !== b && b.bm(a1));
        }
    };
    t.oz = function() {
        return fp(this, this);
    };
    function fp(a1, b) {
        var c = b.containingGroup;
        return null !== c ? 1 + fp(a1, c) : b instanceof V && (b = b.labeledLink, null !== b) ? fp(a1, b) : 0;
    }
    t.sz = function() {
        return gp(this, this);
    };
    function gp(a1, b) {
        var c = b.containingGroup;
        return null !== c || b instanceof V && (c = b.labeledLink, null !== c) ? gp(a1, c) : b;
    }
    t.Td = function(a1) {
        return a1 instanceof pf ? hp(this, this, a1) : !1;
    };
    function hp(a1, b, c) {
        if (b === c || null === c) return !1;
        var d = b.containingGroup;
        return null === d || d !== c && !hp(a1, d, c) ? b instanceof V && (b = b.labeledLink, null !== b) ? hp(a1, b, c) : !1 : !0;
    }
    t.px = function(a1) {
        if (null === a1) return null;
        if (this === a1) return this.containingGroup;
        for(var b = this; null !== b;){
            b instanceof pf && cp(b, !0);
            if (b instanceof V) {
                var c = b.labeledLink;
                null !== c && (b = c);
            }
            b = b.containingGroup;
        }
        c = null;
        for(b = a1; null !== b;){
            if (0 !== (b.G & 1048576)) {
                c = b;
                break;
            }
            b instanceof V && (a1 = b.labeledLink, null !== a1 && (b = a1));
            b = b.containingGroup;
        }
        for(b = this; null !== b;)b instanceof pf && cp(b, !1), b instanceof V && (a1 = b.labeledLink, null !== a1 && (b = a1)), b = b.containingGroup;
        return c;
    };
    U.prototype.canLayout = function() {
        if (!this.isLayoutPositioned || !this.isVisible()) return !1;
        var a1 = this.layer;
        return null !== a1 && a1.isTemporary || this instanceof V && this.isLinkLabel ? !1 : !0;
    };
    U.prototype.C = function(a1) {
        void 0 === a1 && (a1 = 16777215);
        if (this.isLayoutPositioned && 0 !== (a1 & this.layoutConditions)) {
            var b = this.layer;
            null !== b && b.isTemporary || this instanceof V && this.isLinkLabel ? b = !1 : (b = this.diagram, b = null !== b && b.undoManager.isUndoingRedoing ? !1 : !0);
        } else b = !1;
        if (b) {
            if (b = this.Ah, null !== b) {
                var c = b.layout;
                null !== c ? c.C() : b.C(a1);
            } else a1 = this.diagram, null !== a1 && (a1 = a1.layout, null !== a1 && a1.C());
        }
    };
    function Lj(a1) {
        if (!a1.isVisible()) return !1;
        a1 = a1.layer;
        return null !== a1 && a1.isTemporary ? !1 : !0;
    }
    function Tk(a1, b, c, d, e, f) {
        void 0 === f && (f = null);
        if (!(a1.contains(b) || null !== f && !f(b) || b instanceof te)) {
            if (a1.add(b), b instanceof V) {
                if (c && b instanceof pf) for(var g = b.memberParts; g.next();)Tk(a1, g.value, c, d, e, f);
                if (!1 !== e) for(g = b.linksConnected; g.next();){
                    var h = g.value;
                    if (!a1.contains(h)) {
                        var k = h.fromNode, l = h.toNode;
                        k = null === k || a1.contains(k);
                        l = null === l || a1.contains(l);
                        (e ? k && l : k || l) && Tk(a1, h, c, d, e, f);
                    }
                }
                if (1 < d) for(b = b.Ou(); b.next();)Tk(a1, b.value, c, d - 1, e, f);
            } else if (b instanceof T) for(b = b.labelNodes; b.next();)Tk(a1, b.value, c, d, e, f);
        }
    }
    ma.Object.defineProperties(U.prototype, {
        key: {
            get: function() {
                var a1 = this.diagram;
                if (null !== a1) return a1.model.wa(this.data);
            }
        },
        adornments: {
            get: function() {
                return null === this.Qf ? Ya : this.Qf.iteratorValues;
            }
        },
        layer: {
            get: function() {
                return this.Ig;
            }
        },
        diagram: {
            get: function() {
                var a1 = this.Ig;
                return null === a1 || void 0 === a1 ? null : a1.diagram;
            }
        },
        layerName: {
            get: function() {
                return this.Jg;
            },
            set: function(a1) {
                var b = this.Jg;
                if (b !== a1) {
                    var c = this.diagram;
                    if (null === c || null !== c.Pj(a1) && !c.partManager.addsToTemporaryLayer) {
                        if (this.Jg = a1, null !== c && c.Ya(), this.g("layerName", b, a1), b = this.layer, null !== b && b.name !== a1 && (c = b.diagram, null !== c && (a1 = c.Pj(a1), null !== a1 && a1 !== b))) {
                            var d = b.qc(-1, this, !0);
                            0 <= d && c.cb(fe, "parts", b, this, null, d, !0);
                            d = a1.oi(99999999, this, !0);
                            b.visible !== a1.visible && this.$b(a1.visible);
                            0 <= d && c.cb(ee, "parts", a1, null, this, !0, d);
                            d = this.layerChanged;
                            if (null !== d) {
                                var e = c.aa;
                                c.aa = !0;
                                d(this, b, a1);
                                c.aa = e;
                            }
                        }
                    }
                }
            }
        },
        layerChanged: {
            get: function() {
                return null !== this.P ? this.P.yq : null;
            },
            set: function(a1) {
                var b = this.layerChanged;
                b !== a1 && (Ro(this), this.P.yq = a1, this.g("layerChanged", b, a1));
            }
        },
        zOrder: {
            get: function() {
                return this.zo;
            },
            set: function(a1) {
                var b = this.zo;
                if (b !== a1) {
                    this.zo = a1;
                    var c = this.layer;
                    null !== c && ki(c, -1, this);
                    this.g("zOrder", b, a1);
                    a1 = this.diagram;
                    null !== a1 && a1.N();
                }
            }
        },
        locationObject: {
            get: function() {
                if (null === this.nf) {
                    var a1 = this.locationObjectName;
                    "" !== a1 ? (a1 = this.fb(a1), null !== a1 ? this.nf = a1 : this.nf = this) : this instanceof te ? this.type !== W.Link && null !== this.placeholder ? this.nf = this.placeholder : this.nf = this : this.nf = this;
                }
                return this.nf.visible ? this.nf : this;
            }
        },
        minLocation: {
            get: function() {
                return null !== this.P ? this.P.Oq : qb;
            },
            set: function(a1) {
                var b = this.minLocation;
                b.D(a1) || (a1 = a1.J(), Ro(this), this.P.Oq = a1, this.g("minLocation", b, a1));
            }
        },
        maxLocation: {
            get: function() {
                return null !== this.P ? this.P.Jq : rb;
            },
            set: function(a1) {
                var b = this.maxLocation;
                b.D(a1) || (a1 = a1.J(), Ro(this), this.P.Jq = a1, this.g("maxLocation", b, a1));
            }
        },
        locationObjectName: {
            get: function() {
                return null !== this.P ? this.P.Fq : "";
            },
            set: function(a1) {
                var b = this.locationObjectName;
                b !== a1 && (Ro(this), this.P.Fq = a1, this.nf = null, this.v(), this.g("locationObjectName", b, a1));
            }
        },
        locationSpot: {
            get: function() {
                return null !== this.P ? this.P.Gq : sc;
            },
            set: function(a1) {
                var b = this.locationSpot;
                b.D(a1) || (a1 = a1.J(), Ro(this), this.P.Gq = a1, this.v(), this.g("locationSpot", b, a1));
            }
        },
        location: {
            get: function() {
                return this.ke;
            },
            set: function(a1) {
                var b = a1.x, c = a1.y, d = this.ke;
                if (!(d.x === b || isNaN(d.x) && isNaN(b)) || !(d.y === c || isNaN(d.y) && isNaN(c))) {
                    a1 = a1.copy();
                    b = a1;
                    if (this.ph()) b = !1;
                    else {
                        this.ke = b;
                        this.G |= 2097152;
                        if (!1 === vj(this) && (To(this), c = this.pa, c.w())) {
                            var e = this.diagram;
                            if (null === e || e.animationManager.isTicking || !e.undoManager.isUndoingRedoing) {
                                var f = c.copy();
                                c.h(c.x + (b.x - d.x), c.y + (b.y - d.y));
                                Yo(this, e, c, f.x, f.y);
                                this.g("position", f, c.copy());
                            }
                        }
                        b = !0;
                    }
                    b && this.g("location", d, a1.copy());
                }
            }
        },
        category: {
            get: function() {
                return this.Tf;
            },
            set: function(a1) {
                var b = this.Tf;
                if (b !== a1) {
                    null !== this.svg && (this.svg.remove(), this.Uc = !0);
                    var c = this.diagram, d = this.data, e = null;
                    if (null !== c && null !== d && !(this instanceof te)) {
                        var f = c.model.undoManager;
                        f.isEnabled && !f.isUndoingRedoing && (e = this.clone(), e.O.addAll(this.O));
                    }
                    this.Tf = a1;
                    this.g("category", b, a1);
                    null === c || null === d || this instanceof te ? this instanceof te && (e = this.adornedPart, null !== e && (a1 = e.Qf, null !== a1 && a1.remove(b), e.bh(this.category, this))) : (f = c.model, f.undoManager.isUndoingRedoing || (this.ph() ? (c.partManager.setLinkCategoryForData(d, a1), c = c.partManager.findLinkTemplateForCategory(a1), null !== c && (jg(c), c = c.copy(), null !== c && ap(this, c, b, a1))) : (null !== f && f.im(d, a1), c = ip(c.partManager, d, a1), null !== c && (jg(c), c = c.copy(), null === c || c instanceof T || (d = this.location.copy(), ap(this, c, b, a1), this.location.w() || (this.location = d)))), null !== e && (b = this.clone(), b.O.addAll(this.O), this.g("self", e, b))));
                }
            }
        },
        self: {
            get: function() {
                return this;
            },
            set: function(a1) {
                ap(this, a1, this.category, a1.category);
            }
        },
        copyable: {
            get: function() {
                return 0 !== (this.G & 1);
            },
            set: function(a1) {
                var b = 0 !== (this.G & 1);
                b !== a1 && (this.G ^= 1, this.g("copyable", b, a1));
            }
        },
        deletable: {
            get: function() {
                return 0 !== (this.G & 2);
            },
            set: function(a1) {
                var b = 0 !== (this.G & 2);
                b !== a1 && (this.G ^= 2, this.g("deletable", b, a1));
            }
        },
        textEditable: {
            get: function() {
                return 0 !== (this.G & 4);
            },
            set: function(a1) {
                var b = 0 !== (this.G & 4);
                b !== a1 && (this.G ^= 4, this.g("textEditable", b, a1), this.Xb());
            }
        },
        groupable: {
            get: function() {
                return 0 !== (this.G & 8);
            },
            set: function(a1) {
                var b = 0 !== (this.G & 8);
                b !== a1 && (this.G ^= 8, this.g("groupable", b, a1));
            }
        },
        movable: {
            get: function() {
                return 0 !== (this.G & 16);
            },
            set: function(a1) {
                var b = 0 !== (this.G & 16);
                b !== a1 && (this.G ^= 16, this.g("movable", b, a1));
            }
        },
        selectionAdorned: {
            get: function() {
                return 0 !== (this.G & 32);
            },
            set: function(a1) {
                var b = 0 !== (this.G & 32);
                b !== a1 && (this.G ^= 32, this.g("selectionAdorned", b, a1), this.Xb());
            }
        },
        isInDocumentBounds: {
            get: function() {
                return 0 !== (this.G & 64);
            },
            set: function(a1) {
                var b = 0 !== (this.G & 64);
                if (b !== a1) {
                    this.G ^= 64;
                    var c = this.diagram;
                    null !== c && c.Ya();
                    this.g("isInDocumentBounds", b, a1);
                }
            }
        },
        isLayoutPositioned: {
            get: function() {
                return 0 !== (this.G & 128);
            },
            set: function(a1) {
                var b = 0 !== (this.G & 128);
                b !== a1 && (this.G ^= 128, this.g("isLayoutPositioned", b, a1), this.C(a1 ? 4 : 8));
            }
        },
        selectable: {
            get: function() {
                return 0 !== (this.G & 256);
            },
            set: function(a1) {
                var b = 0 !== (this.G & 256);
                b !== a1 && (this.G ^= 256, this.g("selectable", b, a1), this.Xb());
            }
        },
        reshapable: {
            get: function() {
                return 0 !== (this.G & 512);
            },
            set: function(a1) {
                var b = 0 !== (this.G & 512);
                b !== a1 && (this.G ^= 512, this.g("reshapable", b, a1), this.Xb());
            }
        },
        resizable: {
            get: function() {
                return 0 !== (this.G & 1024);
            },
            set: function(a1) {
                var b = 0 !== (this.G & 1024);
                b !== a1 && (this.G ^= 1024, this.g("resizable", b, a1), this.Xb());
            }
        },
        rotatable: {
            get: function() {
                return 0 !== (this.G & 2048);
            },
            set: function(a1) {
                var b = 0 !== (this.G & 2048);
                b !== a1 && (this.G ^= 2048, this.g("rotatable", b, a1), this.Xb());
            }
        },
        isSelected: {
            get: function() {
                return 0 !== (this.G & 4096);
            },
            set: function(a1) {
                var b = 0 !== (this.G & 4096);
                if (b !== a1) {
                    var c = this.diagram;
                    if (!a1 || this.canSelect() && !(null !== c && c.selection.count >= c.maxSelectionCount)) {
                        this.G ^= 4096;
                        var d = !1;
                        if (null !== c) {
                            d = c.skipsUndoManager;
                            c.skipsUndoManager = !0;
                            var e = c.selection;
                            e.ka();
                            a1 ? e.add(this) : e.remove(this);
                            e.freeze();
                        }
                        this.g("isSelected", b, a1);
                        this.Xb();
                        a1 = this.selectionChanged;
                        null !== a1 && a1(this);
                        null !== c && (c.ac(), c.skipsUndoManager = d);
                    }
                }
            }
        },
        isHighlighted: {
            get: function() {
                return 0 !== (this.G & 524288);
            },
            set: function(a1) {
                var b = 0 !== (this.G & 524288);
                if (b !== a1) {
                    this.G ^= 524288;
                    var c = this.diagram;
                    null !== c && (c = c.highlighteds, c.ka(), a1 ? c.add(this) : c.remove(this), c.freeze());
                    this.g("isHighlighted", b, a1);
                    this.N();
                    a1 = this.highlightedChanged;
                    null !== a1 && a1(this);
                }
            }
        },
        isShadowed: {
            get: function() {
                return 0 !== (this.G & 8192);
            },
            set: function(a1) {
                var b = 0 !== (this.G & 8192);
                b !== a1 && (this.G ^= 8192, this.Uc = !0, this.g("isShadowed", b, a1), this.N());
            }
        },
        isAnimated: {
            get: function() {
                return 0 !== (this.G & 262144);
            },
            set: function(a1) {
                var b = 0 !== (this.G & 262144);
                b !== a1 && (this.G ^= 262144, this.g("isAnimated", b, a1));
            }
        },
        highlightedChanged: {
            get: function() {
                return null !== this.P ? this.P.nq : null;
            },
            set: function(a1) {
                var b = this.highlightedChanged;
                b !== a1 && (Ro(this), this.P.nq = a1, this.g("highlightedChanged", b, a1));
            }
        },
        selectionObjectName: {
            get: function() {
                return null !== this.P ? this.P.ur : "";
            },
            set: function(a1) {
                var b = this.selectionObjectName;
                b !== a1 && (Ro(this), this.P.ur = a1, this.Ug = null, this.g("selectionObjectName", b, a1));
            }
        },
        selectionAdornmentTemplate: {
            get: function() {
                return null !== this.P ? this.P.sr : null;
            },
            set: function(a1) {
                var b = this.selectionAdornmentTemplate;
                b !== a1 && (Ro(this), this.P.sr = a1, this.g("selectionAdornmentTemplate", b, a1));
            }
        },
        selectionObject: {
            get: function() {
                if (null === this.Ug) {
                    var a1 = this.selectionObjectName;
                    null !== a1 && "" !== a1 ? (a1 = this.fb(a1), null !== a1 ? this.Ug = a1 : this.Ug = this) : this instanceof T ? (a1 = this.path, null !== a1 ? this.Ug = a1 : this.Ug = this) : this.Ug = this;
                }
                return this.Ug;
            }
        },
        selectionChanged: {
            get: function() {
                return null !== this.P ? this.P.tr : null;
            },
            set: function(a1) {
                var b = this.selectionChanged;
                b !== a1 && (Ro(this), this.P.tr = a1, this.g("selectionChanged", b, a1));
            }
        },
        resizeAdornmentTemplate: {
            get: function() {
                return null !== this.P ? this.P.er : null;
            },
            set: function(a1) {
                var b = this.resizeAdornmentTemplate;
                b !== a1 && (Ro(this), this.P.er = a1, this.g("resizeAdornmentTemplate", b, a1));
            }
        },
        resizeObjectName: {
            get: function() {
                return null !== this.P ? this.P.gr : "";
            },
            set: function(a1) {
                var b = this.resizeObjectName;
                b !== a1 && (Ro(this), this.P.gr = a1, this.g("resizeObjectName", b, a1));
            }
        },
        resizeObject: {
            get: function() {
                var a1 = this.resizeObjectName;
                return "" !== a1 && (a1 = this.fb(a1), null !== a1) ? a1 : this;
            }
        },
        resizeCellSize: {
            get: function() {
                return null !== this.P ? this.P.fr : Lb;
            },
            set: function(a1) {
                var b = this.resizeCellSize;
                b.D(a1) || (a1 = a1.J(), Ro(this), this.P.fr = a1, this.g("resizeCellSize", b, a1));
            }
        },
        rotateAdornmentTemplate: {
            get: function() {
                return null !== this.P ? this.P.hr : null;
            },
            set: function(a1) {
                var b = this.rotateAdornmentTemplate;
                b !== a1 && (Ro(this), this.P.hr = a1, this.g("rotateAdornmentTemplate", b, a1));
            }
        },
        rotateObjectName: {
            get: function() {
                return null !== this.P ? this.P.ir : "";
            },
            set: function(a1) {
                var b = this.rotateObjectName;
                b !== a1 && (Ro(this), this.P.ir = a1, this.g("rotateObjectName", b, a1));
            }
        },
        rotateObject: {
            get: function() {
                var a1 = this.rotateObjectName;
                return "" !== a1 && (a1 = this.fb(a1), null !== a1) ? a1 : this;
            }
        },
        rotationSpot: {
            get: function() {
                return null !== this.P ? this.P.kr : Sc;
            },
            set: function(a1) {
                var b = this.rotationSpot;
                b.D(a1) || (a1 = a1.J(), Ro(this), this.P.kr = a1, this.g("rotationSpot", b, a1));
            }
        },
        text: {
            get: function() {
                return this.fc;
            },
            set: function(a1) {
                var b = this.fc;
                b !== a1 && (this.fc = a1, this.g("text", b, a1));
            }
        },
        containingGroup: {
            get: function() {
                return this.Ah;
            },
            set: function(a1) {
                if (this.Zc()) {
                    var b = this.Ah;
                    if (b !== a1) {
                        null === a1 || this !== a1 && !a1.Td(this) || (this === a1 && C("Cannot make a Group a member of itself: " + this.toString()), C("Cannot make a Group indirectly contain itself: " + this.toString() + " already contains " + a1.toString()));
                        this.C(2);
                        var c = this.diagram;
                        null !== b ? ep(b, this) : this instanceof pf && null !== c && c.ai.remove(this);
                        this.Ah = a1;
                        null !== a1 ? dp(a1, this) : this instanceof pf && null !== c && c.ai.add(this);
                        this.C(1);
                        if (null !== c && c.aa) {
                            var d = this.data, e = c.model;
                            if (null !== d && e.Wj()) {
                                var f = e.wa(null !== a1 ? a1.data : null);
                                e.lp(d, f);
                            }
                        }
                        d = this.containingGroupChanged;
                        null !== d && (e = !0, null !== c && (e = c.aa, c.aa = !0), d(this, b, a1), null !== c && (c.aa = e));
                        if (this instanceof pf) {
                            for(c = new H, Tk(c, this, !0, 0, !0), c = c.iterator; c.next();)if (d = c.value, d instanceof V) for(d = d.linksConnected; d.next();)jp(d.value);
                        }
                        if (this instanceof V) {
                            for(c = this.linksConnected; c.next();)jp(c.value);
                            c = this.labeledLink;
                            null !== c && jp(c);
                        }
                        this.g("containingGroup", b, a1);
                        null !== a1 && (b = a1.layer, null !== b && ki(b, -1, a1));
                    }
                } else C("cannot set the Part.containingGroup of a Link or Adornment");
            }
        },
        containingGroupChanged: {
            get: function() {
                return null !== this.P ? this.P.Jp : null;
            },
            set: function(a1) {
                var b = this.containingGroupChanged;
                b !== a1 && (Ro(this), this.P.Jp = a1, this.g("containingGroupChanged", b, a1));
            }
        },
        isTopLevel: {
            get: function() {
                return null !== this.containingGroup || this instanceof V && null !== this.labeledLink ? !1 : !0;
            }
        },
        layoutConditions: {
            get: function() {
                return null !== this.P ? this.P.Bq : 127;
            },
            set: function(a1) {
                var b = this.layoutConditions;
                b !== a1 && (Ro(this), this.P.Bq = a1, this.g("layoutConditions", b, a1));
            }
        },
        dragComputation: {
            get: function() {
                return null !== this.P ? this.P.Tp : null;
            },
            set: function(a1) {
                var b = this.dragComputation;
                b !== a1 && (Ro(this), this.P.Tp = a1, this.g("dragComputation", b, a1));
            }
        },
        shadowOffset: {
            get: function() {
                return null !== this.P ? this.P.yr : sb;
            },
            set: function(a1) {
                var b = this.shadowOffset;
                b.D(a1) || (a1 = a1.J(), Ro(this), this.P.yr = a1, this.N(), this.g("shadowOffset", b, a1));
            }
        },
        shadowColor: {
            get: function() {
                return null !== this.P ? this.P.xr : "gray";
            },
            set: function(a1) {
                var b = this.shadowColor;
                b !== a1 && (Ro(this), this.P.xr = a1, this.N(), this.g("shadowColor", b, a1));
            }
        },
        shadowBlur: {
            get: function() {
                return null !== this.P ? this.P.Vg : 4;
            },
            set: function(a1) {
                var b = this.shadowBlur;
                b !== a1 && (Ro(this), this.P.Vg = a1, this.N(), this.g("shadowBlur", b, a1));
            }
        }
    });
    U.prototype.invalidateLayout = U.prototype.C;
    U.prototype.findCommonContainingGroup = U.prototype.px;
    U.prototype.isMemberOf = U.prototype.Td;
    U.prototype.findTopLevelPart = U.prototype.sz;
    U.prototype.findSubGraphLevel = U.prototype.oz;
    U.prototype.ensureBounds = U.prototype.Va;
    U.prototype.getDocumentBounds = U.prototype.mi;
    U.prototype.findObject = U.prototype.fb;
    U.prototype.moveTo = U.prototype.moveTo;
    U.prototype.invalidateAdornments = U.prototype.Xb;
    U.prototype.clearAdornments = U.prototype.Dj;
    U.prototype.removeAdornment = U.prototype.Jf;
    U.prototype.addAdornment = U.prototype.bh;
    U.prototype.findAdornment = U.prototype.Oj;
    U.prototype.updateTargetBindings = U.prototype.La;
    var bp = !1;
    U.className = "Part";
    U.LayoutNone = 0;
    U.LayoutAdded = 1;
    U.LayoutRemoved = 2;
    U.LayoutShown = 4;
    U.LayoutHidden = 8;
    U.LayoutNodeSized = 16;
    U.LayoutGroupLayout = 32;
    U.LayoutNodeReplaced = 64;
    U.LayoutStandard = 127;
    U.LayoutAll = 16777215;
    function te(a1, b) {
        void 0 === a1 || a1 instanceof Zl || "string" === typeof a1 ? U.call(this, a1) : (U.call(this), a1 && (b = a1));
        this.G &= -257;
        this.Jg = "Adornment";
        this.ue = null;
        this.Aw = 0;
        this.Uw = !1;
        this.j = this.$a = null;
        b && Object.assign(this, b);
    }
    la(te, U);
    te.prototype.toString = function() {
        var a1 = this.adornedPart;
        return "Adornment(" + this.category + ")" + (null !== a1 ? a1.toString() : "");
    };
    te.prototype.updateRelationshipsFromData = function() {};
    te.prototype.Tl = function(a1) {
        var b = this.adornedObject, c = null === b || void 0 === b ? void 0 : b.part;
        if (c instanceof T && b instanceof Bf) {
            b = c.path;
            c.Tl(a1);
            a1 = b.geometry;
            c = this.O.s;
            b = c.length;
            for(var d = 0; d < b; d++){
                var e = c[d];
                e.isPanelMain && e instanceof Bf && (e.ua = a1);
            }
        }
    };
    te.prototype.si = function() {
        var a1 = this.ue;
        if (null === a1) return !0;
        a1 = a1.part;
        return null === a1 || !vj(a1);
    };
    te.prototype.Zc = function() {
        return !1;
    };
    te.prototype.fk = function(a1, b, c, d, e, f, g) {
        if (a1 === ee && "elements" === b) {
            if (e instanceof ig) null === this.$a && (this.$a = e);
            else if (e instanceof W) {
                var h = e.Ml(function(a1) {
                    return a1 instanceof ig;
                });
                h instanceof ig && null === this.$a && (this.$a = h);
            }
        } else a1 === fe && "elements" === b && null !== this.$a && (d === this.$a ? this.$a = null : d instanceof W && this.$a.rg(d) && (this.$a = null));
        U.prototype.fk.call(this, a1, b, c, d, e, f, g);
    };
    te.prototype.updateAdornments = function() {};
    te.prototype.Kj = function() {};
    ma.Object.defineProperties(te.prototype, {
        placeholder: {
            get: function() {
                return this.$a;
            }
        },
        adornedObject: {
            get: function() {
                return this.ue;
            },
            set: function(a1) {
                var b = this.adornedPart, c = null;
                null !== a1 && (c = a1.part);
                null === b || null !== a1 && b === c || b.Jf(this.category);
                this.ue = a1;
                null !== c && c.bh(this.category, this);
            }
        },
        adornedPart: {
            get: function() {
                var a1 = this.ue;
                return null !== a1 ? a1.part : null;
            }
        },
        containingGroup: {
            get: function() {
                return null;
            }
        }
    });
    te.className = "Adornment";
    function kp() {
        this.oc = !1;
        this.Ur = this.gj = this.Dq = this.Cq = null;
        this.xp = mc;
        this.dr = lp;
        this.Jr = this.ij = this.Mq = this.Lq = null;
    }
    kp.prototype.copy = function() {
        var a1 = new kp;
        a1.Cq = this.Cq;
        a1.Dq = this.Dq;
        a1.gj = this.gj;
        a1.Ur = this.Ur;
        a1.xp = this.xp.J();
        a1.dr = this.dr;
        a1.Lq = this.Lq;
        a1.Mq = this.Mq;
        a1.ij = this.ij;
        a1.Jr = this.Jr;
        return a1;
    };
    function V(a1, b) {
        void 0 === a1 || a1 instanceof Zl || "string" === typeof a1 ? U.call(this, a1) : (U.call(this), a1 && (b = a1));
        this.U = 13;
        this.Ba = null;
        this.jb = new F;
        this.wc = this.af = this.Xk = null;
        this.ci = !1;
        b && Object.assign(this, b);
    }
    la(V, U);
    V.prototype.cloneProtected = function(a1) {
        U.prototype.cloneProtected.call(this, a1);
        a1.U = this.U;
        null !== this.Ba && (a1.Ba = this.Ba.oc ? this.Ba : this.Ba.copy());
    };
    t = V.prototype;
    t.Af = function(a1) {
        U.prototype.Af.call(this, a1);
        a1.Bd();
        a1.af = this.af;
        a1.wc = null;
    };
    function mp(a1) {
        null === a1.Ba ? a1.Ba = new kp : a1.Ba.oc && (a1.Ba = a1.Ba.copy());
    }
    t.th = function() {
        U.prototype.th.call(this);
        null !== this.Ba && (this.Ba.oc = !0);
    };
    function np(a1, b) {
        null !== b && (null === a1.af && (a1.af = new H), a1.af.add(b));
    }
    function op(a1, b, c, d) {
        if (null === b || null === a1.af) return null;
        for(var e = a1.af.iterator; e.next();){
            var f = e.value;
            if (f.Cs === a1 && f.cv === b && f.Ox === c && f.Px === d || f.Cs === b && f.cv === a1 && f.Ox === d && f.Px === c) return f;
        }
        return null;
    }
    t.Lz = function(a1, b, c) {
        if (void 0 === b || null === b) b = "";
        if (void 0 === c || null === c) c = "";
        a1 = op(this, a1, b, c);
        null !== a1 && a1.Rl();
    };
    t.fk = function(a1, b, c, d, e, f, g) {
        a1 === ee && "elements" === b ? this.wc = null : a1 === fe && "elements" === b && (this.wc = null);
        U.prototype.fk.call(this, a1, b, c, d, e, f, g);
    };
    t.Bd = function(a1) {
        for(var b = this.linksConnected; b.next();){
            var c = b.value;
            void 0 !== a1 && a1.contains(c) || (pp(c.fromPort), pp(c.toPort), c.bb());
        }
    };
    function ol(a1, b) {
        for(a1 = a1.linksConnected; a1.next();){
            var c = a1.value;
            if (c.fromPort === b || c.toPort === b) pp(c.fromPort), pp(c.toPort), c.bb();
        }
    }
    function pp(a1) {
        if (null !== a1) {
            var b = a1.Yn;
            null !== b && b.Rl();
            a1 = a1.part;
            b = a1.containingGroup;
            null === b || a1.isVisible() || pp(b.port);
        }
    }
    t.si = function() {
        return !0;
    };
    V.prototype.getAvoidableRect = function(a1) {
        a1.set(this.actualBounds);
        a1.Bo(this.avoidableMargin);
        return a1;
    };
    V.prototype.findVisibleNode = function() {
        for(var a1 = this; null !== a1 && !a1.isVisible();)a1 = a1.containingGroup;
        return a1;
    };
    V.prototype.isVisible = function() {
        if (!U.prototype.isVisible.call(this)) return !1;
        var a1 = !0, b = yi, c = this.diagram;
        null !== c && (a1 = c.isTreePathToChildren, b = c.treeCollapsePolicy);
        if (b === yi) {
            if (a1 = this.pg(), null !== a1 && !a1.isTreeExpanded) return !1;
        } else if (b === Ik) {
            if (a1 = a1 ? this.No() : this.Oo(), 0 < a1.count && a1.all(function(a1) {
                return !a1.isTreeExpanded;
            })) return !1;
        } else if (b === Jk && (a1 = a1 ? this.No() : this.Oo(), 0 < a1.count && a1.any(function(a1) {
            return !a1.isTreeExpanded;
        }))) return !1;
        a1 = this.labeledLink;
        return null !== a1 ? a1.isVisible() : !0;
    };
    V.prototype.$b = function(a1) {
        U.prototype.$b.call(this, a1);
        for(var b = this.linksConnected; b.next();){
            var c = b.value;
            if (a1 && null !== this.containingGroup) {
                var d = c.So(this);
                null === d || d.Td(this.containingGroup) || c.bb();
            }
            c.$b(a1);
        }
    };
    V.prototype.qx = function() {
        var a1 = new H, b = new H;
        qp(this, this, a1, b);
        return b.iterator;
    };
    function qp(a1, b, c, d) {
        if (null !== b && !c.has(b)) {
            c.add(b);
            var e = !0, f = a1.diagram;
            null !== f && (e = f.isTreePathToChildren);
            b.linksConnected.each(function(f) {
                f.isTreeLink ? (e ? f.fromNode === b : f.toNode === b) && qp(a1, e ? f.toNode : f.fromNode, c, d) : d.add(f);
            });
        }
    }
    V.prototype.findLinksConnected = function(a1) {
        void 0 === a1 && (a1 = null);
        if (null === a1) return this.jb.iterator;
        var b = new $a(this.jb), c = this;
        b.predicate = function(b) {
            return b.fromNode === c && b.fromPortId === a1 || b.toNode === c && b.toPortId === a1;
        };
        return b;
    };
    t = V.prototype;
    t.Lo = function(a1) {
        void 0 === a1 && (a1 = null);
        var b = new $a(this.jb), c = this;
        b.predicate = function(b) {
            return b.fromNode !== c ? !1 : null === a1 ? !0 : b.fromPortId === a1;
        };
        return b;
    };
    t.Sd = function(a1) {
        void 0 === a1 && (a1 = null);
        var b = new $a(this.jb), c = this;
        b.predicate = function(b) {
            return b.toNode !== c ? !1 : null === a1 ? !0 : b.toPortId === a1;
        };
        return b;
    };
    t.Mu = function(a1) {
        void 0 === a1 && (a1 = null);
        for(var b = null, c = null, d = this.jb.iterator; d.next();){
            var e = d.value;
            if (e.fromNode === this) {
                if (null === a1 || e.fromPortId === a1) e = e.toNode, null !== b ? b.add(e) : null !== c && c !== e ? (b = new H, b.add(c), b.add(e)) : c = e;
            } else e.toNode !== this || null !== a1 && e.toPortId !== a1 || (e = e.fromNode, null !== b ? b.add(e) : null !== c && c !== e ? (b = new H, b.add(c), b.add(e)) : c = e);
        }
        return null !== b ? b.iterator : null !== c ? new Za(c) : Ya;
    };
    t.Oo = function(a1) {
        void 0 === a1 && (a1 = null);
        for(var b = null, c = null, d = this.jb.iterator; d.next();){
            var e = d.value;
            e.fromNode !== this || null !== a1 && e.fromPortId !== a1 || (e = e.toNode, null !== b ? b.add(e) : null !== c && c !== e ? (b = new H, b.add(c), b.add(e)) : c = e);
        }
        return null !== b ? b.iterator : null !== c ? new Za(c) : Ya;
    };
    t.No = function(a1) {
        void 0 === a1 && (a1 = null);
        for(var b = null, c = null, d = this.jb.iterator; d.next();){
            var e = d.value;
            e.toNode !== this || null !== a1 && e.toPortId !== a1 || (e = e.fromNode, null !== b ? b.add(e) : null !== c && c !== e ? (b = new H, b.add(c), b.add(e)) : c = e);
        }
        return null !== b ? b.iterator : null !== c ? new Za(c) : Ya;
    };
    t.jz = function(a1, b, c) {
        void 0 === b && (b = null);
        void 0 === c && (c = null);
        var d = new $a(this.jb), e = this;
        d.predicate = function(d) {
            return (d.fromNode !== e || d.toNode !== a1 || null !== b && d.fromPortId !== b || null !== c && d.toPortId !== c) && (d.fromNode !== a1 || d.toNode !== e || null !== c && d.fromPortId !== c || null !== b && d.toPortId !== b) ? !1 : !0;
        };
        return d;
    };
    t.kz = function(a1, b, c) {
        void 0 === b && (b = null);
        void 0 === c && (c = null);
        var d = new $a(this.jb), e = this;
        d.predicate = function(d) {
            return d.fromNode !== e || d.toNode !== a1 || null !== b && d.fromPortId !== b || null !== c && d.toPortId !== c ? !1 : !0;
        };
        return d;
    };
    function rp(a1, b, c) {
        pp(c);
        var d = a1.jb.contains(b);
        d || a1.jb.add(b);
        if (!d || b.fromNode === b.toNode) {
            var e = a1.linkConnected;
            if (null !== e) {
                var f = !0, g = a1.diagram;
                null !== g && (f = g.aa, g.aa = !0);
                e(a1, b, c);
                null !== g && (g.aa = f);
            }
        }
        !d && b.isTreeLink && (c = b.fromNode, b = b.toNode, null !== c && null !== b && c !== b && (d = !0, a1 = a1.diagram, null !== a1 && (d = a1.isTreePathToChildren), e = d ? b : c, f = d ? c : b, e.ci || (e.ci = f), !f.isTreeLeaf || null !== a1 && a1.undoManager.isUndoingRedoing || (d ? c === f && (f.isTreeLeaf = !1) : b === f && (f.isTreeLeaf = !1))));
    }
    function sp(a1, b, c) {
        pp(c);
        var d = a1.jb.remove(b), e = null;
        if (d || b.toNode === b.fromNode) {
            var f = a1.linkDisconnected;
            e = a1.diagram;
            if (null !== f) {
                var g = !0;
                null !== e && (g = e.aa, e.aa = !0);
                f(a1, b, c);
                null !== e && (e.aa = g);
            }
        }
        d && b.isTreeLink && (c = !0, null !== e && (c = e.isTreePathToChildren), a1 = c ? b.toNode : b.fromNode, b = c ? b.fromNode : b.toNode, null !== a1 && (a1.ci = !1), null === b || b.isTreeLeaf || (0 === b.jb.count ? (b.ci = null, null !== e && e.undoManager.isUndoingRedoing || (b.isTreeLeaf = !0)) : Hk(b)));
    }
    function Hk(a1) {
        a1.ci = !1;
        if (0 !== a1.jb.count) {
            var b = !0, c = a1.diagram;
            if (null === c || !c.undoManager.isUndoingRedoing) {
                null !== c && (b = c.isTreePathToChildren);
                for(c = a1.jb.iterator; c.next();){
                    var d = c.value;
                    if (d.isTreeLink) {
                        if (b) {
                            if (d.fromNode === a1) {
                                a1.isTreeLeaf = !1;
                                return;
                            }
                        } else if (d.toNode === a1) {
                            a1.isTreeLeaf = !1;
                            return;
                        }
                    }
                }
                a1.isTreeLeaf = !0;
            }
        }
    }
    V.prototype.updateRelationshipsFromData = function() {
        var a1 = this.diagram;
        null !== a1 && a1.partManager.updateRelationshipsFromData(this);
    };
    t = V.prototype;
    t.Uo = function(a1) {
        U.prototype.Uo.call(this, a1);
        a1 || (Hk(this), a1 = this.Xk, null !== a1 && tp(a1, this));
    };
    t.Vo = function(a1) {
        U.prototype.Vo.call(this, a1);
        a1 || (a1 = this.Xk, null !== a1 && null !== a1.wd && (a1.wd.remove(this), a1.v()));
    };
    t.Kj = function() {
        if (0 < this.jb.count) {
            var a1 = this.diagram;
            if (null !== a1) for(var b = null !== a1.commandHandler ? a1.commandHandler.deletesConnectedLinks : !0, c = this.jb.copy().iterator; c.next();){
                var d = c.value;
                b ? a1.remove(d) : (d.fromNode === this && (d.fromNode = null), d.toNode === this && (d.toNode = null));
            }
        }
        this.labeledLink = null;
        U.prototype.Kj.call(this);
    };
    t.ms = function(a1) {
        if (null === this.wc) {
            if ("" === a1 && !1 === this.Te) return this;
            up(this);
        }
        var b = this.wc.I(a1);
        return null !== b || "" !== a1 && (b = this.wc.I(""), null !== b) ? b : this;
    };
    function up(a1) {
        null === a1.wc ? a1.wc = new ob : a1.wc.clear();
        a1.pm(a1, function(a1, c) {
            em(a1, c);
        });
        0 === a1.wc.count && a1.wc.add("", a1);
    }
    function em(a1, b) {
        var c = b.portId;
        null !== c && null !== a1.wc && a1.wc.add(c, b);
    }
    function dm(a1, b, c) {
        var d = b.portId;
        if (null !== d && (null !== a1.wc && a1.wc.remove(d), b = a1.diagram, null !== b && c)) {
            c = null;
            for(a1 = a1.findLinksConnected(d); a1.next();)d = a1.value, null === c && (c = Ea()), c.push(d);
            if (null !== c) {
                for(a1 = 0; a1 < c.length; a1++)b.remove(c[a1]);
                Ga(c);
            }
        }
    }
    t.Nz = function(a1) {
        if (null === a1 || a1 === this) return !1;
        var b = !0, c = this.diagram;
        null !== c && (b = c.isTreePathToChildren);
        c = this;
        if (b) for(; c !== a1;){
            b = null;
            for(var d = c.jb.iterator; d.next();){
                var e = d.value;
                if (e.isTreeLink && (b = e.fromNode, b !== c && b !== this)) break;
            }
            if (b === this || null === b || b === c) return !1;
            c = b;
        }
        else for(; c !== a1;){
            b = null;
            for(d = c.jb.iterator; d.next() && (e = d.value, !e.isTreeLink || (b = e.toNode, b === c || b === this)););
            if (b === this || null === b || b === c) return !1;
            c = b;
        }
        return !0;
    };
    t.xz = function() {
        var a1 = !0, b = this.diagram;
        null !== b && (a1 = b.isTreePathToChildren);
        b = this;
        if (a1) for(;;){
            a1 = null;
            for(var c = b.jb.iterator; c.next();){
                var d = c.value;
                if (d.isTreeLink && (a1 = d.fromNode, a1 !== b && a1 !== this)) break;
            }
            if (a1 === this) return this;
            if (null === a1 || a1 === b) return b;
            b = a1;
        }
        else for(;;){
            a1 = null;
            for(c = b.jb.iterator; c.next() && (d = c.value, !d.isTreeLink || (a1 = d.toNode, a1 === b || a1 === this)););
            if (a1 === this) return this;
            if (null === a1 || a1 === b) return b;
            b = a1;
        }
    };
    t.gz = function(a1) {
        if (null === a1) return null;
        if (this === a1) return this;
        for(var b = this; null !== b;)cp(b, !0), b = b.pg();
        var c = null;
        for(b = a1; null !== b;){
            if (0 !== (b.G & 1048576)) {
                c = b;
                break;
            }
            b = b.pg();
        }
        for(b = this; null !== b;)cp(b, !1), b = b.pg();
        return c;
    };
    t.kh = function() {
        var a1 = !0, b = this.diagram;
        null !== b && (a1 = b.isTreePathToChildren);
        b = this.jb.iterator;
        if (a1) for(; b.next();){
            if (a1 = b.value, a1.isTreeLink && a1.fromNode !== this) return a1;
        }
        else for(; b.next();)if (a1 = b.value, a1.isTreeLink && a1.toNode !== this) return a1;
        return null;
    };
    t.pg = function() {
        var a1 = this.ci;
        if (null === a1) return null;
        if (a1 instanceof V) return a1;
        a1 = this.diagram;
        a1 = null !== a1 ? a1.isTreePathToChildren : !0;
        for(var b = this.jb.iterator; b.next();){
            var c = b.value;
            if (c.isTreeLink && (c = a1 ? c.fromNode : c.toNode, c !== this)) return this.ci = c;
        }
        return this.ci = null;
    };
    t.vz = function() {
        function a1(b, d) {
            d.add(b);
            var c = b.kh();
            null !== c && (d.add(c), b = b.pg(), null !== b && a1(b, d));
        }
        var b = new H;
        a1(this, b);
        return b;
    };
    t.uz = function() {
        return vp(this, this);
    };
    function vp(a1, b) {
        b = b.pg();
        return null === b ? 0 : 1 + vp(a1, b);
    }
    t.Po = function() {
        var a1 = !0, b = this.diagram;
        null !== b && (a1 = b.isTreePathToChildren);
        b = new $a(this.jb);
        var c = this;
        b.predicate = a1 ? function(a1) {
            return a1.isTreeLink && a1.fromNode === c ? !0 : !1;
        } : function(a1) {
            return a1.isTreeLink && a1.toNode === c ? !0 : !1;
        };
        return b;
    };
    t.Ou = function() {
        var a1 = !0, b = this.diagram;
        null !== b && (a1 = b.isTreePathToChildren);
        var c = b = null, d = this.jb.iterator;
        if (a1) for(; d.next();)a1 = d.value, a1.isTreeLink && a1.fromNode === this && (a1 = a1.toNode, null !== b ? b.add(a1) : null !== c && c !== a1 ? (b = new F, b.add(c), b.add(a1)) : c = a1);
        else for(; d.next();)a1 = d.value, a1.isTreeLink && a1.toNode === this && (a1 = a1.fromNode, null !== b ? b.add(a1) : null !== c && c !== a1 ? (b = new F, b.add(c), b.add(a1)) : c = a1);
        return null !== b ? b.iterator : null !== c ? new Za(c) : Ya;
    };
    t.wz = function(a1) {
        void 0 === a1 && (a1 = Infinity);
        var b = new H;
        Tk(b, this, !1, a1, !0);
        return b;
    };
    V.prototype.collapseTree = function(a1) {
        void 0 === a1 && (a1 = 1);
        1 > a1 && (a1 = 1);
        var b = this.diagram;
        if (null !== b && !b.Ue) {
            b.Ue = !0;
            var c = new H;
            c.add(this);
            wp(this, c, b.isTreePathToChildren, a1, b, this, b.treeCollapsePolicy === yi);
            b.Ue = !1;
        }
    };
    function wp(a1, b, c, d, e, f, g) {
        if (1 < d) for(var h = c ? a1.Lo() : a1.Sd(); h.next();){
            var k = h.value;
            k.isTreeLink && (k = k.So(a1), null === k || k === a1 || b.contains(k) || (b.add(k), wp(k, b, c, d - 1, e, f, g)));
        }
        else xp(a1, b, c, e, f, g);
    }
    function xp(a1, b, c, d, e, f) {
        for(var g = e === a1 ? !0 : a1.isTreeExpanded, h = c ? a1.Lo() : a1.Sd(), k = {}; h.next();){
            var l = h.value;
            if (l.isTreeLink && (l = l.So(a1), null !== l && l !== a1)) {
                var m = b.contains(l);
                m || b.add(l);
                if (g) {
                    var n = c ? l.No() : l.Oo();
                    k.uv = a1;
                    n.all(function(a1) {
                        return function(b) {
                            return b === a1.uv || !b.isTreeExpanded;
                        };
                    }(k)) && d.Aj(l, e);
                    l.oh();
                    l.$b(!1);
                }
                l.isTreeExpanded && (l.wasTreeExpanded = l.isTreeExpanded, m || xp(l, b, c, d, e, f));
            }
            k = {
                uv: k.uv
            };
        }
        a1.isTreeExpanded = !1;
    }
    V.prototype.expandTree = function(a1) {
        void 0 === a1 && (a1 = 2);
        2 > a1 && (a1 = 2);
        var b = this.diagram;
        if (null !== b && !b.Ue) {
            b.Ue = !0;
            var c = new H;
            c.add(this);
            yp(this, c, b.isTreePathToChildren, a1, b, this, b.treeCollapsePolicy === yi);
            b.Ue = !1;
        }
    };
    function yp(a1, b, c, d, e, f, g) {
        for(var h = f === a1 ? !1 : a1.isTreeExpanded, k = c ? a1.Lo() : a1.Sd(), l = {}; k.next();){
            var m = k.value;
            if (m.isTreeLink && (h || m.fd || m.bb(), m = m.So(a1), null !== m && m !== a1 && !b.contains(m))) {
                b.add(m);
                if (!h) {
                    m.$b(!0);
                    m.oh();
                    var n = c ? m.No() : m.Oo();
                    l.vv = a1;
                    n.all(function(a1) {
                        return function(b) {
                            return b === a1.vv || !b.isTreeExpanded;
                        };
                    }(l)) && e.Cj(m, f);
                }
                if (2 < d || m.wasTreeExpanded) m.wasTreeExpanded = !1, yp(m, b, c, d - 1, e, f, g);
            }
            l = {
                vv: l.vv
            };
        }
        a1.isTreeExpanded = !0;
    }
    ma.Object.defineProperties(V.prototype, {
        portSpreading: {
            get: function() {
                return null !== this.Ba ? this.Ba.dr : lp;
            },
            set: function(a1) {
                var b = this.portSpreading;
                b !== a1 && (mp(this), this.Ba.dr = a1, this.g("portSpreading", b, a1), a1 = this.diagram, null !== a1 && a1.undoManager.isUndoingRedoing || this.Bd());
            }
        },
        avoidable: {
            get: function() {
                return 0 !== (this.U & 8);
            },
            set: function(a1) {
                var b = 0 !== (this.U & 8);
                if (b !== a1) {
                    this.U ^= 8;
                    var c = this.diagram;
                    null !== c && Ck(c, this);
                    this.g("avoidable", b, a1);
                }
            }
        },
        avoidableMargin: {
            get: function() {
                return null !== this.Ba ? this.Ba.xp : mc;
            },
            set: function(a1) {
                "number" === typeof a1 && (a1 = new dc(a1));
                var b = this.avoidableMargin;
                if (!b.D(a1)) {
                    a1 = a1.J();
                    mp(this);
                    this.Ba.xp = a1;
                    var c = this.diagram;
                    null !== c && Ck(c, this);
                    this.g("avoidableMargin", b, a1);
                }
            }
        },
        linksConnected: {
            get: function() {
                return this.jb.iterator;
            }
        },
        linkConnected: {
            get: function() {
                return null !== this.Ba ? this.Ba.Cq : null;
            },
            set: function(a1) {
                var b = this.linkConnected;
                b !== a1 && (mp(this), this.Ba.Cq = a1, this.g("linkConnected", b, a1));
            }
        },
        linkDisconnected: {
            get: function() {
                return null !== this.Ba ? this.Ba.Dq : null;
            },
            set: function(a1) {
                var b = this.linkDisconnected;
                b !== a1 && (mp(this), this.Ba.Dq = a1, this.g("linkDisconnected", b, a1));
            }
        },
        linkValidation: {
            get: function() {
                return null !== this.Ba ? this.Ba.gj : null;
            },
            set: function(a1) {
                var b = this.linkValidation;
                b !== a1 && (mp(this), this.Ba.gj = a1, this.g("linkValidation", b, a1));
            }
        },
        isLinkLabel: {
            get: function() {
                return null !== this.Xk;
            }
        },
        labeledLink: {
            get: function() {
                return this.Xk;
            },
            set: function(a1) {
                var b = this.Xk;
                if (b !== a1) {
                    var c = this.diagram, d = this.data;
                    if (null !== b) {
                        null !== b.wd && (b.wd.remove(this), b.v());
                        if (null !== c && null !== d && !c.undoManager.isUndoingRedoing) {
                            var e = b.data, f = c.model;
                            if (null !== e && f.ri()) {
                                var g = f.wa(d);
                                void 0 !== g && f.Qx(e, g);
                            }
                        }
                        this.containingGroup = null;
                    }
                    this.Xk = a1;
                    null !== a1 && (tp(a1, this), null === c || null === d || c.undoManager.isUndoingRedoing || (e = a1.data, c = c.model, null !== e && c.ri() && (d = c.wa(d), void 0 !== d && c.Au(e, d))), this.containingGroup = a1.containingGroup);
                    Nl(this);
                    this.g("labeledLink", b, a1);
                }
            }
        },
        port: {
            get: function() {
                return this.ms("");
            }
        },
        ports: {
            get: function() {
                null === this.wc && up(this);
                return this.wc.iteratorValues;
            }
        },
        isTreeExpanded: {
            get: function() {
                return 0 !== (this.U & 1);
            },
            set: function(a1) {
                var b = 0 !== (this.U & 1);
                if (b !== a1) {
                    this.U ^= 1;
                    var c = this.diagram;
                    this.g("isTreeExpanded", b, a1);
                    b = this.treeExpandedChanged;
                    if (null !== b) {
                        var d = !0;
                        null !== c && (d = c.aa, c.aa = !0);
                        b(this);
                        null !== c && (c.aa = d);
                    }
                    null !== c && c.undoManager.isUndoingRedoing ? this.$b(a1) : a1 ? this.expandTree() : this.collapseTree();
                }
            }
        },
        wasTreeExpanded: {
            get: function() {
                return 0 !== (this.U & 2);
            },
            set: function(a1) {
                var b = 0 !== (this.U & 2);
                b !== a1 && (this.U ^= 2, this.g("wasTreeExpanded", b, a1));
            }
        },
        treeExpandedChanged: {
            get: function() {
                return null !== this.Ba ? this.Ba.Ur : null;
            },
            set: function(a1) {
                var b = this.treeExpandedChanged;
                b !== a1 && (mp(this), this.Ba.Ur = a1, this.g("treeExpandedChanged", b, a1));
            }
        },
        isTreeLeaf: {
            get: function() {
                return 0 !== (this.U & 4);
            },
            set: function(a1) {
                var b = 0 !== (this.U & 4);
                b !== a1 && (this.U ^= 4, this.g("isTreeLeaf", b, a1));
            }
        }
    });
    V.prototype.expandTree = V.prototype.expandTree;
    V.prototype.collapseTree = V.prototype.collapseTree;
    V.prototype.findTreeParts = V.prototype.wz;
    V.prototype.findTreeChildrenNodes = V.prototype.Ou;
    V.prototype.findTreeChildrenLinks = V.prototype.Po;
    V.prototype.findTreeLevel = V.prototype.uz;
    V.prototype.findTreeParentChain = V.prototype.vz;
    V.prototype.findTreeParentNode = V.prototype.pg;
    V.prototype.findTreeParentLink = V.prototype.kh;
    V.prototype.findCommonTreeParent = V.prototype.gz;
    V.prototype.findTreeRoot = V.prototype.xz;
    V.prototype.isInTreeOf = V.prototype.Nz;
    V.prototype.findPort = V.prototype.ms;
    V.prototype.findLinksTo = V.prototype.kz;
    V.prototype.findLinksBetween = V.prototype.jz;
    V.prototype.findNodesInto = V.prototype.No;
    V.prototype.findNodesOutOf = V.prototype.Oo;
    V.prototype.findNodesConnected = V.prototype.Mu;
    V.prototype.findLinksInto = V.prototype.Sd;
    V.prototype.findLinksOutOf = V.prototype.Lo;
    V.prototype.findExternalTreeLinksConnected = V.prototype.qx;
    V.prototype.invalidateConnectedLinks = V.prototype.Bd;
    V.prototype.invalidateLinkBundle = V.prototype.Lz;
    var zp = new E(V, "SpreadingNone", 10), lp = new E(V, "SpreadingEvenly", 11), Ap = new E(V, "SpreadingPacked", 12);
    V.className = "Node";
    V.SpreadingNone = zp;
    V.SpreadingEvenly = lp;
    V.SpreadingPacked = Ap;
    function pf(a1, b) {
        void 0 === a1 || a1 instanceof Zl || "string" === typeof a1 ? V.call(this, a1) : (V.call(this), a1 && (b = a1));
        this.U |= 4608;
        this.Fn = new H;
        this.$a = null;
        this.Sc = new ti;
        this.Sc.group = this;
        this.fl = new H;
        this.tb = this.Zp = null;
        b && Object.assign(this, b);
    }
    la(pf, V);
    pf.prototype.cloneProtected = function(a1) {
        V.prototype.cloneProtected.call(this, a1);
        this.U = this.U & -32769;
        var b = a1.Ml(function(a1) {
            return a1 instanceof ig;
        });
        b instanceof ig ? a1.$a = b : a1.$a = null;
        null !== this.Sc ? (a1.Sc = this.Sc.copy(), a1.Sc.group = a1) : (null !== a1.Sc && (a1.Sc.group = null), a1.Sc = null);
        null !== this.tb && (a1.tb = this.tb.copy());
    };
    t = pf.prototype;
    t.Af = function(a1) {
        V.prototype.Af.call(this, a1);
        var b = a1.Qj();
        for(a1 = a1.memberParts; a1.next();){
            var c = a1.value;
            c.v();
            c.C(8);
            c.Dj();
            if (c instanceof V) c.Bd(b);
            else if (c instanceof T) for(c = c.labelNodes; c.next();)c.value.Bd(b);
        }
    };
    t.fk = function(a1, b, c, d, e, f, g) {
        if (a1 === ee && "elements" === b) {
            if (e instanceof ig) null === this.$a ? this.$a = e : this.$a !== e && C("Cannot insert a second Placeholder into the visual tree of a Group.");
            else if (e instanceof W) {
                var h = e.Ml(function(a1) {
                    return a1 instanceof ig;
                });
                h instanceof ig && (null === this.$a ? this.$a = h : this.$a !== h && C("Cannot insert a second Placeholder into the visual tree of a Group."));
            }
        } else a1 === fe && "elements" === b && null !== this.$a && (d === this.$a ? this.$a = null : d instanceof W && this.$a.rg(d) && (this.$a = null));
        V.prototype.fk.call(this, a1, b, c, d, e, f, g);
    };
    t.Wl = function(a1, b) {
        V.prototype.Wl.call(this, a1, b);
        this.isClipping && this.type !== W.Spot && this.isSubGraphExpanded && (a1 = this.resizeObject, a1 instanceof W && (a1 = a1.Qb()), null === this.tb && (this.tb = new N), a1.mi(this.tb), a1 instanceof Bf && this.tb.Bc(-a1.strokeWidth, -a1.strokeWidth));
    };
    t.eh = function(a1, b, c, d) {
        this.nf = this.$a;
        V.prototype.eh.call(this, a1, b, c, d);
    };
    t.Va = function() {
        var a1 = this;
        a1.isSubGraphExpanded && this.memberParts.each(function(b) {
            !a1.computesBoundsIncludingLinks && b instanceof T || b.Va();
        });
        V.prototype.Va.call(this);
    };
    t.si = function() {
        if (!V.prototype.si.call(this)) return !1;
        for(var a1 = this.memberParts; a1.next();){
            var b = a1.value;
            if (b instanceof V) {
                if (b.isVisible() && vj(b)) return !1;
            } else if (b instanceof T && b.isVisible() && vj(b) && b.fromNode !== this && b.toNode !== this) return !1;
        }
        return !0;
    };
    function dp(a1, b) {
        if (a1.Fn.add(b)) {
            b instanceof pf && a1.fl.add(b);
            var c = a1.memberAdded;
            if (null !== c) {
                var d = !0, e = a1.diagram;
                null !== e && (d = e.aa, e.aa = !0);
                c(a1, b);
                null !== e && (e.aa = d);
            }
            a1.isVisible() && a1.isSubGraphExpanded || b.$b(!1);
        }
        b instanceof T && !a1.computesBoundsIncludingLinks || (b = a1.$a, null === b && (b = a1), b.v());
    }
    function ep(a1, b) {
        if (a1.Fn.remove(b)) {
            b instanceof pf && a1.fl.remove(b);
            var c = a1.memberRemoved;
            if (null !== c) {
                var d = !0, e = a1.diagram;
                null !== e && (d = e.aa, e.aa = !0);
                c(a1, b);
                null !== e && (e.aa = d);
            }
            a1.isVisible() && a1.isSubGraphExpanded || b.$b(!0);
        }
        b instanceof T && !a1.computesBoundsIncludingLinks || (b = a1.$a, null === b && (b = a1), b.v());
    }
    t.Kj = function() {
        if (0 < this.Fn.count) {
            var a1 = this.diagram;
            if (null !== a1) for(var b = this.Fn.copy().iterator; b.next();)a1.remove(b.value);
        }
        V.prototype.Kj.call(this);
    };
    pf.prototype.canAddMembers = function(a1) {
        var b = this.diagram;
        if (null === b) return !1;
        b = b.commandHandler;
        for(a1 = Vk(a1).iterator; a1.next();)if (!b.isValidMember(this, a1.value)) return !1;
        return !0;
    };
    pf.prototype.addMembers = function(a1, b) {
        var c = this.diagram;
        if (null === c) return !1;
        c = c.commandHandler;
        var d = !0;
        for(a1 = Vk(a1).iterator; a1.next();){
            var e = a1.value;
            !b || c.isValidMember(this, e) ? e.containingGroup = this : d = !1;
        }
        return d;
    };
    pf.prototype.canUngroup = function() {
        if (!this.ungroupable) return !1;
        var a1 = this.layer;
        if (null === a1 || !a1.allowUngroup) return !1;
        a1 = a1.diagram;
        return null === a1 || a1.allowUngroup ? !0 : !1;
    };
    t = pf.prototype;
    t.Bd = function(a1) {
        var b = 0 !== (this.U & 65536);
        V.prototype.Bd.call(this, a1);
        if (!b) for(0 !== (this.U & 65536) !== !0 && (this.U = this.U ^ 65536), b = this.Lu(); b.next();){
            var c = b.value;
            if (void 0 === a1 || !a1.contains(c)) {
                var d = c.fromNode;
                null !== d && d !== this && d.Td(this) && !d.isVisible() ? (pp(c.fromPort), pp(c.toPort), c.bb()) : (d = c.toNode, null !== d && d !== this && d.Td(this) && !d.isVisible() && (pp(c.fromPort), pp(c.toPort), c.bb()));
            }
        }
    };
    t.Lu = function() {
        var a1 = null !== this.diagram && this.diagram.Pw;
        if (a1 && null !== this.Zp) return this.Zp.iterator;
        var b = this.Qj();
        b.add(this);
        for(var c = new H, d = b.iterator; d.next();){
            var e = d.value;
            if (e instanceof V) for(e = e.linksConnected; e.next();){
                var f = e.value;
                b.contains(f) || c.add(f);
            }
        }
        a1 && (this.Zp = c);
        return c.iterator;
    };
    t.iz = function() {
        var a1 = this.Qj();
        a1.add(this);
        for(var b = new H, c = a1.iterator; c.next();){
            var d = c.value;
            if (d instanceof V) for(d = d.linksConnected; d.next();){
                var e = d.value, f = e.fromNode;
                null === f || a1.contains(f) && f !== this || b.add(f);
                e = e.toNode;
                null === e || a1.contains(e) && e !== this || b.add(e);
            }
        }
        return b.iterator;
    };
    t.hz = function() {
        function a1(b, d) {
            null !== b && (d.add(b), a1(b.containingGroup, d));
        }
        var b = new H;
        a1(this, b);
        return b;
    };
    t.Qj = function() {
        var a1 = new H;
        Tk(a1, this, !0, 0, !0);
        a1.remove(this);
        return a1;
    };
    t.$b = function(a1) {
        V.prototype.$b.call(this, a1);
        for(var b = this.memberParts; b.next();)b.value.$b(a1);
    };
    pf.prototype.collapseSubGraph = function() {
        var a1 = this.diagram;
        if (null !== a1 && !a1.Ue) {
            a1.Ue = !0;
            var b = this.Qj();
            Bp(this, b, a1, this);
            a1.Ue = !1;
        }
    };
    function Bp(a1, b, c, d) {
        for(var e = a1.memberParts; e.next();){
            var f = e.value;
            f.$b(!1);
            f instanceof pf && f.isSubGraphExpanded && (f.wasSubGraphExpanded = f.isSubGraphExpanded, Bp(f, b, c, d));
            if (f instanceof V) f.Bd(b), c.Aj(f, d);
            else if (f instanceof T) for(f = f.labelNodes; f.next();)f.value.Bd(b);
        }
        a1.isSubGraphExpanded = !1;
    }
    pf.prototype.expandSubGraph = function() {
        var a1 = this.diagram;
        if (null !== a1 && !a1.Ue) {
            a1.Ue = !0;
            var b = this.Qj();
            Cp(this, b, a1, this);
            a1.Ue = !1;
        }
    };
    function Cp(a1, b, c, d) {
        for(var e = a1.memberParts; e.next();){
            var f = e.value;
            f.$b(!0);
            f instanceof pf && f.wasSubGraphExpanded && (f.wasSubGraphExpanded = !1, Cp(f, b, c, d));
            if (f instanceof V) f.Bd(b), c.Cj(f, d);
            else if (f instanceof T) for(f = f.labelNodes; f.next();)f.value.Bd(b);
        }
        a1.isSubGraphExpanded = !0;
    }
    pf.prototype.move = function(a1, b) {
        void 0 === b && (b = !1);
        var c = b ? this.location : this.position, d = c.x;
        c = c.y;
        var e = a1.x, f = a1.y;
        if (!(d === e || isNaN(d) && isNaN(e)) || !(c === f || isNaN(c) && isNaN(f))) {
            d = e - (isNaN(d) ? 0 : d);
            c = f - (isNaN(c) ? 0 : c);
            f = J.alloc();
            V.prototype.move.call(this, a1, b);
            a1 = new H;
            for(b = this.Qj().iterator; b.next();)if (e = b.value, e instanceof T && (e.suspendsRouting && a1.add(e), e.fd || e.fromNode !== this && e.toNode !== this)) e.suspendsRouting = !0;
            for(b.reset(); b.next();)if (e = b.value, !(e.ph() || e instanceof V && e.isLinkLabel)) {
                var g = e.position, h = e.location;
                g.w() ? (f.x = g.x + d, f.y = g.y + c, e.position = f) : h.w() && (f.x = h.x + d, f.y = h.y + c, e.location = f);
            }
            for(b.reset(); b.next();)if (e = b.value, e instanceof T && (e.suspendsRouting = a1.contains(e), e.fd || e.fromNode !== this && e.toNode !== this)) g = e.position, f.x = g.x + d, f.y = g.y + c, f.w() ? e.move(f) : e.bb();
            J.free(f);
        }
    };
    ma.Object.defineProperties(pf.prototype, {
        placeholder: {
            get: function() {
                return this.$a;
            }
        },
        computesBoundsAfterDrag: {
            get: function() {
                return 0 !== (this.U & 2048);
            },
            set: function(a1) {
                var b = 0 !== (this.U & 2048);
                b !== a1 && (this.U ^= 2048, this.g("computesBoundsAfterDrag", b, a1));
            }
        },
        computesBoundsIncludingLinks: {
            get: function() {
                return 0 !== (this.U & 4096);
            },
            set: function(a1) {
                var b = 0 !== (this.U & 4096);
                b !== a1 && (this.U ^= 4096, this.g("computesBoundsIncludingLinks", b, a1));
            }
        },
        computesBoundsIncludingLocation: {
            get: function() {
                return 0 !== (this.U & 8192);
            },
            set: function(a1) {
                var b = 0 !== (this.U & 8192);
                b !== a1 && (this.U ^= 8192, this.g("computesBoundsIncludingLocation", b, a1));
            }
        },
        handlesDragDropForMembers: {
            get: function() {
                return 0 !== (this.U & 16384);
            },
            set: function(a1) {
                var b = 0 !== (this.U & 16384);
                b !== a1 && (this.U ^= 16384, this.g("handlesDragDropForMembers", b, a1));
            }
        },
        memberParts: {
            get: function() {
                return this.Fn.iterator;
            }
        },
        layout: {
            get: function() {
                return this.Sc;
            },
            set: function(a1) {
                var b = this.Sc;
                if (b !== a1) {
                    null !== a1 && null !== a1.diagram && a1.diagram.layout === a1 && C("A layout cannot be both the Diagram.layout and a Group.layout: " + a1);
                    null !== b && (b.diagram = null, b.group = null);
                    this.Sc = a1;
                    var c = this.diagram;
                    null !== a1 && (a1.diagram = c, a1.group = this);
                    null !== c && (c.xh = !0);
                    this.g("layout", b, a1);
                    null !== c && c.ac();
                }
            }
        },
        memberAdded: {
            get: function() {
                return null !== this.Ba ? this.Ba.Lq : null;
            },
            set: function(a1) {
                var b = this.memberAdded;
                b !== a1 && (mp(this), this.Ba.Lq = a1, this.g("memberAdded", b, a1));
            }
        },
        memberRemoved: {
            get: function() {
                return null !== this.Ba ? this.Ba.Mq : null;
            },
            set: function(a1) {
                var b = this.memberRemoved;
                b !== a1 && (mp(this), this.Ba.Mq = a1, this.g("memberRemoved", b, a1));
            }
        },
        memberValidation: {
            get: function() {
                return null !== this.Ba ? this.Ba.ij : null;
            },
            set: function(a1) {
                var b = this.memberValidation;
                b !== a1 && (mp(this), this.Ba.ij = a1, this.g("memberValidation", b, a1));
            }
        },
        ungroupable: {
            get: function() {
                return 0 !== (this.U & 256);
            },
            set: function(a1) {
                var b = 0 !== (this.U & 256);
                b !== a1 && (this.U ^= 256, this.g("ungroupable", b, a1));
            }
        },
        isSubGraphExpanded: {
            get: function() {
                return 0 !== (this.U & 512);
            },
            set: function(a1) {
                var b = 0 !== (this.U & 512);
                if (b !== a1) {
                    this.U ^= 512;
                    var c = this.diagram;
                    this.g("isSubGraphExpanded", b, a1);
                    b = this.subGraphExpandedChanged;
                    if (null !== b) {
                        var d = !0;
                        null !== c && (d = c.aa, c.aa = !0);
                        b(this);
                        null !== c && (c.aa = d);
                    }
                    null !== c && c.undoManager.isUndoingRedoing ? (null !== this.$a && this.$a.v(), this.memberParts.each(function(a1) {
                        a1.updateAdornments();
                    })) : a1 ? this.expandSubGraph() : this.collapseSubGraph();
                }
            }
        },
        wasSubGraphExpanded: {
            get: function() {
                return 0 !== (this.U & 1024);
            },
            set: function(a1) {
                var b = 0 !== (this.U & 1024);
                b !== a1 && (this.U ^= 1024, this.g("wasSubGraphExpanded", b, a1));
            }
        },
        subGraphExpandedChanged: {
            get: function() {
                return null !== this.Ba ? this.Ba.Jr : null;
            },
            set: function(a1) {
                var b = this.subGraphExpandedChanged;
                b !== a1 && (mp(this), this.Ba.Jr = a1, this.g("subGraphExpandedChanged", b, a1));
            }
        },
        rh: {
            get: function() {
                return 0 !== (this.U & 32768);
            },
            set: function(a1) {
                0 !== (this.U & 32768) !== a1 && (this.U ^= 32768);
            }
        }
    });
    pf.prototype.expandSubGraph = pf.prototype.expandSubGraph;
    pf.prototype.collapseSubGraph = pf.prototype.collapseSubGraph;
    pf.prototype.findSubGraphParts = pf.prototype.Qj;
    pf.prototype.findContainingGroupChain = pf.prototype.hz;
    pf.prototype.findExternalNodesConnected = pf.prototype.iz;
    pf.prototype.findExternalLinksConnected = pf.prototype.Lu;
    pf.prototype.ensureBounds = pf.prototype.Va;
    pf.className = "Group";
    function ig(a1) {
        Y.call(this);
        this.zb = lc;
        this.jo = new N(NaN, NaN, NaN, NaN);
        a1 && Object.assign(this, a1);
    }
    la(ig, Y);
    ig.prototype.cloneProtected = function(a1) {
        Y.prototype.cloneProtected.call(this, a1);
        a1.zb = this.zb.J();
        a1.jo = this.jo.copy();
    };
    ig.prototype.gh = function(a1) {
        if (null === this.background && null === this.areaBackground) return !1;
        var b = this.naturalBounds;
        return Zb(0, 0, b.width, b.height, a1.x, a1.y);
    };
    ig.prototype.Vl = function() {
        var a1 = this.part;
        null !== a1 && (a1 instanceof pf || a1 instanceof te) || C("Placeholder is not inside a Group or Adornment.");
        if (a1 instanceof pf) {
            var b = this.computeBorder(this.jo), c = this.minSize, d = this.ec;
            Pb(d, (isFinite(c.width) ? Math.max(c.width, b.width) : b.width) || 0, (isFinite(c.height) ? Math.max(c.height, b.height) : b.height) || 0);
            this.Ge(0, 0, d.width, d.height);
            d = a1.memberParts;
            for(c = !1; d.next();)if (d.value.isVisible()) {
                c = !0;
                break;
            }
            d = a1.diagram;
            !c || null === d || d.animationManager.Xu(a1) || isNaN(b.x) || isNaN(b.y) || (c = J.alloc(), c.xi(b, a1.locationSpot), c.D(a1.location) || (a1.location = c), J.free(c));
        } else {
            b = this.ec;
            c = this.zb;
            d = c.left + c.right;
            var e = c.top + c.bottom, f = a1.adornedObject;
            a1.angle = f.li();
            var g = 0;
            f instanceof Bf && (g = f.strokeWidth);
            var h = f.Df(), k = f.naturalBounds, l = (k.width + g) * h;
            g = (k.height + g) * h;
            a1.type !== W.Link && (h = f.ga("Selection" === a1.category ? sc : a1.locationSpot, J.alloc()), a1.location = h, J.free(h));
            isNaN(l) || isNaN(g) ? (a1 = f.ga(sc, J.alloc()), l = N.allocAt(a1.x, a1.y, 0, 0), l.Ye(f.ga(Bc, a1)), l.Ye(f.ga(uc, a1)), l.Ye(f.ga(zc, a1)), Pb(b, l.width + d || 0, l.height + e || 0), this.Ge(-c.left, -c.top, b.width, b.height), J.free(a1), N.free(l)) : (Pb(b, l + d || 0, g + e || 0), this.Ge(-c.left, -c.top, b.width, b.height));
        }
    };
    ig.prototype.eh = function(a1, b, c, d) {
        this.actualBounds.h(a1, b, c, d);
    };
    ig.prototype.computeBorder = function(a1) {
        var b = this.part, c = b.diagram, d = null === c || !c.animationManager.isAnimating;
        if (null !== c && b instanceof pf && !b.layer.isTemporary && b.computesBoundsAfterDrag && this.jo.w()) {
            var e = c.toolManager.findTool("Dragging");
            if (e === c.currentTool && (c = e.computeBorder(b, this.jo, a1), null !== c)) return c;
        }
        c = N.alloc();
        e = this.computeMemberBounds(c);
        var f = this.zb;
        b instanceof pf && !b.isSubGraphExpanded ? a1.h(e.x - f.left, e.y - f.top, 0, 0) : a1.h(e.x - f.left, e.y - f.top, Math.max(e.width + f.left + f.right, 0), Math.max(e.height + f.top + f.bottom, 0));
        N.free(c);
        d && b instanceof pf && b.computesBoundsIncludingLocation && b.location.w() && a1.Ye(b.location);
        return a1;
    };
    ig.prototype.computeMemberBounds = function(a1) {
        if (!(this.part instanceof pf)) return a1.h(0, 0, 0, 0), a1;
        for(var b = this.part, c = Infinity, d = Infinity, e = -Infinity, f = -Infinity, g = b.memberParts; g.next();){
            var h = g.value;
            if (h.isVisible()) {
                if (h instanceof T) {
                    if (!b.computesBoundsIncludingLinks) continue;
                    if (uj(h)) continue;
                    if (h.fromNode === b || h.toNode === b) continue;
                }
                h = h.actualBounds;
                h.left < c && (c = h.left);
                h.top < d && (d = h.top);
                h.right > e && (e = h.right);
                h.bottom > f && (f = h.bottom);
            }
        }
        isFinite(c) && isFinite(d) ? a1.h(c, d, e - c, f - d) : (b = b.location, a1.h(b.x, b.y, 0, 0));
        return a1;
    };
    ma.Object.defineProperties(ig.prototype, {
        padding: {
            get: function() {
                return this.zb;
            },
            set: function(a1) {
                "number" === typeof a1 && (a1 = new dc(a1));
                var b = this.zb;
                b.D(a1) || (this.zb = a1 = a1.J(), this.g("padding", b, a1), this.v());
            }
        }
    });
    ig.className = "Placeholder";
    function T(a1) {
        U.call(this, W.Link);
        this.Qa = 8;
        this.ef = null;
        this.ff = "";
        this.uf = this.fn = null;
        this.vf = "";
        this.to = null;
        this.pk = Zf;
        this.Nm = 0;
        this.Pm = Zf;
        this.Qm = NaN;
        this.qj = Dp;
        this.oo = .5;
        this.wd = null;
        this.Ob = (new F).freeze();
        this.Tg = this.Mg = null;
        this.ll = new N;
        this.ua = new P;
        this.u = this.o = this.Sf = this.Wf = null;
        this.ru = new J;
        this.bq = this.Mw = this.Lw = null;
        this.ut = NaN;
        this.ba = null;
        this.j = [];
        a1 && Object.assign(this, a1);
    }
    la(T, U);
    T.prototype.cloneProtected = function(a1) {
        U.prototype.cloneProtected.call(this, a1);
        a1.Qa = this.Qa & -113;
        a1.ff = this.ff;
        a1.fn = this.fn;
        a1.vf = this.vf;
        a1.to = this.to;
        a1.pk = this.pk;
        a1.Nm = this.Nm;
        a1.Pm = this.Pm;
        a1.Qm = this.Qm;
        a1.qj = this.qj;
        a1.oo = this.oo;
        null !== this.ba && (a1.ba = this.ba.copy());
    };
    t = T.prototype;
    t.Af = function(a1) {
        U.prototype.Af.call(this, a1);
        this.ff = a1.ff;
        this.vf = a1.vf;
        a1.Mg = null;
        a1.bb();
        a1.Sf = this.Sf;
        var b = a1.fromPort;
        null !== b && pp(b);
        a1 = a1.toPort;
        null !== a1 && pp(a1);
    };
    t.qb = function(a1) {
        a1.classType === T ? 2 === (a1.value & 2) ? this.routing = a1 : a1 === bg || a1 === Yf || a1 === Xf ? this.curve = a1 : a1 === Ep || a1 === Fp || a1 === Gp ? this.adjusting = a1 : a1 !== Dp && a1 !== Zf && C("Unknown Link enum value for a Link property: " + a1) : U.prototype.qb.call(this, a1);
    };
    t.Xc = function() {
        null === this.ba && (this.ba = new el);
    };
    t.si = function() {
        var a1 = this.fromNode;
        if (null !== a1) {
            var b = a1.findVisibleNode();
            null !== b && (a1 = b);
            if (vj(a1) || wj(a1)) return !1;
        }
        a1 = this.toNode;
        return null !== a1 && (b = a1.findVisibleNode(), null !== b && (a1 = b), vj(a1) || wj(a1)) ? !1 : !0;
    };
    t.zv = function() {
        return !1;
    };
    t.Av = function() {};
    t.Zc = function() {
        return !1;
    };
    T.prototype.computeAngle = function(a1, b, c) {
        return T.computeAngle(b, c);
    };
    T.computeAngle = function(a1, b) {
        switch(a1){
            default:
            case Zf:
                a1 = 0;
                break;
            case jn:
                a1 = b;
                break;
            case an:
                a1 = b + 90;
                break;
            case cn:
                a1 = b - 90;
                break;
            case Hp:
                a1 = b + 180;
                break;
            case kn:
                a1 = K.ap(b);
                90 < a1 && 270 > a1 && (a1 -= 180);
                break;
            case bn:
                a1 = K.ap(b + 90);
                90 < a1 && 270 > a1 && (a1 -= 180);
                break;
            case dn:
                a1 = K.ap(b - 90);
                90 < a1 && 270 > a1 && (a1 -= 180);
                break;
            case en:
                a1 = K.ap(b);
                if (45 < a1 && 135 > a1 || 225 < a1 && 315 > a1) return 0;
                90 < a1 && 270 > a1 && (a1 -= 180);
        }
        return K.ap(a1);
    };
    function jp(a1) {
        var b = a1.fromNode, c = a1.toNode, d = null;
        null !== b ? d = null !== c ? b.px(c) : b.containingGroup : null !== c ? d = c.containingGroup : d = null;
        b = d;
        c = a1.Ah;
        if (c !== b) {
            null !== c && ep(c, a1);
            a1.Ah = b;
            null !== b && dp(b, a1);
            var e = a1.containingGroupChanged;
            if (null !== e) {
                var f = !0, g = a1.diagram;
                null !== g && (f = g.aa, g.aa = !0);
                e(a1, c, b);
                null !== g && (g.aa = f);
            }
            !a1.fd || a1.Lw !== c && a1.Mw !== c || a1.bb();
        }
        if (a1.isLabeledLink) for(a1 = a1.labelNodes; a1.next();)a1.value.containingGroup = d;
    }
    t = T.prototype;
    t.oh = function() {
        var a1 = this.containingGroup;
        null !== a1 && this.fromNode !== a1 && this.toNode !== a1 && a1.computesBoundsIncludingLinks && U.prototype.oh.call(this);
    };
    t.So = function(a1) {
        var b = this.fromNode;
        return a1 === b ? this.toNode : b;
    };
    t.Cz = function(a1) {
        var b = this.fromPort;
        return a1 === b ? this.toPort : b;
    };
    function tp(a1, b) {
        null === a1.wd && (a1.wd = new H);
        a1.wd.add(b);
        a1.v();
    }
    t.Uo = function(a1) {
        U.prototype.Uo.call(this, a1);
        Ip(this) && this.Wo(this.actualBounds);
        if (!a1) {
            a1 = this.ef;
            var b = null;
            null !== a1 && (b = this.fromPort, rp(a1, this, b));
            var c = this.uf;
            if (null !== c) {
                var d = this.toPort;
                c === a1 && d === b || rp(c, this, d);
            }
            Jp(this);
        }
    };
    t.Vo = function(a1) {
        U.prototype.Vo.call(this, a1);
        Ip(this) && this.Wo(this.actualBounds);
        if (!a1) {
            a1 = this.ef;
            var b = null;
            null !== a1 && (b = this.fromPort, sp(a1, this, b));
            var c = this.uf;
            if (null !== c) {
                var d = this.toPort;
                c === a1 && d === b || sp(c, this, d);
            }
            Kp(this);
        }
    };
    t.Kj = function() {
        this.fd = !0;
        if (null !== this.wd) {
            var a1 = this.diagram;
            if (null !== a1) for(var b = this.wd.copy().iterator; b.next();)a1.remove(b.value);
        }
        null !== this.data && (a1 = this.diagram, null !== a1 && a1.partManager.removeDataForLink(this));
    };
    T.prototype.updateRelationshipsFromData = function() {
        if (null !== this.data) {
            var a1 = this.diagram;
            null !== a1 && a1.partManager.updateRelationshipsFromData(this);
        }
    };
    T.prototype.move = function(a1, b) {
        var c = b ? this.location : this.position, d = c.x;
        isNaN(d) && (d = 0);
        var e = c.y;
        isNaN(e) && (e = 0);
        d = a1.x - d;
        e = a1.y - e;
        !0 === b ? U.prototype.move.call(this, a1, !1) : (a1 = J.allocAt(c.x + d, c.y + e), U.prototype.move.call(this, a1, !1), J.free(a1));
        bf(this, d, e);
        for(a1 = this.labelNodes; a1.next();)b = a1.value, c = b.position, b.moveTo(c.x + d, c.y + e);
    };
    T.prototype.canRelinkFrom = function() {
        if (!this.relinkableFrom) return !1;
        var a1 = this.layer;
        if (null === a1) return !0;
        if (!a1.allowRelink) return !1;
        a1 = a1.diagram;
        return null === a1 || a1.allowRelink ? !0 : !1;
    };
    T.prototype.canRelinkTo = function() {
        if (!this.relinkableTo) return !1;
        var a1 = this.layer;
        if (null === a1) return !0;
        if (!a1.allowRelink) return !1;
        a1 = a1.diagram;
        return null === a1 || a1.allowRelink ? !0 : !1;
    };
    T.prototype.computeMidPoint = function(a1) {
        var b = this.pointsCount;
        if (0 === b) return a1.assign(tb), a1;
        if (1 === b) return a1.assign(this.i(0)), a1;
        if (2 === b) {
            var c = this.i(0), d = this.i(1);
            a1.h((c.x + d.x) / 2, (c.y + d.y) / 2);
            return a1;
        }
        if (this.isOrthogonal && (15 <= this.computeCorner() || this.computeCurve() === bg)) return this.ua.Pu(.5, a1), a1.add(this.i(0)), c = this.ua.figures.first(), a1.offset(-c.startX, -c.startY), a1;
        if (this.computeCurve() === bg) {
            if (3 === b) {
                c = this.i(0);
                d = this.i(1);
                var e = this.i(2);
                K.ax(c.x, c.y, d.x, d.y, d.x, d.y, e.x, e.y, a1);
                return a1;
            }
            d = (b - 1) / 3 | 0;
            c = 3 * (d / 2 | 0);
            if (1 === d % 2) {
                d = this.i(c);
                e = this.i(c + 1);
                var f = this.i(c + 2);
                c = this.i(c + 3);
                K.ax(d.x, d.y, e.x, e.y, f.x, f.y, c.x, c.y, a1);
            } else a1.assign(this.i(c));
            return a1;
        }
        var g = this.flattenedLengths;
        c = this.flattenedTotalLength;
        for(e = f = d = 0; d < c / 2 && f < b;){
            e = g[f];
            if (d + e > c / 2) break;
            d += e;
            f++;
        }
        b = this.i(f);
        f = this.i(f + 1);
        1 > Math.abs(b.x - f.x) ? b.y > f.y ? a1.h(b.x, b.y - (c / 2 - d)) : a1.h(b.x, b.y + (c / 2 - d)) : 1 > Math.abs(b.y - f.y) ? b.x > f.x ? a1.h(b.x - (c / 2 - d), b.y) : a1.h(b.x + (c / 2 - d), b.y) : (c = (c / 2 - d) / e, a1.h(b.x + c * (f.x - b.x), b.y + c * (f.y - b.y)));
        return a1;
    };
    T.prototype.computeMidAngle = function() {
        var a1 = this.pointsCount;
        if (2 > a1) return NaN;
        if (2 === a1) return this.i(0).ab(this.i(1));
        if (this.isOrthogonal && (15 <= this.computeCorner() || this.computeCurve() === bg)) return this.ua.wx(.5);
        if (this.computeCurve() === bg && 4 <= a1) {
            var b = (a1 - 1) / 3 | 0, c = 3 * (b / 2 | 0);
            if (1 === b % 2) {
                c = Math.floor(c);
                a1 = this.i(c);
                b = this.i(c + 1);
                var d = this.i(c + 2);
                c = this.i(c + 3);
                return K.My(a1.x, a1.y, b.x, b.y, d.x, d.y, c.x, c.y);
            }
            if (0 < c && c + 1 < a1) return this.i(c - 1).ab(this.i(c + 1));
        }
        b = this.flattenedLengths;
        d = this.flattenedTotalLength;
        var e = 0;
        c = 0;
        for(var f; e < d / 2 && c < a1;){
            f = b[c];
            if (e + f > d / 2) break;
            e += f;
            c++;
        }
        b = this.i(c);
        d = this.i(c + 1);
        if (1 > Math.abs(b.x - d.x) && 1 > Math.abs(b.y - d.y)) {
            if (0 < c && c + 2 < a1) return this.i(c - 1).ab(this.i(c + 2));
        } else {
            if (1 > Math.abs(b.x - d.x)) return b.y > d.y ? 270 : 90;
            if (1 > Math.abs(b.y - d.y)) return b.x > d.x ? 180 : 0;
        }
        return b.ab(d);
    };
    t = T.prototype;
    t.i = function(a1) {
        return this.Ob.s[a1];
    };
    t.dd = function(a1, b) {
        this.Ob.cd(a1, b);
    };
    t.L = function(a1, b, c) {
        this.Ob.cd(a1, new J(b, c));
    };
    t.Kz = function(a1, b) {
        this.Ob.Hb(a1, b);
    };
    t.m = function(a1, b, c) {
        this.Ob.Hb(a1, new J(b, c));
    };
    t.ne = function(a1) {
        this.Ob.add(a1);
    };
    t.yf = function(a1, b) {
        this.Ob.add(new J(a1, b));
    };
    t.pv = function(a1) {
        this.Ob.mb(a1);
    };
    t.Ej = function() {
        this.Ob.clear();
    };
    function bf(a1, b, c) {
        if (0 !== b || 0 !== c) {
            if (0 === a1.pointsCount) a1.defaultFromPoint && a1.defaultFromPoint.offset(b, c), a1.defaultToPoint && a1.defaultToPoint.offset(b, c);
            else {
                for(var d = a1.fd, e = new F, f = a1.Ob.iterator; f.next();){
                    var g = f.value;
                    e.add(new J(g.x + b, g.y + c).freeze());
                }
                e.freeze();
                f = a1.Ob;
                a1.Ob = e;
                g = a1.diagram;
                isNaN(b) || isNaN(c) || null !== g && g.animationManager.Ab ? a1.v() : (a1.ke.h(a1.ke.x + b, a1.ke.y + c), a1.pa.h(a1.pa.x + b, a1.pa.y + c), Nl(a1));
                d ? Lp(a1) : (a1.defaultFromPoint && (a1.defaultFromPoint = a1.i(0)), a1.defaultToPoint && (a1.defaultToPoint = a1.i(a1.pointsCount - 1)));
                null !== g && g.animationManager.Ab && Nh(g.animationManager, a1, e);
                a1.g("points", f, e);
            }
        }
    }
    t.uh = function() {
        null === this.Mg && (this.Mg = this.Ob, this.Ob = this.Ob.copy());
    };
    t.zf = function() {
        if (null !== this.Mg) {
            for(var a1 = this.Mg, b = this.Ob, c = Infinity, d = Infinity, e = a1.s, f = e.length, g = 0; g < f; g++){
                var h = e[g];
                c = Math.min(h.x, c);
                d = Math.min(h.y, d);
            }
            h = g = Infinity;
            for(var k = b.s, l = k.length, m = 0; m < l; m++){
                var n = k[m];
                g = Math.min(n.x, g);
                h = Math.min(n.y, h);
                n.freeze();
            }
            b.freeze();
            if (l === f) {
                for(f = 0; f < l; f++)if (m = e[f], n = k[f], m.x - c !== n.x - g || m.y - d !== n.y - h) {
                    this.rc();
                    break;
                }
            } else this.rc();
            this.Mg = null;
            c = this.diagram;
            null !== c && c.animationManager.Ab && Nh(c.animationManager, this, b);
            Lp(this);
            this.g("points", a1, b);
        }
    };
    t.rv = function() {
        null !== this.Mg && (this.Ob = this.Mg, this.Mg = null);
    };
    function Lp(a1) {
        0 === a1.Ob.count ? a1.fd = !1 : (a1.fd = !0, a1.bq = null, a1.ut = NaN, a1.defaultFromPoint = a1.i(0), a1.defaultToPoint = a1.i(a1.pointsCount - 1), Mp(a1, !1));
    }
    t.bb = function() {
        if (!this.suspendsRouting) {
            var a1 = this.diagram;
            if (a1) {
                if (a1.zs.contains(this) || a1.undoManager.isUndoingRedoing) return;
                a1 = a1.animationManager;
                if (a1.isTicking && !a1.isAnimating) return;
                null === this.Tg || a1.isTicking || (this.Tg = null);
            }
            a1 = this.path;
            null !== a1 && (this.fd = !1, this.v(), a1.v());
        }
    };
    t.vg = function() {
        if (!this.fd && !this.computingPoints) {
            var a1 = !0;
            try {
                this.computingPoints = !0, this.uh(), a1 = this.computePoints();
            } catch (b) {
                this.computingPoints = !1, this.rv();
            } finally{
                this.computingPoints = !1, a1 ? this.zf() : this.rv();
            }
        }
    };
    T.prototype.computePoints = function() {
        if (null === this.diagram) return !1;
        var a1 = this.fromNode, b = null;
        null === a1 ? (Np || (Np = new V, Np.desiredSize = Cb, Np.Va()), this.defaultFromPoint && (Np.location = this.defaultFromPoint, Np.Va(), b = a1 = Np)) : b = this.fromPort;
        if (null !== b && !a1.isVisible()) {
            var c = a1.findVisibleNode();
            null !== c && c !== a1 ? (a1 = c, b = c.port) : a1 = c;
        }
        this.Lw = a1;
        if (null === a1 || !a1.location.w()) return !1;
        for(; !(null === b || b.actualBounds.w() && b.Ed());)b = b.panel;
        if (null === b) return !1;
        var d = this.toNode, e = null;
        null === d ? (Op || (Op = new V, Op.desiredSize = Cb, Op.Va()), this.defaultToPoint && (Op.location = this.defaultToPoint, Op.Va(), e = d = Op)) : e = this.toPort;
        null === e || d.isVisible() || (c = d.findVisibleNode(), null !== c && c !== d ? (d = c, e = c.port) : d = c);
        this.Mw = d;
        if (null === d || !d.location.w()) return !1;
        for(; !(null === e || e.actualBounds.w() && e.Ed());)e = e.panel;
        if (null === e) return !1;
        var f = this.pointsCount, g = this.computeSpot(!0, b);
        c = this.computeSpot(!1, e);
        var h = Pp(g), k = Pp(c), l = b === e && null !== b, m = this.isOrthogonal, n = this.curve === bg;
        this.Wf = l && !m ? n = !0 : !1;
        var p = this.computeAdjusting() === Zf || l;
        if (!m && !l && h && k) {
            if (h = !1, !p && 3 <= f && (p = this.getLinkPoint(a1, b, g, !0, !1, d, e), k = this.getLinkPoint(d, e, c, !1, !1, a1, b), h = this.adjustPoints(0, p, f - 1, k)) && (p = this.getLinkPoint(a1, b, g, !0, !1, d, e), k = this.getLinkPoint(d, e, c, !1, !1, a1, b), this.adjustPoints(0, p, f - 1, k)), !h) {
                if (this.Ej(), n) {
                    f = this.getLinkPoint(a1, b, g, !0, !1, d, e);
                    p = this.getLinkPoint(d, e, c, !1, !1, a1, b);
                    h = p.x - f.x;
                    k = p.y - f.y;
                    l = this.computeCurviness();
                    n = m = 0;
                    var q = f.x + h / 3, r = f.y + k / 3, u = q, w = r;
                    K.B(k, 0) ? w = 0 < h ? w - l : w + l : (m = -h / k, n = Math.sqrt(l * l / (m * m + 1)), 0 > l && (n = -n), u = (0 > k ? -1 : 1) * n + q, w = m * (u - q) + r);
                    q = f.x + 2 * h / 3;
                    r = f.y + 2 * k / 3;
                    var v = q, y = r;
                    K.B(k, 0) ? y = 0 < h ? y - l : y + l : (v = (0 > k ? -1 : 1) * n + q, y = m * (v - q) + r);
                    this.Ej();
                    this.ne(f);
                    this.yf(u, w);
                    this.yf(v, y);
                    this.ne(p);
                    this.dd(0, this.getLinkPoint(a1, b, g, !0, !1, d, e));
                    this.dd(3, this.getLinkPoint(d, e, c, !1, !1, a1, b));
                } else if (f = d, p = e, d = this.getLinkPoint(a1, b, g, !0, !1, f, p), e = this.getLinkPoint(f, p, c, !1, !1, a1, b), this.hasCurviness()) p = e.x - d.x, c = e.y - d.y, g = this.computeCurviness(), a1 = d.x + p / 2, b = d.y + c / 2, f = a1, h = b, K.B(c, 0) ? h = 0 < p ? h - g : h + g : (p = -p / c, f = Math.sqrt(g * g / (p * p + 1)), 0 > g && (f = -f), f = (0 > c ? -1 : 1) * f + a1, h = p * (f - a1) + b), this.ne(d), this.yf(f, h), this.ne(e);
                else {
                    this.ne(d);
                    this.ne(e);
                    h = N.alloc();
                    b.mi(h);
                    k = h.ca(e);
                    p.mi(h);
                    l = h.ca(d);
                    if (k || l) g = b.ga(Qp(g), new J), this.dd(0, this.getLinkPointFromPoint(a1, b, g, e, !0, g)), c = p.ga(Qp(c), new J), this.dd(1, this.getLinkPointFromPoint(f, p, c, d, !1, c));
                    N.free(h);
                }
            }
        } else {
            n = this.isAvoiding;
            p && (m && n || l) && this.Ej();
            var z = l ? this.computeCurviness() : 0;
            n = this.getLinkPoint(a1, b, g, !0, m, d, e);
            q = u = r = 0;
            if (m || !h || l) w = this.computeEndSegmentLength(a1, b, g, !0), q = this.getLinkDirection(a1, b, n, g, !0, m, d, e), l && (h || g.D(c) || !m && 1 === g.x + c.x && 1 === g.y + c.y) && (q -= m ? 90 : 30, 0 > z && (q -= 180)), 0 > q ? q += 360 : 360 <= q && (q -= 360), l && (w += Math.abs(z) * (m ? 1 : 2)), 0 === q ? r = w : 90 === q ? u = w : 180 === q ? r = -w : 270 === q ? u = -w : (r = w * Math.cos(q * Math.PI / 180), u = w * Math.sin(q * Math.PI / 180)), g.Mc() && l && (w = b.ga(wc, J.alloc()), v = J.allocAt(w.x + 1E3 * r, w.y + 1E3 * u), this.getLinkPointFromPoint(a1, b, w, v, !0, n), J.free(w), J.free(v));
            w = this.getLinkPoint(d, e, c, !1, m, a1, b);
            var A = y = v = 0;
            if (m || !k || l) {
                var B = this.computeEndSegmentLength(d, e, c, !1);
                A = this.getLinkDirection(d, e, w, c, !1, m, a1, b);
                l && (k || g.D(c) || !m && 1 === g.x + c.x && 1 === g.y + c.y) && (A += m ? 0 : 30, 0 > z && (A += 180));
                0 > A ? A += 360 : 360 <= A && (A -= 360);
                l && (B += Math.abs(z) * (m ? 1 : 2));
                0 === A ? v = B : 90 === A ? y = B : 180 === A ? v = -B : 270 === A ? y = -B : (v = B * Math.cos(A * Math.PI / 180), y = B * Math.sin(A * Math.PI / 180));
                c.Mc() && l && (c = e.ga(wc, J.alloc()), g = J.allocAt(c.x + 1E3 * v, c.y + 1E3 * y), this.getLinkPointFromPoint(d, e, c, g, !1, w), J.free(c), J.free(g));
            }
            c = n;
            if (m || !h || l) c = new J(n.x + r, n.y + u);
            g = w;
            if (m || !k || l) g = new J(w.x + v, w.y + y);
            !p && !m && h && 3 < f && this.adjustPoints(0, n, f - 2, g) ? this.dd(f - 1, w) : !p && !m && k && 3 < f && this.adjustPoints(1, c, f - 1, w) ? this.dd(0, n) : !p && (m ? 6 <= f : 4 < f) && this.adjustPoints(1, c, f - 2, g) ? (this.dd(0, n), this.dd(f - 1, w)) : (this.Ej(), this.ne(n), (m || !h || l) && this.ne(c), m && this.addOrthoPoints(c, q, g, A, a1, d), (m || !k || l) && this.ne(g), this.ne(w));
        }
        return !0;
    };
    function Rp(a1, b) {
        Math.abs(b.x - a1.x) > Math.abs(b.y - a1.y) ? (b.x >= a1.x ? b.x = a1.x + 9E9 : b.x = a1.x - 9E9, b.y = a1.y) : (b.y >= a1.y ? b.y = a1.y + 9E9 : b.y = a1.y - 9E9, b.x = a1.x);
        return b;
    }
    T.prototype.getLinkPointFromPoint = function(a1, b, c, d, e, f) {
        void 0 === f && (f = new J);
        if (null === a1 || null === b) return f.assign(c), f;
        a1.isVisible() || (e = a1.findVisibleNode(), null !== e && e !== a1 && (b = e.port));
        a1 = null;
        e = b.panel;
        null === e || e.se() || (e = e.panel);
        if (null === e) {
            e = d.x;
            d = d.y;
            var g = c.x;
            c = c.y;
        } else {
            a1 = e.oe;
            e = 1 / (a1.m11 * a1.m22 - a1.m12 * a1.m21);
            g = a1.m22 * e;
            var h = -a1.m12 * e, k = -a1.m21 * e, l = a1.m11 * e, m = e * (a1.m21 * a1.dy - a1.m22 * a1.dx), n = e * (a1.m12 * a1.dx - a1.m11 * a1.dy);
            e = d.x * g + d.y * k + m;
            d = d.x * h + d.y * l + n;
            g = c.x * g + c.y * k + m;
            c = c.x * h + c.y * l + n;
        }
        b.Rj(e, d, g, c, f);
        null !== a1 && f.transform(a1);
        return f;
    };
    function Sp(a1, b) {
        var c = b.Yn;
        null === c && (c = new Tp, c.port = b, c.node = b.part, b.Yn = c);
        return Up(c, a1);
    }
    T.prototype.getLinkPoint = function(a1, b, c, d, e, f, g, h) {
        void 0 === h && (h = new J);
        if (c.sb() && !Pp(c)) return b.ga(c, h), h;
        if (c.$c()) {
            var k = Sp(this, b);
            if (null !== k) {
                h.assign(k.Yo);
                if (e && this.routing === Vp) {
                    var l = Sp(this, g);
                    if (null !== l && k.Fl < l.Fl) {
                        k = J.alloc();
                        l = J.alloc();
                        var m = new N(b.ga(sc, k), b.ga(Bc, l)), n = this.computeSpot(!d, g);
                        a1 = this.getLinkPoint(f, g, n, !d, e, a1, b, l);
                        (c.Hf(Dc) || c.Hf(Ec)) && a1.y >= m.y && a1.y <= m.y + m.height ? h.y = a1.y : (c.Hf(Cc) || c.Hf(Fc)) && a1.x >= m.x && a1.x <= m.x + m.width && (h.x = a1.x);
                        J.free(k);
                        J.free(l);
                    }
                }
                return h;
            }
        }
        c = b.ga(Qp(c), J.alloc());
        this.pointsCount > (e ? 6 : 2) ? (g = d ? this.i(1) : this.i(this.pointsCount - 2), e && (g = Rp(c, g.copy()))) : (k = this.computeSpot(!d, g), f = J.alloc(), g = g.ga(Qp(k), f), e && (g = Rp(c, g)), J.free(f));
        this.getLinkPointFromPoint(a1, b, c, g, d, h);
        J.free(c);
        return h;
    };
    T.prototype.getLinkDirection = function(a1, b, c, d, e, f, g, h) {
        a: if (d.sb()) var k = d.x > d.y ? d.x > 1 - d.y ? 0 : d.x < 1 - d.y ? 270 : 315 : d.x < d.y ? d.x > 1 - d.y ? 90 : d.x < 1 - d.y ? 180 : 135 : .5 > d.x ? 225 : .5 < d.x ? 45 : 0;
        else {
            if (d.$c() && (k = Sp(this, b), null !== k)) switch(k.Nc){
                case 1:
                    k = 270;
                    break a;
                case 2:
                    k = 180;
                    break a;
                default:
                case 4:
                    k = 0;
                    break a;
                case 8:
                    k = 90;
                    break a;
            }
            k = b.ga(wc, J.alloc());
            this.pointsCount > (f ? 6 : 2) ? (h = e ? this.i(1) : this.i(this.pointsCount - 2), h = f ? Rp(k, h.copy()) : c) : (c = J.alloc(), h = h.ga(wc, c), J.free(c));
            c = Math.abs(h.x - k.x) > Math.abs(h.y - k.y) ? h.x >= k.x ? 0 : 180 : h.y >= k.y ? 90 : 270;
            J.free(k);
            k = c;
        }
        g && d.Mc() && g.Td(a1) && (k += 180, 360 <= k && (k -= 360));
        if (Pp(d)) return k;
        a1 = b.li();
        if (0 === a1) return k;
        45 <= a1 && 135 > a1 ? k += 90 : 135 <= a1 && 225 > a1 ? k += 180 : 225 <= a1 && 315 > a1 && (k += 270);
        360 <= k && (k -= 360);
        return k;
    };
    T.prototype.computeEndSegmentLength = function(a1, b, c, d) {
        if (null !== b && c.$c() && (a1 = Sp(this, b), null !== a1)) return a1.Ju;
        a1 = d ? this.fromEndSegmentLength : this.toEndSegmentLength;
        null !== b && isNaN(a1) && (a1 = d ? b.fromEndSegmentLength : b.toEndSegmentLength);
        isNaN(a1) && (a1 = 10);
        return a1;
    };
    T.prototype.computeSpot = function(a1, b) {
        void 0 === b && (b = null);
        a1 ? (a1 = b ? b : this.fromPort, null === a1 ? a1 = wc : (b = this.fromSpot, b.Yb() && (b = a1.fromSpot), a1 = b === Sc ? rc : b)) : (a1 = b ? b : this.toPort, null === a1 ? a1 = wc : (b = this.toSpot, b.Yb() && (b = a1.toSpot), a1 = b === Sc ? rc : b));
        return a1;
    };
    function Pp(a1) {
        return a1 === rc || .5 === a1.x && .5 === a1.y;
    }
    function Qp(a1) {
        return .5 === a1.x && .5 === a1.y ? a1 : wc;
    }
    T.prototype.computeOtherPoint = function(a1, b) {
        if (this.computeAdjusting() !== Zf && 4 < this.pointsCount) return this.computeMidPoint(new J);
        a1 = b.Yn;
        a1 = null !== a1 ? Up(a1, this) : null;
        return null !== a1 ? a1.Yo : b.ga(wc);
    };
    T.prototype.computeShortLength = function(a1) {
        if (a1) {
            a1 = this.fromShortLength;
            if (isNaN(a1)) {
                var b = this.fromPort;
                null !== b && (a1 = b.fromShortLength);
            }
            return isNaN(a1) ? 0 : a1;
        }
        a1 = this.toShortLength;
        isNaN(a1) && (b = this.toPort, null !== b && (a1 = b.toShortLength));
        return isNaN(a1) ? 0 : a1;
    };
    T.prototype.Cf = function(a1, b, c, d, e, f) {
        if (!1 === this.pickable) return !1;
        void 0 === b && (b = null);
        void 0 === c && (c = null);
        var g = f;
        void 0 === f && (g = ld.alloc(), g.reset());
        g.multiply(this.transform);
        if (this.fh(a1, g)) return vn(this, b, c, e), void 0 === f && ld.free(g), !0;
        if (this.Yc(a1, g)) {
            var h = !1;
            if (!this.isAtomic) for(var k = this.O.s, l = k.length; l--;){
                var m = k[l];
                if (m.visible || m === this.locationObject) {
                    var n = m.actualBounds, p = this.naturalBounds;
                    if (!(n.x > p.width || n.y > p.height || 0 > n.x + n.width || 0 > n.y + n.height)) {
                        n = ld.alloc();
                        n.set(g);
                        if (m instanceof W) h = m.Cf(a1, b, c, d, e, n);
                        else if (this.path === m) {
                            if (m instanceof Bf) {
                                if (h = a1, p = d, !1 === m.pickable) h = !1;
                                else if (n.multiply(m.transform), p) b: {
                                    var q = h, r = n;
                                    if (m.fh(q, r)) h = !0;
                                    else {
                                        if (void 0 === r && (r = m.transform, q.Re(m.actualBounds))) {
                                            h = !0;
                                            break b;
                                        }
                                        h = q.left;
                                        p = q.right;
                                        var u = q.top;
                                        q = q.bottom;
                                        var w = J.alloc(), v = J.alloc(), y = J.alloc(), z = ld.alloc();
                                        z.set(r);
                                        z.bv(m.transform);
                                        z.Uj();
                                        v.x = p;
                                        v.y = u;
                                        v.transform(z);
                                        w.x = h;
                                        w.y = u;
                                        w.transform(z);
                                        r = !1;
                                        $n(m, w, v, y) ? r = !0 : (w.x = p, w.y = q, w.transform(z), $n(m, w, v, y) ? r = !0 : (v.x = h, v.y = q, v.transform(z), $n(m, w, v, y) ? r = !0 : (w.x = h, w.y = u, w.transform(z), $n(m, w, v, y) && (r = !0))));
                                        ld.free(z);
                                        J.free(w);
                                        J.free(v);
                                        J.free(y);
                                        h = r;
                                    }
                                }
                                else h = m.fh(h, n);
                            }
                        } else h = il(m, a1, d, n);
                        h && (p = m, null !== b && (p = b(m)), p && (null === c || c(p)) && e.add(p));
                        ld.free(n);
                    }
                }
            }
            void 0 === f && ld.free(g);
            return h || null !== this.background || null !== this.areaBackground;
        }
        void 0 === f && ld.free(g);
        return !1;
    };
    T.prototype.computeCurve = function() {
        if (null === this.Wf) {
            var a1 = this.fromPort, b = this.isOrthogonal;
            this.Wf = null !== a1 && a1 === this.toPort && !b;
        }
        return this.Wf ? bg : this.curve;
    };
    T.prototype.computeCorner = function() {
        if (this.curve === bg) return 0;
        var a1 = this.corner;
        if (isNaN(a1) || 0 > a1) a1 = 10;
        return a1;
    };
    T.prototype.findMidLabel = function() {
        for(var a1 = this.path, b = this.O.s, c = b.length, d = 0; d < c; d++){
            var e = b[d];
            if (e !== a1 && !e.isPanelMain && (-Infinity === e.segmentIndex || isNaN(e.segmentIndex))) return e;
        }
        for(a1 = this.labelNodes; a1.next();)if (b = a1.value, -Infinity === b.segmentIndex || isNaN(b.segmentIndex)) return b;
        return null;
    };
    T.prototype.computeSpacing = function() {
        if (!this.isVisible()) return 0;
        var a1 = Wp;
        a1 = Math.max(a1, this.computeThickness());
        var b = this.fromPort, c = this.toPort;
        if (null !== b && null !== c) {
            var d = this.findMidLabel();
            if (null !== d) {
                var e = d.naturalBounds, f = d.margin, g = isNaN(e.width) ? 30 : e.width * d.scale + f.left + f.right;
                e = isNaN(e.height) ? 14 : e.height * d.scale + f.top + f.bottom;
                d = d.segmentOrientation;
                d === jn || d === kn || d === Hp ? a1 = Math.max(a1, e) : d === cn || d === dn || d === an || d === bn ? a1 = Math.max(a1, g) : (b = b.ga(wc).ab(c.ga(wc)) / 180 * Math.PI, a1 = Math.max(a1, Math.abs(Math.sin(b) * g) + Math.abs(Math.cos(b) * e) + 1));
                this.curve === bg && (a1 *= 1.333);
            }
        }
        return a1;
    };
    T.prototype.arrangeBundledLinks = function(a1, b) {
        if (b) for(b = 0; b < a1.length; b++){
            var c = a1[b];
            c.computeAdjusting() === Zf && c.bb();
        }
    };
    T.prototype.computeCurviness = function() {
        var a1 = this.curviness;
        if (isNaN(a1)) {
            a1 = Xp;
            var b = this.Sf;
            if (null !== b) {
                for(var c = Ea(), d = 0, e = b.links, f = 0; f < e.length; f++){
                    var g = e[f].computeSpacing();
                    c.push(g);
                    d += g;
                }
                d = -d / 2;
                for(f = 0; f < e.length; f++){
                    if (e[f] === this) {
                        a1 = d + c[f] / 2;
                        break;
                    }
                    d += c[f];
                }
                b.Cs === this.fromNode && (a1 = -a1);
                Ga(c);
            }
        }
        return a1;
    };
    T.prototype.computeThickness = function() {
        if (!this.isVisible()) return 0;
        var a1 = this.path;
        return null !== a1 ? Math.max(a1.strokeWidth, 1) : 1;
    };
    T.prototype.hasCurviness = function() {
        return !isNaN(this.curviness) || null !== this.Sf;
    };
    T.prototype.adjustPoints = function(a1, b, c, d) {
        var e = this.computeAdjusting();
        if (this.isOrthogonal) {
            if (e === Fp) return !1;
            e === Gp && (e = Ep);
        }
        switch(e){
            case Fp:
                var f = this.i(a1), g = this.i(c);
                if (!f.Xa(b) || !g.Xa(d)) {
                    e = f.x;
                    f = f.y;
                    var h = g.x - e, k = g.y - f, l = Math.sqrt(h * h + k * k);
                    if (!K.$(l, 0)) {
                        if (K.$(h, 0)) var m = 0 > k ? -Math.PI / 2 : Math.PI / 2;
                        else m = Math.atan(k / Math.abs(h)), 0 > h && (m = Math.PI - m);
                        g = b.x;
                        var n = b.y;
                        h = d.x - g;
                        var p = d.y - n;
                        k = Math.sqrt(h * h + p * p);
                        K.$(h, 0) ? p = 0 > p ? -Math.PI / 2 : Math.PI / 2 : (p = Math.atan(p / Math.abs(h)), 0 > h && (p = Math.PI - p));
                        l = k / l;
                        m = p - m;
                        this.dd(a1, b);
                        for(a1 += 1; a1 < c; a1++)b = this.i(a1), h = b.x - e, k = b.y - f, b = Math.sqrt(h * h + k * k), K.$(b, 0) || (K.$(h, 0) ? k = 0 > k ? -Math.PI / 2 : Math.PI / 2 : (k = Math.atan(k / Math.abs(h)), 0 > h && (k = Math.PI - k)), h = k + m, b *= l, this.L(a1, g + b * Math.cos(h), n + b * Math.sin(h)));
                        this.dd(c, d);
                    }
                }
                return !0;
            case Gp:
                f = this.i(a1);
                n = this.i(c);
                if (!f.Xa(b) || !n.Xa(d)) {
                    e = f.x;
                    f = f.y;
                    g = n.x;
                    n = n.y;
                    l = (g - e) * (g - e) + (n - f) * (n - f);
                    h = b.x;
                    m = b.y;
                    k = d.x;
                    p = d.y;
                    var q = 1;
                    if (0 !== k - h) {
                        var r = (p - m) / (k - h);
                        q = Math.sqrt(1 + 1 / (r * r));
                    } else r = 9E9;
                    this.dd(a1, b);
                    for(a1 += 1; a1 < c; a1++){
                        b = this.i(a1);
                        var u = b.x, w = b.y, v = .5;
                        0 !== l && (v = ((e - u) * (e - g) + (f - w) * (f - n)) / l);
                        var y = e + v * (g - e), z = f + v * (n - f);
                        b = Math.sqrt((u - y) * (u - y) + (w - z) * (w - z));
                        w < r * (u - y) + z && (b = -b);
                        0 < r && (b = -b);
                        u = h + v * (k - h);
                        v = m + v * (p - m);
                        0 !== r ? (b = u + b / q, this.L(a1, b, v - (b - u) / r)) : this.L(a1, u, v + b);
                    }
                    this.dd(c, d);
                }
                return !0;
            case Ep:
                a: {
                    if (this.isOrthogonal && (e = this.i(a1), f = this.i(a1 + 1), g = this.i(a1 + 2), h = f.x, m = f.y, n = h, l = m, K.B(e.y, f.y) ? K.B(f.x, g.x) ? m = b.y : K.B(f.y, g.y) && (h = b.x) : K.B(e.x, f.x) && (K.B(f.y, g.y) ? h = b.x : K.B(f.x, g.x) && (m = b.y)), this.L(a1 + 1, h, m), e = this.i(c), f = this.i(c - 1), g = this.i(c - 2), h = f.x, m = f.y, k = h, p = m, K.B(e.y, f.y) ? K.B(f.x, g.x) ? m = d.y : K.B(f.y, g.y) && (h = d.x) : K.B(e.x, f.x) && (K.B(f.y, g.y) ? h = d.x : K.B(f.x, g.x) && (m = d.y)), this.L(c - 1, h, m), Sj(this))) {
                        this.L(a1 + 1, n, l);
                        this.L(c - 1, k, p);
                        c = !1;
                        break a;
                    }
                    this.dd(a1, b);
                    this.dd(c, d);
                    c = !0;
                }
                return c;
            default:
                return !1;
        }
    };
    T.prototype.addOrthoPoints = function(a1, b, c, d, e, f) {
        0 > b ? b += 360 : 360 <= b && (b -= 360);
        0 > d ? d += 360 : 360 <= d && (d -= 360);
        var g = d;
        b = 315 <= b || 45 > b ? 0 : 45 <= b && 135 > b ? 90 : 135 <= b && 225 > b ? 180 : 270;
        d = 315 <= d || 45 > d ? 0 : 45 <= d && 135 > d ? 90 : 135 <= d && 225 > d ? 180 : 270;
        var h = e.actualBounds.copy(), k = f.actualBounds.copy();
        if (h.w() && k.w()) {
            h.Bc(Yp, Yp);
            k.Bc(Yp, Yp);
            h.Ye(a1);
            k.Ye(c);
            var l = J.alloc(), m = J.alloc();
            if (0 === b) {
                if (c.x > a1.x || 270 === d && c.y < a1.y && k.right > a1.x || 90 === d && c.y > a1.y && k.right > a1.x) l.h(c.x, a1.y), m.h(c.x, (a1.y + c.y) / 2), 180 === d ? (l.x = this.computeMidOrthoPosition(a1.x, a1.y, c.x, c.y, !1), m.x = l.x, m.y = c.y) : 270 === d && c.y < a1.y || 90 === d && c.y > a1.y ? (l.x = a1.x < k.left ? this.computeMidOrthoPosition(a1.x, a1.y, k.left, c.y, !1) : a1.x < k.right && (270 === d && a1.y < k.top || 90 === d && a1.y > k.bottom) ? this.computeMidOrthoPosition(a1.x, a1.y, c.x, c.y, !1) : k.right, m.x = l.x, m.y = c.y) : 0 === d && a1.x < k.left && a1.y > k.top && a1.y < k.bottom && (l.x = a1.x, l.y = a1.y < c.y ? Math.min(c.y, k.top) : Math.max(c.y, k.bottom), m.y = l.y);
                else {
                    l.h(a1.x, c.y);
                    m.h((a1.x + c.x) / 2, c.y);
                    if (180 === d || 90 === d && c.y < h.top || 270 === d && c.y > h.bottom) 180 === d && (k.ca(a1) || h.ca(c)) ? l.y = this.computeMidOrthoPosition(a1.x, a1.y, c.x, c.y, !0) : c.y < a1.y && (180 === d || 90 === d) ? l.y = this.computeMidOrthoPosition(a1.x, h.top, c.x, Math.max(c.y, k.bottom), !0) : c.y > a1.y && (180 === d || 270 === d) && (l.y = this.computeMidOrthoPosition(a1.x, h.bottom, c.x, Math.min(c.y, k.top), !0)), m.x = c.x, m.y = l.y;
                    if (l.y > h.top && l.y < h.bottom) {
                        if (c.x >= h.left && c.x <= a1.x || a1.x <= k.right && a1.x >= c.x) {
                            if (90 === d || 270 === d) l.h(Math.max((a1.x + c.x) / 2, a1.x), a1.y), m.h(l.x, c.y);
                        } else l.y = 270 === d || (0 === d || 180 === d) && c.y < a1.y ? Math.min(c.y, 0 === d ? h.top : Math.min(h.top, k.top)) : Math.max(c.y, 0 === d ? h.bottom : Math.max(h.bottom, k.bottom)), m.x = c.x, m.y = l.y;
                    }
                }
            } else if (180 === b) {
                if (c.x < a1.x || 270 === d && c.y < a1.y && k.left < a1.x || 90 === d && c.y > a1.y && k.left < a1.x) l.h(c.x, a1.y), m.h(c.x, (a1.y + c.y) / 2), 0 === d ? (l.x = this.computeMidOrthoPosition(a1.x, a1.y, c.x, c.y, !1), m.x = l.x, m.y = c.y) : 270 === d && c.y < a1.y || 90 === d && c.y > a1.y ? (l.x = a1.x > k.right ? this.computeMidOrthoPosition(a1.x, a1.y, k.right, c.y, !1) : a1.x > k.left && (270 === d && a1.y < k.top || 90 === d && a1.y > k.bottom) ? this.computeMidOrthoPosition(a1.x, a1.y, c.x, c.y, !1) : k.left, m.x = l.x, m.y = c.y) : 180 === d && a1.x > k.right && a1.y > k.top && a1.y < k.bottom && (l.x = a1.x, l.y = a1.y < c.y ? Math.min(c.y, k.top) : Math.max(c.y, k.bottom), m.y = l.y);
                else {
                    l.h(a1.x, c.y);
                    m.h((a1.x + c.x) / 2, c.y);
                    if (0 === d || 90 === d && c.y < h.top || 270 === d && c.y > h.bottom) 0 === d && (k.ca(a1) || h.ca(c)) ? l.y = this.computeMidOrthoPosition(a1.x, a1.y, c.x, c.y, !0) : c.y < a1.y && (0 === d || 90 === d) ? l.y = this.computeMidOrthoPosition(a1.x, h.top, c.x, Math.max(c.y, k.bottom), !0) : c.y > a1.y && (0 === d || 270 === d) && (l.y = this.computeMidOrthoPosition(a1.x, h.bottom, c.x, Math.min(c.y, k.top), !0)), m.x = c.x, m.y = l.y;
                    if (l.y > h.top && l.y < h.bottom) {
                        if (c.x <= h.right && c.x >= a1.x || a1.x >= k.left && a1.x <= c.x) {
                            if (90 === d || 270 === d) l.h(Math.min((a1.x + c.x) / 2, a1.x), a1.y), m.h(l.x, c.y);
                        } else l.y = 270 === d || (0 === d || 180 === d) && c.y < a1.y ? Math.min(c.y, 180 === d ? h.top : Math.min(h.top, k.top)) : Math.max(c.y, 180 === d ? h.bottom : Math.max(h.bottom, k.bottom)), m.x = c.x, m.y = l.y;
                    }
                }
            } else if (90 === b) {
                if (c.y > a1.y || 180 === d && c.x < a1.x && k.bottom > a1.y || 0 === d && c.x > a1.x && k.bottom > a1.y) l.h(a1.x, c.y), m.h((a1.x + c.x) / 2, c.y), 270 === d ? (l.y = this.computeMidOrthoPosition(a1.x, a1.y, c.x, c.y, !0), m.x = c.x, m.y = l.y) : 180 === d && c.x < a1.x || 0 === d && c.x > a1.x ? (l.y = a1.y < k.top ? this.computeMidOrthoPosition(a1.x, a1.y, c.x, k.top, !0) : a1.y < k.bottom && (180 === d && a1.x < k.left || 0 === d && a1.x > k.right) ? this.computeMidOrthoPosition(a1.x, a1.y, c.x, c.y, !0) : k.bottom, m.x = c.x, m.y = l.y) : 90 === d && a1.y < k.top && a1.x > k.left && a1.x < k.right && (l.x = a1.x < c.x ? Math.min(c.x, k.left) : Math.max(c.x, k.right), l.y = a1.y, m.x = l.x);
                else {
                    l.h(c.x, a1.y);
                    m.h(c.x, (a1.y + c.y) / 2);
                    if (270 === d || 0 === d && c.x < h.left || 180 === d && c.x > h.right) 270 === d && (k.ca(a1) || h.ca(c)) ? l.x = this.computeMidOrthoPosition(a1.x, a1.y, c.x, c.y, !1) : c.x < a1.x && (270 === d || 0 === d) ? l.x = this.computeMidOrthoPosition(h.left, a1.y, Math.max(c.x, k.right), c.y, !1) : c.x > a1.x && (270 === d || 180 === d) && (l.x = this.computeMidOrthoPosition(h.right, a1.y, Math.min(c.x, k.left), c.y, !1)), m.x = l.x, m.y = c.y;
                    if (l.x > h.left && l.x < h.right) {
                        if (c.y >= h.top && c.y <= a1.y || a1.y <= k.bottom && a1.y >= c.y) {
                            if (0 === d || 180 === d) l.h(a1.x, Math.max((a1.y + c.y) / 2, a1.y)), m.h(c.x, l.y);
                        } else l.x = 180 === d || (90 === d || 270 === d) && c.x < a1.x ? Math.min(c.x, 90 === d ? h.left : Math.min(h.left, k.left)) : Math.max(c.x, 90 === d ? h.right : Math.max(h.right, k.right)), m.x = l.x, m.y = c.y;
                    }
                }
            } else if (c.y < a1.y || 180 === d && c.x < a1.x && k.top < a1.y || 0 === d && c.x > a1.x && k.top < a1.y) l.h(a1.x, c.y), m.h((a1.x + c.x) / 2, c.y), 90 === d ? (l.y = this.computeMidOrthoPosition(a1.x, a1.y, c.x, c.y, !0), m.x = c.x, m.y = l.y) : 180 === d && c.x < a1.x || 0 === d && c.x >= a1.x ? (l.y = a1.y > k.bottom ? this.computeMidOrthoPosition(a1.x, a1.y, c.x, k.bottom, !0) : a1.y > k.top && (180 === d && a1.x < k.left || 0 === d && a1.x > k.right) ? this.computeMidOrthoPosition(a1.x, a1.y, c.x, c.y, !0) : k.top, m.x = c.x, m.y = l.y) : 270 === d && a1.y > k.bottom && a1.x > k.left && a1.x < k.right && (l.x = a1.x < c.x ? Math.min(c.x, k.left) : Math.max(c.x, k.right), l.y = a1.y, m.x = l.x);
            else {
                l.h(c.x, a1.y);
                m.h(c.x, (a1.y + c.y) / 2);
                if (90 === d || 0 === d && c.x < h.left || 180 === d && c.x > h.right) 90 === d && (k.ca(a1) || h.ca(c)) ? l.x = this.computeMidOrthoPosition(a1.x, a1.y, c.x, c.y, !1) : c.x < a1.x && (90 === d || 0 === d) ? l.x = this.computeMidOrthoPosition(h.left, a1.y, Math.max(c.x, k.right), c.y, !1) : c.x > a1.x && (90 === d || 180 === d) && (l.x = this.computeMidOrthoPosition(h.right, a1.y, Math.min(c.x, k.left), c.y, !1)), m.x = l.x, m.y = c.y;
                if (l.x > h.left && l.x < h.right) {
                    if (c.y <= h.bottom && c.y >= a1.y || a1.y >= k.top && a1.y <= c.y) {
                        if (0 === d || 180 === d) l.h(a1.x, Math.min((a1.y + c.y) / 2, a1.y)), m.h(c.x, l.y);
                    } else l.x = 180 === d || (90 === d || 270 === d) && c.x < a1.x ? Math.min(c.x, 270 === d ? h.left : Math.min(h.left, k.left)) : Math.max(c.x, 270 === d ? h.right : Math.max(h.right, k.right)), m.x = l.x, m.y = c.y;
                }
            }
            var n = c;
            if (this.isAvoiding) {
                var p = this.diagram;
                if (null === p || e === f || this.layer.isTemporary || !jk(p) || h.ca(n) && !f.Td(e) || k.ca(a1) && !e.Td(f)) b = !1;
                else {
                    var q = kk(p, !0, this.containingGroup, null);
                    if (17 !== this.segmentIndex && q.Xj(Math.min(a1.x, l.x), Math.min(a1.y, l.y), Math.abs(a1.x - l.x), Math.abs(a1.y - l.y)) && q.Xj(Math.min(l.x, m.x), Math.min(l.y, m.y), Math.abs(l.x - m.x), Math.abs(l.y - m.y)) && q.Xj(Math.min(m.x, n.x), Math.min(m.y, n.y), Math.abs(m.x - n.x), Math.abs(m.y - n.y))) b = !1;
                    else {
                        e = a1;
                        f = n;
                        var r = c = null;
                        if (p.isVirtualized) {
                            p = q.bounds.copy();
                            p.Bc(-q.Go, -q.Fo);
                            var u = J.alloc();
                            Ak(q, a1.x, a1.y) || (K.Ff(p.x, p.y, p.x + p.width, p.y + p.height, a1.x, a1.y, l.x, l.y, u) ? (c = a1 = u.copy(), b = u.ab(l)) : K.Ff(p.x, p.y, p.x + p.width, p.y + p.height, l.x, l.y, m.x, m.y, u) ? (c = a1 = u.copy(), b = u.ab(m)) : K.Ff(p.x, p.y, p.x + p.width, p.y + p.height, m.x, m.y, n.x, n.y, u) && (c = a1 = u.copy(), b = u.ab(n)));
                            Ak(q, n.x, n.y) || (K.Ff(p.x, p.y, p.x + p.width, p.y + p.height, n.x, n.y, m.x, m.y, u) ? (r = n = u.copy(), d = m.ab(u)) : K.Ff(p.x, p.y, p.x + p.width, p.y + p.height, m.x, m.y, l.x, l.y, u) ? (r = n = u.copy(), d = l.ab(u)) : K.Ff(p.x, p.y, p.x + p.width, p.y + p.height, l.x, l.y, a1.x, a1.y, u) && (r = n = u.copy(), d = a1.ab(u)));
                            J.free(u);
                        }
                        h = h.copy().ed(k);
                        h.Bc(q.Go * q.Ns, q.Fo * q.Ns);
                        Zp(q, a1, b, n, d, h, !0);
                        k = $p(q, n.x, n.y);
                        !q.abort && k >= aq && (zk(q), h.Bc(q.Go * q.Hx, q.Fo * q.Ix), Zp(q, a1, b, n, d, h, !1), k = $p(q, n.x, n.y));
                        if (!q.abort && k < aq && $p(q, n.x, n.y) !== Bk) {
                            bq(this, q, n.x, n.y, d, !0, g);
                            h = this.i(2);
                            if (4 > this.pointsCount) 0 === b || 180 === b ? (h.x = a1.x, h.y = n.y) : (h.x = n.x, h.y = a1.y), this.L(2, h.x, h.y), this.m(3, h.x, h.y);
                            else if (g = this.i(3), 0 === b || 180 === b) K.B(h.x, g.x) ? (h = 0 === b ? Math.max(h.x, a1.x) : Math.min(h.x, a1.x), this.L(2, h, a1.y), this.L(3, h, g.y)) : K.B(h.y, g.y) ? (Math.abs(a1.y - h.y) <= q.Fo / 2 && (this.L(2, h.x, a1.y), this.L(3, g.x, a1.y)), this.m(2, h.x, a1.y)) : this.L(2, a1.x, h.y);
                            else if (90 === b || 270 === b) K.B(h.y, g.y) ? (h = 90 === b ? Math.max(h.y, a1.y) : Math.min(h.y, a1.y), this.L(2, a1.x, h), this.L(3, g.x, h)) : K.B(h.x, g.x) ? (Math.abs(a1.x - h.x) <= q.Go / 2 && (this.L(2, a1.x, h.y), this.L(3, a1.x, g.y)), this.m(2, a1.x, h.y)) : this.L(2, h.x, a1.y);
                            null !== c && (a1 = this.i(1), g = this.i(2), a1.x !== g.x && a1.y !== g.y ? 0 === b || 180 === b ? this.m(2, a1.x, g.y) : this.m(2, g.x, a1.y) : 0 === b || 180 === b ? this.m(2, e.x, c.y) : this.m(2, c.x, e.y));
                            null !== r && (0 === d || 180 === d ? this.yf(f.x, r.y) : this.yf(r.x, f.y));
                            b = !0;
                        } else b = !1;
                    }
                }
            } else b = !1;
            b || (this.ne(l.copy()), this.ne(m.copy()));
            J.free(l);
            J.free(m);
        }
    };
    T.prototype.computeMidOrthoPosition = function(a1, b, c, d, e) {
        var f = 0;
        !this.hasCurviness() || this.computeSpot(!0, this.fromPort).$c() || this.computeSpot(!1, this.toPort).$c() || (f = this.computeCurviness());
        return e ? (b + d) / 2 + f : (a1 + c) / 2 + f;
    };
    function Sj(a1) {
        if (null === a1.diagram || !a1.isAvoiding || !jk(a1.diagram)) return !1;
        var b = a1.points.s, c = b.length;
        if (4 > c) return !1;
        a1 = kk(a1.diagram, !0, a1.containingGroup, null);
        for(var d = 1; d < c - 2; d++){
            var e = b[d], f = b[d + 1];
            if (!a1.Xj(Math.min(e.x, f.x), Math.min(e.y, f.y), Math.abs(e.x - f.x), Math.abs(e.y - f.y))) return !0;
        }
        return !1;
    }
    function bq(a1, b, c, d, e, f, g) {
        var h = b.Go, k = b.Fo, l = $p(b, c, d), m = c, n = d;
        0 === e ? m += h : 90 === e ? n += k : 180 === e ? m -= h : n -= k;
        e !== g && l > cq && $p(b, m, n) !== l - 1 && ($p(b, c - h, d) === l - 1 ? (e = 180, m = c - h, n = d) : $p(b, c + h, d) === l - 1 ? (e = 0, m = c + h, n = d) : $p(b, c, d - k) === l - 1 ? (e = 270, m = c, n = d - k) : $p(b, c, d + k) === l - 1 && (e = 90, m = c, n = d + k));
        for(; l > cq && $p(b, m, n) === l - 1;)c = m, d = n, 0 === e ? m += h : 90 === e ? n += k : 180 === e ? m -= h : n -= k, --l;
        if (f) {
            if (l > cq) {
                if (180 === e || 0 === e) c = Math.floor(c / h) * h + h / 2;
                else if (90 === e || 270 === e) d = Math.floor(d / k) * k + k / 2;
            }
        } else c = Math.floor(c / h) * h + h / 2, d = Math.floor(d / k) * k + k / 2;
        l > cq && (f = e, g = c, m = d, 0 === e ? (f = 90, m += k) : 90 === e ? (f = 180, g -= h) : 180 === e ? (f = 270, m -= k) : 270 === e && (f = 0, g += h), $p(b, g, m) === l - 1 ? bq(a1, b, g, m, f, !1, f) : (g = c, m = d, 0 === e ? (f = 270, m -= k) : 90 === e ? (f = 0, g += h) : 180 === e ? (f = 90, m += k) : 270 === e && (f = 180, g -= h), $p(b, g, m) === l - 1 && bq(a1, b, g, m, f, !1, f)));
        a1.yf(c, d);
    }
    T.prototype.ez = function(a1) {
        var b = a1.x;
        a1 = a1.y;
        for(var c = this.i(0), d = this.i(1), e = yb(b, a1, c.x, c.y, d.x, d.y), f = 0, g = 1; g < this.pointsCount - 1; g++){
            c = this.i(g + 1);
            var h = yb(b, a1, d.x, d.y, c.x, c.y);
            d = c;
            h < e && (f = g, e = h);
        }
        return f;
    };
    T.prototype.rc = function() {
        this.kk = !1;
        this.v();
    };
    T.prototype.Tl = function(a1) {
        if (!a1) {
            if (!1 === this.fd) return;
            a1 = this.Qb();
            if (this.kk && (null === a1 || null !== a1.geometry)) return;
        }
        2 > this.pointsCount ? this.kk = !0 : this.ua = this.makeGeometry();
        a1 = this.path;
        if (null !== a1) {
            a1.ua = this.ua;
            for(var b = this.O.s, c = b.length, d = 0; d < c; d++){
                var e = b[d];
                e !== a1 && e.isPanelMain && e instanceof Bf && (e.ua = this.ua);
            }
        }
    };
    T.prototype.makeGeometry = function() {
        var a1 = this.ua, b = this.pointsCount, c = !1, d = this.diagram;
        null !== d && Ip(this) && d.Eh.contains(this) && (0 !== this.ll.width || 0 !== this.ll.height) && (d.animationManager.isAnimating || d.currentTool !== d.toolManager) && (c = !0);
        var e = this.i(0).copy(), f = e.copy();
        d = this.Ob.s;
        var g = this.computeCurve();
        if (g === bg && 3 <= b && !K.$(this.smoothness, 0)) {
            if (3 === b) {
                var h = this.i(1);
                d = Math.min(e.x, h.x);
                var k = Math.min(e.y, h.y);
                h = this.i(2);
                d = Math.min(d, h.x);
                k = Math.min(k, h.y);
            } else {
                if (this.isOrthogonal) for(k = 0; k < b; k++)h = d[k], f.x = Math.min(h.x, f.x), f.y = Math.min(h.y, f.y);
                else for(d = 3; d < b; d += 3)d + 3 >= b && (d = b - 1), k = this.i(d), f.x = Math.min(k.x, f.x), f.y = Math.min(k.y, f.y);
                d = f.x;
                k = f.y;
            }
        } else {
            for(k = 0; k < b; k++)h = d[k], f.x = Math.min(h.x, f.x), f.y = Math.min(h.y, f.y);
            d = f.x;
            k = f.y;
        }
        d -= this.ru.x;
        k -= this.ru.y;
        e.x -= d;
        e.y -= k;
        if (2 !== b || Ip(this)) {
            a1.type = P.o;
            h = qd(a1);
            0 !== this.computeShortLength(!0) && (e = dq(this, e, !0, f));
            wd(h, e.x, e.y, !1);
            if (g === bg && 3 <= b && !K.$(this.smoothness, 0)) {
                if (3 === b) c = this.i(1), b = c.x - d, c = c.y - k, e = this.i(2).copy(), e.x -= d, e.y -= k, 0 !== this.computeShortLength(!1) && (e = dq(this, e, !1, f)), xd(h, b, c, b, c, e.x, e.y);
                else if (this.isOrthogonal) {
                    b = J.allocAt(d, k);
                    c = J.alloc();
                    c.assign(this.i(1));
                    f = J.allocAt(d, k);
                    e = J.allocAt(d, k);
                    g = this.i(0);
                    for(var l, m = this.smoothness / 3, n = 1; n < this.pointsCount - 1; n++){
                        l = this.i(n);
                        var p = g, q = l, r = this.i(eq(this, l, n, !1));
                        if (!K.$(p.x, q.x) || !K.$(q.x, r.x)) {
                            if (!K.$(p.y, q.y) || !K.$(q.y, r.y)) {
                                var u = m;
                                isNaN(u) && (u = this.smoothness / 3);
                                var w = p.x;
                                p = p.y;
                                var v = q.x;
                                q = q.y;
                                var y = r.x;
                                r = r.y;
                                var z = u * fq(w, p, v, q);
                                u *= fq(v, q, y, r);
                                K.$(p, q) && K.$(v, y) && (v > w ? r > q ? (f.x = v - z, f.y = q - z, e.x = v + u, e.y = q + u) : (f.x = v - z, f.y = q + z, e.x = v + u, e.y = q - u) : r > q ? (f.x = v + z, f.y = q - z, e.x = v - u, e.y = q + u) : (f.x = v + z, f.y = q + z, e.x = v - u, e.y = q - u));
                                K.$(w, v) && K.$(q, r) && (q > p ? (y > v ? (f.x = v - z, f.y = q - z, e.x = v + u) : (f.x = v + z, f.y = q - z, e.x = v - u), e.y = q + u) : (y > v ? (f.x = v - z, f.y = q + z, e.x = v + u) : (f.x = v + z, f.y = q + z, e.x = v - u), e.y = q - u));
                                if (K.$(w, v) && K.$(v, y) || K.$(p, q) && K.$(q, r)) w = .5 * (w + y), p = .5 * (p + r), f.x = w, f.y = p, e.x = w, e.y = p;
                                1 === n ? (c.x = .5 * (g.x + l.x), c.y = .5 * (g.y + l.y)) : 2 === n && K.$(g.x, this.i(0).x) && K.$(g.y, this.i(0).y) && (c.x = .5 * (g.x + l.x), c.y = .5 * (g.y + l.y));
                                xd(h, c.x - d, c.y - k, f.x - d, f.y - k, l.x - d, l.y - k);
                                b.set(f);
                                c.set(e);
                                g = l;
                            }
                        }
                    }
                    l = g.x;
                    g = g.y;
                    m = this.i(this.pointsCount - 1);
                    0 !== this.computeShortLength(!1) && (m = dq(this, m.copy(), !1, pb));
                    l = .5 * (l + m.x);
                    g = .5 * (g + m.y);
                    xd(h, e.x - d, e.y - k, l - d, g - k, m.x - d, m.y - k);
                    J.free(b);
                    J.free(c);
                    J.free(f);
                    J.free(e);
                } else for(c = 3; c < b; c += 3)f = this.i(c - 2), c + 3 >= b && (c = b - 1), e = this.i(c - 1), g = this.i(c), c === b - 1 && 0 !== this.computeShortLength(!1) && (g = dq(this, g.copy(), !1, pb)), xd(h, f.x - d, f.y - k, e.x - d, e.y - k, g.x - d, g.y - k);
            } else {
                f = J.alloc();
                f.assign(this.i(0));
                e = J.alloc();
                e.assign(f);
                g = this.computeCorner();
                n = 1;
                for(l = 0; n < b;){
                    n = eq(this, f, n, 1 < n);
                    m = this.i(n);
                    if (n >= b - 1) {
                        if (!f.D(m)) 0 !== this.computeShortLength(!1) && (m = dq(this, m.copy(), !1, pb)), gq(this, h, -d, -k, f, m, c);
                        else if (0 === l) for(n = 1; n < b;)e.assign(f), m = this.i(n++), gq(this, h, -d, -k, f, m, c), f.assign(m);
                        break;
                    }
                    l = eq(this, m, n + 1, n < b - 3);
                    n = -d;
                    w = -k;
                    p = m;
                    v = this.i(l);
                    u = c;
                    if (K.B(f.y, p.y) && K.B(p.x, v.x)) {
                        if (r = Math.min(g, Math.abs(p.x - e.x) / 2), r = z = Math.min(r, Math.abs(v.y - p.y) / 2), K.B(r, 0)) gq(this, h, n, w, f, p, u), f.assign(p);
                        else {
                            var A = p.x, B = p.y;
                            q = A;
                            y = B;
                            p.x > f.x ? A = p.x - r : A = p.x + r;
                            v.y > p.y ? y = p.y + z : y = p.y - z;
                            v = J.allocAt(A, B);
                            gq(this, h, n, w, f, v, u);
                            J.free(v);
                            yd(h, p.x + n, p.y + w, q + n, y + w);
                            f.h(q, y);
                        }
                    } else K.B(f.x, p.x) && K.B(p.y, v.y) ? (r = Math.min(g, Math.abs(p.y - e.y) / 2), r = z = Math.min(r, Math.abs(v.x - p.x) / 2), K.B(z, 0) ? (gq(this, h, n, w, f, p, u), f.assign(p)) : (A = p.x, B = p.y, q = A, y = B, p.y > f.y ? B = p.y - r : B = p.y + r, v.x > p.x ? q = p.x + z : q = p.x - z, v = J.allocAt(A, B), gq(this, h, n, w, f, v, u), J.free(v), yd(h, p.x + n, p.y + w, q + n, y + w), f.h(q, y))) : (gq(this, h, n, w, f, p, u), f.assign(p));
                    e.assign(m);
                    n = l;
                }
                J.free(f);
            }
            Bd = h;
        } else h = this.i(1).copy(), h.x -= d, h.y -= k, 0 !== this.computeShortLength(!0) && (e = dq(this, e, !0, f)), 0 !== this.computeShortLength(!1) && (h = dq(this, h, !1, f)), a1.type = P.j, a1.startX = e.x, a1.startY = e.y, a1.endX = h.x, a1.endY = h.y;
        this.kk = !0;
        return a1;
    };
    function fq(a1, b, c, d) {
        a1 = c - a1;
        if (isNaN(a1) || Infinity === a1 || -Infinity === a1) return NaN;
        0 > a1 && (a1 = -a1);
        b = d - b;
        if (isNaN(b) || Infinity === b || -Infinity === b) return NaN;
        0 > b && (b = -b);
        return K.$(a1, 0) ? b : K.$(b, 0) ? a1 : Math.sqrt(a1 * a1 + b * b);
    }
    function dq(a1, b, c, d) {
        var e = a1.pointsCount;
        if (2 > e) return b;
        if (c) {
            var f = a1.i(1);
            c = f.x - d.x;
            f = f.y - d.y;
            d = fq(b.x, b.y, c, f);
            if (0 === d) return b;
            e = 2 === e ? .5 * d : d;
            a1 = a1.computeShortLength(!0);
            a1 > e && (a1 = e);
            e = a1 * (f - b.y) / d;
            b.x += a1 * (c - b.x) / d;
            b.y += e;
        } else {
            f = a1.i(e - 2);
            c = f.x - d.x;
            f = f.y - d.y;
            d = fq(b.x, b.y, c, f);
            if (0 === d) return b;
            e = 2 === e ? .5 * d : d;
            a1 = a1.computeShortLength(!1);
            a1 > e && (a1 = e);
            e = a1 * (b.y - f) / d;
            b.x -= a1 * (b.x - c) / d;
            b.y -= e;
        }
        return b;
    }
    function eq(a1, b, c, d) {
        for(var e = a1.pointsCount, f = b; K.$(b.x, f.x) && K.$(b.y, f.y);){
            if (c >= e) return e - 1;
            f = a1.i(c++);
        }
        if (!K.$(b.x, f.x) && !K.$(b.y, f.y)) return c - 1;
        for(var g = f; K.$(b.x, f.x) && K.$(f.x, g.x) && (!d || (b.y >= f.y ? f.y >= g.y : f.y <= g.y)) || K.$(b.y, f.y) && K.$(f.y, g.y) && (!d || (b.x >= f.x ? f.x >= g.x : f.x <= g.x));){
            if (c >= e) return e - 1;
            g = a1.i(c++);
        }
        return c - 2;
    }
    T.prototype.computeJumpLength = function() {
        return 10;
    };
    function gq(a1, b, c, d, e, f, g) {
        if (!g && Ip(a1)) {
            g = a1.computeJumpLength();
            var h = g / 2, k = [], l = 0;
            a1.isVisible() && (l = hq(a1, e, f, k));
            if (0 < l) {
                if (K.B(e.y, f.y)) {
                    if (e.x < f.x) for(var m = 0; m < l;){
                        var n = Math.max(e.x, Math.min(k[m++] - h, f.x - g));
                        b.lineTo(n + c, f.y + d);
                        var p = n + c;
                        for(var q = Math.min(n + g, f.x); m < l;)if (n = k[m], n < q + g) m++, q = Math.min(n + h, f.x);
                        else break;
                        n = f.y - g + d;
                        q += c;
                        var r = f.y + d;
                        a1.curve === Yf ? wd(b, q, r, !1) : xd(b, p, n, q, n, q, r);
                    }
                    else for(--l; 0 <= l;){
                        m = Math.min(e.x, Math.max(k[l--] + h, f.x + g));
                        b.lineTo(m + c, f.y + d);
                        p = m + c;
                        for(n = Math.max(m - g, f.x); 0 <= l;)if (m = k[l], m > n - g) l--, n = Math.max(m - h, f.x);
                        else break;
                        m = f.y - g + d;
                        n += c;
                        q = f.y + d;
                        a1.curve === Yf ? wd(b, n, q, !1) : xd(b, p, m, n, m, n, q);
                    }
                } else if (K.B(e.x, f.x)) {
                    if (e.y < f.y) for(m = 0; m < l;){
                        n = Math.max(e.y, Math.min(k[m++] - h, f.y - g));
                        b.lineTo(f.x + c, n + d);
                        p = n + d;
                        for(n = Math.min(n + g, f.y); m < l;)if (q = k[m], q < n + g) m++, n = Math.min(q + h, f.y);
                        else break;
                        q = f.x - g + c;
                        r = f.x + c;
                        n += d;
                        a1.curve === Yf ? wd(b, r, n, !1) : xd(b, q, p, q, n, r, n);
                    }
                    else for(--l; 0 <= l;){
                        m = Math.min(e.y, Math.max(k[l--] + h, f.y + g));
                        b.lineTo(f.x + c, m + d);
                        p = m + d;
                        for(m = Math.max(m - g, f.y); 0 <= l;)if (n = k[l], n > m - g) l--, m = Math.max(n - h, f.y);
                        else break;
                        n = f.x - g + c;
                        q = f.x + c;
                        m += d;
                        a1.curve === Yf ? wd(b, q, m, !1) : xd(b, n, p, n, m, q, m);
                    }
                }
            }
        }
        b.lineTo(f.x + c, f.y + d);
    }
    function hq(a1, b, c, d) {
        var e = a1.diagram;
        if (null === e || b.D(c)) return 0;
        for(e = e.layers; e.next();){
            var f = e.value;
            if (null !== f && f.visible) {
                f = f.Pa.s;
                for(var g = f.length, h = 0; h < g; h++){
                    var k = f[h];
                    if (k instanceof T) {
                        if (k === a1) return 0 < d.length && d.sort(function(a1, b) {
                            return a1 - b;
                        }), d.length;
                        if (k.isVisible() && Ip(k)) {
                            var l = k.routeBounds;
                            l.w() && a1.routeBounds.Yc(l) && !a1.usesSamePort(k) && (l = k.path, null !== l && l.Ed() && iq(b, c, d, k));
                        }
                    }
                }
            }
        }
        0 < d.length && d.sort(function(a1, b) {
            return a1 - b;
        });
        return d.length;
    }
    function iq(a1, b, c, d) {
        for(var e = K.B(a1.y, b.y), f = d.pointsCount, g = d.i(0), h = J.alloc(), k = 1; k < f; k++){
            var l = d.i(k);
            if (k < f - 1) {
                var m = d.i(k + 1);
                if (g.y === l.y && l.y === m.y) {
                    if (l.x > g.x && m.x >= l.x || l.x < g.x && m.x <= l.x) continue;
                } else if (g.x === l.x && l.x === m.x && (l.y > g.y && m.y >= l.y || l.y < g.y && m.y <= l.y)) continue;
            }
            a: {
                m = a1.x;
                var n = a1.y, p = b.x, q = b.y, r = g.x;
                g = g.y;
                var u = l.x, w = l.y;
                if (!K.B(m, p)) {
                    if (K.B(n, q) && K.B(r, u) && Math.min(m, p) < r && Math.max(m, p) > r && Math.min(g, w) < n && Math.max(g, w) > n && !K.B(g, w)) {
                        h.x = r;
                        h.y = n;
                        m = !0;
                        break a;
                    }
                } else if (!K.B(n, q) && K.B(g, w) && Math.min(n, q) < g && Math.max(n, q) > g && Math.min(r, u) < m && Math.max(r, u) > m && !K.B(r, u)) {
                    h.x = m;
                    h.y = g;
                    m = !0;
                    break a;
                }
                h.x = 0;
                h.y = 0;
                m = !1;
            }
            m && (e ? c.push(h.x) : c.push(h.y));
            g = l;
        }
        J.free(h);
    }
    function Ip(a1) {
        a1 = a1.curve;
        return a1 === Xf || a1 === Yf;
    }
    function Mp(a1, b) {
        if (b || Ip(a1)) b = a1.diagram, null === b || b.animationManager.isTicking || b.Eh.contains(a1) || 0 === a1.ll.width && 0 === a1.ll.height || b.Eh.add(a1, a1.ll.copy());
    }
    T.prototype.Wo = function(a1) {
        var b = this.layer;
        if (null !== b && b.visible && !b.isTemporary) {
            var c = b.diagram;
            if (null !== c && !c.animationManager.isTicking) {
                var d = !1;
                for(c = c.layers; c.next();){
                    var e = c.value;
                    if (e.visible) {
                        if (e === b) {
                            d = !0;
                            var f = !1;
                            e = e.Pa.s;
                            for(var g = e.length, h = 0; h < g; h++){
                                var k = e[h];
                                k instanceof T && (k === this ? f = !0 : f && jq(this, k, a1));
                            }
                        } else if (d) for(f = e.Pa.s, e = f.length, g = 0; g < e; g++)h = f[g], h instanceof T && jq(this, h, a1);
                    }
                }
            }
        }
    };
    function jq(a1, b, c) {
        if (null !== b && b.kk && b.fd && Ip(b)) {
            var d = b.routeBounds;
            d.w() && (a1.routeBounds.Yc(d) || c.Yc(d)) && (a1.usesSamePort(b) || b.rc());
        }
    }
    T.prototype.usesSamePort = function(a1) {
        var b = this.pointsCount, c = a1.pointsCount;
        if (0 < b && 0 < c) {
            var d = this.i(0), e = a1.i(0);
            if (d.Xa(e)) return !0;
            b = this.i(b - 1);
            a1 = a1.i(c - 1);
            if (b.Xa(a1) || d.Xa(a1) || b.Xa(e)) return !0;
        } else if (this.fromNode === a1.fromNode || this.toNode === a1.toNode || this.fromNode === a1.toNode || this.toNode === a1.fromNode) return !0;
        return !1;
    };
    T.prototype.isVisible = function() {
        if (!U.prototype.isVisible.call(this)) return !1;
        var a1 = this.containingGroup, b = !0, c = this.diagram;
        null !== c && (b = c.isTreePathToChildren);
        c = this.fromNode;
        if (null !== c) {
            if (this.isTreeLink && b && !c.isTreeExpanded) return !1;
            if (c === a1) return !0;
            for(var d = c; null !== d;){
                if (d.labeledLink === this) return !0;
                d = d.containingGroup;
            }
            c = c.findVisibleNode();
            if (null === c || c === a1) return !1;
        }
        c = this.toNode;
        if (null !== c) {
            if (this.isTreeLink && !b && !c.isTreeExpanded) return !1;
            if (c === a1) return !0;
            for(b = c; null !== b;){
                if (b.labeledLink === this) return !0;
                b = b.containingGroup;
            }
            b = c.findVisibleNode();
            if (null === b || b === a1) return !1;
        }
        return !0;
    };
    T.prototype.$b = function(a1) {
        U.prototype.$b.call(this, a1);
        a1 && Mp(this, !1);
        null !== this.Sf && this.Sf.Rl();
        if (null !== this.wd) for(var b = this.wd.iterator; b.next();)b.value.$b(a1);
    };
    T.prototype.computeAdjusting = function() {
        return this.isAvoiding && null !== this.diagram && this.diagram.animationManager.defaultAnimation.isAnimating ? Ep : this.pk;
    };
    function Jp(a1) {
        var b = a1.ef;
        if (null !== b) {
            var c = a1.uf;
            if (null !== c && isNaN(a1.curviness)) {
                for(var d = a1.ff, e = a1.vf, f = a1 = null, g = b.jb.s, h = g.length, k = 0; k < h; k++){
                    var l = g[k];
                    if (l.ef === b && l.ff === d && l.uf === c && l.vf === e || l.ef === c && l.ff === e && l.uf === b && l.vf === d) null === f ? f = l : (null === a1 && (a1 = [], a1.push(f)), a1.push(l));
                }
                if (null !== a1) {
                    f = op(b, c, d, e);
                    null === f && (f = new kq(b, d, c, e), np(b, f), np(c, f));
                    f.links = a1;
                    for(b = 0; b < a1.length; b++)a1[b].Sf = f;
                    f.Rl();
                }
            }
        }
    }
    function Kp(a1) {
        var b = a1.Sf;
        null !== b && isNaN(a1.curviness) && (a1.Sf = null, a1 = b.links.indexOf(a1), 0 <= a1 && (Da(b.links, a1), b.Rl()));
    }
    T.prototype.ph = function() {
        return !0;
    };
    ma.Object.defineProperties(T.prototype, {
        fromNode: {
            get: function() {
                return this.ef;
            },
            set: function(a1) {
                var b = this.ef;
                if (b !== a1) {
                    var c = this.fromPort;
                    null !== b && (this.uf !== b && sp(b, this, c), Kp(this), this.C(2));
                    this.ef = a1;
                    null !== a1 && this.$b(a1.isVisible());
                    this.Wf = null;
                    this.bb();
                    var d = this.diagram;
                    null !== d && d.aa && d.partManager.setFromNodeForLink(this, a1, b);
                    var e = this.fromPort, f = this.fromPortChanged;
                    if (null !== f) {
                        var g = !0;
                        null !== d && (g = d.aa, d.aa = !0);
                        f(this, c, e);
                        null !== d && (d.aa = g);
                    }
                    null !== a1 && (this.uf !== a1 && rp(a1, this, e), Jp(this), this.C(1));
                    this.g("fromNode", b, a1);
                    jp(this);
                }
            }
        },
        fromPortId: {
            get: function() {
                return this.ff;
            },
            set: function(a1) {
                var b = this.ff;
                if (b !== a1) {
                    var c = this.fromPort;
                    null !== c && pp(c);
                    Kp(this);
                    this.ff = a1;
                    var d = this.fromPort;
                    null !== d && pp(d);
                    var e = this.diagram;
                    if (null !== e) {
                        var f = this.data, g = e.model;
                        null !== f && g.ri() && g.xv(f, a1);
                    }
                    c !== d && (this.Wf = null, this.bb(), f = this.fromPortChanged, null !== f && (g = !0, null !== e && (g = e.aa, e.aa = !0), f(this, c, d), null !== e && (e.aa = g)));
                    Jp(this);
                    this.g("fromPortId", b, a1);
                }
            }
        },
        fromPort: {
            get: function() {
                var a1 = this.ef;
                return null === a1 ? null : a1.ms(this.ff);
            }
        },
        fromPortChanged: {
            get: function() {
                return this.fn;
            },
            set: function(a1) {
                var b = this.fn;
                b !== a1 && (this.fn = a1, this.g("fromPortChanged", b, a1));
            }
        },
        toNode: {
            get: function() {
                return this.uf;
            },
            set: function(a1) {
                var b = this.uf;
                if (b !== a1) {
                    var c = this.toPort;
                    null !== b && (this.ef !== b && sp(b, this, c), Kp(this), this.C(2));
                    this.uf = a1;
                    null !== a1 && this.$b(a1.isVisible());
                    this.Wf = null;
                    this.bb();
                    var d = this.diagram;
                    null !== d && d.aa && d.partManager.setToNodeForLink(this, a1, b);
                    var e = this.toPort, f = this.toPortChanged;
                    if (null !== f) {
                        var g = !0;
                        null !== d && (g = d.aa, d.aa = !0);
                        f(this, c, e);
                        null !== d && (d.aa = g);
                    }
                    null !== a1 && (this.ef !== a1 && rp(a1, this, e), Jp(this), this.C(1));
                    this.g("toNode", b, a1);
                    jp(this);
                }
            }
        },
        toPortId: {
            get: function() {
                return this.vf;
            },
            set: function(a1) {
                var b = this.vf;
                if (b !== a1) {
                    var c = this.toPort;
                    null !== c && pp(c);
                    Kp(this);
                    this.vf = a1;
                    var d = this.toPort;
                    null !== d && pp(d);
                    var e = this.diagram;
                    if (null !== e) {
                        var f = this.data, g = e.model;
                        null !== f && g.ri() && g.Cv(f, a1);
                    }
                    c !== d && (this.Wf = null, this.bb(), f = this.toPortChanged, null !== f && (g = !0, null !== e && (g = e.aa, e.aa = !0), f(this, c, d), null !== e && (e.aa = g)));
                    Jp(this);
                    this.g("toPortId", b, a1);
                }
            }
        },
        toPort: {
            get: function() {
                var a1 = this.uf;
                return null === a1 ? null : a1.ms(this.vf);
            }
        },
        toPortChanged: {
            get: function() {
                return this.to;
            },
            set: function(a1) {
                var b = this.to;
                b !== a1 && (this.to = a1, this.g("toPortChanged", b, a1));
            }
        },
        fromSpot: {
            get: function() {
                return null !== this.ba ? this.ba.Xi : Sc;
            },
            set: function(a1) {
                var b = this.fromSpot;
                b.D(a1) || (a1 = a1.J(), this.Xc(), this.ba.Xi = a1, this.g("fromSpot", b, a1), (b.$c() || a1.$c()) && null !== this.fromNode && pp(this.fromPort), this.bb());
            }
        },
        fromEndSegmentLength: {
            get: function() {
                return null !== this.ba ? this.ba.Vi : NaN;
            },
            set: function(a1) {
                var b = this.fromEndSegmentLength;
                b !== a1 && (0 > a1 && xa(a1, ">= 0", T, "fromEndSegmentLength"), this.Xc(), this.ba.Vi = a1, this.g("fromEndSegmentLength", b, a1), this.bb());
            }
        },
        fromShortLength: {
            get: function() {
                return null !== this.ba ? this.ba.Wi : NaN;
            },
            set: function(a1) {
                var b = this.fromShortLength;
                b !== a1 && (this.Xc(), this.ba.Wi = a1, this.rc(), this.g("fromShortLength", b, a1));
            }
        },
        toSpot: {
            get: function() {
                return null !== this.ba ? this.ba.yj : Sc;
            },
            set: function(a1) {
                var b = this.toSpot;
                b.D(a1) || (a1 = a1.J(), this.Xc(), this.ba.yj = a1, this.g("toSpot", b, a1), (b.$c() || a1.$c()) && null !== this.toNode && pp(this.toPort), this.bb());
            }
        },
        toEndSegmentLength: {
            get: function() {
                return null !== this.ba ? this.ba.wj : NaN;
            },
            set: function(a1) {
                var b = this.toEndSegmentLength;
                b !== a1 && (0 > a1 && xa(a1, ">= 0", T, "toEndSegmentLength"), this.Xc(), this.ba.wj = a1, this.g("toEndSegmentLength", b, a1), this.bb());
            }
        },
        toShortLength: {
            get: function() {
                return null !== this.ba ? this.ba.xj : NaN;
            },
            set: function(a1) {
                var b = this.toShortLength;
                b !== a1 && (this.Xc(), this.ba.xj = a1, this.rc(), this.g("toShortLength", b, a1));
            }
        },
        isLabeledLink: {
            get: function() {
                return null === this.wd ? !1 : 0 < this.wd.count;
            }
        },
        labelNodes: {
            get: function() {
                return null === this.wd ? Ya : this.wd.iterator;
            }
        },
        relinkableFrom: {
            get: function() {
                return 0 !== (this.Qa & 1);
            },
            set: function(a1) {
                var b = 0 !== (this.Qa & 1);
                b !== a1 && (this.Qa ^= 1, this.g("relinkableFrom", b, a1), this.Xb());
            }
        },
        relinkableTo: {
            get: function() {
                return 0 !== (this.Qa & 2);
            },
            set: function(a1) {
                var b = 0 !== (this.Qa & 2);
                b !== a1 && (this.Qa ^= 2, this.g("relinkableTo", b, a1), this.Xb());
            }
        },
        resegmentable: {
            get: function() {
                return 0 !== (this.Qa & 4);
            },
            set: function(a1) {
                var b = 0 !== (this.Qa & 4);
                b !== a1 && (this.Qa ^= 4, this.g("resegmentable", b, a1), this.Xb());
            }
        },
        isTreeLink: {
            get: function() {
                return 0 !== (this.Qa & 8);
            },
            set: function(a1) {
                var b = 0 !== (this.Qa & 8);
                b !== a1 && (this.Qa ^= 8, this.g("isTreeLink", b, a1), null !== this.fromNode && Hk(this.fromNode), null !== this.toNode && Hk(this.toNode));
            }
        },
        path: {
            get: function() {
                var a1 = this.Qb();
                return a1 instanceof Bf ? a1 : null;
            }
        },
        routeBounds: {
            get: function() {
                this.vg();
                var a1 = this.ll, b = Infinity, c = Infinity, d = this.pointsCount;
                if (0 === d) a1.h(NaN, NaN, 0, 0);
                else {
                    if (1 === d) d = this.i(0), b = Math.min(d.x, b), c = Math.min(d.y, c), a1.h(d.x, d.y, 0, 0);
                    else if (2 === d) {
                        d = this.i(0);
                        var e = this.i(1);
                        b = Math.min(d.x, e.x);
                        c = Math.min(d.y, e.y);
                        a1.h(d.x, d.y, 0, 0);
                        a1.Ye(e);
                    } else if (this.computeCurve() === bg && 3 <= d && !this.isOrthogonal) {
                        if (e = this.i(0), b = e.x, c = e.y, a1.h(b, c, 0, 0), 3 === d) {
                            d = this.i(1);
                            b = Math.min(d.x, b);
                            c = Math.min(d.y, c);
                            var f = this.i(2);
                            b = Math.min(f.x, b);
                            c = Math.min(f.y, c);
                            K.Cl(e.x, e.y, d.x, d.y, d.x, d.y, f.x, f.y, .5, a1);
                        } else for(f = 3; f < d; f += 3){
                            var g = this.i(f - 2);
                            f + 3 >= d && (f = d - 1);
                            var h = this.i(f - 1), k = this.i(f);
                            K.Cl(e.x, e.y, g.x, g.y, h.x, h.y, k.x, k.y, .5, a1);
                            b = Math.min(k.x, b);
                            c = Math.min(k.y, c);
                            e = k;
                        }
                    } else for(e = this.i(0), f = this.i(1), b = Math.min(e.x, f.x), c = Math.min(e.y, f.y), a1.h(e.x, e.y, 0, 0), a1.Ye(f), e = 2; e < d; e++)f = this.i(e), b = Math.min(f.x, b), c = Math.min(f.y, c), a1.Ye(f);
                    this.ru.h(b - a1.x, c - a1.y);
                }
                return a1;
            }
        },
        midPoint: {
            get: function() {
                this.vg();
                return this.computeMidPoint(new J);
            }
        },
        midAngle: {
            get: function() {
                this.vg();
                return this.computeMidAngle();
            }
        },
        flattenedLengths: {
            get: function() {
                if (null === this.bq) {
                    this.fd || Lp(this);
                    for(var a1 = this.bq = [], b = this.pointsCount, c = 0; c < b - 1; c++){
                        var d = this.i(c);
                        var e = this.i(c + 1);
                        K.$(d.x, e.x) ? (d = e.y - d.y, 0 > d && (d = -d)) : K.$(d.y, e.y) ? (d = e.x - d.x, 0 > d && (d = -d)) : d = Math.sqrt(d.Bf(e));
                        a1.push(d);
                    }
                }
                return this.bq;
            }
        },
        flattenedTotalLength: {
            get: function() {
                var a1 = this.ut;
                if (isNaN(a1)) {
                    for(var b = this.flattenedLengths, c = b.length, d = a1 = 0; d < c; d++)a1 += b[d];
                    this.ut = a1;
                }
                return a1;
            }
        },
        points: {
            get: function() {
                return this.Ob;
            },
            set: function(a1) {
                var b = this.Ob;
                if (b !== a1) {
                    var c = null;
                    if (Array.isArray(a1)) {
                        var d = 0 === a1.length % 2;
                        if (d) {
                            for(var e = 0; e < a1.length; e++)if ("number" !== typeof a1[e] || isNaN(a1[e])) {
                                d = !1;
                                break;
                            }
                        }
                        if (d) for(c = new F, d = 0; d < a1.length / 2; d++)e = new J(a1[2 * d], a1[2 * d + 1]).freeze(), c.add(e);
                        else {
                            d = !0;
                            for(e = 0; e < a1.length; e++){
                                var f = a1[e];
                                if (!za(f) || "number" !== typeof f.x || isNaN(f.x) || "number" !== typeof f.y || isNaN(f.y)) {
                                    d = !1;
                                    break;
                                }
                            }
                            if (d) for(c = new F, d = 0; d < a1.length; d++)e = a1[d], c.add(new J(e.x, e.y).freeze());
                        }
                    } else if (a1 instanceof F) for(c = a1.copy(), a1 = c.iterator; a1.next();)a1.value.freeze();
                    else C("Link.points value is not an instance of List or Array: " + a1);
                    c.freeze();
                    this.Ob = c;
                    this.rc();
                    Lp(this);
                    a1 = this.diagram;
                    null !== a1 && (a1.pi || a1.undoManager.isUndoingRedoing || a1.zs.add(this), a1.animationManager.Ab && Nh(a1.animationManager, this, c));
                    this.g("points", b, c);
                }
            }
        },
        pointsCount: {
            get: function() {
                return this.Ob.count;
            }
        },
        fd: {
            get: function() {
                return 0 !== (this.Qa & 16);
            },
            set: function(a1) {
                0 !== (this.Qa & 16) !== a1 && (this.Qa ^= 16);
            }
        },
        suspendsRouting: {
            get: function() {
                return 0 !== (this.Qa & 32);
            },
            set: function(a1) {
                0 !== (this.Qa & 32) !== a1 && (this.Qa ^= 32);
            }
        },
        computingPoints: {
            get: function() {
                return 0 !== (this.Qa & 64);
            },
            set: function(a1) {
                0 !== (this.Qa & 64) !== a1 && (this.Qa ^= 64);
            }
        },
        defaultFromPoint: {
            get: function() {
                return this.o;
            },
            set: function(a1) {
                this.o = a1.copy();
            }
        },
        defaultToPoint: {
            get: function() {
                return this.u;
            },
            set: function(a1) {
                this.u = a1.copy();
            }
        },
        isOrthogonal: {
            get: function() {
                return 2 === (this.qj.value & 2);
            }
        },
        isAvoiding: {
            get: function() {
                return 4 === (this.qj.value & 4);
            }
        },
        kk: {
            get: function() {
                return 0 !== (this.Qa & 128);
            },
            set: function(a1) {
                0 !== (this.Qa & 128) !== a1 && (this.Qa ^= 128);
            }
        },
        geometry: {
            get: function() {
                if (!this.kk) {
                    this.vg();
                    if (2 > this.pointsCount) return this.kk = !0, this.ua;
                    this.ua = this.makeGeometry();
                }
                return this.ua;
            }
        },
        firstPickIndex: {
            get: function() {
                return 2 >= this.pointsCount ? 0 : this.isOrthogonal || !Pp(this.computeSpot(!0)) ? 1 : 0;
            }
        },
        lastPickIndex: {
            get: function() {
                var a1 = this.pointsCount;
                return 0 === a1 ? 0 : 2 >= a1 ? a1 - 1 : this.isOrthogonal || !Pp(this.computeSpot(!1)) ? a1 - 2 : a1 - 1;
            }
        },
        adjusting: {
            get: function() {
                return this.pk;
            },
            set: function(a1) {
                var b = this.pk;
                b !== a1 && (this.pk = a1, this.g("adjusting", b, a1));
            }
        },
        corner: {
            get: function() {
                return this.Nm;
            },
            set: function(a1) {
                var b = this.Nm;
                b !== a1 && (this.Nm = a1, this.rc(), this.g("corner", b, a1));
            }
        },
        curve: {
            get: function() {
                return this.Pm;
            },
            set: function(a1) {
                var b = this.Pm;
                b !== a1 && (this.Pm = a1, this.bb(), this.rc(), Mp(this, b === Yf || b === Xf || a1 === Yf || a1 === Xf), this.g("curve", b, a1));
            }
        },
        curviness: {
            get: function() {
                return this.Qm;
            },
            set: function(a1) {
                var b = this.Qm;
                b !== a1 && (this.Qm = a1, this.bb(), this.rc(), this.g("curviness", b, a1));
            }
        },
        routing: {
            get: function() {
                return this.qj;
            },
            set: function(a1) {
                var b = this.qj;
                b !== a1 && (this.qj = a1, this.Wf = null, this.bb(), Mp(this, 2 === (b.value & 2) || 2 === (a1.value & 2)), this.g("routing", b, a1));
            }
        },
        smoothness: {
            get: function() {
                return this.oo;
            },
            set: function(a1) {
                var b = this.oo;
                b !== a1 && (this.oo = a1, this.rc(), this.g("smoothness", b, a1));
            }
        },
        key: {
            get: function() {
                var a1 = this.diagram;
                if (null !== a1 && a1.model.ri()) return a1.model.Ac(this.data);
            }
        }
    });
    T.prototype.invalidateOtherJumpOvers = T.prototype.Wo;
    T.prototype.findClosestSegment = T.prototype.ez;
    T.prototype.updateRoute = T.prototype.vg;
    T.prototype.invalidateRoute = T.prototype.bb;
    T.prototype.rollbackRoute = T.prototype.rv;
    T.prototype.commitRoute = T.prototype.zf;
    T.prototype.startRoute = T.prototype.uh;
    T.prototype.clearPoints = T.prototype.Ej;
    T.prototype.removePoint = T.prototype.pv;
    T.prototype.addPointAt = T.prototype.yf;
    T.prototype.addPoint = T.prototype.ne;
    T.prototype.insertPointAt = T.prototype.m;
    T.prototype.insertPoint = T.prototype.Kz;
    T.prototype.setPointAt = T.prototype.L;
    T.prototype.setPoint = T.prototype.dd;
    T.prototype.getPoint = T.prototype.i;
    T.prototype.getOtherPort = T.prototype.Cz;
    T.prototype.getOtherNode = T.prototype.So;
    var Np = null, Op = null, Dp = new E(T, "Normal", 1), lq = new E(T, "Orthogonal", 2), mq = new E(T, "AvoidsNodes", 6), Vp = new E(T, "AvoidsNodesStraight", 7), Zf = new E(T, "None", 0), bg = new E(T, "Bezier", 9), Yf = new E(T, "JumpGap", 10), Xf = new E(T, "JumpOver", 11), Ep = new E(T, "End", 17), Fp = new E(T, "Scale", 18), Gp = new E(T, "Stretch", 19), jn = new E(T, "OrientAlong", 21), an = new E(T, "OrientPlus90", 22), cn = new E(T, "OrientMinus90", 23), Hp = new E(T, "OrientOpposite", 24), kn = new E(T, "OrientUpright", 25), bn = new E(T, "OrientPlus90Upright", 26), dn = new E(T, "OrientMinus90Upright", 27), en = new E(T, "OrientUpright45", 28), Xp = 16, Wp = 14, Yp = 8;
    T.className = "Link";
    T.Normal = Dp;
    T.Orthogonal = lq;
    T.AvoidsNodes = mq;
    T.AvoidsNodesStraight = Vp;
    T.None = Zf;
    T.Bezier = bg;
    T.JumpGap = Yf;
    T.JumpOver = Xf;
    T.End = Ep;
    T.Scale = Fp;
    T.Stretch = Gp;
    T.OrientAlong = jn;
    T.OrientPlus90 = an;
    T.OrientMinus90 = cn;
    T.OrientOpposite = Hp;
    T.OrientUpright = kn;
    T.OrientPlus90Upright = bn;
    T.OrientMinus90Upright = dn;
    T.OrientUpright45 = en;
    T.EndSegmentStep = 8;
    T.CurvinessStart = Xp;
    T.SpacingMin = Wp;
    T.OrthoShortCut = Yp;
    function kq(a1, b, c, d) {
        Qa(this);
        this.Fe = this.pq = !1;
        this.Cs = a1;
        this.Ox = b;
        this.cv = c;
        this.Px = d;
        this.links = [];
    }
    kq.prototype.Rl = function() {
        if (!this.pq) {
            var a1 = this.links;
            0 < a1.length && (a1 = a1[0].diagram, null !== a1 && (a1.ow.add(this), this.Fe = a1.undoManager.isUndoingRedoing));
        }
        this.pq = !0;
    };
    kq.prototype.Nv = function() {
        if (this.pq) {
            this.pq = !1;
            var a1 = this.links;
            if (0 < a1.length) {
                var b = a1[0], c = b.diagram;
                c = null === c || c.pi && !this.Fe;
                this.Fe = !1;
                b.arrangeBundledLinks(a1, c);
                1 === a1.length && (b.Sf = null, a1.length = 0);
            }
            0 === a1.length && (a1 = this.Cs, null !== this && null !== a1.af && a1.af.remove(this), a1 = this.cv, null !== this && null !== a1.af && a1.af.remove(this));
        }
    };
    kq.className = "LinkBundle";
    function lk(a1) {
        Qa(this);
        this.Yx = this.group = null;
        this.us = !0;
        this.abort = !1;
        this.Od = this.Nd = 1;
        this.En = this.Dn = -1;
        this.sc = a1.width;
        this.tc = a1.height;
        this.bc = null;
        this.ei = this.di = 0;
        this.Ns = 11;
        this.Ix = this.Hx = 22;
    }
    lk.prototype.initialize = function(a1) {
        if (!(0 >= a1.width || 0 >= a1.height)) {
            var b = a1.y, c = a1.x + a1.width, d = a1.y + a1.height;
            this.Nd = Math.floor((a1.x - this.sc) / this.sc) * this.sc;
            this.Od = Math.floor((b - this.tc) / this.tc) * this.tc;
            this.Dn = Math.ceil((c + 2 * this.sc) / this.sc) * this.sc;
            this.En = Math.ceil((d + 2 * this.tc) / this.tc) * this.tc;
            a1 = 1 + (Math.ceil((this.Dn - this.Nd) / this.sc) | 0);
            b = 1 + (Math.ceil((this.En - this.Od) / this.tc) | 0);
            if (null === this.bc || this.di < a1 - 1 || this.ei < b - 1) {
                c = [];
                for(d = 0; d <= a1; d++)c[d] = new Uint32Array(b);
                this.bc = c;
                this.di = a1 - 1;
                this.ei = b - 1;
            }
            a1 = nq;
            if (null !== this.bc) for(b = 0; b <= this.di; b++)if (c = this.bc[b], c.fill) c.fill(a1);
            else for(d = 0; d <= this.ei; d++)c[d] = a1;
        }
    };
    function Ak(a1, b, c) {
        return a1.Nd <= b && b <= a1.Dn && a1.Od <= c && c <= a1.En;
    }
    function $p(a1, b, c) {
        if (!Ak(a1, b, c)) return nq;
        b -= a1.Nd;
        b /= a1.sc;
        c -= a1.Od;
        c /= a1.tc;
        return a1.bc[b | 0][c | 0];
    }
    function zk(a1) {
        if (null !== a1.bc) for(var b = 0; b <= a1.di; b++)for(var c = a1.bc[b], d = 0; d <= a1.ei; d++)c[d] >= cq && (c[d] = nq);
    }
    lk.prototype.Xj = function(a1, b, c, d) {
        if (a1 > this.Dn || a1 + c < this.Nd || b > this.En || b + d < this.Od) return !0;
        a1 = (a1 - this.Nd) / this.sc | 0;
        b = (b - this.Od) / this.tc | 0;
        c = Math.max(0, c) / this.sc + 1 | 0;
        var e = Math.max(0, d) / this.tc + 1 | 0;
        0 > a1 && (c += a1, a1 = 0);
        0 > b && (e += b, b = 0);
        if (0 > c || 0 > e) return !0;
        d = Math.min(a1 + c - 1, this.di) | 0;
        for(c = Math.min(b + e - 1, this.ei) | 0; a1 <= d; a1++){
            e = this.bc[a1];
            for(var f = b; f <= c; f++)if (e[f] === Bk) return !1;
        }
        return !0;
    };
    function oq(a1, b, c, d, e, f, g, h, k) {
        if (!(b < f || b > g || c < h || c > k)) {
            var l = b | 0;
            var m = c | 0;
            var n = a1.bc[l][m];
            if (n >= cq && n < aq) for(e ? m += d : l += d, n += 1; f <= l && l <= g && h <= m && m <= k && !(n >= a1.bc[l][m]);)a1.bc[l][m] = n, n += 1, e ? m += d : l += d;
            l = e ? m : l;
            if (e) {
                if (0 < d) for(c += d; c < l; c += d)oq(a1, b, c, 1, !e, f, g, h, k), oq(a1, b, c, -1, !e, f, g, h, k);
                else for(c += d; c > l; c += d)oq(a1, b, c, 1, !e, f, g, h, k), oq(a1, b, c, -1, !e, f, g, h, k);
            } else if (0 < d) for(b += d; b < l; b += d)oq(a1, b, c, 1, !e, f, g, h, k), oq(a1, b, c, -1, !e, f, g, h, k);
            else for(b += d; b > l; b += d)oq(a1, b, c, 1, !e, f, g, h, k), oq(a1, b, c, -1, !e, f, g, h, k);
        }
    }
    function pq(a1, b, c, d, e, f, g, h, k) {
        b |= 0;
        c |= 0;
        var l = Bk, m = cq;
        for(a1.bc[b][c] = m; l === Bk && b > f && b < g && c > h && c < k;)m += 1, a1.bc[b][c] = m, e ? c += d : b += d, l = a1.bc[b][c];
    }
    function qq(a1, b, c, d, e, f, g, h, k) {
        b |= 0;
        c |= 0;
        var l = Bk, m = aq;
        for(a1.bc[b][c] = m; l === Bk && b > f && b < g && c > h && c < k;)a1.bc[b][c] = m, e ? c += d : b += d, l = a1.bc[b][c];
    }
    function Zp(a1, b, c, d, e, f, g) {
        if (null !== a1.bc) {
            a1.abort = !1;
            var h = b.x, k = b.y;
            if (Ak(a1, h, k)) {
                h -= a1.Nd;
                h /= a1.sc;
                k -= a1.Od;
                k /= a1.tc;
                var l = d.x, m = d.y;
                if (Ak(a1, l, m)) {
                    if (l -= a1.Nd, l /= a1.sc, m -= a1.Od, m /= a1.tc, 1 >= Math.abs(h - l) && 1 >= Math.abs(k - m)) a1.abort = !0;
                    else {
                        var n = f.x;
                        d = f.y;
                        b = f.x + f.width;
                        var p = f.y + f.height;
                        n -= a1.Nd;
                        n /= a1.sc;
                        d -= a1.Od;
                        d /= a1.tc;
                        b -= a1.Nd;
                        b /= a1.sc;
                        p -= a1.Od;
                        p /= a1.tc;
                        f = Math.max(0, Math.min(a1.di, n | 0));
                        b = Math.min(a1.di, Math.max(0, b | 0));
                        n = Math.max(0, Math.min(a1.ei, d | 0));
                        p = Math.min(a1.ei, Math.max(0, p | 0));
                        d = a1.bc;
                        h |= 0;
                        k |= 0;
                        l |= 0;
                        m |= 0;
                        var q = 0 === c || 90 === c ? 1 : -1;
                        c = 90 === c || 270 === c;
                        d[h][k] === Bk ? (pq(a1, h, k, q, c, f, b, n, p), pq(a1, h, k, 1, !c, f, b, n, p), pq(a1, h, k, -1, !c, f, b, n, p)) : pq(a1, h, k, q, c, h, k, h, k);
                        d[l][m] === Bk ? (qq(a1, l, m, 0 === e || 90 === e ? 1 : -1, 90 === e || 270 === e, f, b, n, p), qq(a1, l, m, 1, !(90 === e || 270 === e), f, b, n, p), qq(a1, l, m, -1, !(90 === e || 270 === e), f, b, n, p)) : qq(a1, l, m, q, c, l, m, l, m);
                        c = Ea();
                        if (g && rq(a1, l, m, e, h, k, c)) {
                            if (c[0] !== l || c[1] !== m) c.unshift(m), c.unshift(l);
                            if (c[c.length - 2] !== h || c[c.length - 1] !== k) c.push(h), c.push(k);
                            a1 = cq;
                            e = c[c.length - 2];
                            g = c[c.length - 1];
                            d[e][g] = a1++;
                            for(f = c.length - 4; 0 <= f; f -= 2)for(e = c[f + 2], g = c[f + 3], b = c[f], l = c[f + 1]; b > e ? e++ : b < e ? e-- : l > g ? g++ : l < g && g--, d[e][g] = a1++, e !== b || g !== l;);
                        } else oq(a1, h, k, 1, !1, f, b, n, p), oq(a1, h, k, -1, !1, f, b, n, p), oq(a1, h, k, 1, !0, f, b, n, p), oq(a1, h, k, -1, !0, f, b, n, p);
                        Ga(c);
                    }
                }
            }
        }
    }
    function rq(a1, b, c, d, e, f, g) {
        for(var h = a1.bc, k = b, l = c;;){
            if (k === e && l === f) return !0;
            var m = k, n = l;
            if (0 === d) {
                if (m < e) m++;
                else break;
            } else if (90 === d) {
                if (n < f) n++;
                else break;
            } else if (180 === d) {
                if (m > e) m--;
                else break;
            } else if (n > f) n--;
            else break;
            var p = h[m][n];
            if (0 === p || p === sq) break;
            k = m;
            l = n;
        }
        for(;;){
            m = d;
            n = k;
            p = l;
            0 === d ? p < f ? (m = 90, p++) : p > f && (m = 270, p--) : 90 === d ? n < e ? (m = 0, n++) : n > e && (m = 180, n--) : 180 === d ? p < f ? (m = 90, p++) : p > f && (m = 270, p--) : n < e ? (m = 0, n++) : n > e && (m = 180, n--);
            n = h[n][p];
            if (m !== d && 0 !== n && n !== sq) {
                g.push(k);
                g.push(l);
                if (rq(a1, k, l, m, e, f, g)) return !0;
                g.pop();
                g.pop();
            }
            h[k][l] = sq;
            if (0 === d) {
                if (k === b) return !1;
                k--;
            } else if (90 === d) {
                if (l === c) return !1;
                l--;
            } else if (180 === d) {
                if (k === b) return !1;
                k++;
            } else {
                if (l === c) return !1;
                l++;
            }
        }
    }
    ma.Object.defineProperties(lk.prototype, {
        bounds: {
            get: function() {
                return new N(this.Nd, this.Od, this.Dn - this.Nd, this.En - this.Od);
            }
        },
        Go: {
            get: function() {
                return this.sc;
            },
            set: function(a1) {
                0 < a1 && a1 !== this.sc && (this.sc = a1, this.initialize(this.bounds));
            }
        },
        Fo: {
            get: function() {
                return this.tc;
            },
            set: function(a1) {
                0 < a1 && a1 !== this.tc && (this.tc = a1, this.initialize(this.bounds));
            }
        }
    });
    var Bk = 0, cq = 1, aq = 999999, nq = aq + 1, sq = aq + 2;
    lk.className = "PositionArray";
    function Tp() {
        Qa(this);
        this.port = this.node = null;
        this.pe = [];
        this.$o = !1;
    }
    Tp.prototype.toString = function() {
        for(var a1 = this.pe, b = this.node.toString() + " " + a1.length.toString() + ":", c = 0; c < a1.length; c++){
            var d = a1[c];
            null !== d && (b += "\n  " + d.toString());
        }
        return b;
    };
    function tq(a1, b, c, d) {
        b = b.offsetY;
        switch(b){
            case 8:
                return 90;
            case 2:
                return 180;
            case 1:
                return 270;
            case 4:
                return 0;
        }
        switch(b){
            case 9:
                return 180 < c ? 270 : 90;
            case 6:
                return 90 < c && 270 >= c ? 180 : 0;
        }
        a1 = 180 * Math.atan2(a1.height, a1.width) / Math.PI;
        switch(b){
            case 3:
                return c > a1 && c <= 180 + a1 ? 180 : 270;
            case 5:
                return c > 180 - a1 && c <= 360 - a1 ? 270 : 0;
            case 12:
                return c > a1 && c <= 180 + a1 ? 90 : 0;
            case 10:
                return c > 180 - a1 && c <= 360 - a1 ? 180 : 90;
            case 7:
                return 90 < c && c <= 180 + a1 ? 180 : c > 180 + a1 && c <= 360 - a1 ? 270 : 0;
            case 13:
                return 180 < c && c <= 360 - a1 ? 270 : c > a1 && 180 >= c ? 90 : 0;
            case 14:
                return c > a1 && c <= 180 - a1 ? 90 : c > 180 - a1 && 270 >= c ? 180 : 0;
            case 11:
                return c > 180 - a1 && c <= 180 + a1 ? 180 : c > 180 + a1 ? 270 : 90;
        }
        d && 15 !== b && (c -= 15, 0 > c && (c += 360));
        return c > a1 && c < 180 - a1 ? 90 : c >= 180 - a1 && c <= 180 + a1 ? 180 : c > 180 + a1 && c < 360 - a1 ? 270 : 0;
    }
    Tp.prototype.Rl = function() {
        this.pe.length = 0;
    };
    function Up(a1, b) {
        var c = a1.pe;
        if (0 === c.length) {
            a: if (!a1.$o) {
                c = a1.$o;
                a1.$o = !0;
                var d = null, e = a1.node, f = e instanceof pf ? e : null;
                if (null === f || f.isSubGraphExpanded) var g = e.isTreeExpanded ? e.findLinksConnected(a1.port.portId) : e.qx();
                else {
                    if (!f.actualBounds.w()) {
                        a1.$o = c;
                        break a;
                    }
                    d = f;
                    g = d.Lu();
                }
                f = a1.pe.length = 0;
                var h = a1.port.ga(sc, J.alloc()), k = a1.port.ga(Bc, J.alloc());
                e = N.allocAt(h.x, h.y, 0, 0);
                e.Ye(k);
                J.free(h);
                J.free(k);
                h = J.allocAt(e.x + e.width / 2, e.y + e.height / 2);
                k = a1.port.li();
                for(g = g.iterator; g.next();){
                    var l = g.value;
                    if (l.isVisible() && l.fromPort !== l.toPort) {
                        var m = l.fromPort === a1.port || null !== l.fromNode && l.fromNode.Td(d), n = l.computeSpot(m, a1.port);
                        if (n.$c() && (m = m ? l.toPort : l.fromPort, null !== m)) {
                            var p = m.part;
                            if (null !== p) {
                                var q = p.findVisibleNode();
                                null !== q && q !== p && (p = q, m = p.port);
                                m = l.computeOtherPoint(p, m);
                                p = h.ab(m);
                                p -= k;
                                0 > p ? p += 360 : 360 <= p && (p -= 360);
                                n = tq(e, n, p, l.isOrthogonal);
                                0 === n ? (n = 4, 180 < p && (p -= 360)) : 90 === n ? (n = 8, 270 < p && (p -= 360)) : 180 === n ? n = 2 : (n = 1, 90 > p && (p += 360));
                                q = a1.pe[f];
                                void 0 === q ? (q = new uq(l, p, n), a1.pe[f] = q) : (q.link = l, q.angle = p, q.Nc = n);
                                q.hv.set(m);
                                f++;
                            }
                        }
                    }
                }
                J.free(h);
                a1.pe.sort(Tp.prototype.j);
                k = a1.pe.length;
                d = -1;
                for(f = h = 0; f < k; f++)g = a1.pe[f], void 0 !== g && (g.Nc !== d && (d = g.Nc, h = 0), g.To = h, h++);
                d = -1;
                h = 0;
                for(f = k - 1; 0 <= f; f--)k = a1.pe[f], void 0 !== k && (k.Nc !== d && (d = k.Nc, h = k.To + 1), k.Fl = h);
                f = a1.pe;
                n = a1.port;
                d = a1.node.portSpreading;
                h = J.alloc();
                k = J.alloc();
                g = J.alloc();
                l = J.alloc();
                n.ga(sc, h);
                n.ga(uc, k);
                n.ga(Bc, g);
                n.ga(zc, l);
                q = p = m = n = 0;
                if (d === Ap) for(var r = 0; r < f.length; r++){
                    var u = f[r];
                    if (null !== u) {
                        var w = u.link.computeThickness();
                        switch(u.Nc){
                            case 8:
                                p += w;
                                break;
                            case 2:
                                q += w;
                                break;
                            case 1:
                                n += w;
                                break;
                            default:
                            case 4:
                                m += w;
                        }
                    }
                }
                var v = r = 0, y = 1, z = u = 0;
                for(w = 0; w < f.length; w++){
                    var A = f[w];
                    if (null !== A) {
                        if (r !== A.Nc) {
                            r = A.Nc;
                            switch(r){
                                case 8:
                                    var B = g;
                                    v = l;
                                    break;
                                case 2:
                                    B = l;
                                    v = h;
                                    break;
                                case 1:
                                    B = h;
                                    v = k;
                                    break;
                                default:
                                case 4:
                                    B = k, v = g;
                            }
                            u = v.x - B.x;
                            z = v.y - B.y;
                            switch(r){
                                case 8:
                                    p > Math.abs(u) ? (y = Math.abs(u) / p, p = Math.abs(u)) : y = 1;
                                    break;
                                case 2:
                                    q > Math.abs(z) ? (y = Math.abs(z) / q, q = Math.abs(z)) : y = 1;
                                    break;
                                case 1:
                                    n > Math.abs(u) ? (y = Math.abs(u) / n, n = Math.abs(u)) : y = 1;
                                    break;
                                default:
                                case 4:
                                    m > Math.abs(z) ? (y = Math.abs(z) / m, m = Math.abs(z)) : y = 1;
                            }
                            v = 0;
                        }
                        var D = A.Yo;
                        if (d === Ap) {
                            A = A.link.computeThickness();
                            A *= y;
                            D.set(B);
                            switch(r){
                                case 8:
                                    D.x = B.x + u / 2 + p / 2 - v - A / 2;
                                    break;
                                case 2:
                                    D.y = B.y + z / 2 + q / 2 - v - A / 2;
                                    break;
                                case 1:
                                    D.x = B.x + u / 2 - n / 2 + v + A / 2;
                                    break;
                                default:
                                case 4:
                                    D.y = B.y + z / 2 - m / 2 + v + A / 2;
                            }
                            v += A;
                        } else {
                            var M = .5;
                            d === lp && (M = (A.To + 1) / (A.Fl + 1));
                            D.x = B.x + u * M;
                            D.y = B.y + z * M;
                        }
                    }
                }
                J.free(h);
                J.free(k);
                J.free(g);
                J.free(l);
                B = a1.pe;
                for(f = 0; f < B.length; f++)d = B[f], null !== d && (d.Ju = a1.computeEndSegmentLength(d));
                a1.$o = c;
                N.free(e);
            }
            c = a1.pe;
        }
        for(a1 = 0; a1 < c.length; a1++)if (e = c[a1], null !== e && e.link === b) return e;
        return null;
    }
    Tp.prototype.j = function(a1, b) {
        return a1 === b ? 0 : null === a1 ? -1 : null === b ? 1 : a1.Nc < b.Nc ? -1 : a1.Nc > b.Nc ? 1 : a1.angle < b.angle ? -1 : a1.angle > b.angle ? 1 : 0;
    };
    Tp.prototype.computeEndSegmentLength = function(a1) {
        var b = a1.link, c = b.computeEndSegmentLength(this.node, this.port, rc, b.fromPort === this.port), d = a1.To;
        if (0 > d) return c;
        var e = a1.Fl;
        if (1 >= e || !b.isOrthogonal) return c;
        b = a1.hv;
        var f = a1.Yo;
        if (2 === a1.Nc || 8 === a1.Nc) d = e - 1 - d;
        return ((a1 = 2 === a1.Nc || 4 === a1.Nc) ? b.y < f.y : b.x < f.x) ? c + 8 * d : (a1 ? b.y === f.y : b.x === f.x) ? c : c + 8 * (e - 1 - d);
    };
    Tp.className = "Knot";
    function uq(a1, b, c) {
        this.link = a1;
        this.angle = b;
        this.Nc = c;
        this.hv = new J;
        this.Fl = this.To = 0;
        this.Yo = new J;
        this.Ju = 0;
    }
    uq.prototype.toString = function() {
        return this.link.toString() + " " + this.angle.toString() + " " + this.Nc.toString() + ":" + this.To.toString() + "/" + this.Fl.toString() + " " + this.Yo.toString() + " " + this.Ju.toString() + " " + this.hv.toString();
    };
    uq.className = "LinkInfo";
    function ti(a1) {
        Qa(this);
        this.o = this.H = null;
        this.Gh = this.rn = !0;
        this.xn = !1;
        this.zm = new J(0, 0).freeze();
        this.un = !0;
        this.Dm = this.tn = null;
        this.wn = !1;
        this.j = null;
        a1 && Object.assign(this, a1);
    }
    ti.prototype.cloneProtected = function(a1) {
        a1.rn = this.rn;
        a1.Gh = this.Gh;
        a1.xn = this.xn;
        a1.zm.assign(this.zm);
        a1.un = this.un;
        a1.tn = this.tn;
        a1.Dm = this.Dm;
        a1.wn = !0;
    };
    ti.prototype.copy = function() {
        var a1 = new this.constructor;
        this.cloneProtected(a1);
        return a1;
    };
    ti.prototype.qb = function() {};
    ti.prototype.toString = function() {
        var a1 = Ha(this.constructor);
        a1 += "(";
        null !== this.group && (a1 += " in " + this.group);
        null !== this.diagram && (a1 += " for " + this.diagram);
        return a1 + ")";
    };
    ti.prototype.C = function() {
        if (this.isValidLayout) {
            var a1 = this.diagram;
            if (null !== a1 && !a1.undoManager.isUndoingRedoing) {
                var b = a1.animationManager;
                !b.isTicking && (b.defaultAnimation.isAnimating && b.Cc(), this.isOngoing && a1.pi || this.isInitial && !a1.pi) && (this.isValidLayout = !1, a1.ac());
            }
        }
    };
    ti.prototype.createNetwork = function() {
        return new vq(this);
    };
    ti.prototype.makeNetwork = function(a1) {
        var b = this.createNetwork();
        a1 instanceof Q ? (b.lg(a1.nodes, !0), b.lg(a1.links, !0)) : a1 instanceof pf ? b.lg(a1.memberParts) : b.lg(a1.iterator);
        return b;
    };
    ti.prototype.updateParts = function() {
        this.isValidLayout = !0;
        var a1 = this.diagram;
        if (null === a1 && null !== this.network) for(var b = this.network.vertexes.iterator; b.next();){
            var c = b.value.node;
            if (null !== c && (a1 = c.diagram, null !== a1)) break;
        }
        try {
            null !== a1 && a1.Ea("Layout"), this.commitLayout();
        } finally{
            null !== a1 && a1.eb("Layout");
        }
    };
    ti.prototype.commitLayout = function() {
        if (null !== this.network) {
            for(var a1 = this.network.vertexes.iterator; a1.next();)a1.value.commit();
            if (this.isRouting) for(a1 = this.network.edges.iterator; a1.next();)a1.value.commit();
        }
    };
    ti.prototype.doLayout = function(a1) {
        var b = new H;
        a1 instanceof Q ? (wq(this, b, a1.nodes, !0, this.rh, !0, !1, !0), wq(this, b, a1.parts, !0, this.rh, !0, !1, !0)) : a1 instanceof pf ? wq(this, b, a1.memberParts, !1, this.rh, !0, !1, !0) : b.addAll(a1.iterator);
        0 < b.count && (a1 = this.diagram, null !== a1 && a1.Ea("Layout"), this.doMinimalNoNetworkLayout(b), null !== a1 && a1.eb("Layout"));
        this.isValidLayout = !0;
    };
    ti.prototype.doMinimalNoNetworkLayout = function(a1) {
        var b = Math.ceil(Math.sqrt(a1.count));
        this.arrangementOrigin = this.initialOrigin(this.arrangementOrigin);
        var c = this.arrangementOrigin.x, d = c, e = this.arrangementOrigin.y, f = 0, g = 0;
        for(a1 = a1.iterator; a1.next();){
            var h = a1.value;
            xq(h);
            var k = h.measuredBounds, l = k.width;
            k = k.height;
            h.moveTo(d, e);
            h instanceof pf && (h.rh = !1);
            d += Math.max(l, 50) + 20;
            g = Math.max(g, Math.max(k, 50));
            f >= b - 1 ? (f = 0, d = c, e += g + 20, g = 0) : f++;
        }
    };
    ti.prototype.doMinimalNetworkLayout = function() {
        var a1 = Math.ceil(Math.sqrt(this.network.vertexes.count));
        this.arrangementOrigin = this.initialOrigin(this.arrangementOrigin);
        for(var b = this.arrangementOrigin.x, c = b, d = this.arrangementOrigin.y, e = 0, f = 0, g = this.network.vertexes.iterator; g.next();){
            var h = g.value.node;
            if (!(null === h || h instanceof T) && (xq(h), this.rh(h))) {
                var k = h.measuredBounds, l = k.width;
                k = k.height;
                h.moveTo(c, d);
                h instanceof pf && (h.rh = !1);
                c += Math.max(l, 50) + 20;
                f = Math.max(f, Math.max(k, 50));
                e >= a1 - 1 ? (e = 0, c = b, d += f + 20, f = 0) : e++;
            }
        }
    };
    ti.prototype.rh = function(a1) {
        return !a1.location.w() || a1 instanceof pf && a1.rh ? !0 : !1;
    };
    function wq(a1, b, c, d, e, f, g, h) {
        for(c = c.iterator; c.next();){
            var k = c.value;
            d && !k.isTopLevel || null !== e && !e(k) || !k.canLayout() || (f && k instanceof V ? k.isLinkLabel || (k instanceof pf ? null === k.layout ? wq(a1, b, k.memberParts, !1, e, f, g, h) : (xq(k), b.add(k)) : (xq(k), b.add(k))) : g && k instanceof T ? b.add(k) : !h || !k.Zc() || k instanceof V || (xq(k), b.add(k)));
        }
    }
    function xq(a1) {
        var b = a1.actualBounds;
        (0 === b.width || 0 === b.height || isNaN(b.width) || isNaN(b.height)) && a1.Va();
    }
    ti.prototype.ni = function(a1, b) {
        var c = this.boundsComputation;
        if (null !== c) return b || (b = new N), c(a1, this, b);
        if (!b) return a1.actualBounds;
        b.set(a1.actualBounds);
        return b;
    };
    ti.prototype.ex = function(a1) {
        var b = new H;
        a1 instanceof Q ? (wq(this, b, a1.nodes, !0, null, !0, !0, !0), wq(this, b, a1.links, !0, null, !0, !0, !0), wq(this, b, a1.parts, !0, null, !0, !0, !0)) : a1 instanceof pf ? wq(this, b, a1.memberParts, !1, null, !0, !0, !0) : wq(this, b, a1.iterator, !1, null, !0, !0, !0);
        return b;
    };
    ti.prototype.initialOrigin = function(a1) {
        var b = this.group;
        if (null !== b) {
            var c = b.position.copy();
            (isNaN(c.x) || isNaN(c.y)) && c.set(a1);
            b = b.placeholder;
            null !== b && (c = b.ga(sc), (isNaN(c.x) || isNaN(c.y)) && c.set(a1), a1 = b.padding, c.x += a1.left, c.y += a1.top);
            return c;
        }
        return a1;
    };
    ma.Object.defineProperties(ti.prototype, {
        diagram: {
            get: function() {
                return this.H;
            },
            set: function(a1) {
                this.H = a1;
            }
        },
        group: {
            get: function() {
                return this.o;
            },
            set: function(a1) {
                this.o !== a1 && (this.o = a1, null !== a1 && (this.H = a1.diagram));
            }
        },
        isOngoing: {
            get: function() {
                return this.rn;
            },
            set: function(a1) {
                this.rn !== a1 && (this.rn = a1);
            }
        },
        isInitial: {
            get: function() {
                return this.Gh;
            },
            set: function(a1) {
                this.Gh = a1;
                a1 || (this.wn = !0);
            }
        },
        isViewportSized: {
            get: function() {
                return this.xn;
            },
            set: function(a1) {
                this.xn !== a1 && (this.xn = a1) && this.C();
            }
        },
        isRouting: {
            get: function() {
                return this.un;
            },
            set: function(a1) {
                this.un !== a1 && (this.un = a1);
            }
        },
        isRealtime: {
            get: function() {
                return this.tn;
            },
            set: function(a1) {
                this.tn !== a1 && (this.tn = a1);
            }
        },
        isValidLayout: {
            get: function() {
                return this.wn;
            },
            set: function(a1) {
                this.wn !== a1 && (this.wn = a1, a1 || (a1 = this.diagram, null !== a1 && (a1.xh = !0)));
            }
        },
        network: {
            get: function() {
                return this.j;
            },
            set: function(a1) {
                this.j !== a1 && (this.j = a1, null !== a1 && (a1.layout = this));
            }
        },
        boundsComputation: {
            get: function() {
                return this.Dm;
            },
            set: function(a1) {
                this.Dm !== a1 && (this.Dm = a1, this.C());
            }
        },
        arrangementOrigin: {
            get: function() {
                return this.zm;
            },
            set: function(a1) {
                this.zm.D(a1) || (this.zm.assign(a1), this.C());
            }
        }
    });
    ti.prototype.collectParts = ti.prototype.ex;
    ti.prototype.getLayoutBounds = ti.prototype.ni;
    ti.prototype.invalidateLayout = ti.prototype.C;
    ti.className = "Layout";
    function vq(a1) {
        Qa(this);
        this.Sc = a1;
        this.wf = new H;
        this.ye = new H;
        this.Ds = new ob;
        this.ys = new ob;
    }
    vq.prototype.clear = function() {
        if (this.wf) for(var a1 = this.wf.iterator; a1.next();)a1.value.clear();
        if (this.ye) for(a1 = this.ye.iterator; a1.next();)a1.value.clear();
        this.wf = new H;
        this.ye = new H;
        this.Ds = new ob;
        this.ys = new ob;
    };
    vq.prototype.toString = function(a1) {
        void 0 === a1 && (a1 = 0);
        var b = "LayoutNetwork" + (null !== this.layout ? "(" + this.layout.toString() + ")" : "");
        if (0 >= a1) return b;
        b += " vertexes: " + this.wf.count + " edges: " + this.ye.count;
        if (1 < a1) {
            for(var c = this.wf.iterator; c.next();)b += "\n    " + c.value.toString(a1 - 1);
            for(c = this.ye.iterator; c.next();)b += "\n    " + c.value.toString(a1 - 1);
        }
        return b;
    };
    vq.prototype.createVertex = function() {
        return new yq(this);
    };
    vq.prototype.createEdge = function() {
        return new zq(this);
    };
    vq.prototype.lg = function(a1, b, c) {
        if (null !== a1) {
            void 0 === b && (b = !1);
            void 0 === c && (c = null);
            null === c && (c = function(a1) {
                if (a1 instanceof V) return !a1.isLinkLabel;
                if (a1 instanceof T) {
                    var b = a1.fromNode;
                    if (null === b || b.isLinkLabel) return !1;
                    a1 = a1.toNode;
                    return null === a1 || a1.isLinkLabel ? !1 : !0;
                }
                return !1;
            });
            for(a1 = a1.iterator; a1.next();){
                var d = a1.value;
                if (d instanceof V && (!b || d.isTopLevel) && d.canLayout() && c(d)) {
                    if (d instanceof pf && null === d.layout) this.lg(d.memberParts, !1);
                    else if (null === this.ki(d)) {
                        var e = this.createVertex();
                        e.node = d;
                        this.dh(e);
                    }
                }
            }
            for(a1.reset(); a1.next();)if (d = a1.value, d instanceof T && (!b || d.isTopLevel) && d.canLayout() && c(d) && null === this.Ko(d)) {
                var f = d.fromNode;
                e = d.toNode;
                null !== f && null !== e && f !== e && (f = this.findGroupVertex(f), e = this.findGroupVertex(e), null !== f && null !== e && this.Yj(f, e, d));
            }
        }
    };
    vq.prototype.findGroupVertex = function(a1) {
        if (null === a1) return null;
        var b = a1.findVisibleNode();
        if (null === b) return null;
        a1 = this.ki(b);
        if (null !== a1) return a1;
        for(b = b.containingGroup; null !== b;){
            a1 = this.ki(b);
            if (null !== a1) return a1;
            b = b.containingGroup;
        }
        return null;
    };
    t = vq.prototype;
    t.dh = function(a1) {
        if (null !== a1) {
            this.wf.add(a1);
            var b = a1.node;
            null !== b && this.Ds.add(b, a1);
            a1.network = this;
        }
    };
    t.Al = function(a1) {
        if (null === a1) return null;
        var b = this.ki(a1);
        null === b && (b = this.createVertex(), b.node = a1, this.dh(b));
        return b;
    };
    t.Iu = function(a1) {
        if (null !== a1 && Aq(this, a1)) {
            for(var b = a1.tg, c = b.count - 1; 0 <= c; c--){
                var d = b.M(c);
                this.Lj(d);
            }
            b = a1.mg;
            for(a1 = b.count - 1; 0 <= a1; a1--)c = b.M(a1), this.Lj(c);
        }
    };
    function Aq(a1, b) {
        if (null === b) return !1;
        var c = a1.wf.remove(b);
        c && (b = b.node, null !== b && a1.Ds.remove(b));
        return c;
    }
    t.Zy = function(a1) {
        null !== a1 && (a1 = this.ki(a1), null !== a1 && this.Iu(a1));
    };
    t.ki = function(a1) {
        return null === a1 ? null : this.Ds.I(a1);
    };
    t.Ao = function(a1) {
        if (null !== a1) {
            Bq(this, a1);
            var b = a1.toVertex;
            null !== b && b.Bl(a1);
            b = a1.fromVertex;
            null !== b && b.yl(a1);
        }
    };
    function Bq(a1, b) {
        if (null !== b) {
            a1.ye.add(b);
            var c = b.link;
            null !== c && null === a1.Ko(c) && a1.ys.add(c, b);
            b.network = a1;
        }
    }
    t.Dy = function(a1) {
        if (null === a1) return null;
        var b = a1.fromNode, c = a1.toNode, d = this.Ko(a1);
        null === d ? (d = this.createEdge(), d.link = a1, null !== b && (d.fromVertex = this.Al(b)), null !== c && (d.toVertex = this.Al(c)), this.Ao(d)) : (null !== b ? d.fromVertex = this.Al(b) : d.fromVertex = null, null !== c ? d.toVertex = this.Al(c) : d.toVertex = null);
        return d;
    };
    t.Lj = function(a1) {
        if (null !== a1) {
            var b = a1.toVertex;
            null !== b && b.Jl(a1);
            b = a1.fromVertex;
            null !== b && b.Il(a1);
            Cq(this, a1);
        }
    };
    function Cq(a1, b) {
        null !== b && a1.ye.remove(b) && (b = b.link, null !== b && a1.ys.remove(b));
    }
    t.Yy = function(a1) {
        null !== a1 && (a1 = this.Ko(a1), null !== a1 && this.Lj(a1));
    };
    t.Ko = function(a1) {
        return null === a1 ? null : this.ys.I(a1);
    };
    t.Yj = function(a1, b, c) {
        if (null === a1 || null === b) return null;
        if (a1.network === this && b.network === this) {
            var d = this.createEdge();
            d.link = c;
            d.fromVertex = a1;
            d.toVertex = b;
            this.Ao(d);
            return d;
        }
        return null;
    };
    t.fm = function(a1) {
        if (null !== a1) {
            var b = a1.fromVertex, c = a1.toVertex;
            null !== b && null !== c && (b.Il(a1), c.Jl(a1), a1.fm(), b.Bl(a1), c.yl(a1));
        }
    };
    t.Jo = function() {
        for(var a1 = Ea(), b = this.ye.iterator; b.next();){
            var c = b.value;
            c.fromVertex === c.toVertex && a1.push(c);
        }
        b = a1.length;
        for(c = 0; c < b; c++)this.Lj(a1[c]);
        Ga(a1);
    };
    vq.prototype.deleteArtificialVertexes = function() {
        for(var a1 = Ea(), b = this.wf.iterator; b.next();){
            var c = b.value;
            null === c.node && null === c.data && a1.push(c);
        }
        c = a1.length;
        for(b = 0; b < c; b++)this.Iu(a1[b]);
        b = Ea();
        for(c = this.ye.iterator; c.next();){
            var d = c.value;
            null === d.link && null === d.data && b.push(d);
        }
        c = b.length;
        for(d = 0; d < c; d++)this.Lj(b[d]);
        Ga(a1);
        Ga(b);
    };
    function Dq(a1) {
        for(var b = Ea(), c = a1.ye.iterator; c.next();){
            var d = c.value;
            null !== d.fromVertex && null !== d.toVertex || b.push(d);
        }
        c = b.length;
        for(d = 0; d < c; d++)a1.Lj(b[d]);
        Ga(b);
    }
    vq.prototype.Zx = function(a1) {
        void 0 === a1 && (a1 = !0);
        a1 && (this.deleteArtificialVertexes(), Dq(this), this.Jo());
        a1 = new F;
        for(var b = !0; b;){
            b = !1;
            for(var c = this.wf.iterator; c.next();){
                var d = c.value;
                if (0 < d.tg.count || 0 < d.mg.count) {
                    b = this.layout.createNetwork();
                    a1.add(b);
                    Eq(this, b, d);
                    b = !0;
                    break;
                }
            }
        }
        a1.sort(function(a1, b) {
            return null === a1 || null === b || a1 === b ? 0 : b.vertexes.count - a1.vertexes.count;
        });
        return a1;
    };
    function Eq(a1, b, c) {
        if (null !== c && c.network !== b) {
            Aq(a1, c);
            b.dh(c);
            for(var d = c.sourceEdges; d.next();){
                var e = d.value;
                e.network !== b && (Cq(a1, e), Bq(b, e), Eq(a1, b, e.fromVertex));
            }
            for(d = c.destinationEdges; d.next();)c = d.value, c.network !== b && (Cq(a1, c), Bq(b, c), Eq(a1, b, c.toVertex));
        }
    }
    vq.prototype.dz = function() {
        for(var a1 = new H, b = this.wf.iterator; b.next();)a1.add(b.value.node);
        for(b = this.ye.iterator; b.next();)a1.add(b.value.link);
        return a1;
    };
    ma.Object.defineProperties(vq.prototype, {
        layout: {
            get: function() {
                return this.Sc;
            },
            set: function(a1) {
                null !== a1 && (this.Sc = a1);
            }
        },
        vertexes: {
            get: function() {
                return this.wf;
            }
        },
        edges: {
            get: function() {
                return this.ye;
            }
        }
    });
    vq.prototype.findAllParts = vq.prototype.dz;
    vq.prototype.splitIntoSubNetworks = vq.prototype.Zx;
    vq.prototype.deleteSelfEdges = vq.prototype.Jo;
    vq.prototype.reverseEdge = vq.prototype.fm;
    vq.prototype.linkVertexes = vq.prototype.Yj;
    vq.prototype.findEdge = vq.prototype.Ko;
    vq.prototype.deleteLink = vq.prototype.Yy;
    vq.prototype.deleteEdge = vq.prototype.Lj;
    vq.prototype.addLink = vq.prototype.Dy;
    vq.prototype.addEdge = vq.prototype.Ao;
    vq.prototype.findVertex = vq.prototype.ki;
    vq.prototype.deleteNode = vq.prototype.Zy;
    vq.prototype.deleteVertex = vq.prototype.Iu;
    vq.prototype.addNode = vq.prototype.Al;
    vq.prototype.addVertex = vq.prototype.dh;
    vq.prototype.addParts = vq.prototype.lg;
    vq.className = "LayoutNetwork";
    function yq(a1) {
        Qa(this);
        this.ob = a1;
        this.j = new N(0, 0, 10, 10).freeze();
        this.o = new J(5, 5).freeze();
        this.Sh = this.ub = null;
        this.tg = new F;
        this.mg = new F;
    }
    yq.prototype.clear = function() {
        this.Sh = this.ub = null;
        this.tg = new F;
        this.mg = new F;
    };
    yq.prototype.toString = function(a1) {
        void 0 === a1 && (a1 = 0);
        var b = "LayoutVertex#" + bb(this);
        if (0 < a1 && (b += null !== this.node ? "(" + this.node.toString() + ")" : "", 1 < a1)) {
            a1 = "";
            for(var c = !0, d = this.tg.iterator; d.next();){
                var e = d.value;
                c ? c = !1 : a1 += ",";
                a1 += e.toString(0);
            }
            e = "";
            c = !0;
            for(d = this.mg.iterator; d.next();){
                var f = d.value;
                c ? c = !1 : e += ",";
                e += f.toString(0);
            }
            b += " sources: " + a1 + " destinations: " + e;
        }
        return b;
    };
    yq.prototype.commit = function() {
        var a1 = this.ub;
        if (null !== a1) {
            var b = this.bounds, c = a1.bounds;
            za(c) ? (c.x = b.x, c.y = b.y, c.width = b.width, c.height = b.height) : a1.bounds = b.copy();
        } else if (a1 = this.node, null !== a1) {
            b = this.bounds;
            if (!(a1 instanceof pf)) {
                c = N.alloc();
                a1.Va();
                var d = this.network.layout.ni(a1, c), e = a1.locationObject.ga(wc);
                if (d.w() && e.w()) {
                    a1.moveTo(b.x + this.focusX - (e.x - d.x), b.y + this.focusY - (e.y - d.y));
                    N.free(c);
                    return;
                }
                N.free(c);
            }
            a1.moveTo(b.x, b.y);
        }
    };
    yq.prototype.Bl = function(a1) {
        null !== a1 && (this.tg.contains(a1) || this.tg.add(a1));
    };
    yq.prototype.Jl = function(a1) {
        null !== a1 && this.tg.remove(a1);
    };
    yq.prototype.yl = function(a1) {
        null !== a1 && (this.mg.contains(a1) || this.mg.add(a1));
    };
    yq.prototype.Il = function(a1) {
        null !== a1 && this.mg.remove(a1);
    };
    function Fq(a1, b) {
        a1 = a1.Sh;
        b = b.Sh;
        return a1 ? b ? (a1 = a1.text, b = b.text, a1 < b ? -1 : a1 > b ? 1 : 0) : 1 : null !== b ? -1 : 0;
    }
    ma.Object.defineProperties(yq.prototype, {
        sourceEdgesArrayAccess: {
            get: function() {
                return this.tg._dataArray;
            }
        },
        destinationEdgesArrayAccess: {
            get: function() {
                return this.mg._dataArray;
            }
        },
        data: {
            get: function() {
                return this.ub;
            },
            set: function(a1) {
                this.ub = a1;
                if (null !== a1 && a1.bounds) {
                    var b = a1.bounds;
                    a1 = b.x;
                    var c = b.y, d = b.width;
                    b = b.height;
                    this.o.h(d / 2, b / 2);
                    this.j.h(a1, c, d, b);
                }
            }
        },
        node: {
            get: function() {
                return this.Sh;
            },
            set: function(a1) {
                if (this.Sh !== a1) {
                    this.Sh = a1;
                    a1.Va();
                    var b = this.network.layout, c = N.alloc(), d = b.ni(a1, c);
                    b = d.x;
                    var e = d.y, f = d.width;
                    d = d.height;
                    isNaN(b) && (b = 0);
                    isNaN(e) && (e = 0);
                    this.j.h(b, e, f, d);
                    N.free(c);
                    if (!(a1 instanceof pf) && (a1 = a1.locationObject.ga(wc), a1.w())) {
                        this.o.h(a1.x - b, a1.y - e);
                        return;
                    }
                    this.o.h(f / 2, d / 2);
                }
            }
        },
        bounds: {
            get: function() {
                return this.j;
            },
            set: function(a1) {
                this.j.D(a1) || this.j.assign(a1);
            }
        },
        focus: {
            get: function() {
                return this.o;
            },
            set: function(a1) {
                this.o.D(a1) || this.o.assign(a1);
            }
        },
        centerX: {
            get: function() {
                return this.j.x + this.o.x;
            },
            set: function(a1) {
                var b = this.j;
                b.x + this.o.x !== a1 && (b.ka(), b.x = a1 - this.o.x, b.freeze());
            }
        },
        centerY: {
            get: function() {
                return this.j.y + this.o.y;
            },
            set: function(a1) {
                var b = this.j;
                b.y + this.o.y !== a1 && (b.ka(), b.y = a1 - this.o.y, b.freeze());
            }
        },
        focusX: {
            get: function() {
                return this.o.x;
            },
            set: function(a1) {
                var b = this.o;
                b.x !== a1 && (b.ka(), b.x = a1, b.freeze());
            }
        },
        focusY: {
            get: function() {
                return this.o.y;
            },
            set: function(a1) {
                var b = this.o;
                b.y !== a1 && (b.ka(), b.y = a1, b.freeze());
            }
        },
        x: {
            get: function() {
                return this.j.x;
            },
            set: function(a1) {
                var b = this.j;
                b.x !== a1 && (b.ka(), b.x = a1, b.freeze());
            }
        },
        y: {
            get: function() {
                return this.j.y;
            },
            set: function(a1) {
                var b = this.j;
                b.y !== a1 && (b.ka(), b.y = a1, b.freeze());
            }
        },
        width: {
            get: function() {
                return this.j.width;
            },
            set: function(a1) {
                var b = this.j;
                b.width !== a1 && (b.ka(), b.width = a1, b.freeze());
            }
        },
        height: {
            get: function() {
                return this.j.height;
            },
            set: function(a1) {
                var b = this.j;
                b.height !== a1 && (b.ka(), b.height = a1, b.freeze());
            }
        },
        network: {
            get: function() {
                return this.ob;
            },
            set: function(a1) {
                this.ob = a1;
            }
        },
        sourceVertexes: {
            get: function() {
                for(var a1 = new H, b = this.sourceEdges; b.next();)a1.add(b.value.fromVertex);
                return a1.iterator;
            }
        },
        destinationVertexes: {
            get: function() {
                for(var a1 = new H, b = this.destinationEdges; b.next();)a1.add(b.value.toVertex);
                return a1.iterator;
            }
        },
        vertexes: {
            get: function() {
                for(var a1 = new H, b = this.sourceEdges; b.next();)a1.add(b.value.fromVertex);
                for(b = this.destinationEdges; b.next();)a1.add(b.value.toVertex);
                return a1.iterator;
            }
        },
        sourceEdges: {
            get: function() {
                return this.tg.iterator;
            }
        },
        destinationEdges: {
            get: function() {
                return this.mg.iterator;
            }
        },
        edges: {
            get: function() {
                for(var a1 = new F, b = this.sourceEdges; b.next();)a1.add(b.value);
                for(b = this.destinationEdges; b.next();)a1.add(b.value);
                return a1.iterator;
            }
        },
        edgesCount: {
            get: function() {
                return this.tg.count + this.mg.count;
            }
        }
    });
    yq.prototype.deleteDestinationEdge = yq.prototype.Il;
    yq.prototype.addDestinationEdge = yq.prototype.yl;
    yq.prototype.deleteSourceEdge = yq.prototype.Jl;
    yq.prototype.addSourceEdge = yq.prototype.Bl;
    yq.className = "LayoutVertex";
    yq.standardComparer = Fq;
    yq.smartComparer = function(a1, b) {
        if (null !== a1) {
            if (null !== b) {
                a1 = a1.Sh;
                var c = b.Sh;
                if (null !== a1) {
                    if (null !== c) {
                        b = a1.text.toLocaleLowerCase().split(/([+-]?[.]?\d+(?:\.\d*)?(?:e[+-]?\d+)?)/);
                        a1 = c.text.toLocaleLowerCase().split(/([+-]?[.]?\d+(?:\.\d*)?(?:e[+-]?\d+)?)/);
                        for(c = 0; c < b.length; c++)if ("" !== a1[c] && void 0 !== a1[c]) {
                            var d = parseFloat(b[c]), e = parseFloat(a1[c]);
                            if (isNaN(d)) {
                                if (isNaN(e)) {
                                    if (0 !== b[c].localeCompare(a1[c])) return b[c].localeCompare(a1[c]);
                                } else return 1;
                            } else {
                                if (isNaN(e)) return -1;
                                if (0 !== d - e) return d - e;
                            }
                        } else if ("" !== b[c]) return 1;
                        return "" !== a1[c] && void 0 !== a1[c] ? -1 : 0;
                    }
                    return 1;
                }
                return null !== c ? -1 : 0;
            }
            return 1;
        }
        return null !== b ? -1 : 0;
    };
    function zq(a1) {
        Qa(this);
        this.nb = a1;
        this.qd = this.kd = this.Zk = this.ub = null;
    }
    zq.prototype.clear = function() {
        this.qd = this.kd = this.Zk = this.ub = null;
    };
    zq.prototype.toString = function(a1) {
        void 0 === a1 && (a1 = 0);
        var b = "LayoutEdge#" + bb(this);
        0 < a1 && (b += null !== this.Zk ? "(" + this.Zk.toString() + ")" : "", 1 < a1 && (b += " " + (this.kd ? this.kd.toString() : "null") + " --> " + (this.qd ? this.qd.toString() : "null")));
        return b;
    };
    zq.prototype.fm = function() {
        var a1 = this.kd;
        this.kd = this.qd;
        this.qd = a1;
    };
    zq.prototype.commit = function() {};
    zq.prototype.Ax = function(a1) {
        return this.qd === a1 ? this.kd : this.kd === a1 ? this.qd : null;
    };
    ma.Object.defineProperties(zq.prototype, {
        network: {
            get: function() {
                return this.nb;
            },
            set: function(a1) {
                this.nb = a1;
            }
        },
        data: {
            get: function() {
                return this.ub;
            },
            set: function(a1) {
                this.ub !== a1 && (this.ub = a1);
            }
        },
        link: {
            get: function() {
                return this.Zk;
            },
            set: function(a1) {
                this.Zk !== a1 && (this.Zk = a1);
            }
        },
        fromVertex: {
            get: function() {
                return this.kd;
            },
            set: function(a1) {
                this.kd !== a1 && (this.kd = a1);
            }
        },
        toVertex: {
            get: function() {
                return this.qd;
            },
            set: function(a1) {
                this.qd !== a1 && (this.qd = a1);
            }
        }
    });
    zq.prototype.getOtherVertex = zq.prototype.Ax;
    zq.className = "LayoutEdge";
    function Ok(a1) {
        ti.call(this);
        this.isViewportSized = !0;
        this.xo = this.yo = NaN;
        this.yg = new L(NaN, NaN).freeze();
        this.tf = new L(10, 10).freeze();
        this.Kb = Gq;
        this.Sb = Hq;
        this.nd = Iq;
        this.hd = Jq;
        a1 && Object.assign(this, a1);
    }
    la(Ok, ti);
    Ok.prototype.cloneProtected = function(a1) {
        ti.prototype.cloneProtected.call(this, a1);
        a1.yo = this.yo;
        a1.xo = this.xo;
        a1.yg.assign(this.yg);
        a1.tf.assign(this.tf);
        a1.Kb = this.Kb;
        a1.Sb = this.Sb;
        a1.nd = this.nd;
        a1.hd = this.hd;
    };
    Ok.prototype.qb = function(a1) {
        a1.classType === Ok ? a1 === Iq || a1 === Kq || a1 === Lq || a1 === Mq ? this.sorting = a1 : a1 === Hq || a1 === Nq ? this.arrangement = a1 : a1 === Gq || a1 === Oq ? this.alignment = a1 : C("Unknown enum value: " + a1) : ti.prototype.qb.call(this, a1);
    };
    Ok.prototype.doLayout = function(a1) {
        this.arrangementOrigin = this.initialOrigin(this.arrangementOrigin);
        var b = this.ex(a1);
        a1 = this.diagram;
        for(var c = b.copy().iterator; c.next();){
            var d = c.value;
            if (!d.ph() || null === d.fromNode && null === d.toNode) {
                if (d.Va(), d instanceof pf) for(d = d.memberParts; d.next();)b.remove(d.value);
            } else b.remove(d);
        }
        var e = b.Fa();
        if (0 !== e.length) {
            switch(this.sorting){
                case Mq:
                    e.reverse();
                    break;
                case Iq:
                    e.sort(this.comparer);
                    break;
                case Kq:
                    e.sort(this.comparer), e.reverse();
            }
            var f = this.wrappingColumn;
            isNaN(f) && (f = 0);
            var g = this.wrappingWidth;
            isNaN(g) && null !== a1 ? (b = a1.padding, g = Math.max(a1.viewportBounds.width - b.left - b.right, 0)) : g = Math.max(this.wrappingWidth, 0);
            0 >= f && 0 >= g && (f = 1);
            b = this.spacing.width;
            isFinite(b) || (b = 0);
            c = this.spacing.height;
            isFinite(c) || (c = 0);
            null !== a1 && a1.Ea("Layout");
            d = [];
            switch(this.alignment){
                case Oq:
                    var h = b, k = c, l = N.alloc(), m = Math.max(this.cellSize.width, 1);
                    if (!isFinite(m)) for(var n = m = 0; n < e.length; n++){
                        var p = this.ni(e[n], l);
                        m = Math.max(m, p.width);
                    }
                    m = Math.max(m + h, 1);
                    n = Math.max(this.cellSize.height, 1);
                    if (!isFinite(n)) for(p = n = 0; p < e.length; p++){
                        var q = this.ni(e[p], l);
                        n = Math.max(n, q.height);
                    }
                    n = Math.max(n + k, 1);
                    p = this.arrangement;
                    for(var r = q = this.arrangementOrigin.x, u = this.arrangementOrigin.y, w = 0, v = 0, y = 0; y < e.length; y++){
                        var z = e[y], A = this.ni(z, l), B = Math.ceil((A.width + h) / m) * m, D = Math.ceil((A.height + k) / n) * n;
                        switch(p){
                            case Nq:
                                var M = Math.abs(r - A.width);
                                break;
                            default:
                                M = r + A.width;
                        }
                        if (0 < f && w > f - 1 || 0 < g && 0 < w && M - q > g) d.push(new N(0, u, g + h, v)), w = 0, r = q, u += v, v = 0;
                        v = Math.max(v, D);
                        switch(p){
                            case Nq:
                                A = -A.width;
                                break;
                            default:
                                A = 0;
                        }
                        z.moveTo(r + A, u);
                        switch(p){
                            case Nq:
                                r -= B;
                                break;
                            default:
                                r += B;
                        }
                        w++;
                    }
                    d.push(new N(0, u, g + h, v));
                    N.free(l);
                    break;
                case Gq:
                    k = g;
                    m = f;
                    n = b;
                    p = c;
                    g = N.alloc();
                    q = Math.max(this.cellSize.width, 1);
                    f = u = l = 0;
                    h = J.alloc();
                    for(r = 0; r < e.length; r++)v = e[r], w = this.ni(v, g), v = Xo(v, v.locationObject, v.locationSpot, h), l = Math.max(l, v.x), u = Math.max(u, w.width - v.x), f = Math.max(f, v.y);
                    r = this.arrangement;
                    switch(r){
                        case Nq:
                            l += n;
                            break;
                        default:
                            u += n;
                    }
                    q = isFinite(q) ? Math.max(q + n, 1) : Math.max(l + u, 1);
                    var S = v = this.arrangementOrigin.x;
                    y = this.arrangementOrigin.y;
                    u = 0;
                    k >= l && (k -= l);
                    l = z = 0;
                    B = Math.max(this.cellSize.height, 1);
                    A = f = 0;
                    D = !0;
                    w = J.alloc();
                    for(M = 0; M < e.length; M++){
                        var R = e[M], I = this.ni(R, g), G = Xo(R, R.locationObject, R.locationSpot, h);
                        if (0 < u) switch(r){
                            case Nq:
                                S = (S - v - (I.width - G.x)) / q;
                                S = K.$(Math.round(S), S) ? Math.round(S) : Math.floor(S);
                                S = S * q + v;
                                break;
                            default:
                                S = (S - v + G.x) / q, S = K.$(Math.round(S), S) ? Math.round(S) : Math.ceil(S), S = S * q + v;
                        }
                        else switch(r){
                            case Nq:
                                z = S + G.x + I.width;
                                break;
                            default:
                                z = S - G.x;
                        }
                        switch(r){
                            case Nq:
                                var ca = -(S + G.x) + z;
                                break;
                            default:
                                ca = S + I.width - G.x - z;
                        }
                        if (0 < m && u > m - 1 || 0 < k && 0 < u && ca > k) {
                            d.push(new N(0, D ? y - f : y, k + n, A + f + p));
                            for(S = 0; S < u && M !== u; S++){
                                ca = e[M - u + S];
                                var X = Xo(ca, ca.locationObject, ca.locationSpot, w);
                                ca.moveTo(ca.position.x, ca.position.y + f - X.y);
                            }
                            A += p;
                            y = D ? y + A : y + (A + f);
                            u = A = f = 0;
                            S = v;
                            D = !1;
                        }
                        S === v && (l = r === Nq ? Math.max(l, I.width - G.x) : Math.min(l, -G.x));
                        f = Math.max(f, G.y);
                        A = Math.max(A, I.height - G.y);
                        isFinite(B) && (A = Math.max(A, Math.max(I.height, B) - G.y));
                        D ? R.moveTo(S - G.x, y - G.y) : R.moveTo(S - G.x, y);
                        switch(r){
                            case Nq:
                                S -= G.x + n;
                                break;
                            default:
                                S += I.width - G.x + n;
                        }
                        u++;
                    }
                    d.push(new N(0, y, k + n, (D ? A : A + f) + p));
                    if (e.length !== u) for(k = 0; k < u; k++)m = e[e.length - u + k], n = Xo(m, m.locationObject, m.locationSpot, h), m.moveTo(m.position.x, m.position.y + f - n.y);
                    J.free(h);
                    J.free(w);
                    if (r === Nq) for(e = 0; e < d.length; e++)f = d[e], f.width += l, f.x -= l;
                    else for(e = 0; e < d.length; e++)f = d[e], f.x > l && (f.width += f.x - l, f.x = l);
                    N.free(g);
            }
            for(h = f = g = e = 0; h < d.length; h++)k = d[h], e = Math.min(e, k.x), g = Math.min(g, k.y), f = Math.max(f, k.x + k.width);
            this.arrangement === Nq ? this.commitLayers(d, new J(e + b / 2 - (f + e), g - c / 2)) : this.commitLayers(d, new J(e - b / 2, g - c / 2));
            null !== a1 && a1.eb("Layout");
            this.isValidLayout = !0;
        }
    };
    Ok.prototype.commitLayers = function() {};
    function Jq(a1, b) {
        a1 = a1.text;
        b = b.text;
        return a1 < b ? -1 : a1 > b ? 1 : 0;
    }
    ma.Object.defineProperties(Ok.prototype, {
        wrappingWidth: {
            get: function() {
                return this.yo;
            },
            set: function(a1) {
                this.yo !== a1 && (0 < a1 || isNaN(a1)) && (this.yo = a1, this.isViewportSized = isNaN(a1), this.C());
            }
        },
        wrappingColumn: {
            get: function() {
                return this.xo;
            },
            set: function(a1) {
                this.xo !== a1 && (0 < a1 || isNaN(a1)) && (this.xo = a1, this.C());
            }
        },
        cellSize: {
            get: function() {
                return this.yg;
            },
            set: function(a1) {
                this.yg.D(a1) || (this.yg.assign(a1), this.C());
            }
        },
        spacing: {
            get: function() {
                return this.tf;
            },
            set: function(a1) {
                this.tf.D(a1) || (this.tf.assign(a1), this.C());
            }
        },
        alignment: {
            get: function() {
                return this.Kb;
            },
            set: function(a1) {
                this.Kb === a1 || a1 !== Gq && a1 !== Oq || (this.Kb = a1, this.C());
            }
        },
        arrangement: {
            get: function() {
                return this.Sb;
            },
            set: function(a1) {
                this.Sb === a1 || a1 !== Hq && a1 !== Nq || (this.Sb = a1, this.C());
            }
        },
        sorting: {
            get: function() {
                return this.nd;
            },
            set: function(a1) {
                this.nd === a1 || a1 !== Lq && a1 !== Mq && a1 !== Iq && a1 !== Kq || (this.nd = a1, this.C());
            }
        },
        comparer: {
            get: function() {
                return this.hd;
            },
            set: function(a1) {
                this.hd !== a1 && (this.hd = a1, this.C());
            }
        }
    });
    var Oq = new E(Ok, "Position", 0), Gq = new E(Ok, "Location", 1), Hq = new E(Ok, "LeftToRight", 2), Nq = new E(Ok, "RightToLeft", 3), Lq = new E(Ok, "Forward", 4), Mq = new E(Ok, "Reverse", 5), Iq = new E(Ok, "Ascending", 6), Kq = new E(Ok, "Descending", 7);
    Ok.className = "GridLayout";
    Ok.standardComparer = Jq;
    Ok.smartComparer = function(a1, b) {
        if (null !== a1) {
            if (null !== b) {
                a1 = a1.text.toLocaleLowerCase().split(/([+-]?[.]?\d+(?:\.\d*)?(?:e[+-]?\d+)?)/);
                b = b.text.toLocaleLowerCase().split(/([+-]?[.]?\d+(?:\.\d*)?(?:e[+-]?\d+)?)/);
                for(var c = 0; c < a1.length; c++)if ("" !== b[c] && void 0 !== b[c]) {
                    var d = parseFloat(a1[c]), e = parseFloat(b[c]);
                    if (isNaN(d)) {
                        if (isNaN(e)) {
                            if (0 !== a1[c].localeCompare(b[c])) return a1[c].localeCompare(b[c]);
                        } else return 1;
                    } else {
                        if (isNaN(e)) return -1;
                        if (0 !== d - e) return d - e;
                    }
                } else if ("" !== a1[c]) return 1;
                return "" !== b[c] && void 0 !== b[c] ? -1 : 0;
            }
            return 1;
        }
        return null !== b ? -1 : 0;
    };
    Ok.Position = Oq;
    Ok.Location = Gq;
    Ok.LeftToRight = Hq;
    Ok.RightToLeft = Nq;
    Ok.Forward = Lq;
    Ok.Reverse = Mq;
    Ok.Ascending = Iq;
    Ok.Descending = Kq;
    function pi() {
        this.Nn = new H;
        this.Cn = new H;
        this.Pa = new H;
        this.cf = new ob;
        this.bf = new ob;
        this.aj = new ob;
        this.H = null;
        this.sp = !1;
    }
    t = pi.prototype;
    t.clear = function() {
        this.Nn.clear();
        this.Cn.clear();
        this.Pa.clear();
        this.cf.clear();
        this.bf.clear();
        this.aj.clear();
    };
    t.Xe = function(a1) {
        this.H = a1;
    };
    t.oi = function(a1) {
        if (a1 instanceof V) {
            if (this.Nn.add(a1), a1 instanceof pf) {
                var b = a1.containingGroup;
                null === b ? this.H.ai.add(a1) : b.fl.add(a1);
                b = a1.layout;
                null !== b && (b.diagram = this.H);
            }
        } else a1 instanceof T ? this.Cn.add(a1) : a1 instanceof te || this.Pa.add(a1);
        b = a1.data;
        null === b || a1 instanceof te || (a1 instanceof T ? this.bf.add(b, a1) : this.cf.add(b, a1));
    };
    t.qc = function(a1) {
        a1.Dj();
        if (a1 instanceof V) {
            if (this.Nn.remove(a1), a1 instanceof pf) {
                var b = a1.containingGroup;
                null === b ? this.H.ai.remove(a1) : b.fl.remove(a1);
                b = a1.layout;
                null !== b && (b.diagram = null);
            }
        } else a1 instanceof T ? this.Cn.remove(a1) : a1 instanceof te || this.Pa.remove(a1);
        b = a1.data;
        null === b || a1 instanceof te || (a1 instanceof T ? this.bf.remove(b) : this.cf.remove(b));
    };
    t.Wd = function() {
        var a1 = this.H;
        if (null !== a1) {
            for(var b = a1.nodeTemplateMap.iterator; b.next();){
                var c = b.value, d = b.key;
                (!c.Zc() || c instanceof pf) && C('Invalid node template in Diagram.nodeTemplateMap: template for "' + d + '" must be a Node or a simple Part, not a Group or Link: ' + c);
            }
            for(b = a1.groupTemplateMap.iterator; b.next();)c = b.value, d = b.key, c instanceof pf || C('Invalid group template in Diagram.groupTemplateMap: template for "' + d + '" must be a Group, not a normal Node or Link: ' + c);
            for(b = a1.linkTemplateMap.iterator; b.next();)c = b.value, d = b.key, c instanceof T || C('Invalid link template in Diagram.linkTemplateMap: template for "' + d + '" must be a Link, not a normal Node or simple Part: ' + c);
            b = Ea();
            for(c = a1.selection.iterator; c.next();)(d = c.value.data) && b.push(d);
            c = Ea();
            for(a1 = a1.highlighteds.iterator; a1.next();)(d = a1.value.data) && c.push(d);
            a1 = Ea();
            for(d = this.nodes.iterator; d.next();){
                var e = d.value;
                null !== e.data && (a1.push(e.data), a1.push(e.location));
            }
            for(d = this.links.iterator; d.next();)e = d.value, null !== e.data && (a1.push(e.data), a1.push(e.location));
            for(d = this.parts.iterator; d.next();)e = d.value, null !== e.data && (a1.push(e.data), a1.push(e.location));
            this.removeAllModeledParts();
            this.addAllModeledParts();
            for(d = 0; d < b.length; d++)e = this.Lc(b[d]), null !== e && (e.isSelected = !0);
            for(d = 0; d < c.length; d++)e = this.Lc(c[d]), null !== e && (e.isHighlighted = !0);
            for(d = 0; d < a1.length; d += 2)e = this.Lc(a1[d]), null !== e && (e.location = a1[d + 1]);
            Ga(b);
            Ga(c);
            Ga(a1);
        }
    };
    pi.prototype.addAllModeledParts = function() {
        this.addModeledParts(this.diagram.model.nodeDataArray);
    };
    pi.prototype.addModeledParts = function(a1, b) {
        var c = this, d = this.diagram.model;
        a1.forEach(function(a1) {
            d.lb(a1) && Pq(c, a1, !1);
        });
        a1.forEach(function(a1) {
            d.lb(a1) && c.resolveReferencesForData(a1);
        });
        !1 !== b && fk(this.diagram, !1);
    };
    function Pq(a1, b, c) {
        if (void 0 !== b && null !== b && !a1.diagram.undoManager.isUndoingRedoing && !a1.cf.contains(b)) {
            void 0 === c && (c = !0);
            a: {
                if (void 0 !== b && null !== b && !a1.H.undoManager.isUndoingRedoing && !a1.cf.contains(b)) {
                    var d = a1.Qo(b);
                    var e = ip(a1, b, d);
                    if (null !== e && (jg(e), e = e.copy(), null !== e)) {
                        var f = a1.diagram.skipsModelSourceBindings;
                        a1.diagram.skipsModelSourceBindings = !0;
                        e.Tf = d;
                        e.ub = b;
                        a1.sp && (e.Jg = "Tool");
                        a1.diagram.add(e);
                        e.ub = null;
                        e.data = b;
                        a1.diagram.skipsModelSourceBindings = f;
                        d = e;
                        break a;
                    }
                }
                d = null;
            }
            null !== d && c && a1.resolveReferencesForData(b);
        }
    }
    pi.prototype.insertLink = function() {
        return null;
    };
    pi.prototype.resolveReferencesForData = function() {};
    pi.prototype.Qo = function(a1) {
        return this.H.model.Qo(a1);
    };
    function ip(a1, b, c) {
        a1 = a1.H;
        var d = a1.model;
        d.Wj() && d.Yu(b) ? (b = a1.groupTemplateMap.I(c), null === b && (b = a1.groupTemplateMap.I(""), null === b && (Qq || (Qq = !0, ya('No Group template found for category "' + c + '"'), ya("  Using default group template")), b = a1.ly))) : (b = a1.nodeTemplateMap.I(c), null === b && (b = a1.nodeTemplateMap.I(""), null === b && (Rq || (Rq = !0, ya('No Node template found for category "' + c + '"'), ya("  Using default node template")), b = a1.ny)));
        return b;
    }
    pi.prototype.getLinkCategoryForData = function() {
        return "";
    };
    pi.prototype.setLinkCategoryForData = function() {};
    pi.prototype.setFromNodeForLink = function() {};
    pi.prototype.setToNodeForLink = function() {};
    pi.prototype.findLinkTemplateForCategory = function(a1) {
        var b = this.H, c = b.linkTemplateMap.I(a1);
        null === c && (c = b.linkTemplateMap.I(""), null === c && (Sq || (Sq = !0, ya('No Link template found for category "' + a1 + '"'), ya("  Using default link template")), c = b.my));
        return c;
    };
    pi.prototype.removeAllModeledParts = function() {
        this.Fs(this.diagram.model.nodeDataArray);
    };
    pi.prototype.Fs = function(a1) {
        var b = this;
        a1.forEach(function(a1) {
            b.hp(a1);
        });
    };
    pi.prototype.hp = function(a1) {
        a1 = this.Lc(a1);
        null !== a1 && (Nj(this.diagram, a1, !1), this.unresolveReferencesForPart(a1));
    };
    pi.prototype.unresolveReferencesForPart = function() {};
    pi.prototype.removeDataForLink = function() {};
    pi.prototype.findPartForKey = function(a1) {
        if (null === a1 || void 0 === a1) return null;
        a1 = this.H.model.ic(a1);
        return null !== a1 ? this.cf.I(a1) : null;
    };
    pi.prototype.Wb = function(a1) {
        if (null === a1 || void 0 === a1) return null;
        a1 = this.H.model.ic(a1);
        if (null === a1) return null;
        a1 = this.cf.I(a1);
        return a1 instanceof V ? a1 : null;
    };
    pi.prototype.findLinkForKey = function() {
        return null;
    };
    t = pi.prototype;
    t.Lc = function(a1) {
        if (null === a1) return null;
        var b = this.cf.I(a1);
        return null !== b ? b : b = this.bf.I(a1);
    };
    t.ii = function(a1) {
        if (null === a1) return null;
        a1 = this.cf.I(a1);
        return a1 instanceof V ? a1 : null;
    };
    t.Kc = function(a1) {
        return null === a1 ? null : this.bf.I(a1);
    };
    t.ls = function(a1) {
        for(var b = 0; b < arguments.length; ++b);
        b = new H;
        for(var c = this.Nn.iterator; c.next();){
            var d = c.value, e = d.data;
            if (null !== e) for(var f = 0; f < arguments.length; f++){
                var g = arguments[f];
                if (za(g) && Tq(this, e, g)) {
                    b.add(d);
                    break;
                }
            }
        }
        return b.iterator;
    };
    t.ks = function(a1) {
        for(var b = 0; b < arguments.length; ++b);
        b = new H;
        for(var c = this.Cn.iterator; c.next();){
            var d = c.value, e = d.data;
            if (null !== e) for(var f = 0; f < arguments.length; f++){
                var g = arguments[f];
                if (za(g) && Tq(this, e, g)) {
                    b.add(d);
                    break;
                }
            }
        }
        return b.iterator;
    };
    function Tq(a1, b, c) {
        for(var d in c){
            var e = b[d], f = c[d];
            if (Aa(f)) {
                if (!Aa(e) || e.length < f.length) return !1;
                for(var g = 0; g < e.length; g++){
                    var h = f[g];
                    if (void 0 !== h && !Uq(a1, e[g], h)) return !1;
                }
            } else if (!Uq(a1, e, f)) return !1;
        }
        return !0;
    }
    function Uq(a1, b, c) {
        if ("function" === typeof c) {
            if (!c(b)) return !1;
        } else if (c instanceof RegExp) {
            if (!b || !c.test(b.toString())) return !1;
        } else if (za(b) && za(c)) {
            if (!Tq(a1, b, c)) return !1;
        } else if (b !== c) return !1;
        return !0;
    }
    pi.prototype.doModelChanged = function(a1) {
        if (this.H) {
            var b = this.H;
            if (a1.model === b.model) {
                var c = a1.change;
                b.doModelChanged(a1);
                if (b.aa) {
                    b.aa = !1;
                    try {
                        var d = a1.modelChange;
                        if ("" !== d) {
                            if (c === ce) {
                                if ("nodeCategory" === d) {
                                    var e = this.Lc(a1.object), f = a1.newValue;
                                    null !== e && "string" === typeof f && (e.category = f);
                                } else "nodeDataArray" === d && (this.Fs(a1.oldValue), this.addModeledParts(a1.newValue));
                                b.isModified = !0;
                            } else if (c === ee) {
                                var g = a1.newValue;
                                "nodeDataArray" === d && za(g) && Pq(this, g);
                                b.isModified = !0;
                            } else if (c === fe) {
                                var h = a1.oldValue;
                                "nodeDataArray" === d && za(h) && this.hp(h);
                                b.isModified = !0;
                            } else c === de && ("SourceChanged" === d ? null !== a1.object ? this.updateDataBindings(a1.object, a1.propertyName) : (this.qp(), this.updateAllTargetBindings()) : "ModelDisplaced" === d && this.Wd());
                        } else if (c === ce) {
                            var k = a1.propertyName, l = a1.object;
                            if (l === b.model) {
                                if ("nodeKeyProperty" === k || "nodeCategoryProperty" === k) b.undoManager.isUndoingRedoing || this.Wd();
                            } else this.updateDataBindings(l, k);
                            b.isModified = !0;
                        } else if (c === ee || c === fe) {
                            var m = a1.change === ee, n = m ? a1.newParam : a1.oldParam, p = m ? a1.newValue : a1.oldValue, q = this.aj.I(a1.object);
                            if (Array.isArray(q)) for(a1 = 0; a1 < q.length; a1++){
                                var r = q[a1];
                                if (m) Bn(r, p, n, !0);
                                else if (!(0 > n)) {
                                    var u = n + tn(r);
                                    r.qc(u, !0);
                                    En(r, u, n);
                                }
                            }
                            b.isModified = !0;
                        }
                    } finally{
                        b.aa = !0;
                    }
                }
            }
        }
    };
    pi.prototype.updateAllTargetBindings = function(a1) {
        void 0 === a1 && (a1 = "");
        for(var b = this.parts.iterator; b.next();)b.value.La(a1);
        for(b = this.nodes.iterator; b.next();)b.value.La(a1);
        for(b = this.links.iterator; b.next();)b.value.La(a1);
    };
    pi.prototype.qp = function() {
        for(var a1 = this.H.model, b = new H, c = a1.nodeDataArray, d = 0; d < c.length; d++)b.add(c[d]);
        var e = [];
        this.nodes.each(function(a1) {
            null === a1.data || b.contains(a1.data) || e.push(a1.data);
        });
        this.parts.each(function(a1) {
            null === a1.data || b.contains(a1.data) || e.push(a1.data);
        });
        e.forEach(function(b) {
            Vq(a1, b, !1);
        });
        for(d = 0; d < c.length; d++){
            var f = c[d];
            null === this.Lc(f) && Wq(a1, f, !1);
        }
        this.refreshDataBoundLinks();
        for(c = this.parts.iterator; c.next();)c.value.updateRelationshipsFromData();
        for(c = this.nodes.iterator; c.next();)c.value.updateRelationshipsFromData();
        for(c = this.links.iterator; c.next();)c.value.updateRelationshipsFromData();
    };
    pi.prototype.refreshDataBoundLinks = function() {};
    pi.prototype.updateRelationshipsFromData = function() {};
    pi.prototype.updateDataBindings = function(a1, b) {
        if ("string" === typeof b) {
            var c = this.Lc(a1);
            if (null !== c) c.La(b);
            else {
                c = null;
                for(var d = this.aj.iterator; d.next();){
                    for(var e = d.value, f = 0; f < e.length; f++){
                        var g = e[f].sx(a1);
                        null !== g && (null === c && (c = Ea()), c.push(g));
                    }
                    if (null !== c) break;
                }
                if (null !== c) {
                    for(d = 0; d < c.length; d++)c[d].La(b);
                    Ga(c);
                }
            }
            a1 === this.diagram.model.modelData && this.updateAllTargetBindings(b);
        }
    };
    function Jj(a1, b) {
        var c = b.Hh;
        if (Aa(c)) {
            var d = a1.aj.I(c);
            if (null === d) d = [], d.push(b), a1.aj.add(c, d);
            else {
                for(a1 = 0; a1 < d.length; a1++)if (d[a1] === b) return;
                d.push(b);
            }
        }
    }
    function Mj(a1, b, c) {
        Hj(b, function(a1) {
            a1 = a1.O.s;
            for(var b = a1.length, d = 0; d < b; d++)ek(c, a1[d]);
        });
        var d = b.Hh;
        if (Aa(d)) {
            var e = a1.aj.I(d);
            if (null !== e) {
                for(var f = 0; f < e.length; f++)if (e[f] === b) {
                    e.splice(f, 1);
                    0 === e.length && a1.aj.remove(d);
                    break;
                }
            }
        }
    }
    pi.prototype.Jj = function(a1, b, c) {
        void 0 === c && (c = !1);
        var d = new ob;
        if (Aa(a1)) for(var e = 0; e < a1.length; e++)Xq(this, a1[e], b, d, c);
        else for(a1 = a1.iterator; a1.next();)Xq(this, a1.value, b, d, c);
        if (null !== b) {
            c = b.model;
            a1 = b.toolManager.findTool("Dragging");
            a1 = null !== a1 ? a1.dragOptions.dragsLink : b.Vm.dragsLink;
            e = new H;
            for(var f = new ob, g = d.iterator; g.next();){
                var h = g.value;
                if (h instanceof T) a1 || null !== h.fromNode && null !== h.toNode || e.add(h);
                else if (h instanceof V && null !== h.data && c.Sl()) {
                    var k = h;
                    h = g.key;
                    var l = h.pg();
                    null !== l && (l = d.I(l), null !== l ? (c.qe(k.data, c.wa(l.data)), k = b.Kc(k.data), h = h.kh(), null !== h && null !== k && f.add(h, k)) : c.qe(k.data, void 0));
                }
            }
            0 < e.count && b.Hs(e, !1);
            if (0 < f.count) for(c = f.iterator; c.next();)d.add(c.key, c.value);
        }
        if (null !== b && null !== this.H && (b = b.model, c = b.afterCopyFunction, null !== c)) {
            var m = new ob;
            d.each(function(a1) {
                null !== a1.key.data && m.add(a1.key.data, a1.value.data);
            });
            c(m, b, this.H.model);
        }
        for(b = d.iterator; b.next();)b.value.La();
        return d;
    };
    function Xq(a1, b, c, d, e) {
        if (null === b || e && !b.canCopy()) return null;
        if (d.contains(b)) return d.I(b);
        var f = a1.copyPartData(b, c);
        if (!(f instanceof U)) return null;
        f.isSelected = !1;
        f.isHighlighted = !1;
        d.add(b, f);
        if (b instanceof V) {
            for(var g = b.linksConnected; g.next();){
                var h = g.value;
                if (h.fromNode === b) {
                    var k = d.I(h);
                    null !== k && (k.fromNode = f);
                }
                h.toNode === b && (h = d.I(h), null !== h && (h.toNode = f));
            }
            if (b instanceof pf && f instanceof pf) for(b = b.memberParts; b.next();)g = Xq(a1, b.value, c, d, e), g instanceof T || null === g || (g.containingGroup = f);
        } else if (b instanceof T && f instanceof T) for(g = b.fromNode, null !== g && (g = d.I(g), null !== g && (f.fromNode = g)), g = b.toNode, null !== g && (g = d.I(g), null !== g && (f.toNode = g)), b = b.labelNodes; b.next();)g = Xq(a1, b.value, c, d, e), null !== g && g instanceof V && (g.labeledLink = f);
        return f;
    }
    pi.prototype.copyPartData = function(a1, b) {
        var c = null, d = a1.data;
        if (null !== d && null !== b) {
            var e = b.model;
            a1 instanceof T || (d = e.copyNodeData(d), za(d) && (e.xf(d), c = b.Lc(d)));
        } else jg(a1), c = a1.copy(), null !== c && (e = this.H, null !== b ? b.add(c) : null !== d && null !== e && null !== e.commandHandler && e.commandHandler.copiesClipboardData && (b = e.model, e = null, c instanceof T || (e = b.copyNodeData(d)), za(e) && (c.data = e)));
        return c;
    };
    ma.Object.defineProperties(pi.prototype, {
        nodes: {
            get: function() {
                return this.Nn;
            }
        },
        links: {
            get: function() {
                return this.Cn;
            }
        },
        parts: {
            get: function() {
                return this.Pa;
            }
        },
        diagram: {
            get: function() {
                return this.H;
            }
        },
        addsToTemporaryLayer: {
            get: function() {
                return this.sp;
            },
            set: function(a1) {
                this.sp = a1;
            }
        }
    });
    pi.prototype.updateAllRelationshipsFromData = pi.prototype.qp;
    pi.prototype.findLinksByExample = pi.prototype.ks;
    pi.prototype.findNodesByExample = pi.prototype.ls;
    pi.prototype.findLinkForData = pi.prototype.Kc;
    pi.prototype.findNodeForData = pi.prototype.ii;
    pi.prototype.findPartForData = pi.prototype.Lc;
    pi.prototype.findNodeForKey = pi.prototype.Wb;
    pi.prototype.removeModeledPart = pi.prototype.hp;
    pi.prototype.removeModeledParts = pi.prototype.Fs;
    pi.prototype.rebuildParts = pi.prototype.Wd;
    var Rq = !1, Qq = !1, Sq = !1;
    pi.className = "PartManager";
    function Yq(a1) {
        pi.apply(this, arguments);
    }
    la(Yq, pi);
    Yq.prototype.addAllModeledParts = function() {
        var a1 = this.diagram.model;
        this.addModeledParts(a1.nodeDataArray);
        Zq(this, a1.linkDataArray);
    };
    Yq.prototype.addModeledParts = function(a1) {
        pi.prototype.addModeledParts.call(this, a1, !1);
        for(a1 = this.links.iterator; a1.next();)jp(a1.value);
        fk(this.diagram, !1);
    };
    function Zq(a1, b) {
        b.forEach(function(b) {
            $q(a1, b);
        });
        fk(a1.diagram, !1);
    }
    function $q(a1, b) {
        if (void 0 !== b && null !== b && !a1.diagram.undoManager.isUndoingRedoing && !a1.bf.contains(b)) {
            var c = a1.getLinkCategoryForData(b), d = a1.findLinkTemplateForCategory(c);
            if (null !== d) {
                jg(d);
                var e = d.copy();
                if (null !== e) {
                    d = a1.diagram.skipsModelSourceBindings;
                    a1.diagram.skipsModelSourceBindings = !0;
                    e.Tf = c;
                    e.ub = b;
                    c = a1.diagram.model;
                    var f = ar(c, b, !0);
                    "" !== f && (e.fromPortId = f);
                    f = br(c, b, !0);
                    void 0 !== f && (f = a1.Wb(f), f instanceof V && (e.fromNode = f));
                    f = ar(c, b, !1);
                    "" !== f && (e.toPortId = f);
                    f = br(c, b, !1);
                    void 0 !== f && (f = a1.Wb(f), f instanceof V && (e.toNode = f));
                    c = c.Ef(b);
                    Array.isArray(c) && c.forEach(function(b) {
                        b = a1.Wb(b);
                        null !== b && (b.labeledLink = e);
                    });
                    a1.sp && (e.Jg = "Tool");
                    a1.diagram.add(e);
                    e.ub = null;
                    e.data = b;
                    a1.diagram.skipsModelSourceBindings = d;
                }
            }
        }
    }
    Yq.prototype.removeAllModeledParts = function() {
        var a1 = this.diagram.model;
        cr(this, a1.linkDataArray);
        this.Fs(a1.nodeDataArray);
    };
    function cr(a1, b) {
        b.forEach(function(b) {
            a1.hp(b);
        });
    }
    Yq.prototype.getLinkCategoryForData = function(a1) {
        return this.diagram.model.os(a1);
    };
    Yq.prototype.setLinkCategoryForData = function(a1, b) {
        return this.diagram.model.kp(a1, b);
    };
    Yq.prototype.setFromNodeForLink = function(a1, b) {
        var c = this.diagram.model;
        c.wv(a1.data, c.wa(null !== b ? b.data : null));
    };
    Yq.prototype.setToNodeForLink = function(a1, b) {
        var c = this.diagram.model;
        c.Bv(a1.data, c.wa(null !== b ? b.data : null));
    };
    Yq.prototype.removeDataForLink = function(a1) {
        this.diagram.model.am(a1.data);
    };
    Yq.prototype.findPartForKey = function(a1) {
        var b = pi.prototype.findPartForKey.call(this, a1);
        return null === b && (a1 = this.diagram.model.jh(a1), null !== a1) ? this.bf.I(a1) : b;
    };
    Yq.prototype.findLinkForKey = function(a1) {
        if (null === a1 || void 0 === a1) return null;
        a1 = this.diagram.model.jh(a1);
        return null !== a1 ? this.bf.I(a1) : null;
    };
    Yq.prototype.doModelChanged = function(a1) {
        var b = this;
        pi.prototype.doModelChanged.call(this, a1);
        if (this.diagram) {
            var c = this.diagram;
            if (a1.model === c.model) {
                var d = a1.change;
                if (c.aa) {
                    c.aa = !1;
                    try {
                        var e = a1.modelChange;
                        if ("" !== e) {
                            if (d === ce) {
                                if ("linkFromKey" === e) {
                                    var f = this.Kc(a1.object);
                                    if (null !== f) {
                                        var g = this.Wb(a1.newValue);
                                        f.fromNode = g;
                                    }
                                } else if ("linkToKey" === e) {
                                    var h = this.Kc(a1.object);
                                    if (null !== h) {
                                        var k = this.Wb(a1.newValue);
                                        h.toNode = k;
                                    }
                                } else if ("linkFromPortId" === e) {
                                    var l = this.Kc(a1.object);
                                    if (null !== l) {
                                        var m = a1.newValue;
                                        "string" === typeof m && (l.fromPortId = m);
                                    }
                                } else if ("linkToPortId" === e) {
                                    var n = this.Kc(a1.object);
                                    if (null !== n) {
                                        var p = a1.newValue;
                                        "string" === typeof p && (n.toPortId = p);
                                    }
                                } else if ("nodeGroupKey" === e) {
                                    var q = this.Lc(a1.object);
                                    if (null !== q) {
                                        var r = a1.newValue;
                                        if (void 0 !== r) {
                                            var u = this.Wb(r);
                                            u instanceof pf ? q.containingGroup = u : q.containingGroup = null;
                                        } else q.containingGroup = null;
                                    }
                                } else if ("linkLabelKeys" === e) {
                                    var w = this.Kc(a1.object);
                                    if (null !== w) {
                                        var v = a1.oldValue, y = a1.newValue;
                                        Array.isArray(v) && v.forEach(function(a1) {
                                            0 <= y.indexOf(a1) || (a1 = b.Wb(a1), null !== a1 && (a1.labeledLink = null));
                                        });
                                        Array.isArray(y) && y.forEach(function(a1) {
                                            a1 = b.Wb(a1);
                                            null !== a1 && (a1.labeledLink = w);
                                        });
                                    }
                                } else if ("linkCategory" === e) {
                                    var z = this.Kc(a1.object), A = a1.newValue;
                                    null !== z && "string" === typeof A && (z.category = A);
                                } else "linkDataArray" === e && (cr(this, a1.oldValue), Zq(this, a1.newValue));
                                c.isModified = !0;
                            } else if (d === ee) {
                                var B = a1.newValue;
                                if ("linkDataArray" === e && "object" === typeof B && null !== B) $q(this, B);
                                else if ("linkLabelKeys" === e && dr(B)) {
                                    var D = this.Kc(a1.object), M = this.Wb(B);
                                    null !== D && null !== M && (M.labeledLink = D);
                                }
                                c.isModified = !0;
                            } else if (d === fe) {
                                var S = a1.oldValue;
                                if ("linkDataArray" === e && "object" === typeof S && null !== S) this.hp(S);
                                else if ("linkLabelKeys" === e && dr(S)) {
                                    var R = this.Wb(S);
                                    null !== R && (R.labeledLink = null);
                                }
                                c.isModified = !0;
                            }
                        } else if (d === ce) {
                            var I = a1.propertyName;
                            a1.object !== c.model || "linkFromKeyProperty" !== I && "linkToKeyProperty" !== I && "linkFromPortIdProperty" !== I && "linkToPortIdProperty" !== I && "linkLabelKeysProperty" !== I && "nodeIsGroupProperty" !== I && "nodeGroupKeyProperty" !== I && "linkCategoryProperty" !== I || c.undoManager.isUndoingRedoing || this.Wd();
                            c.isModified = !0;
                        }
                    } finally{
                        c.aa = !0;
                    }
                }
            }
        }
    };
    Yq.prototype.refreshDataBoundLinks = function() {
        var a1 = this, b = this.diagram.model, c = new H, d = b.linkDataArray;
        d.forEach(function(a1) {
            c.add(a1);
        });
        var e = [];
        this.links.each(function(a1) {
            null === a1.data || c.contains(a1.data) || e.push(a1.data);
        });
        e.forEach(function(a1) {
            er(b, a1, !1);
        });
        d.forEach(function(c) {
            null === a1.Kc(c) && fr(b, c, !1);
        });
    };
    Yq.prototype.updateRelationshipsFromData = function(a1) {
        var b = a1.data;
        if (null !== b) {
            var c = a1.diagram;
            if (null !== c) {
                var d = c.model;
                if (a1 instanceof T) {
                    var e = br(d, b, !0);
                    e = c.Wb(e);
                    a1.fromNode = e;
                    e = br(d, b, !1);
                    e = c.Wb(e);
                    a1.toNode = e;
                    b = d.Ef(b);
                    if (0 < b.length || 0 < a1.labelNodes.count) {
                        if (1 === b.length && 1 === a1.labelNodes.count) {
                            e = b[0];
                            var f = a1.labelNodes.first();
                            if (d.wa(f.data) === e) return;
                        }
                        e = (new H).addAll(b);
                        var g = new H;
                        a1.labelNodes.each(function(a1) {
                            null !== a1.data && (a1 = d.wa(a1.data), void 0 !== a1 && g.add(a1));
                        });
                        b = g.copy();
                        b.gp(e);
                        e = e.copy();
                        e.gp(g);
                        if (0 < b.count || 0 < e.count) b.each(function(b) {
                            b = c.Wb(b);
                            null !== b && b.labeledLink === a1 && (b.labeledLink = null);
                        }), e.each(function(b) {
                            b = c.Wb(b);
                            null !== b && b.labeledLink !== a1 && (b.labeledLink = a1);
                        });
                    }
                } else !(a1 instanceof te) && (b = d.lh(b), b = c.findPartForKey(b), null === b || b instanceof pf) && (a1.containingGroup = b);
            }
        }
    };
    Yq.prototype.resolveReferencesForData = function(a1) {
        var b = this.diagram.model, c = b.wa(a1);
        if (void 0 !== c) {
            var d = gr(b, c), e = this.Lc(a1);
            if (null !== d && null !== e) {
                d = d.iterator;
                for(var f = {}; d.next();){
                    var g = d.value;
                    b.lb(g) ? e instanceof pf && b.lh(g) === c && (g = this.Lc(g), null !== g && (g.containingGroup = e)) : (f.link = this.Kc(g), null !== f.link && e instanceof V && (br(b, g, !0) === c && (f.link.fromNode = e), br(b, g, !1) === c && (f.link.toNode = e), g = b.Ef(g), Array.isArray(g) && g.some(function(a1) {
                        return function(b) {
                            return b === c ? (e.labeledLink = a1.link, !0) : !1;
                        };
                    }(f))));
                    f = {
                        link: f.link
                    };
                }
                hr(b, c);
            }
            a1 = b.lh(a1);
            void 0 !== a1 && (a1 = this.Wb(a1), a1 instanceof pf && (e.containingGroup = a1));
        }
    };
    Yq.prototype.unresolveReferencesForPart = function(a1) {
        var b = this.diagram.model;
        if (a1 instanceof V) {
            var c = b.wa(a1.data);
            if (void 0 !== c) {
                for(var d = a1.linksConnected; d.next();)ir(b, c, d.value.data);
                a1.isLinkLabel && (d = a1.labeledLink, null !== d && ir(b, c, d.data));
                if (a1 instanceof pf) for(a1 = a1.memberParts; a1.next();)d = a1.value.data, b.lb(d) && ir(b, c, d);
            }
        }
    };
    Yq.prototype.copyPartData = function(a1, b) {
        var c = pi.prototype.copyPartData.call(this, a1, b);
        if (a1 instanceof T) {
            if (a1 = a1.data, null !== a1 && null !== b) {
                var d = b.model;
                a1 = d.Io(a1);
                "object" === typeof a1 && null !== a1 && (d.fi(a1), c = b.Kc(a1));
            } else null !== c && (b = this.diagram, null !== a1 && null !== b && null !== b.commandHandler && b.commandHandler.copiesClipboardData && (b = b.model.Io(a1), "object" === typeof b && null !== b && (c.data = b)));
        }
        return c;
    };
    Yq.prototype.insertLink = function(a1, b, c, d) {
        var e = this.diagram, f = e.model, g = e.toolManager.findTool("Linking"), h = "";
        null !== a1 && (null === b && (b = a1), h = b.portId, null === h && (h = ""));
        b = "";
        null !== c && (null === d && (d = c), b = d.portId, null === b && (b = ""));
        d = g.archetypeLinkData;
        if (d instanceof T) {
            if (jg(d), f = d.copy(), null !== f) return f.fromNode = a1, f.fromPortId = h, f.toNode = c, f.toPortId = b, e.add(f), a1 = g.archetypeLabelNodeData, a1 instanceof V && (jg(a1), a1 = a1.copy(), null !== a1 && (a1.labeledLink = f, e.add(a1))), f;
        } else if (null !== d && (d = f.Io(d), "object" === typeof d && null !== d)) return null !== a1 && jr(f, d, f.wa(a1.data), !0), kr(f, d, h, !0), null !== c && jr(f, d, f.wa(c.data), !1), kr(f, d, b, !1), f.fi(d), a1 = g.archetypeLabelNodeData, null === a1 || a1 instanceof V || (a1 = f.copyNodeData(a1), "object" === typeof a1 && null !== a1 && (f.xf(a1), a1 = f.wa(a1), void 0 !== a1 && f.Au(d, a1))), e.Kc(d);
        return null;
    };
    Yq.prototype.findLinkForKey = Yq.prototype.findLinkForKey;
    Yq.prototype.findPartForKey = Yq.prototype.findPartForKey;
    Yq.prototype.removeAllModeledParts = Yq.prototype.removeAllModeledParts;
    Yq.prototype.addModeledParts = Yq.prototype.addModeledParts;
    Yq.prototype.addAllModeledParts = Yq.prototype.addAllModeledParts;
    Yq.className = "GraphLinksPartManager";
    function lr() {
        pi.apply(this, arguments);
        this.Sg = null;
    }
    la(lr, pi);
    function mr(a1, b, c) {
        if (null !== b && null !== c && null === c.kh()) {
            var d = a1.diagram.toolManager.findTool("Linking"), e = b, f = c;
            a1.diagram.isTreePathToChildren || (e = c, f = b);
            if (null === d || !Ff(d, e, f, null, !0)) {
                if (b = a1.getLinkCategoryForData(c.data), d = a1.findLinkTemplateForCategory(b), null !== d && (jg(d), d = d.copy(), null !== d)) {
                    var g = a1.diagram.skipsModelSourceBindings;
                    a1.diagram.skipsModelSourceBindings = !0;
                    d.Tf = b;
                    d.ub = c.data;
                    d.fromNode = e;
                    d.toNode = f;
                    a1.diagram.add(d);
                    d.ub = null;
                    d.data = c.data;
                    a1.diagram.skipsModelSourceBindings = g;
                }
            }
        }
    }
    lr.prototype.getLinkCategoryForData = function(a1) {
        return this.diagram.model.rs(a1);
    };
    lr.prototype.setLinkCategoryForData = function(a1, b) {
        this.diagram.model.Ls(a1, b);
    };
    lr.prototype.setFromNodeForLink = function(a1, b, c) {
        var d = this.diagram.model;
        void 0 === c && (c = null);
        b = null !== b ? b.data : null;
        if (this.diagram.isTreePathToChildren) d.qe(a1.data, d.wa(b));
        else {
            var e = this.Sg;
            this.Sg = a1;
            null !== c && d.qe(c.data, void 0);
            d.qe(b, d.wa(null !== a1.toNode ? a1.toNode.data : null));
            this.Sg = e;
        }
    };
    lr.prototype.setToNodeForLink = function(a1, b, c) {
        var d = this.diagram.model;
        void 0 === c && (c = null);
        b = null !== b ? b.data : null;
        if (this.diagram.isTreePathToChildren) {
            var e = this.Sg;
            this.Sg = a1;
            null !== c && d.qe(c.data, void 0);
            d.qe(b, d.wa(null !== a1.fromNode ? a1.fromNode.data : null));
            this.Sg = e;
        } else d.qe(a1.data, d.wa(b));
    };
    lr.prototype.removeDataForLink = function(a1) {
        this.diagram.model.qe(a1.data, void 0);
    };
    lr.prototype.findLinkForKey = function(a1) {
        if (null === a1 || void 0 === a1) return null;
        a1 = this.diagram.model.ic(a1);
        return null !== a1 ? this.bf.I(a1) : null;
    };
    lr.prototype.doModelChanged = function(a1) {
        pi.prototype.doModelChanged.call(this, a1);
        if (this.diagram) {
            var b = this.diagram;
            if (a1.model === b.model) {
                var c = a1.change;
                if (b.aa) {
                    b.aa = !1;
                    try {
                        var d = a1.modelChange;
                        if ("" !== d) {
                            if (c === ce) {
                                if ("nodeParentKey" === d) {
                                    var e = a1.object, f = this.Wb(a1.newValue), g = this.ii(e);
                                    if (null !== this.Sg) null !== f && (this.Sg.data = e, this.Sg.category = this.getLinkCategoryForData(e));
                                    else if (null !== g) {
                                        var h = g.kh();
                                        null !== h ? null === f ? b.remove(h) : b.isTreePathToChildren ? h.fromNode = f : h.toNode = f : mr(this, f, g);
                                    }
                                } else if ("parentLinkCategory" === d) {
                                    var k = this.ii(a1.object), l = a1.newValue;
                                    if (null !== k && "string" === typeof l) {
                                        var m = k.kh();
                                        null !== m && (m.category = l);
                                    }
                                }
                                b.isModified = !0;
                            }
                        } else if (c === ce) {
                            var n = a1.propertyName;
                            a1.object === b.model && "nodeParentKeyProperty" === n && (b.undoManager.isUndoingRedoing || this.Wd());
                            b.isModified = !0;
                        }
                    } finally{
                        b.aa = !0;
                    }
                }
            }
        }
    };
    lr.prototype.updateRelationshipsFromData = function(a1) {
        var b = a1.data;
        if (null !== b) {
            var c = a1.diagram;
            if (null !== c) {
                var d = c.model;
                a1 instanceof V && (b = d.mh(b), b = c.Wb(b), d = a1.pg(), b !== d && (d = a1.kh(), null !== b ? null !== d ? c.isTreePathToChildren ? d.fromNode = b : d.toNode = b : mr(this, b, a1) : null !== d && Nj(c, d, !1)));
            }
        }
    };
    lr.prototype.updateDataBindings = function(a1, b) {
        pi.prototype.updateDataBindings.call(this, a1, b);
        "string" === typeof b && null !== this.Lc(a1) && (a1 = this.Kc(a1), null !== a1 && a1.La(b));
    };
    lr.prototype.resolveReferencesForData = function(a1) {
        var b = this.diagram.model, c = b.wa(a1);
        if (void 0 !== c) {
            var d = gr(b, c), e = this.Lc(a1);
            if (null !== d && null !== e) {
                for(d = d.iterator; d.next();){
                    var f = d.value;
                    b.lb(f) && e instanceof V && b.mh(f) === c && mr(this, e, this.ii(f));
                }
                hr(b, c);
            }
            a1 = b.mh(a1);
            void 0 !== a1 && e instanceof V && (a1 = this.Wb(a1), mr(this, a1, e));
        }
    };
    lr.prototype.unresolveReferencesForPart = function(a1) {
        var b = this.diagram.model;
        if (a1 instanceof V) {
            var c = b.wa(a1.data), d = this.Kc(a1.data);
            if (null !== d) {
                d.isSelected = !1;
                d.isHighlighted = !1;
                var e = d.layer;
                if (null !== e) {
                    var f = e.qc(-1, d, !1);
                    0 <= f && this.diagram.cb(fe, "parts", e, d, null, f, null);
                    f = d.layerChanged;
                    null !== f && f(d, e, null);
                }
            }
            d = this.diagram.isTreePathToChildren;
            for(a1 = a1.linksConnected; a1.next();)e = a1.value, e = (d ? e.toNode : e.fromNode).data, b.lb(e) && ir(b, c, e);
        }
    };
    lr.prototype.insertLink = function(a1, b, c) {
        b = this.diagram.model;
        var d = a1, e = c;
        this.diagram.isTreePathToChildren || (d = c, e = a1);
        return null !== d && null !== e ? (b.qe(e.data, b.wa(d.data)), e.kh()) : null;
    };
    lr.prototype.findLinkForKey = lr.prototype.findLinkForKey;
    lr.className = "TreePartManager";
    function Z(a1, b) {
        this.jl = new H;
        this.hl = new H;
        this.Wv = ',\n  "insertedNodeKeys": ';
        this.jy = ',\n  "modifiedNodeData": ';
        this.Yv = ',\n  "removedNodeKeys": ';
        this.vh = null;
        Qa(this);
        this.Rm = this.xa = "";
        this.Gg = !1;
        this.j = {};
        this.Tc = [];
        this.kb = new ob;
        this.Th = "key";
        this.Ak = this.al = null;
        this.Im = this.Jm = !1;
        this.Lm = !0;
        this.wm = null;
        this.lj = "category";
        this.Vf = new ob;
        this.Kt = new F;
        this.Wg = !1;
        this.o = null;
        this.undoManager = new he;
        void 0 !== a1 && (Aa(a1) ? this.nodeDataArray = a1 : b = a1);
        b && (Object.assign(this, b), a1 = b.Changed) && (delete this.Changed, this.Pe(a1));
    }
    Z.prototype.cloneProtected = function(a1) {
        a1.xa = this.xa;
        a1.Rm = this.Rm;
        a1.Gg = this.Gg;
        a1.Th = this.Th;
        a1.al = this.al;
        a1.Ak = this.Ak;
        a1.Jm = this.Jm;
        a1.Im = this.Im;
        a1.Lm = this.Lm;
        a1.wm = this.wm;
        a1.lj = this.lj;
    };
    Z.prototype.copy = function() {
        var a1 = new this.constructor;
        this.cloneProtected(a1);
        return a1;
    };
    Z.prototype.clear = function() {
        this.Tc = [];
        this.kb.clear();
        this.Vf.clear();
        this.undoManager.clear();
    };
    Z.prototype.toString = function(a1) {
        void 0 === a1 && (a1 = 0);
        if (1 < a1) return this.mp();
        var b = ("" !== this.name ? this.name : "") + " Model";
        if (0 < a1) {
            b += "\n node data:";
            a1 = this.nodeDataArray;
            for(var c = a1.length, d = 0; d < c; d++){
                var e = a1[d];
                b += " " + this.wa(e) + ":" + Ia(e);
            }
        }
        return b;
    };
    Z.prototype.xA = function(a1) {
        a1.change !== de && C("Model.toIncrementalData argument is not a Transaction ChangedEvent:" + a1.toString());
        var b = a1.object;
        if (!(a1.isTransactionFinished && b instanceof ge)) return null;
        nr(this, b);
        a1 = this.Qv(b, "FinishedUndo" === a1.propertyName);
        this.vh = null;
        return a1;
    };
    Z.prototype.Qv = function(a1, b) {
        var c = this, d = !1, e = new H, f = new H, g = new H, h = this.vh;
        a1.changes.each(function(a1) {
            a1.model === c && ("nodeDataArray" === a1.modelChange ? a1.change === ee ? e.add(a1.newValue) : a1.change === fe && g.add(a1.oldValue) : c.lb(a1.object) ? f.add(a1.object) : a1.change !== ce || c.modelData !== a1.object && "modelData" !== a1.propertyName ? null !== a1.object && (h && h.contains(a1.object) ? h.get(a1.object).each(function(a1) {
                c.lb(a1) && f.add(a1);
            }) : a1.object instanceof Z || c.ri() && c.Jc(a1.object) || or(c, a1.object).each(function(a1) {
                f.add(a1);
            })) : d = !0);
        });
        var k = this.hl;
        k.clear();
        e.each(function(a1) {
            k.add(c.wa(a1));
            b || f.add(a1);
        });
        var l = this.jl;
        l.clear();
        g.each(function(a1) {
            l.add(c.wa(a1));
            b && f.add(a1);
        });
        a1 = c.cloneDeep(f.Fa());
        var m = null;
        d && (null === m && (m = {}), m.modelData = this.cloneDeep(this.modelData));
        0 < k.count && (null === m && (m = {}), b ? m.removedNodeKeys = k.Fa() : m.insertedNodeKeys = k.Fa());
        0 < a1.length && (null === m && (m = {}), m.modifiedNodeData = a1);
        0 < l.count && (null === m && (m = {}), b ? m.insertedNodeKeys = l.Fa() : m.removedNodeKeys = l.Fa());
        l.clear();
        k.clear();
        return m;
    };
    Z.prototype.cloneDeep = function(a1) {
        return pr(this, a1, !0);
    };
    function pr(a1, b, c, d, e, f) {
        function g(a1, c) {
            h ? (void 0 === a1.__gohashid && f.push(a1), d.set(a1, c)) : (a1 = jb++, d.set(a1, c), e.set(a1, b));
        }
        if (!za(b)) return b;
        f || (f = []);
        var h = Object.isExtensible(b);
        d || (d = new ob);
        if (h) {
            var k = d.get(b);
            if (k) return k;
        } else for(e || (e = new ob), k = e.iterator; k.next();){
            var l = k.key;
            if (k.value === b && (l = d.get(l))) return l;
        }
        if (Array.isArray(b)) {
            k = [];
            g(b, k);
            for(var m = 0; m < b.length; m++)k.push(pr(a1, b[m], !1, d, e, f));
        } else if (b instanceof J || b instanceof L || b instanceof N || b instanceof dc || b instanceof O) k = b.copy(), g(b, k);
        else {
            if (b instanceof ql || b instanceof P || b instanceof E) return b;
            if (b instanceof F) k = (new F).addAll(pr(a1, b.Fa(), !1, d, e, f)), g(b, k);
            else if (b instanceof H) k = (new H).addAll(pr(a1, b.Fa(), !1, d, e, f)), g(b, k);
            else if (b instanceof ob) k = (new ob).addAll(pr(a1, b.Fa(), !1, d, e, f)), g(b, k);
            else if (b instanceof Date) k = new Date(b.getTime()), g(b, k);
            else if (b instanceof RegExp) k = new RegExp(b), g(b, k), k.lastIndex = b.lastIndex;
            else if ("function" === typeof b.copy) k = b.copy(), g(b, k);
            else for(m in k = {}, g(b, k), b)"__gohashid" !== m && (k[m] = pr(a1, b[m], !1, d, e, f));
        }
        c && f.forEach(function(a1) {
            delete a1.__gohashid;
        });
        return k;
    }
    t = Z.prototype;
    t.quote = function(a1) {
        return JSON.stringify(a1).replace(/[\u007F-\uFFFF]/g, function(a1) {
            return "\\u" + ("0000" + a1.charCodeAt(0).toString(16)).substr(-4);
        });
    };
    t.qm = function() {
        var a1 = "";
        "" !== this.name && (a1 += ',\n  "name": ' + this.quote(this.name));
        "" !== this.dataFormat && (a1 += ',\n  "dataFormat": ' + this.quote(this.dataFormat));
        this.isReadOnly && (a1 += ',\n  "isReadOnly": ' + this.isReadOnly);
        "key" !== this.nodeKeyProperty && "string" === typeof this.nodeKeyProperty && (a1 += ',\n  "nodeKeyProperty": ' + this.quote(this.nodeKeyProperty));
        this.copiesArrays && (a1 += ',\n  "copiesArrays": true');
        this.copiesArrayObjects && (a1 += ',\n  "copiesArrayObjects": true');
        this.copiesKey || (a1 += ',\n  "copiesKey": false');
        "category" !== this.nodeCategoryProperty && "string" === typeof this.nodeCategoryProperty && (a1 += ',\n  "nodeCategoryProperty": ' + this.quote(this.nodeCategoryProperty));
        return a1;
    };
    t.fp = function(a1) {
        a1.name && (this.name = a1.name);
        a1.dataFormat && (this.dataFormat = a1.dataFormat);
        a1.isReadOnly && (this.isReadOnly = !0);
        a1.nodeKeyProperty && (this.nodeKeyProperty = a1.nodeKeyProperty);
        a1.copiesArrays && (this.copiesArrays = !0);
        a1.copiesArrayObjects && (this.copiesArrayObjects = !0);
        !1 === a1.copiesKey && (this.copiesKey = !1);
        a1.nodeCategoryProperty && (this.nodeCategoryProperty = a1.nodeCategoryProperty);
    };
    function qr(a1, b) {
        b = b.modelData;
        za(b) && (a1.cm(b), a1.modelData = b);
    }
    t.Rv = function() {
        var a1 = this.modelData, b = !1, c;
        for(c in a1)if (!rr(c, a1[c])) {
            b = !0;
            break;
        }
        a1 = "";
        b && (a1 = ',\n  "modelData": ' + sr(this, this.modelData));
        return a1 + ',\n  "nodeDataArray": ' + tr(this, this.nodeDataArray, !0);
    };
    t.kv = function(a1) {
        qr(this, a1);
        a1 = a1.nodeDataArray;
        Aa(a1) && (this.cm(a1), this.nodeDataArray = a1);
    };
    function nr(a1, b) {
        function c(a1, b) {
            if (b = b.part) {
                if (b = b.data, a1 !== b) {
                    var c = d.get(a1);
                    null === c ? (c = new H, c.add(b), d.add(a1, c)) : c.add(b);
                }
            }
        }
        var d = a1.vh;
        null === d && (d = new ob, b.changes.each(function(a1) {
            if (null !== a1.diagram) {
                var b = a1.change;
                if (b === ce) (a1 = a1.object.panel) && (b = a1.data) && c(b, a1);
                else if (b === ee || b === fe) a1 = a1.object, (b = a1.itemArray) && c(b, a1);
            }
        }), a1.vh = d);
    }
    function or(a1, b) {
        for(var c = new H, d = 0; d < a1.nodeDataArray.length; d++){
            var e = a1.nodeDataArray[d];
            ur(a1, b, e, e, c);
        }
        return c;
    }
    function ur(a1, b, c, d, e) {
        if (Array.isArray(c)) for(var f = 0; f < c.length; f++){
            var g = c[f];
            if (g === b) return e.add(d), !0;
            if (ur(a1, b, g, d, e)) return !0;
        }
        else if (za(c) && Object.getPrototypeOf(c) === Object.prototype) for(f in c){
            g = c[f];
            if (g === b) return e.add(d), !0;
            if (ur(a1, b, g, d, e)) return !0;
        }
        return !1;
    }
    t.Pv = function(a1, b) {
        var c = this, d = !1, e = new H, f = new H, g = new H, h = this.vh;
        a1.changes.each(function(a1) {
            a1.model === c && ("nodeDataArray" === a1.modelChange ? a1.change === ee ? e.add(a1.newValue) : a1.change === fe && g.add(a1.oldValue) : c.lb(a1.object) ? f.add(a1.object) : a1.change !== ce || c.modelData !== a1.object && "modelData" !== a1.propertyName ? null !== a1.object && (h && h.contains(a1.object) ? h.get(a1.object).each(function(a1) {
                c.lb(a1) && f.add(a1);
            }) : a1.object instanceof Z || c.ri() && c.Jc(a1.object) || or(c, a1.object).each(function(a1) {
                f.add(a1);
            })) : d = !0);
        });
        var k = this.hl;
        k.clear();
        e.each(function(a1) {
            k.add(c.wa(a1));
            b || f.add(a1);
        });
        var l = this.jl;
        l.clear();
        g.each(function(a1) {
            l.add(c.wa(a1));
            b && f.add(a1);
        });
        a1 = "";
        d && (a1 += ',\n  "modelData": ' + sr(this, this.modelData));
        0 < k.count && (a1 += (b ? this.Yv : this.Wv) + tr(this, k.Fa(), !0));
        0 < f.count && (a1 += this.jy + tr(this, f.Fa(), !0));
        0 < l.count && (a1 += (b ? this.Wv : this.Yv) + tr(this, l.Fa(), !0));
        l.clear();
        k.clear();
        return a1;
    };
    t.ep = function(a1) {
        (void 0 !== a1.name && a1.name !== this.name || void 0 !== a1.dataFormat && a1.dataFormat !== this.dataFormat || void 0 !== a1.isReadOnly && a1.isReadOnly !== this.isReadOnly || void 0 !== a1.nodeKeyProperty && a1.nodeKeyProperty !== this.nodeKeyProperty || void 0 !== a1.copiesArrays && a1.copiesArrays !== this.copiesArrays || void 0 !== a1.copiesArrayObjects && a1.copiesArrayObjects !== this.copiesArrayObjects || void 0 !== a1.copiesKey && a1.copiesKey !== this.copiesKey || void 0 !== a1.nodeCategoryProperty && a1.nodeCategoryProperty !== this.nodeCategoryProperty) && C("applyIncrementalJson cannot change Model properties");
        qr(this, a1);
        var b = a1.insertedNodeKeys, c = a1.modifiedNodeData, d = new ob;
        if (Array.isArray(c)) for(var e = 0; e < c.length; e++){
            var f = c[e], g = this.wa(f);
            void 0 !== g && null !== g && d.set(g, f);
        }
        if (Array.isArray(b)) for(e = b.length, f = 0; f < e; f++){
            g = b[f];
            var h = this.ic(g);
            null === h && (h = (h = d.get(g)) ? h : this.copyNodeData({}), this.jm(h, g), this.xf(h));
        }
        if (Array.isArray(c)) {
            for(b = c.length, d = 0; d < b; d++)if (e = c[d], f = this.wa(e), f = this.ic(f), null !== f) {
                for(var k in e)"__gohashid" === k || k === this.nodeKeyProperty || this.Vj() && k === this.nodeIsGroupProperty || this.setDataProperty(f, k, e[k]);
                this.km(e, f);
            }
        }
        a1 = a1.removedNodeKeys;
        if (Array.isArray(a1)) for(c = a1.length, k = 0; k < c; k++)b = this.ic(a1[k]), null !== b && this.bm(b);
    };
    t.$x = function(a1, b) {
        a1.change !== de && C("Model.toIncrementalJson argument is not a Transaction ChangedEvent:" + a1.toString());
        var c = a1.object;
        if (!(a1.isTransactionFinished && c instanceof ge)) return '{ "incremental": 0 }';
        void 0 === b && (b = vr(this, this));
        nr(this, c);
        a1 = this.Pv(c, "FinishedUndo" === a1.propertyName);
        this.vh = null;
        return "2" === b ? '{ "incremental": 2' + a1 + "}" : '{ "class": ' + this.quote(b) + ', "incremental": 1' + this.qm() + a1 + "}";
    };
    t.yA = function(a1, b) {
        return this.$x(a1, b);
    };
    t.mp = function(a1) {
        void 0 === a1 && (a1 = vr(this, this));
        return '{ "class": ' + this.quote(a1) + this.qm() + this.Rv() + "}";
    };
    t.toJSON = function(a1) {
        return this.mp(a1);
    };
    t.Zw = function(a1) {
        var b = null;
        if ("string" === typeof a1) try {
            b = x.JSON.parse(a1);
        } catch (d) {}
        else "object" === typeof a1 ? b = a1 : C("Unable to modify a Model from: " + a1);
        var c = b.incremental;
        "number" !== typeof c && C("Unable to apply non-incremental changes to Model: " + a1);
        0 !== c && (this.Ea("applyIncrementalJson"), this.ep(b), this.eb("applyIncrementalJson"));
    };
    t.Ky = function(a1) {
        return this.Zw(a1);
    };
    Z.constructGraphLinksModel = function() {
        return new Z;
    };
    t = Z.prototype;
    t.cm = function(a1) {
        if (Aa(a1)) for(var b = a1.length, c = 0; c < b; c++){
            var d = a1[c];
            if (za(d)) {
                var e = c;
                d = this.cm(d);
                Array.isArray(a1) ? a1[e] = d : C("Cannot replace an object in an HTMLCollection or NodeList at " + e);
            }
        }
        else if (za(a1)) {
            for(b in a1)if (c = a1[b], za(c) && (c = this.cm(c), a1[b] = c, "points" === b && Array.isArray(c))) {
                e = 0 === c.length % 2;
                for(d = 0; d < c.length; d++)if ("number" !== typeof c[d]) {
                    e = !1;
                    break;
                }
                if (e) {
                    e = new F;
                    for(d = 0; d < c.length / 2; d++)e.add(new J(c[2 * d], c[2 * d + 1]));
                    e.freeze();
                    a1[b] = e;
                }
            }
            return wr(a1);
        }
        return a1;
    };
    t.rm = function(a1) {
        return void 0 === a1 ? "undefined" : null === a1 ? "null" : !0 === a1 ? "true" : !1 === a1 ? "false" : "string" === typeof a1 ? this.quote(a1) : "number" === typeof a1 ? Infinity === a1 ? "9e9999" : -Infinity === a1 ? "-9e9999" : isNaN(a1) ? '{"class":"NaN"}' : a1.toString() : a1 instanceof Date ? '{"class":"Date", "value":"' + a1.toJSON() + '"}' : a1 instanceof Number ? this.rm(a1.valueOf()) : Aa(a1) ? tr(this, a1) : za(a1) ? sr(this, a1) : "function" === typeof a1 ? "null" : a1.toString();
    };
    function tr(a1, b, c) {
        void 0 === c && (c = !1);
        var d = b.length;
        if (0 >= d) return "[]";
        var e = new Sa;
        e.add("[");
        c && 1 < d && e.add("\n");
        for(var f = 0; f < d; f++){
            var g = b[f];
            void 0 !== g && (0 < f && (e.add(","), c && e.add("\n")), e.add(a1.rm(g)));
        }
        c && 1 < d && e.add("\n");
        e.add("]");
        return e.toString();
    }
    function rr(a1, b) {
        return void 0 === b || "__gohashid" === a1 || "_" === a1[0] || "function" === typeof b ? !0 : !1;
    }
    function xr(a1) {
        return isNaN(a1) ? "NaN" : Infinity === a1 ? "9e9999" : -Infinity === a1 ? "-9e9999" : a1;
    }
    function sr(a1, b) {
        var c = b;
        if (c instanceof J) b = {
            "class": "go.Point",
            x: xr(c.x),
            y: xr(c.y)
        };
        else if (c instanceof L) b = {
            "class": "go.Size",
            width: xr(c.width),
            height: xr(c.height)
        };
        else if (c instanceof N) b = {
            "class": "go.Rect",
            x: xr(c.x),
            y: xr(c.y),
            width: xr(c.width),
            height: xr(c.height)
        };
        else if (c instanceof dc) b = {
            "class": "go.Margin",
            top: xr(c.top),
            right: xr(c.right),
            bottom: xr(c.bottom),
            left: xr(c.left)
        };
        else if (c instanceof O) c.sb() ? b = {
            "class": "go.Spot",
            x: xr(c.x),
            y: xr(c.y),
            offsetX: xr(c.offsetX),
            offsetY: xr(c.offsetY)
        } : b = {
            "class": "go.Spot",
            "enum": c.toString()
        };
        else if (c instanceof ql) {
            b = {
                "class": "go.Brush",
                type: c.type.name
            };
            if (c.type === Hl) b.color = c.color;
            else if (c.type === Kl || c.type === rl) b.start = c.start, b.end = c.end, c.type === rl && (0 !== c.startRadius && (b.startRadius = xr(c.startRadius)), isNaN(c.endRadius) || (b.endRadius = xr(c.endRadius)));
            if (null !== c.colorStops) {
                var d = {};
                for(c = c.colorStops.iterator; c.next();)d[c.key] = c.value;
                b.colorStops = d;
            }
        } else c instanceof P ? (b = {
            "class": "go.Geometry",
            type: c.type.name
        }, 0 !== c.startX && (b.startX = xr(c.startX)), 0 !== c.startY && (b.startY = xr(c.startY)), 0 !== c.endX && (b.endX = xr(c.endX)), 0 !== c.endY && (b.endY = xr(c.endY)), c.spot1.D(sc) || (b.spot1 = c.spot1), c.spot2.D(Bc) || (b.spot2 = c.spot2), c.type === P.o && (b.path = P.ia(c))) : c instanceof E && (b = {
            "class": "go.EnumValue",
            classType: vr(a1, c.classType),
            name: c.name
        });
        d = "{";
        c = !0;
        for(var e in b){
            var f = Fn(b, e);
            if (!rr(e, f)) {
                if (c ? c = !1 : d += ",", d += a1.quote(e) + ":", "points" === e && f instanceof F) {
                    var g = "[";
                    for(f = f.iterator; f.next();){
                        var h = f.value;
                        1 < g.length && (g += ",");
                        g += a1.rm(h.x);
                        g += ",";
                        g += a1.rm(h.y);
                    }
                    g += "]";
                    d += g;
                } else d += a1.rm(f);
            }
        }
        return d + "}";
    }
    function yr(a1) {
        return "number" === typeof a1 ? a1 : "NaN" === a1 ? NaN : "9e9999" === a1 ? Infinity : "-9e9999" === a1 ? -Infinity : parseFloat(a1);
    }
    function wr(a1) {
        if ("object" !== typeof a1) return a1;
        var b = a1["class"] || "";
        if ("NaN" === b) return NaN;
        if ("Date" === b) return new Date(a1.value);
        if (0 !== b.indexOf("go.")) return a1;
        b = b.substr(3);
        var c = a1;
        if ("Point" === b) c = new J(yr(a1.x), yr(a1.y));
        else if ("Size" === b) c = new L(yr(a1.width), yr(a1.height));
        else if ("Rect" === b) c = new N(yr(a1.x), yr(a1.y), yr(a1.width), yr(a1.height));
        else if ("Margin" === b) c = new dc(yr(a1.top), yr(a1.right), yr(a1.bottom), yr(a1.left));
        else if ("Spot" === b) "string" === typeof a1["enum"] ? c = id(a1["enum"]) : c = new O(yr(a1.x), yr(a1.y), yr(a1.offsetX), yr(a1.offsetY));
        else if ("Brush" === b) {
            if (c = new ql, c.type = Ra(ql, a1.type), "string" === typeof a1.color && (c.color = a1.color), a1.start instanceof O && (c.start = a1.start), a1.end instanceof O && (c.end = a1.end), "number" === typeof a1.startRadius && (c.startRadius = yr(a1.startRadius)), "number" === typeof a1.endRadius && (c.endRadius = yr(a1.endRadius)), a1 = a1.colorStops, za(a1)) for(var d in a1)c.addColorStop(parseFloat(d), a1[d]);
        } else "Geometry" === b ? (c = null, "string" === typeof a1.path ? c = P.parse(a1.path) : c = new P, c.type = Ra(P, a1.type), "number" === typeof a1.startX && (c.startX = yr(a1.startX)), "number" === typeof a1.startY && (c.startY = yr(a1.startY)), "number" === typeof a1.endX && (c.endX = yr(a1.endX)), "number" === typeof a1.endY && (c.endY = yr(a1.endY)), a1.spot1 instanceof O && (c.spot1 = a1.spot1), a1.spot2 instanceof O && (c.spot2 = a1.spot2)) : "EnumValue" === b && (d = a1.classType, 0 === d.indexOf("go.") && (d = d.substr(3)), d = zr(d), "function" === typeof d && (c = Ra(d, a1.name)));
        return c;
    }
    t.Pe = function(a1) {
        this.Kt.add(a1);
        return this;
    };
    t.hk = function(a1) {
        this.Kt.remove(a1);
    };
    t.cs = function(a1) {
        this.skipsUndoManager || this.undoManager.Tu(a1);
        for(var b = this.Kt, c = b.length, d = 0; d < c; d++)b.M(d)(a1);
    };
    t.cb = function(a1, b, c, d, e, f, g) {
        Ar(this, "", a1, b, c, d, e, f, g);
    };
    t.g = function(a1, b, c, d, e) {
        Ar(this, "", ce, a1, this, b, c, d, e);
    };
    t.Es = function(a1, b, c, d, e, f) {
        Ar(this, "", ce, b, a1, c, d, e, f);
    };
    function Ar(a1, b, c, d, e, f, g, h, k) {
        void 0 === h && (h = null);
        void 0 === k && (k = null);
        var l = new be;
        l.model = a1;
        l.change = c;
        l.modelChange = b;
        l.propertyName = d;
        l.object = e;
        l.oldValue = f;
        l.oldParam = h;
        l.newValue = g;
        l.newParam = k;
        a1.cs(l);
    }
    Z.prototype.changeState = function(a1, b) {
        if (null !== a1 && a1.model === this) {
            if (a1.change === ce) {
                var c = a1.object, d = a1.propertyName, e = a1.I(b);
                d === this.nodeKeyProperty && this.lb(c) && (b = a1.I(!b), void 0 !== b && this.kb.remove(b), void 0 !== e && this.kb.add(e, c));
                Uj(c, d, e);
            } else a1.change === ee ? (c = a1.newParam, "nodeDataArray" === a1.modelChange ? (a1 = a1.newValue, za(a1) && "number" === typeof c && (d = this.wa(a1), b ? (this.Tc[c] === a1 && Da(this.Tc, c), void 0 !== d && this.kb.remove(d)) : (this.Tc[c] !== a1 && Ca(this.Tc, c, a1), void 0 !== d && this.kb.add(d, a1)))) : "" === a1.modelChange ? ((d = a1.object) && !Aa(d) && a1.propertyName && (d = Fn(a1.object, a1.propertyName)), Aa(d) && "number" === typeof c && (a1 = a1.newValue, b ? Da(d, c) : Ca(d, c, a1))) : C("unknown ChangedEvent.Insert modelChange: " + a1.toString())) : a1.change === fe ? (c = a1.oldParam, "nodeDataArray" === a1.modelChange ? (a1 = a1.oldValue, za(a1) && "number" === typeof c && (d = this.wa(a1), b ? (this.Tc[c] !== a1 && Ca(this.Tc, c, a1), void 0 !== d && this.kb.add(d, a1)) : (this.Tc[c] === a1 && Da(this.Tc, c), void 0 !== d && this.kb.remove(d)))) : "" === a1.modelChange ? ((d = a1.object) && !Aa(d) && a1.propertyName && (d = Fn(a1.object, a1.propertyName)), Aa(d) && "number" === typeof c && (a1 = a1.oldValue, b ? Ca(d, c, a1) : Da(d, c))) : C("unknown ChangedEvent.Remove modelChange: " + a1.toString())) : a1.change !== de && C("unknown ChangedEvent: " + a1.toString());
        }
    };
    Z.prototype.Ea = function(a1) {
        return this.undoManager.Ea(a1);
    };
    Z.prototype.eb = function(a1) {
        return this.undoManager.eb(a1);
    };
    Z.prototype.Kf = function() {
        return this.undoManager.Kf();
    };
    Z.prototype.commit = function(a1, b) {
        void 0 === b && (b = "");
        var c = this.skipsUndoManager;
        null === b && (this.skipsUndoManager = !0, b = "");
        this.undoManager.Ea(b);
        var d = !1;
        try {
            a1(this), d = !0;
        } finally{
            d ? this.undoManager.eb(b) : this.undoManager.Kf(), this.skipsUndoManager = c;
        }
    };
    t = Z.prototype;
    t.La = function(a1, b) {
        void 0 === b && (b = "");
        Ar(this, "SourceChanged", de, b, a1, null, null);
    };
    t.wa = function(a1) {
        if (null !== a1) {
            var b = this.Th;
            if ("" !== b && (b = Fn(a1, b), void 0 !== b)) {
                if (dr(b)) return b;
                C("Key value for node data " + a1 + " is not a number or a string: " + b);
            }
        }
    };
    t.jm = function(a1, b) {
        if (null !== a1) {
            var c = this.Th;
            if ("" !== c) {
                if (this.lb(a1)) {
                    var d = Fn(a1, c);
                    d !== b && null === this.ic(b) && (Uj(a1, c, b), void 0 !== d && this.kb.remove(d), this.kb.add(b, a1), Ar(this, "nodeKey", ce, c, a1, d, b), "string" === typeof c && this.La(a1, c), this.ip(d, b));
                } else Uj(a1, c, b);
            }
        }
    };
    function dr(a1) {
        return "number" === typeof a1 || "string" === typeof a1;
    }
    t.lb = function(a1) {
        var b = this.wa(a1);
        return void 0 === b ? !1 : this.kb.I(b) === a1;
    };
    t.ic = function(a1) {
        null === a1 && C("Model.findNodeDataForKey:key must not be null");
        return void 0 !== a1 && dr(a1) ? this.kb.I(a1) : null;
    };
    t.$u = function(a1) {
        if (null !== a1) {
            var b = this.Th;
            if ("" !== b) {
                var c = this.wa(a1);
                if (void 0 === c || this.kb.contains(c)) {
                    var d = this.al;
                    if (null !== d && (c = d(this, a1), void 0 !== c && null !== c && !this.kb.contains(c))) {
                        Uj(a1, b, c);
                        return;
                    }
                    if ("string" === typeof c) {
                        for(d = 2; this.kb.contains(c + d);)d++;
                        Uj(a1, b, c + d);
                    } else if (void 0 === c || "number" === typeof c) {
                        for(c = -this.kb.count - 1; this.kb.contains(c);)c--;
                        Uj(a1, b, c);
                    }
                }
            }
        }
    };
    t.xf = function(a1) {
        null !== a1 && (fb(a1), this.lb(a1) || Wq(this, a1, !0));
    };
    function Wq(a1, b, c) {
        var d = a1.wa(b);
        if (void 0 === d || a1.kb.I(d) !== b) a1.$u(b), d = a1.wa(b), void 0 === d && C("Model.makeNodeDataKeyUnique failed on " + b + ".  Data not added to Model."), a1.kb.add(d, b), d = null, c && (d = a1.Tc.length, Ca(a1.Tc, d, b)), Ar(a1, "nodeDataArray", ee, "nodeDataArray", a1, null, b, null, d), a1.em(b), a1.dm(b);
    }
    t.Fy = function(a1) {
        if (Aa(a1)) for(var b = a1.length, c = 0; c < b; c++)this.xf(a1[c]);
        else for(a1 = a1.iterator; a1.next();)this.xf(a1.value);
    };
    t.bm = function(a1) {
        null !== a1 && Vq(this, a1, !0);
    };
    function Vq(a1, b, c) {
        var d = a1.wa(b);
        void 0 !== d && a1.kb.remove(d);
        d = null;
        if (c) {
            a: if (c = a1.Tc, Array.isArray(c)) d = c.indexOf(b);
            else {
                d = c.length;
                for(var e = 0; e < d; e++)if (c[e] === b) {
                    d = e;
                    break a;
                }
                d = -1;
            }
            if (0 > d) return;
            Da(a1.Tc, d);
        }
        Ar(a1, "nodeDataArray", fe, "nodeDataArray", a1, b, null, d, null);
        a1.pp(b);
    }
    t.nA = function(a1) {
        if (Aa(a1)) for(var b = a1.length, c = 0; c < b; c++)this.bm(a1[c]);
        else for(a1 = a1.iterator; a1.next();)this.bm(a1.value);
    };
    t.$z = function(a1) {
        if (a1 !== this.nodeDataArray && Aa(a1)) {
            var b = this.jl;
            b.clear();
            b.addAll(this.kb.iteratorKeys);
            var c = this.hl;
            c.clear();
            for(var d = a1.length, e = 0; e < d; e++){
                var f = a1[e], g = this.wa(f);
                if (void 0 !== g) {
                    c.add(g);
                    var h = this.ic(g);
                    h !== f && (null !== h ? (this.Co(h, f), this.km(f, h)) : (f = this.cloneDeep(f), this.jm(f, g), this.xf(f)));
                } else g = this.cloneDeep(f), this.xf(g), c.add(this.wa(g));
            }
            for(a1 = b.iterator; a1.next();)d = a1.value, c.contains(d) || (d = this.ic(d)) && this.bm(d);
            b.clear();
            c.clear();
        }
    };
    t.ip = function(a1, b) {
        void 0 !== b && (a1 = gr(this, a1), a1 instanceof H && this.Vf.add(b, a1));
    };
    t.Lv = function() {};
    t.em = function() {};
    t.dm = function() {};
    t.pp = function() {};
    function ir(a1, b, c) {
        if (void 0 !== b) {
            var d = a1.Vf.I(b);
            null === d && (d = new H, a1.Vf.add(b, d));
            d.add(c);
        }
    }
    function hr(a1, b, c) {
        if (void 0 !== b) {
            var d = a1.Vf.I(b);
            d instanceof H && (void 0 === c || null === c ? a1.Vf.remove(b) : (d.remove(c), 0 === d.count && a1.Vf.remove(b)));
        }
    }
    function gr(a1, b) {
        if (void 0 === b) return null;
        a1 = a1.Vf.I(b);
        return a1 instanceof H ? a1 : null;
    }
    t.Qy = function(a1) {
        void 0 === a1 ? this.Vf.clear() : this.Vf.remove(a1);
    };
    Z.prototype.copyNodeData = function(a1) {
        if (null === a1) return null;
        var b = this.Ak;
        a1 = null !== b ? b(a1, this) : Br(this, a1, !0);
        za(a1) && Qa(a1);
        return a1;
    };
    function Br(a1, b, c) {
        if (a1.copiesArrays && Array.isArray(b)) {
            var d = [];
            for(c = 0; c < b.length; c++){
                var e = Br(a1, b[c], a1.copiesArrayObjects);
                d.push(e);
            }
            Qa(d);
            return d;
        }
        if (c && za(b)) {
            c = (c = b.constructor) ? new c : {};
            e = a1.copiesKey || "string" !== typeof a1.nodeKeyProperty ? null : a1.nodeKeyProperty;
            for(d in b)if ("__gohashid" === d) c.__gohashid = void 0;
            else if (d === e) c[e] = void 0;
            else {
                var f = Fn(b, d), g = vr(a1, f);
                "GraphObject" === g || "Diagram" === g || "Layer" === g || "RowColumnDefinition" === g || "AnimationManager" === g || "Tool" === g || "CommandHandler" === g || "Layout" === g || "InputEvent" === g || "DiagramEvent" === g || f instanceof Z || f instanceof he || f instanceof ge || f instanceof be ? Uj(c, d, f) : (f = Br(a1, f, !1), Uj(c, d, f));
            }
            Qa(c);
            return c;
        }
        return b instanceof J ? b.copy() : b instanceof L ? b.copy() : b instanceof N ? b.copy() : b instanceof O ? b.copy() : b instanceof dc ? b.copy() : b;
    }
    Z.prototype.setDataProperty = function(a1, b, c) {
        if (this.lb(a1)) {
            if (b === this.nodeKeyProperty) {
                this.jm(a1, c);
                return;
            }
            if (b === this.nodeCategoryProperty) {
                this.im(a1, c);
                return;
            }
        } else !Cr && a1 instanceof Y && (Cr = !0, ya('Model.setDataProperty is modifying a GraphObject, "' + a1.toString() + '"'), ya("  Is that really your intent?"));
        var d = Fn(a1, b);
        d !== c && (Uj(a1, b, c), this.Es(a1, b, d, c));
    };
    t = Z.prototype;
    t.set = function(a1, b, c) {
        this.setDataProperty(a1, b, c);
    };
    t.Co = function(a1, b) {
        if (b) {
            var c = this.lb(a1), d;
            for(d in b)"__gohashid" === d || c && d === this.nodeKeyProperty || this.setDataProperty(a1, d, b[d]);
        }
    };
    t.Ay = function(a1, b) {
        this.ss(a1, -1, b);
    };
    t.ss = function(a1, b, c) {
        0 > b && (b = a1.length);
        Ca(a1, b, c);
        Ar(this, "", ee, "", a1, null, c, null, b);
    };
    t.ov = function(a1, b) {
        void 0 === b && (b = -1);
        a1 === this.Tc && C("Model.removeArrayItem should not be called on the Model.nodeDataArray");
        -1 === b && (b = a1.length - 1);
        var c = a1[b];
        Da(a1, b);
        Ar(this, "", fe, "", a1, c, null, b, null);
    };
    t.Qo = function(a1) {
        if (null === a1) return "";
        var b = this.lj;
        if ("" === b) return "";
        b = Fn(a1, b);
        if (void 0 === b) return "";
        if ("string" === typeof b) return b;
        C("getCategoryForNodeData found a non-string category for " + a1 + ": " + b);
    };
    t.im = function(a1, b) {
        if (null !== a1) {
            var c = this.lj;
            if ("" !== c) {
                if (this.lb(a1)) {
                    var d = Fn(a1, c);
                    void 0 === d && (d = "");
                    d !== b && (Uj(a1, c, b), Ar(this, "nodeCategory", ce, c, a1, d, b));
                } else Uj(a1, c, b);
            }
        }
    };
    t.km = function(a1, b) {
        this.im(b, this.Qo(a1));
    };
    t.Sl = function() {
        return !1;
    };
    t.Vj = function() {
        return !1;
    };
    t.ri = function() {
        return !1;
    };
    t.ws = function() {
        return !1;
    };
    t.Wj = function() {
        return !1;
    };
    function ri() {
        return new Z;
    }
    function vr(a1, b) {
        if ("function" === typeof b) {
            if (b.className) return b.className;
            if (b.name) return b.name;
        } else if ("object" === typeof b && null !== b && b.constructor) return vr(a1, b.constructor);
        return typeof b;
    }
    function zr(a1) {
        return Dr[a1] ? Dr[a1] : void 0 !== x.go && x.go[a1] ? x.go[a1] : null;
    }
    function Fn(a1, b) {
        if (!a1 || !b) return null;
        try {
            if ("function" === typeof b) var c = b(a1);
            else "function" === typeof a1.getAttribute ? (c = a1.getAttribute(b), null === c && (c = void 0)) : c = a1[b];
        } catch (d) {}
        return c;
    }
    function Uj(a1, b, c) {
        if (a1 && b) try {
            "function" === typeof b ? b(a1, c) : "function" === typeof a1.setAttribute ? a1.setAttribute(b, c) : a1[b] = c;
        } catch (d) {}
    }
    ma.Object.defineProperties(Z.prototype, {
        name: {
            get: function() {
                return this.xa;
            },
            set: function(a1) {
                var b = this.xa;
                b !== a1 && (this.xa = a1, this.g("name", b, a1));
            }
        },
        dataFormat: {
            get: function() {
                return this.Rm;
            },
            set: function(a1) {
                var b = this.Rm;
                b !== a1 && (this.Rm = a1, this.g("dataFormat", b, a1));
            }
        },
        isReadOnly: {
            get: function() {
                return this.Gg;
            },
            set: function(a1) {
                var b = this.Gg;
                b !== a1 && (this.Gg = a1, this.g("isReadOnly", b, a1));
            }
        },
        modelData: {
            get: function() {
                return this.j;
            },
            set: function(a1) {
                var b = this.j;
                b !== a1 && (this.j = a1, this.g("modelData", b, a1), this.La(a1));
            }
        },
        undoManager: {
            get: function() {
                return this.o;
            },
            set: function(a1) {
                var b = this.o;
                b !== a1 && (null !== b && b.Rx(this), this.o = a1, null !== a1 && a1.Xw(this));
            }
        },
        skipsUndoManager: {
            get: function() {
                return this.Wg;
            },
            set: function(a1) {
                this.Wg = a1;
            }
        },
        nodeKeyProperty: {
            get: function() {
                return this.Th;
            },
            set: function(a1) {
                var b = this.Th;
                b !== a1 && ("" === a1 && C("Model.nodeKeyProperty may not be the empty string"), 0 < this.kb.count && C("Cannot set Model.nodeKeyProperty when there is existing node data"), this.Th = a1, this.g("nodeKeyProperty", b, a1));
            }
        },
        makeUniqueKeyFunction: {
            get: function() {
                return this.al;
            },
            set: function(a1) {
                var b = this.al;
                b !== a1 && (this.al = a1, this.g("makeUniqueKeyFunction", b, a1));
            }
        },
        nodeDataArray: {
            get: function() {
                return this.Tc;
            },
            set: function(a1) {
                var b = this.Tc;
                if (b !== a1) {
                    this.kb.clear();
                    this.Lv();
                    for(var c = a1.length, d = 0; d < c; d++){
                        var e = a1[d];
                        za(e) || C("Model.nodeDataArray must only contain Objects, not: " + e);
                        fb(e);
                    }
                    this.Tc = a1;
                    d = new F;
                    for(e = 0; e < c; e++){
                        var f = a1[e], g = this.wa(f);
                        void 0 === g ? d.add(f) : null !== this.kb.I(g) ? d.add(f) : this.kb.add(g, f);
                    }
                    for(d = d.iterator; d.next();)e = d.value, this.$u(e), f = this.wa(e), void 0 !== f && this.kb.add(f, e);
                    Ar(this, "nodeDataArray", ce, "nodeDataArray", this, b, a1);
                    for(b = 0; b < c; b++)d = a1[b], this.em(d), this.dm(d);
                    Array.isArray(a1) || (this.isReadOnly = !0);
                }
            }
        },
        copyNodeDataFunction: {
            get: function() {
                return this.Ak;
            },
            set: function(a1) {
                var b = this.Ak;
                b !== a1 && (this.Ak = a1, this.g("copyNodeDataFunction", b, a1));
            }
        },
        copiesArrays: {
            get: function() {
                return this.Jm;
            },
            set: function(a1) {
                var b = this.Jm;
                b !== a1 && (this.Jm = a1, this.g("copiesArrays", b, a1));
            }
        },
        copiesArrayObjects: {
            get: function() {
                return this.Im;
            },
            set: function(a1) {
                var b = this.Im;
                b !== a1 && (this.Im = a1, this.g("copiesArrayObjects", b, a1));
            }
        },
        copiesKey: {
            get: function() {
                return this.Lm;
            },
            set: function(a1) {
                var b = this.Lm;
                b !== a1 && (this.Lm = a1, this.g("copiesKey", b, a1));
            }
        },
        afterCopyFunction: {
            get: function() {
                return this.wm;
            },
            set: function(a1) {
                var b = this.wm;
                b !== a1 && (this.wm = a1, this.g("afterCopyFunction", b, a1));
            }
        },
        nodeCategoryProperty: {
            get: function() {
                return this.lj;
            },
            set: function(a1) {
                var b = this.lj;
                b !== a1 && (this.lj = a1, this.g("nodeCategoryProperty", b, a1));
            }
        },
        type: {
            get: function() {
                return "Model";
            }
        }
    });
    Z.prototype.setCategoryForNodeData = Z.prototype.im;
    Z.prototype.getCategoryForNodeData = Z.prototype.Qo;
    Z.prototype.removeArrayItem = Z.prototype.ov;
    Z.prototype.insertArrayItem = Z.prototype.ss;
    Z.prototype.addArrayItem = Z.prototype.Ay;
    Z.prototype.assignAllDataProperties = Z.prototype.Co;
    Z.prototype.set = Z.prototype.set;
    Z.prototype.clearUnresolvedReferences = Z.prototype.Qy;
    Z.prototype.mergeNodeDataArray = Z.prototype.$z;
    Z.prototype.removeNodeDataCollection = Z.prototype.nA;
    Z.prototype.removeNodeData = Z.prototype.bm;
    Z.prototype.addNodeDataCollection = Z.prototype.Fy;
    Z.prototype.addNodeData = Z.prototype.xf;
    Z.prototype.makeNodeDataKeyUnique = Z.prototype.$u;
    Z.prototype.findNodeDataForKey = Z.prototype.ic;
    Z.prototype.containsNodeData = Z.prototype.lb;
    Z.prototype.setKeyForNodeData = Z.prototype.jm;
    Z.prototype.getKeyForNodeData = Z.prototype.wa;
    Z.prototype.updateTargetBindings = Z.prototype.La;
    Z.prototype.commit = Z.prototype.commit;
    Z.prototype.rollbackTransaction = Z.prototype.Kf;
    Z.prototype.commitTransaction = Z.prototype.eb;
    Z.prototype.startTransaction = Z.prototype.Ea;
    Z.prototype.raiseDataChanged = Z.prototype.Es;
    Z.prototype.raiseChanged = Z.prototype.g;
    Z.prototype.raiseChangedEvent = Z.prototype.cb;
    Z.prototype.removeChangedListener = Z.prototype.hk;
    Z.prototype.addChangedListener = Z.prototype.Pe;
    Z.prototype.writeJsonValue = Z.prototype.rm;
    Z.prototype.replaceJsonObjects = Z.prototype.cm;
    Z.prototype.applyIncrementalJSON = Z.prototype.Ky;
    Z.prototype.applyIncrementalJson = Z.prototype.Zw;
    Z.prototype.toJSON = Z.prototype.toJSON;
    Z.prototype.toJson = Z.prototype.mp;
    Z.prototype.toIncrementalJSON = Z.prototype.yA;
    Z.prototype.toIncrementalJson = Z.prototype.$x;
    Z.prototype.toIncrementalData = Z.prototype.xA;
    Z.prototype.clear = Z.prototype.clear;
    var Cr = !1, Dr = {};
    Z.className = "Model";
    Z.fromJSON = Z.fromJson = function(a1, b) {
        void 0 === b && (b = null);
        var c = null;
        if ("string" === typeof a1) try {
            c = x.JSON.parse(a1);
        } catch (f) {}
        else "object" === typeof a1 ? c = a1 : C("Unable to construct a Model from: " + a1);
        if (null === b) {
            a1 = null;
            var d = c["class"];
            if ("string" === typeof d) try {
                var e = null;
                0 === d.indexOf("go.") ? (d = d.substr(3), e = zr(d)) : (e = zr(d), null === e && (e = x[d]));
                "function" === typeof e && (a1 = new e);
            } catch (f) {}
            null === a1 || a1 instanceof Z ? b = a1 : C("Unable to construct a Model of declared class: " + c["class"]);
        }
        null === b && (b = Z.constructGraphLinksModel());
        b.fp(c);
        b.kv(c);
        return b;
    };
    Z.safePropertyValue = Fn;
    Z.safePropertySet = Uj;
    Dr.Brush = ql;
    Dr.ChangedEvent = be;
    Dr.Geometry = P;
    Dr.Margin = dc;
    Dr.Panel = W;
    Dr.Point = J;
    Dr.Rect = N;
    Dr.Size = L;
    Dr.Spot = O;
    Dr.Transaction = ge;
    Dr.UndoManager = he;
    function Gi(a1, b, c, d) {
        Qa(this);
        this._isFrozen = !1;
        void 0 === a1 && (a1 = "");
        void 0 === b && (b = a1);
        void 0 === c && (c = null);
        this.j = -1;
        this.xd = null;
        this.wl = a1;
        this.vl = this.so = 0;
        this.Br = null;
        this.vn = !1;
        this.rl = b;
        this.Hm = c;
        void 0 === d ? (this.dl = Er, this.vk = null) : (this.dl = yn, this.vk = d);
        this.rt = new H;
    }
    Gi.prototype.copy = function() {
        var a1 = new Gi;
        a1.wl = this.wl;
        a1.so = this.so;
        a1.vl = this.vl;
        a1.Br = this.Br;
        a1.vn = this.vn;
        a1.rl = this.rl;
        a1.Hm = this.Hm;
        a1.dl = this.dl;
        a1.vk = this.vk;
        return a1;
    };
    t = Gi.prototype;
    t.qb = function(a1) {
        a1.classType === Gi && (this.mode = a1);
    };
    t.toString = function() {
        return "Binding(" + this.targetProperty + ":" + this.sourceProperty + (-1 !== this.Ai ? " " + this.Ai : "") + " " + this.mode.name + ")";
    };
    t.freeze = function() {
        this._isFrozen = !0;
        return this;
    };
    t.ka = function() {
        this._isFrozen = !1;
        return this;
    };
    t.Kx = function(a1) {
        void 0 === a1 && (a1 = null);
        this.mode = yn;
        this.backConverter = a1;
        return this;
    };
    t.bp = function(a1) {
        void 0 === a1 && (a1 = "");
        this.sourceName = a1;
        this.isToModel = !1;
        return this;
    };
    t.dA = function() {
        this.sourceName = null;
        this.isToModel = !0;
        return this;
    };
    function hl(a1, b, c) {
        a1 = a1.sourceName;
        return null === a1 || "" === a1 ? b : "/" === a1 ? c.part : "." === a1 ? c : ".." === a1 ? c.panel : b.fb(a1);
    }
    t.Mv = function(a1, b, c) {
        var d = this.rl;
        if (void 0 === c || "" === d || d === c) {
            c = this.wl;
            var e = this.Hm;
            if (null === e && "" === c) ya("Binding error: target property is the empty string: " + this.toString());
            else {
                var f = b;
                "" !== d && (f = Fn(b, d));
                if (void 0 !== f) {
                    if (null === e) "" !== c && Uj(a1, c, f);
                    else try {
                        if ("" !== c) {
                            var g = e(f, a1);
                            Uj(a1, c, g);
                        } else e(f, a1);
                    } catch (h) {}
                }
            }
        }
    };
    t.rp = function(a1, b, c, d) {
        if (this.dl === yn) {
            var e = this.wl;
            if (void 0 === c || e === c) {
                c = this.rl;
                var f = this.vk, g = a1;
                "" !== e && (g = Fn(a1, e));
                if (void 0 !== g && !this.rt.contains(a1)) try {
                    this.rt.add(a1);
                    var h = null !== d ? d.diagram : null, k = null !== h ? h.model : null;
                    if (null === f) {
                        if ("" !== c) null !== k ? k.setDataProperty(b, c, g) : Uj(b, c, g);
                        else if (null !== k && null !== d && 0 <= d.itemIndex && null !== d.panel && Array.isArray(d.panel.itemArray)) {
                            var l = d.itemIndex, m = d.panel.itemArray;
                            k.ov(m, l);
                            k.ss(m, l, g);
                        }
                    } else try {
                        if ("" !== c) {
                            var n = f(g, b, k);
                            null !== k ? k.setDataProperty(b, c, n) : Uj(b, c, n);
                        } else {
                            var p = f(g, b, k);
                            if (void 0 !== p && null !== k && null !== d && 0 <= d.itemIndex && null !== d.panel && Array.isArray(d.panel.itemArray)) {
                                var q = d.itemIndex, r = d.panel.itemArray;
                                k.ov(r, q);
                                k.ss(r, q, p);
                            }
                        }
                    } catch (u) {}
                } finally{
                    this.rt.remove(a1);
                }
            }
        }
    };
    ma.Object.defineProperties(Gi.prototype, {
        Ai: {
            get: function() {
                return this.j;
            },
            set: function(a1) {
                this._isFrozen && va(this);
                this.j = a1;
            }
        },
        targetProperty: {
            get: function() {
                return this.wl;
            },
            set: function(a1) {
                this._isFrozen && va(this);
                this.wl = a1;
            }
        },
        sourceName: {
            get: function() {
                return this.Br;
            },
            set: function(a1) {
                this._isFrozen && va(this);
                this.Br = a1;
                null !== a1 && (this.vn = !1);
            }
        },
        isToModel: {
            get: function() {
                return this.vn;
            },
            set: function(a1) {
                this._isFrozen && va(this);
                this.vn = a1;
            }
        },
        sourceProperty: {
            get: function() {
                return this.rl;
            },
            set: function(a1) {
                this._isFrozen && va(this);
                this.rl = a1;
            }
        },
        converter: {
            get: function() {
                return this.Hm;
            },
            set: function(a1) {
                this._isFrozen && va(this);
                this.Hm = a1;
            }
        },
        backConverter: {
            get: function() {
                return this.vk;
            },
            set: function(a1) {
                this._isFrozen && va(this);
                this.vk = a1;
            }
        },
        mode: {
            get: function() {
                return this.dl;
            },
            set: function(a1) {
                this._isFrozen && va(this);
                this.dl = a1;
            }
        }
    });
    Gi.prototype.updateSource = Gi.prototype.rp;
    Gi.prototype.updateTarget = Gi.prototype.Mv;
    Gi.prototype.ofModel = Gi.prototype.dA;
    Gi.prototype.ofObject = Gi.prototype.bp;
    Gi.prototype.makeTwoWay = Gi.prototype.Kx;
    var $i = "Binding", Er = new E(Gi, "OneWay", 1), yn = new E(Gi, "TwoWay", 2);
    Gi.className = "Binding";
    Gi.parseEnum = function(a1, b) {
        return function(c) {
            c = Ra(a1, c);
            return null === c ? b : c;
        };
    };
    Gi.toString = Ia;
    Gi.OneWay = Er;
    Gi.TwoWay = yn;
    function Gr(a1, b, c) {
        Z.call(this);
        this.Vv = ',\n  "insertedLinkKeys": ';
        this.iy = ',\n  "modifiedLinkData": ';
        this.Xv = ',\n  "removedLinkKeys": ';
        this.md = [];
        this.$f = new H;
        this.xb = new ob;
        this.Jh = "";
        this.Ri = this.zk = this.bl = null;
        this.lf = "from";
        this.mf = "to";
        this.fj = this.ej = "";
        this.dj = "category";
        this.je = "";
        this.il = "isGroup";
        this.Je = "group";
        this.Km = !1;
        void 0 !== b && (this.linkDataArray = b);
        void 0 !== a1 && (Aa(a1) ? this.nodeDataArray = a1 : c = a1);
        c && (Object.assign(this, c), a1 = c.Changed) && (delete this.Changed, this.Pe(a1));
    }
    la(Gr, Z);
    Gr.constructGraphLinksModel = Z.constructGraphLinksModel;
    Gr.prototype.cloneProtected = function(a1) {
        Z.prototype.cloneProtected.call(this, a1);
        a1.Jh = this.Jh;
        a1.bl = this.bl;
        a1.zk = this.zk;
        a1.lf = this.lf;
        a1.mf = this.mf;
        a1.ej = this.ej;
        a1.fj = this.fj;
        a1.dj = this.dj;
        a1.je = this.je;
        a1.il = this.il;
        a1.Je = this.Je;
        a1.Km = this.Km;
    };
    t = Gr.prototype;
    t.clear = function() {
        Z.prototype.clear.call(this);
        this.md = [];
        this.xb.clear();
        this.$f.clear();
    };
    t.toString = function(a1) {
        void 0 === a1 && (a1 = 0);
        if (2 <= a1) return this.mp();
        var b = ("" !== this.name ? this.name : "") + " GraphLinksModel";
        if (0 < a1) {
            b += "\n node data:";
            a1 = this.nodeDataArray;
            var c = a1.length, d;
            for(d = 0; d < c; d++){
                var e = a1[d];
                b += " " + this.wa(e) + ":" + Ia(e);
            }
            b += "\n link data:";
            a1 = this.linkDataArray;
            c = a1.length;
            for(d = 0; d < c; d++)e = a1[d], b += " " + br(this, e, !0) + "-->" + br(this, e, !1);
        }
        return b;
    };
    t.Qv = function(a1, b) {
        "" === this.linkKeyProperty && C("GraphLinksModel.linkKeyProperty must not be an empty string for .toIncrementalData() to succeed.");
        var c = Z.prototype.Qv.call(this, a1, b), d = this, e = new H, f = new H, g = new H, h = this.vh;
        a1.changes.each(function(a1) {
            a1.model === d && ("linkDataArray" === a1.modelChange ? a1.change === ee ? e.add(a1.newValue) : a1.change === fe && g.add(a1.oldValue) : d.Jc(a1.object) ? f.add(a1.object) : null !== a1.object && (null !== a1.object && h && h.contains(a1.object) ? h.get(a1.object).each(function(a1) {
                d.Jc(a1) && f.add(a1);
            }) : a1.object instanceof Z || d.lb(a1.object) || Hr(d, a1.object).each(function(a1) {
                f.add(a1);
            })));
        });
        var k = this.hl;
        k.clear();
        e.each(function(a1) {
            k.add(d.Ac(a1));
            b || f.add(a1);
        });
        var l = this.jl;
        l.clear();
        g.each(function(a1) {
            l.add(d.Ac(a1));
            b && f.add(a1);
        });
        a1 = d.cloneDeep(f.Fa());
        0 < k.count && (null === c && (c = {}), b ? c.removedLinkKeys = k.Fa() : c.insertedLinkKeys = k.Fa());
        0 < a1.length && (null === c && (c = {}), c.modifiedLinkData = a1);
        0 < l.count && (null === c && (c = {}), b ? c.insertedLinkKeys = l.Fa() : c.removedLinkKeys = l.Fa());
        l.clear();
        k.clear();
        return c;
    };
    t.qm = function() {
        var a1 = Z.prototype.qm.call(this), b = "";
        "category" !== this.linkCategoryProperty && "string" === typeof this.linkCategoryProperty && (b += ',\n  "linkCategoryProperty": ' + this.quote(this.linkCategoryProperty));
        "" !== this.linkKeyProperty && "string" === typeof this.linkKeyProperty && (b += ',\n  "linkKeyProperty": ' + this.quote(this.linkKeyProperty));
        "from" !== this.linkFromKeyProperty && "string" === typeof this.linkFromKeyProperty && (b += ',\n  "linkFromKeyProperty": ' + this.quote(this.linkFromKeyProperty));
        "to" !== this.linkToKeyProperty && "string" === typeof this.linkToKeyProperty && (b += ',\n  "linkToKeyProperty": ' + this.quote(this.linkToKeyProperty));
        "" !== this.linkFromPortIdProperty && "string" === typeof this.linkFromPortIdProperty && (b += ',\n  "linkFromPortIdProperty": ' + this.quote(this.linkFromPortIdProperty));
        "" !== this.linkToPortIdProperty && "string" === typeof this.linkToPortIdProperty && (b += ',\n  "linkToPortIdProperty": ' + this.quote(this.linkToPortIdProperty));
        "" !== this.linkLabelKeysProperty && "string" === typeof this.linkLabelKeysProperty && (b += ',\n  "linkLabelKeysProperty": ' + this.quote(this.linkLabelKeysProperty));
        "isGroup" !== this.nodeIsGroupProperty && "string" === typeof this.nodeIsGroupProperty && (b += ',\n  "nodeIsGroupProperty": ' + this.quote(this.nodeIsGroupProperty));
        "group" !== this.nodeGroupKeyProperty && "string" === typeof this.nodeGroupKeyProperty && (b += ',\n  "nodeGroupKeyProperty": ' + this.quote(this.nodeGroupKeyProperty));
        return a1 + b;
    };
    t.fp = function(a1) {
        Z.prototype.fp.call(this, a1);
        a1.linkKeyProperty && (this.linkKeyProperty = a1.linkKeyProperty);
        a1.linkFromKeyProperty && (this.linkFromKeyProperty = a1.linkFromKeyProperty);
        a1.linkToKeyProperty && (this.linkToKeyProperty = a1.linkToKeyProperty);
        a1.linkFromPortIdProperty && (this.linkFromPortIdProperty = a1.linkFromPortIdProperty);
        a1.linkToPortIdProperty && (this.linkToPortIdProperty = a1.linkToPortIdProperty);
        a1.linkCategoryProperty && (this.linkCategoryProperty = a1.linkCategoryProperty);
        a1.linkLabelKeysProperty && (this.linkLabelKeysProperty = a1.linkLabelKeysProperty);
        a1.nodeIsGroupProperty && (this.nodeIsGroupProperty = a1.nodeIsGroupProperty);
        a1.nodeGroupKeyProperty && (this.nodeGroupKeyProperty = a1.nodeGroupKeyProperty);
    };
    t.Rv = function() {
        var a1 = Z.prototype.Rv.call(this), b = ',\n  "linkDataArray": ' + tr(this, this.linkDataArray, !0);
        return a1 + b;
    };
    t.kv = function(a1) {
        Z.prototype.kv.call(this, a1);
        a1 = a1.linkDataArray;
        Array.isArray(a1) && (this.cm(a1), this.linkDataArray = a1);
    };
    function Hr(a1, b) {
        for(var c = new H, d = 0; d < a1.linkDataArray.length; d++){
            var e = a1.linkDataArray[d];
            ur(a1, b, e, e, c);
        }
        return c;
    }
    t.Pv = function(a1, b) {
        "" === this.linkKeyProperty && C("GraphLinksModel.linkKeyProperty must not be an empty string for .toIncrementalJson() to succeed.");
        var c = Z.prototype.Pv.call(this, a1, b), d = this, e = new H, f = new H, g = new H, h = this.vh;
        a1.changes.each(function(a1) {
            a1.model === d && ("linkDataArray" === a1.modelChange ? a1.change === ee ? e.add(a1.newValue) : a1.change === fe && g.add(a1.oldValue) : d.Jc(a1.object) ? f.add(a1.object) : null !== a1.object && (null !== a1.object && h && h.contains(a1.object) ? h.get(a1.object).each(function(a1) {
                d.Jc(a1) && f.add(a1);
            }) : a1.object instanceof Z || d.lb(a1.object) || Hr(d, a1.object).each(function(a1) {
                f.add(a1);
            })));
        });
        var k = this.hl;
        k.clear();
        e.each(function(a1) {
            k.add(d.Ac(a1));
            b || f.add(a1);
        });
        var l = this.jl;
        l.clear();
        g.each(function(a1) {
            l.add(d.Ac(a1));
            b && f.add(a1);
        });
        a1 = c;
        0 < k.count && (a1 += (b ? this.Xv : this.Vv) + tr(this, k.Fa(), !0));
        0 < f.count && (a1 += this.iy + tr(this, f.Fa(), !0));
        0 < l.count && (a1 += (b ? this.Vv : this.Xv) + tr(this, l.Fa(), !0));
        l.clear();
        k.clear();
        return a1;
    };
    t.ep = function(a1) {
        (void 0 !== a1.linkCategoryProperty && a1.linkCategoryProperty !== this.linkCategoryProperty || void 0 !== a1.linkKeyProperty && a1.linkKeyProperty !== this.linkKeyProperty || void 0 !== a1.linkFromKeyProperty && a1.linkFromKeyProperty !== this.linkFromKeyProperty || void 0 !== a1.linkToKeyProperty && a1.linkToKeyProperty !== this.linkToKeyProperty || void 0 !== a1.linkFromPortIdProperty && a1.linkFromPortIdProperty !== this.linkFromPortIdProperty || void 0 !== a1.linkToPortIdProperty && a1.linkToPortIdProperty !== this.linkToPortIdProperty || void 0 !== a1.linkLabelKeysProperty && a1.linkLabelKeysProperty !== this.linkLabelKeysProperty || void 0 !== a1.nodeIsGroupProperty && a1.nodeIsGroupProperty !== this.nodeIsGroupProperty || void 0 !== a1.nodeGroupKeyProperty && a1.nodeGroupKeyProperty !== this.nodeGroupKeyProperty) && C("applyIncrementalJson cannot change Model properties");
        Z.prototype.ep.call(this, a1);
        var b = a1.insertedLinkKeys;
        if (Array.isArray(b)) for(var c = b.length, d = 0; d < c; d++){
            var e = b[d], f = this.jh(e);
            null === f && (f = this.Io({}), this.Js(f, e), this.fi(f));
        }
        b = a1.modifiedLinkData;
        if (Array.isArray(b)) {
            for(c = b.length, d = 0; d < c; d++)if (e = b[d], f = this.Ac(e), f = this.jh(f), null !== f) {
                for(var g in e)"__gohashid" !== g && g !== this.linkKeyProperty && this.setDataProperty(f, g, e[g]);
                Ir(this, e, f);
            }
        }
        a1 = a1.removedLinkKeys;
        if (Array.isArray(a1)) for(g = a1.length, b = 0; b < g; b++)c = this.jh(a1[b]), null !== c && this.am(c);
    };
    Gr.prototype.changeState = function(a1, b) {
        if (null !== a1 && a1.model === this) {
            if (a1.change === ce) {
                var c = a1.object, d = a1.propertyName;
                if (d === this.linkKeyProperty && this.Jc(c)) {
                    var e = a1.I(b);
                    b = a1.I(!b);
                    void 0 !== b && this.xb.remove(b);
                    void 0 !== e && this.xb.add(e, c);
                    Uj(c, d, e);
                    return;
                }
            } else if (a1.change === ee) {
                c = a1.newParam;
                if ("linkDataArray" === a1.modelChange) {
                    a1 = a1.newValue;
                    za(a1) && "number" === typeof c && (d = this.Ac(a1), b ? (this.$f.remove(a1), this.md[c] === a1 && this.md.splice(c, 1), void 0 !== d && this.xb.remove(d)) : (this.$f.add(a1), this.md[c] !== a1 && this.md.splice(c, 0, a1), void 0 !== d && this.xb.add(d, a1)));
                    return;
                }
                if ("linkLabelKeys" === a1.modelChange) {
                    d = this.Ef(a1.object);
                    Array.isArray(d) && "number" === typeof c && (b ? (c = d.indexOf(a1.newValue), 0 <= c && d.splice(c, 1)) : 0 > d.indexOf(a1.newValue) && d.splice(c, 0, a1.newValue));
                    return;
                }
            } else if (a1.change === fe) {
                c = a1.oldParam;
                if ("linkDataArray" === a1.modelChange) {
                    a1 = a1.oldValue;
                    za(a1) && "number" === typeof c && (d = this.Ac(a1), b ? (this.$f.add(a1), this.md[c] !== a1 && this.md.splice(c, 0, a1), void 0 !== d && this.xb.add(d, a1)) : (this.$f.remove(a1), this.md[c] === a1 && this.md.splice(c, 1), void 0 !== d && this.xb.remove(d)));
                    return;
                }
                if ("linkLabelKeys" === a1.modelChange) {
                    d = this.Ef(a1.object);
                    Array.isArray(d) && "number" === typeof c && (b ? 0 > d.indexOf(a1.newValue) && d.splice(c, 0, a1.newValue) : (c = d.indexOf(a1.newValue), 0 <= c && d.splice(c, 1)));
                    return;
                }
            }
            Z.prototype.changeState.call(this, a1, b);
        }
    };
    t = Gr.prototype;
    t.Ul = function(a1) {
        if (void 0 !== a1) {
            var b = this.Ri;
            if (null !== b) {
                var c = this.ic(a1);
                null === c && (c = this.copyNodeData(b), Uj(c, this.nodeKeyProperty, a1), this.xf(c));
            }
            return a1;
        }
    };
    t.yx = function(a1) {
        return br(this, a1, !0);
    };
    t.wv = function(a1, b) {
        jr(this, a1, b, !0);
    };
    t.Bx = function(a1) {
        return br(this, a1, !1);
    };
    t.Bv = function(a1, b) {
        jr(this, a1, b, !1);
    };
    function br(a1, b, c) {
        if (null !== b && (a1 = c ? a1.lf : a1.mf, "" !== a1 && (a1 = Fn(b, a1), void 0 !== a1))) {
            if (dr(a1)) return a1;
            C((c ? "FromKey" : "ToKey") + " value for link data " + b + " is not a number or a string: " + a1);
        }
    }
    function jr(a1, b, c, d) {
        null === c && (c = void 0);
        if (null !== b) {
            var e = d ? a1.lf : a1.mf;
            if ("" !== e) {
                if (c = a1.Ul(c), a1.Jc(b)) {
                    var f = Fn(b, e);
                    f !== c && (hr(a1, f, b), Uj(b, e, c), null === a1.ic(c) && ir(a1, c, b), Ar(a1, d ? "linkFromKey" : "linkToKey", ce, e, b, f, c), "string" === typeof e && a1.La(b, e));
                } else Uj(b, e, c);
            }
        }
    }
    t.zx = function(a1) {
        return ar(this, a1, !0);
    };
    t.xv = function(a1, b) {
        kr(this, a1, b, !0);
    };
    t.Cx = function(a1) {
        return ar(this, a1, !1);
    };
    t.Cv = function(a1, b) {
        kr(this, a1, b, !1);
    };
    function ar(a1, b, c) {
        if (null === b) return "";
        a1 = c ? a1.ej : a1.fj;
        if ("" === a1) return "";
        b = Fn(b, a1);
        return void 0 === b ? "" : b;
    }
    function kr(a1, b, c, d) {
        if (null !== b) {
            var e = d ? a1.ej : a1.fj;
            if ("" !== e) {
                if (a1.Jc(b)) {
                    var f = Fn(b, e);
                    void 0 === f && (f = "");
                    f !== c && (Uj(b, e, c), Ar(a1, d ? "linkFromPortId" : "linkToPortId", ce, e, b, f, c), "string" === typeof e && a1.La(b, e));
                } else Uj(b, e, c);
            }
        }
    }
    t.Ef = function(a1) {
        if (null === a1) return Jr;
        var b = this.je;
        if ("" === b) return Jr;
        a1 = Fn(a1, b);
        return void 0 === a1 ? Jr : a1;
    };
    t.Ks = function(a1, b) {
        if (null !== a1) {
            var c = this.je;
            if ("" !== c) {
                if (this.Jc(a1)) {
                    var d = Fn(a1, c);
                    void 0 === d && (d = Jr);
                    if (d !== b) {
                        if (Array.isArray(d)) for(var e = d.length, f = 0; f < e; f++)hr(this, d[f], a1);
                        Uj(a1, c, b);
                        e = b.length;
                        for(f = 0; f < e; f++){
                            var g = b[f];
                            null === this.ic(g) && ir(this, g, a1);
                        }
                        Ar(this, "linkLabelKeys", ce, c, a1, d, b);
                        "string" === typeof c && this.La(a1, c);
                    }
                } else Uj(a1, c, b);
            }
        }
    };
    t.Au = function(a1, b) {
        if (null !== b && void 0 !== b && null !== a1) {
            var c = this.je;
            if ("" !== c) {
                var d = Fn(a1, c);
                if (void 0 === d) c = [], c.push(b), this.Ks(a1, c);
                else if (Array.isArray(d)) {
                    var e = d.indexOf(b);
                    0 <= e || (e = d.length, d.push(b), this.Jc(a1) && (null === this.ic(b) && ir(this, b, a1), Ar(this, "linkLabelKeys", ee, c, a1, null, b, null, e)));
                } else C(c + " property is not an Array; cannot addLabelKeyForLinkData: " + a1);
            }
        }
    };
    t.Qx = function(a1, b) {
        if (null !== b && void 0 !== b && null !== a1) {
            var c = this.je;
            if ("" !== c) {
                var d = Fn(a1, c);
                if (Array.isArray(d)) {
                    var e = d.indexOf(b);
                    0 > e || (d.splice(e, 1), this.Jc(a1) && (hr(this, b, a1), Ar(this, "linkLabelKeys", fe, c, a1, b, null, e, null)));
                } else void 0 !== d && C(c + " property is not an Array; cannot removeLabelKeyforLinkData: " + a1);
            }
        }
    };
    t.Ac = function(a1) {
        if (null !== a1) {
            var b = this.Jh;
            if ("" !== b && (b = Fn(a1, b), void 0 !== b)) {
                if (dr(b)) return b;
                C("Key value for link data " + a1 + " is not a number or a string: " + b);
            }
        }
    };
    t.Js = function(a1, b) {
        if (null !== a1) {
            var c = this.Jh;
            if ("" !== c) {
                if (this.Jc(a1)) {
                    var d = Fn(a1, c);
                    d !== b && null === this.jh(b) && (Uj(a1, c, b), void 0 !== d && this.xb.remove(d), this.xb.add(b, a1), Ar(this, "linkKey", ce, c, a1, d, b), "string" === typeof c && this.La(a1, c));
                } else Uj(a1, c, b);
            }
        }
    };
    t.jh = function(a1) {
        null === a1 && C("GraphLinksModel.findLinkDataForKey:key must not be null");
        return void 0 !== a1 && dr(a1) ? this.xb.I(a1) : null;
    };
    t.As = function(a1) {
        if (null !== a1) {
            var b = this.Jh;
            if ("" !== b) {
                var c = this.Ac(a1);
                if (void 0 === c || this.xb.contains(c)) {
                    var d = this.bl;
                    if (null !== d && (c = d(this, a1), void 0 !== c && null !== c && !this.xb.contains(c))) {
                        Uj(a1, b, c);
                        return;
                    }
                    if ("string" === typeof c) {
                        for(d = 2; this.xb.contains(c + d);)d++;
                        Uj(a1, b, c + d);
                    } else if (void 0 === c || "number" === typeof c) {
                        for(c = -this.xb.count - 1; this.xb.contains(c);)c--;
                        Uj(a1, b, c);
                    }
                }
            }
        }
    };
    t.Jc = function(a1) {
        return null === a1 ? !1 : this.$f.contains(a1);
    };
    t.fi = function(a1) {
        null !== a1 && (fb(a1), this.Jc(a1) || fr(this, a1, !0));
    };
    function fr(a1, b, c) {
        if ("" !== a1.linkKeyProperty) {
            var d = a1.Ac(b);
            if (void 0 !== d && a1.xb.I(d) === b) return;
            a1.As(b);
            d = a1.Ac(b);
            void 0 === d && C("GraphLinksModel.makeLinkDataKeyUnique failed on " + b + ". Data not added to model.");
            a1.xb.add(d, b);
        }
        a1.$f.add(b);
        d = null;
        c && (d = a1.md.length, a1.md.splice(d, 0, b));
        Ar(a1, "linkDataArray", ee, "linkDataArray", a1, null, b, null, d);
        Kr(a1, b);
    }
    t.Ey = function(a1) {
        if (Array.isArray(a1)) for(var b = a1.length, c = 0; c < b; c++)this.fi(a1[c]);
        else for(a1 = a1.iterator; a1.next();)this.fi(a1.value);
    };
    t.am = function(a1) {
        null !== a1 && er(this, a1, !0);
    };
    function er(a1, b, c) {
        a1.$f.remove(b);
        var d = a1.Ac(b);
        void 0 !== d && a1.xb.remove(d);
        d = null;
        if (c) {
            d = a1.md.indexOf(b);
            if (0 > d) return;
            a1.md.splice(d, 1);
        }
        Ar(a1, "linkDataArray", fe, "linkDataArray", a1, b, null, d, null);
        c = br(a1, b, !0);
        hr(a1, c, b);
        c = br(a1, b, !1);
        hr(a1, c, b);
        d = a1.Ef(b);
        if (Array.isArray(d)) for(var e = d.length, f = 0; f < e; f++)c = d[f], hr(a1, c, b);
    }
    t.lA = function(a1) {
        if (Array.isArray(a1)) for(var b = a1.length, c = 0; c < b; c++)this.am(a1[c]);
        else for(a1 = a1.iterator; a1.next();)this.am(a1.value);
    };
    t.Zz = function(a1) {
        "" === this.linkKeyProperty && C("GraphLinksModel.linkKeyProperty must not be an empty string for .mergeLinkDataArray() to succeed.");
        if (a1 !== this.linkDataArray && Aa(a1)) {
            var b = this.jl;
            b.clear();
            b.addAll(this.xb.iteratorKeys);
            var c = this.hl;
            c.clear();
            for(var d = a1.length, e = 0; e < d; e++){
                var f = a1[e], g = this.Ac(f);
                if (void 0 !== g) {
                    c.add(g);
                    var h = this.jh(g);
                    h !== f && (null !== h ? (this.Co(h, f), Ir(this, f, h)) : (f = this.cloneDeep(f), this.Js(f, g), this.fi(f)));
                } else g = this.cloneDeep(f), this.fi(g), c.add(this.Ac(g));
            }
            for(a1 = b.iterator; a1.next();)d = a1.value, c.contains(d) || (d = this.jh(d)) && this.am(d);
            b.clear();
            c.clear();
        }
    };
    function Kr(a1, b) {
        var c = br(a1, b, !0);
        c = a1.Ul(c);
        null === a1.ic(c) && ir(a1, c, b);
        c = br(a1, b, !1);
        c = a1.Ul(c);
        null === a1.ic(c) && ir(a1, c, b);
        var d = a1.Ef(b);
        if (Array.isArray(d)) for(var e = d.length, f = 0; f < e; f++)c = d[f], null === a1.ic(c) && ir(a1, c, b);
    }
    t.Io = function(a1) {
        if (null === a1) return null;
        var b = this.zk;
        a1 = null !== b ? b(a1, this) : Br(this, a1, !0);
        za(a1) && (Qa(a1), "" !== this.lf && Uj(a1, this.lf, void 0), "" !== this.mf && Uj(a1, this.mf, void 0), "" !== this.je && Uj(a1, this.je, []));
        return a1;
    };
    t.Yu = function(a1) {
        if (null === a1) return !1;
        var b = this.il;
        return "" === b ? !1 : Fn(a1, b) ? !0 : !1;
    };
    t.lh = function(a1) {
        if (null !== a1) {
            var b = this.Je;
            if ("" !== b && (b = Fn(a1, b), void 0 !== b)) {
                if (dr(b)) return b;
                C("GroupKey value for node data " + a1 + " is not a number or a string: " + b);
            }
        }
    };
    t.lp = function(a1, b) {
        null === b && (b = void 0);
        if (null !== a1) {
            var c = this.Je;
            if ("" !== c) {
                if (this.lb(a1)) {
                    var d = Fn(a1, c);
                    d !== b && (hr(this, d, a1), Uj(a1, c, b), null === this.ic(b) && ir(this, b, a1), Ar(this, "nodeGroupKey", ce, c, a1, d, b), "string" === typeof c && this.La(a1, c));
                } else Uj(a1, c, b);
            }
        }
    };
    Gr.prototype.copyNodeData = function(a1) {
        if (null === a1) return null;
        a1 = Z.prototype.copyNodeData.call(this, a1);
        this.Hj || "" === this.Je || void 0 === Fn(a1, this.Je) || Uj(a1, this.Je, void 0);
        return a1;
    };
    Gr.prototype.setDataProperty = function(a1, b, c) {
        if (this.lb(a1)) {
            if (b === this.nodeKeyProperty) {
                this.jm(a1, c);
                return;
            }
            if (b === this.nodeCategoryProperty) {
                this.im(a1, c);
                return;
            }
            if (b === this.nodeGroupKeyProperty) {
                this.lp(a1, c);
                return;
            }
        } else if (this.Jc(a1)) {
            if (b === this.linkFromKeyProperty) {
                jr(this, a1, c, !0);
                return;
            }
            if (b === this.linkToKeyProperty) {
                jr(this, a1, c, !1);
                return;
            }
            if (b === this.linkFromPortIdProperty) {
                kr(this, a1, c, !0);
                return;
            }
            if (b === this.linkToPortIdProperty) {
                kr(this, a1, c, !1);
                return;
            }
            if (b === this.linkKeyProperty) {
                this.Js(a1, c);
                return;
            }
            if (b === this.linkCategoryProperty) {
                this.kp(a1, c);
                return;
            }
            if (b === this.linkLabelKeysProperty) {
                this.Ks(a1, c);
                return;
            }
        }
        var d = Fn(a1, b);
        d !== c && (Uj(a1, b, c), this.Es(a1, b, d, c));
    };
    t = Gr.prototype;
    t.Co = function(a1, b) {
        if (b) {
            var c = this.lb(a1), d = this.Jc(a1), e;
            for(e in b)"__gohashid" === e || c && e === this.nodeKeyProperty || c && e === this.nodeIsGroupProperty && Fn(a1, e) === b[e] || d && e === this.linkKeyProperty || this.setDataProperty(a1, e, b[e]);
        }
    };
    t.ip = function(a1, b) {
        Z.prototype.ip.call(this, a1, b);
        for(var c = this.kb.iterator; c.next();)this.qv(c.value, a1, b);
        for(c = this.$f.iterator; c.next();){
            var d = c.value, e = a1, f = b;
            if (br(this, d, !0) === e) {
                var g = this.lf;
                Uj(d, g, f);
                Ar(this, "linkFromKey", ce, g, d, e, f);
                "string" === typeof g && this.La(d, g);
            }
            br(this, d, !1) === e && (g = this.mf, Uj(d, g, f), Ar(this, "linkToKey", ce, g, d, e, f), "string" === typeof g && this.La(d, g));
            g = this.Ef(d);
            if (Array.isArray(g)) for(var h = g.length, k = this.je, l = 0; l < h; l++)g[l] === e && (g[l] = f, Ar(this, "linkLabelKeys", ee, k, d, e, f, l, l));
        }
    };
    t.qv = function(a1, b, c) {
        if (this.lh(a1) === b) {
            var d = this.Je;
            Uj(a1, d, c);
            Ar(this, "nodeGroupKey", ce, d, a1, b, c);
            "string" === typeof d && this.La(a1, d);
        }
    };
    t.Lv = function() {
        Z.prototype.Lv.call(this);
        for(var a1 = this.linkDataArray, b = a1.length, c = 0; c < b; c++)Kr(this, a1[c]);
    };
    t.em = function(a1) {
        Z.prototype.em.call(this, a1);
        a1 = this.wa(a1);
        var b = gr(this, a1);
        if (null !== b) {
            var c = Ea();
            for(b = b.iterator; b.next();){
                var d = b.value;
                if (this.lb(d)) {
                    if (this.lh(d) === a1) {
                        var e = this.Je;
                        Ar(this, "nodeGroupKey", ce, e, d, a1, a1);
                        "string" === typeof e && this.La(d, e);
                        c.push(d);
                    }
                } else if (br(this, d, !0) === a1 && (e = this.lf, Ar(this, "linkFromKey", ce, e, d, a1, a1), "string" === typeof e && this.La(d, e), c.push(d)), br(this, d, !1) === a1 && (e = this.mf, Ar(this, "linkToKey", ce, e, d, a1, a1), "string" === typeof e && this.La(d, e), c.push(d)), e = this.Ef(d), Array.isArray(e)) for(var f = e.length, g = this.je, h = 0; h < f; h++)e[h] === a1 && (Ar(this, "linkLabelKeys", ee, g, d, a1, a1, h, h), c.push(d));
            }
            for(b = 0; b < c.length; b++)hr(this, a1, c[b]);
            Ga(c);
        }
    };
    t.dm = function(a1) {
        Z.prototype.dm.call(this, a1);
        var b = this.lh(a1);
        null === this.ic(b) && ir(this, b, a1);
    };
    t.pp = function(a1) {
        Z.prototype.pp.call(this, a1);
        var b = this.lh(a1);
        hr(this, b, a1);
    };
    t.os = function(a1) {
        if (null === a1) return "";
        var b = this.dj;
        if ("" === b) return "";
        b = Fn(a1, b);
        if (void 0 === b) return "";
        if ("string" === typeof b) return b;
        C("getCategoryForLinkData found a non-string category for " + a1 + ": " + b);
    };
    Gr.prototype.getLinkCategoryForData = function(a1) {
        return this.os(a1);
    };
    Gr.prototype.kp = function(a1, b) {
        if (null !== a1) {
            var c = this.dj;
            if ("" !== c) {
                if (this.Jc(a1)) {
                    var d = Fn(a1, c);
                    void 0 === d && (d = "");
                    d !== b && (Uj(a1, c, b), Ar(this, "linkCategory", ce, c, a1, d, b), "string" === typeof c && this.La(a1, c));
                } else Uj(a1, c, b);
            }
        }
    };
    Gr.prototype.setLinkCategoryForData = function(a1, b) {
        this.kp(a1, b);
    };
    t = Gr.prototype;
    t.km = function(a1, b) {
        Z.prototype.km.call(this, a1, b);
        this.lp(b, this.lh(a1));
    };
    function Ir(a1, b, c) {
        a1.kp(c, a1.os(b));
        a1.wv(c, a1.yx(b));
        a1.Bv(c, a1.Bx(b));
        a1.Ks(c, a1.Ef(b));
        a1.xv(c, a1.zx(b));
        a1.Cv(c, a1.Cx(b));
    }
    t.Vj = function() {
        return !0;
    };
    t.ri = function() {
        return !0;
    };
    t.ws = function() {
        return !0;
    };
    t.Wj = function() {
        return !0;
    };
    ma.Object.defineProperties(Gr.prototype, {
        archetypeNodeData: {
            get: function() {
                return this.Ri;
            },
            set: function(a1) {
                var b = this.Ri;
                b !== a1 && (this.Ri = a1, this.g("archetypeNodeData", b, a1));
            }
        },
        linkFromKeyProperty: {
            get: function() {
                return this.lf;
            },
            set: function(a1) {
                var b = this.lf;
                b !== a1 && (this.lf = a1, this.g("linkFromKeyProperty", b, a1));
            }
        },
        linkToKeyProperty: {
            get: function() {
                return this.mf;
            },
            set: function(a1) {
                var b = this.mf;
                b !== a1 && (this.mf = a1, this.g("linkToKeyProperty", b, a1));
            }
        },
        linkFromPortIdProperty: {
            get: function() {
                return this.ej;
            },
            set: function(a1) {
                var b = this.ej;
                b !== a1 && (this.ej = a1, this.g("linkFromPortIdProperty", b, a1));
            }
        },
        linkToPortIdProperty: {
            get: function() {
                return this.fj;
            },
            set: function(a1) {
                var b = this.fj;
                b !== a1 && (this.fj = a1, this.g("linkToPortIdProperty", b, a1));
            }
        },
        linkLabelKeysProperty: {
            get: function() {
                return this.je;
            },
            set: function(a1) {
                var b = this.je;
                b !== a1 && (this.je = a1, this.g("linkLabelKeysProperty", b, a1));
            }
        },
        linkDataArray: {
            get: function() {
                return this.md;
            },
            set: function(a1) {
                var b = this.md;
                if (b !== a1) {
                    this.xb.clear();
                    for(var c = a1.length, d = 0; d < c; d++){
                        var e = a1[d];
                        za(e) || C("GraphLinksModel.linkDataArray must only contain Objects, not: " + e);
                        fb(e);
                    }
                    this.md = a1;
                    if ("" !== this.linkKeyProperty) {
                        d = new F;
                        for(e = 0; e < c; e++){
                            var f = a1[e], g = this.Ac(f);
                            void 0 === g ? d.add(f) : null !== this.xb.I(g) ? d.add(f) : this.xb.add(g, f);
                        }
                        for(d = d.iterator; d.next();)e = d.value, this.As(e), f = this.Ac(e), void 0 !== f && this.xb.add(f, e);
                    }
                    d = new H;
                    for(e = 0; e < c; e++)d.add(a1[e]);
                    this.$f = d;
                    Ar(this, "linkDataArray", ce, "linkDataArray", this, b, a1);
                    for(b = 0; b < c; b++)Kr(this, a1[b]);
                }
            }
        },
        linkKeyProperty: {
            get: function() {
                return this.Jh;
            },
            set: function(a1) {
                var b = this.Jh;
                if (b !== a1) {
                    this.Jh = a1;
                    this.xb.clear();
                    for(var c = this.linkDataArray.length, d = 0; d < c; d++){
                        var e = this.linkDataArray[d], f = this.Ac(e);
                        void 0 === f && (this.As(e), f = this.Ac(e));
                        void 0 !== f && this.xb.add(f, e);
                    }
                    this.g("linkKeyProperty", b, a1);
                }
            }
        },
        makeUniqueLinkKeyFunction: {
            get: function() {
                return this.bl;
            },
            set: function(a1) {
                var b = this.bl;
                b !== a1 && (this.bl = a1, this.g("makeUniqueLinkKeyFunction", b, a1));
            }
        },
        copyLinkDataFunction: {
            get: function() {
                return this.zk;
            },
            set: function(a1) {
                var b = this.zk;
                b !== a1 && (this.zk = a1, this.g("copyLinkDataFunction", b, a1));
            }
        },
        nodeIsGroupProperty: {
            get: function() {
                return this.il;
            },
            set: function(a1) {
                var b = this.il;
                b !== a1 && (this.il = a1, this.g("nodeIsGroupProperty", b, a1));
            }
        },
        nodeGroupKeyProperty: {
            get: function() {
                return this.Je;
            },
            set: function(a1) {
                var b = this.Je;
                b !== a1 && (this.Je = a1, this.g("nodeGroupKeyProperty", b, a1));
            }
        },
        Hj: {
            get: function() {
                return this.Km;
            },
            set: function(a1) {
                this.Km !== a1 && (this.Km = a1);
            }
        },
        linkCategoryProperty: {
            get: function() {
                return this.dj;
            },
            set: function(a1) {
                var b = this.dj;
                b !== a1 && (this.dj = a1, this.g("linkCategoryProperty", b, a1));
            }
        },
        type: {
            get: function() {
                return "GraphLinksModel";
            }
        }
    });
    Gr.prototype.setCategoryForLinkData = Gr.prototype.kp;
    Gr.prototype.getCategoryForLinkData = Gr.prototype.os;
    Gr.prototype.assignAllDataProperties = Gr.prototype.Co;
    Gr.prototype.setGroupKeyForNodeData = Gr.prototype.lp;
    Gr.prototype.getGroupKeyForNodeData = Gr.prototype.lh;
    Gr.prototype.isGroupForNodeData = Gr.prototype.Yu;
    Gr.prototype.copyLinkData = Gr.prototype.Io;
    Gr.prototype.mergeLinkDataArray = Gr.prototype.Zz;
    Gr.prototype.removeLinkDataCollection = Gr.prototype.lA;
    Gr.prototype.removeLinkData = Gr.prototype.am;
    Gr.prototype.addLinkDataCollection = Gr.prototype.Ey;
    Gr.prototype.addLinkData = Gr.prototype.fi;
    Gr.prototype.containsLinkData = Gr.prototype.Jc;
    Gr.prototype.makeLinkDataKeyUnique = Gr.prototype.As;
    Gr.prototype.findLinkDataForKey = Gr.prototype.jh;
    Gr.prototype.setKeyForLinkData = Gr.prototype.Js;
    Gr.prototype.getKeyForLinkData = Gr.prototype.Ac;
    Gr.prototype.removeLabelKeyForLinkData = Gr.prototype.Qx;
    Gr.prototype.addLabelKeyForLinkData = Gr.prototype.Au;
    Gr.prototype.setLabelKeysForLinkData = Gr.prototype.Ks;
    Gr.prototype.getLabelKeysForLinkData = Gr.prototype.Ef;
    Gr.prototype.setToPortIdForLinkData = Gr.prototype.Cv;
    Gr.prototype.getToPortIdForLinkData = Gr.prototype.Cx;
    Gr.prototype.setFromPortIdForLinkData = Gr.prototype.xv;
    Gr.prototype.getFromPortIdForLinkData = Gr.prototype.zx;
    Gr.prototype.setToKeyForLinkData = Gr.prototype.Bv;
    Gr.prototype.getToKeyForLinkData = Gr.prototype.Bx;
    Gr.prototype.setFromKeyForLinkData = Gr.prototype.wv;
    Gr.prototype.getFromKeyForLinkData = Gr.prototype.yx;
    Gr.prototype.clear = Gr.prototype.clear;
    var Jr = Object.freeze([]);
    Gr.className = "GraphLinksModel";
    Dr.GraphLinksModel = Gr;
    Z.constructGraphLinksModel = Z.constructGraphLinksModel = function() {
        return new Gr;
    };
    Z.initDiagramModel = ri = function() {
        return new Gr;
    };
    function Lr(a1, b) {
        Z.call(this);
        this.Ke = "parent";
        this.Mm = !1;
        this.nj = "parentLinkCategory";
        void 0 !== a1 && (Aa(a1) ? this.nodeDataArray = a1 : b = a1);
        b && (Object.assign(this, b), a1 = b.Changed) && (delete this.Changed, this.Pe(a1));
    }
    la(Lr, Z);
    Lr.constructGraphLinksModel = Z.constructGraphLinksModel;
    Lr.prototype.cloneProtected = function(a1) {
        Z.prototype.cloneProtected.call(this, a1);
        a1.Ke = this.Ke;
        a1.Mm = this.Mm;
        a1.nj = this.nj;
    };
    t = Lr.prototype;
    t.toString = function(a1) {
        void 0 === a1 && (a1 = 0);
        if (2 <= a1) return this.mp();
        var b = ("" !== this.name ? this.name : "") + " TreeModel";
        if (0 < a1) {
            b += "\n node data:";
            a1 = this.nodeDataArray;
            for(var c = a1.length, d = 0; d < c; d++){
                var e = a1[d];
                b += " " + this.wa(e) + ":" + Ia(e);
            }
        }
        return b;
    };
    t.qm = function() {
        var a1 = Z.prototype.qm.call(this), b = "";
        "parent" !== this.nodeParentKeyProperty && "string" === typeof this.nodeParentKeyProperty && (b += ',\n  "nodeParentKeyProperty": ' + this.quote(this.nodeParentKeyProperty));
        return a1 + b;
    };
    t.fp = function(a1) {
        Z.prototype.fp.call(this, a1);
        a1.nodeParentKeyProperty && (this.nodeParentKeyProperty = a1.nodeParentKeyProperty);
    };
    t.ep = function(a1) {
        void 0 !== a1.nodeParentKeyProperty && a1.nodeParentKeyProperty !== this.nodeParentKeyProperty && C("applyIncrementalJson cannot change Model properties");
        Z.prototype.ep.call(this, a1);
    };
    t.Ul = function(a1) {
        return a1;
    };
    t.mh = function(a1) {
        if (null !== a1) {
            var b = this.Ke;
            if ("" !== b && (b = Fn(a1, b), void 0 !== b)) {
                if (dr(b)) return b;
                C("ParentKey value for node data " + a1 + " is not a number or a string: " + b);
            }
        }
    };
    t.qe = function(a1, b) {
        null === b && (b = void 0);
        if (null !== a1) {
            var c = this.Ke;
            if ("" !== c) {
                if (b = this.Ul(b), this.lb(a1)) {
                    var d = Fn(a1, c);
                    d !== b && (hr(this, d, a1), Uj(a1, c, b), null === this.ic(b) && ir(this, b, a1), Ar(this, "nodeParentKey", ce, c, a1, d, b), "string" === typeof c && this.La(a1, c));
                } else Uj(a1, c, b);
            }
        }
    };
    t.rs = function(a1) {
        if (null === a1) return "";
        var b = this.nj;
        if ("" === b) return "";
        b = Fn(a1, b);
        if (void 0 === b) return "";
        if ("string" === typeof b) return b;
        C("getParentLinkCategoryForNodeData found a non-string category for " + a1 + ": " + b);
        return "";
    };
    Lr.prototype.getLinkCategoryForData = function(a1) {
        return this.rs(a1);
    };
    Lr.prototype.Ls = function(a1, b) {
        if (null !== a1) {
            var c = this.nj;
            if ("" !== c) {
                if (this.lb(a1)) {
                    var d = Fn(a1, c);
                    void 0 === d && (d = "");
                    d !== b && (Uj(a1, c, b), Ar(this, "parentLinkCategory", ce, c, a1, d, b), "string" === typeof c && this.La(a1, c));
                } else Uj(a1, c, b);
            }
        }
    };
    Lr.prototype.setLinkCategoryForData = function(a1, b) {
        this.Ls(a1, b);
    };
    Lr.prototype.copyNodeData = function(a1) {
        if (null === a1) return null;
        a1 = Z.prototype.copyNodeData.call(this, a1);
        this.Ij || "" === this.Ke || void 0 === Fn(a1, this.Ke) || Uj(a1, this.Ke, void 0);
        return a1;
    };
    Lr.prototype.setDataProperty = function(a1, b, c) {
        if (this.lb(a1)) {
            if (b === this.nodeKeyProperty) {
                this.jm(a1, c);
                return;
            }
            if (b === this.nodeCategoryProperty) {
                this.im(a1, c);
                return;
            }
            if (b === this.nodeParentKeyProperty) {
                this.qe(a1, c);
                return;
            }
        }
        var d = Fn(a1, b);
        d !== c && (Uj(a1, b, c), this.Es(a1, b, d, c));
    };
    t = Lr.prototype;
    t.ip = function(a1, b) {
        Z.prototype.ip.call(this, a1, b);
        for(var c = this.kb.iterator; c.next();)this.qv(c.value, a1, b);
    };
    t.qv = function(a1, b, c) {
        if (this.mh(a1) === b) {
            var d = this.Ke;
            Uj(a1, d, c);
            Ar(this, "nodeParentKey", ce, d, a1, b, c);
            "string" === typeof d && this.La(a1, d);
        }
    };
    t.em = function(a1) {
        Z.prototype.em.call(this, a1);
        a1 = this.wa(a1);
        var b = gr(this, a1);
        if (null !== b) {
            var c = Ea();
            for(b = b.iterator; b.next();){
                var d = b.value;
                if (this.lb(d) && this.mh(d) === a1) {
                    var e = this.Ke;
                    Ar(this, "nodeParentKey", ce, e, d, a1, a1);
                    "string" === typeof e && this.La(d, e);
                    c.push(d);
                }
            }
            for(b = 0; b < c.length; b++)hr(this, a1, c[b]);
            Ga(c);
        }
    };
    t.dm = function(a1) {
        Z.prototype.dm.call(this, a1);
        var b = this.mh(a1);
        b = this.Ul(b);
        null === this.ic(b) && ir(this, b, a1);
    };
    t.pp = function(a1) {
        Z.prototype.pp.call(this, a1);
        var b = this.mh(a1);
        hr(this, b, a1);
    };
    t.km = function(a1, b) {
        Z.prototype.km.call(this, a1, b);
        this.Ls(b, this.rs(a1));
        this.qe(b, this.mh(a1));
    };
    t.Sl = function() {
        return !0;
    };
    t.ws = function() {
        return !0;
    };
    ma.Object.defineProperties(Lr.prototype, {
        nodeParentKeyProperty: {
            get: function() {
                return this.Ke;
            },
            set: function(a1) {
                var b = this.Ke;
                b !== a1 && (this.Ke = a1, this.g("nodeParentKeyProperty", b, a1));
            }
        },
        Ij: {
            get: function() {
                return this.Mm;
            },
            set: function(a1) {
                this.Mm !== a1 && (this.Mm = a1);
            }
        },
        parentLinkCategoryProperty: {
            get: function() {
                return this.nj;
            },
            set: function(a1) {
                var b = this.nj;
                b !== a1 && (this.nj = a1, this.g("parentLinkCategoryProperty", b, a1));
            }
        },
        linkCategoryProperty: {
            get: function() {
                return this.parentLinkCategoryProperty;
            },
            set: function(a1) {
                this.parentLinkCategoryProperty = a1;
            }
        },
        type: {
            get: function() {
                return "TreeModel";
            }
        }
    });
    Lr.prototype.setParentLinkCategoryForNodeData = Lr.prototype.Ls;
    Lr.prototype.getParentLinkCategoryForNodeData = Lr.prototype.rs;
    Lr.prototype.setParentKeyForNodeData = Lr.prototype.qe;
    Lr.prototype.getParentKeyForNodeData = Lr.prototype.mh;
    Lr.className = "TreeModel";
    Dr.TreeModel = Lr;
    function Mr(a1) {
        ti.call(this);
        this.lw = this.Ym = this.mc = 0;
        this.Vp = 360;
        this.kw = Nr;
        this.Ti = 0;
        this.Zv = new J;
        this.Ip = this.me = 0;
        this.Wr = new Or;
        this.ft = this.mj = 0;
        this.ty = 600;
        this.co = NaN;
        this.Bm = 1;
        this.qo = 0;
        this.tl = 360;
        this.Sb = Nr;
        this.K = Pr;
        this.nd = Qr;
        this.hd = Fq;
        this.tf = 6;
        this.Mn = Rr;
        a1 && Object.assign(this, a1);
    }
    la(Mr, ti);
    Mr.prototype.cloneProtected = function(a1) {
        ti.prototype.cloneProtected.call(this, a1);
        a1.co = this.co;
        a1.Bm = this.Bm;
        a1.qo = this.qo;
        a1.tl = this.tl;
        a1.Sb = this.Sb;
        a1.K = this.K;
        a1.nd = this.nd;
        a1.hd = this.hd;
        a1.tf = this.tf;
        a1.Mn = this.Mn;
    };
    Mr.prototype.qb = function(a1) {
        if (a1.classType === Mr) {
            if (a1 === Sr || a1 === Tr || a1 === Ur || a1 === Vr || a1 === Qr) this.sorting = a1;
            else if (a1 === Wr || a1 === Xr || a1 === Pr || a1 === Yr) this.direction = a1;
            else if (a1 === Zr || a1 === $r || a1 === Nr || a1 === as) this.arrangement = a1;
            else if (a1 === bs || a1 === Rr) this.nodeDiameterFormula = a1;
        } else ti.prototype.qb.call(this, a1);
    };
    Mr.prototype.createNetwork = function() {
        return new cs(this);
    };
    Mr.prototype.doLayout = function(a1) {
        null === this.network && (this.network = this.makeNetwork(a1));
        this.arrangementOrigin = this.initialOrigin(this.arrangementOrigin);
        a1 = this.network.vertexes;
        if (1 >= a1.count) 1 === a1.count && (a1 = a1.first(), a1.centerX = 0, a1.centerY = 0);
        else {
            var b = new F;
            b.addAll(a1.iterator);
            a1 = new F;
            var c = new F;
            var d = this.sort(b);
            var e, f, g = this.Ip;
            var h = this.arrangement;
            var k = this.nodeDiameterFormula;
            var l = this.radius;
            if (!isFinite(l) || 0 >= l) l = NaN;
            var m = this.aspectRatio;
            if (!isFinite(m) || 0 >= m) m = 1;
            var n = this.startAngle;
            isFinite(n) || (n = 0);
            var p = this.sweepAngle;
            if (!isFinite(p) || 360 < p || 1 > p) p = 360;
            b = this.spacing;
            isFinite(b) || (b = NaN);
            h === as && k === bs ? h = Nr : h === as && k !== bs && (h = this.arrangement);
            if ((this.direction === Wr || this.direction === Xr) && this.sorting !== Qr) {
                for(k = 0; !(k >= d.length); k += 2){
                    a1.add(d.M(k));
                    if (k + 1 >= d.length) break;
                    c.add(d.M(k + 1));
                }
                this.direction === Wr ? (this.arrangement === as && a1.reverse(), d = new F, d.addAll(a1), d.addAll(c)) : (this.arrangement === as && c.reverse(), d = new F, d.addAll(c), d.addAll(a1));
            }
            k = d.length;
            for(var q = f = e = 0; q < d.length; q++){
                var r = n + p * f * (this.direction === Pr ? 1 : -1) / k, u = d.M(q).diameter;
                isNaN(u) && (u = ds(d.M(q), r));
                360 > p && (0 === q || q === d.length - 1) && (u /= 2);
                e += u;
                f++;
            }
            if (isNaN(l) || h === as) {
                isNaN(b) && (b = 6);
                if (h !== Nr && h !== as) {
                    f = -Infinity;
                    for(g = 0; g < k; g++)q = d.M(g), e = d.M(g === k - 1 ? 0 : g + 1), isNaN(q.diameter) && ds(q, 0), isNaN(e.diameter) && ds(e, 0), f = Math.max(f, (q.diameter + e.diameter) / 2);
                    g = f + b;
                    h === Zr ? l = (f + b) / (2 * Math.PI / k) : l = es(this, g * (360 <= p ? k : k - 1), m, n * Math.PI / 180, p * Math.PI / 180);
                } else l = es(this, e + (360 <= p ? k : k - 1) * (h !== as ? b : 1.6 * b), m, n * Math.PI / 180, p * Math.PI / 180);
                f = l * m;
            } else if (f = l * m, q = fs(this, l, f, n * Math.PI / 180, p * Math.PI / 180), isNaN(b)) {
                if (h === Nr || h === as) b = (q - e) / (360 <= p ? k : k - 1);
            } else if (h === Nr || h === as) q = (q - e) / (360 <= p ? k : k - 1), q < b ? (l = es(this, e + b * (360 <= p ? k : k - 1), m, n * Math.PI / 180, p * Math.PI / 180), f = l * m) : b = q;
            else {
                g = -Infinity;
                for(e = 0; e < k; e++)r = d.M(e), u = d.M(e === k - 1 ? 0 : e + 1), isNaN(r.diameter) && ds(r, 0), isNaN(u.diameter) && ds(u, 0), g = Math.max(g, (r.diameter + u.diameter) / 2);
                g += b;
                e = es(this, g * (360 <= p ? k : k - 1), m, n * Math.PI / 180, p * Math.PI / 180);
                e > l ? (l = e, f = l * m) : g = q / (360 <= p ? k : k - 1);
            }
            this.kw = h;
            this.mc = l;
            this.Ym = m;
            this.lw = n;
            this.Vp = p;
            this.Ti = b;
            this.me = f;
            this.Ip = g;
            b = d;
            d = this.kw;
            h = this.mc;
            l = this.lw;
            m = this.Vp;
            n = this.Ti;
            p = this.me;
            k = this.Ip;
            if (this.direction !== Wr && this.direction !== Xr || d !== as) {
                if (this.direction === Wr || this.direction === Xr) {
                    g = 0;
                    switch(d){
                        case $r:
                            g = 180 * gs(this, h, p, l, k) / Math.PI;
                            break;
                        case Nr:
                            k = b = 0;
                            g = a1.first();
                            null !== g && (b = ds(g, Math.PI / 2));
                            g = c.first();
                            null !== g && (k = ds(g, Math.PI / 2));
                            g = 180 * gs(this, h, p, l, n + (b + k) / 2) / Math.PI;
                            break;
                        case Zr:
                            g = m / b.length;
                    }
                    if (this.direction === Wr) {
                        switch(d){
                            case $r:
                                hs(this, a1, l, Yr);
                                break;
                            case Nr:
                                is(this, a1, l, Yr);
                                break;
                            case Zr:
                                js(this, a1, m / 2, l, Yr);
                        }
                        switch(d){
                            case $r:
                                hs(this, c, l + g, Pr);
                                break;
                            case Nr:
                                is(this, c, l + g, Pr);
                                break;
                            case Zr:
                                js(this, c, m / 2, l + g, Pr);
                        }
                    } else {
                        switch(d){
                            case $r:
                                hs(this, c, l, Yr);
                                break;
                            case Nr:
                                is(this, c, l, Yr);
                                break;
                            case Zr:
                                js(this, c, m / 2, l, Yr);
                        }
                        switch(d){
                            case $r:
                                hs(this, a1, l + g, Pr);
                                break;
                            case Nr:
                                is(this, a1, l + g, Pr);
                                break;
                            case Zr:
                                js(this, a1, m / 2, l + g, Pr);
                        }
                    }
                } else switch(d){
                    case $r:
                        hs(this, b, l, this.direction);
                        break;
                    case Nr:
                        is(this, b, l, this.direction);
                        break;
                    case Zr:
                        js(this, b, m, l, this.direction);
                        break;
                    case as:
                        ks(this, b, m, l, this.direction);
                }
            } else ks(this, b, m, l - m / 2, Pr);
        }
        this.updateParts();
        this.network = null;
        this.isValidLayout = !0;
    };
    function js(a1, b, c, d, e) {
        var f = a1.Vp, g = a1.mc;
        a1 = a1.me;
        d = d * Math.PI / 180;
        c = c * Math.PI / 180;
        for(var h = b.length, k = 0; k < h; k++){
            var l = d + (e === Pr ? k * c / (360 <= f ? h : h - 1) : -(k * c) / h), m = b.M(k), n = g * Math.tan(l) / a1;
            n = Math.sqrt((g * g + a1 * a1 * n * n) / (1 + n * n));
            m.centerX = n * Math.cos(l);
            m.centerY = n * Math.sin(l);
            m.actualAngle = 180 * l / Math.PI;
        }
    }
    function is(a1, b, c, d) {
        var e = a1.mc, f = a1.me, g = a1.Ti;
        c = c * Math.PI / 180;
        for(var h = b.length, k = 0; k < h; k++){
            var l = b.M(k), m = b.M(k === h - 1 ? 0 : k + 1), n = f * Math.sin(c);
            l.centerX = e * Math.cos(c);
            l.centerY = n;
            l.actualAngle = 180 * c / Math.PI;
            isNaN(l.diameter) && ds(l, 0);
            isNaN(m.diameter) && ds(m, 0);
            l = gs(a1, e, f, d === Pr ? c : -c, (l.diameter + m.diameter) / 2 + g);
            c += d === Pr ? l : -l;
        }
    }
    function hs(a1, b, c, d) {
        var e = a1.mc, f = a1.me, g = a1.Ip;
        c = c * Math.PI / 180;
        for(var h = b.length, k = 0; k < h; k++){
            var l = b.M(k);
            l.centerX = e * Math.cos(c);
            l.centerY = f * Math.sin(c);
            l.actualAngle = 180 * c / Math.PI;
            l = gs(a1, e, f, d === Pr ? c : -c, g);
            c += d === Pr ? l : -l;
        }
    }
    function ks(a1, b, c, d, e) {
        var f = a1.Vp;
        a1.mj = 0;
        a1.Wr = new Or;
        if (360 > c) {
            for(f = d + (e === Pr ? f : -f); 0 > f;)f += 360;
            f %= 360;
            180 < f && (f -= 360);
            f *= Math.PI / 180;
            a1.ft = f;
            ls(a1, b, c, d, e);
        } else ms(a1, b, c, d, e);
        a1.Wr.commit(b);
    }
    function ms(a1, b, c, d, e) {
        var f = a1.mc, g = a1.Ti, h = a1.Ym, k = f * Math.cos(d * Math.PI / 180), l = a1.me * Math.sin(d * Math.PI / 180), m = b.Fa();
        if (3 === m.length) m[0].centerX = f, m[0].centerY = 0, m[1].centerX = m[0].centerX - m[0].width / 2 - m[1].width / 2 - g, m[1].y = m[0].y, m[2].centerX = (m[0].centerX + m[1].centerX) / 2, m[2].y = m[0].y - m[2].height - g;
        else if (4 === m.length) m[0].centerX = f, m[0].centerY = 0, m[2].centerX = -m[0].centerX, m[2].centerY = m[0].centerY, m[1].centerX = 0, m[1].y = Math.min(m[0].y, m[2].y) - m[1].height - g, m[3].centerX = 0, m[3].y = Math.max(m[0].y + m[0].height + g, m[2].y + m[2].height + g);
        else {
            f = J.alloc();
            for(var n = 0; n < m.length; n++){
                m[n].centerX = k;
                m[n].centerY = l;
                if (n >= m.length - 1) break;
                ns(a1, k, l, m, n, e, f) || os(a1, k, l, m, n, e, f);
                k = f.x;
                l = f.y;
            }
            J.free(f);
            a1.mj++;
            if (!(23 < a1.mj)) {
                k = m[0].centerX;
                l = m[0].centerY;
                f = m[m.length - 1].centerX;
                n = m[m.length - 1].centerY;
                var p = Math.abs(k - f) - ((m[0].width + m[m.length - 1].width) / 2 + g), q = Math.abs(l - n) - ((m[0].height + m[m.length - 1].height) / 2 + g);
                g = 0;
                1 > Math.abs(q) ? Math.abs(k - f) < (m[0].width + m[m.length - 1].width) / 2 && (g = 0) : g = 0 < q ? q : 1 > Math.abs(p) ? 0 : p;
                k = Math.abs(f) > Math.abs(n) ? 0 < f !== l > n : 0 < n !== k < f;
                if (k = e === Pr ? k : !k) g = -Math.abs(g), g = Math.min(g, -m[m.length - 1].width), g = Math.min(g, -m[m.length - 1].height);
                a1.Wr.compare(g, m);
                1 < Math.abs(g) && (a1.mc = 8 > a1.mj ? a1.mc - g / (2 * Math.PI) : 5 > m.length && 10 < g ? a1.mc / 2 : a1.mc - (0 < g ? 1.7 : -2.3), a1.me = a1.mc * h, ms(a1, b, c, d, e));
            }
        }
    }
    function ls(a1, b, c, d, e) {
        for(var f = a1.mc, g = a1.me, h = a1.Ym, k = f * Math.cos(d * Math.PI / 180), l = g * Math.sin(d * Math.PI / 180), m = J.alloc(), n = b.Fa(), p = 0; p < n.length; p++){
            n[p].centerX = k;
            n[p].centerY = l;
            if (p >= n.length - 1) break;
            ns(a1, k, l, n, p, e, m) || os(a1, k, l, n, p, e, m);
            k = m.x;
            l = m.y;
        }
        J.free(m);
        a1.mj++;
        if (!(23 < a1.mj)) {
            k = Math.atan2(l, k);
            k = e === Pr ? a1.ft - k : k - a1.ft;
            k = Math.abs(k) < Math.abs(k - 2 * Math.PI) ? k : k - 2 * Math.PI;
            f = k * (f + g) / 2;
            g = a1.Wr;
            if (Math.abs(f) < Math.abs(g.Ol)) for(g.Ol = f, g.lk = [], g.sm = [], k = 0; k < n.length; k++)g.lk[k] = n[k].bounds.x, g.sm[k] = n[k].bounds.y;
            1 < Math.abs(f) && (a1.mc = 8 > a1.mj ? a1.mc - f / (2 * Math.PI) : a1.mc - (0 < f ? 1.7 : -2.3), a1.me = a1.mc * h, ls(a1, b, c, d, e));
        }
    }
    function ns(a1, b, c, d, e, f, g) {
        var h = a1.mc, k = a1.me, l = 0;
        a1 = (d[e].width + d[e + 1].width) / 2 + a1.Ti;
        var m = !1;
        if (0 <= c !== (f === Pr)) {
            if (f = b + a1, f > h) {
                f = b - a1;
                if (f < -h) return g.x = f, g.y = l, !1;
                m = !0;
            }
        } else if (f = b - a1, f < -h) {
            f = b + a1;
            if (f > h) return g.x = f, g.y = l, !1;
            m = !0;
        }
        l = Math.sqrt(1 - Math.min(1, f * f / (h * h))) * k;
        0 > c !== m && (l = -l);
        if (Math.abs(c - l) > (d[e].height + d[e + 1].height) / 2) return g.x = f, g.y = l, !1;
        g.x = f;
        g.y = l;
        return !0;
    }
    function os(a1, b, c, d, e, f, g) {
        var h = a1.mc, k = a1.me, l = 0;
        a1 = (d[e].height + d[e + 1].height) / 2 + a1.Ti;
        d = !1;
        if (0 <= b !== (f === Pr)) {
            if (f = c - a1, f < -k) {
                f = c + a1;
                if (f > k) {
                    g.x = l;
                    g.y = f;
                    return;
                }
                d = !0;
            }
        } else if (f = c + a1, f > k) {
            f = c - a1;
            if (f < -k) {
                g.x = l;
                g.y = f;
                return;
            }
            d = !0;
        }
        l = Math.sqrt(1 - Math.min(1, f * f / (k * k))) * h;
        0 > b !== d && (l = -l);
        g.x = l;
        g.y = f;
    }
    Mr.prototype.commitLayout = function() {
        this.commitNodes();
        this.isRouting && this.commitLinks();
    };
    Mr.prototype.commitNodes = function() {
        var a1 = null !== this.group && null !== this.group.placeholder && this.group.isSubGraphExpanded, b = a1 ? this.group.location.copy() : null, c = this.actualCenter;
        a1 ? c = new J(0, 0) : (c.x = this.arrangementOrigin.x + this.mc, c.y = this.arrangementOrigin.y + this.me);
        for(var d = this.network.vertexes.iterator; d.next();){
            var e = d.value;
            e.x += c.x;
            e.y += c.y;
            e.commit();
        }
        a1 && (this.group.Va(), a1 = this.group.position.copy(), c = this.group.location.copy(), b = b.re(c.re(a1)), this.group.move(b), this.Zv = b.re(a1));
    };
    Mr.prototype.commitLinks = function() {
        for(var a1 = this.network.edges.iterator; a1.next();)a1.value.commit();
    };
    function fs(a1, b, c, d, e) {
        var f = a1.ty;
        if (.001 > Math.abs(a1.Ym - 1)) return void 0 !== d && void 0 !== e ? e * b : 2 * Math.PI * b;
        a1 = b > c ? Math.sqrt(b * b - c * c) / b : Math.sqrt(c * c - b * b) / c;
        var g = 0;
        var h = void 0 !== d && void 0 !== e ? e / (f + 1) : Math.PI / (2 * (f + 1));
        for(var k = 0, l = 0; l <= f; l++){
            void 0 !== d && void 0 !== e ? k = d + l * e / f : k = l * Math.PI / (2 * f);
            var m = Math.sin(k);
            g += Math.sqrt(1 - a1 * a1 * m * m) * h;
        }
        return void 0 !== d && void 0 !== e ? (b > c ? b : c) * g : 4 * (b > c ? b : c) * g;
    }
    function es(a1, b, c, d, e) {
        return b / (void 0 !== d && void 0 !== e ? fs(a1, 1, c, d, e) : fs(a1, 1, c));
    }
    function gs(a1, b, c, d, e) {
        if (.001 > Math.abs(a1.Ym - 1)) return e / b;
        var f = b > c ? Math.sqrt(b * b - c * c) / b : Math.sqrt(c * c - b * b) / c, g = 0;
        a1 = 2 * Math.PI / (700 * a1.network.vertexes.count);
        b > c && (d += Math.PI / 2);
        for(var h = 0;; h++){
            var k = Math.sin(d + h * a1);
            g += (b > c ? b : c) * Math.sqrt(1 - f * f * k * k) * a1;
            if (g >= e) return h * a1;
        }
    }
    Mr.prototype.sort = function(a1) {
        switch(this.sorting){
            case Ur:
                break;
            case Vr:
                a1.reverse();
                break;
            case Sr:
                a1.sort(this.comparer);
                break;
            case Tr:
                a1.sort(this.comparer);
                a1.reverse();
                break;
            case Qr:
                return this.$j(ps(a1));
            default:
                C("Invalid sorting type.");
        }
        return a1;
    };
    function ps(a1) {
        for(var b = [], c = 0; c < a1.length; c++)b.push(0);
        c = new F;
        for(var d = 0; d < a1.length; d++){
            var e = -1, f = -1;
            if (0 === d) for(var g = 0; g < a1.length; g++){
                var h = a1.M(g).edgesCount;
                h > e && (e = h, f = g);
            }
            else for(g = 0; g < a1.length; g++)h = b[g], h > e && (e = h, f = g);
            c.add(a1.M(f));
            b[f] = -1;
            f = a1.M(f);
            for(g = f.sourceEdges; g.next();)e = a1.indexOf(g.value.fromVertex), 0 > e || 0 <= b[e] && b[e]++;
            for(f = f.destinationEdges; f.next();)e = a1.indexOf(f.value.toVertex), 0 > e || 0 <= b[e] && b[e]++;
        }
        return c;
    }
    Mr.prototype.$j = function(a1) {
        for(var b = [], c = 0; c < a1.length; c++){
            var d = a1.M(c);
            b[c] = [];
            for(var e, f = d.destinationEdges; f.next();)e = a1.indexOf(f.value.toVertex), e !== c && 0 > b[c].indexOf(e) && b[c].push(e);
            for(d = d.sourceEdges; d.next();)e = a1.indexOf(d.value.fromVertex), e !== c && 0 > b[c].indexOf(e) && b[c].push(e);
        }
        f = [];
        for(c = 0; c < b.length; c++)f[c] = 0;
        c = [];
        var g = [], h = [];
        d = [];
        e = new F;
        for(var k = 0, l = 0; l < b.length; l++){
            var m = b[l].length;
            if (1 === m) d.push(l);
            else if (0 === m) e.add(a1.M(l));
            else {
                if (0 === k) c.push(l);
                else {
                    for(var n = m = Infinity, p = -1, q = [], r = 0; r < c.length; r++)0 > b[c[r]].indexOf(c[r === c.length - 1 ? 0 : r + 1]) && q.push(r === c.length - 1 ? 0 : r + 1);
                    if (0 === q.length) for(r = 0; r < c.length; r++)q.push(r);
                    for(r = 0; r < q.length; r++){
                        for(var u = q[r], w = b[l], v = 0, y = 0; y < g.length; y++){
                            var z = f[g[y]], A = f[h[y]];
                            if (z < A) {
                                var B = z;
                                z = A;
                            } else B = A;
                            if (B < u && u <= z) for(A = 0; A < w.length; A++){
                                var D = w[A];
                                0 > c.indexOf(D) || B < f[D] && f[D] < z || B === f[D] || z === f[D] || v++;
                            }
                            else for(A = 0; A < w.length; A++)D = w[A], 0 > c.indexOf(D) || B < f[D] && f[D] < z && B !== f[D] && z !== f[D] && v++;
                        }
                        w = v;
                        for(y = v = 0; y < b[l].length; y++)B = c.indexOf(b[l][y]), 0 <= B && (B = Math.abs(u - (B >= u ? B + 1 : B)), v += B < c.length + 1 - B ? B : c.length + 1 - B);
                        for(y = 0; y < g.length; y++)B = f[g[y]], z = f[h[y]], B >= u && B++, z >= u && z++, B > z && (A = z, z = B, B = A), z - B < (c.length + 2) / 2 === (B < u && u <= z) && v++;
                        if (w < m || w === m && v < n) m = w, n = v, p = u;
                    }
                    c.splice(p, 0, l);
                    for(m = 0; m < c.length; m++)f[c[m]] = m;
                    for(m = 0; m < b[l].length; m++)n = b[l][m], 0 <= c.indexOf(n) && (g.push(l), h.push(n));
                }
                k++;
            }
        }
        for(g = c.length;;){
            f = !0;
            for(h = 0; h < d.length; h++)if (k = d[h], l = b[k][0], m = c.indexOf(l), 0 <= m) {
                for(p = n = 0; p < b[l].length; p++)q = c.indexOf(b[l][p]), 0 > q || q === m || (r = q > m ? q - m : m - q, n += q < m !== r > g - r ? 1 : -1);
                c.splice(0 > n ? m : m + 1, 0, k);
                d.splice(h, 1);
                h--;
            } else f = !1;
            if (f) break;
            else c.push(d[0]), d.splice(0, 1);
        }
        for(b = 0; b < c.length; b++)e.add(a1.M(c[b]));
        return e;
    };
    ma.Object.defineProperties(Mr.prototype, {
        radius: {
            get: function() {
                return this.co;
            },
            set: function(a1) {
                this.co !== a1 && (0 < a1 || isNaN(a1)) && (this.co = a1, this.C());
            }
        },
        aspectRatio: {
            get: function() {
                return this.Bm;
            },
            set: function(a1) {
                this.Bm !== a1 && 0 < a1 && (this.Bm = a1, this.C());
            }
        },
        startAngle: {
            get: function() {
                return this.qo;
            },
            set: function(a1) {
                this.qo !== a1 && (this.qo = a1, this.C());
            }
        },
        sweepAngle: {
            get: function() {
                return this.tl;
            },
            set: function(a1) {
                this.tl !== a1 && (0 < a1 && 360 >= a1 ? this.tl = a1 : this.tl = 360, this.C());
            }
        },
        arrangement: {
            get: function() {
                return this.Sb;
            },
            set: function(a1) {
                this.Sb === a1 || a1 !== as && a1 !== Nr && a1 !== $r && a1 !== Zr || (this.Sb = a1, this.C());
            }
        },
        direction: {
            get: function() {
                return this.K;
            },
            set: function(a1) {
                this.K === a1 || a1 !== Pr && a1 !== Yr && a1 !== Wr && a1 !== Xr || (this.K = a1, this.C());
            }
        },
        sorting: {
            get: function() {
                return this.nd;
            },
            set: function(a1) {
                this.nd === a1 || a1 !== Ur && a1 !== Vr && a1 !== Sr && !Tr && a1 !== Qr || (this.nd = a1, this.C());
            }
        },
        comparer: {
            get: function() {
                return this.hd;
            },
            set: function(a1) {
                this.hd !== a1 && (this.hd = a1, this.C());
            }
        },
        spacing: {
            get: function() {
                return this.tf;
            },
            set: function(a1) {
                this.tf !== a1 && (this.tf = a1, this.C());
            }
        },
        nodeDiameterFormula: {
            get: function() {
                return this.Mn;
            },
            set: function(a1) {
                this.Mn === a1 || a1 !== Rr && a1 !== bs || (this.Mn = a1, this.C());
            }
        },
        actualXRadius: {
            get: function() {
                return this.mc;
            }
        },
        actualYRadius: {
            get: function() {
                return this.me;
            }
        },
        actualSpacing: {
            get: function() {
                return this.Ti;
            }
        },
        actualCenter: {
            get: function() {
                return this.Zv;
            }
        }
    });
    var Nr = new E(Mr, "ConstantSpacing", 0), $r = new E(Mr, "ConstantDistance", 1), Zr = new E(Mr, "ConstantAngle", 2), as = new E(Mr, "Packed", 3), Pr = new E(Mr, "Clockwise", 4), Yr = new E(Mr, "Counterclockwise", 5), Wr = new E(Mr, "BidirectionalLeft", 6), Xr = new E(Mr, "BidirectionalRight", 7), Ur = new E(Mr, "Forwards", 8), Vr = new E(Mr, "Reverse", 9), Sr = new E(Mr, "Ascending", 10), Tr = new E(Mr, "Descending", 11), Qr = new E(Mr, "Optimized", 12), Rr = new E(Mr, "Pythagorean", 13), bs = new E(Mr, "Circular", 14);
    Mr.className = "CircularLayout";
    Mr.ConstantSpacing = Nr;
    Mr.ConstantDistance = $r;
    Mr.ConstantAngle = Zr;
    Mr.Packed = as;
    Mr.Clockwise = Pr;
    Mr.Counterclockwise = Yr;
    Mr.BidirectionalLeft = Wr;
    Mr.BidirectionalRight = Xr;
    Mr.Forwards = Ur;
    Mr.Reverse = Vr;
    Mr.Ascending = Sr;
    Mr.Descending = Tr;
    Mr.Optimized = Qr;
    Mr.Pythagorean = Rr;
    Mr.Circular = bs;
    function Or() {
        this.Ol = -Infinity;
        this.sm = this.lk = null;
    }
    Or.prototype.compare = function(a1, b) {
        if (0 < a1 && 0 > this.Ol || Math.abs(a1) < Math.abs(this.Ol) && !(0 > a1 && 0 < this.Ol)) for(this.Ol = a1, this.lk = [], this.sm = [], a1 = 0; a1 < b.length; a1++)this.lk[a1] = b[a1].bounds.x, this.sm[a1] = b[a1].bounds.y;
    };
    Or.prototype.commit = function(a1) {
        if (null !== this.lk && null !== this.sm) for(var b = 0; b < this.lk.length; b++){
            var c = a1.M(b);
            c.x = this.lk[b];
            c.y = this.sm[b];
        }
    };
    Or.className = "VertexArrangement";
    function cs(a1) {
        vq.call(this, a1);
    }
    la(cs, vq);
    cs.prototype.createVertex = function() {
        return new qs(this);
    };
    cs.prototype.createEdge = function() {
        return new rs(this);
    };
    cs.className = "CircularNetwork";
    function qs(a1) {
        yq.call(this, a1);
        this.u = this.Si = NaN;
    }
    la(qs, yq);
    function ds(a1, b) {
        var c = a1.network;
        if (null === c) return NaN;
        c = c.layout;
        if (null === c) return NaN;
        if (c.arrangement === as) {
            if (c.nodeDiameterFormula === bs) a1.Si = Math.max(a1.width, a1.height);
            else {
                c = Math.abs(Math.sin(b));
                b = Math.abs(Math.cos(b));
                if (0 === c) return a1.width;
                if (0 === b) return a1.height;
                a1.Si = Math.min(a1.height / c, a1.width / b);
            }
        } else a1.Si = c.nodeDiameterFormula === bs ? Math.max(a1.width, a1.height) : Math.sqrt(a1.width * a1.width + a1.height * a1.height);
        return a1.Si;
    }
    ma.Object.defineProperties(qs.prototype, {
        diameter: {
            get: function() {
                return this.Si;
            },
            set: function(a1) {
                this.Si !== a1 && (this.Si = a1);
            }
        },
        actualAngle: {
            get: function() {
                return this.u;
            },
            set: function(a1) {
                this.u !== a1 && (this.u = a1);
            }
        }
    });
    qs.className = "CircularVertex";
    function rs(a1) {
        zq.call(this, a1);
    }
    la(rs, zq);
    rs.className = "CircularEdge";
    function ss(a1) {
        ti.call(this);
        this.ah = null;
        this.zn = 0;
        this.$d = new L(100, 100).freeze();
        this.Am = !1;
        this.sf = !0;
        this.td = !1;
        this.cl = 100;
        this.Zm = 1;
        this.Zf = 1E3;
        this.Hn = 10;
        this.eo = Math;
        this.Gk = .05;
        this.Fk = 50;
        this.Dk = 150;
        this.Ek = 0;
        this.Um = 10;
        this.Tm = 5;
        a1 && Object.assign(this, a1);
    }
    la(ss, ti);
    ss.prototype.cloneProtected = function(a1) {
        ti.prototype.cloneProtected.call(this, a1);
        a1.$d.assign(this.$d);
        a1.Am = this.Am;
        a1.sf = this.sf;
        a1.td = this.td;
        a1.cl = this.cl;
        a1.Zm = this.Zm;
        a1.Zf = this.Zf;
        a1.Hn = this.Hn;
        a1.eo = this.eo;
        a1.Gk = this.Gk;
        a1.Fk = this.Fk;
        a1.Dk = this.Dk;
        a1.Ek = this.Ek;
        a1.Um = this.Um;
        a1.Tm = this.Tm;
    };
    ss.prototype.createNetwork = function() {
        return new ts(this);
    };
    ss.prototype.doLayout = function(a1) {
        null === this.network && (this.network = this.makeNetwork(a1));
        a1 = this.maxIterations;
        if (0 < this.network.vertexes.count) {
            this.network.Jo();
            for(var b = this.network.vertexes.iterator; b.next();){
                var c = b.value;
                c.charge = this.electricalCharge(c);
                c.mass = this.gravitationalMass(c);
            }
            for(b = this.network.edges.iterator; b.next();)c = b.value, c.stiffness = this.springStiffness(c), c.length = this.springLength(c);
            this.Bu();
            this.zn = 0;
            if (this.needsClusterLayout()) {
                b = this.network;
                c = b.Zx();
                for(var d = c.iterator; d.next();){
                    this.network = d.value;
                    for(var e = this.network.vertexes.iterator; e.next();){
                        var f = e.value;
                        f.Vd = f.vertexes.count;
                        f.sh = 1;
                        f.Gj = null;
                        f.We = null;
                    }
                    us(this, 0, a1);
                }
                this.network = b;
                var g = d = c.iterator;
                d = this.arrangementSpacing;
                var h = g.count, k = !0;
                f = e = 0;
                for(var l = Ea(), m = 0; m < h + b.vertexes.count + 2; m++)l[m] = null;
                h = 0;
                g.reset();
                for(var n = N.alloc(); g.next();)if (m = g.value, this.computeBounds(m, n), k) k = !1, e = n.x + n.width / 2, f = n.y + n.height / 2, l[0] = new J(n.x + n.width + d.width, n.y), l[1] = new J(n.x, n.y + n.height + d.height), h = 2;
                else {
                    var p = vs(l, h, e, f, n.width, n.height, d), q = l[p], r = new J(q.x + n.width + d.width, q.y), u = new J(q.x, q.y + n.height + d.height);
                    p + 1 < h && l.splice(p + 1, 0, null);
                    l[p] = r;
                    l[p + 1] = u;
                    h++;
                    p = q.x - n.x;
                    q = q.y - n.y;
                    for(m = m.vertexes.iterator; m.next();)r = m.value, r.centerX += p, r.centerY += q;
                }
                N.free(n);
                for(m = b.vertexes.iterator; m.next();)g = m.value, p = g.bounds, 2 > h ? (e = p.x + p.width / 2, f = p.y + p.height / 2, l[0] = new J(p.x + p.width + d.width, p.y), l[1] = new J(p.x, p.y + p.height + d.height), h = 2) : (k = vs(l, h, e, f, p.width, p.height, d), n = l[k], q = new J(n.x + p.width + d.width, n.y), p = new J(n.x, n.y + p.height + d.height), k + 1 < h && l.splice(k + 1, 0, null), l[k] = q, l[k + 1] = p, h++, g.centerX = n.x + g.width / 2, g.centerY = n.y + g.height / 2);
                Ga(l);
                for(d = c.iterator; d.next();){
                    c = d.value;
                    for(e = c.vertexes.iterator; e.next();)b.dh(e.value);
                    for(c = c.edges.iterator; c.next();)b.Ao(c.value);
                }
            }
            ws(this, a1);
            this.updateParts();
        }
        this.cl = a1;
        this.network = null;
        this.isValidLayout = !0;
    };
    ss.prototype.needsClusterLayout = function() {
        if (3 > this.network.vertexes.count) return !1;
        for(var a1 = 0, b = 0, c = this.network.vertexes.first().bounds, d = this.network.vertexes.iterator; d.next();){
            if (d.value.bounds.Yc(c) && (a1++, 2 < a1)) return !0;
            if (10 < b) break;
            b++;
        }
        return !1;
    };
    ss.prototype.computeBounds = function(a1, b) {
        var c = !0;
        for(a1 = a1.vertexes.iterator; a1.next();){
            var d = a1.value;
            c ? (c = !1, b.set(d.bounds)) : b.ed(d.bounds);
        }
        return b;
    };
    function us(a1, b, c) {
        if (xs(a1, b)) {
            var d = a1.Zf;
            a1.Zf *= 1 + 1 / (b + 1);
            var e = ys(a1, b), f = Math.max(0, Math.max(Math.min(a1.network.vertexes.count, c * (b + 1) / 11), 10));
            a1.maxIterations += f;
            us(a1, b + 1, c);
            ws(a1, f);
            zs(a1, e);
            b = e.vertexes.Fa();
            b.sort(function(a1, b) {
                return null === a1 || null === b || a1 === b ? 0 : b.Vd - a1.Vd;
            });
            for(c = 0; c < b.length; c++)As(a1, b[c]);
            a1.Zf = d;
        }
    }
    function xs(a1, b) {
        if (10 < b || 3 > a1.network.vertexes.count) return !1;
        a1.ah = a1.network.vertexes.Fa();
        a1 = a1.ah;
        a1.sort(function(a1, b) {
            return null === a1 || null === b || a1 === b ? 0 : b.Vd - a1.Vd;
        });
        for(b = a1.length - 1; 0 <= b && 1 >= a1[b].Vd;)b--;
        return 1 < a1.length - b;
    }
    function ys(a1, b) {
        for(var c = a1.network, d = new ts(a1), e = 0; e < a1.ah.length; e++){
            var f = a1.ah[e];
            if (1 < f.Vd) {
                d.dh(f);
                var g = new Bs;
                g.Qs = f.Vd;
                g.Rs = f.width;
                g.Ps = f.height;
                g.Sv = f.focus.x;
                g.Tv = f.focus.y;
                null === f.We && (f.We = new F);
                f.We.add(g);
                f.sv = f.We.count - 1;
            } else break;
        }
        for(f = c.edges.iterator; f.next();){
            var h = f.value;
            e = h.fromVertex;
            g = h.toVertex;
            e.network === d && g.network === d ? d.Ao(h) : e.network === d ? (h = e.Gj, null === h && (h = new F, e.Gj = h), h.add(g), e.Vd--, e.sh += g.sh) : g.network === d && (h = g.Gj, null === h && (h = new F, g.Gj = h), h.add(e), g.Vd--, g.sh += e.sh);
        }
        for(e = d.edges.iterator; e.next();)f = e.value, f.length *= Math.max(1, K.sqrt((f.fromVertex.sh + f.toVertex.sh) / (4 * b + 1)));
        for(b = d.vertexes.iterator; b.next();){
            e = b.value;
            var k = e.Gj;
            if (null !== k && 0 < k.count && (g = e.We.M(e.We.count - 1).Qs - e.Vd, !(0 >= g))) {
                for(var l = h = 0, m = k.count - g; m < k.count; m++){
                    var n = k.M(m), p = null;
                    for(f = n.edges.iterator; f.next();){
                        var q = f.value;
                        if (q.Ax(n) === e) {
                            p = q;
                            break;
                        }
                    }
                    null !== p && (l += p.length, h += n.width * n.height);
                }
                f = e.centerX;
                k = e.centerY;
                m = e.width;
                n = e.height;
                p = e.focus;
                q = m * n;
                1 > q && (q = 1);
                h = K.sqrt((h + q + l * l * 4 / (g * g)) / q);
                g = (h - 1) * m / 2;
                h = (h - 1) * n / 2;
                e.bounds = new N(f - p.x - g, k - p.y - h, m + 2 * g, n + 2 * h);
                e.focus = new J(p.x + g, p.y + h);
            }
        }
        a1.network = d;
        return c;
    }
    function zs(a1, b) {
        for(var c = a1.network.vertexes.iterator; c.next();){
            var d = c.value;
            d.network = b;
            if (null !== d.We) {
                var e = d.We.M(d.sv);
                d.Vd = e.Qs;
                var f = e.Sv, g = e.Tv;
                d.bounds = new N(d.centerX - f, d.centerY - g, e.Rs, e.Ps);
                d.focus = new J(f, g);
                d.sv--;
            }
        }
        for(c = a1.network.edges.iterator; c.next();)c.value.network = b;
        a1.network = b;
    }
    function As(a1, b) {
        var c = b.Gj;
        if (null !== c && 0 !== c.count) {
            var d = b.centerX, e = b.centerY, f = b.width, g = b.height;
            null !== b.We && 0 < b.We.count && (g = b.We.M(0), f = g.Rs, g = g.Ps);
            f = K.sqrt(f * f + g * g) / 2;
            for(var h = !1, k = g = 0, l = 0, m = b.vertexes.iterator; m.next();){
                var n = m.value;
                1 >= n.Vd ? k++ : (h = !0, l++, g += Math.atan2(b.centerY - n.centerY, b.centerX - n.centerX));
            }
            if (0 !== k) {
                for(0 < l && (g /= l), l = b = 0, b = h ? 2 * Math.PI / (k + 1) : 2 * Math.PI / k, 0 === k % 2 && (l = b / 2), 1 < c.count && c.sort(function(a1, b) {
                    return null === a1 || null === b || a1 === b ? 0 : b.width * b.height - a1.width * a1.height;
                }), h = 0 === k % 2 ? 0 : 1, c = c.iterator; c.next();)if (k = c.value, !(1 < k.Vd || a1.isFixed(k))) {
                    m = null;
                    for(n = k.edges.iterator; n.next();){
                        m = n.value;
                        break;
                    }
                    n = k.width;
                    var p = k.height;
                    n = K.sqrt(n * n + p * p) / 2;
                    m = f + m.length + n;
                    n = g + (b * (h / 2 >> 1) + l) * (0 === h % 2 ? 1 : -1);
                    k.centerX = d + m * Math.cos(n);
                    k.centerY = e + m * Math.sin(n);
                    h++;
                }
            }
        }
    }
    function vs(a1, b, c, d, e, f, g) {
        var h = 9E19, k = -1, l = 0;
        a: for(; l < b; l++){
            var m = a1[l], n = m.x - c, p = m.y - d;
            n = n * n + p * p;
            if (n < h) {
                for(p = l - 1; 0 <= p; p--)if (a1[p].y > m.y && a1[p].x - m.x < e + g.width) continue a;
                for(p = l + 1; p < b; p++)if (a1[p].x > m.x && a1[p].y - m.y < f + g.height) continue a;
                k = l;
                h = n;
            }
        }
        return k;
    }
    ss.prototype.Bu = function() {
        if (this.comments) for(var a1 = this.network.vertexes.iterator; a1.next();)this.addComments(a1.value);
    };
    ss.prototype.addComments = function(a1) {
        var b = a1.node;
        if (null !== b) for(b = b.Mu(); b.next();){
            var c = b.value;
            if ("Comment" === c.category && c.isVisible()) {
                var d = this.network.ki(c);
                null === d && (d = this.network.Al(c));
                d.charge = this.defaultCommentElectricalCharge;
                c = null;
                for(var e = d.destinationEdges; e.next();){
                    var f = e.value;
                    if (f.toVertex === a1) {
                        c = f;
                        break;
                    }
                }
                if (null === c) {
                    for(e = d.sourceEdges; e.next();)if (f = e.value, f.fromVertex === a1) {
                        c = f;
                        break;
                    }
                }
                null === c && (c = this.network.Yj(a1, d, null));
                c.length = this.defaultCommentSpringLength;
            }
        }
    };
    function Cs(a1, b) {
        var c = a1.bounds, d = c.x;
        a1 = c.y;
        var e = c.width;
        c = c.height;
        var f = b.bounds, g = f.x;
        b = f.y;
        var h = f.width;
        f = f.height;
        return d + e < g ? a1 > b + f ? (c = d + e - g, a1 = a1 - b - f, K.sqrt(c * c + a1 * a1)) : a1 + c < b ? (d = d + e - g, a1 = a1 + c - b, K.sqrt(d * d + a1 * a1)) : g - (d + e) : d > g + h ? a1 > b + f ? (c = d - g - h, a1 = a1 - b - f, K.sqrt(c * c + a1 * a1)) : a1 + c < b ? (d = d - g - h, a1 = a1 + c - b, K.sqrt(d * d + a1 * a1)) : d - (g + h) : a1 > b + f ? a1 - (b + f) : a1 + c < b ? b - (a1 + c) : .1;
    }
    function ws(a1, b) {
        a1.ah = null;
        for(b = a1.zn + b; a1.zn < b && (a1.zn++, Ds(a1)););
        a1.ah = null;
    }
    function Ds(a1) {
        null === a1.ah && (a1.ah = a1.network.vertexes.Fa());
        var b = a1.ah;
        if (0 >= b.length) return !1;
        var c = b[0];
        c.forceX = 0;
        c.forceY = 0;
        for(var d = c.centerX, e = d, f = c = c.centerY, g = 1; g < b.length; g++){
            var h = b[g];
            h.forceX = 0;
            h.forceY = 0;
            var k = h.centerX;
            h = h.centerY;
            d = Math.min(d, k);
            e = Math.max(e, k);
            c = Math.min(c, h);
            f = Math.max(f, h);
        }
        (e = e - d > f - c) ? b.sort(function(a1, b) {
            return null === a1 || null === b || a1 === b ? 0 : a1.centerX - b.centerX;
        }) : b.sort(function(a1, b) {
            return null === a1 || null === b || a1 === b ? 0 : a1.centerY - b.centerY;
        });
        c = a1.Zf;
        var l = d = h = 0;
        for(f = 0; f < b.length; f++){
            g = b[f];
            d = g.bounds;
            h = g.focus;
            k = d.x + h.x;
            var m = d.y + h.y;
            d = g.charge * a1.electricalFieldX(k, m);
            l = g.charge * a1.electricalFieldY(k, m);
            d += g.mass * a1.gravitationalFieldX(k, m);
            l += g.mass * a1.gravitationalFieldY(k, m);
            g.forceX += d;
            g.forceY += l;
            for(var n = f + 1; n < b.length; n++){
                var p = b[n];
                if (p !== g) {
                    d = p.bounds;
                    h = p.focus;
                    l = d.x + h.x;
                    var q = d.y + h.y;
                    if (k - l > c || l - k > c) {
                        if (e) break;
                    } else if (m - q > c || q - m > c) {
                        if (!e) break;
                    } else {
                        var r = Cs(g, p);
                        1 > r ? (d = a1.randomNumberGenerator, null === d && (a1.randomNumberGenerator = d = new Es), r = d.random(), h = d.random(), k > l ? (d = Math.abs(p.bounds.right - g.bounds.x), d = (1 + d) * r) : k < l ? (d = Math.abs(p.bounds.x - g.bounds.right), d = -(1 + d) * r) : (d = Math.max(p.width, g.width), d = (1 + d) * r - d / 2), m > q ? (l = Math.abs(p.bounds.bottom - g.bounds.y), l = (1 + l) * h) : k < l ? (l = Math.abs(p.bounds.y - g.bounds.bottom), l = -(1 + l) * h) : (l = Math.max(p.height, g.height), l = (1 + l) * h - l / 2)) : (h = -(g.charge * p.charge) / (r * r), d = (l - k) / r * h, l = (q - m) / r * h);
                        g.forceX += d;
                        g.forceY += l;
                        p.forceX -= d;
                        p.forceY -= l;
                    }
                }
            }
        }
        for(e = a1.network.edges.iterator; e.next();)h = e.value, c = h.fromVertex, f = h.toVertex, g = c.bounds, k = c.focus, d = g.x + k.x, g = g.y + k.y, m = f.bounds, n = f.focus, k = m.x + n.x, m = m.y + n.y, n = Cs(c, f), 1 > n ? (n = a1.randomNumberGenerator, null === n && (a1.randomNumberGenerator = n = new Es), h = n.random(), n = n.random(), d = (d > k ? 1 : -1) * (1 + (f.width > c.width ? f.width : c.width)) * h, l = (g > m ? 1 : -1) * (1 + (f.height > c.height ? f.height : c.height)) * n) : (h = h.stiffness * (n - h.length), d = (k - d) / n * h, l = (m - g) / n * h), c.forceX += d, c.forceY += l, f.forceX -= d, f.forceY -= l;
        for(e = d = 0; e < b.length; e++)c = b[e], a1.isFixed(c) ? a1.moveFixedVertex(c) : d = Math.max(d, a1.moveVertex(c) || 0);
        return d > a1.epsilonDistance * a1.epsilonDistance;
    }
    ss.prototype.moveVertex = function(a1) {
        var b = a1.forceX, c = a1.forceY, d = this.moveLimit;
        b < -d ? b = -d : b > d && (b = d);
        c < -d ? c = -d : c > d && (c = d);
        a1.centerX += b;
        a1.centerY += c;
        return b * b + c * c;
    };
    ss.prototype.moveFixedVertex = function() {};
    ss.prototype.commitLayout = function() {
        this.yv();
        this.commitNodes();
        this.isRouting && this.commitLinks();
    };
    ss.prototype.yv = function() {
        if (this.setsPortSpots) for(var a1 = this.network.edges.iterator; a1.next();){
            var b = a1.value.link;
            null !== b && (b.fromSpot = Sc, b.toSpot = Sc);
        }
    };
    ss.prototype.commitNodes = function() {
        var a1 = 0, b = 0;
        if (this.arrangesToOrigin) {
            var c = N.alloc();
            this.computeBounds(this.network, c);
            b = this.arrangementOrigin;
            a1 = b.x - c.x;
            b = b.y - c.y;
            N.free(c);
        }
        c = N.alloc();
        for(var d = this.network.vertexes.iterator; d.next();){
            var e = d.value;
            if (0 !== a1 || 0 !== b) c.assign(e.bounds), c.x += a1, c.y += b, e.bounds = c;
            e.commit();
        }
        N.free(c);
    };
    ss.prototype.commitLinks = function() {
        for(var a1 = this.network.edges.iterator; a1.next();)a1.value.commit();
    };
    ss.prototype.springStiffness = function(a1) {
        a1 = a1.stiffness;
        return isNaN(a1) ? this.Gk : a1;
    };
    ss.prototype.springLength = function(a1) {
        a1 = a1.length;
        return isNaN(a1) ? this.Fk : a1;
    };
    ss.prototype.electricalCharge = function(a1) {
        a1 = a1.charge;
        return isNaN(a1) ? this.Dk : a1;
    };
    ss.prototype.electricalFieldX = function() {
        return 0;
    };
    ss.prototype.electricalFieldY = function() {
        return 0;
    };
    ss.prototype.gravitationalMass = function(a1) {
        a1 = a1.mass;
        return isNaN(a1) ? this.Ek : a1;
    };
    ss.prototype.gravitationalFieldX = function() {
        return 0;
    };
    ss.prototype.gravitationalFieldY = function() {
        return 0;
    };
    ss.prototype.isFixed = function(a1) {
        return a1.isFixed;
    };
    ma.Object.defineProperties(ss.prototype, {
        currentIteration: {
            get: function() {
                return this.zn;
            }
        },
        arrangementSpacing: {
            get: function() {
                return this.$d;
            },
            set: function(a1) {
                this.$d.D(a1) || (this.$d.assign(a1), this.C());
            }
        },
        arrangesToOrigin: {
            get: function() {
                return this.Am;
            },
            set: function(a1) {
                this.Am !== a1 && (this.Am = a1, this.C());
            }
        },
        setsPortSpots: {
            get: function() {
                return this.sf;
            },
            set: function(a1) {
                this.sf !== a1 && (this.sf = a1, this.C());
            }
        },
        comments: {
            get: function() {
                return this.td;
            },
            set: function(a1) {
                this.td !== a1 && (this.td = a1, this.C());
            }
        },
        maxIterations: {
            get: function() {
                return this.cl;
            },
            set: function(a1) {
                this.cl !== a1 && 0 <= a1 && (this.cl = a1, this.C());
            }
        },
        epsilonDistance: {
            get: function() {
                return this.Zm;
            },
            set: function(a1) {
                this.Zm !== a1 && 0 < a1 && (this.Zm = a1, this.C());
            }
        },
        infinityDistance: {
            get: function() {
                return this.Zf;
            },
            set: function(a1) {
                this.Zf !== a1 && 1 < a1 && (this.Zf = a1, this.C());
            }
        },
        moveLimit: {
            get: function() {
                return this.Hn;
            },
            set: function(a1) {
                this.Hn !== a1 && 1 < a1 && (this.Hn = a1, this.C());
            }
        },
        randomNumberGenerator: {
            get: function() {
                return this.eo;
            },
            set: function(a1) {
                this.eo !== a1 && (null !== a1 && "function" !== typeof a1.random && C('ForceDirectedLayout.randomNumberGenerator must have a "random()" function on it: ' + a1), this.eo = a1);
            }
        },
        defaultSpringStiffness: {
            get: function() {
                return this.Gk;
            },
            set: function(a1) {
                this.Gk !== a1 && (this.Gk = a1, this.C());
            }
        },
        defaultSpringLength: {
            get: function() {
                return this.Fk;
            },
            set: function(a1) {
                this.Fk !== a1 && (this.Fk = a1, this.C());
            }
        },
        defaultElectricalCharge: {
            get: function() {
                return this.Dk;
            },
            set: function(a1) {
                this.Dk !== a1 && (this.Dk = a1, this.C());
            }
        },
        defaultGravitationalMass: {
            get: function() {
                return this.Ek;
            },
            set: function(a1) {
                this.Ek !== a1 && (this.Ek = a1, this.C());
            }
        },
        defaultCommentSpringLength: {
            get: function() {
                return this.Um;
            },
            set: function(a1) {
                this.Um !== a1 && (this.Um = a1, this.C());
            }
        },
        defaultCommentElectricalCharge: {
            get: function() {
                return this.Tm;
            },
            set: function(a1) {
                this.Tm !== a1 && (this.Tm = a1, this.C());
            }
        }
    });
    ss.className = "ForceDirectedLayout";
    function Bs() {
        this.Tv = this.Sv = this.Ps = this.Rs = this.Qs = 0;
    }
    Bs.className = "ForceDirectedSubnet";
    function ts(a1) {
        vq.call(this, a1);
    }
    la(ts, vq);
    ts.prototype.createVertex = function() {
        return new Fs(this);
    };
    ts.prototype.createEdge = function() {
        return new Gs(this);
    };
    ts.className = "ForceDirectedNetwork";
    function Fs(a1) {
        yq.call(this, a1);
        this.ia = !1;
        this.Ha = this.u = NaN;
        this.sh = this.Vd = this.V = this.F = 0;
        this.We = this.Gj = null;
        this.sv = 0;
    }
    la(Fs, yq);
    ma.Object.defineProperties(Fs.prototype, {
        isFixed: {
            get: function() {
                return this.ia;
            },
            set: function(a1) {
                this.ia !== a1 && (this.ia = a1);
            }
        },
        charge: {
            get: function() {
                return this.u;
            },
            set: function(a1) {
                this.u !== a1 && (this.u = a1);
            }
        },
        mass: {
            get: function() {
                return this.Ha;
            },
            set: function(a1) {
                this.Ha !== a1 && (this.Ha = a1);
            }
        },
        forceX: {
            get: function() {
                return this.F;
            },
            set: function(a1) {
                this.F !== a1 && (this.F = a1);
            }
        },
        forceY: {
            get: function() {
                return this.V;
            },
            set: function(a1) {
                this.V !== a1 && (this.V = a1);
            }
        }
    });
    Fs.className = "ForceDirectedVertex";
    function Gs(a1) {
        zq.call(this, a1);
        this.j = this.o = NaN;
    }
    la(Gs, zq);
    ma.Object.defineProperties(Gs.prototype, {
        stiffness: {
            get: function() {
                return this.o;
            },
            set: function(a1) {
                this.o !== a1 && (this.o = a1);
            }
        },
        length: {
            get: function() {
                return this.j;
            },
            set: function(a1) {
                this.j !== a1 && (this.j = a1);
            }
        }
    });
    Gs.className = "ForceDirectedEdge";
    function Es() {
        var a1 = 0;
        void 0 === a1 && (a1 = 42);
        this.seed = a1;
        this.ay = 48271;
        this.ey = 2147483647;
        this.Q = 44488.07041494893;
        this.gy = 3399;
        this.by = 1 / 2147483647;
        this.random();
    }
    Es.prototype.random = function() {
        var a1 = this.seed % this.Q * this.ay - this.seed / this.Q * this.gy;
        0 < a1 ? this.seed = a1 : this.seed = a1 + this.ey;
        return this.seed * this.by;
    };
    Es.className = "RandomNumberGenerator";
    function Hs(a1) {
        ti.call(this);
        this.lc = this.ie = 25;
        this.K = 0;
        this.Ck = Is;
        this.Yk = Js;
        this.Pk = Ks;
        this.bj = 4;
        this.qk = Ls;
        this.bg = 15;
        this.sf = !0;
        this.Bn = 4;
        this.Ra = this.Hq = this.Ia = -1;
        this.Md = this.Gn = 0;
        this.Ta = this.Kd = this.Ld = this.he = this.vb = null;
        this.Jn = 0;
        this.In = this.kj = null;
        this.le = 0;
        this.el = null;
        this.Rf = new J;
        this.He = [];
        this.He.length = 100;
        this.xw = this.ve = 0;
        a1 && Object.assign(this, a1);
    }
    la(Hs, ti);
    Hs.prototype.cloneProtected = function(a1) {
        ti.prototype.cloneProtected.call(this, a1);
        a1.ie = this.ie;
        a1.lc = this.lc;
        a1.K = this.K;
        a1.Ck = this.Ck;
        a1.Yk = this.Yk;
        a1.Pk = this.Pk;
        a1.bj = this.bj;
        a1.qk = this.qk;
        a1.bg = this.bg;
        a1.sf = this.sf;
        a1.Bn = this.Bn;
        a1.ve = this.ve;
    };
    Hs.prototype.qb = function(a1) {
        a1.classType === Hs ? 0 === a1.name.indexOf("Aggressive") ? this.aggressiveOption = a1 : 0 === a1.name.indexOf("Cycle") ? this.cycleRemoveOption = a1 : 0 === a1.name.indexOf("Init") ? this.initializeOption = a1 : 0 === a1.name.indexOf("Layer") ? this.layeringOption = a1 : C("Unknown enum value: " + a1) : ti.prototype.qb.call(this, a1);
    };
    Hs.prototype.createNetwork = function() {
        return new Ms(this);
    };
    Hs.prototype.doLayout = function(a1) {
        null === this.network && (this.network = this.makeNetwork(a1));
        this.arrangementOrigin = this.initialOrigin(this.arrangementOrigin);
        this.Hq = -1;
        this.Md = this.Gn = 0;
        this.el = this.In = this.kj = null;
        for(a1 = 0; a1 < this.He.length; a1++)this.He[a1] = null;
        if (0 < this.network.vertexes.count) {
            this.network.Jo();
            this.cycleRemoveOption !== Ns && this.removeCycles();
            for(a1 = this.network.vertexes.iterator; a1.next();)a1.value.layer = -1;
            this.Ia = -1;
            this.assignLayers();
            for(a1.reset(); a1.next();)this.Ia = Math.max(this.Ia, a1.value.layer);
            this.cycleRemoveOption === Ns && this.removeCycles();
            a1 = this.network;
            for(var b = [], c = a1.edges.iterator; c.next();){
                var d = c.value;
                d.valid = !1;
                b.push(d);
            }
            for(c = 0; c < b.length; c++){
                d = b[c];
                var e = d.fromVertex, f = d.toVertex;
                if (!(d.valid || (null === e.node && null === e.data || null === f.node && null === f.data) && e.layer === f.layer)) {
                    var g = 0, h = 0, k = 0, l = 0;
                    if (null !== d.link) {
                        h = d.link;
                        if (null === h) continue;
                        var m = e.node;
                        g = f.node;
                        if (null === m || null === g) continue;
                        var n = h.fromNode;
                        k = h.toNode;
                        for(var p = h.fromPort; null !== p && !p.Ed();)p = p.panel;
                        for(h = h.toPort; null !== h && !h.Ed();)h = h.panel;
                        if (d.rev) {
                            l = n;
                            var q = p;
                            n = k;
                            p = h;
                            k = l;
                            h = q;
                        }
                        var r = e.focus;
                        l = f.focus;
                        var u = d.rev ? f.bounds : e.bounds;
                        q = J.alloc();
                        m !== n ? u.w() && n.isVisible() ? n.actualBounds.w() ? (Xo(n, p, wc, q), q.x += n.actualBounds.x - u.x, q.y += n.actualBounds.y - u.y) : (Xo(n, p, wc, q), q.w() || q.assign(r)) : q.assign(r) : u.w() ? (Xo(n, p, wc, q), q.w() || q.assign(r)) : q.assign(r);
                        n = d.rev ? e.bounds : f.bounds;
                        m = J.alloc();
                        g !== k ? n.w() && k.isVisible() ? k.actualBounds.w() ? (Xo(k, h, wc, m), m.x += k.actualBounds.x - n.x, m.y += k.actualBounds.y - n.y) : (Xo(k, h, wc, m), m.w() || m.assign(l)) : m.assign(l) : n.w() ? (Xo(k, h, wc, m), m.w() || m.assign(l)) : m.assign(l);
                        90 === this.K || 270 === this.K ? (g = Math.round((q.x - r.x) / this.lc), k = q.x, h = Math.round((m.x - l.x) / this.lc), l = m.x) : (g = Math.round((q.y - r.y) / this.lc), k = q.y, h = Math.round((m.y - l.y) / this.lc), l = m.y);
                        J.free(q);
                        J.free(m);
                        d.portFromColOffset = g;
                        d.portFromPos = k;
                        d.portToColOffset = h;
                        d.portToPos = l;
                    } else d.portFromColOffset = 0, d.portFromPos = 0, d.portToColOffset = 0, d.portToPos = 0;
                    q = e.layer;
                    m = f.layer;
                    n = 0;
                    u = d.link;
                    if (null !== u) {
                        var w = u.fromPort, v = u.toPort;
                        if (null !== w && null !== v) {
                            var y = u.fromNode;
                            p = u.toNode;
                            if (null !== y && null !== p) {
                                var z = Os(this, !0), A = Os(this, !1), B = this.setsPortSpots ? z : u.computeSpot(!0, w);
                                r = this.setsPortSpots ? A : u.computeSpot(!1, v);
                                var D = u.isOrthogonal;
                                B.$c() && B.Hf(A) && r.$c() && r.Hf(z) ? n = 0 : (z = u.getLinkPoint(y, w, B, !0, D, p, v, J.alloc()), A = u.getLinkDirection(y, w, z, B, !0, D, p, v), J.free(z), B.xs() || A !== Ps(this, d, !0) ? this.setsPortSpots && null !== y && 1 === y.ports.count && d.rev && (n += 1) : n += 1, B = u.getLinkPoint(p, v, r, !1, D, y, w, J.alloc()), u = u.getLinkDirection(p, v, B, r, !1, D, y, w), J.free(B), r.xs() || u !== Ps(this, d, !1) ? this.setsPortSpots && null !== p && 1 === p.ports.count && d.rev && (n += 2) : n += 2);
                            }
                        }
                    }
                    p = n;
                    n = 1 === p || 3 === p ? !0 : !1;
                    p = 2 === p || 3 === p ? !0 : !1;
                    u = null;
                    w = void 0;
                    p && (this._experimental && (r = e, u = [], u.push(f), u = Qs(this, r, u) ? u.reverse() : [], w = 1), r = a1.createVertex(), r.node = null, r.Cu = 1, r.layer = q, r.near = e, a1.dh(r), e = a1.Yj(e, r, d.link), e.valid = !1, e.rev = d.rev, e.portFromColOffset = g, e.portToColOffset = 0, e.portFromPos = k, e.portToPos = 0, e = r);
                    v = 1;
                    n && v--;
                    if (q - m > v && 0 < q) {
                        d.valid = !1;
                        r = a1.createVertex();
                        r.node = null;
                        r.Cu = 2;
                        r.layer = q - 1;
                        u && w < u.length && r.layer === u[w].layer && (r.near = u[w++]);
                        a1.dh(r);
                        e = a1.Yj(e, r, d.link);
                        e.valid = !0;
                        e.rev = d.rev;
                        e.portFromColOffset = p ? 0 : g;
                        e.portToColOffset = 0;
                        e.portFromPos = p ? 0 : k;
                        e.portToPos = 0;
                        e = r;
                        for(q--; q - m > v && 0 < q;)r = a1.createVertex(), r.node = null, r.Cu = 3, r.layer = q - 1, u && w < u.length && r.layer === u[w].layer && (r.near = u[w++]), a1.dh(r), e = a1.Yj(e, r, d.link), e.valid = !0, e.rev = d.rev, e.portFromColOffset = 0, e.portToColOffset = 0, e.portFromPos = 0, e.portToPos = 0, e = r, q--;
                        e = a1.Yj(r, f, d.link);
                        e.valid = !n;
                        n && (r.near = f);
                        e.rev = d.rev;
                        e.portFromColOffset = 0;
                        e.portToColOffset = h;
                        e.portFromPos = 0;
                        e.portToPos = l;
                    } else d.valid = !0;
                }
            }
            a1 = this.vb = [];
            for(b = 0; b <= this.Ia; b++)a1[b] = 0;
            for(b = this.network.vertexes.iterator; b.next();)b.value.index = -1;
            this.initializeIndices();
            this.Hq = -1;
            for(c = this.Md = this.Gn = 0; c <= this.Ia; c++)a1[c] > a1[this.Md] && (this.Hq = a1[c] - 1, this.Md = c), a1[c] < a1[this.Gn] && (this.Gn = c);
            this.el = [];
            for(c = 0; c < a1.length; c++)this.el[c] = [];
            for(b.reset(); b.next();)a1 = b.value, this.el[a1.layer][a1.index] = a1;
            this.Ra = -1;
            for(a1 = 0; a1 <= this.Ia; a1++){
                b = Rs(this, a1);
                c = 0;
                d = this.vb[a1];
                for(f = 0; f < d; f++)e = b[f], c += this.nodeMinColumnSpace(e, !0), e.column = c, c += 1, c += this.nodeMinColumnSpace(e, !1);
                this.Ra = Math.max(this.Ra, c - 1);
                Ss(this, a1, b);
            }
            this.reduceCrossings();
            this.straightenAndPack();
            this.updateParts();
        }
        this.network = null;
        this.isValidLayout = !0;
    };
    Hs.prototype.linkMinLength = function() {
        return 1;
    };
    function Ts(a1) {
        var b = a1.fromVertex.node || a1.fromVertex.data;
        a1 = a1.toVertex.node || a1.toVertex.data;
        return null === b && null === a1 ? 8 : null === b || null === a1 ? 4 : 1;
    }
    Hs.prototype.nodeMinLayerSpace = function(a1, b) {
        return null === a1.node && null === a1.data ? 0 : 90 === this.K || 270 === this.K ? b ? a1.focus.y + 10 : a1.bounds.height - a1.focus.y + 10 : b ? a1.focus.x + 10 : a1.bounds.width - a1.focus.x + 10;
    };
    Hs.prototype.nodeMinColumnSpace = function(a1, b) {
        if (null === a1.node && null === a1.data) return 0;
        var c = b ? a1.ev : a1.dv;
        if (null !== c) return c;
        c = this.K;
        return 90 === c || 270 === c ? b ? a1.ev = a1.focus.x / this.lc + 1 | 0 : a1.dv = (a1.bounds.width - a1.focus.x) / this.lc + 1 | 0 : b ? a1.ev = a1.focus.y / this.lc + 1 | 0 : a1.dv = (a1.bounds.height - a1.focus.y) / this.lc + 1 | 0;
    };
    function Us(a1) {
        null === a1.kj && (a1.kj = []);
        for(var b = 0, c = a1.network.vertexes.iterator; c.next();){
            var d = c.value;
            a1.kj[b] = d.layer;
            b++;
            a1.kj[b] = d.column;
            b++;
            a1.kj[b] = d.index;
            b++;
        }
        return a1.kj;
    }
    function Vs(a1, b) {
        var c = 0;
        for(a1 = a1.network.vertexes.iterator; a1.next();){
            var d = a1.value;
            d.layer = b[c];
            c++;
            d.column = b[c];
            c++;
            d.index = b[c];
            c++;
        }
    }
    function Ws(a1, b, c) {
        var d = Rs(a1, b), e = a1.vb[b];
        if (null === a1.In || a1.In.length < e * e) a1.In = [];
        for(var f = a1.In, g = 0; g < e; g++){
            var h = 0, k = d[g], l = k.near;
            null !== l && l !== k && l.layer === k.layer && (h += Math.max(0, Math.abs(l.index - k.index) - 1));
            var m;
            if (0 <= c) {
                var n = d[g].sourceEdgesArrayAccess;
                for(k = 0; k < n.length; k++){
                    var p = n[k];
                    if (p.valid && p.fromVertex.layer !== b) {
                        l = p.fromVertex.index;
                        var q = p.portToPos;
                        p = p.portFromPos;
                        for(m = k + 1; m < n.length; m++){
                            var r = n[m];
                            if (r.valid && r.fromVertex.layer !== b) {
                                var u = r.fromVertex.index;
                                var w = r.portToPos;
                                r = r.portFromPos;
                                q < w && (l > u || l === u && p > r) && h++;
                                w < q && (u > l || u === l && r > p) && h++;
                            }
                        }
                    }
                }
            }
            if (0 >= c) {
                for(n = d[g].destinationEdgesArrayAccess, k = 0; k < n.length; k++)if (p = n[k], p.valid && p.toVertex.layer !== b) for(l = p.toVertex.index, q = p.portToPos, p = p.portFromPos, m = k + 1; m < n.length; m++)r = n[m], r.valid && r.toVertex.layer !== b && (u = r.toVertex.index, w = r.portToPos, r = r.portFromPos, p < r && (l > u || l === u && q > w) && h++, r < p && (u > l || u === l && w > q) && h++);
            }
            f[g * e + g] = h;
            for(h = g + 1; h < e; h++){
                var v = 0, y = 0;
                if (0 <= c) {
                    n = d[g].sourceEdgesArrayAccess;
                    var z = d[h].sourceEdgesArrayAccess;
                    for(k = 0; k < n.length; k++)if (p = n[k], p.valid && p.fromVertex.layer !== b) for(l = p.fromVertex.index, p = p.portFromPos, m = 0; m < z.length; m++)r = z[m], r.valid && r.fromVertex.layer !== b && (u = r.fromVertex.index, r = r.portFromPos, (l < u || l === u && p < r) && y++, (u < l || u === l && r < p) && v++);
                }
                if (0 >= c) {
                    for(n = d[g].destinationEdgesArrayAccess, z = d[h].destinationEdgesArrayAccess, k = 0; k < n.length; k++)if (p = n[k], p.valid && p.toVertex.layer !== b) for(l = p.toVertex.index, q = p.portToPos, m = 0; m < z.length; m++)r = z[m], r.valid && r.toVertex.layer !== b && (u = r.toVertex.index, w = r.portToPos, (l < u || l === u && q < w) && y++, (u < l || u === l && w < q) && v++);
                }
                f[g * e + h] = v;
                f[h * e + g] = y;
            }
        }
        Ss(a1, b, d);
        return f;
    }
    Hs.prototype.countCrossings = function() {
        for(var a1 = 0, b = 0; b <= this.Ia; b++)for(var c = Ws(this, b, 1), d = this.vb[b], e = 0; e < d; e++)for(var f = e; f < d; f++)a1 += c[e * d + f];
        return a1;
    };
    function Xs(a1) {
        for(var b = 0, c = 0; c <= a1.Ia; c++){
            for(var d = a1, e = c, f = Rs(d, e), g = d.vb[e], h = 0, k = 0; k < g; k++){
                var l = f[k].destinationEdgesArrayAccess;
                if (null !== l) for(var m = 0; m < l.length; m++){
                    var n = l[m];
                    if (n.valid && n.toVertex.layer !== e) {
                        var p = n.fromVertex.column + n.portFromColOffset;
                        var q = n.toVertex.column + n.portToColOffset;
                        h += (Math.abs(p - q) + 1) * Ts(n);
                    }
                }
            }
            Ss(d, e, f);
            b += h;
        }
        return b;
    }
    Hs.prototype.normalize = function() {
        var a1 = Infinity;
        this.Ra = -1;
        for(var b = this.network.vertexes.iterator; b.next();){
            var c = b.value;
            a1 = Math.min(a1, c.column - this.nodeMinColumnSpace(c, !0));
            this.Ra = Math.max(this.Ra, c.column + this.nodeMinColumnSpace(c, !1));
        }
        for(b.reset(); b.next();)b.value.column -= a1;
        this.Ra -= a1;
    };
    function Ys(a1, b, c) {
        for(var d = Rs(a1, b), e = a1.vb[b], f = [], g = 0; g < e; g++){
            var h = d[g], k = null;
            0 >= c && (k = h.sourceEdgesArrayAccess);
            var l = null;
            0 <= c && (l = h.destinationEdgesArrayAccess);
            var m = 0, n = 0, p = h.near;
            null !== p && p.layer === h.layer && (m += p.column - 1, n++);
            if (null !== k) for(p = 0; p < k.length; p++){
                h = k[p];
                var q = h.fromVertex;
                h.valid && !h.rev && q.layer !== b && (m += q.column, n++);
            }
            if (null !== l) for(k = 0; k < l.length; k++)h = l[k], p = h.toVertex, h.valid && !h.rev && p.layer !== b && (m += p.column, n++);
            f[g] = 0 === n ? -1 : m / n;
        }
        Ss(a1, b, d);
        return f;
    }
    function Zs(a1, b, c) {
        for(var d = Rs(a1, b), e = a1.vb[b], f = [], g = 0; g < e; g++){
            var h = d[g], k = null;
            0 >= c && (k = h.sourceEdgesArrayAccess);
            var l = null;
            0 <= c && (l = h.destinationEdgesArrayAccess);
            var m = 0, n = [], p = h.near;
            null !== p && p.layer === h.layer && (n[m] = p.column - 1, m++);
            h = void 0;
            if (null !== k) for(p = 0; p < k.length; p++){
                h = k[p];
                var q = h.fromVertex;
                h.valid && !h.rev && q.layer !== b && (n[m] = q.column + h.portFromColOffset, m++);
            }
            if (null !== l) for(k = 0; k < l.length; k++)h = l[k], p = h.toVertex, h.valid && !h.rev && p.layer !== b && (n[m] = p.column + h.portToColOffset, m++);
            0 === m ? f[g] = -1 : (n.sort(function(a1, b) {
                return a1 - b;
            }), l = m >> 1, f[g] = 0 !== (m & 1) ? n[l] : n[l - 1] + n[l] >> 1);
        }
        Ss(a1, b, d);
        return f;
    }
    function $s(a1, b, c, d, e, f) {
        if (b.component === d) {
            b.component = c;
            if (e) for(var g = b.destinationEdges; g.next();){
                var h = g.value;
                var k = h.toVertex;
                var l = b.layer - k.layer;
                h = a1.linkMinLength(h);
                l === h && $s(a1, k, c, d, e, f);
            }
            if (f) for(g = b.sourceEdges; g.next();)h = g.value, k = h.fromVertex, l = k.layer - b.layer, h = a1.linkMinLength(h), l === h && $s(a1, k, c, d, e, f);
        }
    }
    function at(a1, b, c, d, e, f) {
        if (b.component === d) {
            b.component = c;
            if (e) for(var g = b.destinationEdges; g.next();)at(a1, g.value.toVertex, c, d, e, f);
            if (f) for(b = b.sourceEdges; b.next();)at(a1, b.value.fromVertex, c, d, e, f);
        }
    }
    Hs.prototype.removeCycles = function() {
        for(var a1 = this.network.edges.iterator; a1.next();)a1.value.rev = !1;
        switch(this.Ck){
            default:
            case bt:
                a1 = this.network;
                var b = 0, c = a1.vertexes.count - 1, d = [];
                d.length = c + 1;
                for(var e = a1.vertexes.iterator; e.next();)e.value.valid = !0;
                for(; null !== ct(a1);){
                    for(e = dt(a1); null !== e;)d[c] = e, c--, e.valid = !1, e = dt(a1);
                    for(e = et(a1); null !== e;)d[b] = e, b++, e.valid = !1, e = et(a1);
                    e = null;
                    for(var f = 0, g = this.network.vertexes.iterator; g.next();){
                        var h = g.value;
                        if (h.valid) {
                            for(var k = 0, l = h.destinationEdges; l.next();)l.value.toVertex.valid && k++;
                            l = 0;
                            for(var m = h.sourceEdges; m.next();)m.value.fromVertex.valid && l++;
                            if (null === e || f < k - l) e = h, f = k - l;
                        }
                    }
                    null !== e && (d[b] = e, b++, e.valid = !1);
                }
                for(b = 0; b < a1.vertexes.count; b++)d[b].index = b;
                for(d = a1.edges.iterator; d.next();)b = d.value, b.fromVertex.index > b.toVertex.index && (a1.fm(b), b.rev = !0);
                break;
            case Is:
                for(d = this.network.vertexes.iterator; d.next();)a1 = d.value, a1.Kl = -1, a1.finish = -1;
                for(a1 = this.network.edges.iterator; a1.next();)a1.value.forest = !1;
                this.Jn = 0;
                for(d.reset(); d.next();)b = d.value, 0 === b.sourceEdges.count && ft(this, b);
                for(d.reset(); d.next();)b = d.value, -1 === b.Kl && ft(this, b);
                for(a1.reset(); a1.next();)d = a1.value, d.forest || (b = d.fromVertex, c = b.finish, e = d.toVertex, f = e.finish, e.Kl < b.Kl && c < f && (this.network.fm(d), d.rev = !0));
                break;
            case Ns:
                a1 = this.network;
                b = a1.vertexes.iterator;
                for(d = Infinity; b.next();)d = Math.min(d, b.value.layer);
                if (Infinity > d) {
                    if (0 > d) for(b.reset(); b.next();)b.value.layer -= d;
                    d = [];
                    for(b.reset(); b.next();)c = b.value, e = d[c.layer], void 0 === e ? d[c.layer] = [
                        c
                    ] : e.push(c);
                    for(c = b = 0; c < d.length; c++)if (e = d[c], !e || 0 === e.length) b++;
                    else if (0 < c) for(f = 0; f < e.length; f++)e[f].layer -= b;
                    for(d = a1.edges.iterator; d.next();)b = d.value, b.fromVertex.layer < b.toVertex.layer && (a1.fm(b), b.rev = !0);
                }
        }
    };
    function ct(a1) {
        for(a1 = a1.vertexes.iterator; a1.next();){
            var b = a1.value;
            if (b.valid) return b;
        }
        return null;
    }
    function dt(a1) {
        for(a1 = a1.vertexes.iterator; a1.next();){
            var b = a1.value;
            if (b.valid) {
                for(var c = !0, d = b.destinationEdges; d.next();)if (d.value.toVertex.valid) {
                    c = !1;
                    break;
                }
                if (c) return b;
            }
        }
        return null;
    }
    function et(a1) {
        for(a1 = a1.vertexes.iterator; a1.next();){
            var b = a1.value;
            if (b.valid) {
                for(var c = !0, d = b.sourceEdges; d.next();)if (d.value.fromVertex.valid) {
                    c = !1;
                    break;
                }
                if (c) return b;
            }
        }
        return null;
    }
    function ft(a1, b) {
        b.Kl = a1.Jn;
        a1.Jn++;
        for(var c = b.destinationEdges; c.next();){
            var d = c.value, e = d.toVertex;
            -1 === e.Kl && (d.forest = !0, ft(a1, e));
        }
        b.finish = a1.Jn;
        a1.Jn++;
    }
    Hs.prototype.assignLayers = function() {
        switch(this.Yk){
            case gt:
                ht(this);
                break;
            case it:
                for(var a1, b = this.network.vertexes.iterator; b.next();)a1 = jt(this, b.value), this.Ia = Math.max(a1, this.Ia);
                for(b.reset(); b.next();)a1 = b.value, a1.layer = this.Ia - a1.layer;
                break;
            default:
            case Js:
                ht(this);
                for(b = this.network.vertexes.iterator; b.next();)b.value.valid = !1;
                for(b.reset(); b.next();)a1 = b.value, 0 === a1.sourceEdges.count && kt(this, a1);
                a1 = Infinity;
                for(b.reset(); b.next();)a1 = Math.min(a1, b.value.layer);
                this.Ia = -1;
                for(b.reset(); b.next();){
                    var c = b.value;
                    c.layer -= a1;
                    this.Ia = Math.max(this.Ia, c.layer);
                }
        }
    };
    function ht(a1) {
        for(var b = a1.network.vertexes.iterator; b.next();){
            var c = lt(a1, b.value);
            a1.Ia = Math.max(c, a1.Ia);
        }
    }
    function lt(a1, b) {
        var c = 0;
        if (-1 === b.layer) {
            for(var d = b.destinationEdges; d.next();){
                var e = d.value, f = e.toVertex;
                e = a1.linkMinLength(e);
                c = Math.max(c, lt(a1, f) + e);
            }
            b.layer = c;
        } else c = b.layer;
        return c;
    }
    function jt(a1, b) {
        var c = 0;
        if (-1 === b.layer) {
            for(var d = b.sourceEdges; d.next();){
                var e = d.value, f = e.fromVertex;
                e = a1.linkMinLength(e);
                c = Math.max(c, jt(a1, f) + e);
            }
            b.layer = c;
        } else c = b.layer;
        return c;
    }
    function kt(a1, b) {
        if (!b.valid) {
            b.valid = !0;
            for(var c = b.destinationEdges; c.next();)kt(a1, c.value.toVertex);
            for(c = a1.network.vertexes.iterator; c.next();)c.value.component = -1;
            for(var d = b.sourceEdgesArrayAccess, e = d.length, f = 0; f < e; f++){
                var g = d[f], h = g.fromVertex, k = g.toVertex;
                g = a1.linkMinLength(g);
                h.layer - k.layer > g && $s(a1, h, 0, -1, !0, !1);
            }
            for($s(a1, b, 1, -1, !0, !0); 0 !== b.component;){
                f = 0;
                d = Infinity;
                h = 0;
                k = null;
                for(g = a1.network.vertexes.iterator; g.next();){
                    var l = g.value;
                    if (1 === l.component) {
                        var m = 0, n = !1, p = l.sourceEdgesArrayAccess;
                        e = p.length;
                        for(var q = 0; q < e; q++){
                            var r = p[q], u = r.fromVertex;
                            m += 1;
                            1 !== u.component && (f += 1, u = u.layer - l.layer, r = a1.linkMinLength(r), d = Math.min(d, u - r));
                        }
                        p = l.destinationEdgesArrayAccess;
                        e = p.length;
                        for(q = 0; q < e; q++)r = p[q].toVertex, --m, 1 !== r.component ? --f : n = !0;
                        (null === k || m < h) && !n && (k = l, h = m);
                    }
                }
                if (0 < f) {
                    for(c.reset(); c.next();)e = c.value, 1 === e.component && (e.layer += d);
                    b.component = 0;
                } else k.component = 0;
            }
            for(c = a1.network.vertexes.iterator; c.next();)c.value.component = -1;
            for($s(a1, b, 1, -1, !0, !1); 0 !== b.component;){
                d = 0;
                e = Infinity;
                f = 0;
                h = null;
                for(k = a1.network.vertexes.iterator; k.next();)if (g = k.value, 1 === g.component) {
                    l = 0;
                    m = !1;
                    p = g.sourceEdgesArrayAccess;
                    n = p.length;
                    for(q = 0; q < n; q++)r = p[q].fromVertex, l += 1, 1 !== r.component ? d += 1 : m = !0;
                    p = g.destinationEdgesArrayAccess;
                    n = p.length;
                    for(q = 0; q < n; q++)r = p[q], u = r.toVertex, --l, 1 !== u.component && (--d, u = g.layer - u.layer, r = a1.linkMinLength(r), e = Math.min(e, u - r));
                    (null === h || l > f) && !m && (h = g, f = l);
                }
                if (0 > d) {
                    for(c.reset(); c.next();)d = c.value, 1 === d.component && (d.layer -= e);
                    b.component = 0;
                } else h.component = 0;
            }
        }
    }
    function Ps(a1, b, c) {
        return 90 === a1.K ? c && !b.rev || !c && b.rev ? 270 : 90 : 180 === a1.K ? c && !b.rev || !c && b.rev ? 0 : 180 : 270 === a1.K ? c && !b.rev || !c && b.rev ? 90 : 270 : c && !b.rev || !c && b.rev ? 180 : 0;
    }
    function Qs(a1, b, c) {
        for(var d = c[c.length - 1].sourceEdges.iterator; d.next();){
            var e = d.value;
            if (!e.rev && e.valid) {
                e = e.fromVertex;
                c.push(e);
                if (e === b || Qs(a1, b, c)) return !0;
                c.pop();
            }
        }
        return !1;
    }
    Hs.prototype.initializeIndices = function() {
        switch(this.Pk){
            default:
            case mt:
                nt(this);
                break;
            case Ks:
                var a1 = null, b = this.network.vertexes.iterator;
                if (this._experimental) for(; b.next();){
                    var c = b.value;
                    if (c.near && (null === a1 && (a1 = new ob), c.layer === c.near.layer)) {
                        var d = a1.get(c.near) || [];
                        d.push(c);
                        a1.set(c.near, d);
                    }
                }
                for(c = this.Ia; 0 <= c; c--)for(b.reset(); b.next();)d = b.value, d.layer === c && -1 === d.index && ot(this, d, a1);
                break;
            case pt:
                a1 = null;
                b = this.network.vertexes.iterator;
                if (this._experimental) for(; b.next();)c = b.value, c.near && (null === a1 && (a1 = new ob), c.layer === c.near.layer && (d = a1.get(c.near) || [], d.push(c), a1.set(c.near, d)));
                for(c = 0; c <= this.Ia; c++)for(b.reset(); b.next();)d = b.value, d.layer === c && -1 === d.index && qt(this, d, a1);
        }
    };
    function nt(a1) {
        var b = null, c = a1.network.vertexes.iterator;
        if (a1._experimental) {
            for(; c.next();){
                var d = c.value;
                if (d.near && (null === b && (b = new ob), d.layer === d.near.layer)) {
                    var e = b.get(d.near) || [];
                    e.push(d);
                    b.set(d.near, e);
                }
            }
            c.reset();
        }
        for(d = {}; c.next();)e = c.value, b && e.near || (d.layer = e.layer, e.index = a1.vb[d.layer], a1.vb[d.layer]++, b && (e = b.get(e), Array.isArray(e) && e.forEach(function(b) {
            return function(c) {
                c.index = a1.vb[b.layer];
                a1.vb[b.layer]++;
            };
        }(d)))), d = {
            layer: d.layer
        };
    }
    function ot(a1, b, c) {
        if (!c || !b.near) {
            var d = b.layer;
            b.index = a1.vb[d];
            a1.vb[d]++;
            if (c) {
                var e = c.get(b);
                Array.isArray(e) && e.forEach(function(b) {
                    b.index = a1.vb[d];
                    a1.vb[d]++;
                });
            }
            b = b.destinationEdgesArrayAccess;
            for(e = !0; e;){
                e = !1;
                for(var f = 0; f < b.length - 1; f++){
                    var g = b[f], h = b[f + 1];
                    g.portFromColOffset > h.portFromColOffset && (e = !0, b[f] = h, b[f + 1] = g);
                }
            }
            for(e = 0; e < b.length; e++)f = b[e], f.valid && (f = f.toVertex, -1 === f.index && ot(a1, f, c));
        }
    }
    function qt(a1, b, c) {
        if (!c || !b.near) {
            var d = b.layer;
            b.index = a1.vb[d];
            a1.vb[d]++;
            if (c) {
                var e = c.get(b);
                Array.isArray(e) && e.forEach(function(b) {
                    b.index = a1.vb[d];
                    a1.vb[d]++;
                });
            }
            b = b.sourceEdgesArrayAccess;
            var f = !0;
            for(e = 0; f;)for(f = !1, e = 0; e < b.length - 1; e++){
                var g = b[e], h = b[e + 1];
                g.portToColOffset > h.portToColOffset && (f = !0, b[e] = h, b[e + 1] = g);
            }
            for(e = 0; e < b.length; e++)f = b[e], f.valid && (f = f.fromVertex, -1 === f.index && qt(a1, f, c));
        }
    }
    Hs.prototype.reduceCrossings = function() {
        var a1 = this.countCrossings(), b = Us(this), c, d;
        for(c = 0; c < this.bj; c++){
            for(d = 0; d <= this.Ia; d++)rt(this, d, 1), st(this, d, 1);
            var e = this.countCrossings();
            e < a1 && (a1 = e, b = Us(this));
            for(d = this.Ia; 0 <= d; d--)rt(this, d, -1), st(this, d, -1);
            e = this.countCrossings();
            e < a1 && (a1 = e, b = Us(this));
        }
        Vs(this, b);
        for(c = 0; c < this.bj; c++){
            for(d = 0; d <= this.Ia; d++)rt(this, d, 0), st(this, d, 0);
            e = this.countCrossings();
            e < a1 && (a1 = e, b = Us(this));
            for(d = this.Ia; 0 <= d; d--)rt(this, d, 0), st(this, d, 0);
            e = this.countCrossings();
            e < a1 && (a1 = e, b = Us(this));
        }
        Vs(this, b);
        var f, g, h;
        switch(this.qk){
            case tt:
                break;
            case ut:
                for(h = a1 + 1; (d = this.countCrossings()) < h;)for(h = d, c = this.Ia; 0 <= c; c--)for(g = 0; g <= c; g++){
                    for(f = !0; f;)for(f = !1, d = c; d >= g; d--)f = st(this, d, -1) || f;
                    e = this.countCrossings();
                    e >= a1 ? Vs(this, b) : (a1 = e, b = Us(this));
                    for(f = !0; f;)for(f = !1, d = c; d >= g; d--)f = st(this, d, 1) || f;
                    e = this.countCrossings();
                    e >= a1 ? Vs(this, b) : (a1 = e, b = Us(this));
                    for(f = !0; f;)for(f = !1, d = g; d <= c; d++)f = st(this, d, 1) || f;
                    e >= a1 ? Vs(this, b) : (a1 = e, b = Us(this));
                    for(f = !0; f;)for(f = !1, d = g; d <= c; d++)f = st(this, d, -1) || f;
                    e >= a1 ? Vs(this, b) : (a1 = e, b = Us(this));
                    for(f = !0; f;)for(f = !1, d = c; d >= g; d--)f = st(this, d, 0) || f;
                    e >= a1 ? Vs(this, b) : (a1 = e, b = Us(this));
                    for(f = !0; f;)for(f = !1, d = g; d <= c; d++)f = st(this, d, 0) || f;
                    e >= a1 ? Vs(this, b) : (a1 = e, b = Us(this));
                }
                break;
            default:
            case Ls:
                for(c = this.Ia, g = 0, h = a1 + 1; (d = this.countCrossings()) < h;){
                    h = d;
                    for(f = !0; f;)for(f = !1, d = c; d >= g; d--)f = st(this, d, -1) || f;
                    e = this.countCrossings();
                    e >= a1 ? Vs(this, b) : (a1 = e, b = Us(this));
                    for(f = !0; f;)for(f = !1, d = c; d >= g; d--)f = st(this, d, 1) || f;
                    e = this.countCrossings();
                    e >= a1 ? Vs(this, b) : (a1 = e, b = Us(this));
                    for(f = !0; f;)for(f = !1, d = g; d <= c; d++)f = st(this, d, 1) || f;
                    e >= a1 ? Vs(this, b) : (a1 = e, b = Us(this));
                    for(f = !0; f;)for(f = !1, d = g; d <= c; d++)f = st(this, d, -1) || f;
                    e >= a1 ? Vs(this, b) : (a1 = e, b = Us(this));
                    for(f = !0; f;)for(f = !1, d = c; d >= g; d--)f = st(this, d, 0) || f;
                    e >= a1 ? Vs(this, b) : (a1 = e, b = Us(this));
                    for(f = !0; f;)for(f = !1, d = g; d <= c; d++)f = st(this, d, 0) || f;
                    e >= a1 ? Vs(this, b) : (a1 = e, b = Us(this));
                }
        }
        Vs(this, b);
    };
    function rt(a1, b, c) {
        var d = Rs(a1, b), e = a1.vb[b], f = Zs(a1, b, c), g = Ys(a1, b, c);
        for(c = 0; c < e; c++)-1 === g[c] && (g[c] = d[c].column), -1 === f[c] && (f[c] = d[c].column);
        for(var h = !0, k; h;)for(h = !1, c = 0; c < e - 1; c++)if (f[c + 1] < f[c] || f[c + 1] === f[c] && g[c + 1] < g[c]) h = !0, k = f[c], f[c] = f[c + 1], f[c + 1] = k, k = g[c], g[c] = g[c + 1], g[c + 1] = k, k = d[c], d[c] = d[c + 1], d[c + 1] = k;
        for(c = f = 0; c < e; c++)k = d[c], k.index = c, f += a1.nodeMinColumnSpace(k, !0), k.column = f, f += 1, f += a1.nodeMinColumnSpace(k, !1);
        Ss(a1, b, d);
    }
    function st(a1, b, c) {
        var d = Rs(a1, b), e = a1.vb[b];
        c = Ws(a1, b, c);
        var f;
        var g = [];
        for(f = 0; f < e; f++)g[f] = -1;
        var h = [];
        for(f = 0; f < e; f++)h[f] = -1;
        for(var k = !1, l = !0; l;)for(l = !1, f = 0; f < e - 1; f++){
            var m = c[d[f].index * e + d[f + 1].index], n = c[d[f + 1].index * e + d[f].index], p = 0, q = 0, r = d[f].column, u = d[f + 1].column, w = a1.nodeMinColumnSpace(d[f], !0), v = a1.nodeMinColumnSpace(d[f], !1), y = a1.nodeMinColumnSpace(d[f + 1], !0), z = a1.nodeMinColumnSpace(d[f + 1], !1);
            w = r - w + y;
            v = u - v + z;
            var A = d[f].sourceEdges.iterator;
            for(A.reset(); A.next();)if (y = A.value, z = y.fromVertex, y.valid && z.layer === b) {
                for(y = 0; d[y] !== z;)y++;
                y < f && (p += 2 * (f - y), q += 2 * (f + 1 - y));
                y === f + 1 && (p += 1);
                y > f + 1 && (p += 4 * (y - f), q += 4 * (y - (f + 1)));
            }
            A = d[f].destinationEdges.iterator;
            for(A.reset(); A.next();)if (y = A.value, z = y.toVertex, y.valid && z.layer === b) {
                for(y = 0; d[y] !== z;)y++;
                y === f + 1 && (q += 1);
            }
            A = d[f + 1].sourceEdges.iterator;
            for(A.reset(); A.next();)if (y = A.value, z = y.fromVertex, y.valid && z.layer === b) {
                for(y = 0; d[y] !== z;)y++;
                y < f && (p += 2 * (f + 1 - y), q += 2 * (f - y));
                y === f && (q += 1);
                y > f + 1 && (p += 4 * (y - (f + 1)), q += 4 * (y - f));
            }
            A = d[f + 1].destinationEdges.iterator;
            for(A.reset(); A.next();)if (y = A.value, z = y.toVertex, y.valid && z.layer === b) {
                for(y = 0; d[y] !== z;)y++;
                y === f && (p += 1);
            }
            y = z = 0;
            A = g[d[f].index];
            var B = h[d[f].index], D = g[d[f + 1].index], M = h[d[f + 1].index];
            -1 !== A && (z += Math.abs(A - r), y += Math.abs(A - v));
            -1 !== B && (z += Math.abs(B - r), y += Math.abs(B - v));
            -1 !== D && (z += Math.abs(D - u), y += Math.abs(D - w));
            -1 !== M && (z += Math.abs(M - u), y += Math.abs(M - w));
            if (q < p - .5 || q === p && n < m - .5 || q === p && n === m && y < z - .5) l = k = !0, d[f].column = v, d[f + 1].column = w, m = d[f], d[f] = d[f + 1], d[f + 1] = m;
        }
        for(f = 0; f < e; f++)d[f].index = f;
        Ss(a1, b, d);
        return k;
    }
    Hs.prototype.straightenAndPack = function() {
        if (0 === this.ve) {
            var a1 = 0 !== (this.bg & 1);
            var b = 0 !== (this.bg & vt);
            1E3 < this.network.edges.count && b && (a1 = !1);
            if (a1) {
                var c = [];
                for(b = 0; b <= this.Ia; b++)c[b] = 0;
                for(var d, e = this.network.vertexes.iterator; e.next();){
                    var f = e.value;
                    b = f.layer;
                    d = f.column;
                    f = this.nodeMinColumnSpace(f, !1);
                    c[b] = Math.max(c[b], d + f);
                }
                for(e.reset(); e.next();)f = e.value, b = f.layer, d = f.column, f.column = (8 * (this.Ra - c[b]) >> 1) + 8 * d;
                this.Ra *= 8;
            }
            if (0 !== (this.bg & 2)) for(c = !0; c;){
                c = !1;
                for(b = this.Md + 1; b <= this.Ia; b++)c = wt(this, b, 1) || c;
                for(b = this.Md - 1; 0 <= b; b--)c = wt(this, b, -1) || c;
                c = wt(this, this.Md, 0) || c;
            }
            if (0 !== (this.bg & 4)) {
                for(b = this.Md + 1; b <= this.Ia; b++)xt(this, b, 1);
                for(b = this.Md - 1; 0 <= b; b--)xt(this, b, -1);
                xt(this, this.Md, 0);
            }
            a1 && (yt(this, -1), yt(this, 1));
            if (0 !== (this.bg & 2)) for(c = !0; c;){
                c = !1;
                c = wt(this, this.Md, 0) || c;
                for(b = this.Md + 1; b <= this.Ia; b++)c = wt(this, b, 0) || c;
                for(b = this.Md - 1; 0 <= b; b--)c = wt(this, b, 0) || c;
            }
        } else zt(this);
    };
    function wt(a1, b, c) {
        for(var d = !1; At(a1, b, c);)d = !0;
        return d;
    }
    function At(a1, b, c) {
        var d, e = Rs(a1, b), f = a1.vb[b], g = Ys(a1, b, -1);
        if (0 < c) for(d = 0; d < f; d++)g[d] = -1;
        var h = Ys(a1, b, 1);
        if (0 > c) for(d = 0; d < f; d++)h[d] = -1;
        for(var k = !1, l = !0; l;)for(l = !1, d = 0; d < f; d++){
            var m = e[d].column, n = a1.nodeMinColumnSpace(e[d], !0), p = a1.nodeMinColumnSpace(e[d], !1), q = 0;
            0 > d - 1 || m - e[d - 1].column - 1 > n + a1.nodeMinColumnSpace(e[d - 1], !1) ? q = m - 1 : q = m;
            n = d + 1 >= f || e[d + 1].column - m - 1 > p + a1.nodeMinColumnSpace(e[d + 1], !0) ? m + 1 : m;
            var r = p = 0, u = 0;
            if (0 >= c) for(var w = e[d].sourceEdges.iterator; w.next();){
                var v = w.value;
                var y = v.fromVertex;
                if (v.valid && y.layer !== b) {
                    var z = Ts(v);
                    var A = v.portFromColOffset;
                    v = v.portToColOffset;
                    y = y.column;
                    p += (Math.abs(m + v - (y + A)) + 1) * z;
                    r += (Math.abs(q + v - (y + A)) + 1) * z;
                    u += (Math.abs(n + v - (y + A)) + 1) * z;
                }
            }
            if (0 <= c) for(w = e[d].destinationEdges.iterator; w.next();)v = w.value, y = v.toVertex, v.valid && y.layer !== b && (z = Ts(v), A = v.portFromColOffset, v = v.portToColOffset, y = y.column, p += (Math.abs(m + A - (y + v)) + 1) * z, r += (Math.abs(q + A - (y + v)) + 1) * z, u += (Math.abs(n + A - (y + v)) + 1) * z);
            v = A = z = 0;
            w = g[e[d].index];
            y = h[e[d].index];
            -1 !== w && (z += Math.abs(w - m), A += Math.abs(w - q), v += Math.abs(w - n));
            -1 !== y && (z += Math.abs(y - m), A += Math.abs(y - q), v += Math.abs(y - n));
            if (r < p || r === p && A < z) l = k = !0, e[d].column = q;
            else if (u < p || u === p && v < z) l = k = !0, e[d].column = n;
        }
        Ss(a1, b, e);
        a1.normalize();
        return k;
    }
    function xt(a1, b, c) {
        var d = Rs(a1, b), e = a1.vb[b], f = Zs(a1, b, c), g = [];
        for(c = 0; c < e; c++)g[c] = f[c];
        for(f = !0; f;)for(f = !1, c = 0; c < e; c++){
            var h = d[c].column, k = a1.nodeMinColumnSpace(d[c], !0), l = a1.nodeMinColumnSpace(d[c], !1), m = 0;
            if (-1 === g[c]) {
                if (0 === c && c === e - 1) m = h;
                else if (0 === c) {
                    var n = d[c + 1].column;
                    n - h === l + a1.nodeMinColumnSpace(d[c + 1], !0) ? m = h - 1 : m = h;
                } else c === e - 1 ? (n = d[c - 1].column, m = h - n === k + a1.nodeMinColumnSpace(d[c - 1], !1) ? h + 1 : h) : (n = d[c - 1].column, k = n + a1.nodeMinColumnSpace(d[c - 1], !1) + k + 1, n = d[c + 1].column, l = n - a1.nodeMinColumnSpace(d[c + 1], !0) - l - 1, m = (k + l) / 2 | 0);
            } else 0 === c && c === e - 1 ? m = g[c] : 0 === c ? (n = d[c + 1].column, l = n - a1.nodeMinColumnSpace(d[c + 1], !0) - l - 1, m = Math.min(g[c], l)) : c === e - 1 ? (n = d[c - 1].column, k = n + a1.nodeMinColumnSpace(d[c - 1], !1) + k + 1, m = Math.max(g[c], k)) : (n = d[c - 1].column, k = n + a1.nodeMinColumnSpace(d[c - 1], !1) + k + 1, n = d[c + 1].column, l = n - a1.nodeMinColumnSpace(d[c + 1], !0) - l - 1, k < g[c] && g[c] < l ? m = g[c] : k >= g[c] ? m = k : l <= g[c] && (m = l));
            m !== h && (f = !0, d[c].column = m);
        }
        Ss(a1, b, d);
        a1.normalize();
    }
    function Bt(a1, b) {
        for(var c = !0, d = a1.network.vertexes.iterator; d.next();){
            var e = d.value, f = a1.nodeMinColumnSpace(e, !0), g = a1.nodeMinColumnSpace(e, !1);
            if (e.column - f <= b && e.column + g >= b) {
                c = !1;
                break;
            }
        }
        a1 = !1;
        if (c) for(d.reset(); d.next();)c = d.value, c.column > b && (--c.column, a1 = !0);
        return a1;
    }
    function Ct(a1, b) {
        var c = b + 1;
        var d, e = [], f = [];
        for(d = 0; d <= a1.Ia; d++)e[d] = !1, f[d] = !1;
        for(var g = a1.network.vertexes.iterator; g.next();){
            d = g.value;
            var h = d.column - a1.nodeMinColumnSpace(d, !0), k = d.column + a1.nodeMinColumnSpace(d, !1);
            h <= b && k >= b && (e[d.layer] = !0);
            h <= c && k >= c && (f[d.layer] = !0);
        }
        h = !0;
        c = !1;
        for(d = 0; d <= a1.Ia; d++)h = h && !(e[d] && f[d]);
        if (h) for(g.reset(); g.next();)a1 = g.value, a1.column > b && (--a1.column, c = !0);
        return c;
    }
    function yt(a1, b) {
        for(var c = 0; c <= a1.Ra; c++)for(; Bt(a1, c););
        a1.normalize();
        for(c = 0; c < a1.Ra; c++)for(; Ct(a1, c););
        a1.normalize();
        var d;
        if (0 < b) for(c = 0; c <= a1.Ra; c++){
            var e = Us(a1);
            var f = Xs(a1);
            for(d = f + 1; f < d;){
                d = f;
                Dt(a1, c, 1);
                var g = Xs(a1);
                g > f ? Vs(a1, e) : g < f && (f = g, e = Us(a1));
            }
        }
        if (0 > b) for(c = a1.Ra; 0 <= c; c--)for(e = Us(a1), f = Xs(a1), d = f + 1; f < d;)d = f, Dt(a1, c, -1), g = Xs(a1), g > f ? Vs(a1, e) : g < f && (f = g, e = Us(a1));
        a1.normalize();
    }
    function Dt(a1, b, c) {
        a1.le = 0;
        for(var d = a1.network.vertexes.iterator; d.next();)d.value.component = -1;
        if (0 < c) for(d.reset(); d.next();){
            var e = d.value;
            e.column - a1.nodeMinColumnSpace(e, !0) <= b && (e.component = a1.le);
        }
        if (0 > c) for(d.reset(); d.next();)e = d.value, e.column + a1.nodeMinColumnSpace(e, !1) >= b && (e.component = a1.le);
        a1.le++;
        for(d.reset(); d.next();)b = d.value, -1 === b.component && (at(a1, b, a1.le, -1, !0, !0), a1.le++);
        var f;
        b = [];
        for(f = 0; f < a1.le * a1.le; f++)b[f] = !1;
        e = [];
        for(f = 0; f < (a1.Ia + 1) * (a1.Ra + 1); f++)e[f] = -1;
        for(d.reset(); d.next();){
            f = d.value;
            for(var g = f.layer, h = Math.max(0, f.column - a1.nodeMinColumnSpace(f, !0)), k = Math.min(a1.Ra, f.column + a1.nodeMinColumnSpace(f, !1)); h <= k; h++)e[g * (a1.Ra + 1) + h] = f.component;
        }
        for(f = 0; f <= a1.Ia; f++){
            if (0 < c) for(g = 0; g < a1.Ra; g++)-1 !== e[f * (a1.Ra + 1) + g] && -1 !== e[f * (a1.Ra + 1) + g + 1] && e[f * (a1.Ra + 1) + g] !== e[f * (a1.Ra + 1) + g + 1] && (b[e[f * (a1.Ra + 1) + g] * a1.le + e[f * (a1.Ra + 1) + g + 1]] = !0);
            if (0 > c) for(g = a1.Ra; 0 < g; g--)-1 !== e[f * (a1.Ra + 1) + g] && -1 !== e[f * (a1.Ra + 1) + g - 1] && e[f * (a1.Ra + 1) + g] !== e[f * (a1.Ra + 1) + g - 1] && (b[e[f * (a1.Ra + 1) + g] * a1.le + e[f * (a1.Ra + 1) + g - 1]] = !0);
        }
        e = [];
        for(f = 0; f < a1.le; f++)e[f] = !0;
        g = [];
        for(g.push(0); 0 !== g.length;)if (k = g[g.length - 1], g.pop(), e[k]) for(e[k] = !1, f = 0; f < a1.le; f++)b[k * a1.le + f] && g.splice(0, 0, f);
        if (0 < c) for(d.reset(); d.next();)a1 = d.value, e[a1.component] && --a1.column;
        if (0 > c) for(d.reset(); d.next();)c = d.value, e[c.component] && (c.column += 1);
    }
    function zt(a1) {
        for(var b = Ea(), c = a1.el.length, d = 0; d <= c; d++)b[d] = [];
        for(d = a1.network.vertexes.iterator; d.next();){
            var e = d.value;
            b[c - e.layer][e.index] = e;
        }
        c = new H;
        Et(b, c);
        var f = null, g = null, h = null, k = null, l = 0 !== (a1.ve & 1), m = 0 !== (a1.ve & 2), n = 0 !== (a1.ve & 4), p = 0 !== (a1.ve & 8);
        l && (a1.verticalAlignment(b, c, !0), f = Ft(a1, b, !0, !1));
        b.reverse();
        n && (a1.verticalAlignment(b, c, !1), h = Ft(a1, b, !1, !1));
        d = ba(b);
        for(e = d.next(); !e.done; e = d.next())e.value.reverse();
        p && (a1.verticalAlignment(b, c, !1), k = Ft(a1, b, !1, !0));
        b.reverse();
        m && (a1.verticalAlignment(b, c, !0), g = Ft(a1, b, !0, !0));
        Ga(b);
        a1.u(f, g, h, k);
        a1.network.vertexes.each(function(a1) {
            var b = Ea();
            l && b.push(f.get(a1));
            m && b.push(g.get(a1));
            n && b.push(h.get(a1));
            p && b.push(k.get(a1));
            b.sort(function(a1, b) {
                return a1 - b;
            });
            var c = b.length;
            c = (b[Math.floor((c - 1) / 2)] + b[Math.ceil((c - 1) / 2)]) / 2;
            Ga(b);
            a1.zc = c;
        });
    }
    function Et(a1, b) {
        for(var c = a1.length, d = 1; d < c - 1; d++)for(var e = 0, f = 0, g = a1[d], h = a1[d + 1], k = 0; f < h.length; k++){
            var l = h[k];
            a: {
                if (null === l.node) {
                    var m = Gt(l);
                    if (0 < m.length) {
                        m = null === m[0].node;
                        break a;
                    }
                }
                m = !1;
            }
            var n = m;
            if (k === h.length - 1 || n) {
                m = g.length - 1;
                n && (m = Gt(l)[0].index);
                for(; f <= k;){
                    l = h[f];
                    if (!l.ao) {
                        n = [];
                        for(var p = ba(l.sourceEdgesArrayAccess), q = p.next(); !q.done; q = p.next())q = q.value, q.valid && n.push(q);
                        l.ao = n;
                    }
                    l = ba(l.ao);
                    for(n = l.next(); !n.done; n = l.next())n = n.value, p = n.fromVertex.index, (p < e || p > m) && b.add(n);
                    f++;
                }
                e = m;
            }
        }
    }
    Hs.prototype.verticalAlignment = function(a1, b, c) {
        Ht(a1);
        a1 = ba(a1);
        for(var d = a1.next(); !d.done; d = a1.next()){
            var e = -1;
            d = ba(d.value);
            for(var f = d.next(); !f.done; f = d.next()){
                f = f.value;
                var g = c ? Gt(f) : It(f), h = g.length;
                if (0 < h) {
                    g.sort(function(a1, b) {
                        return a1.vi - b.vi;
                    });
                    var k = (h - 1) / 2;
                    h = Math.floor(k);
                    for(k = Math.ceil(k); h <= k; h++)if (f.align === f) {
                        var l = g[h], m = void 0;
                        m = c ? Jt(l, f) : Jt(f, l);
                        !b.contains(m) && e < l.vi && (l.align = f, f.root = l.root, f.align = l.root, e = l.vi);
                    }
                }
            }
        }
    };
    function Ht(a1) {
        for(var b = 0; b < a1.length; b++)for(var c = a1[b], d = 0; d < c.length; d++){
            var e = c[d];
            e.root = e;
            e.align = e;
            e.Tz = b;
            e.vi = d;
        }
    }
    function Ft(a1, b, c, d) {
        for(var e = 90 === a1.K || 270 === a1.K, f = ba(b), g = f.next(); !g.done; g = f.next()){
            var h = ba(g.value);
            for(g = h.next(); !g.done; g = h.next())g = g.value, g.sd = g, g.shift = Infinity, g.zc = NaN, g.qg = 0;
        }
        g = 90 === a1.K || 270 === a1.K;
        f = ba(b);
        for(h = f.next(); !h.done; h = f.next()){
            h = ba(h.value);
            for(var k = h.next(); !k.done; k = h.next())if (k = k.value, k.root === k) {
                for(var l = 0, m = k; m.align !== k;){
                    var n = m.align, p = g ? m.width : m.height, q = g ? n.width : n.height;
                    if (c) {
                        var r = Jt(m, n);
                        var u = r.portFromPos;
                        var w = r.portToPos;
                        null !== r.link && (m.node && m.node !== r.link.fromNode && (u = g ? m.focusX : m.focusY), n.node && n.node !== r.link.toNode && (w = g ? n.focusX : n.focusY));
                    } else r = Jt(n, m), u = r.portToPos, w = r.portFromPos, null !== r.link && (m.node && m.node !== r.link.toNode && (u = g ? m.focusX : m.focusY), n.node && n.node !== r.link.fromNode && (w = g ? n.focusX : n.focusY));
                    p = d ? m.qg + (p - u) - (q - w) : m.qg + u - w;
                    n.qg = p;
                    l = Math.min(l, p);
                    m = m.align;
                }
                m = k;
                do m.qg = m.qg - l, m = m.align;
                while (m !== k);
            }
        }
        c = ba(b);
        for(g = c.next(); !g.done; g = c.next())for(f = ba(g.value), g = f.next(); !g.done; g = f.next())g = g.value, g.root === g && Kt(a1, g, b);
        for(c = 0; c < b.length; c++)if (!(0 >= b[c].length) && (g = b[c][0], g.sd === g)) {
            Infinity === g.sd.shift && (g.sd.shift = 0);
            g = c;
            h = 0;
            do {
                for(f = b[g][h]; f.align !== f.root;)f = f.align, g++, 0 < f.vi && (h = Lt(f, b), h.sd.shift = Math.min(h.sd.shift, f.sd.shift + f.zc + f.qg - (h.zc + h.qg + (e ? h.width : h.height) + a1.columnSpacing)));
                h = f.vi + 1;
            }while (g < b.length && h < b[g].length && f.sd === b[g][h].sd);
        }
        a1 = new ob;
        b = ba(b);
        for(g = b.next(); !g.done; g = b.next())for(c = ba(g.value), g = c.next(); !g.done; g = c.next())g = g.value, g.zc = g.zc + g.sd.shift + g.qg, f = e ? g.width : g.height, a1.add(g, d ? -g.zc - f : g.zc);
        return a1;
    }
    function Kt(a1, b, c) {
        if (isNaN(b.zc)) {
            b.zc = 0;
            var d = b;
            do {
                if (0 < d.vi) {
                    var e = Lt(d, c), f = e.root;
                    Kt(a1, f, c);
                    b.sd === b && (b.sd = f.sd);
                    var g = 90 === a1.K || 270 === a1.K ? e.width : e.height;
                    b.sd === f.sd && (b.zc = Math.max(b.zc, f.zc + e.qg + g - d.qg + a1.columnSpacing));
                }
                d = d.align;
            }while (d !== b);
            for(; d.align !== b;)d = d.align, d.zc = b.zc, d.sd = b.sd;
        }
    }
    function Lt(a1, b) {
        var c = a1.Tz;
        a1 = a1.vi;
        1 > a1 && C("Could not determine previous vertex in layer");
        return b[c][a1 - 1];
    }
    Hs.prototype.u = function(a1) {
        for(var b = [], c = 0; c < arguments.length; ++c)b[c] = arguments[c];
        c = -1;
        for(var d = Ea(), e = Ea(), f = Infinity, g = 0; 4 > g; g++)if (b[g]) {
            var h = Mt(this, b[g], d, e, g);
            h < f && (c = g, f = h);
        }
        f = {};
        for(g = 0; 4 > g; f = {
            delta: f.delta
        }, g++)b[g] && (f.delta = 0 === g || 2 === g ? d[c] - d[g] : e[c] - e[g], 0 !== f.delta && b[g].each(function(a1) {
            return function(b) {
                b.value += a1.delta;
            };
        }(f)));
        Ga(d);
        Ga(e);
    };
    function Mt(a1, b, c, d, e) {
        if (!b || 0 === b.count) return c[e] = 0, d[e] = 0, Infinity;
        var f = Infinity, g = -Infinity;
        b.each(function(b) {
            var c = b.key;
            b = b.value;
            c = 90 === a1.K || 270 === a1.K ? c.width : c.height;
            b < f && (f = b);
            b + c > g && (g = b + c);
        });
        c[e] = f;
        d[e] = g;
        return g - f;
    }
    Hs.prototype.commitLayout = function() {
        if (this.setsPortSpots) for(var a1 = Os(this, !0), b = Os(this, !1), c = this.network.edges.iterator; c.next();){
            var d = c.value.link;
            null !== d && (d.fromSpot = a1, d.toSpot = b);
        }
        this.commitNodes();
        this.Gu();
        this.isRouting && this.commitLinks();
    };
    function Os(a1, b) {
        return 270 === a1.K ? b ? $c : cd : 90 === a1.K ? b ? cd : $c : 180 === a1.K ? b ? ad : bd : b ? bd : ad;
    }
    Hs.prototype.commitNodes = function() {
        this.he = [];
        this.Ld = [];
        this.Kd = [];
        this.Ta = [];
        for(var a1 = 0; a1 <= this.Ia; a1++)this.he[a1] = 0, this.Ld[a1] = 0, this.Kd[a1] = 0, this.Ta[a1] = 0;
        for(a1 = this.network.vertexes.iterator; a1.next();){
            var b = a1.value, c = b.layer;
            this.he[c] = Math.max(this.he[c], this.nodeMinLayerSpace(b, !0));
            this.Ld[c] = Math.max(this.Ld[c], this.nodeMinLayerSpace(b, !1));
        }
        b = 0;
        c = this.ie;
        for(var d = 0; d <= this.Ia; d++){
            var e = c;
            0 >= this.he[d] + this.Ld[d] && (e = 0);
            0 < d && (b += e / 2);
            90 === this.K || 0 === this.K ? (b += this.Ld[d], this.Kd[d] = b, b += this.he[d]) : (b += this.he[d], this.Kd[d] = b, b += this.Ld[d]);
            d < this.Ia && (b += e / 2);
            this.Ta[d] = b;
        }
        c = b;
        b = this.arrangementOrigin;
        for(d = 0; d <= this.Ia; d++)270 === this.K ? this.Kd[d] = b.y + this.Kd[d] : 90 === this.K ? (this.Kd[d] = b.y + c - this.Kd[d], this.Ta[d] = c - this.Ta[d]) : 180 === this.K ? this.Kd[d] = b.x + this.Kd[d] : (this.Kd[d] = b.x + c - this.Kd[d], this.Ta[d] = c - this.Ta[d]);
        c = 0 !== this.ve;
        a1.reset();
        d = 270 === this.K || 90 === this.K;
        for(var f = Infinity, g = e = Infinity, h = -Infinity; a1.next();){
            var k = a1.value, l = k.layer, m = k.column | 0;
            d ? (g = b.x + this.lc * m, l = this.Kd[l]) : (g = this.Kd[l], l = b.y + this.lc * m);
            k.centerX = g;
            k.centerY = l;
            c && isFinite(k.zc) && (d ? k.node ? k.x = b.x + k.zc : k.centerX = b.x + k.zc : k.node ? k.y = b.y + k.zc : k.centerY = b.y + k.zc);
            f = Math.min(k.x, f);
            e = Math.min(k.y, e);
            d ? (g = f, h = Math.max(h, k.bounds.right)) : (g = e, h = Math.max(h, k.bounds.bottom));
        }
        this.xw = h - g;
        f = b.x - f;
        b = b.y - e;
        this.Rf = new J(c && d ? 0 : f, c && !d ? 0 : b);
        for(a1.reset(); a1.next();)c = a1.value, c.x += f, c.y += b, c.commit();
    };
    Hs.prototype.Gu = function() {
        for(var a1 = 0, b = this.ie, c = 0; c <= this.Ia; c++)a1 += this.he[c], a1 += this.Ld[c];
        a1 += this.Ia * b;
        b = [];
        c = 0 !== this.ve ? this.xw : this.lc * this.Ra;
        for(var d = this.maxLayer; 0 <= d; d--)270 === this.K ? 0 === d ? b.push(new N(0, 0, c, Math.abs(this.Ta[0]))) : b.push(new N(0, this.Ta[d - 1], c, Math.abs(this.Ta[d - 1] - this.Ta[d]))) : 90 === this.K ? 0 === d ? b.push(new N(0, this.Ta[0], c, Math.abs(this.Ta[0] - a1))) : b.push(new N(0, this.Ta[d], c, Math.abs(this.Ta[d - 1] - this.Ta[d]))) : 180 === this.K ? 0 === d ? b.push(new N(0, 0, Math.abs(this.Ta[0]), c)) : b.push(new N(this.Ta[d - 1], 0, Math.abs(this.Ta[d - 1] - this.Ta[d]), c)) : 0 === d ? b.push(new N(this.Ta[0], 0, Math.abs(this.Ta[0] - a1), c)) : b.push(new N(this.Ta[d], 0, Math.abs(this.Ta[d - 1] - this.Ta[d]), c));
        this.commitLayers(b, this.Rf);
    };
    Hs.prototype.commitLayers = function() {};
    Hs.prototype.commitLinks = function() {
        for(var a1 = this.network.edges.iterator, b; a1.next();)b = a1.value.link, null !== b && (b.uh(), b.Ej(), b.zf());
        for(a1.reset(); a1.next();)b = a1.value.link, null !== b && b.vg();
        for(a1.reset(); a1.next();){
            var c = a1.value;
            b = c.link;
            if (null !== b) {
                b.uh();
                var d = b, e = d.fromNode, f = d.toNode, g = d.fromPort, h = d.toPort;
                if (null !== e) {
                    var k = e.findVisibleNode();
                    null !== k && k !== e && (e = k, g = k.port);
                }
                null !== f && (k = f.findVisibleNode(), null !== k && k !== f && (f = k, h = k.port));
                var l = b.computeSpot(!0, g);
                k = b.computeSpot(!1, h);
                var m = c.fromVertex, n = c.toVertex;
                if (c.valid) {
                    if (b.curve === bg && 4 === b.pointsCount) {
                        if (m.column === n.column && 0 === this.alignOption) c = b.getLinkPoint(e, g, l, !0, !1, f, h), h = b.getLinkPoint(f, h, k, !1, !1, e, g), c.w() || c.set(e.actualBounds.center), h.w() || h.set(f.actualBounds.center), b.Ej(), b.yf(c.x, c.y), b.yf((2 * c.x + h.x) / 3, (2 * c.y + h.y) / 3), b.yf((c.x + 2 * h.x) / 3, (c.y + 2 * h.y) / 3), b.yf(h.x, h.y);
                        else if (c = d = !1, null !== g && l === rc && (d = !0), null !== h && k === rc && (c = !0), d || c) k = null, d && (k = b.getLinkPointFromPoint(e, g, g.ga(wc), b.i(3), !0), k.w() || k.set(e.actualBounds.center), b.L(0, k.x, k.y)), e = null, c && (e = b.getLinkPointFromPoint(f, h, h.ga(wc), b.i(0), !1), e.w() || e.set(f.actualBounds.center), b.L(3, e.x, e.y)), k && (f = b.i(2), b.L(1, (2 * k.x + f.x) / 3, (2 * k.y + f.y) / 3)), e && (f = b.i(1), b.L(2, (2 * e.x + f.x) / 3, (2 * e.y + f.y) / 3));
                    }
                    b.zf();
                } else if (m.layer === n.layer) b.zf();
                else {
                    var p = !1, q = !1, r = this.ie, u = b.firstPickIndex + 1;
                    if (b.isOrthogonal) {
                        q = !0;
                        var w = b.pointsCount;
                        4 < w && b.points.removeRange(2, w - 3);
                    } else if (b.curve === bg) p = !0, w = b.pointsCount, 4 < w && b.points.removeRange(2, w - 3), 4 === w && (u = 2);
                    else {
                        w = b.pointsCount;
                        var v = l === rc, y = k === rc;
                        2 < w && v && y ? b.points.removeRange(1, w - 2) : 3 < w && v && !y ? b.points.removeRange(1, w - 3) : 3 < w && !v && y ? b.points.removeRange(2, w - 2) : 4 < w && !v && !y && b.points.removeRange(2, w - 3);
                    }
                    if (c.rev) {
                        for(; null !== n && m !== n;){
                            var z = w = null;
                            for(v = n.sourceEdges.iterator; v.next() && (y = v.value, y.link !== c.link || (w = y.fromVertex, z = y.toVertex, null !== w.node)););
                            if (null === w) break;
                            if (w !== m) {
                                v = b.i(u - 1).x;
                                y = b.i(u - 1).y;
                                var A = w.centerX;
                                var B = w.centerY;
                                if (q) 180 === this.K || 0 === this.K ? u === b.firstPickIndex + 1 ? (b.m(u++, v, y), b.m(u++, v, B)) : (null !== z ? z.centerY : y) !== B && (z = this.Ta[w.layer - 1] + this.Rf.x, b.m(u++, z, y), b.m(u++, z, B)) : u === b.firstPickIndex + 1 ? (b.m(u++, v, y), b.m(u++, A, y)) : (null !== z ? z.centerX : v) !== A && (z = this.Ta[w.layer - 1] + this.Rf.y, b.m(u++, v, z), b.m(u++, A, z));
                                else if (u === b.firstPickIndex + 1) {
                                    z = Math.max(10, this.he[n.layer]);
                                    var D = Math.max(10, this.Ld[n.layer]);
                                    if (p) 180 === this.K ? A <= n.bounds.x ? (n = n.bounds.x, b.m(u++, n - z, B), b.m(u++, n, B), b.m(u++, n + D, B)) : (b.m(u++, A - z, B), b.m(u++, A, B), b.m(u++, A + D, B)) : 90 === this.K ? B >= n.bounds.bottom ? (n = n.bounds.y + n.bounds.height, b.m(u++, A, n + D), b.m(u++, A, n), b.m(u++, A, n - z)) : (b.m(u++, A, B + D), b.m(u++, A, B), b.m(u++, A, B - z)) : 270 === this.K ? B <= n.bounds.y ? (n = n.bounds.y, b.m(u++, A, n - z), b.m(u++, A, n), b.m(u++, A, n + D)) : (b.m(u++, A, B - z), b.m(u++, A, B), b.m(u++, A, B + D)) : 0 === this.K && (A >= n.bounds.right ? (n = n.bounds.x + n.bounds.width, b.m(u++, n + D, B), b.m(u++, n, B), b.m(u++, n - z, B)) : (b.m(u++, A + D, B), b.m(u++, A, B), b.m(u++, A - z, B)));
                                    else {
                                        b.m(u++, v, y);
                                        var M = 0;
                                        if (180 === this.K || 0 === this.K) {
                                            if (180 === this.K ? A >= n.bounds.right : A <= n.bounds.x) M = (0 === this.K ? -z : D) / 2;
                                            b.m(u++, v + M, B);
                                        } else {
                                            if (270 === this.K ? B >= n.bounds.bottom : B <= n.bounds.y) M = (90 === this.K ? -z : D) / 2;
                                            b.m(u++, A, y + M);
                                        }
                                        b.m(u++, A, B);
                                    }
                                } else z = Math.max(10, this.he[w.layer]), D = Math.max(10, this.Ld[w.layer]), p ? 180 === this.K ? (b.m(u++, A - z - r, B), b.m(u++, Math.min(A - z + r / 2, A), B), b.m(u++, A, B), b.m(u++, A, B), b.m(u++, Math.max(A + D - r / 2, A), B), b.m(u++, A + D + r, B)) : 90 === this.K ? (b.m(u++, A, B + D + r), b.m(u++, A, Math.max(B + D - r / 2, B)), b.m(u++, A, B), b.m(u++, A, B), b.m(u++, A, Math.min(B - z + r / 2, B)), b.m(u++, A, B - z - r)) : 270 === this.K ? (b.m(u++, A, B - z - r), b.m(u++, A, Math.min(B - z + r / 2, B)), b.m(u++, A, B), b.m(u++, A, B), b.m(u++, A, Math.max(B + D - r / 2, B)), b.m(u++, A, B + D + r)) : (b.m(u++, A + D + r, B), b.m(u++, Math.max(A + D - r / 2, A), B), b.m(u++, A, B), b.m(u++, A, B), b.m(u++, Math.min(A - z + r / 2, A), B), b.m(u++, A - z - r, B)) : b.m(u++, A, B);
                            }
                            n = w;
                        }
                        if (null === h || l !== rc || q) {
                            if (v = b.i(u - 1).x, y = b.i(u - 1).y, A = b.i(u).x, B = b.i(u).y, q) r = this.Ld[m.layer], 180 === this.K || 0 === this.K ? (q = y, q >= m.bounds.y && q <= m.bounds.bottom && (180 === this.K ? A >= m.bounds.x : A <= m.bounds.right) && (n = m.centerX + (180 === this.K ? -r : r), q < m.bounds.y + m.bounds.height / 2 ? q = m.bounds.y - this.lc / 2 : q = m.bounds.bottom + this.lc / 2, b.m(u++, n, y), b.m(u++, n, q)), b.m(u++, A, q)) : (q = v, q >= m.bounds.x && q <= m.bounds.right && (270 === this.K ? B >= m.bounds.y : B <= m.bounds.bottom) && (n = m.centerY + (270 === this.K ? -r : r), q < m.bounds.x + m.bounds.width / 2 ? q = m.bounds.x - this.lc / 2 : q = m.bounds.right + this.lc / 2, b.m(u++, v, n), b.m(u++, q, n)), b.m(u++, q, B)), b.m(u++, A, B);
                            else if (p) z = Math.max(10, this.he[m.layer]), D = Math.max(10, this.Ld[m.layer]), 180 === this.K && A >= m.bounds.x ? (n = m.bounds.x + m.bounds.width, b.L(u - 2, n, y), b.L(u - 1, n + D, y)) : 90 === this.K && B <= m.bounds.bottom ? (n = m.bounds.y, b.L(u - 2, v, n), b.L(u - 1, v, n - z)) : 270 === this.K && B >= m.bounds.y ? (n = m.bounds.y + m.bounds.height, b.L(u - 2, v, n), b.L(u - 1, v, n + D)) : 0 === this.K && A <= m.bounds.right && (n = m.bounds.x, b.L(u - 2, n, y), b.L(u - 1, n - z, y));
                            else {
                                z = Math.max(10, this.he[m.layer]);
                                D = Math.max(10, this.Ld[m.layer]);
                                q = 0;
                                if (180 === this.K || 0 === this.K) {
                                    if (180 === this.K ? A <= m.bounds.x : A >= m.bounds.right) q = (0 === this.K ? D : -z) / 2;
                                    b.m(u++, A + q, y);
                                } else {
                                    if (270 === this.K ? B <= m.bounds.y : B >= m.bounds.bottom) q = (90 === this.K ? D : -z) / 2;
                                    b.m(u++, v, B + q);
                                }
                                b.m(u++, A, B);
                            }
                        }
                    } else {
                        for(; null !== m && m !== n;){
                            z = w = null;
                            for(m = m.destinationEdges.iterator; m.next() && (v = m.value, v.link !== c.link || (w = v.toVertex, z = v.fromVertex, null !== z.node && (z = null), null !== w.node)););
                            if (null === w) break;
                            w !== n && (v = b.i(u - 1).x, y = b.i(u - 1).y, A = w.centerX, B = w.centerY, q ? 180 === this.K || 0 === this.K ? (null !== z ? z.centerY : y) !== B && (z = this.Ta[w.layer] + this.Rf.x, u === b.firstPickIndex + 1 && (z = 0 === this.K ? Math.max(z, v) : Math.min(z, v)), b.m(u++, z, y), b.m(u++, z, B)) : (null !== z ? z.centerX : v) !== A && (z = this.Ta[w.layer] + this.Rf.y, u === b.firstPickIndex + 1 && (z = 90 === this.K ? Math.max(z, y) : Math.min(z, y)), b.m(u++, v, z), b.m(u++, A, z)) : (z = Math.max(10, this.he[w.layer]), D = Math.max(10, this.Ld[w.layer]), p ? 180 === this.K ? (b.m(u++, A + D + r, B), b.m(u++, Math.max(A + D - r / 2, A), B), b.m(u++, A, B), b.m(u++, A, B), b.m(u++, Math.min(A - z + r / 2, A), B), b.m(u++, A - z - r, B)) : 90 === this.K ? (b.m(u++, A, B - z - r), b.m(u++, A, Math.min(B - z + r / 2, B)), b.m(u++, A, B), b.m(u++, A, B), b.m(u++, A, Math.max(B + D - r / 2, B)), b.m(u++, A, B + D + r)) : 270 === this.K ? (b.m(u++, A, B + D + r), b.m(u++, A, Math.max(B + D - r / 2, B)), b.m(u++, A, B), b.m(u++, A, B), b.m(u++, A, Math.min(B - z + r / 2, B)), b.m(u++, A, B - z - r)) : (b.m(u++, A - z - r, B), b.m(u++, Math.min(A - z + r / 2, A), B), b.m(u++, A, B), b.m(u++, A, B), b.m(u++, Math.max(A + D - r / 2, A), B), b.m(u++, A + D + r, B)) : 180 === this.K ? (b.m(u++, A + D, B), b.m(u++, A - z, B)) : 90 === this.K ? (b.m(u++, A, B - z), b.m(u++, A, B + D)) : 270 === this.K ? (b.m(u++, A, B + D), b.m(u++, A, B - z)) : (b.m(u++, A - z, B), b.m(u++, A + D, B))));
                            m = w;
                        }
                        q && (v = b.i(u - 1).x, y = b.i(u - 1).y, A = b.i(u).x, B = b.i(u).y, 180 === this.K || 0 === this.K ? y !== B && (z = 0 === this.K ? Math.min(Math.max((A + v) / 2, this.Ta[n.layer] + this.Rf.x), A) : Math.max(Math.min((A + v) / 2, this.Ta[n.layer] + this.Rf.x), A), b.m(u++, z, y), b.m(u++, z, B)) : v !== A && (z = 90 === this.K ? Math.min(Math.max((B + y) / 2, this.Ta[n.layer] + this.Rf.y), B) : Math.max(Math.min((B + y) / 2, this.Ta[n.layer] + this.Rf.y), B), b.m(u++, v, z), b.m(u++, A, z)));
                    }
                    null !== d && p && 4 <= b.pointsCount && (null !== g && (g = l === rc ? b.getLinkPointFromPoint(e, g, g.ga(wc), b.i(3), !0) : b.i(0), l === rc && (l = b.i(2), d = b.i(3), 90 === this.direction || 270 === this.direction ? (b.L(1, (g.x + l.x) / 2, l.y), b.L(2, d.x, (l.y + d.y) / 2)) : (b.L(1, l.x, (g.y + l.y) / 2), b.L(2, (l.x + d.x) / 2, d.y))), g.w() || g.set(e.actualBounds.center), b.L(0, g.x, g.y)), null !== h && (e = k === rc ? b.getLinkPointFromPoint(f, h, h.ga(wc), b.i(b.pointsCount - 4), !1) : b.i(b.pointsCount - 1), k === rc && (h = b.i(b.pointsCount - 3), k = b.i(b.pointsCount - 4), 90 === this.direction || 270 === this.direction ? (b.L(b.pointsCount - 2, (e.x + h.x) / 2, h.y), b.L(b.pointsCount - 2, k.x, (h.y + k.y) / 2)) : (b.L(b.pointsCount - 2, h.x, (e.y + h.y) / 2), b.L(b.pointsCount - 3, (h.x + k.x) / 2, k.y))), e.w() || e.set(f.actualBounds.center), b.L(b.pointsCount - 1, e.x, e.y)));
                    b.zf();
                    c.commit();
                }
            }
        }
        this.avoidOrthogonalOverlaps();
    };
    Hs.prototype.avoidOrthogonalOverlaps = function() {
        if (!(0 >= this.linkSpacing)) {
            for(var a1 = new F, b = this.network.edges.iterator; b.next();){
                var c = b.value.link;
                null !== c && c.isOrthogonal && !a1.contains(c) && a1.add(c);
            }
            if (0 < a1.count) {
                if (90 === this.K || 270 === this.K) {
                    b = 0;
                    c = [];
                    for(a1 = a1.iterator; a1.next();){
                        var d = a1.value;
                        if (null !== d && d.isOrthogonal) for(var e = 2; e < d.pointsCount - 3; e++){
                            var f = d.i(e);
                            var g = d.i(e + 1);
                            if (this.B(f.y, g.y) && !this.B(f.x, g.x)) {
                                var h = new Nt;
                                h.layer = Math.floor(f.y / 2);
                                var k = d.i(0), l = d.i(d.pointsCount - 1);
                                h.first = k.x * k.x + k.y;
                                h.kc = l.x * l.x + l.y;
                                h.rd = Math.min(f.x, g.x);
                                h.Ic = Math.max(f.x, g.x);
                                h.index = e;
                                h.link = d;
                                if (e + 2 < d.pointsCount) {
                                    k = d.i(e - 1);
                                    l = d.i(e + 2);
                                    var m = 0;
                                    k.y < f.y ? m = l.y < f.y ? 3 : f.x < g.x ? 2 : 1 : k.y > f.y && (m = l.y > f.y ? 0 : g.x < f.x ? 2 : 1);
                                    h.j = m;
                                }
                                c.push(h);
                            }
                        }
                    }
                    if (1 < c.length) for(c.sort(this.Vx), a1 = 0; a1 < c.length;){
                        f = c[a1].layer;
                        for(d = a1 + 1; d < c.length && c[d].layer === f;)d++;
                        if (1 < d - a1) for(f = a1; f < d;){
                            g = c[f].Ic;
                            for(e = a1 + 1; e < d && c[e].rd < g;)g = Math.max(g, c[e].Ic), e++;
                            g = e - f;
                            if (1 < g) {
                                this.zi(c, this.Is, f, f + g);
                                m = 1;
                                h = c[f].kc;
                                for(k = f; k < e; k++)l = c[k], l.kc !== h && (m++, h = l.kc);
                                this.zi(c, this.Ux, f, f + g);
                                var n = 1;
                                h = c[f].first;
                                for(k = f; k < e; k++)l = c[k], l.first !== h && (n++, h = l.first);
                                k = !0;
                                l = n;
                                m < n ? (k = !1, l = m, h = c[f].kc, this.zi(c, this.Is, f, f + g)) : h = c[f].first;
                                m = 0;
                                for(n = f; n < e; n++){
                                    var p = c[n];
                                    (k ? p.first : p.kc) !== h && (m++, h = k ? p.first : p.kc);
                                    var q = p.link;
                                    f = q.i(p.index);
                                    g = q.i(p.index + 1);
                                    var r = this.linkSpacing * (m - (l - 1) / 2);
                                    b++;
                                    q.uh();
                                    q.L(p.index, f.x, f.y + r);
                                    q.L(p.index + 1, g.x, g.y + r);
                                    q.zf();
                                }
                            }
                            f = e;
                        }
                        a1 = d;
                    }
                } else {
                    b = 0;
                    c = [];
                    for(a1 = a1.iterator; a1.next();)if (d = a1.value, null !== d && d.isOrthogonal) for(e = 2; e < d.pointsCount - 3; e++)f = d.i(e), g = d.i(e + 1), this.B(f.x, g.x) && !this.B(f.y, g.y) && (h = new Nt, h.layer = Math.floor(f.x / 2), k = d.i(0), l = d.i(d.pointsCount - 1), h.first = k.x + k.y * k.y, h.kc = l.x + l.y * l.y, h.rd = Math.min(f.y, g.y), h.Ic = Math.max(f.y, g.y), h.index = e, h.link = d, e + 2 < d.pointsCount && (k = d.i(e - 1), l = d.i(e + 2), m = 0, k.x < f.x ? m = l.x < f.x ? 3 : f.y < g.y ? 2 : 1 : k.x > f.x && (m = l.x > f.x ? 0 : g.y < f.y ? 2 : 1), h.j = m), c.push(h));
                    if (1 < c.length) for(c.sort(this.Vx), a1 = 0; a1 < c.length;){
                        f = c[a1].layer;
                        for(d = a1 + 1; d < c.length && c[d].layer === f;)d++;
                        if (1 < d - a1) for(f = a1; f < d;){
                            g = c[f].Ic;
                            for(e = a1 + 1; e < d && c[e].rd < g;)g = Math.max(g, c[e].Ic), e++;
                            g = e - f;
                            if (1 < g) {
                                this.zi(c, this.Is, f, f + g);
                                m = 1;
                                h = c[f].kc;
                                for(k = f; k < e; k++)l = c[k], l.kc !== h && (m++, h = l.kc);
                                this.zi(c, this.Ux, f, f + g);
                                n = 1;
                                h = c[f].first;
                                for(k = f; k < e; k++)l = c[k], l.first !== h && (n++, h = l.first);
                                k = !0;
                                l = n;
                                m < n ? (k = !1, l = m, h = c[f].kc, this.zi(c, this.Is, f, f + g)) : h = c[f].first;
                                m = 0;
                                for(n = f; n < e; n++)p = c[n], (k ? p.first : p.kc) !== h && (m++, h = k ? p.first : p.kc), q = p.link, f = q.i(p.index), g = q.i(p.index + 1), r = this.linkSpacing * (m - (l - 1) / 2), b++, q.uh(), q.L(p.index, f.x + r, f.y), q.L(p.index + 1, g.x + r, g.y), q.zf();
                            }
                            f = e;
                        }
                        a1 = d;
                    }
                }
            }
        }
    };
    t = Hs.prototype;
    t.Vx = function(a1, b) {
        return a1 instanceof Nt && b instanceof Nt && a1 !== b ? a1.layer < b.layer ? -1 : a1.layer > b.layer ? 1 : a1.rd < b.rd ? -1 : a1.rd > b.rd ? 1 : a1.Ic < b.Ic ? -1 : a1.Ic > b.Ic ? 1 : 0 : 0;
    };
    t.Ux = function(a1, b) {
        return a1 instanceof Nt && b instanceof Nt && a1 !== b ? a1.first < b.first ? -1 : a1.first > b.first || a1.j < b.j ? 1 : a1.j > b.j || a1.rd < b.rd ? -1 : a1.rd > b.rd ? 1 : a1.Ic < b.Ic ? -1 : a1.Ic > b.Ic ? 1 : 0 : 0;
    };
    t.Is = function(a1, b) {
        return a1 instanceof Nt && b instanceof Nt && a1 !== b ? a1.kc < b.kc ? -1 : a1.kc > b.kc || a1.j < b.j ? 1 : a1.j > b.j || a1.rd < b.rd ? -1 : a1.rd > b.rd ? 1 : a1.Ic < b.Ic ? -1 : a1.Ic > b.Ic ? 1 : 0 : 0;
    };
    t.B = function(a1, b) {
        a1 -= b;
        return -1 < a1 && 1 > a1;
    };
    t.zi = function(a1, b, c, d) {
        var e = a1.length, f = d - c;
        if (!(1 >= f)) {
            if ((0 > c || c >= e - 1) && C("not in range 0 <= from < length: " + c), 2 === f) d = a1[c], e = a1[c + 1], 0 < b(d, e) && (a1[c] = e, a1[c + 1] = d);
            else if (0 === c) {
                if (d >= e) a1.sort(b);
                else for(c = a1.slice(0, d), c.sort(b), b = 0; b < d; b++)a1[b] = c[b];
            } else if (d >= e) for(d = a1.slice(c), d.sort(b), b = c; b < e; b++)a1[b] = d[b - c];
            else for(e = a1.slice(c, d), e.sort(b), b = c; b < d; b++)a1[b] = e[b - c];
        }
    };
    function Rs(a1, b) {
        var c = a1.vb[b];
        if (c >= a1.He.length) {
            var d = [];
            for(var e = 0; e < a1.He.length; e++)d[e] = a1.He[e];
            a1.He = d;
        }
        void 0 === a1.He[c] || null === a1.He[c] ? d = [] : (d = a1.He[c], a1.He[c] = null);
        a1 = a1.el[b];
        for(b = 0; b < a1.length; b++)c = a1[b], d[c.index] = c;
        return d;
    }
    function Ss(a1, b, c) {
        a1.He[a1.vb[b]] = c;
    }
    ma.Object.defineProperties(Hs.prototype, {
        layerSpacing: {
            get: function() {
                return this.ie;
            },
            set: function(a1) {
                this.ie !== a1 && 0 <= a1 && (this.ie = a1, this.C());
            }
        },
        columnSpacing: {
            get: function() {
                return this.lc;
            },
            set: function(a1) {
                this.lc !== a1 && 0 < a1 && (this.lc = a1, this.C());
            }
        },
        direction: {
            get: function() {
                return this.K;
            },
            set: function(a1) {
                this.K !== a1 && (0 === a1 || 90 === a1 || 180 === a1 || 270 === a1 ? (this.K = a1, this.C()) : C("LayeredDigraphLayout.direction must be 0, 90, 180, or 270"));
            }
        },
        cycleRemoveOption: {
            get: function() {
                return this.Ck;
            },
            set: function(a1) {
                this.Ck === a1 || a1 !== bt && a1 !== Is && a1 !== Ns || (this.Ck = a1, this.C());
            }
        },
        layeringOption: {
            get: function() {
                return this.Yk;
            },
            set: function(a1) {
                this.Yk === a1 || a1 !== Js && a1 !== gt && a1 !== it || (this.Yk = a1, this.C());
            }
        },
        initializeOption: {
            get: function() {
                return this.Pk;
            },
            set: function(a1) {
                this.Pk === a1 || a1 !== Ks && a1 !== pt && a1 !== mt || (this.Pk = a1, this.C());
            }
        },
        iterations: {
            get: function() {
                return this.bj;
            },
            set: function(a1) {
                this.bj !== a1 && 0 <= a1 && (this.bj = a1, this.C());
            }
        },
        aggressiveOption: {
            get: function() {
                return this.qk;
            },
            set: function(a1) {
                this.qk === a1 || a1 !== tt && a1 !== Ls && a1 !== ut || (this.qk = a1, this.C());
            }
        },
        packOption: {
            get: function() {
                return this.bg;
            },
            set: function(a1) {
                this.bg !== a1 && 0 <= a1 && 8 > a1 && (this.bg = a1, this.C());
            }
        },
        alignOption: {
            get: function() {
                return this.ve;
            },
            set: function(a1) {
                this.ve !== a1 && 0 <= a1 && 16 > a1 && (this.ve = a1, this.C());
            }
        },
        setsPortSpots: {
            get: function() {
                return this.sf;
            },
            set: function(a1) {
                this.sf !== a1 && (this.sf = a1, this.C());
            }
        },
        linkSpacing: {
            get: function() {
                return this.Bn;
            },
            set: function(a1) {
                this.Bn !== a1 && 0 <= a1 && (this.Bn = a1, this.C());
            }
        },
        maxLayer: {
            get: function() {
                return this.Ia;
            }
        },
        maxIndex: {
            get: function() {
                return this.Hq;
            }
        },
        maxColumn: {
            get: function() {
                return this.Ra;
            }
        },
        minIndexLayer: {
            get: function() {
                return this.Gn;
            }
        },
        maxIndexLayer: {
            get: function() {
                return this.Md;
            }
        }
    });
    var Is = new E(Hs, "CycleDepthFirst", 0), bt = new E(Hs, "CycleGreedy", 1), Ns = new E(Hs, "CycleFromLayers", 2), Js = new E(Hs, "LayerOptimalLinkLength", 0), gt = new E(Hs, "LayerLongestPathSink", 1), it = new E(Hs, "LayerLongestPathSource", 2), Ks = new E(Hs, "InitDepthFirstOut", 0), pt = new E(Hs, "InitDepthFirstIn", 1), mt = new E(Hs, "InitNaive", 2), tt = new E(Hs, "AggressiveNone", 0), Ls = new E(Hs, "AggressiveLess", 1), ut = new E(Hs, "AggressiveMore", 2), vt = 8;
    Hs.className = "LayeredDigraphLayout";
    Hs.CycleDepthFirst = Is;
    Hs.CycleGreedy = bt;
    Hs.CycleFromLayers = Ns;
    Hs.LayerOptimalLinkLength = Js;
    Hs.LayerLongestPathSink = gt;
    Hs.LayerLongestPathSource = it;
    Hs.InitDepthFirstOut = Ks;
    Hs.InitDepthFirstIn = pt;
    Hs.InitNaive = mt;
    Hs.AggressiveNone = tt;
    Hs.AggressiveLess = Ls;
    Hs.AggressiveMore = ut;
    Hs.PackNone = 0;
    Hs.PackExpand = 1;
    Hs.PackStraighten = 2;
    Hs.PackMedian = 4;
    Hs.PackAll = 15;
    Hs.AlignNone = 0;
    Hs.AlignUpperLeft = 1;
    Hs.AlignUpperRight = 2;
    Hs.AlignLowerLeft = 4;
    Hs.AlignLowerRight = 8;
    Hs.AlignAll = 15;
    function Nt() {
        this.index = this.Ic = this.rd = this.kc = this.first = this.layer = 0;
        this.link = null;
        this.j = 0;
    }
    Nt.className = "SegInfo";
    function Ms(a1) {
        vq.call(this, a1);
    }
    la(Ms, vq);
    Ms.prototype.createVertex = function() {
        return new Ot(this);
    };
    Ms.prototype.createEdge = function() {
        return new Pt(this);
    };
    Ms.className = "LayeredDigraphNetwork";
    function Ot(a1) {
        yq.call(this, a1);
        this.Zn = this.ao = this.$n = this.bo = null;
        this.Za = this.Ag = this.Ig = -1;
        this.u = NaN;
        this.F = null;
        this.valid = !1;
        this.finish = this.Kl = NaN;
        this.Cu = 0;
        this.dv = this.ev = null;
    }
    la(Ot, yq);
    function Qt(a1, b) {
        return a1.index - b.index;
    }
    function Jt(a1, b) {
        if (!a1.Zn) {
            for(var c = [], d = ba(a1.destinationEdgesArrayAccess), e = d.next(); !e.done; e = d.next())e = e.value, e.valid && c.push(e);
            a1.Zn = c;
        }
        a1 = ba(a1.Zn);
        for(c = a1.next(); !c.done; c = a1.next())if (c = c.value, c.toVertex === b) return c;
        C("Unable to find destination edge to given vertex");
    }
    function Gt(a1) {
        if (!a1.bo) {
            for(var b = [], c = ba(a1.sourceEdgesArrayAccess), d = c.next(); !d.done; d = c.next())d = d.value, d.valid && b.push(d.fromVertex);
            b.sort(Qt);
            a1.bo = b;
        }
        return a1.bo;
    }
    function It(a1) {
        if (!a1.$n) {
            for(var b = [], c = ba(a1.destinationEdgesArrayAccess), d = c.next(); !d.done; d = c.next())d = d.value, d.valid && b.push(d.toVertex);
            b.sort(Qt);
            a1.$n = b;
        }
        return a1.$n;
    }
    Ot.prototype.Bl = function(a1) {
        yq.prototype.Bl.call(this, a1);
        this.ao = this.bo = null;
    };
    Ot.prototype.Jl = function(a1) {
        yq.prototype.Jl.call(this, a1);
        this.ao = this.bo = null;
    };
    Ot.prototype.yl = function(a1) {
        yq.prototype.yl.call(this, a1);
        this.Zn = this.$n = null;
    };
    Ot.prototype.Il = function(a1) {
        yq.prototype.Il.call(this, a1);
        this.Zn = this.$n = null;
    };
    ma.Object.defineProperties(Ot.prototype, {
        layer: {
            get: function() {
                return this.Ig;
            },
            set: function(a1) {
                this.Ig !== a1 && (this.Ig = a1);
            }
        },
        column: {
            get: function() {
                return this.Ag;
            },
            set: function(a1) {
                this.Ag !== a1 && (this.Ag = a1);
            }
        },
        index: {
            get: function() {
                return this.Za;
            },
            set: function(a1) {
                this.Za !== a1 && (this.Za = a1);
            }
        },
        component: {
            get: function() {
                return this.u;
            },
            set: function(a1) {
                this.u !== a1 && (this.u = a1);
            }
        },
        near: {
            get: function() {
                return this.F;
            },
            set: function(a1) {
                this.F !== a1 && (this.F = a1);
            }
        }
    });
    Ot.prototype.deleteDestinationEdge = Ot.prototype.Il;
    Ot.prototype.addDestinationEdge = Ot.prototype.yl;
    Ot.prototype.deleteSourceEdge = Ot.prototype.Jl;
    Ot.prototype.addSourceEdge = Ot.prototype.Bl;
    Ot.className = "LayeredDigraphVertex";
    function Pt(a1) {
        zq.call(this, a1);
        this.j = this.ia = this.Ha = !1;
        this.V = this.u = NaN;
        this.F = this.o = 0;
    }
    la(Pt, zq);
    ma.Object.defineProperties(Pt.prototype, {
        fromVertex: {
            get: function() {
                return this.kd;
            },
            set: function(a1) {
                this.kd !== a1 && (this.kd = a1);
            }
        },
        toVertex: {
            get: function() {
                return this.qd;
            },
            set: function(a1) {
                this.qd !== a1 && (this.qd = a1);
            }
        },
        valid: {
            get: function() {
                return this.Ha;
            },
            set: function(a1) {
                this.Ha !== a1 && (this.Ha = a1);
            }
        },
        rev: {
            get: function() {
                return this.ia;
            },
            set: function(a1) {
                this.ia !== a1 && (this.ia = a1);
            }
        },
        forest: {
            get: function() {
                return this.j;
            },
            set: function(a1) {
                this.j !== a1 && (this.j = a1);
            }
        },
        portFromPos: {
            get: function() {
                return this.u;
            },
            set: function(a1) {
                this.u !== a1 && (this.u = a1);
            }
        },
        portToPos: {
            get: function() {
                return this.V;
            },
            set: function(a1) {
                this.V !== a1 && (this.V = a1);
            }
        },
        portFromColOffset: {
            get: function() {
                return this.o;
            },
            set: function(a1) {
                this.o !== a1 && (this.o = a1);
            }
        },
        portToColOffset: {
            get: function() {
                return this.F;
            },
            set: function(a1) {
                this.F !== a1 && (this.F = a1);
            }
        }
    });
    Pt.className = "LayeredDigraphEdge";
    function Rt(a1) {
        ti.call(this);
        this.Vb = new H;
        this.Vn = St;
        this.ud = Tt;
        this.uo = Ut;
        this.Aq = Vt;
        this.$v = [];
        this.td = !0;
        this.Sb = Wt;
        this.$d = new L(10, 10).freeze();
        var b = new Xt(this);
        this.W = new Yt(b);
        this.Y = new Yt(b);
        this.qu = [];
        a1 && Object.assign(this, a1);
    }
    la(Rt, ti);
    Rt.prototype.cloneProtected = function(a1) {
        ti.prototype.cloneProtected.call(this, a1);
        a1.Vn = this.Vn;
        a1.uo = this.uo;
        a1.Aq = this.Aq;
        a1.td = this.td;
        a1.Sb = this.Sb;
        a1.$d.assign(this.$d);
        a1.W.copyInheritedPropertiesFrom(this.W);
        a1.Y.copyInheritedPropertiesFrom(this.Y);
    };
    Rt.prototype.qb = function(a1) {
        a1.classType === Rt ? 0 === a1.name.indexOf("Alignment") ? this.alignment = a1 : 0 === a1.name.indexOf("Arrangement") ? this.arrangement = a1 : 0 === a1.name.indexOf("Compaction") ? this.compaction = a1 : 0 === a1.name.indexOf("Path") ? this.path = a1 : 0 === a1.name.indexOf("Sorting") ? this.sorting = a1 : 0 === a1.name.indexOf("Style") ? this.treeStyle = a1 : C("Unknown enum value: " + a1) : ti.prototype.qb.call(this, a1);
    };
    Rt.prototype.createNetwork = function() {
        return new Xt(this);
    };
    Rt.prototype.makeNetwork = function(a1) {
        function b(a1) {
            if (a1 instanceof V) return !a1.isLinkLabel && "Comment" !== a1.category;
            if (a1 instanceof T) {
                var b = a1.fromNode;
                if (null === b || b.isLinkLabel || "Comment" === b.category) return !1;
                a1 = a1.toNode;
                return null === a1 || a1.isLinkLabel || "Comment" === a1.category ? !1 : !0;
            }
            return !1;
        }
        var c = this.createNetwork();
        a1 instanceof Q ? (c.lg(a1.nodes, !0, b), c.lg(a1.links, !0, b)) : a1 instanceof pf ? c.lg(a1.memberParts, !1, b) : c.lg(a1.iterator, !1, b);
        return c;
    };
    Rt.prototype.doLayout = function(a1) {
        null === this.network && (this.network = this.makeNetwork(a1));
        this.arrangement !== Zt && (this.arrangementOrigin = this.initialOrigin(this.arrangementOrigin));
        var b = this.diagram;
        null === b && a1 instanceof Q && (b = a1);
        this.path === St && null !== b ? this.ud = b.isTreePathToChildren ? Tt : $t : this.ud = this.path === St ? Tt : this.path;
        if (0 < this.network.vertexes.count) {
            this.network.Jo();
            for(a1 = this.network.vertexes.iterator; a1.next();)b = a1.value, b.initialized = !1, b.level = 0, b.parent = null, b.children = [];
            if (0 < this.Vb.count) {
                a1 = new H;
                for(b = this.Vb.iterator; b.next();){
                    var c = b.value;
                    c instanceof V ? (c = this.network.ki(c), null !== c && a1.add(c)) : c instanceof Yt && a1.add(c);
                }
                this.Vb = a1;
            }
            0 === this.Vb.count && this.findRoots();
            for(a1 = this.Vb.copy().iterator; a1.next();)b = a1.value, b.initialized || (b.initialized = !0, au(this, b));
            b = this.network.vertexes;
            for(a1 = null; a1 = bu(b), 0 < a1.count;)b = cu(this, a1), null !== b && this.Vb.add(b), b.initialized = !0, au(this, b), b = a1;
            for(a1 = this.Vb.iterator; a1.next();)b = a1.value, b instanceof Yt && du(this, b);
            for(a1 = this.Vb.iterator; a1.next();)b = a1.value, b instanceof Yt && eu(this, b);
            for(a1 = this.Vb.iterator; a1.next();)b = a1.value, b instanceof Yt && fu(this, b);
            this.Bu();
            if (this.layerStyle === gu) {
                a1 = [];
                for(b = this.network.vertexes.iterator; b.next();){
                    c = b.value;
                    var d = c.parent;
                    null === d && (d = c);
                    d = 0 === d.angle || 180 === d.angle;
                    var e = a1[c.level];
                    void 0 === e && (e = 0);
                    a1[c.level] = Math.max(e, d ? c.width : c.height);
                }
                for(b = 0; b < a1.length; b++)void 0 === a1[b] && (a1[b] = 0);
                this.$v = a1;
                for(b = this.network.vertexes.iterator; b.next();)c = b.value, d = c.parent, null === d && (d = c), 0 === d.angle || 180 === d.angle ? (180 === d.angle && (c.focusX += a1[c.level] - c.width), c.width = a1[c.level]) : (270 === d.angle && (c.focusY += a1[c.level] - c.height), c.height = a1[c.level]);
            } else if (this.layerStyle === hu) for(a1 = this.network.vertexes.iterator; a1.next();){
                b = a1.value;
                c = 0 === b.angle || 180 === b.angle;
                d = -1;
                for(e = 0; e < b.children.length; e++){
                    var f = b.children[e];
                    d = Math.max(d, c ? f.width : f.height);
                }
                if (0 <= d) for(e = 0; e < b.children.length; e++)f = b.children[e], c ? (180 === b.angle && (f.focusX += d - f.width), f.width = d) : (270 === b.angle && (f.focusY += d - f.height), f.height = d);
            }
            for(a1 = this.Vb.iterator; a1.next();)b = a1.value, b instanceof Yt && this.layoutTree(b);
            this.arrangeTrees();
            this.updateParts();
        }
        this.network = null;
        this.Vb = new H;
        this.isValidLayout = !0;
    };
    function bu(a1) {
        var b = new H;
        for(a1 = a1.iterator; a1.next();){
            var c = a1.value;
            c.initialized || b.add(c);
        }
        return b;
    }
    Rt.prototype.findRoots = function() {
        for(var a1 = this.network.vertexes, b = a1.iterator; b.next();){
            var c = b.value;
            switch(this.ud){
                case Tt:
                    0 === c.sourceEdges.count && this.Vb.add(c);
                    break;
                case $t:
                    0 === c.destinationEdges.count && this.Vb.add(c);
                    break;
                default:
                    C("Unhandled path value " + this.ud.toString());
            }
        }
        0 === this.Vb.count && (a1 = cu(this, a1), null !== a1 && this.Vb.add(a1));
    };
    function cu(a1, b) {
        var c = 999999, d = null;
        for(b = b.iterator; b.next();){
            var e = b.value;
            switch(a1.ud){
                case Tt:
                    e.sourceEdges.count < c && (c = e.sourceEdges.count, d = e);
                    break;
                case $t:
                    e.destinationEdges.count < c && (c = e.destinationEdges.count, d = e);
                    break;
                default:
                    C("Unhandled path value " + a1.ud.toString());
            }
        }
        return d;
    }
    function au(a1, b) {
        if (null !== b) {
            switch(a1.ud){
                case Tt:
                    if (0 < b.destinationEdges.count) {
                        for(var c = new F, d = b.destinationVertexes; d.next();){
                            var e = d.value;
                            iu(a1, b, e) && c.add(e);
                        }
                        0 < c.count && (b.children = c.Fa());
                    }
                    break;
                case $t:
                    if (0 < b.sourceEdges.count) {
                        c = new F;
                        for(d = b.sourceVertexes; d.next();)e = d.value, iu(a1, b, e) && c.add(e);
                        0 < c.count && (b.children = c.Fa());
                    }
                    break;
                default:
                    C("Unhandled path value" + a1.ud.toString());
            }
            c = b.children;
            d = c.length;
            for(e = 0; e < d; e++){
                var f = c[e];
                f.initialized = !0;
                f.level = b.level + 1;
                f.parent = b;
                a1.Vb.remove(f);
            }
            for(b = 0; b < d; b++)au(a1, c[b]);
        }
    }
    function iu(a1, b, c) {
        if (c.initialized) {
            if (null === b) var d = !1;
            else {
                for(d = b.parent; null !== d && d !== c;)d = d.parent;
                d = d === c;
            }
            if (d || c.level > b.level) return !1;
            a1.removeChild(c.parent, c);
        }
        return !0;
    }
    Rt.prototype.removeChild = function(a1, b) {
        if (null !== a1 && null !== b) {
            for(var c = a1.children, d = 0, e = 0; e < c.length; e++)c[e] === b && d++;
            if (0 < d) {
                d = Array(c.length - d);
                for(var f = e = 0; f < c.length; f++)c[f] !== b && (d[e++] = c[f]);
                a1.children = d;
            }
        }
    };
    function du(a1, b) {
        if (null !== b) {
            a1.initializeTreeVertexValues(b);
            b.alignment === ju && a1.sortTreeVertexChildren(b);
            for(var c = 0, d = b.childrenCount, e = 0, f = b.children, g = f.length, h = 0; h < g; h++){
                var k = f[h];
                du(a1, k);
                c += k.descendantCount + 1;
                d = Math.max(d, k.maxChildrenCount);
                e = Math.max(e, k.maxGenerationCount);
            }
            b.descendantCount = c;
            b.maxChildrenCount = d;
            b.maxGenerationCount = 0 < d ? e + 1 : 0;
        }
    }
    function ku(a1, b) {
        switch(a1.uo){
            default:
            case Ut:
                return null !== b.parent ? b.parent : a1.W;
            case lu:
                return null === b.parent ? a1.W : null === b.parent.parent ? a1.Y : b.parent;
            case mu:
                return null !== b.parent ? null !== b.parent.parent ? b.parent.parent : a1.Y : a1.W;
            case nu:
                var c = !0;
                if (0 === b.childrenCount) c = !1;
                else for(var d = b.children, e = d.length, f = 0; f < e; f++)if (0 < d[f].childrenCount) {
                    c = !1;
                    break;
                }
                return c && null !== b.parent ? a1.Y : null !== b.parent ? b.parent : a1.W;
        }
    }
    Rt.prototype.initializeTreeVertexValues = function(a1) {
        a1.copyInheritedPropertiesFrom(ku(this, a1));
        if (null !== a1.parent && a1.parent.alignment === ju) {
            for(var b = a1.angle, c = a1.parent.children, d = 0; d < c.length && a1 !== c[d];)d++;
            0 === d % 2 ? d !== c.length - 1 && (b = 90 === b ? 180 : 180 === b ? 270 : 270 === b ? 180 : 270) : b = 90 === b ? 0 : 180 === b ? 90 : 270 === b ? 0 : 90;
            a1.angle = b;
        }
        a1.initialized = !0;
    };
    function eu(a1, b) {
        if (null !== b) {
            a1.assignTreeVertexValues(b);
            b = b.children;
            for(var c = b.length, d = 0; d < c; d++)eu(a1, b[d]);
        }
    }
    Rt.prototype.assignTreeVertexValues = function() {};
    function fu(a1, b) {
        if (null !== b) {
            b.alignment !== ju && a1.sortTreeVertexChildren(b);
            b = b.children;
            for(var c = b.length, d = 0; d < c; d++)fu(a1, b[d]);
        }
    }
    Rt.prototype.sortTreeVertexChildren = function(a1) {
        switch(a1.sorting){
            case ou:
                break;
            case pu:
                a1.children.reverse();
                break;
            case qu:
                a1.children.sort(a1.comparer);
                break;
            case ru:
                a1.children.sort(a1.comparer);
                a1.children.reverse();
                break;
            default:
                C("Unhandled sorting value " + a1.sorting.toString());
        }
    };
    Rt.prototype.Bu = function() {
        if (this.comments) for(var a1 = this.network.vertexes.iterator; a1.next();)this.addComments(a1.value);
    };
    Rt.prototype.addComments = function(a1) {
        var b = a1.angle, c = a1.parent, d = 0;
        var e = !1;
        null !== c && (d = c.angle, e = c.alignment, e = su(e));
        b = 90 === b || 270 === b;
        d = 90 === d || 270 === d;
        c = 0 === a1.childrenCount;
        var f = 0, g = 0, h = 0, k = a1.commentSpacing;
        if (null !== a1.node) for(var l = a1.node.Mu(); l.next();){
            var m = l.value;
            "Comment" === m.category && m.canLayout() && (null === a1.comments && (a1.comments = []), a1.comments.push(m), m.Va(), m = m.measuredBounds, b && !c || !e && !d && c || e && d && c ? (f = Math.max(f, m.width), g += m.height + Math.abs(h)) : (f += m.width + Math.abs(h), g = Math.max(g, m.height)), h = k);
        }
        null !== a1.comments && (b && !c || !e && !d && c || e && d && c ? (f += Math.abs(a1.commentMargin), g = Math.max(0, g - a1.height)) : (g += Math.abs(a1.commentMargin), f = Math.max(0, f - a1.width)), e = N.allocAt(0, 0, a1.bounds.width + f, a1.bounds.height + g), a1.bounds = e, N.free(e));
    };
    function su(a1) {
        return a1 === vu || a1 === ju || a1 === wu || a1 === xu;
    }
    function yu(a1) {
        return a1 === vu || a1 === ju;
    }
    function zu(a1) {
        var b = a1.parent;
        if (null !== b) {
            var c = b.alignment;
            if (su(c)) {
                if (yu(c)) {
                    b = b.children;
                    for(c = 0; c < b.length && a1 !== b[c];)c++;
                    return 0 === c % 2;
                }
                if (c === wu) return !0;
            }
        }
        return !1;
    }
    Rt.prototype.layoutComments = function(a1) {
        if (null !== a1.comments) {
            var b = a1.node.measuredBounds, c = a1.parent, d = a1.angle, e = 0;
            var f = !1;
            null !== c && (e = c.angle, f = c.alignment, f = su(f));
            d = 90 === d || 270 === d;
            c = 90 === e || 270 === e;
            for(var g = 0 === a1.childrenCount, h = zu(a1), k = 0, l = a1.comments, m = l.length, n = J.alloc(), p = 0; p < m; p++){
                var q = l[p], r = q.measuredBounds;
                if (d && !g || !f && !c && g || f && c && g) {
                    if (135 < e && !f || c && h) {
                        if (0 <= a1.commentMargin) for(n.h(a1.bounds.x - a1.commentMargin - r.width, a1.bounds.y + k), q.move(n), q = q.Sd(); q.next();){
                            var u = q.value;
                            u.fromSpot = ad;
                            u.toSpot = bd;
                        }
                        else for(n.h(a1.bounds.x + 2 * a1.focus.x - a1.commentMargin, a1.bounds.y + k), q.move(n), q = q.Sd(); q.next();)u = q.value, u.fromSpot = bd, u.toSpot = ad;
                    } else if (0 <= a1.commentMargin) for(n.h(a1.bounds.x + 2 * a1.focus.x + a1.commentMargin, a1.bounds.y + k), q.move(n), q = q.Sd(); q.next();)u = q.value, u.fromSpot = bd, u.toSpot = ad;
                    else for(n.h(a1.bounds.x + a1.commentMargin - r.width, a1.bounds.y + k), q.move(n), q = q.Sd(); q.next();)u = q.value, u.fromSpot = ad, u.toSpot = bd;
                    k = 0 <= a1.commentSpacing ? k + (r.height + a1.commentSpacing) : k + (a1.commentSpacing - r.height);
                } else {
                    if (135 < e && !f || !c && h) {
                        if (0 <= a1.commentMargin) for(n.h(a1.bounds.x + k, a1.bounds.y - a1.commentMargin - r.height), q.move(n), q = q.Sd(); q.next();)u = q.value, u.fromSpot = $c, u.toSpot = cd;
                        else for(n.h(a1.bounds.x + k, a1.bounds.y + 2 * a1.focus.y - a1.commentMargin), q.move(n), q = q.Sd(); q.next();)u = q.value, u.fromSpot = cd, u.toSpot = $c;
                    } else if (0 <= a1.commentMargin) for(n.h(a1.bounds.x + k, a1.bounds.y + 2 * a1.focus.y + a1.commentMargin), q.move(n), q = q.Sd(); q.next();)u = q.value, u.fromSpot = cd, u.toSpot = $c;
                    else for(n.h(a1.bounds.x + k, a1.bounds.y + a1.commentMargin - r.height), q.move(n), q = q.Sd(); q.next();)u = q.value, u.fromSpot = $c, u.toSpot = cd;
                    k = 0 <= a1.commentSpacing ? k + (r.width + a1.commentSpacing) : k + (a1.commentSpacing - r.width);
                }
            }
            J.free(n);
            b = k - a1.commentSpacing - (d ? b.height : b.width);
            if (this.ud === Tt) for(a1 = a1.destinationEdges; a1.next();)e = a1.value.link, null === e || e.isAvoiding || (e.fromEndSegmentLength = 0 < b ? b : NaN);
            else for(a1 = a1.sourceEdges; a1.next();)e = a1.value.link, null === e || e.isAvoiding || (e.toEndSegmentLength = 0 < b ? b : NaN);
        }
    };
    Rt.prototype.layoutTree = function(a1) {
        if (null !== a1) {
            for(var b = a1.children, c = b.length, d = 0; d < c; d++)this.layoutTree(b[d]);
            switch(a1.compaction){
                case Au:
                    Bu(this, a1);
                    break;
                case Cu:
                    if (a1.alignment === ju) Bu(this, a1);
                    else if (0 === a1.childrenCount) d = a1.parent, c = !1, b = 0, null !== d && (b = d.angle, c = d.alignment, c = su(c)), d = zu(a1), a1.S.h(0, 0), a1.Da.h(a1.width, a1.height), null === a1.parent || null === a1.comments || (180 !== b && 270 !== b || c) && !d ? a1.la.h(0, 0) : 180 === b && !c || (90 === b || 270 === b) && d ? a1.la.h(a1.width - 2 * a1.focus.x, 0) : a1.la.h(0, a1.height - 2 * a1.focus.y), a1.Xo = null, a1.jp = null;
                    else {
                        var e = Du(a1);
                        b = 90 === e || 270 === e;
                        var f = 0, g = a1.children, h = g.length;
                        for(c = 0; c < h; c++)d = g[c], f = Math.max(f, b ? d.Da.width : d.Da.height);
                        var k = a1.alignment;
                        d = k === Eu;
                        var l = k === Fu, m = su(k), n = Math.max(0, a1.breadthLimit);
                        c = this.computeLayerSpacing(a1);
                        var p = a1.nodeSpacing, q = this.computeNodeIndent(a1), r = a1.rowSpacing, u = 0;
                        if (d || l || a1.gm || a1.hm && 1 === a1.maxGenerationCount) u = Math.max(0, a1.rowIndent);
                        d = a1.width;
                        var w = a1.height, v = 0, y = 0, z = 0, A = null, B = null, D = 0, M = 0, S = 0, R = 0, I = 0, G = 0, ca = 0, X = 0;
                        m && !yu(k) && 135 < e && g.reverse();
                        if (yu(k)) {
                            if (1 < h) for(var na = 0; na < h; na++)0 === na % 2 && na !== h - 1 && (X = Math.max(X, b ? g[na].Da.width : g[na].Da.height));
                            else 1 === h && (X = b ? g[0].Da.width : g[0].Da.height);
                        }
                        if (m) {
                            switch(k){
                                case vu:
                                    y = 135 > e ? Gu(this, a1, g, X, v, y) : Hu(this, a1, g, X, v, y);
                                    X = y.x;
                                    v = y.width;
                                    y = y.height;
                                    break;
                                case wu:
                                    for(A = 0; A < h; A++)B = g[A], n = B.Da, z = 0 === G ? 0 : r, b ? (B.S.h(f - n.width, R + z), v = Math.max(v, n.width), y = Math.max(y, R + z + n.height), R += z + n.height) : (B.S.h(S + z, f - n.height), v = Math.max(v, S + z + n.width), y = Math.max(y, n.height), S += z + n.width), G++;
                                    break;
                                case xu:
                                    for(A = 0; A < h; A++)B = g[A], f = B.Da, n = 0 === G ? 0 : r, b ? (B.S.h(p / 2 + a1.focus.x, R + n), v = Math.max(v, f.width), y = Math.max(y, R + n + f.height), R += n + f.height) : (B.S.h(S + n, p / 2 + a1.focus.y), v = Math.max(v, S + n + f.width), y = Math.max(y, f.height), S += n + f.width), G++;
                            }
                            A = Iu(this, 2);
                            B = Iu(this, 2);
                            b ? (A[0].h(0, 0), A[1].h(0, y), B[0].h(v, 0)) : (A[0].h(0, 0), A[1].h(v, 0), B[0].h(0, y));
                            B[1].h(v, y);
                        } else for(na = 0; na < h; na++){
                            var wa = g[na], db = wa.Da;
                            if (b) {
                                0 < n && 0 < G && S + p + db.width > n && (S < f && Ju(a1, k, f - S, 0, ca, na - 1), I++, G = 0, ca = na, z = y, S = 0, R = 135 < e ? -y - r : y + r);
                                Ku(this, wa, 0, R);
                                var gb = 0;
                                if (0 === G) {
                                    if (A = wa.Xo, B = wa.jp, D = db.width, M = db.height, null === A || null === B || e !== Du(wa)) A = Iu(this, 2), B = Iu(this, 2), A[0].h(0, 0), A[1].h(0, M), B[0].h(D, 0), B[1].h(D, M);
                                } else {
                                    var Db = Ea();
                                    M = Lu(this, a1, wa, A, B, D, M, Db);
                                    gb = M.x;
                                    A = Db[0];
                                    B = Db[1];
                                    D = M.width;
                                    M = M.height;
                                    Ga(Db);
                                    S < db.width && 0 > gb && (Mu(a1, -gb, 0, ca, na - 1), Nu(A, -gb, 0), Nu(B, -gb, 0), gb = 0);
                                }
                                wa.S.h(gb, R);
                                v = Math.max(v, D);
                                y = Math.max(y, z + (0 === I ? 0 : r) + db.height);
                                S = D;
                            } else {
                                0 < n && 0 < G && R + p + db.height > n && (R < f && Ju(a1, k, 0, f - R, ca, na - 1), I++, G = 0, ca = na, z = v, R = 0, S = 135 < e ? -v - r : v + r);
                                Ku(this, wa, S, 0);
                                gb = 0;
                                if (0 === G) {
                                    if (A = wa.Xo, B = wa.jp, D = db.width, M = db.height, null === A || null === B || e !== Du(wa)) A = Iu(this, 2), B = Iu(this, 2), A[0].h(0, 0), A[1].h(D, 0), B[0].h(0, M), B[1].h(D, M);
                                } else Db = Ea(), M = Lu(this, a1, wa, A, B, D, M, Db), gb = M.x, A = Db[0], B = Db[1], D = M.width, M = M.height, Ga(Db), R < db.height && 0 > gb && (Mu(a1, 0, -gb, ca, na - 1), Nu(A, 0, -gb), Nu(B, 0, -gb), gb = 0);
                                wa.S.h(S, gb);
                                y = Math.max(y, M);
                                v = Math.max(v, z + (0 === I ? 0 : r) + db.width);
                                R = M;
                            }
                            G++;
                        }
                        0 < I && (b ? (y += Math.max(0, c), S < v && Ju(a1, k, v - S, 0, ca, h - 1), 0 < u && (l || Mu(a1, u, 0, 0, h - 1), v += u)) : (v += Math.max(0, c), R < y && Ju(a1, k, 0, y - R, ca, h - 1), 0 < u && (l || Mu(a1, 0, u, 0, h - 1), y += u)));
                        u = l = 0;
                        switch(k){
                            case Ou:
                                b ? l += v / 2 - a1.focus.x - q / 2 : u += y / 2 - a1.focus.y - q / 2;
                                break;
                            case Pu:
                                0 < I ? b ? l += v / 2 - a1.focus.x - q / 2 : u += y / 2 - a1.focus.y - q / 2 : b ? (X = g[0].S.x + g[0].la.x, l += X + (g[h - 1].S.x + g[h - 1].la.x + 2 * g[h - 1].focus.x - X) / 2 - a1.focus.x - q / 2) : (X = g[0].S.y + g[0].la.y, u += X + (g[h - 1].S.y + g[h - 1].la.y + 2 * g[h - 1].focus.y - X) / 2 - a1.focus.y - q / 2);
                                break;
                            case Eu:
                                b ? (l -= q, v += q) : (u -= q, y += q);
                                break;
                            case Fu:
                                b ? (l += v - a1.width + q, v += q) : (u += y - a1.height + q, y += q);
                                break;
                            case vu:
                                b ? 1 < h ? l += X + p / 2 - a1.focus.x : l += g[0].focus.x - a1.focus.x + g[0].la.x : 1 < h ? u += X + p / 2 - a1.focus.y : u += g[0].focus.y - a1.focus.y + g[0].la.y;
                                break;
                            case wu:
                                b ? l += v + p / 2 - a1.focus.x : u += y + p / 2 - a1.focus.y;
                                break;
                            case xu:
                                break;
                            default:
                                y = this.customAlignment(a1, l, u, v, y), l = y[0], u = y[1], v = y[2], y = y[3];
                        }
                        for(q = 0; q < h; q++)X = g[q], b ? X.S.h(X.S.x + X.la.x - l, X.S.y + (135 < e ? (m ? -y : -X.Da.height) + X.la.y - c : w + c + X.la.y)) : X.S.h(X.S.x + (135 < e ? (m ? -v : -X.Da.width) + X.la.x - c : d + c + X.la.x), X.S.y + X.la.y - u);
                        h = g = 0;
                        m ? b ? (v = Qu(a1, v, l), 0 > l && (l = 0), 135 < e && (u += y + c), y += w + c, k === xu && (g += p / 2 + a1.focus.x), h += w + c) : (135 < e && (l += v + c), v += d + c, y = Ru(a1, y, u), 0 > u && (u = 0), k === xu && (h += p / 2 + a1.focus.y), g += d + c) : b ? (null === a1.comments ? d > v && (v = Su(k, d - v, 0), g = v.x, h = v.y, v = d, l = 0) : v = Qu(a1, v, l), 0 > l && (g -= l, l = 0), 135 < e && (u += y + c), y = Math.max(Math.max(y, w), y + w + c), h += w + c) : (135 < e && (l += v + c), v = Math.max(Math.max(v, d), v + d + c), null === a1.comments ? w > y && (y = Su(k, 0, w - y), g = y.x, h = y.y, y = w, u = 0) : y = Ru(a1, y, u), 0 > u && (h -= u, u = 0), g += d + c);
                        if (0 < I) e = Iu(this, 4), I = Iu(this, 4), b ? (e[2].h(0, w + c), e[3].h(e[2].x, y), I[2].h(v, e[2].y), I[3].h(I[2].x, e[3].y)) : (e[2].h(d + c, 0), e[3].h(v, e[2].y), I[2].h(e[2].x, y), I[3].h(e[3].x, I[2].y));
                        else {
                            e = Iu(this, A.length + 2);
                            I = Iu(this, B.length + 2);
                            for(k = 0; k < A.length; k++)m = A[k], e[k + 2].h(m.x + g, m.y + h);
                            for(k = 0; k < B.length; k++)m = B[k], I[k + 2].h(m.x + g, m.y + h);
                        }
                        b ? (e[0].h(l, 0), e[1].h(e[0].x, w), e[2].y < e[1].y && (e[2].x > e[0].x ? e[2].assign(e[1]) : e[1].assign(e[2])), e[3].y < e[2].y && (e[3].x > e[0].x ? e[3].assign(e[2]) : e[2].assign(e[3])), I[0].h(l + d, 0), I[1].h(I[0].x, w), I[2].y < I[1].y && (I[2].x < I[0].x ? I[2].assign(I[1]) : I[1].assign(I[2])), I[3].y < I[2].y && (I[3].x < I[0].x ? I[3].assign(I[2]) : I[2].assign(I[3])), e[2].y -= c / 2, I[2].y -= c / 2) : (e[0].h(0, u), e[1].h(d, e[0].y), e[2].x < e[1].x && (e[2].y > e[0].y ? e[2].assign(e[1]) : e[1].assign(e[2])), e[3].x < e[2].x && (e[3].y > e[0].y ? e[3].assign(e[2]) : e[2].assign(e[3])), I[0].h(0, u + w), I[1].h(d, I[0].y), I[2].x < I[1].x && (I[2].y < I[0].y ? I[2].assign(I[1]) : I[1].assign(I[2])), I[3].x < I[2].x && (I[3].y < I[0].y ? I[3].assign(I[2]) : I[2].assign(I[3])), e[2].x -= c / 2, I[2].x -= c / 2);
                        Tu(this, A);
                        Tu(this, B);
                        a1.Xo = e;
                        a1.jp = I;
                        a1.la.h(l, u);
                        a1.Da.h(v, y);
                    }
                    break;
                default:
                    C("Unhandled compaction value " + a1.compaction.toString());
            }
        }
    };
    function Bu(a1, b) {
        if (0 === b.childrenCount) {
            var c = !1, d = 0;
            null !== b.parent && (d = b.parent.angle, c = b.parent.alignment, c = su(c));
            var e = zu(b);
            b.S.h(0, 0);
            b.Da.h(b.width, b.height);
            null === b.parent || null === b.comments || (180 !== d && 270 !== d || c) && !e ? b.la.h(0, 0) : 180 === d && !c || (90 === d || 270 === d) && e ? b.la.h(b.width - 2 * b.focus.x, 0) : b.la.h(0, b.height - 2 * b.focus.y);
        } else {
            d = Du(b);
            c = 90 === d || 270 === d;
            var f = 0;
            e = b.children;
            for(var g = e.length, h = 0; h < g; h++){
                var k = e[h];
                f = Math.max(f, c ? k.Da.width : k.Da.height);
            }
            var l = b.alignment, m = l === Eu, n = l === Fu;
            h = su(l);
            var p = Math.max(0, b.breadthLimit);
            k = a1.computeLayerSpacing(b);
            var q = b.nodeSpacing, r = a1.computeNodeIndent(b), u = m || n ? 0 : r / 2, w = b.rowSpacing, v = 0;
            if (m || n || b.gm || b.hm && 1 === b.maxGenerationCount) v = Math.max(0, b.rowIndent);
            m = b.width;
            var y = b.height, z = 0, A = 0, B = 0, D = 0, M = 0, S = 0, R = 0, I = 0, G = 0, ca = 0;
            h && !yu(l) && 135 < d && e.reverse();
            if (yu(l)) {
                if (1 < g) for(var X = 0; X < g; X++){
                    var na = e[X], wa = na.Da;
                    0 === X % 2 && X !== g - 1 ? G = Math.max(G, (c ? wa.width : wa.height) + a1.computeBusNodeSpacing(na) - q) : 0 !== X % 2 && (ca = Math.max(ca, (c ? wa.width : wa.height) + a1.computeBusNodeSpacing(na) - q));
                }
                else 1 === g && (G = c ? e[0].Da.width : e[0].Da.height);
            }
            if (h) switch(l){
                case vu:
                case ju:
                    A = 135 > d ? Gu(a1, b, e, G, z, A) : Hu(a1, b, e, G, z, A);
                    G = A.x;
                    z = A.width;
                    A = A.height;
                    break;
                case wu:
                    for(p = 0; p < g; p++)u = e[p], B = u.Da, ca = 0 === R ? 0 : w, c ? (u.S.h(f - B.width, M + ca), z = Math.max(z, B.width), A = Math.max(A, M + ca + B.height), M += ca + B.height) : (u.S.h(D + ca, f - B.height), z = Math.max(z, D + ca + B.width), A = Math.max(A, B.height), D += ca + B.width), R++;
                    break;
                case xu:
                    for(f = 0; f < g; f++)p = e[f], u = p.Da, B = 0 === R ? 0 : w, c ? (p.S.h(q / 2 + b.focus.x, M + B), z = Math.max(z, u.width), A = Math.max(A, M + B + u.height), M += B + u.height) : (p.S.h(D + B, q / 2 + b.focus.y), z = Math.max(z, D + B + u.width), A = Math.max(A, u.height), D += B + u.width), R++;
            }
            else for(ca = 0; ca < g; ca++)X = e[ca], na = X.Da, c ? (0 < p && 0 < R && D + q + na.width > p && (D < f && Ju(b, l, f - D, 0, I, ca - 1), S++, R = 0, I = ca, B = A, D = 0, M = 135 < d ? -A - w : A + w), wa = 0 === R ? u : q, Ku(a1, X, 0, M), X.S.h(D + wa, M), z = Math.max(z, D + wa + na.width), A = Math.max(A, B + (0 === S ? 0 : w) + na.height), D += wa + na.width) : (0 < p && 0 < R && M + q + na.height > p && (M < f && Ju(b, l, 0, f - M, I, ca - 1), S++, R = 0, I = ca, B = z, M = 0, D = 135 < d ? -z - w : z + w), wa = 0 === R ? u : q, Ku(a1, X, D, 0), X.S.h(D, M + wa), A = Math.max(A, M + wa + na.height), z = Math.max(z, B + (0 === S ? 0 : w) + na.width), M += wa + na.height), R++;
            0 < S && (c ? (A += Math.max(0, k), D < z && Ju(b, l, z - D, 0, I, g - 1), 0 < v && (n || Mu(b, v, 0, 0, g - 1), z += v)) : (z += Math.max(0, k), M < A && Ju(b, l, 0, A - M, I, g - 1), 0 < v && (n || Mu(b, 0, v, 0, g - 1), A += v)));
            v = n = 0;
            switch(l){
                case Ou:
                    c ? n += z / 2 - b.focus.x - r / 2 : v += A / 2 - b.focus.y - r / 2;
                    break;
                case Pu:
                    0 < S ? c ? n += z / 2 - b.focus.x - r / 2 : v += A / 2 - b.focus.y - r / 2 : c ? (a1 = e[0].S.x + e[0].la.x, n += a1 + (e[g - 1].S.x + e[g - 1].la.x + 2 * e[g - 1].focus.x - a1) / 2 - b.focus.x - r / 2) : (a1 = e[0].S.y + e[0].la.y, v += a1 + (e[g - 1].S.y + e[g - 1].la.y + 2 * e[g - 1].focus.y - a1) / 2 - b.focus.y - r / 2);
                    break;
                case Eu:
                    c ? (n -= r, z += r) : (v -= r, A += r);
                    break;
                case Fu:
                    c ? (n += z - b.width + r, z += r) : (v += A - b.height + r, A += r);
                    break;
                case vu:
                case ju:
                    c ? 1 < g ? n += G + q / 2 - b.focus.x : n += e[0].focus.x - b.focus.x + e[0].la.x : 1 < g ? v += G + q / 2 - b.focus.y : v += e[0].focus.y - b.focus.y + e[0].la.y;
                    break;
                case wu:
                    c ? n += z + q / 2 - b.focus.x : v += A + q / 2 - b.focus.y;
                    break;
                case xu:
                    break;
                default:
                    a1 = a1.customAlignment(b, n, v, z, A), n = a1[0], v = a1[1], z = a1[2], A = a1[3];
            }
            for(a1 = 0; a1 < g; a1++)r = e[a1], c ? r.S.h(r.S.x + r.la.x - n, r.S.y + (135 < d ? (h ? -A : -r.Da.height) + r.la.y - k : y + k + r.la.y)) : r.S.h(r.S.x + (135 < d ? (h ? -z : -r.Da.width) + r.la.x - k : m + k + r.la.x), r.S.y + r.la.y - v);
            c ? (z = Qu(b, z, n), 0 > n && (n = 0), 135 < d && (v += A + k), A = Math.max(Math.max(A, y), A + y + k)) : (135 < d && (n += z + k), z = Math.max(Math.max(z, m), z + m + k), A = Ru(b, A, v), 0 > v && (v = 0));
            b.la.h(n, v);
            b.Da.h(z, A);
        }
    }
    Rt.prototype.customAlignment = function(a1, b, c, d, e) {
        return [
            b,
            c,
            d,
            e
        ];
    };
    function Gu(a1, b, c, d, e, f) {
        var g = c.length;
        if (0 === g) return new N(d, 0, e, f);
        if (1 === g) return b = c[0], e = b.Da.width, f = b.Da.height, new N(d, 0, e, f);
        for(var h = b.nodeSpacing, k = b.rowSpacing, l = 90 === Du(b), m = 0, n = 0, p = 0, q = 0; q < g; q++)if (!(0 !== q % 2 || 1 < g && q === g - 1)) {
            var r = c[q], u = r.Da, w = 0 === m ? 0 : k;
            if (l) {
                var v = a1.computeBusNodeSpacing(r) - h;
                r.S.h(d - (u.width + v), p + w);
                e = Math.max(e, u.width + v);
                f = Math.max(f, p + w + u.height);
                p += w + u.height;
            } else v = a1.computeBusNodeSpacing(r) - h, r.S.h(n + w, d - (u.height + v)), f = Math.max(f, u.height + v), e = Math.max(e, n + w + u.width), n += w + u.width;
            m++;
        }
        m = 0;
        r = n;
        q = p;
        l ? (n = d + h, p = 0) : (n = 0, p = d + h);
        for(u = 0; u < g; u++)if (0 !== u % 2) {
            w = c[u];
            v = w.Da;
            var y = 0 === m ? 0 : k;
            if (l) {
                var z = a1.computeBusNodeSpacing(w) - h;
                w.S.h(n + z, p + y);
                e = Math.max(e, n + v.width + z);
                f = Math.max(f, p + y + v.height);
                p += y + v.height;
            } else z = a1.computeBusNodeSpacing(w) - h, w.S.h(n + y, p + z), e = Math.max(e, n + y + v.width), f = Math.max(f, p + v.height + z), n += y + v.width;
            m++;
        }
        1 < g && 1 === g % 2 && (c = c[g - 1], g = c.Da, a1 = a1.computeBusLastRowSpacing(c, l ? Math.max(Math.abs(q), Math.abs(p)) : Math.max(Math.abs(r), Math.abs(n))), l ? (c.S.h(d + h / 2 - c.focus.x - c.la.x, f + a1), l = d + h / 2 - c.focus.x - c.la.x, e = Math.max(e, l + g.width), 0 > l && (e -= l), f = Math.max(f, Math.max(q, p) + a1 + g.height), 0 > c.S.x && (d = Uu(b, c.S.x, !1, d, h))) : (c.S.h(e + a1, d + h / 2 - c.focus.y - c.la.y), e = Math.max(e, Math.max(r, n) + a1 + g.width), p = d + h / 2 - c.focus.y - c.la.y, f = Math.max(f, p + g.height), 0 > p && (f -= p), 0 > c.S.y && (d = Uu(b, c.S.y, !0, d, h))));
        return new N(d, 0, e, f);
    }
    function Hu(a1, b, c, d, e, f) {
        var g = c.length;
        if (0 === g) return new N(d, 0, e, f);
        if (1 === g) return c = c[0], e = c.Da.width, f = c.Da.height, new N(d, 0, e, f);
        for(var h = b.nodeSpacing, k = b.rowSpacing, l = 270 === Du(b), m = 0, n = 0, p = 0, q = 0; q < g; q++)if (!(0 !== q % 2 || 1 < g && q === g - 1)) {
            var r = c[q], u = r.Da, w = 0 === m ? 0 : k;
            if (l) {
                var v = a1.computeBusNodeSpacing(r) - h;
                p -= w + u.height;
                r.S.h(d - (u.width + v), p);
                e = Math.max(e, u.width + v);
                f = Math.max(f, Math.abs(p));
            } else v = a1.computeBusNodeSpacing(r) - h, n -= w + u.width, r.S.h(n, d - (u.height + v)), f = Math.max(f, u.height + v), e = Math.max(e, Math.abs(n));
            m++;
        }
        m = 0;
        r = n;
        q = p;
        l ? (n = d + h, p = 0) : (n = 0, p = d + h);
        for(u = 0; u < g; u++)if (0 !== u % 2) {
            w = c[u];
            v = w.Da;
            var y = 0 === m ? 0 : k;
            if (l) {
                var z = a1.computeBusNodeSpacing(w) - h;
                p -= y + v.height;
                w.S.h(n + z, p);
                e = Math.max(e, n + v.width + z);
                f = Math.max(f, Math.abs(p));
            } else z = a1.computeBusNodeSpacing(w) - h, n -= y + v.width, w.S.h(n, p + z), f = Math.max(f, p + v.height + z), e = Math.max(e, Math.abs(n));
            m++;
        }
        1 < g && 1 === g % 2 && (k = c[g - 1], m = k.Da, a1 = a1.computeBusLastRowSpacing(k, l ? Math.max(Math.abs(q), Math.abs(p)) : Math.max(Math.abs(r), Math.abs(n))), l ? (k.S.h(d + h / 2 - k.focus.x - k.la.x, -f - m.height - a1), n = d + h / 2 - k.focus.x - k.la.x, e = Math.max(e, n + m.width), 0 > n && (e -= n), f = Math.max(f, Math.abs(Math.min(q, p)) + a1 + m.height), 0 > k.S.x && (d = Uu(b, k.S.x, !1, d, h))) : (k.S.h(-e - m.width - a1, d + h / 2 - k.focus.y - k.la.y), e = Math.max(e, Math.abs(Math.min(r, n)) + a1 + m.width), p = d + h / 2 - k.focus.y - k.la.y, f = Math.max(f, p + m.height), 0 > p && (f -= p), 0 > k.S.y && (d = Uu(b, k.S.y, !0, d, h))));
        for(b = 0; b < g; b++)h = c[b], l ? h.S.h(h.S.x, h.S.y + f) : h.S.h(h.S.x + e, h.S.y);
        return new N(d, 0, e, f);
    }
    Rt.prototype.computeBusNodeSpacing = function(a1) {
        return null === a1.parent ? 0 : a1.parent.nodeSpacing;
    };
    Rt.prototype.computeBusLastRowSpacing = function(a1) {
        return null === a1.parent ? 0 : a1.parent.rowSpacing;
    };
    function Uu(a1, b, c, d, e) {
        a1 = a1.children;
        for(var f = a1.length, g = 0; g < f; g++)c ? a1[g].S.h(a1[g].S.x, a1[g].S.y - b) : a1[g].S.h(a1[g].S.x - b, a1[g].S.y);
        b = a1[f - 1];
        return Math.max(d, c ? b.la.y + b.focus.y - e / 2 : b.la.x + b.focus.x - e / 2);
    }
    function Qu(a1, b, c) {
        switch(a1.alignment){
            case Pu:
            case Ou:
                return c + a1.width > b && (b = c + a1.width), 0 > c && (b -= c), b;
            case Eu:
                return a1.width > b ? a1.width : b;
            case Fu:
                return 2 * a1.focus.x > b ? a1.width : b + a1.width - 2 * a1.focus.x;
            case vu:
            case ju:
                return Math.max(a1.width, Math.max(b, c + a1.width) - Math.min(0, c));
            case wu:
                return a1.width - a1.focus.x + a1.nodeSpacing / 2 + b;
            case xu:
                return Math.max(a1.width, a1.focus.x + a1.nodeSpacing / 2 + b);
            default:
                return b;
        }
    }
    function Ru(a1, b, c) {
        switch(a1.alignment){
            case Pu:
            case Ou:
                return c + a1.height > b && (b = c + a1.height), 0 > c && (b -= c), b;
            case Eu:
                return a1.height > b ? a1.height : b;
            case Fu:
                return 2 * a1.focus.y > b ? a1.height : b + a1.height - 2 * a1.focus.y;
            case vu:
            case ju:
                return Math.max(a1.height, Math.max(b, c + a1.height) - Math.min(0, c));
            case wu:
                return a1.height - a1.focus.y + a1.nodeSpacing / 2 + b;
            case xu:
                return Math.max(a1.height, a1.focus.y + a1.nodeSpacing / 2 + b);
            default:
                return b;
        }
    }
    function Su(a1, b, c) {
        switch(a1){
            case Ou:
                b /= 2;
                c /= 2;
                break;
            case Pu:
                b /= 2;
                c /= 2;
                break;
            case Eu:
                c = b = 0;
                break;
            case Fu:
                break;
            default:
                C("Unhandled alignment value " + a1.toString());
        }
        return new J(b, c);
    }
    function Ju(a1, b, c, d, e, f) {
        b = Su(b, c, d);
        Mu(a1, b.x, b.y, e, f);
    }
    function Mu(a1, b, c, d, e) {
        if (0 !== b || 0 !== c) for(a1 = a1.children; d <= e; d++){
            var f = a1[d].S;
            f.x += b;
            f.y += c;
        }
    }
    function Ku(a1, b, c, d) {
        var e = b.parent;
        switch(a1.ud){
            case Tt:
                for(a1 = b.sourceEdges; a1.next();)b = a1.value, b.fromVertex === e && b.relativePoint.h(c, d);
                break;
            case $t:
                for(a1 = b.destinationEdges; a1.next();)b = a1.value, b.toVertex === e && b.relativePoint.h(c, d);
                break;
            default:
                C("Unhandled path value " + a1.ud.toString());
        }
    }
    function Nu(a1, b, c) {
        for(var d = 0; d < a1.length; d++){
            var e = a1[d];
            e.x += b;
            e.y += c;
        }
    }
    function Lu(a1, b, c, d, e, f, g, h) {
        var k = Du(b), l = 90 === k || 270 === k, m = b.nodeSpacing;
        b = d;
        var n = e;
        d = f;
        var p = g, q = c.Xo, r = c.jp;
        g = c.Da;
        var u = l ? Math.max(p, g.height) : Math.max(d, g.width);
        if (null === q || k !== Du(c)) q = Iu(a1, 2), r = Iu(a1, 2), l ? (q[0].h(0, 0), q[1].h(0, g.height), r[0].h(g.width, 0), r[1].h(r[0].x, q[1].y)) : (q[0].h(0, 0), q[1].h(g.width, 0), r[0].h(0, g.height), r[1].h(q[1].x, r[0].y));
        if (l) {
            p = 9999999;
            if (!(null === n || 2 > n.length || null === q || 2 > q.length)) for(e = c = 0; c < n.length && e < q.length;){
                f = n[c];
                var w = q[e];
                k = w.x;
                l = w.y;
                k += d;
                var v = f;
                c + 1 < n.length && (v = n[c + 1]);
                var y = w;
                w = y.x;
                y = y.y;
                e + 1 < q.length && (y = q[e + 1], w = y.x, y = y.y, w += d);
                var z = p;
                f.y === l ? z = k - f.x : f.y > l && f.y < y ? z = k + (f.y - l) / (y - l) * (w - k) - f.x : l > f.y && l < v.y && (z = k - (f.x + (l - f.y) / (v.y - f.y) * (v.x - f.x)));
                z < p && (p = z);
                v.y <= f.y ? c++ : y <= l ? e++ : (v.y <= y && c++, y <= v.y && e++);
            }
            p = d - p;
            p += m;
            c = q;
            e = p;
            if (null === b || 2 > b.length || null === c || 2 > c.length) d = null;
            else {
                m = Iu(a1, b.length + c.length);
                for(d = f = k = 0; f < c.length && c[f].y < b[0].y;)l = c[f++], m[d++].h(l.x + e, l.y);
                for(; k < b.length;)l = b[k++], m[d++].h(l.x, l.y);
                for(k = b[b.length - 1].y; f < c.length && c[f].y <= k;)f++;
                for(; f < c.length && c[f].y > k;)l = c[f++], m[d++].h(l.x + e, l.y);
                c = Iu(a1, d);
                for(k = 0; k < d; k++)c[k].assign(m[k]);
                Tu(a1, m);
                d = c;
            }
            f = r;
            k = p;
            if (null === n || 2 > n.length || null === f || 2 > f.length) e = null;
            else {
                m = Iu(a1, n.length + f.length);
                for(e = l = c = 0; c < n.length && n[c].y < f[0].y;)v = n[c++], m[e++].h(v.x, v.y);
                for(; l < f.length;)v = f[l++], m[e++].h(v.x + k, v.y);
                for(f = f[f.length - 1].y; c < n.length && n[c].y <= f;)c++;
                for(; c < n.length && n[c].y > f;)k = n[c++], m[e++].h(k.x, k.y);
                f = Iu(a1, e);
                for(c = 0; c < e; c++)f[c].assign(m[c]);
                Tu(a1, m);
                e = f;
            }
            f = Math.max(0, p) + g.width;
            g = u;
            Tu(a1, b);
            Tu(a1, q);
            Tu(a1, n);
            Tu(a1, r);
            h[0] = d;
            h[1] = e;
            return new N(p, 0, f, g);
        }
        d = 9999999;
        if (!(null === n || 2 > n.length || null === q || 2 > q.length)) for(e = c = 0; c < n.length && e < q.length;)f = n[c], w = q[e], k = w.x, l = w.y, l += p, v = f, c + 1 < n.length && (v = n[c + 1]), y = w, w = y.x, y = y.y, e + 1 < q.length && (y = q[e + 1], w = y.x, y = y.y, y += p), z = d, f.x === k ? z = l - f.y : f.x > k && f.x < w ? z = l + (f.x - k) / (w - k) * (y - l) - f.y : k > f.x && k < v.x && (z = l - (f.y + (k - f.x) / (v.x - f.x) * (v.y - f.y))), z < d && (d = z), v.x <= f.x ? c++ : w <= k ? e++ : (v.x <= w && c++, w <= v.x && e++);
        p -= d;
        p += m;
        c = q;
        e = p;
        if (null === b || 2 > b.length || null === c || 2 > c.length) d = null;
        else {
            m = Iu(a1, b.length + c.length);
            for(d = f = k = 0; f < c.length && c[f].x < b[0].x;)l = c[f++], m[d++].h(l.x, l.y + e);
            for(; k < b.length;)l = b[k++], m[d++].h(l.x, l.y);
            for(k = b[b.length - 1].x; f < c.length && c[f].x <= k;)f++;
            for(; f < c.length && c[f].x > k;)l = c[f++], m[d++].h(l.x, l.y + e);
            c = Iu(a1, d);
            for(k = 0; k < d; k++)c[k].assign(m[k]);
            Tu(a1, m);
            d = c;
        }
        f = r;
        k = p;
        if (null === n || 2 > n.length || null === f || 2 > f.length) e = null;
        else {
            m = Iu(a1, n.length + f.length);
            for(e = l = c = 0; c < n.length && n[c].x < f[0].x;)v = n[c++], m[e++].h(v.x, v.y);
            for(; l < f.length;)v = f[l++], m[e++].h(v.x, v.y + k);
            for(f = f[f.length - 1].x; c < n.length && n[c].x <= f;)c++;
            for(; c < n.length && n[c].x > f;)k = n[c++], m[e++].h(k.x, k.y);
            f = Iu(a1, e);
            for(c = 0; c < e; c++)f[c].assign(m[c]);
            Tu(a1, m);
            e = f;
        }
        f = u;
        g = Math.max(0, p) + g.height;
        Tu(a1, b);
        Tu(a1, q);
        Tu(a1, n);
        Tu(a1, r);
        h[0] = d;
        h[1] = e;
        return new N(p, 0, f, g);
    }
    function Iu(a1, b) {
        a1 = a1.qu[b];
        if (void 0 !== a1 && (a1 = a1.pop(), void 0 !== a1)) return a1;
        a1 = [];
        for(var c = 0; c < b; c++)a1[c] = new J;
        return a1;
    }
    function Tu(a1, b) {
        var c = b.length, d = a1.qu[c];
        void 0 === d && (d = [], a1.qu[c] = d);
        d.push(b);
    }
    Rt.prototype.arrangeTrees = function() {
        if (this.Sb === Zt) for(var a1 = this.Vb.iterator; a1.next();){
            var b = a1.value;
            if (b instanceof Yt) {
                var c = b.node;
                if (null !== c) {
                    var d = c.position;
                    c = d.x;
                    d = d.y;
                    isFinite(c) || (c = 0);
                    isFinite(d) || (d = 0);
                    Vu(this, b, c, d);
                }
            }
        }
        else {
            a1 = [];
            for(b = this.Vb.iterator; b.next();)c = b.value, c instanceof Yt && a1.push(c);
            switch(this.sorting){
                case ou:
                    break;
                case pu:
                    a1.reverse();
                    break;
                case qu:
                    a1.sort(this.comparer);
                    break;
                case ru:
                    a1.sort(this.comparer);
                    a1.reverse();
                    break;
                default:
                    C("Unhandled sorting value " + this.sorting.toString());
            }
            c = this.arrangementOrigin;
            b = c.x;
            c = c.y;
            for(d = 0; d < a1.length; d++){
                var e = a1[d];
                Vu(this, e, b + e.la.x, c + e.la.y);
                switch(this.Sb){
                    case Wt:
                        c += e.Da.height + this.$d.height;
                        break;
                    case Wu:
                        b += e.Da.width + this.$d.width;
                        break;
                    default:
                        C("Unhandled arrangement value " + this.Sb.toString());
                }
            }
        }
    };
    function Vu(a1, b, c, d) {
        if (null !== b) {
            b.x = c;
            b.y = d;
            b = b.children;
            for(var e = b.length, f = 0; f < e; f++){
                var g = b[f];
                Vu(a1, g, c + g.S.x, d + g.S.y);
            }
        }
    }
    Rt.prototype.commitLayout = function() {
        this.yv();
        this.commitNodes();
        this.Gu();
        this.isRouting && this.commitLinks();
    };
    Rt.prototype.commitNodes = function() {
        for(var a1 = this.network.vertexes.iterator; a1.next();)a1.value.commit();
        for(a1.reset(); a1.next();)this.layoutComments(a1.value);
    };
    Rt.prototype.Gu = function() {
        if (this.layerStyle === gu) {
            for(var a1 = this.$v, b = [], c = null, d = this.network.vertexes.iterator; d.next();){
                var e = d.value;
                null === c ? c = e.bounds.copy() : c.ed(e.bounds);
                var f = b[e.level];
                void 0 === f ? f = this.computeLayerSpacing(e) : f = Math.max(f, this.computeLayerSpacing(e));
                b[e.level] = f;
            }
            for(d = 0; d < b.length; d++)void 0 === b[d] && (b[d] = 0);
            90 === this.angle || 270 === this.angle ? (c.Bc(this.nodeSpacing / 2, this.layerSpacing), d = new J(-this.nodeSpacing / 2, -this.layerSpacing / 2)) : (c.Bc(this.layerSpacing, this.nodeSpacing / 2), d = new J(-this.layerSpacing / 2, -this.nodeSpacing / 2));
            e = [];
            c = 90 === this.angle || 270 === this.angle ? c.width : c.height;
            f = 0;
            if (180 === this.angle || 270 === this.angle) for(var g = 0; g < a1.length; g++)f += a1[g] + b[g];
            for(g = 0; g < a1.length; g++){
                var h = a1[g] + b[g];
                270 === this.angle ? (f -= h, e.push(new N(0, f, c, h))) : 90 === this.angle ? (e.push(new N(0, f, c, h)), f += h) : 180 === this.angle ? (f -= h, e.push(new N(f, 0, h, c))) : (e.push(new N(f, 0, h, c)), f += h);
            }
            this.commitLayers(e, d);
        }
    };
    Rt.prototype.commitLayers = function() {};
    Rt.prototype.commitLinks = function() {
        for(var a1 = this.network.edges.iterator; a1.next();)a1.value.commit();
    };
    Rt.prototype.yv = function() {
        for(var a1 = this.Vb.iterator; a1.next();){
            var b = a1.value;
            b instanceof Yt && Xu(this, b);
        }
    };
    function Xu(a1, b) {
        if (null !== b) {
            a1.setPortSpots(b);
            b = b.children;
            for(var c = b.length, d = 0; d < c; d++)Xu(a1, b[d]);
        }
    }
    Rt.prototype.setPortSpots = function(a1) {
        var b = a1.alignment;
        if (su(b)) {
            var c = this.ud === Tt, d = Du(a1);
            switch(d){
                case 0:
                    var e = bd;
                    break;
                case 90:
                    e = cd;
                    break;
                case 180:
                    e = ad;
                    break;
                default:
                    e = $c;
            }
            var f = a1.children, g = f.length;
            switch(b){
                case vu:
                case ju:
                    for(b = 0; b < g; b++){
                        var h = f[b];
                        h = (c ? h.sourceEdges : h.destinationEdges).first();
                        if (null !== h && (h = h.link, null !== h)) {
                            var k = 90 === d || 270 === d ? ad : $c;
                            if (1 === g || b === g - 1 && 1 === g % 2) switch(d){
                                case 0:
                                    k = ad;
                                    break;
                                case 90:
                                    k = $c;
                                    break;
                                case 180:
                                    k = bd;
                                    break;
                                default:
                                    k = cd;
                            }
                            else 0 === b % 2 && (k = 90 === d || 270 === d ? bd : cd);
                            c ? (a1.setsPortSpot && (h.fromSpot = e), a1.setsChildPortSpot && (h.toSpot = k)) : (a1.setsPortSpot && (h.fromSpot = k), a1.setsChildPortSpot && (h.toSpot = e));
                        }
                    }
                    break;
                case wu:
                    d = 90 === d || 270 === d ? bd : cd;
                    for(f = c ? a1.destinationEdges : a1.sourceEdges; f.next();)g = f.value.link, null !== g && (c ? (a1.setsPortSpot && (g.fromSpot = e), a1.setsChildPortSpot && (g.toSpot = d)) : (a1.setsPortSpot && (g.fromSpot = d), a1.setsChildPortSpot && (g.toSpot = e)));
                    break;
                case xu:
                    for(d = 90 === d || 270 === d ? ad : $c, f = c ? a1.destinationEdges : a1.sourceEdges; f.next();)g = f.value.link, null !== g && (c ? (a1.setsPortSpot && (g.fromSpot = e), a1.setsChildPortSpot && (g.toSpot = d)) : (a1.setsPortSpot && (g.fromSpot = d), a1.setsChildPortSpot && (g.toSpot = e)));
            }
        } else if (c = Du(a1), this.ud === Tt) {
            for(e = a1.destinationEdges; e.next();)if (d = e.value.link, null !== d) {
                if (a1.setsPortSpot) {
                    if (a1.portSpot.Yb()) switch(c){
                        case 0:
                            d.fromSpot = bd;
                            break;
                        case 90:
                            d.fromSpot = cd;
                            break;
                        case 180:
                            d.fromSpot = ad;
                            break;
                        default:
                            d.fromSpot = $c;
                    }
                    else d.fromSpot = a1.portSpot;
                }
                if (a1.setsChildPortSpot) {
                    if (a1.childPortSpot.Yb()) switch(c){
                        case 0:
                            d.toSpot = ad;
                            break;
                        case 90:
                            d.toSpot = $c;
                            break;
                        case 180:
                            d.toSpot = bd;
                            break;
                        default:
                            d.toSpot = cd;
                    }
                    else d.toSpot = a1.childPortSpot;
                }
            }
        } else for(e = a1.sourceEdges; e.next();)if (d = e.value.link, null !== d) {
            if (a1.setsPortSpot) {
                if (a1.portSpot.Yb()) switch(c){
                    case 0:
                        d.toSpot = bd;
                        break;
                    case 90:
                        d.toSpot = cd;
                        break;
                    case 180:
                        d.toSpot = ad;
                        break;
                    default:
                        d.toSpot = $c;
                }
                else d.toSpot = a1.portSpot;
            }
            if (a1.setsChildPortSpot) {
                if (a1.childPortSpot.Yb()) switch(c){
                    case 0:
                        d.fromSpot = ad;
                        break;
                    case 90:
                        d.fromSpot = $c;
                        break;
                    case 180:
                        d.fromSpot = bd;
                        break;
                    default:
                        d.fromSpot = cd;
                }
                else d.fromSpot = a1.childPortSpot;
            }
        }
    };
    function Du(a1) {
        a1 = a1.angle;
        return 45 >= a1 ? 0 : 135 >= a1 ? 90 : 225 >= a1 ? 180 : 315 >= a1 ? 270 : 0;
    }
    Rt.prototype.computeLayerSpacing = function(a1) {
        var b = Du(a1);
        b = 90 === b || 270 === b;
        var c = a1.layerSpacing;
        if (0 < a1.layerSpacingParentOverlap) {
            var d = Math.min(1, a1.layerSpacingParentOverlap);
            c -= b ? a1.height * d : a1.width * d;
        }
        c < (b ? -a1.height : -a1.width) && (c = b ? -a1.height : -a1.width);
        return c;
    };
    Rt.prototype.computeNodeIndent = function(a1) {
        var b = Du(a1), c = a1.nodeIndent;
        if (0 < a1.nodeIndentPastParent) {
            var d = Math.min(1, a1.nodeIndentPastParent);
            c += 90 === b || 270 === b ? a1.width * d : a1.height * d;
        }
        return c = Math.max(0, c);
    };
    ma.Object.defineProperties(Rt.prototype, {
        roots: {
            get: function() {
                return this.Vb;
            },
            set: function(a1) {
                this.Vb !== a1 && (this.Vb = a1, this.C());
            }
        },
        path: {
            get: function() {
                return this.Vn;
            },
            set: function(a1) {
                this.Vn !== a1 && (this.Vn = a1, this.C());
            }
        },
        treeStyle: {
            get: function() {
                return this.uo;
            },
            set: function(a1) {
                this.Sb === a1 || a1 !== Ut && a1 !== mu && a1 !== nu && a1 !== lu || (this.uo = a1, this.C());
            }
        },
        layerStyle: {
            get: function() {
                return this.Aq;
            },
            set: function(a1) {
                this.Sb === a1 || a1 !== Vt && a1 !== hu && a1 !== gu || (this.Aq = a1, this.C());
            }
        },
        comments: {
            get: function() {
                return this.td;
            },
            set: function(a1) {
                this.td !== a1 && (this.td = a1, this.C());
            }
        },
        arrangement: {
            get: function() {
                return this.Sb;
            },
            set: function(a1) {
                this.Sb === a1 || a1 !== Wt && a1 !== Wu && a1 !== Zt || (this.Sb = a1, this.C());
            }
        },
        arrangementSpacing: {
            get: function() {
                return this.$d;
            },
            set: function(a1) {
                this.$d.D(a1) || (this.$d.assign(a1), this.C());
            }
        },
        rootDefaults: {
            get: function() {
                return this.W;
            },
            set: function(a1) {
                this.W !== a1 && (this.W = a1, this.C());
            }
        },
        alternateDefaults: {
            get: function() {
                return this.Y;
            },
            set: function(a1) {
                this.Y !== a1 && (this.Y = a1, this.C());
            }
        },
        sorting: {
            get: function() {
                return this.W.sorting;
            },
            set: function(a1) {
                this.W.sorting === a1 || a1 !== ou && a1 !== pu && a1 !== qu && !ru || (this.W.sorting = a1, this.C());
            }
        },
        comparer: {
            get: function() {
                return this.W.comparer;
            },
            set: function(a1) {
                this.W.comparer !== a1 && (this.W.comparer = a1, this.C());
            }
        },
        angle: {
            get: function() {
                return this.W.angle;
            },
            set: function(a1) {
                this.W.angle !== a1 && (0 === a1 || 90 === a1 || 180 === a1 || 270 === a1 ? (this.W.angle = a1, this.C()) : C("TreeLayout.angle must be 0, 90, 180, or 270"));
            }
        },
        alignment: {
            get: function() {
                return this.W.alignment;
            },
            set: function(a1) {
                this.W.alignment !== a1 && (this.W.alignment = a1, this.C());
            }
        },
        nodeIndent: {
            get: function() {
                return this.W.nodeIndent;
            },
            set: function(a1) {
                this.W.nodeIndent !== a1 && 0 <= a1 && (this.W.nodeIndent = a1, this.C());
            }
        },
        nodeIndentPastParent: {
            get: function() {
                return this.W.nodeIndentPastParent;
            },
            set: function(a1) {
                this.W.nodeIndentPastParent !== a1 && 0 <= a1 && 1 >= a1 && (this.W.nodeIndentPastParent = a1, this.C());
            }
        },
        nodeSpacing: {
            get: function() {
                return this.W.nodeSpacing;
            },
            set: function(a1) {
                this.W.nodeSpacing !== a1 && (this.W.nodeSpacing = a1, this.C());
            }
        },
        layerSpacing: {
            get: function() {
                return this.W.layerSpacing;
            },
            set: function(a1) {
                this.W.layerSpacing !== a1 && (this.W.layerSpacing = a1, this.C());
            }
        },
        layerSpacingParentOverlap: {
            get: function() {
                return this.W.layerSpacingParentOverlap;
            },
            set: function(a1) {
                this.W.layerSpacingParentOverlap !== a1 && 0 <= a1 && 1 >= a1 && (this.W.layerSpacingParentOverlap = a1, this.C());
            }
        },
        compaction: {
            get: function() {
                return this.W.compaction;
            },
            set: function(a1) {
                this.W.compaction === a1 || a1 !== Au && a1 !== Cu || (this.W.compaction = a1, this.C());
            }
        },
        breadthLimit: {
            get: function() {
                return this.W.breadthLimit;
            },
            set: function(a1) {
                this.W.breadthLimit !== a1 && 0 <= a1 && (this.W.breadthLimit = a1, this.C());
            }
        },
        rowSpacing: {
            get: function() {
                return this.W.rowSpacing;
            },
            set: function(a1) {
                this.W.rowSpacing !== a1 && (this.W.rowSpacing = a1, this.C());
            }
        },
        rowIndent: {
            get: function() {
                return this.W.rowIndent;
            },
            set: function(a1) {
                this.W.rowIndent !== a1 && 0 <= a1 && (this.W.rowIndent = a1, this.C());
            }
        },
        commentSpacing: {
            get: function() {
                return this.W.commentSpacing;
            },
            set: function(a1) {
                this.W.commentSpacing !== a1 && (this.W.commentSpacing = a1, this.C());
            }
        },
        commentMargin: {
            get: function() {
                return this.W.commentMargin;
            },
            set: function(a1) {
                this.W.commentMargin !== a1 && (this.W.commentMargin = a1, this.C());
            }
        },
        setsPortSpot: {
            get: function() {
                return this.W.setsPortSpot;
            },
            set: function(a1) {
                this.W.setsPortSpot !== a1 && (this.W.setsPortSpot = a1, this.C());
            }
        },
        portSpot: {
            get: function() {
                return this.W.portSpot;
            },
            set: function(a1) {
                this.W.portSpot.D(a1) || (this.W.portSpot = a1, this.C());
            }
        },
        setsChildPortSpot: {
            get: function() {
                return this.W.setsChildPortSpot;
            },
            set: function(a1) {
                this.W.setsChildPortSpot !== a1 && (this.W.setsChildPortSpot = a1, this.C());
            }
        },
        childPortSpot: {
            get: function() {
                return this.W.childPortSpot;
            },
            set: function(a1) {
                this.W.childPortSpot.D(a1) || (this.W.childPortSpot = a1, this.C());
            }
        },
        alternateSorting: {
            get: function() {
                return this.Y.sorting;
            },
            set: function(a1) {
                this.Y.sorting === a1 || a1 !== ou && a1 !== pu && a1 !== qu && !ru || (this.Y.sorting = a1, this.C());
            }
        },
        alternateComparer: {
            get: function() {
                return this.Y.comparer;
            },
            set: function(a1) {
                this.Y.comparer !== a1 && (this.Y.comparer = a1, this.C());
            }
        },
        alternateAngle: {
            get: function() {
                return this.Y.angle;
            },
            set: function(a1) {
                this.Y.angle === a1 || 0 !== a1 && 90 !== a1 && 180 !== a1 && 270 !== a1 || (this.Y.angle = a1, this.C());
            }
        },
        alternateAlignment: {
            get: function() {
                return this.Y.alignment;
            },
            set: function(a1) {
                this.Y.alignment !== a1 && (this.Y.alignment = a1, this.C());
            }
        },
        alternateNodeIndent: {
            get: function() {
                return this.Y.nodeIndent;
            },
            set: function(a1) {
                this.Y.nodeIndent !== a1 && 0 <= a1 && (this.Y.nodeIndent = a1, this.C());
            }
        },
        alternateNodeIndentPastParent: {
            get: function() {
                return this.Y.nodeIndentPastParent;
            },
            set: function(a1) {
                this.Y.nodeIndentPastParent !== a1 && 0 <= a1 && 1 >= a1 && (this.Y.nodeIndentPastParent = a1, this.C());
            }
        },
        alternateNodeSpacing: {
            get: function() {
                return this.Y.nodeSpacing;
            },
            set: function(a1) {
                this.Y.nodeSpacing !== a1 && (this.Y.nodeSpacing = a1, this.C());
            }
        },
        alternateLayerSpacing: {
            get: function() {
                return this.Y.layerSpacing;
            },
            set: function(a1) {
                this.Y.layerSpacing !== a1 && (this.Y.layerSpacing = a1, this.C());
            }
        },
        alternateLayerSpacingParentOverlap: {
            get: function() {
                return this.Y.layerSpacingParentOverlap;
            },
            set: function(a1) {
                this.Y.layerSpacingParentOverlap !== a1 && 0 <= a1 && 1 >= a1 && (this.Y.layerSpacingParentOverlap = a1, this.C());
            }
        },
        alternateCompaction: {
            get: function() {
                return this.Y.compaction;
            },
            set: function(a1) {
                this.Y.compaction === a1 || a1 !== Au && a1 !== Cu || (this.Y.compaction = a1, this.C());
            }
        },
        alternateBreadthLimit: {
            get: function() {
                return this.Y.breadthLimit;
            },
            set: function(a1) {
                this.Y.breadthLimit !== a1 && 0 <= a1 && (this.Y.breadthLimit = a1, this.C());
            }
        },
        alternateRowSpacing: {
            get: function() {
                return this.Y.rowSpacing;
            },
            set: function(a1) {
                this.Y.rowSpacing !== a1 && (this.Y.rowSpacing = a1, this.C());
            }
        },
        alternateRowIndent: {
            get: function() {
                return this.Y.rowIndent;
            },
            set: function(a1) {
                this.Y.rowIndent !== a1 && 0 <= a1 && (this.Y.rowIndent = a1, this.C());
            }
        },
        alternateCommentSpacing: {
            get: function() {
                return this.Y.commentSpacing;
            },
            set: function(a1) {
                this.Y.commentSpacing !== a1 && (this.Y.commentSpacing = a1, this.C());
            }
        },
        alternateCommentMargin: {
            get: function() {
                return this.Y.commentMargin;
            },
            set: function(a1) {
                this.Y.commentMargin !== a1 && (this.Y.commentMargin = a1, this.C());
            }
        },
        alternateSetsPortSpot: {
            get: function() {
                return this.Y.setsPortSpot;
            },
            set: function(a1) {
                this.Y.setsPortSpot !== a1 && (this.Y.setsPortSpot = a1, this.C());
            }
        },
        alternatePortSpot: {
            get: function() {
                return this.Y.portSpot;
            },
            set: function(a1) {
                this.Y.portSpot.D(a1) || (this.Y.portSpot = a1, this.C());
            }
        },
        alternateSetsChildPortSpot: {
            get: function() {
                return this.Y.setsChildPortSpot;
            },
            set: function(a1) {
                this.Y.setsChildPortSpot !== a1 && (this.Y.setsChildPortSpot = a1, this.C());
            }
        },
        alternateChildPortSpot: {
            get: function() {
                return this.Y.childPortSpot;
            },
            set: function(a1) {
                this.Y.childPortSpot.D(a1) || (this.Y.childPortSpot = a1, this.C());
            }
        }
    });
    var St = new E(Rt, "PathDefault", -1), Tt = new E(Rt, "PathDestination", 0), $t = new E(Rt, "PathSource", 1), ou = new E(Rt, "SortingForwards", 10), pu = new E(Rt, "SortingReverse", 11), qu = new E(Rt, "SortingAscending", 12), ru = new E(Rt, "SortingDescending", 13), Ou = new E(Rt, "AlignmentCenterSubtrees", 20), Pu = new E(Rt, "AlignmentCenterChildren", 21), Eu = new E(Rt, "AlignmentStart", 22), Fu = new E(Rt, "AlignmentEnd", 23), vu = new E(Rt, "AlignmentBus", 24), ju = new E(Rt, "AlignmentBusBranching", 25), wu = new E(Rt, "AlignmentTopLeftBus", 26), xu = new E(Rt, "AlignmentBottomRightBus", 27), Au = new E(Rt, "CompactionNone", 30), Cu = new E(Rt, "CompactionBlock", 31), Ut = new E(Rt, "StyleLayered", 40), nu = new E(Rt, "StyleLastParents", 41), mu = new E(Rt, "StyleAlternating", 42), lu = new E(Rt, "StyleRootOnly", 43), Wt = new E(Rt, "ArrangementVertical", 50), Wu = new E(Rt, "ArrangementHorizontal", 51), Zt = new E(Rt, "ArrangementFixedRoots", 52), Vt = new E(Rt, "LayerIndividual", 60), hu = new E(Rt, "LayerSiblings", 61), gu = new E(Rt, "LayerUniform", 62);
    Rt.className = "TreeLayout";
    Rt.PathDefault = St;
    Rt.PathDestination = Tt;
    Rt.PathSource = $t;
    Rt.SortingForwards = ou;
    Rt.SortingReverse = pu;
    Rt.SortingAscending = qu;
    Rt.SortingDescending = ru;
    Rt.AlignmentCenterSubtrees = Ou;
    Rt.AlignmentCenterChildren = Pu;
    Rt.AlignmentStart = Eu;
    Rt.AlignmentEnd = Fu;
    Rt.AlignmentBus = vu;
    Rt.AlignmentBusBranching = ju;
    Rt.AlignmentTopLeftBus = wu;
    Rt.AlignmentBottomRightBus = xu;
    Rt.CompactionNone = Au;
    Rt.CompactionBlock = Cu;
    Rt.StyleLayered = Ut;
    Rt.StyleLastParents = nu;
    Rt.StyleAlternating = mu;
    Rt.StyleRootOnly = lu;
    Rt.ArrangementVertical = Wt;
    Rt.ArrangementHorizontal = Wu;
    Rt.ArrangementFixedRoots = Zt;
    Rt.LayerIndividual = Vt;
    Rt.LayerSiblings = hu;
    Rt.LayerUniform = gu;
    function Xt(a1) {
        vq.call(this, a1);
    }
    la(Xt, vq);
    Xt.prototype.createVertex = function() {
        return new Yt(this);
    };
    Xt.prototype.createEdge = function() {
        return new Yu(this);
    };
    Xt.className = "TreeNetwork";
    function Yt(a1) {
        yq.call(this, a1);
        this.V = !1;
        this.hb = null;
        this.u = [];
        this.nb = this.Ha = this.F = this.ia = 0;
        this.td = null;
        this.S = new J(0, 0);
        this.Da = new L(0, 0);
        this.la = new J(0, 0);
        this.hm = this.gm = this.qA = !1;
        this.jp = this.Xo = null;
        this.nd = ou;
        this.hd = Fq;
        this.Lb = 0;
        this.Kb = Pu;
        this.Uq = this.Tq = 0;
        this.Vq = 20;
        this.ie = 50;
        this.zq = 0;
        this.Gp = Cu;
        this.zp = 0;
        this.mr = 25;
        this.Fp = this.lr = 10;
        this.Ep = 20;
        this.wr = !0;
        this.cr = Sc;
        this.vr = !0;
        this.Cp = Sc;
    }
    la(Yt, yq);
    Yt.prototype.copyInheritedPropertiesFrom = function(a1) {
        null !== a1 && (this.nd = a1.sorting, this.hd = a1.comparer, this.Lb = a1.angle, this.Kb = a1.alignment, this.Tq = a1.nodeIndent, this.Uq = a1.nodeIndentPastParent, this.Vq = a1.nodeSpacing, this.ie = a1.layerSpacing, this.zq = a1.layerSpacingParentOverlap, this.Gp = a1.compaction, this.zp = a1.breadthLimit, this.mr = a1.rowSpacing, this.lr = a1.rowIndent, this.Fp = a1.commentSpacing, this.Ep = a1.commentMargin, this.wr = a1.setsPortSpot, this.cr = a1.portSpot, this.vr = a1.setsChildPortSpot, this.Cp = a1.childPortSpot);
    };
    ma.Object.defineProperties(Yt.prototype, {
        initialized: {
            get: function() {
                return this.V;
            },
            set: function(a1) {
                this.V !== a1 && (this.V = a1);
            }
        },
        parent: {
            get: function() {
                return this.hb;
            },
            set: function(a1) {
                this.hb !== a1 && (this.hb = a1);
            }
        },
        children: {
            get: function() {
                return this.u;
            },
            set: function(a1) {
                if (this.u !== a1) {
                    if (null !== a1) for(var b = a1.length, c = 0; c < b; c++);
                    this.u = a1;
                }
            }
        },
        level: {
            get: function() {
                return this.ia;
            },
            set: function(a1) {
                this.ia !== a1 && (this.ia = a1);
            }
        },
        descendantCount: {
            get: function() {
                return this.F;
            },
            set: function(a1) {
                this.F !== a1 && (this.F = a1);
            }
        },
        maxChildrenCount: {
            get: function() {
                return this.Ha;
            },
            set: function(a1) {
                this.Ha !== a1 && (this.Ha = a1);
            }
        },
        maxGenerationCount: {
            get: function() {
                return this.nb;
            },
            set: function(a1) {
                this.nb !== a1 && (this.nb = a1);
            }
        },
        comments: {
            get: function() {
                return this.td;
            },
            set: function(a1) {
                if (this.td !== a1) {
                    if (null !== a1) for(var b = a1.length, c = 0; c < b; c++);
                    this.td = a1;
                }
            }
        },
        sorting: {
            get: function() {
                return this.nd;
            },
            set: function(a1) {
                this.nd !== a1 && (this.nd = a1);
            }
        },
        comparer: {
            get: function() {
                return this.hd;
            },
            set: function(a1) {
                this.hd !== a1 && (this.hd = a1);
            }
        },
        angle: {
            get: function() {
                return this.Lb;
            },
            set: function(a1) {
                this.Lb !== a1 && (this.Lb = a1);
            }
        },
        alignment: {
            get: function() {
                return this.Kb;
            },
            set: function(a1) {
                this.Kb !== a1 && (this.Kb = a1);
            }
        },
        nodeIndent: {
            get: function() {
                return this.Tq;
            },
            set: function(a1) {
                this.Tq !== a1 && (this.Tq = a1);
            }
        },
        nodeIndentPastParent: {
            get: function() {
                return this.Uq;
            },
            set: function(a1) {
                this.Uq !== a1 && (this.Uq = a1);
            }
        },
        nodeSpacing: {
            get: function() {
                return this.Vq;
            },
            set: function(a1) {
                this.Vq !== a1 && (this.Vq = a1);
            }
        },
        layerSpacing: {
            get: function() {
                return this.ie;
            },
            set: function(a1) {
                this.ie !== a1 && (this.ie = a1);
            }
        },
        layerSpacingParentOverlap: {
            get: function() {
                return this.zq;
            },
            set: function(a1) {
                this.zq !== a1 && (this.zq = a1);
            }
        },
        compaction: {
            get: function() {
                return this.Gp;
            },
            set: function(a1) {
                this.Gp !== a1 && (this.Gp = a1);
            }
        },
        breadthLimit: {
            get: function() {
                return this.zp;
            },
            set: function(a1) {
                this.zp !== a1 && (this.zp = a1);
            }
        },
        rowSpacing: {
            get: function() {
                return this.mr;
            },
            set: function(a1) {
                this.mr !== a1 && (this.mr = a1);
            }
        },
        rowIndent: {
            get: function() {
                return this.lr;
            },
            set: function(a1) {
                this.lr !== a1 && (this.lr = a1);
            }
        },
        commentSpacing: {
            get: function() {
                return this.Fp;
            },
            set: function(a1) {
                this.Fp !== a1 && (this.Fp = a1);
            }
        },
        commentMargin: {
            get: function() {
                return this.Ep;
            },
            set: function(a1) {
                this.Ep !== a1 && (this.Ep = a1);
            }
        },
        setsPortSpot: {
            get: function() {
                return this.wr;
            },
            set: function(a1) {
                this.wr !== a1 && (this.wr = a1);
            }
        },
        portSpot: {
            get: function() {
                return this.cr;
            },
            set: function(a1) {
                this.cr.D(a1) || (this.cr = a1);
            }
        },
        setsChildPortSpot: {
            get: function() {
                return this.vr;
            },
            set: function(a1) {
                this.vr !== a1 && (this.vr = a1);
            }
        },
        childPortSpot: {
            get: function() {
                return this.Cp;
            },
            set: function(a1) {
                this.Cp.D(a1) || (this.Cp = a1);
            }
        },
        childrenCount: {
            get: function() {
                return this.children.length;
            }
        },
        relativePosition: {
            get: function() {
                return this.S;
            },
            set: function(a1) {
                this.S.set(a1);
            }
        },
        subtreeSize: {
            get: function() {
                return this.Da;
            },
            set: function(a1) {
                this.Da.set(a1);
            }
        },
        subtreeOffset: {
            get: function() {
                return this.la;
            },
            set: function(a1) {
                this.la.set(a1);
            }
        }
    });
    Yt.className = "TreeVertex";
    function Yu(a1) {
        zq.call(this, a1);
        this.Zt = new J(0, 0);
    }
    la(Yu, zq);
    Yu.prototype.commit = function() {
        var a1 = this.link;
        if (null !== a1 && !a1.isAvoiding) {
            var b = this.network.layout, c = null, d = null;
            switch(b.ud){
                case Tt:
                    c = this.fromVertex;
                    d = this.toVertex;
                    break;
                case $t:
                    c = this.toVertex;
                    d = this.fromVertex;
                    break;
                default:
                    C("Unhandled path value " + b.ud.toString());
            }
            if (null !== c && null !== d) {
                var e = this.Zt;
                if (0 !== e.x || 0 !== e.y || c.qA) {
                    d = c.bounds;
                    var f = Du(c), g = b.computeLayerSpacing(c), h = c.rowSpacing;
                    a1.vg();
                    var k = a1.curve === bg, l = a1.isOrthogonal, m;
                    a1.uh();
                    if (l || k) {
                        for(m = 2; 4 < a1.pointsCount;)a1.pv(2);
                        var n = a1.i(1);
                        var p = a1.i(2);
                    } else {
                        for(m = 1; 3 < a1.pointsCount;)a1.pv(1);
                        n = a1.i(0);
                        p = a1.i(a1.pointsCount - 1);
                    }
                    var q = a1.i(a1.pointsCount - 1);
                    0 === f ? (c.alignment === Fu ? (f = d.bottom + e.y, 0 === e.y && n.y > q.y + c.rowIndent && (f = Math.min(f, Math.max(n.y, f - b.computeNodeIndent(c))))) : c.alignment === Eu ? (f = d.top + e.y, 0 === e.y && n.y < q.y - c.rowIndent && (f = Math.max(f, Math.min(n.y, f + b.computeNodeIndent(c))))) : f = c.gm || c.hm && 1 === c.maxGenerationCount ? d.top - c.la.y + e.y : d.y + d.height / 2 + e.y, k ? (a1.m(m, n.x, f), m++, a1.m(m, d.right + g, f), m++, a1.m(m, d.right + g + (e.x - h) / 3, f), m++, a1.m(m, d.right + g + 2 * (e.x - h) / 3, f), m++, a1.m(m, d.right + g + (e.x - h), f), m++, a1.m(m, p.x, f)) : (l && (a1.m(m, d.right + g / 2, n.y), m++), a1.m(m, d.right + g / 2, f), m++, a1.m(m, d.right + g + e.x - (l ? h / 2 : h), f), m++, l && a1.m(m, a1.i(m - 1).x, p.y))) : 90 === f ? (c.alignment === Fu ? (f = d.right + e.x, 0 === e.x && n.x > q.x + c.rowIndent && (f = Math.min(f, Math.max(n.x, f - b.computeNodeIndent(c))))) : c.alignment === Eu ? (f = d.left + e.x, 0 === e.x && n.x < q.x - c.rowIndent && (f = Math.max(f, Math.min(n.x, f + b.computeNodeIndent(c))))) : f = c.gm || c.hm && 1 === c.maxGenerationCount ? d.left - c.la.x + e.x : d.x + d.width / 2 + e.x, k ? (a1.m(m, f, n.y), m++, a1.m(m, f, d.bottom + g), m++, a1.m(m, f, d.bottom + g + (e.y - h) / 3), m++, a1.m(m, f, d.bottom + g + 2 * (e.y - h) / 3), m++, a1.m(m, f, d.bottom + g + (e.y - h)), m++, a1.m(m, f, p.y)) : (l && (a1.m(m, n.x, d.bottom + g / 2), m++), a1.m(m, f, d.bottom + g / 2), m++, a1.m(m, f, d.bottom + g + e.y - (l ? h / 2 : h)), m++, l && a1.m(m, p.x, a1.i(m - 1).y))) : 180 === f ? (c.alignment === Fu ? (f = d.bottom + e.y, 0 === e.y && n.y > q.y + c.rowIndent && (f = Math.min(f, Math.max(n.y, f - b.computeNodeIndent(c))))) : c.alignment === Eu ? (f = d.top + e.y, 0 === e.y && n.y < q.y - c.rowIndent && (f = Math.max(f, Math.min(n.y, f + b.computeNodeIndent(c))))) : f = c.gm || c.hm && 1 === c.maxGenerationCount ? d.top - c.la.y + e.y : d.y + d.height / 2 + e.y, k ? (a1.m(m, n.x, f), m++, a1.m(m, d.left - g, f), m++, a1.m(m, d.left - g + (e.x + h) / 3, f), m++, a1.m(m, d.left - g + 2 * (e.x + h) / 3, f), m++, a1.m(m, d.left - g + (e.x + h), f), m++, a1.m(m, p.x, f)) : (l && (a1.m(m, d.left - g / 2, n.y), m++), a1.m(m, d.left - g / 2, f), m++, a1.m(m, d.left - g + e.x + (l ? h / 2 : h), f), m++, l && a1.m(m, a1.i(m - 1).x, p.y))) : 270 === f ? (c.alignment === Fu ? (f = d.right + e.x, 0 === e.x && n.x > q.x + c.rowIndent && (f = Math.min(f, Math.max(n.x, f - b.computeNodeIndent(c))))) : c.alignment === Eu ? (f = d.left + e.x, 0 === e.x && n.x < q.x - c.rowIndent && (f = Math.max(f, Math.min(n.x, f + b.computeNodeIndent(c))))) : f = c.gm || c.hm && 1 === c.maxGenerationCount ? d.left - c.la.x + e.x : d.x + d.width / 2 + e.x, k ? (a1.m(m, f, n.y), m++, a1.m(m, f, d.top - g), m++, a1.m(m, f, d.top - g + (e.y + h) / 3), m++, a1.m(m, f, d.top - g + 2 * (e.y + h) / 3), m++, a1.m(m, f, d.top - g + (e.y + h)), m++, a1.m(m, f, p.y)) : (l && (a1.m(m, n.x, d.top - g / 2), m++), a1.m(m, f, d.top - g / 2), m++, a1.m(m, f, d.top - g + e.y + (l ? h / 2 : h)), m++, l && a1.m(m, p.x, a1.i(m - 1).y))) : C("Invalid angle " + f);
                    a1.zf();
                } else e = d, a1 = this.link, d = this.network.layout, b = Du(c), b !== Du(e) && (g = d.computeLayerSpacing(c), h = c.bounds, c = e.bounds, 0 === b && c.left - h.right < g + 1 || 90 === b && c.top - h.bottom < g + 1 || 180 === b && h.left - c.right < g + 1 || 270 === b && h.top - c.bottom < g + 1 || (a1.vg(), c = a1.curve === bg, e = a1.isOrthogonal, d = su(this.fromVertex.alignment), a1.uh(), 0 === b ? (b = h.right + g / 2, c ? 4 === a1.pointsCount && (c = a1.i(3).y, a1.L(1, b - 20, a1.i(1).y), a1.m(2, b - 20, c), a1.m(3, b, c), a1.m(4, b + 20, c), a1.L(5, a1.i(5).x, c)) : e ? d ? a1.L(3, a1.i(2).x, a1.i(4).y) : 6 === a1.pointsCount && (a1.L(2, b, a1.i(2).y), a1.L(3, b, a1.i(3).y)) : 4 === a1.pointsCount ? a1.m(2, b, a1.i(2).y) : 3 === a1.pointsCount ? a1.L(1, b, a1.i(2).y) : 2 === a1.pointsCount && a1.m(1, b, a1.i(1).y)) : 90 === b ? (b = h.bottom + g / 2, c ? 4 === a1.pointsCount && (c = a1.i(3).x, a1.L(1, a1.i(1).x, b - 20), a1.m(2, c, b - 20), a1.m(3, c, b), a1.m(4, c, b + 20), a1.L(5, c, a1.i(5).y)) : e ? d ? a1.L(3, a1.i(2).x, a1.i(4).y) : 6 === a1.pointsCount && (a1.L(2, a1.i(2).x, b), a1.L(3, a1.i(3).x, b)) : 4 === a1.pointsCount ? a1.m(2, a1.i(2).x, b) : 3 === a1.pointsCount ? a1.L(1, a1.i(2).x, b) : 2 === a1.pointsCount && a1.m(1, a1.i(1).x, b)) : 180 === b ? (b = h.left - g / 2, c ? 4 === a1.pointsCount && (c = a1.i(3).y, a1.L(1, b + 20, a1.i(1).y), a1.m(2, b + 20, c), a1.m(3, b, c), a1.m(4, b - 20, c), a1.L(5, a1.i(5).x, c)) : e ? d ? a1.L(3, a1.i(2).x, a1.i(4).y) : 6 === a1.pointsCount && (a1.L(2, b, a1.i(2).y), a1.L(3, b, a1.i(3).y)) : 4 === a1.pointsCount ? a1.m(2, b, a1.i(2).y) : 3 === a1.pointsCount ? a1.L(1, b, a1.i(2).y) : 2 === a1.pointsCount && a1.m(1, b, a1.i(1).y)) : 270 === b && (b = h.top - g / 2, c ? 4 === a1.pointsCount && (c = a1.i(3).x, a1.L(1, a1.i(1).x, b + 20), a1.m(2, c, b + 20), a1.m(3, c, b), a1.m(4, c, b - 20), a1.L(5, c, a1.i(5).y)) : e ? d ? a1.L(3, a1.i(2).x, a1.i(4).y) : 6 === a1.pointsCount && (a1.L(2, a1.i(2).x, b), a1.L(3, a1.i(3).x, b)) : 4 === a1.pointsCount ? a1.m(2, a1.i(2).x, b) : 3 === a1.pointsCount ? a1.L(1, a1.i(2).x, b) : 2 === a1.pointsCount && a1.m(1, a1.i(1).x, b)), a1.zf()));
            }
        }
    };
    ma.Object.defineProperties(Yu.prototype, {
        fromVertex: {
            get: function() {
                return this.kd;
            },
            set: function(a1) {
                this.kd !== a1 && (this.kd = a1);
            }
        },
        toVertex: {
            get: function() {
                return this.qd;
            },
            set: function(a1) {
                this.qd !== a1 && (this.qd = a1);
            }
        },
        relativePoint: {
            get: function() {
                return this.Zt;
            },
            set: function(a1) {
                this.Zt.set(a1);
            }
        }
    });
    Yu.className = "TreeEdge";
    La.prototype.initializeStandardTools = function() {
        this.gb("Action", new pg, this.mouseDownTools);
        this.gb("Relinking", new Ie, this.mouseDownTools);
        this.gb("LinkReshaping", new $f, this.mouseDownTools);
        this.gb("Rotating", new ng, this.mouseDownTools);
        this.gb("Resizing", new gg, this.mouseDownTools);
        this.gb("Linking", new Tf, this.mouseMoveTools);
        this.gb("Dragging", new Ae, this.mouseMoveTools);
        this.gb("DragSelecting", new Ag, this.mouseMoveTools);
        this.gb("Panning", new Bg, this.mouseMoveTools);
        this.gb("ContextMenu", new Dg, this.mouseUpTools);
        this.gb("TextEditing", new Og, this.mouseUpTools);
        this.gb("ClickCreating", new qg, this.mouseUpTools);
        this.gb("ClickSelecting", new og, this.mouseUpTools);
    };
    In("Horizontal", new Km);
    In("Spot", new Mm);
    In("Table", new Rm);
    In("Viewbox", new Wm);
    In("TableRow", new Um);
    In("TableColumn", new Vm);
    In("Graduated", new gn);
    In("Grid", new Xm);
    oi.add("GraphLinksModel", Yq);
    oi.add("TreeModel", lr);
    var Zu = x.go, $u = {
        get licenseKey () {
            return Q.licenseKey;
        },
        set licenseKey (a){
            Q.licenseKey = a;
        },
        get version () {
            return Q.version;
        },
        Group: pf,
        EnumValue: E,
        List: F,
        Set: H,
        Map: ob,
        Point: J,
        Size: L,
        Rect: N,
        Margin: dc,
        Spot: O,
        Geometry: P,
        PathFigure: Wd,
        PathSegment: Xd,
        InputEvent: Zd,
        DiagramEvent: ae,
        ChangedEvent: be,
        Model: Z,
        GraphLinksModel: Gr,
        TreeModel: Lr,
        Binding: Gi,
        Transaction: ge,
        UndoManager: he,
        CommandHandler: Sk,
        Tool: je,
        DraggingTool: Ae,
        DraggingInfo: Je,
        DraggingOptions: Be,
        LinkingBaseTool: Af,
        LinkingTool: Tf,
        RelinkingTool: Ie,
        LinkReshapingTool: $f,
        ResizingTool: gg,
        RotatingTool: ng,
        ClickSelectingTool: og,
        ActionTool: pg,
        ClickCreatingTool: qg,
        HTMLInfo: ye,
        ContextMenuTool: Dg,
        DragSelectingTool: Ag,
        PanningTool: Bg,
        TextEditingTool: Og,
        ToolManager: La,
        Animation: jh,
        AnimationManager: fh,
        AnimationTrigger: Zh,
        Layer: di,
        Diagram: Q,
        Palette: Mk,
        Overview: Gk,
        Brush: ql,
        GraphObject: Y,
        Panel: W,
        RowColumnDefinition: Vj,
        Shape: Bf,
        TextBlock: Pg,
        Picture: dk,
        Part: U,
        Adornment: te,
        Node: V,
        Link: T,
        Placeholder: ig,
        Layout: ti,
        LayoutNetwork: vq,
        LayoutVertex: yq,
        LayoutEdge: zq,
        GridLayout: Ok,
        PanelLayout: Zl,
        CircularLayout: Mr,
        CircularNetwork: cs,
        CircularVertex: qs,
        CircularEdge: rs,
        ForceDirectedLayout: ss,
        ForceDirectedNetwork: ts,
        ForceDirectedVertex: Fs,
        ForceDirectedEdge: Gs,
        LayeredDigraphLayout: Hs,
        LayeredDigraphNetwork: Ms,
        LayeredDigraphVertex: Ot,
        LayeredDigraphEdge: Pt,
        TreeLayout: Rt,
        TreeNetwork: Xt,
        TreeVertex: Yt,
        TreeEdge: Yu
    };
    "object" === typeof Zu && Zu.version && ya("WARNING: a `go` object on the root object is already defined.  " + ("Debug" in Zu ? "debug " : "") + "version: " + Zu.version + ", replaced with version: " + $u.version);
    Q.prototype.go = $u;
    x.go = $u;
    "object" === typeof module.exports && (module.exports = "undefined" !== typeof global ? global.go : self.go);
})();
exports.default = typeof global !== "undefined" ? global.go : self.go;
const go = typeof global !== "undefined" ? global.go : self.go;
const Group = go.Group;
const EnumValue = go.EnumValue;
const List = go.List;
const Set = go.Set;
const Map = go.Map;
const Point = go.Point;
const Size = go.Size;
const Rect = go.Rect;
const Margin = go.Margin;
const Spot = go.Spot;
const Geometry = go.Geometry;
const PathFigure = go.PathFigure;
const PathSegment = go.PathSegment;
const InputEvent = go.InputEvent;
const DiagramEvent = go.DiagramEvent;
const ChangedEvent = go.ChangedEvent;
const Model = go.Model;
const GraphLinksModel = go.GraphLinksModel;
const TreeModel = go.TreeModel;
const Binding = go.Binding;
const Transaction = go.Transaction;
const UndoManager = go.UndoManager;
const CommandHandler = go.CommandHandler;
const Tool = go.Tool;
const DraggingTool = go.DraggingTool;
const DraggingInfo = go.DraggingInfo;
const LinkingBaseTool = go.LinkingBaseTool;
const LinkingTool = go.LinkingTool;
const RelinkingTool = go.RelinkingTool;
const LinkReshapingTool = go.LinkReshapingTool;
const ResizingTool = go.ResizingTool;
const RotatingTool = go.RotatingTool;
const ClickSelectingTool = go.ClickSelectingTool;
const ActionTool = go.ActionTool;
const ClickCreatingTool = go.ClickCreatingTool;
const HTMLInfo = go.HTMLInfo;
const ContextMenuTool = go.ContextMenuTool;
const DragSelectingTool = go.DragSelectingTool;
const PanningTool = go.PanningTool;
const TextEditingTool = go.TextEditingTool;
const ToolManager = go.ToolManager;
const Animation = go.Animation;
const AnimationManager = go.AnimationManager;
const AnimationTrigger = go.AnimationTrigger;
const Layer = go.Layer;
const Diagram = go.Diagram;
const Palette = go.Palette;
const Overview = go.Overview;
const Brush = go.Brush;
const GraphObject = go.GraphObject;
const Panel = go.Panel;
const RowColumnDefinition = go.RowColumnDefinition;
const Shape = go.Shape;
const TextBlock = go.TextBlock;
const TextBlockMetrics = go.TextBlockMetrics;
const Picture = go.Picture;
const Part = go.Part;
const Adornment = go.Adornment;
const Node = go.Node;
const Link = go.Link;
const Placeholder = go.Placeholder;
const Layout = go.Layout;
const LayoutNetwork = go.LayoutNetwork;
const LayoutVertex = go.LayoutVertex;
const LayoutEdge = go.LayoutEdge;
const GridLayout = go.GridLayout;
const PanelLayout = go.PanelLayout;
const CircularLayout = go.CircularLayout;
const CircularNetwork = go.CircularNetwork;
const CircularVertex = go.CircularVertex;
const CircularEdge = go.CircularEdge;
const ForceDirectedLayout = go.ForceDirectedLayout;
const ForceDirectedNetwork = go.ForceDirectedNetwork;
const ForceDirectedVertex = go.ForceDirectedVertex;
const ForceDirectedEdge = go.ForceDirectedEdge;
const LayeredDigraphLayout = go.LayeredDigraphLayout;
const LayeredDigraphNetwork = go.LayeredDigraphNetwork;
const LayeredDigraphVertex = go.LayeredDigraphVertex;
const LayeredDigraphEdge = go.LayeredDigraphEdge;
const TreeLayout = go.TreeLayout;
const TreeNetwork = go.TreeNetwork;
const TreeVertex = go.TreeVertex;
const TreeEdge = go.TreeEdge;
const version = go.version;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}]},["46McK","1SICI"], "1SICI", "parcelRequire10c2")

//# sourceMappingURL=index.18dbc454.js.map
